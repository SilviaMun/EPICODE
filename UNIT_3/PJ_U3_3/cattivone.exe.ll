source_filename = "test"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_IO_FILE = type { i32 }
%_WSABUF = type { i32, i8* }
%_OVERLAPPED = type { i32, i32, i32, i32* }
%_RTL_CRITICAL_SECTION = type { %_RTL_CRITICAL_SECTION_DEBUG*, i32, i32, i32*, i32*, i32 }
%_RTL_CRITICAL_SECTION_DEBUG = type { i16, i16, %_RTL_CRITICAL_SECTION*, %_LIST_ENTRY, i32, i32, i32, i16, i16 }
%_LIST_ENTRY = type { %_LIST_ENTRY*, %_LIST_ENTRY* }

@global_var_4102d4 = global i32 0
@global_var_414049 = local_unnamed_addr global i32 0
@global_var_411804 = local_unnamed_addr global i32 0
@global_var_413c46 = local_unnamed_addr global i32 0
@global_var_40d0ec = local_unnamed_addr global [15 x i8] c" of arguments\0A\00"
@global_var_41026c = local_unnamed_addr global i32 0
@global_var_410231 = local_unnamed_addr constant [8 x i8] c"dvapi32\00"
@global_var_410bb8 = local_unnamed_addr global i32 0
@global_var_40cc1c = local_unnamed_addr constant [8 x i8] c"tringsW\00"
@global_var_40d020 = local_unnamed_addr global i32 1
@global_var_411260 = local_unnamed_addr global i32 0
@global_var_413820 = local_unnamed_addr global i32 0
@global_var_41026b = local_unnamed_addr global i32 0
@global_var_410260 = local_unnamed_addr global i32 0
@global_var_413840 = local_unnamed_addr global i32 0
@global_var_40d19c = constant [3 x i8] c"\0D\0A\00"
@global_var_40d190 = constant [9 x i8] c"Cookie: \00"
@global_var_40d1a3 = constant [22 x i8] c"not mix PUT and HEAD\0A\00"
@global_var_413e84 = local_unnamed_addr global i32 0
@global_var_410280 = local_unnamed_addr global i32 0
@global_var_4117e8 = local_unnamed_addr global i32 0
@global_var_40d062 = local_unnamed_addr constant [62 x i8] c" use concurrency level greater than total number of requests\0A\00"
@global_var_40f680 = local_unnamed_addr global [24 x i8] c"et is already connected\00"
@global_var_40d254 = local_unnamed_addr constant [32 x i8] c"Total of %d requests completed\0A\00"
@global_var_410278 = global i32 0
@global_var_410bb4 = local_unnamed_addr global i32 0
@global_var_40d498 = local_unnamed_addr constant [17 x i8] c"Benchmarking %s \00"
@global_var_410b0d = local_unnamed_addr global i32 0
@global_var_413874 = local_unnamed_addr global i32 0
@global_var_40fa0e = local_unnamed_addr constant [36 x i8] c"signifies an initialized error code\00"
@global_var_40d364 = constant [18 x i8] c"Request too long\0A\00"
@global_var_41022b = local_unnamed_addr constant [5 x i8] c"sock\00"
@global_var_40c0f7 = local_unnamed_addr constant i32 13318144
@global_var_410be0 = global i32 0
@global_var_40d030 = local_unnamed_addr global i32* @global_var_410be0
@global_var_40d031 = local_unnamed_addr constant [3 x i8] c"\0BA\00"
@global_var_4102a8 = local_unnamed_addr global i32 0
@global_var_40d280 = constant [22 x i8] c"Finished %d requests\0A\00"
@global_var_410ba0 = local_unnamed_addr global i32 0
@global_var_410270 = local_unnamed_addr global i32 0
@global_var_4102bc = local_unnamed_addr global i32 0
@global_var_410bc0 = local_unnamed_addr global i32 0
@global_var_411800 = local_unnamed_addr global i32 0
@global_var_40d480 = global i32 10
@global_var_40df40 = constant [28 x i8] c"Document Path:          %s\0A\00"
@global_var_40df1c = local_unnamed_addr constant [34 x i8] c"Document Length:        %u bytes\0A\00"
@global_var_40f7f5 = constant [14 x i8] c"not supported\00"
@global_var_40de48 = constant [28 x i8] c"Write errors:           %d\0A\00"
@global_var_40de9f = local_unnamed_addr global i32 1767982592
@global_var_40dde8 = local_unnamed_addr constant [37 x i8] c"Total transferred:      %I64d bytes\0A\00"
@global_var_4102a4 = local_unnamed_addr global i32 0
@global_var_40ddc8 = local_unnamed_addr constant [31 x i8] c"Total POSTed:           %I64d\0A\00"
@global_var_40dc7c = constant [40 x i8] c"                        %.2f kb/s sent\0A\00"
@global_var_4102a0 = global i32 0
@global_var_410bc8 = global i32 0
@global_var_410234 = local_unnamed_addr constant [5 x i8] c"pi32\00"
@global_var_410b1c = global i32 0
@global_var_410b99 = local_unnamed_addr global i32 0
@global_var_403210 = local_unnamed_addr constant i32 495663104
@global_var_40d750 = constant [136 x i8] c"ERROR: The median and mean for the total time are more than twice the standard\0A       deviation apart. These results are NOT reliable.\0A\00"
@global_var_40d6c0 = constant [137 x i8] c"WARNING: The median and mean for the total time are not within a normal deviation\0A        These results are probably not that reliable.\0A\00"
@global_var_40d658 = constant [33 x i8] c"Processing: %5I64d %5I64d%5I64d\0A\00"
@global_var_40d5f4 = constant [63 x i8] c"\0APercentage of the requests served within a certain time (ms)\0A\00"
@global_var_40d034 = local_unnamed_addr global i32 50
@global_var_40d5bc = constant [34 x i8] c" 100%%  %5I64d (longest request)\0A\00"
@global_var_410255 = global i32 0
@global_var_40d58c = local_unnamed_addr constant [28 x i8] c"Cannot open CSV output file\00"
@global_var_410bb2 = local_unnamed_addr global i32 0
@global_var_410275 = local_unnamed_addr global i32 0
@global_var_40d514 = constant [42 x i8] c"starttime\09seconds\09ctime\09dtime\09ttime\09wait\0A\00"
@global_var_411727 = global i32 0
@global_var_40e460 = local_unnamed_addr constant [78 x i8] c"<tr %s><th colspan=2 %s>Non-2xx responses:</th><td colspan=2 %s>%d</td></tr>\0A\00"
@global_var_40e410 = local_unnamed_addr constant [80 x i8] c"<tr %s><th colspan=2 %s>Keep-Alive requests:</th><td colspan=2 %s>%d</td></tr>\0A\00"
@global_var_41024f = local_unnamed_addr global i32 256
@global_var_410ba8 = local_unnamed_addr global i32 0
@global_var_40e1b8 = local_unnamed_addr constant [78 x i8] c"<tr %s><td colspan=2 %s>&nbsp;</td><td colspan=2 %s>%.2f kb/s sent</td></tr>\0A\00"
@global_var_40e080 = constant [88 x i8] c"<tr %s><th %s>Connect:</th><td %s>%5I64d</td><td %s>%5I64d</td><td %s>%5I64d</td></tr>\0A\00"
@global_var_410b9f = local_unnamed_addr global i32 0
@global_var_40e0ec = local_unnamed_addr constant [64 x i8] c"</th> <th %s>min</th>   <th %s>avg</th>   <th %s>max</th></tr>\0A\00"
@global_var_4102b4 = local_unnamed_addr global i32 0
@global_var_41028c = local_unnamed_addr global i32 0
@global_var_4102c0 = local_unnamed_addr global i32 0
@global_var_405510 = local_unnamed_addr constant [3 x i8] c"N(\00"
@global_var_4117f8 = local_unnamed_addr global i32 0
@global_var_41025c = local_unnamed_addr global i32 0
@global_var_410290 = local_unnamed_addr global i32 0
@global_var_410294 = local_unnamed_addr global i32 0
@global_var_40e8f0 = constant [26 x i8] c"LOG: header received:\0A%s\0A\00"
@global_var_40e8d4 = constant [4 x i8] c"500\00"
@global_var_410f37 = local_unnamed_addr global i32 0
@global_var_40e8ac = constant [37 x i8] c"WARNING: Response code not 2xx (%s)\0A\00"
@global_var_40d084 = local_unnamed_addr constant [28 x i8] c"n total number of requests\0A\00"
@global_var_4102ea = local_unnamed_addr global i32 0
@global_var_40f094 = local_unnamed_addr constant [58 x i8] c"    -T content-type Content-type header for POSTing, eg.\0A\00"
@global_var_40c0a6 = local_unnamed_addr constant i32 -843055104
@global_var_40f028 = local_unnamed_addr constant [45 x i8] c"                    Default is 'text/plain'\0A\00"
@global_var_40ef84 = local_unnamed_addr constant [45 x i8] c"    -i              Use HEAD instead of GET\0A\00"
@global_var_40ef48 = local_unnamed_addr constant [58 x i8] c"    -x attributes   String to insert as table attributes\0A\00"
@global_var_40ee90 = local_unnamed_addr constant [64 x i8] c"    -C attribute    Add cookie, eg. 'Apache=1234. (repeatable)\0A\00"
@global_var_40edf0 = local_unnamed_addr constant [74 x i8] c"                    Inserted after all normal header lines. (repeatable)\0A\00"
@global_var_40ed18 = local_unnamed_addr constant [68 x i8] c"    -P attribute    Add Basic Proxy Authentication, the attributes\0A\00"
@global_var_40ed60 = local_unnamed_addr constant [66 x i8] c"                    are a colon separated username and password.\0A\00"
@global_var_40f2d8 = local_unnamed_addr constant [8 x i8] c"http://\00"
@global_var_411801 = local_unnamed_addr global i32 0
@global_var_40f2d0 = constant [5 x i8] c"[%s]\00"
@global_var_40c19e = local_unnamed_addr constant i32 458752
@global_var_410b6e = local_unnamed_addr global i32 0
@global_var_4102d8 = local_unnamed_addr global i32 0
@global_var_4102e0 = local_unnamed_addr global i32 0
@global_var_411017 = global i32 0
@global_var_40f3bc = constant [5 x i8] c"  - \00"
@global_var_40f3a4 = local_unnamed_addr constant [5 x i8] c"****\00"
@global_var_40f3ab = local_unnamed_addr global i32 1681073408
@global_var_410301 = local_unnamed_addr global i32 0
@global_var_410358 = local_unnamed_addr global i32 0
@global_var_40c0bd = constant i32 872415438
@global_var_40f630 = local_unnamed_addr constant [14 x i8] c" can't splice\00"
@global_var_40c196 = local_unnamed_addr constant i32 -810549248
@global_var_40c1d8 = constant i32 -2147483537
@global_var_4104ec = local_unnamed_addr global i32 0
@global_var_410a40 = local_unnamed_addr global i32 0
@global_var_40f5c6 = local_unnamed_addr constant [5 x i8] c"long\00"
@global_var_410085 = local_unnamed_addr constant [32 x i8] c" new pool could not be created.\00"
@global_var_410075 = constant [13 x i8] c"een provided\00"
@global_var_4100f4 = local_unnamed_addr global i32 0
@global_var_40ff50 = constant [53 x i8] c"No poll structure was provided and one was required.\00"
@global_var_40feb4 = constant [59 x i8] c"No thread key structure was provided and one was required.\00"
@global_var_40fe2c = constant [39 x i8] c"The specified network mask is invalid.\00"
@global_var_40fe10 = local_unnamed_addr constant [27 x i8] c"The given path is absolute\00"
@global_var_40fdf6 = constant [25 x i8] c"e given path is relative\00"
@global_var_40fdac = constant [39 x i8] c"The given path was above the root path\00"
@global_var_40fd6c = constant [63 x i8] c"The given path is misformatted or contained invalid characters\00"
@global_var_40fd1c = constant [31 x i8] c"The process is not recognized.\00"
@global_var_40fd0c = constant [15 x i8] c"Internal error\00"
@global_var_40fbbc = constant [50 x i8] c"The specified child process is not done executing\00"
@global_var_40f9b4 = constant [56 x i8] c"This function has not been implemented on this platform\00"
@global_var_40c1b4 = constant i32 -2147483636
@global_var_40c1e5 = local_unnamed_addr constant i32 4899200
@global_var_40c4d8 = local_unnamed_addr constant [4 x i8] c"Sun\00"
@global_var_4100cc = global [9 x i16] %wide-string
@global_var_40c0f6 = constant i32 -885522432
@global_var_40c083 = local_unnamed_addr constant i32 13437952
@global_var_4108d1 = local_unnamed_addr global i32 0
@global_var_410660 = local_unnamed_addr global i32 0
@global_var_41018c = constant [27 x i8] c"GetEffectiveRightsFromAclW\00"
@global_var_410648 = local_unnamed_addr global i32 0
@global_var_410684 = local_unnamed_addr global i32 0
@global_var_40d898 = constant [90 x i8] c"are more than twice the standard\0A       deviation apart. These results are NOT reliable.\0A\00"
@global_var_410728 = local_unnamed_addr global i32 0
@global_var_40c025 = local_unnamed_addr constant i32 -570425138
@global_var_410753 = global i32 0
@global_var_41075b = local_unnamed_addr global i32 0
@global_var_40f568 = local_unnamed_addr constant [3 x i8] c"rs\00"
@global_var_4108e0 = local_unnamed_addr global i32 0
@global_var_409a98 = local_unnamed_addr constant i32 4243581
@global_var_410960 = global i32 0
@global_var_4100ec = constant [9 x i8] c"CancelIo\00"
@B64EncodeTable_at_40c718 = constant [64 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
@global_var_414054 = local_unnamed_addr global i32 0
@global_var_414058 = local_unnamed_addr global i32 0
@global_var_410b94 = local_unnamed_addr global i32 0
@global_var_410250 = local_unnamed_addr global i32 1
@global_var_40d00c = global i32 0
@global_var_40d023 = global i32 0
@global_var_40d0cf = constant [10 x i8] c"alid URL\0A\00"
@global_var_40d0a4 = constant [35 x i8] c"Invalid Concurrency [Range 0..%d]\0A\00"
@0 = external global i32
@global_var_4117f0 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_40d010 = local_unnamed_addr global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_414048 = local_unnamed_addr global i8 0
@global_var_410288 = external local_unnamed_addr global i8*
@2 = internal constant [2 x i8] c"\01\00"
@global_var_40d018 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_4102ac = external global i8*
@global_var_4117f4 = local_unnamed_addr global i16 0
@global_var_410bdb = local_unnamed_addr global i16 0
@global_var_410ba4 = external global i8*
@global_var_40d02c = local_unnamed_addr global i8 0
@global_var_4102b8 = local_unnamed_addr global i8 0
@global_var_4102fe = local_unnamed_addr global i8 0
@global_var_40c250 = local_unnamed_addr constant double 0x9700000078
@global_var_41404c = local_unnamed_addr global i8 0
@global_var_41402d = local_unnamed_addr global i16 0
@global_var_40f3c0 = local_unnamed_addr global i8 0
@global_var_4108dc = external local_unnamed_addr global i8*
@global_var_41080c = local_unnamed_addr global i8 0
@global_var_411a50 = external global i8*

declare i32 @unknown_6d65() local_unnamed_addr

declare i32 @unknown_abc3c() local_unnamed_addr

declare i32 @unknown_d8b80(i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_2540ae() local_unnamed_addr

declare i32 @unknown_3f4e90() local_unnamed_addr

declare i32 @unknown_3fbc10(i32, i32, i32*, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_3fd950() local_unnamed_addr

declare i32 @unknown_3fef80(i32, i32, i32) local_unnamed_addr

define i32 @function_401000() local_unnamed_addr {
dec_label_pc_401000:
  %stack_var_8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_4102d4 to i32), i32* inttoptr (i32 1561008099 to i32*), align 4, !insn.addr !0
  store i32 ptrtoint (i32* @global_var_4102d4 to i32), i32* inttoptr (i32 4293564 to i32*), align 4, !insn.addr !1
  store i32 ptrtoint (i32* @global_var_4102d4 to i32), i32* @global_var_414049, align 4, !insn.addr !2
  store i32 ptrtoint (i32* @global_var_4102d4 to i32), i32* @global_var_411804, align 4, !insn.addr !3
  store i32 ptrtoint (i32* @global_var_4102d4 to i32), i32* inttoptr (i32 4323400 to i32*), align 8, !insn.addr !4
  %0 = ptrtoint i32* %stack_var_8 to i32, !insn.addr !5
  ret i32 %0, !insn.addr !6
}

define i32 @function_401032() local_unnamed_addr {
dec_label_pc_401032:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = add i32 %2, 81, !insn.addr !7
  %5 = inttoptr i32 %4 to i8*, !insn.addr !7
  %6 = load i8, i8* %5, align 1, !insn.addr !7
  %7 = trunc i32 %0 to i8, !insn.addr !7
  %8 = or i8 %6, %7, !insn.addr !7
  store i8 %8, i8* %5, align 1, !insn.addr !7
  %9 = call i32 @__asm_wait(), !insn.addr !8
  %10 = trunc i32 %1 to i8, !insn.addr !9
  %11 = and i8 %10, 31, !insn.addr !9
  %12 = icmp eq i8 %11, 0, !insn.addr !9
  br i1 %12, label %21, label %13, !insn.addr !9

; <label>:13:                                     ; preds = %dec_label_pc_401032
  %14 = add i32 %9, ptrtoint (i8** @global_var_4117f0 to i32), !insn.addr !10
  %15 = inttoptr i32 %14 to i8*, !insn.addr !9
  %16 = load i8, i8* %15, align 1, !insn.addr !9
  %17 = shl i8 %16, %11, !insn.addr !9
  %18 = sub nsw i8 8, %11, !insn.addr !9
  %19 = lshr i8 %16, %18, !insn.addr !9
  %20 = or i8 %19, %17, !insn.addr !9
  store i8 %20, i8* %15, align 1, !insn.addr !9
  br label %21, !insn.addr !9

; <label>:21:                                     ; preds = %dec_label_pc_401032, %13
  %22 = call i32 @unknown_da5d23(i16 %3), !insn.addr !11
  ret i32 %22, !insn.addr !12
}

define i32 @function_401067() local_unnamed_addr {
dec_label_pc_401067:
  %0 = call i32 @function_41805c89(), !insn.addr !13
  ret i32 %0, !insn.addr !13
}

define i32 @function_4010c7() local_unnamed_addr {
dec_label_pc_4010c7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %0, -125, !insn.addr !14
  %5 = inttoptr i32 %4 to i8*, !insn.addr !14
  %6 = load i8, i8* %5, align 1, !insn.addr !14
  %7 = zext i1 %3 to i8, !insn.addr !14
  %8 = udiv i8 %6, 2, !insn.addr !14
  %9 = shl nuw i8 %7, 7, !insn.addr !14
  %10 = or i8 %9, %8, !insn.addr !14
  store i8 %10, i8* %5, align 1, !insn.addr !14
  %11 = mul i32 %2, 8, !insn.addr !15
  %12 = add i32 %11, %1, !insn.addr !15
  %13 = inttoptr i32 %12 to i32*, !insn.addr !15
  %14 = load i32, i32* %13, align 4, !insn.addr !15
  ret i32 %14, !insn.addr !16
}

define i32 @function_4010ce() local_unnamed_addr {
dec_label_pc_4010ce:
  %eax.0.reg2mem = alloca i32, !insn.addr !17
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = icmp eq i1 %5, %4, !insn.addr !18
  %8 = icmp eq i1 %6, false, !insn.addr !18
  %9 = icmp eq i1 %7, %8, !insn.addr !18
  br i1 %9, label %10, label %dec_label_pc_4010d9, !insn.addr !18

; <label>:10:                                     ; preds = %dec_label_pc_4010ce
  %11 = call i32 @function_409216(), !insn.addr !18
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !18
  br label %dec_label_pc_4010d9, !insn.addr !18

dec_label_pc_4010d9:                              ; preds = %10, %dec_label_pc_4010ce
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %12 = xor i32 %eax.0.reload, %0, !insn.addr !19
  %13 = mul i32 %1, 2, !insn.addr !20
  %14 = lshr i32 %1, 31, !insn.addr !20
  %15 = or i32 %14, %13, !insn.addr !20
  %16 = inttoptr i32 %1 to i32*, !insn.addr !20
  store i32 %15, i32* %16, align 4, !insn.addr !20
  %17 = udiv i32 %2, 256, !insn.addr !21
  %18 = add i32 %eax.0.reload, %17, !insn.addr !21
  %19 = and i32 %18, 255, !insn.addr !21
  %20 = and i32 %eax.0.reload, -256, !insn.addr !21
  %21 = or i32 %19, %20, !insn.addr !21
  %22 = trunc i32 %1 to i16, !insn.addr !22
  %23 = call i32 @__asm_insd(i16 %22), !insn.addr !22
  %24 = inttoptr i32 %12 to i32*, !insn.addr !22
  store i32 %23, i32* %24, align 4, !insn.addr !22
  %25 = inttoptr i32 %21 to i8*, !insn.addr !23
  %26 = load i8, i8* %25, align 1, !insn.addr !23
  %27 = trunc i32 %18 to i8, !insn.addr !23
  %28 = add i8 %26, %27, !insn.addr !23
  store i8 %28, i8* %25, align 1, !insn.addr !23
  %29 = call i32 @function_401513(i16 %3), !insn.addr !24
  ret i32 %29, !insn.addr !24
}

define i32 @function_4010e9() local_unnamed_addr {
dec_label_pc_4010e9:
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 69200128, !insn.addr !25
  %4 = inttoptr i32 %3 to i8*, !insn.addr !25
  %5 = load i8, i8* %4, align 1, !insn.addr !25
  %6 = trunc i32 %2 to i8, !insn.addr !25
  %7 = add i8 %5, %6, !insn.addr !25
  store i8 %7, i8* %4, align 1, !insn.addr !25
  %8 = bitcast i32* %esi to i8*
  %9 = load i8, i8* %8, align 4, !insn.addr !26
  %10 = trunc i32 %0 to i8, !insn.addr !26
  %11 = add i8 %9, %10, !insn.addr !26
  %12 = inttoptr i32 %0 to i8*, !insn.addr !26
  store i8 %11, i8* %12, align 1, !insn.addr !26
  %13 = call i32 @function_4015e6(i32 22996226), !insn.addr !27
  ret i32 %13, !insn.addr !27
}

define i32 @function_401107() local_unnamed_addr {
dec_label_pc_401107:
  %0 = call i32 @function_ecc6d278(), !insn.addr !28
  ret i32 %0, !insn.addr !28
}

define i32 @function_40110c() local_unnamed_addr {
dec_label_pc_40110c:
  %0 = call i32 @function_40d413(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !29
  ret i32 %0, !insn.addr !29
}

define i32 @function_401116() local_unnamed_addr {
dec_label_pc_401116:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  call void @__asm_out.1(i32 255, i32 %0), !insn.addr !30
  %2 = zext i1 %1 to i32, !insn.addr !31
  %3 = add i32 %0, 13091180, !insn.addr !31
  %4 = add i32 %3, %2, !insn.addr !31
  store i32 %4, i32* @global_var_41026c, align 4, !insn.addr !32
  %5 = call i32 @function_401513(i16 ptrtoint (i32* @0 to i16)), !insn.addr !33
  ret i32 %5, !insn.addr !33
}

define i32 @function_40112a() local_unnamed_addr {
dec_label_pc_40112a:
  %eax.0.reg2mem = alloca i32, !insn.addr !34
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = icmp sgt i32 %0, 1885435491, !insn.addr !35
  br i1 %2, label %dec_label_pc_40113f, label %dec_label_pc_401132, !insn.addr !35

dec_label_pc_401132:                              ; preds = %dec_label_pc_40112a
  %3 = call i32 @unknown_5a1750(i32 15847896), !insn.addr !36
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !37
  br label %dec_label_pc_40113f, !insn.addr !37

dec_label_pc_40113f:                              ; preds = %dec_label_pc_401132, %dec_label_pc_40112a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 -2031617, i32* inttoptr (i32 -213843360 to i32*), align 32, !insn.addr !38
  call void @__asm_int(i32 200), !insn.addr !39
  store i32 %eax.0.reload, i32* @global_var_410bb8, align 4, !insn.addr !40
  %4 = call i32 @function_431513(i32 %1), !insn.addr !41
  ret i32 %4, !insn.addr !41
}

define i32 @function_401162() local_unnamed_addr {
dec_label_pc_401162:
  %0 = call i32 @function_1101516(), !insn.addr !42
  ret i32 %0, !insn.addr !42
}

define i32 @function_40116d() local_unnamed_addr {
dec_label_pc_40116d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -118, !insn.addr !43
  %2 = inttoptr i32 %1 to i32*, !insn.addr !43
  %3 = load i32, i32* %2, align 4, !insn.addr !43
  %4 = call i32 @unknown_43207475(i32 %3), !insn.addr !44
  store i32 %4, i32* inttoptr (i32 -1975445536 to i32*), align 32, !insn.addr !45
  %5 = call i32 @function_401513(i16 ptrtoint (i32* @0 to i16)), !insn.addr !46
  ret i32 %5, !insn.addr !46
}

define i32 @function_401181() local_unnamed_addr {
dec_label_pc_401181:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !47
}

define i32 @function_40118c(i32 %arg1) local_unnamed_addr {
dec_label_pc_40118c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_5c341750(i32 7000508), !insn.addr !48
  %3 = add i32 %1, -1019542332, !insn.addr !49
  %4 = inttoptr i32 %3 to i8*, !insn.addr !49
  %5 = load i8, i8* %4, align 1, !insn.addr !49
  %6 = trunc i32 %2 to i8, !insn.addr !49
  %7 = add i8 %5, %6, !insn.addr !49
  %8 = icmp eq i8 %7, 0, !insn.addr !49
  store i8 %7, i8* %4, align 1, !insn.addr !49
  %9 = icmp eq i1 %8, false, !insn.addr !50
  br i1 %9, label %dec_label_pc_4011c0, label %dec_label_pc_4011b1, !insn.addr !50

dec_label_pc_4011b1:                              ; preds = %dec_label_pc_40118c
  store i32 -1543503871, i32* @global_var_411260, align 4, !insn.addr !51
  ret i32 %2, !insn.addr !52

dec_label_pc_4011c0:                              ; preds = %dec_label_pc_40118c
  %10 = call i32 @__asm_wait(), !insn.addr !53
  %11 = load i32, i32* inttoptr (i32 -1005496970 to i32*), align 4, !insn.addr !54
  %12 = mul i32 %11, 4, !insn.addr !54
  %13 = add i32 %0, -117, !insn.addr !55
  %14 = inttoptr i32 %13 to i32*, !insn.addr !55
  %15 = load i32, i32* %14, align 4, !insn.addr !55
  %16 = inttoptr i32 %12 to i8*, !insn.addr !56
  %17 = load i8, i8* %16, align 4, !insn.addr !56
  %18 = trunc i32 %12 to i8, !insn.addr !56
  %19 = add i8 %17, %18, !insn.addr !56
  store i8 %19, i8* %16, align 4, !insn.addr !56
  %20 = icmp eq i32 %12, %1, !insn.addr !57
  %21 = icmp eq i1 %20, false, !insn.addr !58
  br i1 %21, label %dec_label_pc_401217, label %dec_label_pc_4011f8, !insn.addr !58

dec_label_pc_4011f8:                              ; preds = %dec_label_pc_4011c0
  store i32 11337730, i32* @global_var_410260, align 4, !insn.addr !59
  %22 = call i32 @function_408316(i32 ptrtoint (i32* @0 to i32)), !insn.addr !60
  ret i32 %22, !insn.addr !60

dec_label_pc_401217:                              ; preds = %dec_label_pc_4011c0
  %23 = and i8 %19, 41, !insn.addr !61
  store i8 %23, i8* %16, align 4, !insn.addr !61
  %24 = add i32 %15, 65, !insn.addr !62
  %25 = add i32 %24, %12, !insn.addr !62
  %26 = inttoptr i32 %25 to i8*, !insn.addr !62
  %27 = load i8, i8* %26, align 1, !insn.addr !62
  %28 = zext i8 %27 to i32, !insn.addr !62
  %29 = and i32 %1, -256, !insn.addr !62
  %30 = or i32 %29, %28, !insn.addr !62
  %31 = trunc i32 %15 to i16, !insn.addr !63
  %32 = call i32 @__asm_in(i16 %31), !insn.addr !63
  %33 = add i32 %30, 760282181, !insn.addr !64
  %34 = inttoptr i32 %33 to i8*, !insn.addr !64
  %35 = load i8, i8* %34, align 1, !insn.addr !64
  %36 = add i8 %35, 53, !insn.addr !64
  store i8 %36, i8* %34, align 1, !insn.addr !64
  %37 = add i32 %30, 4285272, !insn.addr !65
  %38 = inttoptr i32 %37 to i8*, !insn.addr !65
  %39 = load i8, i8* %38, align 1, !insn.addr !65
  %40 = udiv i32 %32, 256, !insn.addr !65
  %41 = trunc i32 %40 to i8, !insn.addr !65
  %42 = add i8 %39, %41, !insn.addr !65
  store i8 %42, i8* %38, align 1, !insn.addr !65
  %43 = call i32 @function_401513(i16 ptrtoint (i32* @0 to i16)), !insn.addr !66
  ret i32 %43, !insn.addr !66
}

define i32 @function_40123d() local_unnamed_addr {
dec_label_pc_40123d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -4, !insn.addr !67
  %2 = inttoptr i32 %1 to i32*, !insn.addr !67
  %3 = load i32, i32* %2, align 4, !insn.addr !67
  store i8* inttoptr (i32 61520 to i8*), i8** @global_var_40d010, align 4, !insn.addr !68
  %4 = call i32 @function_a9401513(i32 %3), !insn.addr !69
  ret i32 %4, !insn.addr !69
}

define i32 @function_40125b(i32 %arg1) local_unnamed_addr {
dec_label_pc_40125b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -4, !insn.addr !70
  %2 = inttoptr i32 %1 to i32*, !insn.addr !70
  %3 = load i32, i32* %2, align 4, !insn.addr !70
  %4 = or i32 %3, 2, !insn.addr !71
  %5 = add i32 %4, 1, !insn.addr !72
  ret i32 %5, !insn.addr !73
}

define i32 @function_40126d() local_unnamed_addr {
dec_label_pc_40126d:
  %0 = call i32 @function_406e16(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !74
  ret i32 %0, !insn.addr !74
}

define i32 @function_401274() local_unnamed_addr {
dec_label_pc_401274:
  %eax.0.reg2mem = alloca i32, !insn.addr !75
  %esp.0.reg2mem = alloca i32, !insn.addr !75
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-12 = alloca i8*, align 4
  %5 = add i32 %2, -1, !insn.addr !76
  %6 = icmp eq i32 %5, 0, !insn.addr !76
  br i1 %6, label %dec_label_pc_401279, label %dec_label_pc_4012c5, !insn.addr !76

dec_label_pc_401279:                              ; preds = %dec_label_pc_401274
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_40d190, i32 0, i32 0), i8** %stack_var_-12, align 4, !insn.addr !77
  %7 = ptrtoint i8** %stack_var_-12 to i32, !insn.addr !77
  %8 = add i32 %0, -4, !insn.addr !78
  %9 = inttoptr i32 %8 to i32*, !insn.addr !78
  %10 = add i32 %1, 293495097, !insn.addr !79
  %11 = inttoptr i32 %10 to i8*, !insn.addr !79
  store i32 %7, i32* %esp.0.reg2mem, !insn.addr !77
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !77
  br label %dec_label_pc_401288, !insn.addr !77

dec_label_pc_401288:                              ; preds = %dec_label_pc_401288, %dec_label_pc_401279
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %12 = add i32 %esp.0.reload, -4, !insn.addr !80
  %13 = inttoptr i32 %12 to i32*, !insn.addr !80
  store i32 %eax.0.reload, i32* %13, align 4, !insn.addr !80
  %14 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !81
  %15 = load i8, i8* %14, align 1, !insn.addr !81
  %16 = trunc i32 %eax.0.reload to i8, !insn.addr !81
  %17 = add i8 %15, %16, !insn.addr !81
  store i8 %17, i8* %14, align 1, !insn.addr !81
  %18 = or i32 %eax.0.reload, %12, !insn.addr !82
  %19 = add i32 %18, 163, !insn.addr !83
  %20 = and i32 %19, 255, !insn.addr !83
  %21 = and i32 %18, -256, !insn.addr !83
  %22 = or i32 %20, %21, !insn.addr !83
  %23 = add i32 %22, 1, !insn.addr !84
  %24 = load i32, i32* %9, align 4, !insn.addr !78
  %25 = inttoptr i32 %24 to i32*, !insn.addr !85
  %26 = load i32, i32* %25, align 4, !insn.addr !85
  %27 = add i32 %22, 193, !insn.addr !86
  %28 = and i32 %27, 255, !insn.addr !86
  %29 = and i32 %23, -256, !insn.addr !86
  %30 = or i32 %29, %28, !insn.addr !86
  %31 = load i8, i8* %11, align 1, !insn.addr !79
  %32 = trunc i32 %27 to i8, !insn.addr !79
  %33 = add i8 %31, %32, !insn.addr !79
  store i8 %33, i8* %11, align 1, !insn.addr !79
  %34 = add i32 %26, -4, !insn.addr !87
  %35 = inttoptr i32 %34 to i32*, !insn.addr !87
  store i32 8, i32* %35, align 4, !insn.addr !87
  %36 = inttoptr i32 %24 to i8*, !insn.addr !88
  %37 = load i8, i8* %36, align 1, !insn.addr !88
  %38 = zext i8 %37 to i32, !insn.addr !88
  %39 = add i32 %26, -8, !insn.addr !89
  %40 = inttoptr i32 %39 to i32*, !insn.addr !89
  store i32 %38, i32* %40, align 4, !insn.addr !89
  store i32 %39, i32* %esp.0.reg2mem
  store i32 %30, i32* %eax.0.reg2mem
  br label %dec_label_pc_401288

dec_label_pc_4012c5:                              ; preds = %dec_label_pc_401274
  %41 = add i32 %0, 6, !insn.addr !75
  %42 = inttoptr i32 %41 to i32*, !insn.addr !75
  %43 = load i32, i32* %42, align 4, !insn.addr !75
  %44 = add i32 %43, -531938812, !insn.addr !90
  %45 = inttoptr i32 %44 to i32*, !insn.addr !90
  %46 = load i32, i32* %45, align 4, !insn.addr !90
  %47 = zext i1 %4 to i32, !insn.addr !90
  %48 = add i32 %5, %47, !insn.addr !90
  %49 = add i32 %48, %46, !insn.addr !90
  store i32 %49, i32* %45, align 4, !insn.addr !90
  call void @__asm_out.1(i32 59, i32 %3), !insn.addr !91
  ret i32 %3, !insn.addr !92
}

define i32 @function_4012ce(i32 %arg1) local_unnamed_addr {
dec_label_pc_4012ce:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-12 = alloca i32, align 4
  br i1 %6, label %dec_label_pc_4012d6, label %dec_label_pc_4012d0, !insn.addr !93

dec_label_pc_4012d0:                              ; preds = %dec_label_pc_4012ce
  %7 = add i32 %0, 1, !insn.addr !94
  %8 = add i32 %1, -4, !insn.addr !95
  %9 = inttoptr i32 %8 to i32*, !insn.addr !95
  store i32 %7, i32* %9, align 4, !insn.addr !95
  ret i32 %5, !insn.addr !96

dec_label_pc_4012d6:                              ; preds = %dec_label_pc_4012ce
  %10 = or i32 %4, 123, !insn.addr !97
  %11 = trunc i32 %3 to i16, !insn.addr !98
  call void @__asm_out.3(i16 %11, i32 %5), !insn.addr !98
  %12 = call i32 @function_40b392(i32 %10), !insn.addr !99
  %13 = icmp ult i32 %12, 15664209
  br i1 %13, label %dec_label_pc_40136b, label %dec_label_pc_4012ed, !insn.addr !100

dec_label_pc_4012ed:                              ; preds = %dec_label_pc_4012d6
  %14 = call i32 @unknown_91401750(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @global_var_40d1a3, i32 0, i32 0)), !insn.addr !101
  ret i32 %14, !insn.addr !102

dec_label_pc_40136b:                              ; preds = %dec_label_pc_4012d6
  %15 = sub i32 -2, %10, !insn.addr !103
  store i32 %15, i32* %stack_var_-12, align 4, !insn.addr !104
  %16 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !104
  %17 = load i8, i8* inttoptr (i32 3997696 to i8*), align 65536, !insn.addr !105
  %18 = zext i8 %17 to i32, !insn.addr !105
  %19 = and i32 %12, -256, !insn.addr !105
  %20 = or i32 %19, %18, !insn.addr !105
  %21 = inttoptr i32 %20 to i32*, !insn.addr !106
  %22 = load i32, i32* %21, align 4, !insn.addr !106
  %23 = mul i32 %22, 888868214, !insn.addr !106
  %24 = inttoptr i32 %23 to i32*, !insn.addr !107
  %25 = load i32, i32* %24, align 4, !insn.addr !107
  %26 = mul i32 %25, 2, !insn.addr !107
  %27 = lshr i32 %25, 31, !insn.addr !107
  %28 = or i32 %27, %26, !insn.addr !107
  store i32 %28, i32* %24, align 4, !insn.addr !107
  %29 = load i32, i32* %stack_var_-12, align 4, !insn.addr !108
  %30 = call i32 @function_401750(i32 %29, i32 %2), !insn.addr !108
  %31 = add i32 %30, %16, !insn.addr !109
  %32 = inttoptr i32 %31 to i32*, !insn.addr !109
  %33 = load i32, i32* %32, align 4, !insn.addr !109
  %34 = sub i32 %33, %0, !insn.addr !109
  store i32 %34, i32* %32, align 4, !insn.addr !109
  call void @__asm_int(i32 247), !insn.addr !110
  %35 = load i32, i32* inttoptr (i32 -116 to i32*), align 4, !insn.addr !111
  %36 = udiv i32 %35, 2, !insn.addr !111
  %37 = shl i32 %35, 31, !insn.addr !111
  %38 = or i32 %36, %37, !insn.addr !111
  store i32 %38, i32* inttoptr (i32 -116 to i32*), align 4, !insn.addr !111
  %39 = call i32 @__asm_sti(), !insn.addr !112
  %40 = call i32 @__asm_iretd(), !insn.addr !113
  ret i32 %40, !insn.addr !114
}

define i32 @function_401492() local_unnamed_addr {
dec_label_pc_401492:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !115
}

define i32 @function_4014a8() local_unnamed_addr {
dec_label_pc_4014a8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = udiv i32 %0, 256, !insn.addr !116
  %3 = or i32 %2, %0
  %4 = trunc i32 %3 to i8, !insn.addr !116
  %5 = inttoptr i32 %0 to i8*, !insn.addr !116
  store i8 %4, i8* %5, align 1, !insn.addr !116
  ret i32 %1, !insn.addr !117
}

define i32 @function_4014cd() local_unnamed_addr {
dec_label_pc_4014cd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8, !insn.addr !118
  %4 = load i8, i8* inttoptr (i32 1976908354 to i8*), align 2, !insn.addr !118
  %5 = add i8 %4, %3, !insn.addr !118
  %6 = zext i8 %5 to i32, !insn.addr !118
  %7 = and i32 %2, -256, !insn.addr !118
  %8 = or i32 %7, %6, !insn.addr !118
  %9 = add i32 %1, %0, !insn.addr !119
  %10 = inttoptr i32 %1 to i32*, !insn.addr !119
  store i32 %9, i32* %10, align 4, !insn.addr !119
  ret i32 %8, !insn.addr !120
}

define i32 @function_4014df() local_unnamed_addr {
dec_label_pc_4014df:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 1, !insn.addr !121
  %4 = inttoptr i32 %3 to i8*, !insn.addr !122
  %5 = load i8, i8* %4, align 1, !insn.addr !122
  %6 = trunc i32 %2 to i8, !insn.addr !122
  %7 = trunc i32 %0 to i8, !insn.addr !123
  %8 = add i8 %6, %7, !insn.addr !122
  %9 = add i8 %8, %5, !insn.addr !123
  store i8 %9, i8* %4, align 1, !insn.addr !123
  ret i32 %2, !insn.addr !124
}

define i32 @function_4014ef() local_unnamed_addr {
dec_label_pc_4014ef:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = inttoptr i32 %0 to i8*, !insn.addr !125
  store i8 %1, i8* %2, align 1, !insn.addr !125
  ret i32 %0, !insn.addr !126
}

define i32 @function_4014f3() local_unnamed_addr {
dec_label_pc_4014f3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -35, !insn.addr !127
  %3 = inttoptr i32 %2 to i32*, !insn.addr !127
  %4 = load i32, i32* %3, align 4, !insn.addr !127
  store i8* inttoptr (i32 8454145 to i8*), i8** @global_var_410288, align 4, !insn.addr !128
  store i32 %4, i32* inttoptr (i32 16193520 to i32*), align 16, !insn.addr !129
  ret i32 %1, !insn.addr !130
}

define i32 @function_401513(i16 %arg1) local_unnamed_addr {
dec_label_pc_401513:
  %storemerge.reg2mem = alloca i32, !insn.addr !131
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %3 = call i8 @__decompiler_undefined_function_5()
  %4 = add i32 %0, -12, !insn.addr !132
  %5 = inttoptr i32 %4 to i32*, !insn.addr !132
  %6 = load i32, i32* %5, align 4, !insn.addr !132
  %7 = call i32 @__asm_sti(), !insn.addr !133
  %8 = and i32 %7, 942368847, !insn.addr !134
  %9 = add nsw i32 %8, -23, !insn.addr !135
  %10 = inttoptr i32 %9 to i8*, !insn.addr !135
  %11 = load i8, i8* %10, align 1, !insn.addr !135
  %12 = trunc i32 %6 to i8, !insn.addr !135
  %13 = add i8 %11, %12, !insn.addr !135
  store i8 %13, i8* %10, align 1, !insn.addr !135
  %14 = add i32 %0, -123, !insn.addr !136
  %15 = inttoptr i32 %14 to i8*, !insn.addr !136
  %16 = load i8, i8* %15, align 1, !insn.addr !136
  %17 = sub i8 0, %16, !insn.addr !136
  store i8 %17, i8* %15, align 1, !insn.addr !136
  %18 = icmp eq i32 %2, 1, !insn.addr !137
  br i1 %18, label %19, label %dec_label_pc_401534, !insn.addr !138

; <label>:19:                                     ; preds = %dec_label_pc_401513
  %20 = call i32 @function_34010a0(), !insn.addr !138
  br label %dec_label_pc_401534, !insn.addr !138

dec_label_pc_401534:                              ; preds = %19, %dec_label_pc_401513
  %21 = add i32 %1, 8, !insn.addr !139
  %22 = inttoptr i32 %21 to i32*, !insn.addr !139
  %23 = load i32, i32* %22, align 4, !insn.addr !139
  %24 = load i32, i32* inttoptr (i32 1681921920 to i32*), align 128, !insn.addr !140
  %25 = add i32 %6, 1, !insn.addr !141
  %26 = add i32 %2, 227216540, !insn.addr !142
  %27 = inttoptr i32 %26 to i8*, !insn.addr !142
  %28 = load i8, i8* %27, align 1, !insn.addr !142
  %29 = trunc i32 %23 to i8
  %.neg6 = sub i8 1, %29, !insn.addr !142
  %30 = add i8 %.neg6, %28, !insn.addr !142
  store i8 %30, i8* %27, align 1, !insn.addr !142
  %31 = inttoptr i32 %25 to i32*, !insn.addr !143
  %32 = load i32, i32* %31, align 4, !insn.addr !143
  %33 = icmp eq i32 %23, 21, !insn.addr !144
  br i1 %33, label %dec_label_pc_401556, label %dec_label_pc_4015be, !insn.addr !144

dec_label_pc_401556:                              ; preds = %dec_label_pc_401534
  %34 = add i32 %32, 1, !insn.addr !145
  %35 = add i32 %24, 1435227903, !insn.addr !146
  %36 = inttoptr i32 %35 to i8*, !insn.addr !146
  %37 = load i8, i8* %36, align 1, !insn.addr !146
  %38 = udiv i32 %25, 256, !insn.addr !146
  %39 = trunc i32 %38 to i8, !insn.addr !146
  %40 = add i8 %37, %39, !insn.addr !146
  store i8 %40, i8* %36, align 1, !insn.addr !146
  %41 = and i32 %34, 116, !insn.addr !147
  %42 = or i32 %41, 139, !insn.addr !147
  %43 = and i32 %34, -256, !insn.addr !147
  %44 = or i32 %42, %43, !insn.addr !147
  %45 = inttoptr i32 %44 to i8*, !insn.addr !148
  %46 = load i8, i8* %45, align 1, !insn.addr !148
  %47 = trunc i32 %42 to i8, !insn.addr !148
  %48 = add i8 %46, %47, !insn.addr !148
  store i8 %48, i8* %45, align 1, !insn.addr !148
  %49 = sext i8 %3 to i32, !insn.addr !149
  %50 = add nsw i32 %49, 12, !insn.addr !150
  %51 = inttoptr i32 %50 to i32*, !insn.addr !150
  %52 = load i32, i32* %51, align 4, !insn.addr !150
  %53 = add i32 %52, 1, !insn.addr !151
  %54 = call i32 @function_405850(i32 %1), !insn.addr !152
  %55 = udiv i32 %53, 256, !insn.addr !153
  %56 = trunc i32 %55 to i8, !insn.addr !153
  %57 = and i8 %56, 15, !insn.addr !153
  %58 = add nsw i8 %57, -3, !insn.addr !153
  %59 = icmp ugt i8 %58, 15, !insn.addr !153
  %60 = icmp ult i8 %56, -45, !insn.addr !153
  %61 = trunc i32 %54 to i8, !insn.addr !154
  %62 = and i8 %61, 14, !insn.addr !154
  %63 = icmp ugt i8 %62, 9, !insn.addr !154
  %64 = or i1 %63, %59, !insn.addr !154
  %65 = icmp ugt i8 %61, -103
  %66 = or i1 %65, %60
  br i1 %64, label %67, label %72, !insn.addr !154

; <label>:67:                                     ; preds = %dec_label_pc_401556
  %.v = select i1 %66, i32 154, i32 250
  %68 = add i32 %.v, %54, !insn.addr !154
  %69 = and i32 %68, 255, !insn.addr !154
  %70 = and i32 %54, -256, !insn.addr !154
  %71 = or i32 %69, %70, !insn.addr !154
  store i32 %71, i32* %storemerge.reg2mem, !insn.addr !154
  br label %78, !insn.addr !154

; <label>:72:                                     ; preds = %dec_label_pc_401556
  %73 = add i32 %54, 160, !insn.addr !154
  %74 = select i1 %66, i32 %73, i32 %54, !insn.addr !154
  %75 = and i32 %74, 255, !insn.addr !154
  %76 = and i32 %54, -256, !insn.addr !154
  %77 = or i32 %75, %76, !insn.addr !154
  store i32 %77, i32* %storemerge.reg2mem, !insn.addr !154
  br label %78, !insn.addr !154

; <label>:78:                                     ; preds = %67, %72
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %79 = inttoptr i32 %storemerge.reload to i8*, !insn.addr !155
  %80 = load i8, i8* %79, align 1, !insn.addr !155
  %81 = trunc i32 %storemerge.reload to i8, !insn.addr !155
  %82 = add i8 %80, %81, !insn.addr !155
  store i8 %82, i8* %79, align 1, !insn.addr !155
  %83 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !156
  %84 = and i32 %storemerge.reload, -120, !insn.addr !157
  %85 = or i32 %84, 99, !insn.addr !157
  %86 = add nsw i32 %85, 1, !insn.addr !158
  %87 = inttoptr i32 %86 to i32*, !insn.addr !159
  %88 = load i32, i32* %87, align 4, !insn.addr !159
  %89 = sub i32 %88, %83, !insn.addr !159
  store i32 %89, i32* %87, align 4, !insn.addr !159
  %90 = sext i16 %arg1 to i32, !insn.addr !160
  %91 = add i32 %85, -11610, !insn.addr !161
  %92 = icmp ult i32 %86, 11611, !insn.addr !161
  %93 = add i32 %90, ptrtoint (i8** @global_var_40d018 to i32), !insn.addr !162
  %94 = inttoptr i32 %93 to i8*, !insn.addr !162
  %95 = load i8, i8* %94, align 1, !insn.addr !162
  %96 = udiv i32 %91, 256, !insn.addr !162
  %97 = trunc i32 %96 to i8, !insn.addr !162
  %98 = zext i1 %92 to i8, !insn.addr !162
  %99 = add i8 %95, %97, !insn.addr !162
  %100 = add i8 %99, %98, !insn.addr !162
  store i8 %100, i8* %94, align 1, !insn.addr !162
  ret i32 %91, !insn.addr !162

dec_label_pc_4015be:                              ; preds = %dec_label_pc_401534
  ret i32 %32, !insn.addr !163
}

define i32 @function_4015d7() local_unnamed_addr {
dec_label_pc_4015d7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !164
}

define i32 @function_4015e6(i32 %arg1) local_unnamed_addr {
dec_label_pc_4015e6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %5, -24, !insn.addr !165
  %7 = inttoptr i32 %6 to i8*, !insn.addr !165
  %8 = load i8, i8* %7, align 1, !insn.addr !165
  %9 = trunc i32 %4 to i8, !insn.addr !165
  %10 = or i8 %8, %9, !insn.addr !165
  store i8 %10, i8* %7, align 1, !insn.addr !165
  %11 = load i32, i32* inttoptr (i32 -329908224 to i32*), align 131072, !insn.addr !166
  %12 = and i32 %11, %2, !insn.addr !166
  store i32 %12, i32* inttoptr (i32 -329908224 to i32*), align 131072, !insn.addr !166
  %13 = add i32 %1, 348422912, !insn.addr !167
  %14 = inttoptr i32 %13 to i8*, !insn.addr !167
  %15 = load i8, i8* %14, align 1, !insn.addr !167
  %16 = udiv i8 %15, 2, !insn.addr !167
  %17 = shl i8 %15, 7, !insn.addr !167
  %18 = or i8 %16, %17, !insn.addr !167
  store i8 %18, i8* %14, align 1, !insn.addr !167
  %19 = load i8*, i8** @global_var_40d010, align 4, !insn.addr !168
  %20 = ptrtoint i8* %19 to i32, !insn.addr !168
  %21 = call i32 @__asm_int1(), !insn.addr !169
  %22 = or i32 %21, 4243656, !insn.addr !170
  %23 = add i32 %20, 64, !insn.addr !171
  %24 = inttoptr i32 %23 to i32*, !insn.addr !171
  %25 = load i32, i32* %24, align 4, !insn.addr !171
  %26 = or i32 %25, -117, !insn.addr !171
  store i32 %26, i32* %24, align 4, !insn.addr !171
  %27 = inttoptr i32 %22 to i32*, !insn.addr !172
  %28 = load i32, i32* %27, align 4, !insn.addr !172
  %29 = add i32 %22, 4, !insn.addr !172
  %30 = add i32 %0, 16, !insn.addr !173
  %31 = inttoptr i32 %30 to i32*, !insn.addr !173
  %32 = load i32, i32* %31, align 4, !insn.addr !173
  %33 = add i32 %3, 490279108, !insn.addr !174
  %34 = inttoptr i32 %33 to i8*, !insn.addr !174
  %35 = load i8, i8* %34, align 1, !insn.addr !174
  %36 = trunc i32 %29 to i8, !insn.addr !174
  %37 = add i8 %35, %36, !insn.addr !174
  %38 = icmp eq i8 %37, 0, !insn.addr !174
  store i8 %37, i8* %34, align 1, !insn.addr !174
  %39 = add i32 %28, -7, !insn.addr !175
  %40 = inttoptr i32 %39 to i32*, !insn.addr !175
  store i32 %32, i32* %40, align 4, !insn.addr !175
  br i1 %38, label %dec_label_pc_4016b0, label %dec_label_pc_401634, !insn.addr !176

dec_label_pc_401634:                              ; preds = %dec_label_pc_4015e6
  ret i32 %29, !insn.addr !176

dec_label_pc_4016b0:                              ; preds = %dec_label_pc_4015e6
  %41 = add i32 %28, -3, !insn.addr !177
  %42 = inttoptr i32 %41 to i32*, !insn.addr !177
  %43 = add i32 %28, -16601, !insn.addr !178
  %44 = inttoptr i32 %43 to i16*, !insn.addr !178
  %45 = add i32 %28, -16605, !insn.addr !179
  %46 = inttoptr i32 %45 to i32*, !insn.addr !179
  store i32 %39, i32* %46, align 4, !insn.addr !179
  ret i32 %29, !insn.addr !179
}

define i32 @function_401750(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_401750:
  %edi = alloca i32, align 4
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_4()
  %5 = trunc i32 %2 to i16, !insn.addr !180
  %6 = call i8 @__asm_in.4(i16 %5), !insn.addr !180
  %7 = call i32 @__asm_wait(), !insn.addr !181
  %8 = fptrunc x86_fp80 %4 to double, !insn.addr !182
  store double %8, double* bitcast ([24 x i8]* @global_var_40f680 to double*), align 16, !insn.addr !182
  %9 = or i32 %1, -47, !insn.addr !183
  %10 = inttoptr i32 %1 to i32*, !insn.addr !183
  store i32 %9, i32* %10, align 4, !insn.addr !183
  %11 = load i32, i32* %edi, align 4
  %12 = or i32 %11, 22820, !insn.addr !184
  %13 = inttoptr i32 %11 to i32*, !insn.addr !184
  store i32 %12, i32* %13, align 4, !insn.addr !184
  %14 = load i32, i32* @global_var_410278, align 4, !insn.addr !185
  %15 = icmp eq i32 %14, 0, !insn.addr !186
  %16 = load i32, i32* inttoptr (i32 1848393804 to i32*), align 4, !insn.addr !187
  br i1 %15, label %dec_label_pc_4017bf, label %dec_label_pc_4017a7, !insn.addr !188

dec_label_pc_4017a7:                              ; preds = %dec_label_pc_401750
  %17 = call i32 @unknown_a0408b50(i32 %16, i32 1391680, i32 %0), !insn.addr !189
  %18 = add i32 %2, 132412429, !insn.addr !190
  %19 = inttoptr i32 %18 to i32*, !insn.addr !190
  %20 = load i32, i32* %19, align 4, !insn.addr !190
  %21 = sub i32 %20, %2, !insn.addr !190
  store i32 %21, i32* %19, align 4, !insn.addr !190
  %22 = bitcast i32* %esi to i8*
  %23 = load i8, i8* %22, align 4, !insn.addr !191
  %24 = udiv i32 %2, 256, !insn.addr !191
  %25 = trunc i32 %24 to i8, !insn.addr !191
  %26 = add i8 %23, %25, !insn.addr !191
  %27 = icmp ult i8 %26, %23, !insn.addr !191
  %28 = load i32, i32* %esi, align 4, !insn.addr !191
  %29 = inttoptr i32 %28 to i8*, !insn.addr !191
  store i8 %26, i8* %29, align 1, !insn.addr !191
  %30 = zext i1 %27 to i32, !insn.addr !192
  %31 = add i32 %17, 139, !insn.addr !192
  %32 = add i32 %31, %30, !insn.addr !192
  %33 = and i32 %32, 255, !insn.addr !192
  %34 = and i32 %17, -256, !insn.addr !192
  %35 = or i32 %33, %34, !insn.addr !192
  ret i32 %35, !insn.addr !192

dec_label_pc_4017bf:                              ; preds = %dec_label_pc_401750
  %36 = add i32 %3, 65, !insn.addr !193
  %37 = icmp slt i32 %36, 0, !insn.addr !193
  %38 = icmp eq i1 %37, false, !insn.addr !194
  br i1 %38, label %dec_label_pc_401814, label %dec_label_pc_4017c2, !insn.addr !194

dec_label_pc_4017c2:                              ; preds = %dec_label_pc_4017bf
  %39 = add i32 %3, 64, !insn.addr !195
  %40 = call i32 @unknown_dd5850(i32 %39, i32 %16, i32 %0), !insn.addr !196
  %41 = load i16, i16* @global_var_4117f4, align 2, !insn.addr !197
  store i32 %40, i32* inttoptr (i32 5642248 to i32*), align 8, !insn.addr !198
  %42 = load i8*, i8** @global_var_410288, align 4, !insn.addr !199
  %43 = load i32, i32* inttoptr (i32 4243812 to i32*), align 4, !insn.addr !200
  store i32 %43, i32* %esi, align 4, !insn.addr !200
  store i16 %41, i16* bitcast (i32* @global_var_410bb4 to i16*), align 4, !insn.addr !201
  %44 = icmp eq i8* %42, null, !insn.addr !202
  %45 = icmp eq i1 %44, false, !insn.addr !203
  br i1 %45, label %dec_label_pc_40184a, label %dec_label_pc_4017ed, !insn.addr !203

dec_label_pc_4017ed:                              ; preds = %dec_label_pc_4017c2
  %46 = zext i16 %41 to i32, !insn.addr !197
  %47 = and i32 %36, -65536, !insn.addr !197
  %48 = or i32 %47, %46, !insn.addr !197
  %49 = ptrtoint i8* %42 to i32, !insn.addr !199
  %50 = inttoptr i32 %43 to i8*, !insn.addr !204
  %51 = load i8, i8* %50, align 1, !insn.addr !204
  %52 = bitcast i32* %edi to i8*
  %53 = load i8, i8* %52, align 4, !insn.addr !204
  %54 = icmp ult i8 %51, %53, !insn.addr !204
  %55 = zext i1 %54 to i32, !insn.addr !205
  %56 = add i32 %49, 826349568, !insn.addr !205
  %57 = add i32 %56, %55, !insn.addr !205
  %58 = icmp ule i32 %57, %49, !insn.addr !205
  %59 = icmp ugt i8* %42, inttoptr (i32 -826349569 to i8*), !insn.addr !205
  %60 = select i1 %54, i1 %58, i1 %59, !insn.addr !205
  %61 = load i32, i32* inttoptr (i32 721528 to i32*), align 8, !insn.addr !206
  %62 = add i32 %48, -123, !insn.addr !207
  %63 = add i32 %62, %61, !insn.addr !207
  %64 = inttoptr i32 %63 to i32*, !insn.addr !207
  %65 = load i32, i32* %64, align 4, !insn.addr !207
  %66 = zext i1 %60 to i32, !insn.addr !207
  %67 = add i32 %65, -64, !insn.addr !207
  %68 = add i32 %67, %66, !insn.addr !207
  store i32 %68, i32* %64, align 4, !insn.addr !207
  %69 = trunc i32 %61 to i8, !insn.addr !208
  %70 = add i32 %48, -4, !insn.addr !208
  %71 = inttoptr i32 %70 to i8*, !insn.addr !208
  %72 = load i8, i8* %71, align 1, !insn.addr !208
  %73 = add i8 %72, %69, !insn.addr !208
  %74 = zext i8 %73 to i32, !insn.addr !208
  %75 = and i32 %61, -256, !insn.addr !208
  %76 = or i32 %75, %74, !insn.addr !208
  ret i32 %76, !insn.addr !209

dec_label_pc_401814:                              ; preds = %dec_label_pc_4017bf
  %77 = load i8, i8* inttoptr (i32 -350765584 to i8*), align 16, !insn.addr !210
  %78 = add i8 %77, -125, !insn.addr !210
  store i8 %78, i8* inttoptr (i32 -350765584 to i8*), align 16, !insn.addr !210
  %79 = load i8, i8* inttoptr (i32 -350813688 to i8*), align 8, !insn.addr !211
  %80 = add i8 %79, -125, !insn.addr !211
  store i8 %80, i8* inttoptr (i32 -350813688 to i8*), align 8, !insn.addr !211
  %81 = add i32 %3, 63, !insn.addr !212
  %82 = inttoptr i32 %81 to i8 addrspace(258)*, !insn.addr !212
  %83 = load i8, i8 addrspace(258)* %82, align 1, !insn.addr !212
  %84 = and i8 %83, -125, !insn.addr !212
  store i8 %84, i8 addrspace(258)* %82, align 1, !insn.addr !212
  %85 = mul i32 %3, 8, !insn.addr !213
  %86 = add i32 %85, -1583561021, !insn.addr !214
  %87 = inttoptr i32 %86 to i32*, !insn.addr !214
  %88 = load i32, i32* %87, align 4, !insn.addr !214
  %89 = or i32 %88, -1583561597, !insn.addr !214
  store i32 %89, i32* %87, align 4, !insn.addr !214
  ret i32 -350813688, !insn.addr !215

dec_label_pc_40184a:                              ; preds = %dec_label_pc_4017c2
  %90 = load i32, i32* inttoptr (i32 4233438 to i32*), align 4, !insn.addr !216
  %91 = load i16, i16* inttoptr (i32 3522904 to i16*), align 8, !insn.addr !217
  %92 = trunc i32 %43 to i16, !insn.addr !217
  call void @__asm_arpl(i16 %91, i16 %92), !insn.addr !217
  %93 = inttoptr i32 %90 to i8*, !insn.addr !218
  %94 = call i32 (i8*, ...) @printf(i8* %93), !insn.addr !219
  store i32 %94, i32* @global_var_410b0d, align 4, !insn.addr !220
  %95 = load i32, i32* bitcast ([15 x i8]* @global_var_40d0ec to i32*), align 4, !insn.addr !221
  %96 = inttoptr i32 %95 to i8*, !insn.addr !222
  %97 = call i32 (i8*, ...) @printf(i8* %96), !insn.addr !223
  ret i32 %97, !insn.addr !224
}

define i32 @function_4018d2() local_unnamed_addr {
dec_label_pc_4018d2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = and i32 %0, 14
  %3 = icmp ugt i32 %2, 9, !insn.addr !225
  %4 = or i1 %1, %3, !insn.addr !225
  %5 = add i32 %0, 10, !insn.addr !225
  %6 = select i1 %4, i32 %5, i32 %0, !insn.addr !225
  %7 = sext i1 %4 to i32, !insn.addr !225
  %8 = and i32 %6, 15, !insn.addr !225
  %9 = and i32 %0, -65536, !insn.addr !225
  %10 = or i32 %8, %9, !insn.addr !225
  %11 = mul i32 %7, 256
  %12 = add i32 %11, %0
  %13 = and i32 %12, 65280, !insn.addr !225
  %14 = or i32 %10, %13, !insn.addr !225
  %15 = inttoptr i32 %14 to i8*, !insn.addr !226
  %16 = load i8, i8* %15, align 1, !insn.addr !226
  %17 = trunc i32 %8 to i8, !insn.addr !226
  %18 = add i8 %16, %17, !insn.addr !226
  store i8 %18, i8* %15, align 1, !insn.addr !226
  store i8 %17, i8* @global_var_414048, align 1, !insn.addr !227
  %19 = call i32 @function_4018e4(), !insn.addr !228
  ret i32 %19, !insn.addr !228
}

define i32 @function_4018df() local_unnamed_addr {
dec_label_pc_4018df:
  %0 = load i32, i32* @global_var_413874, align 4, !insn.addr !229
  ret i32 %0, !insn.addr !229
}

define i32 @function_4018e4() local_unnamed_addr {
dec_label_pc_4018e4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %0, -1951779584, !insn.addr !230
  %2 = or i32 %1, 4276339, !insn.addr !231
  store i32 %2, i32* inttoptr (i32 12440784 to i32*), align 16, !insn.addr !232
  %3 = call i32 @function_405890(i32 ptrtoint ([3 x i8]* @global_var_40d19c to i32), i32 0), !insn.addr !233
  ret i32 %3, !insn.addr !234
}

define i32 @function_401976() local_unnamed_addr {
dec_label_pc_401976:
  %cf.0.reg2mem = alloca i1, !insn.addr !235
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %7 = add i32 %6, 1087631424, !insn.addr !235
  %8 = add i32 %6, 1087631329, !insn.addr !236
  %9 = inttoptr i32 %8 to i8*, !insn.addr !236
  %10 = load i8, i8* %9, align 1, !insn.addr !236
  %11 = trunc i32 %4 to i8, !insn.addr !236
  %12 = add i8 %10, %11, !insn.addr !236
  store i8 %12, i8* %9, align 1, !insn.addr !236
  %13 = add i32 %6, 88, !insn.addr !237
  %14 = and i32 %13, 255, !insn.addr !237
  %15 = and i32 %7, -256, !insn.addr !237
  %16 = or i32 %15, %14, !insn.addr !237
  %17 = add i32 %16, -95, !insn.addr !238
  %18 = inttoptr i32 %17 to i8*, !insn.addr !238
  %19 = load i8, i8* %18, align 1, !insn.addr !238
  %20 = add i8 %19, %11, !insn.addr !238
  store i8 %20, i8* %18, align 1, !insn.addr !238
  %21 = add i32 %5, 2, !insn.addr !239
  %22 = add i32 %16, 86, !insn.addr !240
  %23 = inttoptr i32 %22 to i8*, !insn.addr !240
  %24 = load i8, i8* %23, align 1, !insn.addr !240
  %25 = add i8 %24, 64, !insn.addr !240
  store i8 %25, i8* %23, align 1, !insn.addr !240
  %26 = add i32 %16, -44, !insn.addr !241
  %27 = inttoptr i32 %26 to i8*, !insn.addr !241
  %28 = load i8, i8* %27, align 1, !insn.addr !241
  %29 = udiv i32 %21, 256, !insn.addr !241
  %30 = trunc i32 %29 to i8, !insn.addr !241
  %31 = add i8 %28, %30, !insn.addr !241
  %32 = icmp ult i8 %31, %28, !insn.addr !241
  store i8 %31, i8* %27, align 1, !insn.addr !241
  %33 = and i32 %21, 31, !insn.addr !242
  %34 = icmp eq i32 %33, 0, !insn.addr !242
  store i1 %32, i1* %cf.0.reg2mem, !insn.addr !242
  br i1 %34, label %45, label %35, !insn.addr !242

; <label>:35:                                     ; preds = %dec_label_pc_401976
  %36 = add i32 %16, -99, !insn.addr !242
  %37 = inttoptr i32 %36 to i32*, !insn.addr !242
  %38 = load i32, i32* %37, align 4, !insn.addr !242
  %39 = shl i32 %38, %33, !insn.addr !242
  %40 = sub nsw i32 32, %33, !insn.addr !242
  %41 = lshr i32 %38, %40, !insn.addr !242
  %42 = or i32 %41, %39, !insn.addr !242
  store i32 %42, i32* %37, align 4, !insn.addr !242
  %43 = and i32 %42, 1, !insn.addr !242
  %44 = icmp ne i32 %43, 0, !insn.addr !242
  store i1 %44, i1* %cf.0.reg2mem, !insn.addr !242
  br label %45, !insn.addr !242

; <label>:45:                                     ; preds = %dec_label_pc_401976, %35
  %46 = and i32 %4, -256, !insn.addr !243
  %47 = or i32 %46, 64, !insn.addr !243
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  store i32 2048, i32* %stack_var_-8, align 4, !insn.addr !244
  %48 = zext i1 %cf.0.reload to i32, !insn.addr !245
  %49 = add i32 %16, 7105000, !insn.addr !245
  %50 = add i32 %49, %48, !insn.addr !245
  %51 = call i32 @function_401a24(i32 %0, i32 %1, i32 %2, i32* nonnull %stack_var_-8, i32 %3, i32 %47, i32 %21, i32 %50, i32 2048, i32 %47), !insn.addr !246
  ret i32 %51, !insn.addr !246
}

define i32 @function_4019d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4019d0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !247
}

define i32 @function_4019fd() local_unnamed_addr {
dec_label_pc_4019fd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 24, !insn.addr !248
  %2 = and i32 %1, 255, !insn.addr !248
  %3 = and i32 %0, -256, !insn.addr !248
  %4 = or i32 %2, %3, !insn.addr !248
  ret i32 %4, !insn.addr !249
}

define i32 @function_401a24(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_401a24:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_4()
  %6 = icmp ult i32 %4, 2048, !insn.addr !250
  br i1 %6, label %dec_label_pc_401a38, label %dec_label_pc_401a2b, !insn.addr !251

dec_label_pc_401a2b:                              ; preds = %dec_label_pc_401a24
  %7 = xor i32 %4, ptrtoint ([18 x i8]* @global_var_40d364 to i32), !insn.addr !252
  %8 = fptosi x86_fp80 %5 to i16, !insn.addr !253
  %9 = inttoptr i32 %1 to i16*, !insn.addr !253
  store i16 %8, i16* %9, align 2, !insn.addr !253
  ret i32 %7, !insn.addr !254

dec_label_pc_401a38:                              ; preds = %dec_label_pc_401a24
  %10 = trunc i32 %3 to i8
  %11 = trunc i32 %arg1 to i8, !insn.addr !255
  %12 = add i8 %10, %11, !insn.addr !255
  %13 = zext i8 %12 to i32, !insn.addr !255
  %14 = and i32 %arg1, -256, !insn.addr !255
  %15 = or i32 %14, %13, !insn.addr !255
  %16 = icmp slt i32 %15, %2, !insn.addr !256
  br i1 %16, label %dec_label_pc_401a6f, label %dec_label_pc_401a46, !insn.addr !256

dec_label_pc_401a46:                              ; preds = %dec_label_pc_401a38
  %17 = call i32 @__asm_sti(), !insn.addr !257
  ret i32 %17, !insn.addr !258

dec_label_pc_401a6f:                              ; preds = %dec_label_pc_401a38
  %18 = add i32 %0, -914161596, !insn.addr !259
  %19 = inttoptr i32 %18 to i8*, !insn.addr !259
  %20 = load i8, i8* %19, align 1, !insn.addr !259
  %21 = udiv i32 %3, 256, !insn.addr !259
  %22 = trunc i32 %21 to i8, !insn.addr !259
  %23 = xor i8 %20, %22, !insn.addr !259
  store i8 %23, i8* %19, align 1, !insn.addr !259
  %24 = add i32 %3, 37, !insn.addr !260
  %25 = inttoptr i32 %24 to i8*, !insn.addr !260
  %26 = load i8, i8* %25, align 1, !insn.addr !260
  %27 = add i32 %3, -125, !insn.addr !261
  %28 = inttoptr i32 %27 to i32*, !insn.addr !261
  %29 = load i32, i32* %28, align 4, !insn.addr !261
  %30 = udiv i32 %29, 2, !insn.addr !261
  %31 = shl i32 %29, 31, !insn.addr !261
  %32 = or i32 %30, %31, !insn.addr !261
  store i32 %32, i32* %28, align 4, !insn.addr !261
  %33 = add i32 %3, 1092086797, !insn.addr !262
  %34 = inttoptr i32 %33 to i32*, !insn.addr !262
  %35 = load i32, i32* %34, align 4, !insn.addr !262
  %36 = add i32 %35, %3, !insn.addr !262
  store i32 %36, i32* %34, align 4, !insn.addr !262
  %37 = add i8 %26, %12, !insn.addr !260
  %38 = zext i8 %37 to i32, !insn.addr !260
  %39 = or i32 %14, %38, !insn.addr !260
  ret i32 %39, !insn.addr !263
}

define i32 @function_401b2f() local_unnamed_addr {
dec_label_pc_401b2f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !264
}

define i32 @function_401b98() local_unnamed_addr {
dec_label_pc_401b98:
  %0 = call i32 @function_401ba8(), !insn.addr !265
  ret i32 %0, !insn.addr !265
}

define i32 @function_401b9f() local_unnamed_addr {
dec_label_pc_401b9f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -16, !insn.addr !266
  %3 = inttoptr i32 %2 to i32*, !insn.addr !266
  store i32 956301311, i32* %3, align 4, !insn.addr !266
  ret i32 %1, !insn.addr !266
}

define i32 @function_401ba8() local_unnamed_addr {
dec_label_pc_401ba8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 4202592, i32* %stack_var_-4, align 4, !insn.addr !267
  %6 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !268
  %7 = load i8*, i8** @global_var_40d018, align 4, !insn.addr !269
  %8 = ptrtoint i8* %7 to i32, !insn.addr !269
  %9 = xor i32 %6, -8
  %10 = icmp ult i32 %9, 8, !insn.addr !270
  %11 = add i32 %2, 858881783, !insn.addr !271
  %12 = inttoptr i32 %11 to i8*, !insn.addr !271
  %13 = load i8, i8* %12, align 1, !insn.addr !271
  %14 = trunc i32 %8 to i8, !insn.addr !271
  %15 = zext i1 %10 to i8, !insn.addr !271
  %16 = add i8 %14, %15, !insn.addr !271
  %17 = add i8 %16, %13, !insn.addr !271
  store i8 %17, i8* %12, align 1, !insn.addr !271
  %18 = add i32 %3, 1091245837, !insn.addr !272
  %19 = inttoptr i32 %18 to i32*, !insn.addr !272
  %20 = load i32, i32* %19, align 4, !insn.addr !272
  %21 = add i32 %20, -1, !insn.addr !272
  store i32 %21, i32* %19, align 4, !insn.addr !272
  %22 = add i32 %5, 140033524, !insn.addr !273
  %23 = inttoptr i32 %22 to i8*, !insn.addr !273
  %24 = load i8, i8* %23, align 1, !insn.addr !273
  %25 = trunc i32 %5 to i8, !insn.addr !273
  %26 = add i8 %24, %25, !insn.addr !273
  store i8 %26, i8* %23, align 1, !insn.addr !273
  %27 = load i16, i16* @global_var_410bdb, align 2, !insn.addr !274
  %28 = sext i16 %27 to i32, !insn.addr !274
  %29 = add i32 %0, %28, !insn.addr !275
  %30 = inttoptr i32 %29 to i8*, !insn.addr !275
  %31 = load i8, i8* %30, align 1, !insn.addr !275
  %32 = add i8 %31, 80, !insn.addr !275
  %33 = icmp ugt i8 %31, -81, !insn.addr !275
  store i8 %32, i8* %30, align 1, !insn.addr !275
  %34 = load i32, i32* %stack_var_-12, align 4, !insn.addr !276
  %35 = load i32, i32* %stack_var_-4, align 4, !insn.addr !276
  %36 = call i32 @unknown_7403860(i32 %0, i32 %1, i32 %2, i32* nonnull %stack_var_-4, i32 %3, i32 %4, i32 %34, i32 %8, i32 %35), !insn.addr !276
  %37 = call i32 @__asm_in(i16 %27), !insn.addr !277
  %38 = mul i32 %37, 2, !insn.addr !278
  %39 = add i32 %38, %1, !insn.addr !278
  %40 = inttoptr i32 %39 to i32*, !insn.addr !278
  %41 = load i32, i32* %40, align 4, !insn.addr !278
  %42 = add i32 %1, 96, !insn.addr !279
  %43 = inttoptr i32 %42 to i32*, !insn.addr !279
  %44 = load i32, i32* %43, align 4, !insn.addr !279
  %45 = select i1 %33, i32 -1744830455, i32 -1744830456, !insn.addr !279
  %46 = sub i32 %44, %45, !insn.addr !279
  store i32 %46, i32* %43, align 4, !insn.addr !279
  ret i32 %41, !insn.addr !279
}

define i32 @function_401c7a() local_unnamed_addr {
dec_label_pc_401c7a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !280
}

define i32 @function_401c85() local_unnamed_addr {
dec_label_pc_401c85:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = mul i32 %0, 9, !insn.addr !281
  %2 = inttoptr i32 %1 to i32*, !insn.addr !281
  %3 = load i32, i32* %2, align 4, !insn.addr !281
  ret i32 %3, !insn.addr !282
}

define i32 @function_401d18(i16 %arg1) local_unnamed_addr {
dec_label_pc_401d18:
  %cf.0.reg2mem = alloca i1, !insn.addr !283
  %edx.0.reg2mem = alloca i32, !insn.addr !283
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_2 = alloca i32, align 4
  %7 = and i32 %4, 31, !insn.addr !283
  %8 = icmp eq i32 %7, 0, !insn.addr !283
  br i1 %8, label %dec_label_pc_401d73, label %9, !insn.addr !283

; <label>:9:                                      ; preds = %dec_label_pc_401d18
  %10 = zext i1 %6 to i32, !insn.addr !283
  %11 = shl i32 %3, %7, !insn.addr !283
  %12 = zext i32 %3 to i64, !insn.addr !283
  %13 = sub nsw i32 33, %7, !insn.addr !283
  %14 = zext i32 %13 to i64, !insn.addr !283
  %15 = lshr i64 %12, %14, !insn.addr !283
  %16 = add nsw i32 %7, -1, !insn.addr !283
  %17 = shl i32 %10, %16, !insn.addr !283
  %18 = trunc i64 %15 to i32
  %19 = or i32 %17, %11
  %20 = or i32 %19, %18, !insn.addr !283
  %21 = lshr i32 -2147483648, %16
  %22 = and i32 %21, %3
  %23 = icmp ne i32 %22, 0, !insn.addr !283
  store i32 %20, i32* %edx.0.reg2mem, !insn.addr !283
  store i1 %23, i1* %cf.0.reg2mem, !insn.addr !283
  br label %dec_label_pc_401d73, !insn.addr !283

dec_label_pc_401d73:                              ; preds = %dec_label_pc_401d18, %9
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %24 = add i32 %5, 1, !insn.addr !284
  %25 = udiv i32 %4, 256, !insn.addr !285
  %.neg1 = sext i1 %cf.0.reload to i32
  %.neg2 = sub i32 %24, %25, !insn.addr !285
  %26 = add i32 %.neg2, %.neg1, !insn.addr !285
  %27 = and i32 %26, 255, !insn.addr !285
  %28 = and i32 %24, -256, !insn.addr !285
  %29 = or i32 %27, %28, !insn.addr !285
  %30 = ptrtoint i32* %stack_var_2 to i32, !insn.addr !286
  %31 = inttoptr i32 %29 to i32*, !insn.addr !287
  %32 = load i32, i32* %31, align 4, !insn.addr !287
  %33 = add i32 %29, %32, !insn.addr !287
  store i32 %33, i32* %31, align 4, !insn.addr !287
  %34 = add i32 %2, -221835068, !insn.addr !288
  %35 = inttoptr i32 %34 to i8*, !insn.addr !288
  %36 = load i8, i8* %35, align 1, !insn.addr !288
  %37 = trunc i32 %26 to i8, !insn.addr !288
  %38 = add i8 %36, %37, !insn.addr !288
  store i8 %38, i8* %35, align 1, !insn.addr !288
  %39 = inttoptr i32 %29 to i8*, !insn.addr !289
  %40 = load i8, i8* %39, align 1, !insn.addr !289
  %41 = or i8 %40, %37, !insn.addr !289
  %42 = add i8 %41, %37, !insn.addr !290
  store i8 %42, i8* %39, align 1, !insn.addr !290
  %43 = and i32 %2, -256, !insn.addr !291
  %44 = trunc i32 %4 to i16, !insn.addr !292
  %45 = call i16 @__asm_arpl.5(i16 %44), !insn.addr !292
  %46 = sext i16 %45 to i32, !insn.addr !292
  %47 = and i32 %30, -65536, !insn.addr !292
  %48 = or i32 %47, %46, !insn.addr !292
  %49 = add i32 %48, -2, !insn.addr !293
  %50 = inttoptr i32 %49 to i16*, !insn.addr !293
  store i16 %arg1, i16* %50, align 2, !insn.addr !293
  %51 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !294
  %52 = load i8, i8* %51, align 1, !insn.addr !294
  %53 = or i8 %52, %37, !insn.addr !294
  store i8 %53, i8* %51, align 1, !insn.addr !294
  %54 = load i8, i8* %39, align 1, !insn.addr !295
  %55 = add i8 %54, %37, !insn.addr !295
  store i8 %55, i8* %39, align 1, !insn.addr !295
  %56 = load i32, i32* @global_var_4102a8, align 4, !insn.addr !296
  %57 = add i32 %29, -80, !insn.addr !297
  %58 = inttoptr i32 %57 to i32*, !insn.addr !297
  %59 = trunc i32 %56 to i16
  %60 = add i16 %59, 1, !insn.addr !298
  call void @__asm_out.6(i16 %60, i8 %37), !insn.addr !298
  %61 = call i32 @function_401ea0(), !insn.addr !299
  %62 = add i32 %0, 112763, !insn.addr !300
  %63 = inttoptr i32 %62 to i32*, !insn.addr !300
  %64 = load i32, i32* %63, align 4, !insn.addr !300
  %65 = inttoptr i32 %61 to i8*, !insn.addr !301
  %66 = load i8, i8* %65, align 1, !insn.addr !301
  %67 = trunc i32 %61 to i8, !insn.addr !301
  %68 = add i8 %66, %67, !insn.addr !301
  store i8 %68, i8* %65, align 1, !insn.addr !301
  %69 = add i32 %1, -40, !insn.addr !302
  %70 = inttoptr i32 %69 to i32*, !insn.addr !302
  store i32 %61, i32* %70, align 4, !insn.addr !302
  %71 = trunc i32 %61 to i16, !insn.addr !303
  %72 = add i32 %1, -36, !insn.addr !303
  %73 = inttoptr i32 %72 to i16*, !insn.addr !303
  store i16 %71, i16* %73, align 2, !insn.addr !303
  %74 = and i16 %71, 255, !insn.addr !304
  %75 = sdiv i16 %71, %74, !insn.addr !304
  %76 = and i32 %61, -65536, !insn.addr !304
  %77 = srem i16 %71, %74, !insn.addr !304
  %78 = mul i16 %77, 256
  %79 = zext i16 %78 to i32, !insn.addr !304
  %80 = and i16 %75, 255
  %.masked = zext i16 %80 to i32
  %81 = or i32 %76, %.masked, !insn.addr !304
  %82 = or i32 %81, %79, !insn.addr !304
  %83 = inttoptr i32 %82 to i32*, !insn.addr !305
  %84 = load i32, i32* %83, align 4, !insn.addr !305
  store i32 %82, i32* %83, align 4, !insn.addr !305
  %85 = add i32 %1, -44, !insn.addr !306
  %86 = inttoptr i32 %48 to i32*, !insn.addr !307
  store i32 %85, i32* %86, align 4, !insn.addr !307
  %87 = add i32 %0, 1971970125, !insn.addr !308
  %88 = inttoptr i32 %87 to i32*, !insn.addr !308
  %89 = load i32, i32* %88, align 4, !insn.addr !308
  %90 = mul i32 %89, 2, !insn.addr !308
  store i32 %90, i32* %88, align 4, !insn.addr !308
  %91 = call i8 @__asm_in.7(i8 -20), !insn.addr !309
  %92 = sext i8 %91 to i32, !insn.addr !309
  %93 = and i32 %84, -256, !insn.addr !309
  %94 = or i32 %93, %92, !insn.addr !309
  %95 = add nuw nsw i32 %25, 96, !insn.addr !310
  %96 = and i32 %95, 255, !insn.addr !310
  %97 = or i32 %96, %43, !insn.addr !310
  %98 = add i32 %97, -855459588, !insn.addr !311
  %99 = inttoptr i32 %98 to i32*, !insn.addr !311
  %100 = load i32, i32* %99, align 4, !insn.addr !311
  %101 = and i32 %100, %4, !insn.addr !311
  %102 = add i32 %97, 3538380, !insn.addr !312
  %103 = add i32 %102, %94, !insn.addr !312
  %104 = inttoptr i32 %103 to i8*, !insn.addr !312
  %105 = load i8, i8* %104, align 1, !insn.addr !312
  %106 = udiv i32 %94, 256, !insn.addr !312
  %107 = trunc i32 %106 to i8, !insn.addr !312
  %108 = add i8 %105, %107, !insn.addr !312
  store i8 %108, i8* %104, align 1, !insn.addr !312
  %109 = add i32 %0, 1, !insn.addr !313
  store i32 %109, i32* inttoptr (i32 876723128 to i32*), align 8, !insn.addr !314
  %110 = add i32 %1, -75, !insn.addr !315
  %111 = inttoptr i32 %110 to i32*, !insn.addr !315
  store i32 %64, i32* %111, align 4, !insn.addr !315
  %112 = add i32 %101, 68, !insn.addr !316
  %113 = inttoptr i32 %112 to i8*, !insn.addr !316
  %114 = load i8, i8* %113, align 1, !insn.addr !316
  %115 = add i8 %114, %91, !insn.addr !316
  %116 = zext i8 %115 to i32, !insn.addr !316
  %117 = and i32 %94, -256, !insn.addr !316
  %118 = or i32 %117, %116, !insn.addr !316
  call void @__asm_int(i32 232), !insn.addr !317
  ret i32 %118, !insn.addr !318
}

define i32 @function_401da4() local_unnamed_addr {
dec_label_pc_401da4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !319
}

define i32 @function_401dda() local_unnamed_addr {
dec_label_pc_401dda:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_401de0() local_unnamed_addr {
dec_label_pc_401de0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = add i32 %1, 1087378445, !insn.addr !320
  %7 = inttoptr i32 %6 to i32*, !insn.addr !320
  %8 = load i32, i32* %7, align 4, !insn.addr !320
  %9 = add i32 %8, -1, !insn.addr !320
  store i32 %9, i32* %7, align 4, !insn.addr !320
  %10 = udiv i32 %2, 256, !insn.addr !321
  %11 = trunc i32 %10 to i8, !insn.addr !321
  %12 = trunc i32 %4 to i8, !insn.addr !321
  %13 = sub i8 0, %12, !insn.addr !321
  %14 = icmp eq i8 %11, %13, !insn.addr !321
  br i1 %14, label %dec_label_pc_401dfb, label %dec_label_pc_401deb, !insn.addr !322

dec_label_pc_401deb:                              ; preds = %dec_label_pc_401de0
  %15 = add i32 %0, 4, !insn.addr !323
  %16 = add i32 %3, 4243656, !insn.addr !324
  %17 = inttoptr i32 %16 to i32*, !insn.addr !324
  %18 = load i32, i32* %17, align 4, !insn.addr !324
  %19 = and i32 %18, %15, !insn.addr !324
  store i32 %19, i32* %17, align 4, !insn.addr !324
  %20 = zext i16 %5 to i32, !insn.addr !325
  %21 = add nuw nsw i32 %20, 1, !insn.addr !326
  %22 = inttoptr i32 %0 to i32*, !insn.addr !327
  store i32 ptrtoint ([22 x i8]* @global_var_40d280 to i32), i32* %22, align 4, !insn.addr !327
  %23 = add i32 %0, -4, !insn.addr !328
  %24 = inttoptr i32 %23 to i32*, !insn.addr !328
  store i32 %21, i32* %24, align 4, !insn.addr !328
  ret i32 %21, !insn.addr !328

dec_label_pc_401dfb:                              ; preds = %dec_label_pc_401de0
  %25 = call i32 @function_401e13(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !329
  ret i32 %25, !insn.addr !329
}

define i32 @function_401e05() local_unnamed_addr {
dec_label_pc_401e05:
  %eax.0.reg2mem = alloca i32, !insn.addr !330
  %0 = call i1 @__decompiler_undefined_function_2()
  br i1 %0, label %1, label %dec_label_pc_401e08, !insn.addr !330

; <label>:1:                                      ; preds = %dec_label_pc_401e05
  %2 = call i32 @function_401dda(), !insn.addr !330
  store i32 %2, i32* %eax.0.reg2mem, !insn.addr !330
  br label %dec_label_pc_401e08, !insn.addr !330

dec_label_pc_401e08:                              ; preds = %1, %dec_label_pc_401e05
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %3 = load i8, i8* inttoptr (i32 1679149735 to i8*), align 1, !insn.addr !331
  %4 = zext i8 %3 to i32, !insn.addr !331
  %5 = and i32 %eax.0.reload, -256, !insn.addr !331
  %6 = or i32 %5, %4, !insn.addr !331
  %7 = inttoptr i32 %6 to i8*, !insn.addr !332
  %8 = load i8, i8* %7, align 1, !insn.addr !332
  store i8 %3, i8* %7, align 1, !insn.addr !332
  %9 = zext i8 %8 to i32, !insn.addr !332
  %10 = or i32 %5, %9, !insn.addr !332
  ret i32 %10, !insn.addr !333
}

define i32 @function_401e13(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_401e13:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = load i32, i32* inttoptr (i32 1413546632 to i32*), align 8, !insn.addr !334
  %2 = and i32 %1, -256, !insn.addr !335
  %3 = inttoptr i32 %2 to i32*, !insn.addr !336
  store i32 143848, i32* %3, align 256, !insn.addr !336
  %4 = add i32 %0, -1869580195, !insn.addr !337
  %5 = inttoptr i32 %4 to i32*, !insn.addr !337
  %6 = load i32, i32* %5, align 4, !insn.addr !337
  %7 = mul i32 %6, 2, !insn.addr !338
  %8 = or i32 %2, 86, !insn.addr !338
  %9 = add i32 %7, %8, !insn.addr !338
  %10 = inttoptr i32 %9 to i32*, !insn.addr !338
  %11 = load i32, i32* %10, align 4, !insn.addr !338
  %12 = or i32 %11, -117, !insn.addr !338
  store i32 %12, i32* %10, align 4, !insn.addr !338
  ret i32 %2, !insn.addr !339
}

define i32 @function_401ea0() local_unnamed_addr {
dec_label_pc_401ea0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = mul i32 %1, 8, !insn.addr !340
  %6 = add i32 %2, 71, !insn.addr !340
  %7 = add i32 %6, %5, !insn.addr !340
  %8 = inttoptr i32 %7 to i8*, !insn.addr !340
  %9 = load i8, i8* %8, align 1, !insn.addr !340
  %10 = udiv i32 %4, 256, !insn.addr !340
  %11 = trunc i32 %10 to i8, !insn.addr !340
  %12 = or i8 %9, %11, !insn.addr !340
  store i8 %12, i8* %8, align 1, !insn.addr !340
  %13 = trunc i32 %3 to i16, !insn.addr !341
  %14 = call i8 @__asm_in.4(i16 %13), !insn.addr !341
  %15 = sext i8 %14 to i32, !insn.addr !341
  %16 = or i32 %4, %15, !insn.addr !341
  %17 = add i8 %14, -3, !insn.addr !342
  %18 = zext i8 %17 to i32, !insn.addr !342
  %19 = and i32 %16, -256, !insn.addr !342
  %20 = or i32 %19, %18, !insn.addr !342
  %21 = add i32 %20, 8, !insn.addr !343
  %22 = inttoptr i32 %21 to i32*, !insn.addr !343
  %23 = load i32, i32* %22, align 4, !insn.addr !343
  %24 = inttoptr i32 %23 to i8*, !insn.addr !344
  %25 = load i8, i8* %24, align 1, !insn.addr !344
  call void @__asm_outsb(i16 %13, i8 %25), !insn.addr !344
  %26 = inttoptr i32 %0 to i8*, !insn.addr !345
  store i8 %17, i8* %26, align 1, !insn.addr !345
  %27 = call i32 @function_8451b14(), !insn.addr !346
  ret i32 %27, !insn.addr !346
}

define x86_fp80 @function_401eb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_401eb4:
  %ecx.0.reg2mem = alloca i32, !insn.addr !347
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_4()
  %5 = trunc i32 %3 to i8
  %6 = mul i8 %5, 2, !insn.addr !348
  %7 = icmp ult i8 %6, %5, !insn.addr !348
  %8 = inttoptr i32 %3 to i8*, !insn.addr !348
  store i8 %6, i8* %8, align 1, !insn.addr !348
  %9 = load i8*, i8** @global_var_410ba4, align 4, !insn.addr !349
  %10 = ptrtoint i8* %9 to i32, !insn.addr !349
  %11 = select i1 %7, i32 -116, i32 -117, !insn.addr !349
  %12 = add i32 %11, %10, !insn.addr !349
  %13 = icmp eq i32 %12, 0, !insn.addr !349
  %14 = inttoptr i32 %12 to i8*, !insn.addr !349
  store i8* %14, i8** @global_var_410ba4, align 4, !insn.addr !349
  %15 = add i32 %2, -1064970171, !insn.addr !350
  %16 = inttoptr i32 %15 to float*, !insn.addr !350
  %17 = load float, float* %16, align 4, !insn.addr !350
  %18 = fpext float %17 to x86_fp80, !insn.addr !350
  %19 = fmul x86_fp80 %4, %18, !insn.addr !350
  %20 = icmp eq i1 %13, false, !insn.addr !351
  br i1 %20, label %dec_label_pc_401f0d, label %dec_label_pc_401ecd, !insn.addr !351

dec_label_pc_401ecd:                              ; preds = %dec_label_pc_401eb4
  %21 = trunc i32 %0 to i8, !insn.addr !352
  %22 = xor i8 %21, -2
  %23 = icmp ult i8 %22, 106, !insn.addr !352
  %24 = call i32 @function_408c70(i32 %1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !353
  %25 = add i32 %arg1, 2104, !insn.addr !354
  %26 = inttoptr i32 %25 to i8*, !insn.addr !354
  %27 = load i8, i8* %26, align 1, !insn.addr !354
  %28 = trunc i32 %arg3 to i8, !insn.addr !354
  %29 = zext i1 %23 to i8, !insn.addr !354
  %30 = add i8 %29, %28, !insn.addr !354
  %31 = add i8 %30, %27, !insn.addr !354
  store i8 %31, i8* %26, align 1, !insn.addr !354
  %32 = add i32 %arg1, 24, !insn.addr !355
  %33 = inttoptr i32 %32 to i32*, !insn.addr !355
  store i32 26368, i32* %33, align 4, !insn.addr !355
  %34 = add i32 %arg1, 20, !insn.addr !356
  %35 = inttoptr i32 %34 to i32*, !insn.addr !356
  store i32 %arg4, i32* %35, align 4, !insn.addr !356
  %36 = load i32, i32* inttoptr (i32 4301408 to i32*), align 32, !insn.addr !357
  %37 = icmp eq i32 %36, 0, !insn.addr !358
  store i32 %arg5, i32* %ecx.0.reg2mem, !insn.addr !359
  br i1 %37, label %dec_label_pc_401f3a, label %dec_label_pc_401eff, !insn.addr !359

dec_label_pc_401eff:                              ; preds = %dec_label_pc_401ecd
  %38 = load i32, i32* @global_var_410270, align 4, !insn.addr !360
  %39 = add i32 %38, %arg4, !insn.addr !361
  store i32 %39, i32* %35, align 4, !insn.addr !362
  store i32 %39, i32* %ecx.0.reg2mem, !insn.addr !363
  br label %dec_label_pc_401f3a, !insn.addr !363

dec_label_pc_401f0d:                              ; preds = %dec_label_pc_401eb4
  ret x86_fp80 %19, !insn.addr !364

dec_label_pc_401f3a:                              ; preds = %dec_label_pc_401eff, %dec_label_pc_401ecd
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %40 = add i32 %arg1, 4, !insn.addr !365
  %41 = inttoptr i32 %40 to i32*, !insn.addr !365
  %42 = load i32, i32* %41, align 4, !insn.addr !365
  %43 = sext i32 %42 to i64, !insn.addr !365
  %44 = mul nsw i64 %43, -1460187877, !insn.addr !365
  %45 = and i32 %ecx.0.reload, 31, !insn.addr !366
  %46 = icmp eq i32 %45, 0, !insn.addr !366
  br i1 %46, label %65, label %47, !insn.addr !366

; <label>:47:                                     ; preds = %dec_label_pc_401f3a
  %48 = add i32 %ecx.0.reload, 82, !insn.addr !366
  %49 = inttoptr i32 %48 to i32*, !insn.addr !366
  %50 = load i32, i32* %49, align 4, !insn.addr !366
  %51 = mul i64 %43, -6271459177730670592
  %52 = sdiv i64 %51, 4294967296, !insn.addr !365
  %53 = icmp ne i64 %44, %52, !insn.addr !365
  %54 = zext i1 %53 to i32, !insn.addr !366
  %55 = shl i32 %50, %45, !insn.addr !366
  %56 = zext i32 %50 to i64, !insn.addr !366
  %57 = sub nsw i32 33, %45, !insn.addr !366
  %58 = zext i32 %57 to i64, !insn.addr !366
  %59 = lshr i64 %56, %58, !insn.addr !366
  %60 = add nsw i32 %45, -1, !insn.addr !366
  %61 = shl i32 %54, %60, !insn.addr !366
  %62 = trunc i64 %59 to i32
  %63 = or i32 %55, %62
  %64 = or i32 %63, %61, !insn.addr !366
  store i32 %64, i32* %49, align 4, !insn.addr !366
  br label %65, !insn.addr !366

; <label>:65:                                     ; preds = %dec_label_pc_401f3a, %47
  %66 = add i32 %arg1, 2108, !insn.addr !367
  %67 = inttoptr i32 %66 to i32*, !insn.addr !367
  %68 = trunc i64 %44 to i32, !insn.addr !365
  %69 = inttoptr i32 %68 to i8*, !insn.addr !368
  %70 = load i8, i8* %69, align 1, !insn.addr !368
  %71 = trunc i64 %44 to i8, !insn.addr !368
  %72 = add i8 %70, %71, !insn.addr !368
  store i8 %72, i8* %69, align 1, !insn.addr !368
  call void @__asm_out.1(i32 50, i32 %68), !insn.addr !369
  ret x86_fp80 %19, !insn.addr !370
}

define i32 @function_402058() local_unnamed_addr {
dec_label_pc_402058:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = udiv i32 %4, 256, !insn.addr !371
  %6 = trunc i32 %5 to i8, !insn.addr !371
  %7 = mul i32 %3, 4, !insn.addr !371
  %8 = add i32 %1, -20, !insn.addr !371
  %9 = add i32 %8, %7, !insn.addr !371
  %10 = inttoptr i32 %9 to i8*, !insn.addr !371
  %11 = load i8, i8* %10, align 1, !insn.addr !371
  %12 = or i8 %11, %6, !insn.addr !371
  %13 = add i32 %0, -68, !insn.addr !372
  %14 = inttoptr i32 %13 to i32*, !insn.addr !372
  %15 = load i32, i32* %14, align 4, !insn.addr !372
  %16 = add i32 %15, 1962934272, !insn.addr !372
  store i32 %16, i32* %14, align 4, !insn.addr !372
  %17 = add i32 %0, -401456703, !insn.addr !373
  %18 = inttoptr i32 %17 to i8*, !insn.addr !373
  %19 = load i8, i8* %18, align 1, !insn.addr !373
  %20 = trunc i32 %2 to i8, !insn.addr !373
  %21 = or i8 %19, %20, !insn.addr !373
  store i8 %21, i8* %18, align 1, !insn.addr !373
  %22 = add i32 %1, 1706912, !insn.addr !374
  %23 = inttoptr i32 %22 to i8*, !insn.addr !374
  %24 = load i8, i8* %23, align 1, !insn.addr !374
  %25 = add i8 %24, %12, !insn.addr !374
  store i8 %25, i8* %23, align 1, !insn.addr !374
  %26 = inttoptr i32 %2 to i8*, !insn.addr !375
  store i8* %26, i8** @global_var_410ba4, align 4, !insn.addr !375
  %27 = call i32 @function_40208d(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !376
  ret i32 %27, !insn.addr !376
}

define i32 @function_402082() local_unnamed_addr {
dec_label_pc_402082:
  %0 = load i32, i32* @global_var_410ba0, align 4, !insn.addr !377
  ret i32 %0, !insn.addr !377
}

define i32 @function_40208d(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_40208d:
  %0 = add i32 %arg3, 1091257661, !insn.addr !378
  %1 = inttoptr i32 %0 to i32*, !insn.addr !378
  %2 = load i32, i32* %1, align 4, !insn.addr !378
  %3 = xor i32 %2, %arg5, !insn.addr !378
  %4 = inttoptr i32 %arg3 to i8*, !insn.addr !379
  %5 = load i8, i8* %4, align 1, !insn.addr !379
  %6 = udiv i32 %3, 256, !insn.addr !379
  %7 = trunc i32 %6 to i8, !insn.addr !379
  %8 = add i8 %5, %7, !insn.addr !379
  store i8 %8, i8* %4, align 1, !insn.addr !379
  ret i32 %arg6, !insn.addr !380
}

define i32 @function_4020b7() local_unnamed_addr {
dec_label_pc_4020b7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !381
}

define i32 @function_4020c0() local_unnamed_addr {
dec_label_pc_4020c0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %3, -1, !insn.addr !382
  %8 = icmp eq i32 %7, 0, !insn.addr !382
  %9 = or i1 %8, %6, !insn.addr !382
  br i1 %9, label %dec_label_pc_4020c2, label %dec_label_pc_402101, !insn.addr !382

dec_label_pc_4020c2:                              ; preds = %dec_label_pc_4020c0
  %10 = add i32 %4, -104, !insn.addr !383
  %11 = inttoptr i32 %10 to i8*, !insn.addr !383
  %12 = load i8, i8* %11, align 1, !insn.addr !383
  %13 = udiv i32 %7, 256, !insn.addr !383
  %14 = trunc i32 %13 to i8, !insn.addr !383
  %15 = add i8 %12, %14, !insn.addr !383
  store i8 %15, i8* %11, align 1, !insn.addr !383
  %16 = load i32, i32* @global_var_411800, align 4, !insn.addr !384
  %17 = and i32 %2, 65280, !insn.addr !385
  %18 = add i32 %17, %2
  %19 = and i32 %18, 65280, !insn.addr !385
  %20 = and i32 %2, -65281, !insn.addr !385
  %21 = or i32 %19, %20, !insn.addr !385
  %22 = load i16, i16* @global_var_4117f4, align 2, !insn.addr !386
  %23 = zext i16 %22 to i32, !insn.addr !386
  %24 = and i32 %7, -65536, !insn.addr !386
  %25 = or i32 %24, %23, !insn.addr !386
  %26 = inttoptr i32 %1 to i32*, !insn.addr !387
  store i32 %25, i32* %26, align 4, !insn.addr !387
  %27 = add i32 %1, -4, !insn.addr !388
  %28 = inttoptr i32 %27 to i32*, !insn.addr !388
  store i32 -230629540, i32* %28, align 4, !insn.addr !388
  %29 = add i32 %1, -8, !insn.addr !389
  %30 = inttoptr i32 %29 to i32*, !insn.addr !389
  store i32 %21, i32* %30, align 4, !insn.addr !389
  %31 = add i32 %1, -12, !insn.addr !390
  %32 = inttoptr i32 %31 to i32*, !insn.addr !390
  store i32 ptrtoint (i32* @global_var_40d480 to i32), i32* %32, align 4, !insn.addr !390
  %33 = add i32 %1, -16, !insn.addr !391
  %34 = inttoptr i32 %33 to i32*, !insn.addr !391
  %35 = add i32 %1, -20, !insn.addr !392
  %36 = inttoptr i32 %35 to i32*, !insn.addr !392
  store i32 ptrtoint ([28 x i8]* @global_var_40df40 to i32), i32* %36, align 4, !insn.addr !392
  ret i32 %16, !insn.addr !393

dec_label_pc_402101:                              ; preds = %dec_label_pc_4020c0
  %37 = add i32 %3, -2, !insn.addr !394
  %38 = and i32 %4, -65536, !insn.addr !395
  %39 = trunc i32 %4 to i8, !insn.addr !396
  %40 = udiv i8 %39, 64, !insn.addr !396
  %41 = zext i8 %40 to i32, !insn.addr !396
  %42 = mul i32 %41, 256, !insn.addr !396
  %43 = udiv i32 %2, 256, !insn.addr !397
  %44 = trunc i32 %43 to i8, !insn.addr !397
  %.tr = trunc i32 %43 to i8
  %45 = mul i8 %.tr, 2, !insn.addr !397
  %46 = icmp ult i8 %45, %44, !insn.addr !397
  %47 = select i1 %46, i32 255, i32 0, !insn.addr !398
  %48 = or i32 %47, %38, !insn.addr !396
  %49 = or i32 %48, %42, !insn.addr !398
  %50 = add i32 %0, 24, !insn.addr !399
  %51 = inttoptr i32 %50 to i32*, !insn.addr !399
  %52 = load i32, i32* %51, align 4, !insn.addr !399
  %53 = inttoptr i32 %49 to i8*, !insn.addr !400
  %54 = load i8, i8* %53, align 1, !insn.addr !400
  %55 = mul i8 %54, 2, !insn.addr !400
  %56 = lshr i8 %54, 7, !insn.addr !400
  %57 = or i8 %56, %55, !insn.addr !400
  %58 = trunc i32 %37 to i8, !insn.addr !401
  %59 = and i8 %58, 31, !insn.addr !401
  %60 = lshr i8 %57, %59
  store i8 %60, i8* %53, align 1
  %61 = add i32 %1, -44, !insn.addr !402
  %62 = inttoptr i32 %61 to i32*, !insn.addr !402
  %63 = load i32, i32* %62, align 4, !insn.addr !402
  %64 = add i32 %52, 20, !insn.addr !403
  %65 = inttoptr i32 %64 to i32*, !insn.addr !403
  %66 = load i32, i32* %65, align 4, !insn.addr !403
  %67 = add i32 %63, -1408398578, !insn.addr !404
  %68 = inttoptr i32 %67 to i8*, !insn.addr !404
  %69 = load i8, i8* %68, align 1, !insn.addr !404
  %70 = udiv i32 %37, 256, !insn.addr !404
  %71 = trunc i32 %70 to i8, !insn.addr !404
  %72 = add i8 %69, %71, !insn.addr !404
  %73 = call i8 @llvm.ctpop.i8(i8 %72), !range !405, !insn.addr !404
  %74 = and i8 %73, 1, !insn.addr !404
  %75 = icmp eq i8 %74, 0, !insn.addr !404
  store i8 %72, i8* %68, align 1, !insn.addr !404
  %76 = icmp eq i1 %75, false, !insn.addr !406
  br i1 %76, label %dec_label_pc_402175, label %dec_label_pc_402134, !insn.addr !406

dec_label_pc_402134:                              ; preds = %dec_label_pc_402101
  %77 = mul i32 %43, 512, !insn.addr !397
  %78 = and i32 %77, 65024, !insn.addr !397
  %79 = and i32 %2, -65281, !insn.addr !397
  %80 = or i32 %78, %79, !insn.addr !397
  %81 = add i32 %80, 1750157508, !insn.addr !407
  %82 = inttoptr i32 %81 to i8*, !insn.addr !407
  %83 = load i8, i8* %82, align 1, !insn.addr !407
  %84 = trunc i32 %66 to i8, !insn.addr !407
  %85 = add i8 %83, %84, !insn.addr !407
  store i8 %85, i8* %82, align 1, !insn.addr !407
  %86 = load i32, i32* inttoptr (i32 2228920 to i32*), align 8, !insn.addr !408
  %87 = icmp ult i32 %86, %63, !insn.addr !408
  store i32 %63, i32* inttoptr (i32 -16760614 to i32*), align 4, !insn.addr !409
  store i32 ptrtoint ([14 x i8]* @global_var_40f7f5 to i32), i32* inttoptr (i32 -16760618 to i32*), align 4, !insn.addr !410
  %88 = load i8, i8* @global_var_4102b8, align 1, !insn.addr !411
  %89 = add i32 %3, -1591446338, !insn.addr !412
  %90 = inttoptr i32 %89 to i8*, !insn.addr !412
  %91 = load i8, i8* %90, align 1, !insn.addr !412
  %92 = zext i1 %87 to i8, !insn.addr !412
  %93 = add i8 %88, %92, !insn.addr !412
  %94 = add i8 %93, %91, !insn.addr !412
  store i8 %94, i8* %90, align 1, !insn.addr !412
  %95 = call i32 @__asm_int3(), !insn.addr !413
  %96 = add i32 %80, 1090670882, !insn.addr !414
  %97 = inttoptr i32 %96 to i8*, !insn.addr !414
  %98 = load i8, i8* %97, align 1, !insn.addr !414
  %99 = trunc i32 %7 to i8, !insn.addr !414
  %100 = add i8 %98, %99, !insn.addr !414
  store i8 %100, i8* %97, align 1, !insn.addr !414
  %101 = add i32 %80, 1191364629, !insn.addr !415
  %102 = inttoptr i32 %101 to i8*, !insn.addr !415
  %103 = load i8, i8* %102, align 1, !insn.addr !415
  %104 = add i8 %103, %99, !insn.addr !415
  store i8 %104, i8* %102, align 1, !insn.addr !415
  %105 = add i32 %52, -95, !insn.addr !416
  %106 = inttoptr i32 %105 to i16*, !insn.addr !416
  %107 = inttoptr i32 %7 to i32*, !insn.addr !417
  %108 = load i32, i32* %107, align 4, !insn.addr !417
  %109 = sub i32 %108, %95, !insn.addr !417
  store i32 %109, i32* %107, align 4, !insn.addr !417
  store i32 %7, i32* inttoptr (i32 -16760620 to i32*), align 4, !insn.addr !418
  store i32 %63, i32* inttoptr (i32 -16760624 to i32*), align 16, !insn.addr !419
  store i32 %95, i32* inttoptr (i32 -16760628 to i32*), align 4, !insn.addr !420
  ret i32 %95, !insn.addr !420

dec_label_pc_402175:                              ; preds = %dec_label_pc_402101
  %110 = call i16 @__readfsword(i32 %66), !insn.addr !421
  %111 = load i32, i32* inttoptr (i32 -1455357432 to i32*), align 8, !insn.addr !422
  %112 = load i32, i32* inttoptr (i32 5702352 to i32*), align 16, !insn.addr !423
  %113 = select i1 %5, i32 -1, i32 1, !insn.addr !424
  %114 = add i32 %52, %113, !insn.addr !424
  %115 = and i32 %112, 1062729472, !insn.addr !425
  %116 = or i32 %115, -1062729726, !insn.addr !426
  %117 = add i32 %63, 104, !insn.addr !427
  %118 = inttoptr i32 %117 to i8*, !insn.addr !427
  %119 = load i8, i8* %118, align 1, !insn.addr !427
  %120 = trunc i32 %63 to i8, !insn.addr !427
  %121 = add i8 %119, %120, !insn.addr !427
  store i8 %121, i8* %118, align 1, !insn.addr !427
  %122 = inttoptr i32 %114 to i32*, !insn.addr !428
  store i32 %116, i32* %122, align 4, !insn.addr !428
  %123 = call i32 @function_6ba108c4(i32 -2063580926, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @global_var_40de48, i32 0, i32 0), i32 %111), !insn.addr !429
  ret i32 %123, !insn.addr !429
}

define i32 @function_4021c1() local_unnamed_addr {
dec_label_pc_4021c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = or i32 %0, 12, !insn.addr !430
  %4 = add i32 %1, 1, !insn.addr !431
  %5 = inttoptr i32 %3 to i32*, !insn.addr !432
  %6 = load i32, i32* %5, align 4, !insn.addr !432
  %7 = add i32 %4, %6, !insn.addr !432
  store i32 %7, i32* %5, align 4, !insn.addr !432
  %8 = load i32, i32* inttoptr (i32 4314033 to i32*), align 4, !insn.addr !433
  %9 = or i32 %8, 7013028, !insn.addr !434
  %10 = load i8, i8* inttoptr (i32 1358971152 to i8*), align 16, !insn.addr !435
  %11 = zext i8 %10 to i32, !insn.addr !435
  %12 = and i32 %9, -256, !insn.addr !435
  %13 = or i32 %12, %11, !insn.addr !435
  store i32 %13, i32* inttoptr (i32 1088256104 to i32*), align 8, !insn.addr !436
  %14 = trunc i32 %2 to i8, !insn.addr !437
  %15 = call i8 @llvm.ctpop.i8(i8 %14), !range !405, !insn.addr !437
  %16 = and i8 %15, 1, !insn.addr !437
  %17 = icmp eq i8 %16, 0, !insn.addr !437
  %18 = icmp eq i1 %17, false, !insn.addr !438
  br i1 %18, label %19, label %dec_label_pc_402220, !insn.addr !438

; <label>:19:                                     ; preds = %dec_label_pc_4021c1
  %20 = call i32 @function_ab42ba2d(), !insn.addr !438
  br label %dec_label_pc_402220, !insn.addr !438

dec_label_pc_402220:                              ; preds = %19, %dec_label_pc_4021c1
  call void @__asm_out.1(i32 128, i32 %2), !insn.addr !439
  %21 = udiv i32 %9, 256, !insn.addr !440
  %22 = trunc i32 %21 to i8, !insn.addr !440
  %23 = sub i8 0, %22
  %24 = sub i8 %23, 1
  %25 = icmp ult i8 %24, %22, !insn.addr !440
  %26 = select i1 %25, i32 255, i32 0, !insn.addr !441
  %27 = and i32 %2, -256, !insn.addr !441
  %28 = or i32 %26, %27, !insn.addr !441
  ret i32 %28, !insn.addr !442
}

define i32 @function_402233() local_unnamed_addr {
dec_label_pc_402233:
  %eax.0.reg2mem = alloca i32, !insn.addr !443
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_4()
  %stack_var_176 = alloca i32, align 4
  %6 = load i32, i32* inttoptr (i32 675401388 to i32*), align 4, !insn.addr !444
  %7 = icmp eq i32 %6, 0, !insn.addr !445
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !446
  br i1 %7, label %8, label %dec_label_pc_40224e, !insn.addr !446

; <label>:8:                                      ; preds = %dec_label_pc_402233
  %9 = call i32 @function_b4030c5(), !insn.addr !446
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !446
  br label %dec_label_pc_40224e, !insn.addr !446

dec_label_pc_40224e:                              ; preds = %8, %dec_label_pc_402233
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %10 = mul i32 %eax.0.reload, 256
  %11 = and i32 %3, 65280
  %12 = and i32 %11, %10, !insn.addr !447
  %13 = and i32 %3, -65536, !insn.addr !447
  %14 = or i32 %12, %13, !insn.addr !447
  %15 = sub i32 %3, %eax.0.reload, !insn.addr !448
  %16 = and i32 %15, 255, !insn.addr !448
  %17 = or i32 %14, %16, !insn.addr !448
  %18 = add i32 %eax.0.reload, 1, !insn.addr !449
  %19 = mul i32 %2, 256
  %20 = add i32 %18, %19
  %21 = and i32 %18, -65536, !insn.addr !450
  %22 = fptosi x86_fp80 %5 to i64, !insn.addr !451
  %23 = add i32 %2, -3, !insn.addr !451
  %24 = inttoptr i32 %23 to i64*, !insn.addr !451
  store i64 %22, i64* %24, align 4, !insn.addr !451
  %25 = udiv i32 %20, 256, !insn.addr !450
  %26 = trunc i32 %25 to i8, !insn.addr !452
  %27 = inttoptr i32 %17 to i8*, !insn.addr !452
  %28 = load i8, i8* %27, align 1, !insn.addr !452
  %29 = add i8 %28, %26, !insn.addr !452
  %30 = trunc i32 %2 to i8, !insn.addr !453
  %31 = add i8 %29, %30, !insn.addr !453
  %32 = icmp ult i8 %31, %29, !insn.addr !453
  %33 = zext i8 %31 to i32, !insn.addr !453
  %34 = mul i32 %33, 256, !insn.addr !453
  %35 = or i32 %34, %21, !insn.addr !453
  %36 = udiv i32 %4, 256, !insn.addr !454
  %37 = trunc i32 %36 to i8, !insn.addr !454
  %38 = select i1 %32, i8 29, i8 28, !insn.addr !454
  %39 = icmp ugt i8 %38, %37, !insn.addr !454
  %40 = or i1 %32, %39, !insn.addr !454
  %41 = select i1 %40, i32 81, i32 80, !insn.addr !455
  %42 = sub i32 %0, %41, !insn.addr !455
  %43 = and i32 %42, 255, !insn.addr !455
  %44 = or i32 %35, %43, !insn.addr !455
  %45 = add i32 %44, 1, !insn.addr !456
  %46 = udiv i32 %2, 256, !insn.addr !457
  %47 = trunc i32 %46 to i8, !insn.addr !457
  %.tr = trunc i32 %46 to i8
  %48 = mul i8 %.tr, 2, !insn.addr !457
  %49 = icmp ult i8 %48, %47, !insn.addr !457
  %50 = mul i32 %46, 512, !insn.addr !457
  %51 = and i32 %2, -65281, !insn.addr !457
  %52 = or i32 %50, %51, !insn.addr !457
  %53 = select i1 %49, i32 255, i32 0, !insn.addr !458
  %54 = and i32 %45, -256, !insn.addr !458
  %55 = or i32 %54, %53, !insn.addr !458
  %56 = load i32, i32* inttoptr (i32 13226008 to i32*), align 8, !insn.addr !459
  %57 = sitofp i32 %56 to x86_fp80, !insn.addr !459
  %58 = ptrtoint i32* %stack_var_176 to i32, !insn.addr !460
  %59 = add i32 %17, -49, !insn.addr !461
  %60 = inttoptr i32 %59 to i8*, !insn.addr !461
  %61 = load i8, i8* %60, align 1, !insn.addr !461
  %62 = mul i8 %61, 2, !insn.addr !461
  store i8 %62, i8* %60, align 1, !insn.addr !461
  %63 = and i32 %15, %58
  %64 = add i32 %63, %4, !insn.addr !462
  %65 = and i32 %64, 255, !insn.addr !462
  %66 = or i32 %65, %14, !insn.addr !462
  %67 = add i32 %55, -4, !insn.addr !463
  %68 = inttoptr i32 %67 to i32*, !insn.addr !463
  store i32 54, i32* %68, align 4, !insn.addr !463
  %69 = add i32 %66, 550427856, !insn.addr !464
  %70 = inttoptr i32 %69 to i32*, !insn.addr !464
  %71 = add i32 %55, -6, !insn.addr !465
  %72 = inttoptr i32 %71 to i16*, !insn.addr !465
  %73 = add i32 %55, -8, !insn.addr !466
  %74 = inttoptr i32 %73 to i16*, !insn.addr !466
  %75 = load i8*, i8** @global_var_4102ac, align 4, !insn.addr !467
  %76 = ptrtoint i8* %75 to i32, !insn.addr !467
  %77 = sitofp i32 %76 to x86_fp80, !insn.addr !467
  %78 = fdiv x86_fp80 %57, %77, !insn.addr !467
  %79 = fptrunc x86_fp80 %78 to double, !insn.addr !468
  %80 = inttoptr i32 %67 to double*, !insn.addr !468
  store double %79, double* %80, align 4, !insn.addr !468
  %81 = add i32 %52, %50
  %82 = and i32 %81, 65024, !insn.addr !469
  %83 = or i32 %82, %51, !insn.addr !469
  %84 = add i32 %1, -130, !insn.addr !470
  %85 = inttoptr i32 %84 to double*, !insn.addr !470
  %86 = load double, double* %85, align 4, !insn.addr !470
  %87 = fpext double %86 to x86_fp80, !insn.addr !470
  %88 = fmul x86_fp80 %5, %87, !insn.addr !470
  %89 = load double, double* inttoptr (i32 -935280104 to double*), align 8, !insn.addr !471
  %90 = fpext double %89 to x86_fp80, !insn.addr !471
  %91 = fmul x86_fp80 %88, %90, !insn.addr !471
  %92 = fptrunc x86_fp80 %91 to double, !insn.addr !472
  %93 = inttoptr i32 %55 to double*, !insn.addr !472
  store double %92, double* %93, align 4, !insn.addr !472
  store i32 1010883748, i32* %68, align 4, !insn.addr !473
  %94 = or i32 %14, 96, !insn.addr !474
  %95 = load i32, i32* inttoptr (i32 -998047679 to i32*), align 4, !insn.addr !475
  %96 = or i32 %95, 207, !insn.addr !476
  %97 = icmp ult i32 %67, 8, !insn.addr !477
  %98 = inttoptr i32 %94 to i32*, !insn.addr !478
  %99 = load i32, i32* %98, align 32, !insn.addr !478
  %100 = zext i1 %97 to i32, !insn.addr !478
  %101 = add i32 %99, %83, !insn.addr !478
  %102 = add i32 %101, %100, !insn.addr !478
  %103 = icmp ule i32 %102, %99, !insn.addr !478
  %104 = icmp ult i32 %101, %99, !insn.addr !478
  %105 = select i1 %97, i1 %103, i1 %104, !insn.addr !478
  store i32 %102, i32* %98, align 32, !insn.addr !478
  %106 = inttoptr i32 %94 to float*, !insn.addr !479
  %107 = load float, float* %106, align 32, !insn.addr !479
  %108 = add i32 %83, -71369376, !insn.addr !480
  %109 = add i32 %108, %96, !insn.addr !481
  %110 = fpext float %107 to double, !insn.addr !481
  %111 = inttoptr i32 %109 to double*, !insn.addr !481
  store double %110, double* %111, align 4, !insn.addr !481
  %112 = add i32 %55, -16, !insn.addr !482
  %113 = inttoptr i32 %112 to i32*, !insn.addr !482
  store i32 ptrtoint ([40 x i8]* @global_var_40dc7c to i32), i32* %113, align 4, !insn.addr !482
  %114 = zext i1 %105 to i32, !insn.addr !483
  %115 = add i32 %94, ptrtoint (i32* @global_var_4102a0 to i32), !insn.addr !483
  %116 = or i32 %115, %114, !insn.addr !483
  ret i32 %116, !insn.addr !484
}

define i32 @function_4022fb() local_unnamed_addr {
dec_label_pc_4022fb:
  %0 = load i32, i32* inttoptr (i32 1480655524 to i32*), align 4, !insn.addr !485
  ret i32 %0, !insn.addr !486
}

define i32 @function_402306() local_unnamed_addr {
dec_label_pc_402306:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = mul i32 %0, 256
  %6 = add i32 %5, %1
  %7 = and i32 %6, 65280, !insn.addr !487
  %8 = and i32 %1, -65281, !insn.addr !487
  %9 = or i32 %7, %8, !insn.addr !487
  %10 = inttoptr i32 %9 to i8*, !insn.addr !488
  %11 = load i8, i8* %10, align 1, !insn.addr !488
  %12 = trunc i32 %3 to i8, !insn.addr !488
  %13 = add i8 %11, %12, !insn.addr !488
  store i8 %13, i8* %10, align 1, !insn.addr !488
  %14 = or i32 %3, 1435092755, !insn.addr !489
  %15 = select i1 %4, i32 -1, i32 1, !insn.addr !490
  %16 = add i32 %15, %0, !insn.addr !490
  %17 = trunc i32 %2 to i16, !insn.addr !491
  %18 = call i32 @__asm_insd(i16 %17), !insn.addr !491
  %19 = inttoptr i32 %16 to i32*, !insn.addr !491
  store i32 %18, i32* %19, align 4, !insn.addr !491
  %20 = add i32 %9, 13, !insn.addr !492
  %21 = inttoptr i32 %20 to i8*, !insn.addr !492
  %22 = load i8, i8* %21, align 1, !insn.addr !492
  %23 = and i8 %22, 24, !insn.addr !492
  store i8 %23, i8* %21, align 1, !insn.addr !492
  ret i32 %14, !insn.addr !493
}

define i32 @function_402396() local_unnamed_addr {
dec_label_pc_402396:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4023fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_4023fc:
  %eax.0.reg2mem = alloca i32, !insn.addr !494
  %of.0.reg2mem = alloca i1, !insn.addr !494
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = load i8, i8* inttoptr (i32 732185993 to i8*), align 1, !insn.addr !495
  %7 = and i32 %1, 31, !insn.addr !496
  %8 = icmp eq i32 %7, 0, !insn.addr !496
  br i1 %8, label %26, label %9, !insn.addr !496

; <label>:9:                                      ; preds = %dec_label_pc_4023fc
  %10 = zext i1 %5 to i32, !insn.addr !496
  %11 = lshr i32 %0, %7, !insn.addr !496
  %12 = zext i32 %0 to i64, !insn.addr !496
  %13 = sub nsw i32 33, %7, !insn.addr !496
  %14 = zext i32 %13 to i64, !insn.addr !496
  %15 = shl i64 %12, %14, !insn.addr !496
  %16 = sub nsw i32 32, %7, !insn.addr !496
  %17 = shl i32 %10, %16, !insn.addr !496
  %18 = trunc i64 %15 to i32
  %19 = or i32 %11, %18
  %20 = or i32 %19, %17, !insn.addr !496
  %21 = inttoptr i32 %0 to i32*, !insn.addr !496
  store i32 %20, i32* %21, align 4, !insn.addr !496
  %22 = lshr i32 %0, 31, !insn.addr !496
  %23 = icmp ne i32 %22, %10, !insn.addr !496
  %24 = icmp eq i32 %7, 1, !insn.addr !496
  %25 = select i1 %24, i1 %23, i1 %3, !insn.addr !496
  store i1 %25, i1* %of.0.reg2mem, !insn.addr !496
  br label %26, !insn.addr !496

; <label>:26:                                     ; preds = %dec_label_pc_4023fc, %9
  %27 = and i32 %2, -256, !insn.addr !497
  %28 = zext i8 %6 to i32, !insn.addr !495
  %29 = or i32 %27, %28, !insn.addr !495
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %30 = icmp eq i1 %4, %of.0.reload, !insn.addr !498
  store i32 %29, i32* %eax.0.reg2mem, !insn.addr !498
  br i1 %30, label %dec_label_pc_40240b, label %31, !insn.addr !498

; <label>:31:                                     ; preds = %26
  %32 = call i32 @function_402396(), !insn.addr !498
  store i32 %32, i32* %eax.0.reg2mem, !insn.addr !498
  br label %dec_label_pc_40240b, !insn.addr !498

dec_label_pc_40240b:                              ; preds = %26, %31
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !499
}

define i32 @function_402438(i32 %arg1) local_unnamed_addr {
dec_label_pc_402438:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = sdiv i8 %2, 2, !insn.addr !500
  %4 = inttoptr i32 %0 to i8*, !insn.addr !500
  store i8 %3, i8* %4, align 1, !insn.addr !500
  ret i32 %1, !insn.addr !501
}

define i32 @function_40246e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40246e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i16, !insn.addr !502
  %3 = call i8 @__asm_in.4(i16 %2), !insn.addr !502
  %4 = sext i8 %3 to i32, !insn.addr !502
  %5 = or i32 %1, %4, !insn.addr !502
  %6 = add i8 %3, -119, !insn.addr !503
  %7 = zext i8 %6 to i32, !insn.addr !503
  %8 = and i32 %5, -256, !insn.addr !503
  %9 = or i32 %8, %7, !insn.addr !503
  ret i32 %9, !insn.addr !504
}

define i32 @function_402477() local_unnamed_addr {
dec_label_pc_402477:
  %0 = call i32 @function_40247c(), !insn.addr !505
  ret i32 %0, !insn.addr !505
}

define i32 @function_402479() local_unnamed_addr {
dec_label_pc_402479:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !506
}

define i32 @function_40247c() local_unnamed_addr {
dec_label_pc_40247c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, 12, !insn.addr !507
  %5 = inttoptr i32 %4 to i32*, !insn.addr !507
  %6 = load i32, i32* %5, align 4, !insn.addr !507
  %7 = add i32 %0, -68, !insn.addr !508
  %8 = inttoptr i32 %7 to i32*, !insn.addr !508
  %9 = load i32, i32* %8, align 4, !insn.addr !508
  %10 = icmp sgt i32 %9, %6, !insn.addr !509
  br i1 %10, label %dec_label_pc_4024a6, label %dec_label_pc_402486, !insn.addr !509

dec_label_pc_402486:                              ; preds = %dec_label_pc_40247c
  %11 = load i32, i32* inttoptr (i32 -1946412149 to i32*), align 4, !insn.addr !510
  %12 = or i32 %11, 395032669, !insn.addr !510
  store i32 %12, i32* inttoptr (i32 -1946412149 to i32*), align 4, !insn.addr !510
  %13 = add i32 %1, -39, !insn.addr !511
  %14 = inttoptr i32 %13 to i8*, !insn.addr !511
  %15 = load i8, i8* %14, align 1, !insn.addr !511
  %16 = trunc i32 %6 to i8, !insn.addr !511
  %17 = or i8 %15, %16, !insn.addr !511
  %18 = icmp eq i8 %17, 0, !insn.addr !511
  store i8 %17, i8* %14, align 1, !insn.addr !511
  br i1 %18, label %dec_label_pc_402495, label %dec_label_pc_4024a6, !insn.addr !512

dec_label_pc_402495:                              ; preds = %dec_label_pc_402486
  %19 = add i32 %0, -4, !insn.addr !513
  %20 = inttoptr i32 %19 to i32*, !insn.addr !513
  %21 = load i32, i32* %20, align 4, !insn.addr !513
  %22 = add i32 %21, 8, !insn.addr !514
  %23 = inttoptr i32 %22 to i32*, !insn.addr !514
  %24 = load i32, i32* %23, align 4, !insn.addr !514
  %25 = add i32 %0, -72, !insn.addr !515
  %26 = inttoptr i32 %25 to i32*, !insn.addr !515
  store i32 %24, i32* %26, align 4, !insn.addr !515
  %27 = add i32 %21, 12, !insn.addr !516
  %28 = inttoptr i32 %27 to i32*, !insn.addr !516
  %29 = load i32, i32* %28, align 4, !insn.addr !516
  store i32 %29, i32* %8, align 4, !insn.addr !517
  %30 = call i32 @function_4024a9(), !insn.addr !518
  ret i32 %30, !insn.addr !518

dec_label_pc_4024a6:                              ; preds = %dec_label_pc_402486, %dec_label_pc_40247c
  ret i32 %3, !insn.addr !518
}

define i32 @function_4024a7() local_unnamed_addr {
dec_label_pc_4024a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !519
}

define i32 @function_4024a9() local_unnamed_addr {
dec_label_pc_4024a9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !520
}

define i32 @function_402502(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402502:
  %0 = call i32 @__asm_int3(), !insn.addr !521
  %1 = add i32 %arg1, -32, !insn.addr !522
  %2 = inttoptr i32 %1 to i8*, !insn.addr !522
  %3 = load i8, i8* %2, align 1, !insn.addr !522
  %4 = or i8 %3, 3, !insn.addr !522
  store i8 %4, i8* %2, align 1, !insn.addr !522
  ret i32 %0, !insn.addr !523
}

define i32 @function_40251c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_40251c:
  %ecx.0.reg2mem = alloca i32, !insn.addr !524
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i8* @__decompiler_undefined_function_3()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = call i32 @__decompiler_undefined_function_0()
  %8 = or i1 %3, %4, !insn.addr !524
  br i1 %8, label %dec_label_pc_40251e, label %9, !insn.addr !524

; <label>:9:                                      ; preds = %dec_label_pc_40251c
  %10 = call i32 @function_4024a7(), !insn.addr !524
  br label %dec_label_pc_40251e, !insn.addr !524

dec_label_pc_40251e:                              ; preds = %dec_label_pc_40251c, %9
  %11 = call i32 @__asm_int3(), !insn.addr !525
  %12 = add i32 %arg1, -28, !insn.addr !526
  %13 = inttoptr i32 %12 to i32*, !insn.addr !526
  %14 = load i32, i32* %13, align 4, !insn.addr !526
  %15 = trunc i32 %1 to i16, !insn.addr !527
  %16 = call i32 @__asm_insd(i16 %15), !insn.addr !527
  %17 = inttoptr i32 %0 to i32*, !insn.addr !527
  store i32 %16, i32* %17, align 4, !insn.addr !527
  %18 = zext i1 %4 to i32, !insn.addr !528
  %19 = add i32 %11, %18, !insn.addr !528
  %20 = add i32 %19, %14, !insn.addr !528
  %21 = add i32 %arg1, -29, !insn.addr !529
  %22 = inttoptr i32 %21 to i32*, !insn.addr !529
  store i32 %20, i32* %22, align 4, !insn.addr !529
  %23 = add i32 %arg1, 20, !insn.addr !530
  %24 = inttoptr i32 %23 to i32*, !insn.addr !530
  %25 = load i32, i32* %24, align 4, !insn.addr !530
  %26 = add i32 %0, 1, !insn.addr !531
  %27 = add i32 %25, 1435104325, !insn.addr !532
  %28 = inttoptr i32 %27 to i8*, !insn.addr !532
  %29 = load i8, i8* %28, align 1, !insn.addr !532
  %30 = udiv i8 %29, 2, !insn.addr !532
  %31 = shl i8 %29, 7, !insn.addr !532
  %32 = or i8 %30, %31, !insn.addr !532
  store i8 %32, i8* %28, align 1, !insn.addr !532
  %33 = add i32 %0, -1980998262, !insn.addr !533
  %34 = inttoptr i32 %33 to i8*, !insn.addr !533
  %35 = load i8, i8* %34, align 1, !insn.addr !533
  %36 = trunc i32 %2 to i8, !insn.addr !533
  %37 = and i8 %35, %36, !insn.addr !533
  store i8 %37, i8* %34, align 1, !insn.addr !533
  %38 = and i32 %1, -65281, !insn.addr !534
  %39 = or i32 %38, 16384, !insn.addr !534
  %40 = add i32 %arg3, -65, !insn.addr !535
  %41 = inttoptr i32 %40 to i32*, !insn.addr !535
  %42 = load i32, i32* %41, align 4, !insn.addr !535
  %43 = call i32 @function_40b590(i32 %42), !insn.addr !536
  %44 = add i32 %arg3, -53, !insn.addr !537
  %45 = inttoptr i32 %44 to i8*, !insn.addr !537
  %46 = load i8, i8* %45, align 1, !insn.addr !537
  %47 = add i8 %46, %36, !insn.addr !537
  %48 = zext i8 %47 to i32, !insn.addr !537
  %49 = and i32 %2, -256, !insn.addr !537
  %50 = or i32 %49, %48, !insn.addr !537
  %51 = inttoptr i32 %43 to i8*, !insn.addr !538
  %52 = load i8, i8* %51, align 1, !insn.addr !538
  %53 = trunc i32 %43 to i8, !insn.addr !538
  %54 = add i8 %52, %53, !insn.addr !538
  store i8 %54, i8* %51, align 1, !insn.addr !538
  %55 = add i32 %arg3, -33, !insn.addr !539
  %56 = inttoptr i32 %55 to i32*, !insn.addr !539
  %57 = load i32, i32* %56, align 4, !insn.addr !539
  %58 = call i32 @unknown_577521cf(i32 %50, i32 %26, i32 %39), !insn.addr !540
  %59 = add i32 %58, 392407671, !insn.addr !541
  %sext = mul i32 %58, 65536
  %60 = sdiv i32 %sext, 65536, !insn.addr !542
  %61 = inttoptr i32 %59 to i32*, !insn.addr !542
  store i32 %60, i32* %61, align 4, !insn.addr !542
  %62 = inttoptr i32 %39 to i32*, !insn.addr !543
  %63 = load i32, i32* %62, align 4, !insn.addr !543
  %64 = sub i32 %63, %39, !insn.addr !543
  %65 = trunc i32 %64 to i8, !insn.addr !543
  %66 = call i8 @llvm.ctpop.i8(i8 %65), !range !405, !insn.addr !543
  %67 = and i8 %66, 1, !insn.addr !543
  %68 = icmp eq i8 %67, 0, !insn.addr !543
  store i32 %64, i32* %62, align 4, !insn.addr !543
  %69 = add i32 %arg3, -21, !insn.addr !544
  %70 = inttoptr i32 %69 to i32*, !insn.addr !544
  %71 = load i32, i32* %70, align 4, !insn.addr !544
  store i32 %59, i32* inttoptr (i32 -398095416 to i32*), align 8, !insn.addr !545
  %72 = icmp eq i1 %68, false, !insn.addr !546
  br i1 %72, label %dec_label_pc_4025f9, label %dec_label_pc_4025a2, !insn.addr !546

dec_label_pc_4025a2:                              ; preds = %dec_label_pc_40251e
  %73 = sext i16 %6 to i32, !insn.addr !547
  %74 = ptrtoint i8* %5 to i32, !insn.addr !547
  %75 = inttoptr i32 %arg2 to i32*, !insn.addr !548
  store i32 %arg4, i32* %75, align 4, !insn.addr !548
  %76 = add i32 %74, -1398685627, !insn.addr !549
  %77 = inttoptr i32 %76 to i8*, !insn.addr !549
  %78 = load i8, i8* %77, align 1, !insn.addr !549
  %79 = trunc i32 %74 to i8, !insn.addr !549
  %80 = add i8 %78, %79, !insn.addr !549
  store i8 %80, i8* %77, align 1, !insn.addr !549
  %81 = trunc i32 %arg2 to i8, !insn.addr !550
  %82 = load i8, i8* %5, align 1, !insn.addr !550
  %83 = add i8 %82, %81, !insn.addr !550
  %84 = zext i8 %83 to i32, !insn.addr !550
  %85 = and i32 %arg2, -256, !insn.addr !550
  %86 = or i32 %85, %84, !insn.addr !550
  %87 = add i32 %7, -60, !insn.addr !551
  %88 = inttoptr i32 %87 to i32*, !insn.addr !551
  store i32 %73, i32* %88, align 4, !insn.addr !551
  %89 = icmp slt i32 %86, 1
  store i32 %74, i32* %ecx.0.reg2mem, !insn.addr !552
  br i1 %89, label %dec_label_pc_40264a, label %dec_label_pc_4025bc, !insn.addr !552

dec_label_pc_4025bc:                              ; preds = %dec_label_pc_4025a2
  %90 = add i32 %7, -104, !insn.addr !553
  %91 = inttoptr i32 %90 to i64*, !insn.addr !553
  %92 = load i64, i64* %91, align 4, !insn.addr !553
  %93 = sitofp i64 %92 to x86_fp80, !insn.addr !553
  %94 = fptrunc x86_fp80 %93 to double, !insn.addr !554
  %95 = inttoptr i32 %71 to double*, !insn.addr !554
  store double %94, double* %95, align 4, !insn.addr !554
  %96 = call i32 @__asm_insd(i16 %6), !insn.addr !555
  %97 = inttoptr i32 %71 to i32*, !insn.addr !555
  store i32 %96, i32* %97, align 4, !insn.addr !555
  %98 = add i32 %74, 16, !insn.addr !556
  %99 = load i8, i8* @global_var_4102fe, align 1, !insn.addr !557
  %100 = add i32 %7, -32, !insn.addr !558
  %101 = inttoptr i32 %100 to double*, !insn.addr !558
  store double %94, double* %101, align 4, !insn.addr !558
  %102 = add i32 %7, -56, !insn.addr !559
  %103 = inttoptr i32 %102 to i64*, !insn.addr !559
  %104 = load i64, i64* %103, align 4, !insn.addr !559
  %105 = sitofp i64 %104 to x86_fp80, !insn.addr !559
  %106 = add i32 %7, -24, !insn.addr !560
  %107 = fptrunc x86_fp80 %105 to double, !insn.addr !560
  %108 = inttoptr i32 %106 to double*, !insn.addr !560
  store double %107, double* %108, align 4, !insn.addr !560
  %109 = add i32 %7, -64, !insn.addr !561
  %110 = inttoptr i32 %109 to i64*, !insn.addr !561
  %111 = load i64, i64* %110, align 4, !insn.addr !561
  %112 = add i32 %7, -16, !insn.addr !562
  %113 = inttoptr i32 %112 to i64*, !insn.addr !562
  store i64 %111, i64* %113, align 4, !insn.addr !562
  %114 = call i8 @__asm_in.4(i16 %6), !insn.addr !563
  %115 = sext i8 %114 to i32, !insn.addr !563
  %116 = and i32 %98, -256, !insn.addr !563
  %117 = or i32 %116, %115, !insn.addr !563
  %118 = add i32 %117, -539736611, !insn.addr !564
  %119 = inttoptr i32 %118 to i8*, !insn.addr !564
  %120 = load i8, i8* %119, align 1, !insn.addr !564
  %121 = add i8 %120, %99, !insn.addr !564
  store i8 %121, i8* %119, align 1, !insn.addr !564
  ret i32 %117, !insn.addr !565

dec_label_pc_4025f9:                              ; preds = %dec_label_pc_40251e
  %122 = add i32 %arg1, -32, !insn.addr !566
  %123 = inttoptr i32 %122 to i32*, !insn.addr !566
  %124 = add i32 %arg3, -5, !insn.addr !567
  %125 = inttoptr i32 %124 to i32*, !insn.addr !567
  %126 = add i32 %58, 392407639, !insn.addr !568
  %127 = inttoptr i32 %126 to i64*, !insn.addr !568
  %128 = load i64, i64* %127, align 4, !insn.addr !568
  %129 = sitofp i64 %128 to x86_fp80, !insn.addr !568
  %130 = add i32 %arg3, -51, !insn.addr !569
  %131 = inttoptr i32 %130 to double*, !insn.addr !569
  %132 = load double, double* %131, align 4, !insn.addr !569
  %133 = fpext double %132 to x86_fp80, !insn.addr !569
  %134 = fsub x86_fp80 %129, %133, !insn.addr !570
  %135 = call x86_fp80 @llvm.round.f80(x86_fp80 %129), !insn.addr !571
  %136 = call x86_fp80 @llvm.exp2.f80(x86_fp80 %135), !insn.addr !571
  %137 = fmul x86_fp80 %134, %136, !insn.addr !571
  %138 = fmul x86_fp80 %137, %129, !insn.addr !572
  %139 = fadd x86_fp80 %138, %129, !insn.addr !573
  %140 = fsub x86_fp80 %139, %139, !insn.addr !574
  %141 = fmul x86_fp80 %140, %140, !insn.addr !575
  %142 = inttoptr i32 %71 to i16*, !insn.addr !576
  %143 = load i16, i16* %142, align 2, !insn.addr !576
  %144 = sitofp i16 %143 to x86_fp80, !insn.addr !576
  %145 = fmul x86_fp80 %141, %144, !insn.addr !576
  %146 = add i32 %arg3, -121, !insn.addr !577
  %147 = fptrunc x86_fp80 %145 to double, !insn.addr !577
  %148 = inttoptr i32 %146 to double*, !insn.addr !577
  store double %147, double* %148, align 4, !insn.addr !577
  %149 = add i32 %arg3, -89, !insn.addr !578
  %150 = inttoptr i32 %149 to double*, !insn.addr !578
  store double %147, double* %150, align 4, !insn.addr !578
  store i32 %57, i32* %ecx.0.reg2mem
  br label %dec_label_pc_40264a

dec_label_pc_40264a:                              ; preds = %dec_label_pc_4025f9, %dec_label_pc_4025a2
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %151 = add i32 %ecx.0.reload, -1927971327, !insn.addr !579
  %152 = inttoptr i32 %151 to i32*, !insn.addr !579
  %153 = load i32, i32* %152, align 4, !insn.addr !579
  %154 = add i32 %153, 80, !insn.addr !579
  store i32 %154, i32* %152, align 4, !insn.addr !579
  ret i32 842230128, !insn.addr !580
}

define i32 @function_40265a() local_unnamed_addr {
dec_label_pc_40265a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -12, !insn.addr !581
  %2 = inttoptr i32 %1 to i32*, !insn.addr !581
  %3 = load i32, i32* %2, align 4, !insn.addr !581
  %4 = sitofp i32 %3 to x86_fp80, !insn.addr !581
  %5 = fdiv x86_fp80 %4, %4, !insn.addr !582
  %6 = call x86_fp80 @llvm.sqrt.f80(x86_fp80 %5), !insn.addr !583
  %7 = add i32 %0, -136, !insn.addr !584
  %8 = fptrunc x86_fp80 %6 to double, !insn.addr !584
  %9 = inttoptr i32 %7 to double*, !insn.addr !584
  store double %8, double* %9, align 4, !insn.addr !584
  %10 = call i32 @function_40267d(), !insn.addr !585
  ret i32 %10, !insn.addr !585
}

define i32 @function_402669() local_unnamed_addr {
dec_label_pc_402669:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -136, !insn.addr !586
  %3 = inttoptr i32 %2 to i32*, !insn.addr !586
  store i32 177, i32* %3, align 4, !insn.addr !586
  %4 = add i32 %0, -132, !insn.addr !587
  %5 = inttoptr i32 %4 to i32*, !insn.addr !587
  store i32 12714181, i32* %5, align 4, !insn.addr !587
  ret i32 %1, !insn.addr !587
}

define i32 @function_40267d() local_unnamed_addr {
dec_label_pc_40267d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %3 = add i32 %1, -1979758348, !insn.addr !588
  %4 = add i32 %1, 847062504, !insn.addr !589
  %5 = inttoptr i32 %4 to x86_fp80*, !insn.addr !589
  %6 = call x86_fp80 @llvm.sqrt.f80(x86_fp80 %2), !insn.addr !590
  %7 = add i32 %0, -88, !insn.addr !591
  %8 = fptrunc x86_fp80 %6 to double, !insn.addr !591
  %9 = inttoptr i32 %7 to double*, !insn.addr !591
  store double %8, double* %9, align 4, !insn.addr !591
  ret i32 %3, !insn.addr !592
}

define i32 @function_402697(i32 %arg1) local_unnamed_addr {
dec_label_pc_402697:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -110, !insn.addr !593
  %3 = inttoptr i32 %2 to i32*, !insn.addr !593
  store i32 50, i32* %3, align 4, !insn.addr !593
  %4 = add i32 %0, 4, !insn.addr !594
  %5 = inttoptr i32 %4 to i32*, !insn.addr !594
  store i32 17920, i32* %5, align 4, !insn.addr !594
  ret i32 %1, !insn.addr !595
}

define i32 @function_4026ab() local_unnamed_addr {
dec_label_pc_4026ab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !596
}

define i32 @function_4026c5() local_unnamed_addr {
dec_label_pc_4026c5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = inttoptr i32 %3 to i16*, !insn.addr !597
  %5 = bitcast i32* %eax to i8*
  %6 = load i8, i8* %5, align 4, !insn.addr !598
  %7 = load i32, i32* %eax, align 4
  %8 = trunc i32 %7 to i8, !insn.addr !598
  %9 = add i8 %6, %8, !insn.addr !598
  %10 = inttoptr i32 %7 to i8*, !insn.addr !598
  store i8 %9, i8* %10, align 1, !insn.addr !598
  %11 = load i32, i32* %esi, align 4
  %12 = add i32 %11, 19, !insn.addr !599
  %13 = inttoptr i32 %12 to i32*, !insn.addr !599
  %14 = load i32, i32* %13, align 4, !insn.addr !599
  %15 = add i32 %14, %0, !insn.addr !599
  store i32 %15, i32* %13, align 4, !insn.addr !599
  %16 = add i32 %1, -196265228, !insn.addr !600
  %17 = bitcast i32* %esi to i8*
  %18 = load i8, i8* %17, align 4, !insn.addr !601
  %19 = trunc i32 %2 to i8, !insn.addr !601
  %20 = add i8 %18, %19, !insn.addr !601
  %21 = load i32, i32* %esi, align 4, !insn.addr !601
  %22 = inttoptr i32 %21 to i8*, !insn.addr !601
  store i8 %20, i8* %22, align 1, !insn.addr !601
  %23 = inttoptr i32 %16 to i8*, !insn.addr !602
  %24 = load i8, i8* %23, align 1, !insn.addr !602
  %25 = trunc i32 %16 to i8, !insn.addr !602
  %26 = add i8 %24, %25, !insn.addr !602
  store i8 %26, i8* %23, align 1, !insn.addr !602
  %27 = trunc i32 %2 to i16, !insn.addr !603
  %28 = call i32 @__asm_in(i16 %27), !insn.addr !603
  %29 = call i32 @function_402752(i32 32, i32 4206816), !insn.addr !604
  ret i32 %29, !insn.addr !604
}

define i32 @function_40272e() local_unnamed_addr {
dec_label_pc_40272e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !605
}

define i32 @function_402735(i32 %arg1) local_unnamed_addr {
dec_label_pc_402735:
  %storemerge.reg2mem = alloca i32, !insn.addr !606
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !607
  %3 = and i32 %1, 15, !insn.addr !607
  %4 = and i32 %0, 15, !insn.addr !607
  %5 = add nuw nsw i32 %3, %4, !insn.addr !607
  %6 = icmp ugt i32 %5, 15, !insn.addr !607
  %7 = icmp ult i32 %2, %1, !insn.addr !607
  %8 = trunc i32 %2 to i8, !insn.addr !608
  %9 = and i8 %8, 14, !insn.addr !608
  %10 = icmp ugt i8 %9, 9, !insn.addr !608
  %11 = or i1 %6, %10, !insn.addr !608
  %12 = icmp ugt i8 %8, -103
  %13 = or i1 %7, %12
  br i1 %11, label %14, label %19, !insn.addr !608

; <label>:14:                                     ; preds = %dec_label_pc_402735
  %.v = select i1 %13, i32 154, i32 250
  %15 = add i32 %.v, %2, !insn.addr !608
  %16 = and i32 %15, 255, !insn.addr !608
  %17 = and i32 %2, -256, !insn.addr !608
  %18 = or i32 %16, %17, !insn.addr !608
  store i32 %18, i32* %storemerge.reg2mem, !insn.addr !608
  br label %25, !insn.addr !608

; <label>:19:                                     ; preds = %dec_label_pc_402735
  %20 = add i32 %2, 160, !insn.addr !608
  %21 = select i1 %13, i32 %20, i32 %2, !insn.addr !608
  %22 = and i32 %21, 255, !insn.addr !608
  %23 = and i32 %2, -256, !insn.addr !608
  %24 = or i32 %22, %23, !insn.addr !608
  store i32 %24, i32* %storemerge.reg2mem, !insn.addr !608
  br label %25, !insn.addr !608

; <label>:25:                                     ; preds = %14, %19
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !609
}

define i32 @function_402752(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402752:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %2, -937587776, !insn.addr !610
  %7 = inttoptr i32 %6 to i32*, !insn.addr !610
  %8 = load i32, i32* %7, align 4, !insn.addr !610
  %.neg = sext i1 %5 to i32
  %9 = or i32 %3, %0, !insn.addr !611
  %.neg2 = add i32 %4, -120470997, !insn.addr !610
  %10 = add i32 %.neg2, %.neg, !insn.addr !610
  %11 = sub i32 %10, %8, !insn.addr !612
  %12 = inttoptr i32 %11 to i8*, !insn.addr !612
  %13 = load i8, i8* %12, align 1, !insn.addr !612
  %14 = trunc i32 %2 to i8, !insn.addr !612
  %15 = add i8 %13, %14, !insn.addr !612
  store i8 %15, i8* %12, align 1, !insn.addr !612
  %16 = mul i32 %9, 2, !insn.addr !613
  %17 = add i32 %9, 16, !insn.addr !613
  %18 = add i32 %17, %16, !insn.addr !613
  %19 = inttoptr i32 %18 to i32*, !insn.addr !613
  %20 = load i32, i32* %19, align 4, !insn.addr !613
  %21 = add i32 %1, -16, !insn.addr !614
  %22 = inttoptr i32 %21 to i32*, !insn.addr !614
  store i32 %20, i32* %22, align 4, !insn.addr !614
  %23 = add i32 %2, -53, !insn.addr !615
  %24 = inttoptr i32 %23 to i64*, !insn.addr !615
  %25 = load i64, i64* %24, align 4, !insn.addr !615
  %26 = call i32 @__asm_bound(i64 %25), !insn.addr !615
  %27 = call i32 @__asm_hlt(), !insn.addr !616
  %28 = trunc i32 %27 to i8, !insn.addr !617
  store i8 %28, i8* inttoptr (i32 1090694311 to i8*), align 1, !insn.addr !617
  %29 = add i32 %2, -8187708, !insn.addr !618
  %30 = inttoptr i32 %29 to i8*, !insn.addr !618
  %31 = load i8, i8* %30, align 1, !insn.addr !618
  %32 = add i8 %31, %28, !insn.addr !618
  store i8 %32, i8* %30, align 1, !insn.addr !618
  %33 = icmp slt i8 %32, 1, !insn.addr !619
  br i1 %33, label %dec_label_pc_4027de, label %dec_label_pc_40278f, !insn.addr !619

dec_label_pc_40278f:                              ; preds = %dec_label_pc_402752
  %34 = load i32, i32* @global_var_410bc8, align 4, !insn.addr !620
  %35 = ashr i32 %0, 31, !insn.addr !621
  %36 = sub i32 %0, %35, !insn.addr !622
  %37 = mul i32 %36, 8388608, !insn.addr !623
  %38 = add i32 %34, %37, !insn.addr !624
  ret i32 %38, !insn.addr !625

dec_label_pc_4027de:                              ; preds = %dec_label_pc_402752
  %39 = icmp ult i8 %32, %31, !insn.addr !618
  %40 = select i1 %39, i32 add (i32 ptrtoint (i32* @global_var_410b1c to i32), i32 1), i32 ptrtoint (i32* @global_var_410b1c to i32), !insn.addr !626
  %41 = sub i32 %27, %40, !insn.addr !626
  %42 = ashr i32 %41, 31, !insn.addr !627
  %43 = sub i32 %41, %42, !insn.addr !628
  %44 = sdiv i32 %43, 2, !insn.addr !629
  %45 = add i32 %1, 1223436035, !insn.addr !630
  %46 = add i32 %45, %44, !insn.addr !630
  %47 = inttoptr i32 %46 to i32*, !insn.addr !630
  %48 = load i32, i32* %47, align 4, !insn.addr !630
  %49 = sdiv i32 %48, 16777216, !insn.addr !630
  store i32 %49, i32* %47, align 4, !insn.addr !630
  %50 = add nsw i32 %44, 16, !insn.addr !631
  %51 = inttoptr i32 %50 to i32*, !insn.addr !631
  %52 = load i32, i32* %51, align 4, !insn.addr !631
  ret i32 %52, !insn.addr !632
}

define i32 @function_402805() local_unnamed_addr {
dec_label_pc_402805:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i16, !insn.addr !633
  %3 = call i8 @__asm_in.4(i16 %2), !insn.addr !633
  %4 = sext i8 %3 to i32, !insn.addr !633
  %5 = and i32 %1, -256, !insn.addr !633
  %6 = or i32 %5, %4, !insn.addr !633
  ret i32 %6, !insn.addr !633
}

define i32 @function_402806() local_unnamed_addr {
dec_label_pc_402806:
  %cf.0.reg2mem = alloca i1, !insn.addr !634
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = icmp eq i1 %4, false, !insn.addr !635
  br i1 %6, label %dec_label_pc_402856, label %dec_label_pc_402812, !insn.addr !635

dec_label_pc_402812:                              ; preds = %dec_label_pc_402806
  %7 = add i32 %1, 94, !insn.addr !636
  %8 = inttoptr i32 %7 to i32*, !insn.addr !636
  %9 = load i32, i32* %8, align 4, !insn.addr !636
  %10 = zext i1 %5 to i32, !insn.addr !636
  %11 = mul i32 %9, 2048, !insn.addr !636
  %12 = udiv i32 %9, 4194304
  %13 = mul i32 %10, 1024, !insn.addr !636
  %14 = or i32 %11, %13
  %15 = or i32 %14, %12
  store i32 %15, i32* %8, align 4, !insn.addr !636
  %16 = icmp eq i32 %0, 0, !insn.addr !637
  %17 = icmp slt i32 %0, 2, !insn.addr !638
  store i1 %16, i1* %cf.0.reg2mem, !insn.addr !638
  br i1 %17, label %dec_label_pc_402863, label %dec_label_pc_402823, !insn.addr !638

dec_label_pc_402823:                              ; preds = %dec_label_pc_402812
  %18 = load i32, i32* inttoptr (i32 293 to i32*), align 4, !insn.addr !639
  %19 = add i32 %1, -25656504, !insn.addr !640
  %20 = add i32 %19, %3, !insn.addr !640
  %21 = inttoptr i32 %20 to i8*, !insn.addr !640
  %22 = load i8, i8* %21, align 1, !insn.addr !640
  %23 = add i8 %22, 64, !insn.addr !640
  %24 = icmp eq i8 %23, 0, !insn.addr !640
  %25 = icmp ugt i8 %22, -65, !insn.addr !640
  store i8 %23, i8* %21, align 1, !insn.addr !640
  store i1 %25, i1* %cf.0.reg2mem, !insn.addr !641
  br i1 %24, label %dec_label_pc_402863, label %dec_label_pc_402833, !insn.addr !641

dec_label_pc_402833:                              ; preds = %dec_label_pc_402823
  %26 = load i32, i32* @global_var_410b99, align 4, !insn.addr !642
  %27 = add i32 %26, 1639318277, !insn.addr !643
  %28 = inttoptr i32 %27 to i32*, !insn.addr !643
  %29 = load i32, i32* %28, align 4, !insn.addr !643
  %30 = mul i32 %29, 131072, !insn.addr !643
  store i32 %30, i32* %28, align 4, !insn.addr !643
  ret i32 %18, !insn.addr !644

dec_label_pc_402856:                              ; preds = %dec_label_pc_402806
  %31 = or i32 %3, 82, !insn.addr !645
  %32 = xor i32 %2, -251658007, !insn.addr !646
  %33 = inttoptr i32 %2 to i32*, !insn.addr !646
  store i32 %32, i32* %33, align 4, !insn.addr !646
  ret i32 %31, !insn.addr !647

dec_label_pc_402863:                              ; preds = %dec_label_pc_402823, %dec_label_pc_402812
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %34 = select i1 %cf.0.reload, i32 -314504247, i32 -314504248, !insn.addr !648
  %35 = sub i32 %3, %34, !insn.addr !648
  %36 = call i8 @__asm_in.7(i8 43), !insn.addr !649
  %37 = sext i8 %36 to i32, !insn.addr !649
  %38 = and i32 %35, -256, !insn.addr !649
  %39 = or i32 %38, %37, !insn.addr !649
  ret i32 %39, !insn.addr !650
}

define i32 @function_402870() local_unnamed_addr {
dec_label_pc_402870:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = mul i32 %2, 32, !insn.addr !651
  %4 = or i32 %3, 8, !insn.addr !652
  %5 = add i32 %4, %1, !insn.addr !652
  %6 = inttoptr i32 %5 to i32*, !insn.addr !652
  %7 = load i32, i32* %6, align 4, !insn.addr !652
  %8 = add i32 %0, -32, !insn.addr !653
  %9 = inttoptr i32 %8 to i32*, !insn.addr !653
  %10 = load i32, i32* %9, align 4, !insn.addr !653
  %11 = udiv i32 %10, 2, !insn.addr !653
  %12 = shl i32 %10, 31, !insn.addr !653
  %13 = or i32 %11, %12, !insn.addr !653
  store i32 %13, i32* %9, align 4, !insn.addr !653
  %14 = or i32 %3, 12, !insn.addr !654
  %15 = add i32 %14, %1, !insn.addr !654
  %16 = inttoptr i32 %15 to i32*, !insn.addr !654
  %17 = load i32, i32* %16, align 4, !insn.addr !654
  %18 = mul i32 %17, 1211179112, !insn.addr !654
  %19 = add i32 %18, 32, !insn.addr !655
  %20 = inttoptr i32 %19 to i8*, !insn.addr !655
  %21 = load i8, i8* %20, align 8, !insn.addr !655
  %22 = udiv i32 %7, 256, !insn.addr !655
  %23 = trunc i32 %22 to i8, !insn.addr !655
  %24 = add i8 %21, %23, !insn.addr !655
  store i8 %24, i8* %20, align 8, !insn.addr !655
  %25 = add i32 %0, -28, !insn.addr !656
  %26 = inttoptr i32 %25 to i32*, !insn.addr !656
  store i32 %18, i32* %26, align 4, !insn.addr !656
  ret i32 %3, !insn.addr !657
}

define i32 @function_402890(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_402890:
  %0 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 8
  %1 = call i64 @__decompiler_undefined_function_8()
  %2 = load i8*, i8** @global_var_4102ac, align 4, !insn.addr !658
  %3 = ptrtoint i8* %2 to i32, !insn.addr !658
  %4 = bitcast i32* %ecx to i64*
  %5 = load i64, i64* %4, align 8, !insn.addr !659
  %6 = call i64 @__asm_psubb(i64 %1, i64 %5), !insn.addr !659
  %7 = trunc i32 %3 to i8, !insn.addr !660
  store i8 %7, i8* inttoptr (i32 91848704 to i8*), align 32768, !insn.addr !660
  store i32 -1, i32* %ecx, align 8, !insn.addr !661
  %8 = add i32 %0, ptrtoint (i32* @global_var_410bc8 to i32), !insn.addr !662
  %9 = inttoptr i32 %8 to i32*, !insn.addr !662
  %10 = load i32, i32* %9, align 4, !insn.addr !662
  %11 = udiv i32 %10, 2
  %12 = mul i32 %11, 32, !insn.addr !663
  %13 = and i32 %10, 268435456
  %14 = icmp ne i32 %13, 0, !insn.addr !663
  %15 = trunc i32 %12 to i8, !insn.addr !664
  %16 = icmp ugt i8 %15, -63
  %17 = icmp ult i8 %15, -62
  %18 = add i32 %12, 62
  %19 = select i1 %17, i32 %12, i32 %18, !insn.addr !664
  %20 = and i32 %12, -65536, !insn.addr !664
  %21 = zext i1 %16 to i32, !insn.addr !664
  %22 = mul i32 %21, 256, !insn.addr !664
  %23 = or i32 %22, %20, !insn.addr !664
  %24 = trunc i32 %19 to i8, !insn.addr !665
  %25 = and i8 %24, 14, !insn.addr !665
  %26 = icmp ugt i8 %25, 9, !insn.addr !665
  %27 = icmp ugt i8 %24, -103
  %28 = or i1 %14, %27
  %.v = select i1 %28, i32 154, i32 250
  %29 = add i32 %.v, %19
  %30 = add i32 %19, 160
  %31 = select i1 %28, i32 %30, i32 %19
  %.pn.in = select i1 %26, i32 %29, i32 %31
  %.pn = and i32 %.pn.in, 254
  %32 = add i32 %0, 1485536840, !insn.addr !666
  %33 = inttoptr i32 %32 to i8*, !insn.addr !666
  %34 = load i8, i8* %33, align 1, !insn.addr !666
  %35 = add i8 %34, -1, !insn.addr !666
  %36 = icmp ne i8 %34, 0, !insn.addr !666
  %37 = add i32 %0, 2022390864, !insn.addr !667
  %38 = inttoptr i32 %37 to i8*, !insn.addr !667
  %39 = load i8, i8* %38, align 1, !insn.addr !667
  %40 = zext i1 %36 to i8, !insn.addr !667
  %41 = add i8 %35, %40, !insn.addr !667
  %42 = sub i8 %39, %41, !insn.addr !667
  %43 = sub i8 %42, %40, !insn.addr !667
  %44 = icmp ult i8 %39, %43, !insn.addr !667
  %45 = icmp ne i8 %41, -1, !insn.addr !667
  %46 = or i1 %45, %44, !insn.addr !667
  %47 = icmp ult i8 %39, %41, !insn.addr !667
  %48 = select i1 %36, i1 %46, i1 %47, !insn.addr !667
  store i8 %42, i8* %38, align 1, !insn.addr !667
  %49 = select i1 %48, i32 4, i32 3, !insn.addr !668
  %50 = sub nsw i32 %.pn, %49, !insn.addr !668
  %51 = and i32 %50, 255, !insn.addr !668
  %52 = or i32 %23, %51, !insn.addr !668
  ret i32 %52, !insn.addr !669
}

define i32 @function_402a58() local_unnamed_addr {
dec_label_pc_402a58:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -1912602124, !insn.addr !670
  ret i32 %1, !insn.addr !671
}

define i32 @function_402a66(i32 %arg1) local_unnamed_addr {
dec_label_pc_402a66:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !672
}

define x86_fp80 @function_402a6d(i16 %arg1) local_unnamed_addr {
dec_label_pc_402a6d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 8
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -127747251, !insn.addr !673
  %4 = inttoptr i32 %3 to i8*, !insn.addr !673
  %5 = load i8, i8* %4, align 1, !insn.addr !673
  %6 = trunc i32 %2 to i8, !insn.addr !673
  %7 = add i8 %5, %6, !insn.addr !673
  store i8 %7, i8* %4, align 1, !insn.addr !673
  %8 = add i32 %0, -72, !insn.addr !674
  %9 = inttoptr i32 %8 to i32*, !insn.addr !674
  %10 = load i32, i32* %9, align 4, !insn.addr !674
  %11 = load i32, i32* %edx, align 8
  %12 = add i32 %10, 28636, !insn.addr !675
  %13 = inttoptr i32 %12 to i32*, !insn.addr !675
  %14 = load i32, i32* %13, align 4, !insn.addr !675
  %15 = and i32 %14, %11, !insn.addr !675
  store i32 %15, i32* %13, align 4, !insn.addr !675
  %16 = load i32, i32* %edx, align 8
  %17 = add i32 %16, 1172111360, !insn.addr !676
  %18 = inttoptr i32 %17 to i32*, !insn.addr !676
  %19 = load i32, i32* %18, align 4, !insn.addr !676
  %20 = add i32 %19, -1, !insn.addr !676
  store i32 %20, i32* %18, align 4, !insn.addr !676
  %21 = add i32 %0, -1470243381, !insn.addr !677
  %22 = inttoptr i32 %21 to i8*, !insn.addr !677
  %23 = load i8, i8* %22, align 1, !insn.addr !677
  %24 = add i8 %23, -95, !insn.addr !677
  %25 = icmp ugt i8 %23, 94, !insn.addr !677
  store i8 %24, i8* %22, align 1, !insn.addr !677
  %26 = add i32 %0, -119, !insn.addr !678
  %27 = inttoptr i32 %26 to double*, !insn.addr !678
  %28 = load double, double* %27, align 4, !insn.addr !678
  %29 = fpext double %28 to x86_fp80, !insn.addr !678
  %30 = fmul x86_fp80 %29, 0xK3BF49700000078000000, !insn.addr !679
  %31 = load i32, i32* %edx, align 8, !insn.addr !680
  %32 = add i32 %0, 113, !insn.addr !680
  %33 = inttoptr i32 %32 to i32*, !insn.addr !680
  store i32 %31, i32* %33, align 4, !insn.addr !680
  %34 = add i32 %0, 112, !insn.addr !681
  %35 = fptrunc x86_fp80 %30 to double, !insn.addr !681
  %36 = inttoptr i32 %34 to double*, !insn.addr !681
  store double %35, double* %36, align 4, !insn.addr !681
  %37 = add i32 %0, -111, !insn.addr !682
  %38 = inttoptr i32 %37 to double*, !insn.addr !682
  %39 = load double, double* %38, align 4, !insn.addr !682
  %40 = fpext double %39 to x86_fp80, !insn.addr !682
  %41 = bitcast i32* %edx to double*
  %42 = load double, double* %41, align 8, !insn.addr !683
  %43 = fpext double %42 to x86_fp80, !insn.addr !683
  %44 = fsub x86_fp80 %43, %40, !insn.addr !683
  %45 = bitcast double %42 to i64
  %46 = trunc i64 %45 to i32
  %47 = select i1 %25, i32 162, i32 161, !insn.addr !684
  %48 = add i32 %47, %46, !insn.addr !684
  %49 = and i32 %48, 255, !insn.addr !684
  %50 = and i32 %46, -256, !insn.addr !684
  %51 = or i32 %49, %50, !insn.addr !684
  %52 = load i8, i8* inttoptr (i32 1977454685 to i8*), align 1, !insn.addr !685
  %53 = trunc i32 %11 to i8, !insn.addr !685
  %54 = add i8 %52, %53, !insn.addr !685
  store i8 %54, i8* inttoptr (i32 1977454685 to i8*), align 1, !insn.addr !685
  %55 = add i32 %51, -640671581, !insn.addr !686
  %56 = inttoptr i32 %55 to double*, !insn.addr !686
  %57 = load double, double* %56, align 4, !insn.addr !686
  %58 = fpext double %57 to x86_fp80, !insn.addr !686
  %59 = fmul x86_fp80 %44, %58, !insn.addr !686
  ret x86_fp80 %59, !insn.addr !687
}

define i32 @function_402ae5() local_unnamed_addr {
dec_label_pc_402ae5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = trunc i32 %3 to i8, !insn.addr !688
  %7 = udiv i32 %2, 256, !insn.addr !688
  %8 = trunc i32 %7 to i8, !insn.addr !688
  %.neg1 = sext i1 %5 to i8
  %.neg2 = sub i8 %6, %8, !insn.addr !688
  %9 = add i8 %.neg2, %.neg1, !insn.addr !688
  %10 = call i8 @llvm.ctpop.i8(i8 %9), !range !405, !insn.addr !688
  %11 = and i8 %10, 1, !insn.addr !688
  %12 = icmp eq i8 %11, 0, !insn.addr !688
  br i1 %12, label %dec_label_pc_402b53, label %dec_label_pc_402b03, !insn.addr !689

dec_label_pc_402b03:                              ; preds = %dec_label_pc_402ae5
  %13 = call i32 @function_40b590(i32 12180440), !insn.addr !690
  %14 = add i32 %1, -20, !insn.addr !691
  %15 = inttoptr i32 %14 to i32*, !insn.addr !691
  %16 = load i32, i32* %15, align 4, !insn.addr !691
  %17 = call i32 @__asm_int1(), !insn.addr !692
  %18 = add i32 %1, 32, !insn.addr !693
  %19 = inttoptr i32 %18 to i32*, !insn.addr !693
  %20 = load i32, i32* %19, align 4, !insn.addr !693
  %21 = zext i16 %4 to i32, !insn.addr !694
  %22 = add nsw i32 %21, -4, !insn.addr !695
  %23 = inttoptr i32 %22 to i32*, !insn.addr !695
  %24 = add i32 %1, -47, !insn.addr !696
  %25 = inttoptr i32 %24 to i32*, !insn.addr !696
  %26 = load i32, i32* %25, align 4, !insn.addr !696
  %27 = add nsw i32 %21, -8, !insn.addr !697
  %28 = inttoptr i32 %27 to i32*, !insn.addr !697
  store i32 %16, i32* %28, align 4, !insn.addr !697
  %29 = add nsw i32 %21, -12, !insn.addr !698
  %30 = inttoptr i32 %29 to i32*, !insn.addr !698
  store i32 %20, i32* %30, align 4, !insn.addr !698
  %31 = add nsw i32 %21, -16, !insn.addr !699
  %32 = inttoptr i32 %31 to i32*, !insn.addr !699
  store i32 %26, i32* %32, align 4, !insn.addr !699
  ret i32 %26, !insn.addr !699

dec_label_pc_402b53:                              ; preds = %dec_label_pc_402ae5
  %33 = and i32 %0, -256, !insn.addr !700
  %34 = or i32 %33, 165, !insn.addr !701
  ret i32 %34, !insn.addr !699
}

define i32 @function_402b50() local_unnamed_addr {
dec_label_pc_402b50:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !702
}

define i32 @function_402b54() local_unnamed_addr {
dec_label_pc_402b54:
  %0 = load i32, i32* inttoptr (i32 15715 to i32*), align 4, !insn.addr !703
  %1 = add i32 %0, 1, !insn.addr !703
  store i32 %1, i32* inttoptr (i32 15715 to i32*), align 4, !insn.addr !703
  %2 = call i32 @unknown_52352b68(i32 0), !insn.addr !704
  ret i32 %2, !insn.addr !705
}

define i32 @function_402b86() local_unnamed_addr {
dec_label_pc_402b86:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_402be7() local_unnamed_addr {
dec_label_pc_402be7:
  %eax.0.reg2mem = alloca i32, !insn.addr !706
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -1957520307, !insn.addr !707
  %4 = inttoptr i32 %3 to i8*, !insn.addr !707
  %5 = load i8, i8* %4, align 1, !insn.addr !707
  %6 = or i8 %5, 85, !insn.addr !707
  store i8 %6, i8* %4, align 1, !insn.addr !707
  %7 = call i32 @__asm_wait(), !insn.addr !708
  %8 = and i32 %7, -256, !insn.addr !709
  %9 = bitcast i32* %esi to i8*
  %10 = load i8, i8* %9, align 4, !insn.addr !710
  %11 = inttoptr i32 %0 to i8*, !insn.addr !710
  store i8 %10, i8* %11, align 1, !insn.addr !710
  %12 = icmp eq i32 %2, 1, !insn.addr !711
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !711
  br i1 %12, label %dec_label_pc_402bfb, label %13, !insn.addr !711

; <label>:13:                                     ; preds = %dec_label_pc_402be7
  %14 = call i32 @function_402b86(), !insn.addr !711
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !711
  br label %dec_label_pc_402bfb, !insn.addr !711

dec_label_pc_402bfb:                              ; preds = %dec_label_pc_402be7, %13
  %15 = trunc i32 %7 to i8, !insn.addr !709
  %16 = xor i8 %15, -2
  %17 = icmp ult i8 %16, -78, !insn.addr !709
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %18 = load i8, i8* inttoptr (i32 1750159442 to i8*), align 2, !insn.addr !712
  %19 = zext i8 %18 to i32, !insn.addr !712
  %20 = and i32 %eax.0.reload, -256, !insn.addr !712
  %21 = or i32 %20, %19, !insn.addr !712
  %22 = add i32 %21, -1, !insn.addr !713
  %23 = inttoptr i32 %22 to i32*, !insn.addr !714
  %24 = load i32, i32* %23, align 4, !insn.addr !714
  %25 = sext i32 %24 to i64, !insn.addr !715
  %26 = add i32 %2, -1435639817, !insn.addr !715
  %27 = inttoptr i32 %26 to i64*, !insn.addr !715
  store i64 %25, i64* %27, align 4, !insn.addr !715
  %28 = mul i32 %1, 2, !insn.addr !716
  %29 = add i32 %22, %28, !insn.addr !716
  %30 = inttoptr i32 %29 to i32*, !insn.addr !716
  %31 = load i32, i32* %30, align 4, !insn.addr !716
  %32 = select i1 %17, i32 -33, i32 -34, !insn.addr !716
  %33 = sub i32 %31, %32, !insn.addr !716
  store i32 %33, i32* %30, align 4, !insn.addr !716
  %34 = call i32 @function_c270e8b8(), !insn.addr !717
  ret i32 %34, !insn.addr !717
}

define i32 @function_402c16() local_unnamed_addr {
dec_label_pc_402c16:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = udiv i32 %1, 256, !insn.addr !718
  %6 = trunc i32 %5 to i8, !insn.addr !718
  %7 = trunc i32 %1 to i8, !insn.addr !718
  %8 = sub i8 0, %7, !insn.addr !718
  %9 = icmp eq i8 %6, %8, !insn.addr !718
  %10 = add i32 %3, -1, !insn.addr !719
  %11 = icmp eq i32 %10, 0, !insn.addr !719
  %12 = or i1 %9, %11, !insn.addr !719
  br i1 %12, label %dec_label_pc_402c1b, label %dec_label_pc_402c64, !insn.addr !719

dec_label_pc_402c1b:                              ; preds = %dec_label_pc_402c16
  %13 = load i32, i32* inttoptr (i32 -522648966 to i32*), align 4, !insn.addr !720
  %14 = add i32 %0, 68, !insn.addr !721
  %15 = inttoptr i32 %14 to double*, !insn.addr !721
  %16 = load double, double* %15, align 4, !insn.addr !721
  %17 = fpext double %16 to x86_fp80, !insn.addr !721
  %18 = inttoptr i32 %10 to double*, !insn.addr !722
  %19 = load double, double* %18, align 4, !insn.addr !722
  %20 = fpext double %19 to x86_fp80, !insn.addr !722
  %21 = fdiv x86_fp80 %17, %20, !insn.addr !722
  %22 = add i32 %2, -522200610, !insn.addr !723
  %23 = fptrunc x86_fp80 %21 to float, !insn.addr !723
  %24 = inttoptr i32 %22 to float*, !insn.addr !723
  store float %23, float* %24, align 4, !insn.addr !723
  %25 = and i32 %13, -732675840, !insn.addr !724
  %26 = icmp eq i32 %25, 0, !insn.addr !724
  %27 = icmp eq i1 %26, false, !insn.addr !725
  br i1 %27, label %dec_label_pc_402c3c, label %dec_label_pc_402c33, !insn.addr !725

dec_label_pc_402c33:                              ; preds = %dec_label_pc_402c1b
  %28 = call i32 @function_402be7(), !insn.addr !726
  %29 = call x86_fp80 @function_402cb4(), !insn.addr !727
  %30 = fptrunc x86_fp80 %29 to float, !insn.addr !727
  %31 = bitcast float %30 to i32, !insn.addr !727
  ret i32 %31, !insn.addr !727

dec_label_pc_402c3c:                              ; preds = %dec_label_pc_402c1b
  %32 = trunc i32 %10 to i16, !insn.addr !728
  %33 = add i16 %32, -1, !insn.addr !728
  %34 = icmp eq i16 %33, 0, !insn.addr !728
  br i1 %34, label %dec_label_pc_402c42, label %dec_label_pc_402c69, !insn.addr !728

dec_label_pc_402c42:                              ; preds = %dec_label_pc_402c3c
  %35 = add i32 %0, 10, !insn.addr !729
  %36 = inttoptr i32 %35 to i8*, !insn.addr !729
  %37 = load i8, i8* %36, align 1, !insn.addr !729
  %38 = udiv i32 %2, 256, !insn.addr !729
  %39 = trunc i32 %38 to i8, !insn.addr !729
  %40 = add i8 %37, %39, !insn.addr !729
  store i8 %40, i8* %36, align 1, !insn.addr !729
  %41 = call i32 @__asm_ffreep(i32 -255141352), !insn.addr !730
  %42 = call i32 @unknown_15af163a(), !insn.addr !731
  %43 = call i32 @__asm_sti(), !insn.addr !732
  ret i32 %43, !insn.addr !733

dec_label_pc_402c64:                              ; preds = %dec_label_pc_402c16
  %44 = add i32 %4, 1, !insn.addr !734
  ret i32 %44, !insn.addr !733

dec_label_pc_402c69:                              ; preds = %dec_label_pc_402c3c
  %45 = add i32 %2, 578093255, !insn.addr !735
  %46 = inttoptr i32 %45 to i8*, !insn.addr !735
  %47 = load i8, i8* %46, align 1, !insn.addr !735
  %48 = udiv i16 %33, 256, !insn.addr !735
  %49 = trunc i16 %48 to i8, !insn.addr !735
  %50 = add i8 %47, %49, !insn.addr !735
  store i8 %50, i8* %46, align 1, !insn.addr !735
  %51 = call i32 @function_402c95(), !insn.addr !736
  ret i32 %51, !insn.addr !736
}

define i32 @function_402c84() local_unnamed_addr {
dec_label_pc_402c84:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_4()
  %5 = fptosi x86_fp80 %4 to i16, !insn.addr !737
  %6 = add i32 %0, 127, !insn.addr !737
  %7 = inttoptr i32 %6 to i16*, !insn.addr !737
  store i16 %5, i16* %7, align 2, !insn.addr !737
  %8 = add i32 %2, -63, !insn.addr !738
  %9 = inttoptr i32 %8 to i8*, !insn.addr !738
  %10 = load i8, i8* %9, align 1, !insn.addr !738
  %11 = trunc i32 %3 to i8, !insn.addr !738
  %12 = add i8 %10, %11, !insn.addr !738
  store i8 %12, i8* %9, align 1, !insn.addr !738
  %13 = add i32 %0, -110, !insn.addr !739
  %14 = inttoptr i32 %13 to i8*, !insn.addr !739
  %15 = load i8, i8* %14, align 1, !insn.addr !739
  %16 = udiv i32 %1, 256, !insn.addr !739
  %17 = trunc i32 %16 to i8, !insn.addr !739
  %18 = add i8 %15, %17, !insn.addr !739
  store i8 %18, i8* %14, align 1, !insn.addr !739
  ret i32 %3, !insn.addr !740
}

define i32 @function_402c95() local_unnamed_addr {
dec_label_pc_402c95:
  %0 = call i32 @function_c270421f(), !insn.addr !741
  ret i32 %0, !insn.addr !741
}

define x86_fp80 @function_402cb4() local_unnamed_addr {
dec_label_pc_402cb4:
  %0 = call x86_fp80 @__decompiler_undefined_function_4()
  %1 = fadd x86_fp80 %0, %0, !insn.addr !742
  ret x86_fp80 %1, !insn.addr !742
}

define i32 @function_402ce6() local_unnamed_addr {
dec_label_pc_402ce6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i16, !insn.addr !743
  %3 = call i32 @__asm_insd(i16 %2), !insn.addr !743
  %4 = inttoptr i32 %0 to i32*, !insn.addr !743
  store i32 %3, i32* %4, align 4, !insn.addr !743
  %5 = call i32 @function_c2704218(), !insn.addr !744
  ret i32 %5, !insn.addr !744
}

define i32 @function_402cfe() local_unnamed_addr {
dec_label_pc_402cfe:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = icmp eq i8 %1, 0, !insn.addr !745
  %3 = inttoptr i32 %0 to i8*, !insn.addr !745
  store i8 %1, i8* %3, align 1, !insn.addr !745
  %4 = icmp eq i1 %2, false, !insn.addr !746
  br i1 %4, label %dec_label_pc_402d1f, label %dec_label_pc_402d0e, !insn.addr !746

dec_label_pc_402d0e:                              ; preds = %dec_label_pc_402cfe
  %5 = call i32 @function_4039b5(i8* getelementptr inbounds ([136 x i8], [136 x i8]* @global_var_40d750, i32 0, i32 0), i32 %0), !insn.addr !747
  ret i32 %5, !insn.addr !747

dec_label_pc_402d1f:                              ; preds = %dec_label_pc_402cfe
  call void @__asm_int(i32 145), !insn.addr !748
  %6 = call i32 @function_402d63(i8* getelementptr inbounds ([137 x i8], [137 x i8]* @global_var_40d6c0, i32 0, i32 0)), !insn.addr !749
  ret i32 %6, !insn.addr !749
}

define i32 @function_402d62() local_unnamed_addr {
dec_label_pc_402d62:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !750
}

define i32 @function_402d63(i8* %arg1) local_unnamed_addr {
dec_label_pc_402d63:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_4()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = trunc i32 %3 to i16, !insn.addr !751
  %11 = trunc i32 %1 to i8
  call void @__asm_outsb(i16 %10, i8 %11), !insn.addr !751
  %12 = load i32, i32* inttoptr (i32 737957259 to i32*), align 4, !insn.addr !752
  %13 = load i8, i8* inttoptr (i32 38636369 to i8*), align 1, !insn.addr !753
  %14 = zext i8 %13 to i32, !insn.addr !753
  %15 = and i32 %4, -256, !insn.addr !753
  %16 = or i32 %15, %14, !insn.addr !753
  store i32 %16, i32* inttoptr (i32 737957259 to i32*), align 4, !insn.addr !754
  %17 = add i32 %12, -100, !insn.addr !755
  %18 = inttoptr i32 %17 to i32*, !insn.addr !755
  %19 = load i32, i32* %18, align 4, !insn.addr !755
  %20 = sub i32 %3, %0, !insn.addr !756
  %21 = icmp ult i32 %3, %0, !insn.addr !756
  %22 = mul i32 %0, 2, !insn.addr !757
  %23 = inttoptr i32 %22 to i32*, !insn.addr !757
  %24 = load i32, i32* %23, align 4, !insn.addr !757
  %.neg = sext i1 %21 to i32
  %.neg2 = add i32 %19, %.neg, !insn.addr !758
  %25 = sub i32 %.neg2, %24, !insn.addr !758
  store i32 %25, i32* inttoptr (i32 737957255 to i32*), align 4, !insn.addr !759
  %26 = add i32 %12, -76, !insn.addr !760
  %27 = inttoptr i32 %26 to i32*, !insn.addr !760
  %28 = load i32, i32* %27, align 4, !insn.addr !760
  %29 = trunc i32 %20 to i16, !insn.addr !761
  %30 = call i8 @__asm_insb(i16 %29), !insn.addr !761
  %31 = inttoptr i32 %0 to i8*, !insn.addr !761
  store i8 %30, i8* %31, align 1, !insn.addr !761
  %32 = load i32, i32* %ebx, align 4, !insn.addr !762
  %33 = sub i32 %12, %32, !insn.addr !762
  %34 = icmp ult i32 %12, %32, !insn.addr !762
  %35 = zext i1 %34 to i32, !insn.addr !763
  %36 = add i32 %28, %35, !insn.addr !763
  %37 = sub i32 %0, %36, !insn.addr !763
  %38 = sub i32 %37, %35, !insn.addr !763
  %39 = icmp ult i32 %0, %38, !insn.addr !763
  %40 = icmp ne i32 %36, -1, !insn.addr !763
  %41 = or i1 %40, %39, !insn.addr !763
  %42 = icmp ult i32 %0, %36, !insn.addr !763
  %43 = select i1 %34, i1 %41, i1 %42, !insn.addr !763
  store i32 %37, i32* inttoptr (i32 737957251 to i32*), align 4, !insn.addr !764
  store i32 ptrtoint ([33 x i8]* @global_var_40d658 to i32), i32* inttoptr (i32 737957243 to i32*), align 4, !insn.addr !765
  %44 = add i32 %0, 98, !insn.addr !766
  %45 = inttoptr i32 %44 to i32*, !insn.addr !766
  %46 = load i32, i32* %45, align 4, !insn.addr !766
  store i32 %46, i32* inttoptr (i32 737957239 to i32*), align 4, !insn.addr !766
  %47 = add i32 %33, 1, !insn.addr !767
  %48 = and i32 %33, 15, !insn.addr !767
  %49 = icmp eq i32 %48, 15, !insn.addr !767
  %50 = xor i32 %33, -2147483648
  %51 = and i32 %47, %50, !insn.addr !767
  %52 = icmp slt i32 %51, 0, !insn.addr !767
  %53 = icmp eq i32 %47, 0, !insn.addr !767
  %54 = icmp slt i32 %47, 0, !insn.addr !767
  %55 = trunc i32 %47 to i8, !insn.addr !767
  %56 = call i8 @llvm.ctpop.i8(i8 %55), !range !405, !insn.addr !767
  %57 = and i8 %56, 1, !insn.addr !767
  %58 = icmp eq i8 %57, 0, !insn.addr !767
  store i32 %47, i32* inttoptr (i32 -1961734777 to i32*), align 4, !insn.addr !768
  %59 = zext i1 %43 to i32, !insn.addr !769
  %60 = zext i1 %58 to i32, !insn.addr !769
  %61 = mul i32 %60, 4, !insn.addr !769
  %62 = zext i1 %49 to i32, !insn.addr !769
  %63 = mul i32 %62, 16, !insn.addr !769
  %64 = zext i1 %53 to i32, !insn.addr !769
  %65 = mul i32 %64, 64, !insn.addr !769
  %66 = zext i1 %54 to i32, !insn.addr !769
  %67 = mul i32 %66, 128, !insn.addr !769
  %68 = zext i1 %9 to i32, !insn.addr !769
  %69 = mul i32 %68, 256, !insn.addr !769
  %70 = zext i1 %8 to i32, !insn.addr !769
  %71 = mul i32 %70, 512, !insn.addr !769
  %72 = zext i1 %7 to i32, !insn.addr !769
  %73 = mul i32 %72, 1024, !insn.addr !769
  %74 = zext i1 %52 to i32, !insn.addr !769
  %75 = mul i32 %74, 2048, !insn.addr !769
  %76 = zext i1 %6 to i32, !insn.addr !769
  %77 = mul i32 %76, 16384, !insn.addr !769
  %78 = or i32 %77, %73, !insn.addr !769
  %79 = or i32 %78, %71, !insn.addr !769
  %80 = or i32 %79, %69, !insn.addr !769
  %81 = or i32 %80, %63, !insn.addr !769
  %82 = or i32 %81, %65, !insn.addr !769
  %83 = or i32 %82, %67, !insn.addr !769
  %84 = or i32 %83, %75, !insn.addr !769
  %85 = or i32 %84, %61, !insn.addr !769
  %86 = or i32 %85, %59, !insn.addr !769
  %87 = or i32 %86, 2, !insn.addr !769
  store i32 %87, i32* inttoptr (i32 -1961734781 to i32*), align 4, !insn.addr !769
  store i32 %28, i32* inttoptr (i32 -1961734785 to i32*), align 4, !insn.addr !770
  %88 = add i32 %37, -104, !insn.addr !771
  %89 = inttoptr i32 %88 to i32*, !insn.addr !771
  %90 = load i32, i32* %89, align 4, !insn.addr !771
  store i32 %37, i32* inttoptr (i32 -1961734793 to i32*), align 4, !insn.addr !772
  store i32 %28, i32* inttoptr (i32 -1961734797 to i32*), align 4, !insn.addr !773
  store i32 %90, i32* inttoptr (i32 -1961734801 to i32*), align 4, !insn.addr !774
  %91 = mul i32 %37, 2, !insn.addr !775
  %92 = add i32 %90, %91, !insn.addr !775
  %93 = fptrunc x86_fp80 %5 to float, !insn.addr !775
  %94 = inttoptr i32 %92 to float*, !insn.addr !775
  store float %93, float* %94, align 4, !insn.addr !775
  %95 = inttoptr i32 %90 to i8*, !insn.addr !776
  %96 = load i8, i8* %95, align 1, !insn.addr !776
  %97 = trunc i32 %90 to i8, !insn.addr !776
  %98 = add i8 %96, %97, !insn.addr !776
  store i8 %98, i8* %95, align 1, !insn.addr !776
  %99 = load i8, i8* inttoptr (i32 1357197629 to i8*), align 1, !insn.addr !777
  %100 = add i8 %99, %97, !insn.addr !777
  store i8 %100, i8* inttoptr (i32 1357197629 to i8*), align 1, !insn.addr !777
  %101 = bitcast i32* %ebx to i8*
  %102 = load i8, i8* %101, align 4, !insn.addr !778
  %103 = add i8 %102, %97, !insn.addr !778
  %104 = inttoptr i32 %2 to i8*, !insn.addr !778
  store i8 %103, i8* %104, align 1, !insn.addr !778
  %105 = icmp slt i8 %103, 1, !insn.addr !779
  br i1 %105, label %106, label %dec_label_pc_402dcf, !insn.addr !779

; <label>:106:                                    ; preds = %dec_label_pc_402d63
  %107 = call i32 @function_1e40fffc(), !insn.addr !779
  br label %dec_label_pc_402dcf, !insn.addr !779

dec_label_pc_402dcf:                              ; preds = %106, %dec_label_pc_402d63
  store i32 ptrtoint ([63 x i8]* @global_var_40d5f4 to i32), i32* inttoptr (i32 -1961734801 to i32*), align 4, !insn.addr !780
  %108 = load i32, i32* @global_var_40d034, align 4, !insn.addr !781
  %109 = icmp eq i32 %108, 0, !insn.addr !782
  %110 = icmp slt i32 %108, 0, !insn.addr !782
  %111 = icmp eq i1 %110, false, !insn.addr !783
  %112 = icmp eq i1 %109, false, !insn.addr !783
  %113 = icmp eq i1 %111, %112, !insn.addr !783
  br i1 %113, label %dec_label_pc_402df4, label %dec_label_pc_402de5, !insn.addr !783

dec_label_pc_402de5:                              ; preds = %dec_label_pc_402dcf
  store i32 1027658720, i32* inttoptr (i32 -1961734801 to i32*), align 4, !insn.addr !784
  %114 = call i32 @function_3c402e7b(), !insn.addr !785
  ret i32 %114, !insn.addr !785

dec_label_pc_402df4:                              ; preds = %dec_label_pc_402dcf
  store i32 7, i32* inttoptr (i32 -1961734801 to i32*), align 4, !insn.addr !786
  store i32 31055, i32* inttoptr (i32 -1961734805 to i32*), align 4, !insn.addr !787
  %115 = load i32, i32* @global_var_410bc8, align 4, !insn.addr !788
  store i32 %115, i32* inttoptr (i32 -1961734809 to i32*), align 4, !insn.addr !789
  store i32 -1961734809, i32* inttoptr (i32 -1961734813 to i32*), align 4, !insn.addr !790
  %116 = add i32 %115, %108, !insn.addr !791
  %117 = call i32 @__asm_hlt(), !insn.addr !792
  %118 = inttoptr i32 %117 to i8*, !insn.addr !793
  %119 = load i8, i8* %118, align 1, !insn.addr !793
  %120 = trunc i32 %117 to i8, !insn.addr !793
  %121 = add i8 %119, %120, !insn.addr !793
  %122 = icmp ult i8 %121, %119, !insn.addr !793
  store i8 %121, i8* %118, align 1, !insn.addr !793
  %123 = mul i32 %1, 8, !insn.addr !794
  %124 = add i32 %123, -1961734901, !insn.addr !795
  %125 = inttoptr i32 %124 to i32*, !insn.addr !795
  %126 = load i32, i32* %125, align 4, !insn.addr !795
  %127 = zext i1 %122 to i32, !insn.addr !796
  %128 = add i32 %126, %127, !insn.addr !796
  store i32 %128, i32* inttoptr (i32 -1961734817 to i32*), align 4, !insn.addr !797
  store i32 %116, i32* inttoptr (i32 -1961734821 to i32*), align 4, !insn.addr !798
  %129 = call i32 @function_40b590(i32 ptrtoint (i32* @0 to i32)), !insn.addr !799
  store i32 %116, i32* inttoptr (i32 -1961734825 to i32*), align 4, !insn.addr !800
  store i32 %129, i32* inttoptr (i32 -1961734829 to i32*), align 4, !insn.addr !801
  store i32 ptrtoint ([34 x i8]* @global_var_40d5bc to i32), i32* inttoptr (i32 -1961734833 to i32*), align 4, !insn.addr !802
  %130 = call i32 @function_402e7b(), !insn.addr !803
  ret i32 %130, !insn.addr !803
}

define i32 @function_402e34() local_unnamed_addr {
dec_label_pc_402e34:
  %cf.0.reg2mem = alloca i1, !insn.addr !804
  %edx.0.reg2mem = alloca i32, !insn.addr !804
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, ptrtoint (i32* @global_var_410255 to i32), !insn.addr !805
  %4 = inttoptr i32 %3 to i32*, !insn.addr !805
  %5 = load i32, i32* %4, align 4, !insn.addr !805
  %6 = mul i32 %5, %0, !insn.addr !805
  %7 = sext i32 %6 to i64, !insn.addr !806
  %8 = mul nsw i64 %7, 1374417439, !insn.addr !806
  %9 = lshr i64 %8, 63
  %10 = trunc i64 %9 to i32, !insn.addr !807
  %11 = add i32 %1, -63, !insn.addr !808
  %12 = inttoptr i32 %11 to i32*, !insn.addr !808
  %13 = load i32, i32* %12, align 4, !insn.addr !808
  %14 = mul nuw i32 %13, %10
  %15 = add i32 %14, %2
  %16 = add i32 %15, 16, !insn.addr !809
  %17 = add i32 %15, 20, !insn.addr !809
  %18 = add i32 %15, 24, !insn.addr !809
  %19 = add i32 %15, 32, !insn.addr !809
  %20 = inttoptr i32 %15 to i32*, !insn.addr !809
  %21 = load i32, i32* %20, align 4, !insn.addr !809
  %22 = inttoptr i32 %16 to i32*, !insn.addr !809
  %23 = load i32, i32* %22, align 4, !insn.addr !809
  %24 = inttoptr i32 %17 to i32*, !insn.addr !809
  %25 = load i32, i32* %24, align 4, !insn.addr !809
  %26 = inttoptr i32 %18 to i32*, !insn.addr !809
  %27 = load i32, i32* %26, align 4, !insn.addr !809
  %28 = trunc i32 %27 to i8, !insn.addr !810
  %29 = add i32 %25, -1962934271, !insn.addr !810
  %30 = inttoptr i32 %29 to i8*, !insn.addr !810
  %31 = load i8, i8* %30, align 1, !insn.addr !810
  %32 = sub i8 %28, %31, !insn.addr !810
  %33 = icmp ugt i8 %31, %28, !insn.addr !810
  %34 = add i32 %15, 28, !insn.addr !811
  %35 = inttoptr i32 %34 to i32*, !insn.addr !811
  store i32 %19, i32* %35, align 4, !insn.addr !811
  %36 = mul i32 %23, 9, !insn.addr !812
  %37 = inttoptr i32 %36 to i32*, !insn.addr !812
  %38 = load i32, i32* %37, align 4, !insn.addr !812
  %39 = zext i1 %33 to i32, !insn.addr !812
  %40 = add i32 %38, %23, !insn.addr !812
  %41 = add i32 %40, %39, !insn.addr !812
  %42 = icmp ule i32 %41, %38, !insn.addr !812
  %43 = icmp ult i32 %40, %38, !insn.addr !812
  %44 = select i1 %33, i1 %42, i1 %43, !insn.addr !812
  store i32 %41, i32* %37, align 4, !insn.addr !812
  %45 = and i8 %32, 31, !insn.addr !813
  %46 = icmp eq i8 %45, 0, !insn.addr !813
  store i32 %25, i32* %edx.0.reg2mem, !insn.addr !813
  store i1 %44, i1* %cf.0.reg2mem, !insn.addr !813
  br i1 %46, label %67, label %47, !insn.addr !813

; <label>:47:                                     ; preds = %dec_label_pc_402e34
  %48 = trunc i32 %25 to i8, !insn.addr !813
  %49 = zext i1 %44 to i8, !insn.addr !813
  %50 = shl i8 %48, %45, !insn.addr !813
  %51 = trunc i32 %25 to i16
  %52 = and i16 %51, 255, !insn.addr !813
  %53 = sub nsw i8 9, %45, !insn.addr !813
  %54 = zext i8 %53 to i16, !insn.addr !813
  %55 = lshr i16 %52, %54, !insn.addr !813
  %56 = add nsw i8 %45, -1, !insn.addr !813
  %57 = shl i8 %49, %56, !insn.addr !813
  %58 = trunc i16 %55 to i8
  %59 = or i8 %50, %58
  %60 = or i8 %59, %57, !insn.addr !813
  %61 = zext i8 %60 to i32, !insn.addr !813
  %62 = and i32 %25, -256, !insn.addr !813
  %63 = or i32 %62, %61, !insn.addr !813
  %64 = lshr i8 -128, %56
  %65 = and i8 %64, %48
  %66 = icmp ne i8 %65, 0, !insn.addr !813
  store i32 %63, i32* %edx.0.reg2mem, !insn.addr !813
  store i1 %66, i1* %cf.0.reg2mem, !insn.addr !813
  br label %67, !insn.addr !813

; <label>:67:                                     ; preds = %dec_label_pc_402e34, %47
  %68 = zext i8 %32 to i32, !insn.addr !810
  %69 = and i32 %27, -256, !insn.addr !810
  %70 = or i32 %69, %68, !insn.addr !810
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  store i32 %edx.0.reload, i32* %26, align 4, !insn.addr !814
  store i32 %70, i32* %24, align 4, !insn.addr !815
  %71 = call i32 @function_40b590(i32 ptrtoint (i32* @0 to i32)), !insn.addr !816
  store i32 %edx.0.reload, i32* %22, align 4, !insn.addr !817
  %72 = add i32 %15, 12, !insn.addr !818
  %73 = inttoptr i32 %72 to i32*, !insn.addr !818
  store i32 %71, i32* %73, align 4, !insn.addr !818
  %74 = add i32 %15, 8, !insn.addr !819
  %75 = inttoptr i32 %74 to i32*, !insn.addr !819
  store i32 %21, i32* %75, align 4, !insn.addr !819
  %76 = add i32 %15, 4, !insn.addr !820
  %77 = inttoptr i32 %76 to i32*, !insn.addr !820
  store i32 4243628, i32* %77, align 4, !insn.addr !820
  %78 = select i1 %cf.0.reload, i32 255, i32 0, !insn.addr !821
  %79 = and i32 %71, -256, !insn.addr !821
  %80 = or i32 %79, %78, !insn.addr !821
  ret i32 %80, !insn.addr !822
}

define i32 @function_402e7b() local_unnamed_addr {
dec_label_pc_402e7b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_8()
  %3 = mul i32 %0, 8, !insn.addr !823
  %4 = add i32 %0, -1, !insn.addr !823
  %5 = add i32 %4, %3, !insn.addr !823
  %6 = inttoptr i32 %5 to i64*, !insn.addr !823
  %7 = load i64, i64* %6, align 4, !insn.addr !823
  %8 = call i64 @__asm_psrlw(i64 %2, i64 %7), !insn.addr !823
  ret i32 %1, !insn.addr !824
}

define i32 @function_402e8c() local_unnamed_addr {
dec_label_pc_402e8c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, -118, !insn.addr !825
  %5 = inttoptr i32 %4 to i8*, !insn.addr !825
  %6 = load i8, i8* %5, align 1, !insn.addr !825
  %7 = udiv i32 %2, 256, !insn.addr !825
  %8 = trunc i32 %7 to i8, !insn.addr !825
  %9 = add i8 %6, %8, !insn.addr !825
  store i8 %9, i8* %5, align 1, !insn.addr !825
  %10 = bitcast i32* %esi to i8*
  %11 = load i8, i8* %10, align 4, !insn.addr !826
  %12 = zext i8 %11 to i32, !insn.addr !826
  %13 = and i32 %1, -256, !insn.addr !826
  %14 = or i32 %13, %12, !insn.addr !826
  store i32 %14, i32* inttoptr (i32 -1365422080 to i32*), align 4096, !insn.addr !827
  %15 = add i32 %14, -1, !insn.addr !828
  %16 = inttoptr i32 %15 to i32*, !insn.addr !829
  %17 = load i32, i32* %16, align 4, !insn.addr !829
  %18 = mul i32 %17, 2048, !insn.addr !829
  %19 = udiv i32 %17, 2097152, !insn.addr !829
  %20 = or i32 %19, %18, !insn.addr !829
  store i32 %20, i32* %16, align 4, !insn.addr !829
  %21 = trunc i32 %3 to i16, !insn.addr !830
  %22 = trunc i32 %15 to i8, !insn.addr !830
  call void @__asm_out.6(i16 %21, i8 %22), !insn.addr !830
  %23 = mul i32 %0, 2, !insn.addr !831
  %24 = icmp ult i32 %23, %0, !insn.addr !831
  %25 = select i1 %24, i32 4243824, i32 4243823, !insn.addr !832
  %26 = add i32 %14, %25, !insn.addr !832
  ret i32 %26, !insn.addr !832
}

define i32 @function_402ec0() local_unnamed_addr {
dec_label_pc_402ed6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %3 = add i32 %0, 1086423069, !insn.addr !833
  %4 = inttoptr i32 %3 to i8*, !insn.addr !833
  %5 = load i8, i8* %4, align 1, !insn.addr !833
  %6 = trunc i32 %1 to i8
  %7 = add i8 %6, 63, !insn.addr !833
  %8 = add i8 %7, %5, !insn.addr !833
  store i8 %8, i8* %4, align 1, !insn.addr !833
  %9 = fptosi x86_fp80 %2 to i16, !insn.addr !834
  %10 = add i32 %0, 24, !insn.addr !834
  %11 = inttoptr i32 %10 to i16*, !insn.addr !834
  store i16 %9, i16* %11, align 2, !insn.addr !834
  call void @llvm.trap()
  unreachable
}

define i32 @function_402f90() local_unnamed_addr {
dec_label_pc_402f90:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %5, 1, !insn.addr !835
  %7 = and i32 %6, 255, !insn.addr !835
  %8 = and i32 %5, 65280, !insn.addr !835
  %9 = or i32 %7, %8, !insn.addr !835
  %10 = add i32 %2, -1, !insn.addr !836
  %11 = add i32 %4, -1, !insn.addr !837
  %12 = add nuw nsw i32 %9, 1, !insn.addr !838
  %13 = add i32 %4, add (i32 ptrtoint (i8** @global_var_4102ac to i32), i32 -1), !insn.addr !839
  %14 = inttoptr i32 %13 to i8*, !insn.addr !839
  %15 = load i8, i8* %14, align 1, !insn.addr !839
  %16 = udiv i32 %12, 256, !insn.addr !839
  %17 = trunc i32 %16 to i8, !insn.addr !839
  %18 = add i8 %15, %17, !insn.addr !839
  store i8 %18, i8* %14, align 1, !insn.addr !839
  %19 = call i32 @unknown_154123f0(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @global_var_40d514, i32 0, i32 0)), !insn.addr !840
  %20 = inttoptr i32 %19 to i8*, !insn.addr !841
  %21 = load i8, i8* %20, align 1, !insn.addr !841
  %22 = trunc i32 %19 to i8, !insn.addr !841
  %23 = add i8 %21, %22, !insn.addr !841
  store i8 %23, i8* %20, align 1, !insn.addr !841
  %24 = add i32 %0, 336069638, !insn.addr !842
  %25 = inttoptr i32 %24 to i32*, !insn.addr !842
  %26 = load i32, i32* %25, align 4, !insn.addr !842
  %27 = add i32 %26, -2, !insn.addr !843
  %28 = inttoptr i32 %27 to i16*, !insn.addr !843
  %29 = add i32 %26, -6, !insn.addr !844
  %30 = inttoptr i32 %29 to i32*, !insn.addr !844
  store i32 %11, i32* %30, align 4, !insn.addr !844
  %31 = add i32 %1, -6488134, !insn.addr !845
  %32 = add i32 %26, -10, !insn.addr !846
  %33 = inttoptr i32 %32 to i32*, !insn.addr !846
  %34 = add i32 %26, -14, !insn.addr !847
  %35 = inttoptr i32 %34 to i32*, !insn.addr !847
  store i32 %31, i32* %35, align 4, !insn.addr !847
  %36 = add i32 %26, -18, !insn.addr !848
  %37 = inttoptr i32 %36 to i32*, !insn.addr !848
  %38 = trunc i32 %3 to i16, !insn.addr !849
  %39 = bitcast i32* %esi to i8*
  %40 = load i8, i8* %39, align 4, !insn.addr !849
  call void @__asm_outsb(i16 %38, i8 %40), !insn.addr !849
  %41 = inttoptr i32 %31 to i8*, !insn.addr !850
  %42 = load i8, i8* %41, align 1, !insn.addr !850
  %43 = trunc i32 %31 to i8, !insn.addr !850
  %44 = add i8 %42, %43, !insn.addr !850
  %45 = icmp ult i8 %44, %42, !insn.addr !850
  store i8 %44, i8* %41, align 1, !insn.addr !850
  %46 = load i32, i32* @global_var_410bc8, align 4, !insn.addr !851
  %47 = add i32 %26, -22, !insn.addr !852
  %48 = inttoptr i32 %47 to i32*, !insn.addr !852
  store i32 0, i32* %48, align 4, !insn.addr !852
  %49 = add i32 %26, -26, !insn.addr !853
  %50 = inttoptr i32 %49 to i32*, !insn.addr !853
  store i32 11404264, i32* %50, align 4, !insn.addr !853
  %51 = load i32, i32* %esi, align 4, !insn.addr !854
  %52 = add i32 %46, 28, !insn.addr !854
  %53 = add i32 %52, %51, !insn.addr !854
  %54 = inttoptr i32 %53 to i32*, !insn.addr !854
  %55 = load i32, i32* %54, align 4, !insn.addr !854
  %56 = add i32 %2, 1156321341, !insn.addr !855
  %57 = inttoptr i32 %56 to i32*, !insn.addr !855
  %58 = load i32, i32* %57, align 4, !insn.addr !855
  %59 = zext i1 %45 to i8, !insn.addr !856
  %60 = add i8 %43, -119, !insn.addr !856
  %61 = add i8 %60, %59, !insn.addr !856
  %62 = icmp ule i8 %61, %43, !insn.addr !856
  %63 = icmp ugt i8 %43, 118, !insn.addr !856
  %64 = select i1 %45, i1 %62, i1 %63, !insn.addr !856
  %65 = zext i8 %61 to i32, !insn.addr !856
  %66 = and i32 %31, -256, !insn.addr !856
  %67 = or i32 %66, %65, !insn.addr !856
  %68 = add i32 %58, 1569444039, !insn.addr !857
  %69 = inttoptr i32 %68 to i8*, !insn.addr !857
  %70 = load i8, i8* %69, align 1, !insn.addr !857
  %71 = udiv i32 %31, 256, !insn.addr !857
  %72 = trunc i32 %71 to i8, !insn.addr !857
  %.neg2 = sext i1 %64 to i8
  %.neg3 = sub i8 %.neg2, %72, !insn.addr !857
  %73 = add i8 %.neg3, %70, !insn.addr !857
  store i8 %73, i8* %69, align 1, !insn.addr !857
  store i32 %67, i32* %50, align 4, !insn.addr !858
  %74 = add i32 %55, %49, !insn.addr !859
  %75 = inttoptr i32 %74 to i32*, !insn.addr !859
  %76 = load i32, i32* %75, align 4, !insn.addr !859
  %77 = mul i32 %76, 33554432, !insn.addr !859
  store i32 %77, i32* %75, align 4, !insn.addr !859
  %78 = add i32 %1, -45, !insn.addr !860
  %79 = inttoptr i32 %78 to i32*, !insn.addr !860
  store i32 %67, i32* %79, align 4, !insn.addr !860
  store i8 %61, i8* inttoptr (i32 -2054952879 to i8*), align 1, !insn.addr !861
  %80 = inttoptr i32 %67 to i8*, !insn.addr !862
  %81 = load i8, i8* %80, align 1, !insn.addr !862
  %82 = add i8 %81, %61, !insn.addr !862
  store i8 %82, i8* %80, align 1, !insn.addr !862
  %83 = add i32 %1, -2, !insn.addr !863
  %84 = add i32 %67, 53236, !insn.addr !864
  store i32 0, i32* %50, align 4, !insn.addr !865
  %85 = add i32 %26, -30, !insn.addr !866
  %86 = inttoptr i32 %85 to i32*, !insn.addr !866
  store i32 %83, i32* %86, align 4, !insn.addr !866
  %87 = inttoptr i32 %84 to i8*, !insn.addr !867
  %88 = load i8, i8* %87, align 1, !insn.addr !867
  %89 = trunc i32 %84 to i8, !insn.addr !867
  %90 = add i8 %88, %89, !insn.addr !867
  store i8 %90, i8* %87, align 1, !insn.addr !867
  %91 = call i32 @unknown_2240b590(), !insn.addr !868
  %92 = add i32 %26, -264, !insn.addr !869
  %93 = inttoptr i32 %92 to i32*, !insn.addr !869
  store i32 %83, i32* %93, align 4, !insn.addr !869
  %94 = add i32 %26, -268, !insn.addr !870
  %95 = inttoptr i32 %94 to i32*, !insn.addr !870
  store i32 %91, i32* %95, align 4, !insn.addr !870
  %96 = inttoptr i32 %10 to i8*, !insn.addr !871
  %97 = load i8, i8* %96, align 1, !insn.addr !871
  %98 = udiv i8 %97, 2, !insn.addr !871
  store i8 %98, i8* %96, align 1, !insn.addr !871
  %99 = add i32 %2, -1029360316, !insn.addr !872
  %100 = inttoptr i32 %99 to i8*, !insn.addr !872
  %101 = load i8, i8* %100, align 1, !insn.addr !872
  %102 = or i8 %101, 82, !insn.addr !872
  store i8 %102, i8* %100, align 1, !insn.addr !872
  ret i32 %91, !insn.addr !873
}

define i32 @function_403094() local_unnamed_addr {
dec_label_pc_403094:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4030b7(i32 %arg1) local_unnamed_addr {
dec_label_pc_4030b7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -11469755, !insn.addr !874
  %4 = inttoptr i32 %3 to i32*, !insn.addr !874
  %5 = load i32, i32* %4, align 4, !insn.addr !874
  %6 = add i32 %5, -1, !insn.addr !874
  store i32 %6, i32* %4, align 4, !insn.addr !874
  %7 = mul i32 %2, 8, !insn.addr !875
  %8 = udiv i32 %2, 536870912, !insn.addr !875
  %9 = or i32 %8, %7, !insn.addr !875
  %10 = inttoptr i32 %2 to i32*, !insn.addr !875
  store i32 %9, i32* %10, align 4, !insn.addr !875
  %11 = add i32 %1, 106, !insn.addr !876
  %12 = add i32 %11, %2, !insn.addr !876
  %13 = inttoptr i32 %12 to i8*, !insn.addr !876
  %14 = load i8, i8* %13, align 1, !insn.addr !876
  %15 = mul i8 %14, 2, !insn.addr !876
  store i8 %15, i8* %13, align 1, !insn.addr !876
  %16 = call i32 @unknown_c1803600(i32 %2), !insn.addr !877
  ret i32 %16, !insn.addr !878
}

define i32 @function_4030dc() local_unnamed_addr {
dec_label_pc_4030dc:
  %eax.0.reg2mem = alloca i32, !insn.addr !879
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = trunc i32 %2 to i8, !insn.addr !879
  %7 = add i32 %4, -1956278128, !insn.addr !879
  %8 = inttoptr i32 %7 to i8*, !insn.addr !879
  %9 = load i8, i8* %8, align 1, !insn.addr !879
  %10 = zext i1 %5 to i8, !insn.addr !879
  %11 = add i8 %10, %6, !insn.addr !879
  %12 = add i8 %11, %9, !insn.addr !879
  %13 = zext i8 %12 to i32, !insn.addr !879
  %14 = and i32 %2, 65280, !insn.addr !879
  %15 = or i32 %14, %13, !insn.addr !879
  %16 = trunc i32 %15 to i16, !insn.addr !880
  %17 = call i8 @__asm_in.4(i16 %16), !insn.addr !880
  %18 = add i32 %1, -1968763866, !insn.addr !881
  %19 = inttoptr i32 %18 to i8*, !insn.addr !881
  %20 = load i8, i8* %19, align 1, !insn.addr !881
  %21 = trunc i32 %3 to i8, !insn.addr !881
  %22 = or i8 %20, %21, !insn.addr !881
  store i8 %22, i8* %19, align 1, !insn.addr !881
  %23 = add i32 %3, 16, !insn.addr !882
  %24 = inttoptr i32 %23 to i32*, !insn.addr !882
  %25 = load i32, i32* %24, align 4, !insn.addr !882
  %26 = inttoptr i32 %25 to i32*, !insn.addr !883
  %27 = load i32, i32* %26, align 4, !insn.addr !883
  %28 = trunc i32 %27 to i8, !insn.addr !884
  %29 = icmp ugt i8 %28, 116, !insn.addr !884
  %30 = and i32 %27, -256, !insn.addr !884
  %31 = zext i1 %29 to i32, !insn.addr !885
  %32 = add i32 %27, 198, !insn.addr !885
  %33 = add i32 %32, %31, !insn.addr !885
  %34 = add i32 %0, 112, !insn.addr !886
  %35 = inttoptr i32 %34 to i32*, !insn.addr !886
  %36 = load i32, i32* %35, align 4, !insn.addr !886
  %37 = sdiv i32 %36, 268435456, !insn.addr !886
  store i32 %37, i32* %35, align 4, !insn.addr !886
  %38 = trunc i32 %33 to i8, !insn.addr !887
  %39 = icmp ugt i8 %38, -60, !insn.addr !887
  %40 = select i1 %39, i32 255, i32 0, !insn.addr !888
  %41 = or i32 %40, %30, !insn.addr !888
  %42 = icmp eq i1 %39, false, !insn.addr !889
  store i32 %41, i32* %eax.0.reg2mem, !insn.addr !889
  br i1 %42, label %43, label %dec_label_pc_403100, !insn.addr !889

; <label>:43:                                     ; preds = %dec_label_pc_4030dc
  %44 = call i32 @function_403094(), !insn.addr !889
  store i32 %44, i32* %eax.0.reg2mem, !insn.addr !889
  br label %dec_label_pc_403100, !insn.addr !889

dec_label_pc_403100:                              ; preds = %43, %dec_label_pc_4030dc
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %45 = trunc i32 %eax.0.reload to i8, !insn.addr !890
  %46 = inttoptr i32 %0 to i8*, !insn.addr !890
  store i8 %45, i8* %46, align 1, !insn.addr !890
  ret i32 %eax.0.reload, !insn.addr !891
}

define i32 @function_403106(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_403106:
  %merge.reg2mem = alloca i32, !insn.addr !892
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = icmp slt i32 %3, %2, !insn.addr !893
  br i1 %4, label %dec_label_pc_403118, label %dec_label_pc_40310a, !insn.addr !893

dec_label_pc_40310a:                              ; preds = %dec_label_pc_403106
  %5 = icmp sgt i32 %3, %2, !insn.addr !894
  br i1 %5, label %dec_label_pc_40314e, label %dec_label_pc_40310c, !insn.addr !894

dec_label_pc_40310c:                              ; preds = %dec_label_pc_40310a
  %6 = icmp ugt i32 %1, %0
  store i32 1, i32* %merge.reg2mem, !insn.addr !895
  br i1 %6, label %dec_label_pc_403110, label %dec_label_pc_403118, !insn.addr !895

dec_label_pc_403110:                              ; preds = %dec_label_pc_403118, %dec_label_pc_40314e, %dec_label_pc_40310c
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !896

dec_label_pc_403118:                              ; preds = %dec_label_pc_40310c, %dec_label_pc_403106
  br label %dec_label_pc_403110

dec_label_pc_40314e:                              ; preds = %dec_label_pc_40310a
  %7 = icmp ugt i32 %3, %2
  store i32 0, i32* %merge.reg2mem, !insn.addr !897
  br i1 %7, label %dec_label_pc_403150, label %dec_label_pc_403110, !insn.addr !897

dec_label_pc_403150:                              ; preds = %dec_label_pc_40314e
  %8 = mul i32 %3, 2, !insn.addr !898
  %9 = inttoptr i32 %3 to i32*, !insn.addr !898
  store i32 %8, i32* %9, align 4, !insn.addr !898
  %10 = add i32 %2, 96, !insn.addr !899
  %11 = inttoptr i32 %10 to i8*, !insn.addr !899
  %12 = load i8, i8* %11, align 1, !insn.addr !899
  %13 = trunc i32 %1 to i8, !insn.addr !899
  %14 = add i8 %12, %13, !insn.addr !899
  store i8 %14, i8* %11, align 1, !insn.addr !899
  ret i32 %3, !insn.addr !900
}

define i32 @function_40319e(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_40319e:
  %merge.reg2mem = alloca i32, !insn.addr !901
  %merge1.reg2mem = alloca i32, !insn.addr !901
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = icmp slt i32 %6, %5, !insn.addr !902
  br i1 %7, label %dec_label_pc_4031b5, label %dec_label_pc_4031a2, !insn.addr !902

dec_label_pc_4031a2:                              ; preds = %dec_label_pc_40319e
  %8 = icmp sgt i32 %6, %5, !insn.addr !903
  store i32 46849, i32* %merge.reg2mem, !insn.addr !903
  br i1 %8, label %dec_label_pc_4031a8, label %dec_label_pc_4031a4, !insn.addr !903

dec_label_pc_4031a4:                              ; preds = %dec_label_pc_4031a8, %dec_label_pc_4031a2
  %merge1.reload = load i32, i32* %merge1.reg2mem
  ret i32 %merge1.reload, !insn.addr !904

dec_label_pc_4031a8:                              ; preds = %dec_label_pc_4031e6, %dec_label_pc_4031d5, %dec_label_pc_4031a2
  %merge.reload = load i32, i32* %merge.reg2mem
  store i32 %merge.reload, i32* %merge1.reg2mem
  br label %dec_label_pc_4031a4

dec_label_pc_4031b5:                              ; preds = %dec_label_pc_40319e
  %9 = icmp ult i32 %6, %5, !insn.addr !901
  %10 = add i32 %3, -104, !insn.addr !905
  %11 = inttoptr i32 %10 to i8*, !insn.addr !905
  %12 = load i8, i8* %11, align 1, !insn.addr !905
  %13 = zext i1 %9 to i8, !insn.addr !905
  %14 = udiv i8 %12, 8, !insn.addr !905
  %15 = mul i8 %12, 64, !insn.addr !905
  %16 = mul i8 %13, 32, !insn.addr !905
  %17 = or i8 %14, %16, !insn.addr !905
  %18 = or i8 %17, %15, !insn.addr !905
  store i8 %18, i8* %11, align 1, !insn.addr !905
  %19 = trunc i32 %4 to i16, !insn.addr !906
  %20 = call i8 @__asm_in.4(i16 %19), !insn.addr !906
  %21 = add i32 %2, 8, !insn.addr !907
  %22 = inttoptr i32 %21 to i32*, !insn.addr !907
  %23 = load i32, i32* %22, align 4, !insn.addr !907
  %24 = add i32 %2, 12, !insn.addr !908
  %25 = inttoptr i32 %24 to i32*, !insn.addr !908
  %26 = load i32, i32* %25, align 4, !insn.addr !908
  %27 = add i32 %23, -13, !insn.addr !909
  %28 = inttoptr i32 %27 to i32*, !insn.addr !909
  %29 = load i32, i32* %28, align 4, !insn.addr !909
  %30 = icmp eq i32 %26, 1, !insn.addr !910
  br i1 %30, label %dec_label_pc_4031d5, label %dec_label_pc_40321e, !insn.addr !910

dec_label_pc_4031d5:                              ; preds = %dec_label_pc_4031b5
  %31 = add i32 %0, -128, !insn.addr !911
  %32 = inttoptr i32 %31 to i32*, !insn.addr !911
  %33 = load i32, i32* %32, align 4, !insn.addr !911
  %34 = sdiv i32 %33, 268435456, !insn.addr !911
  store i32 %34, i32* %32, align 4, !insn.addr !911
  %35 = trunc i32 %29 to i8, !insn.addr !912
  %36 = icmp ugt i8 %35, -60, !insn.addr !912
  %37 = icmp eq i1 %36, false, !insn.addr !913
  store i32 -1, i32* %merge.reg2mem, !insn.addr !913
  br i1 %37, label %dec_label_pc_4031e6, label %dec_label_pc_4031a8, !insn.addr !913

dec_label_pc_4031e6:                              ; preds = %dec_label_pc_4031d5
  %38 = and i32 %29, -256, !insn.addr !912
  %39 = select i1 %36, i32 255, i32 0, !insn.addr !914
  %40 = or i32 %39, %38, !insn.addr !914
  %41 = icmp slt i32 %40, 0, !insn.addr !915
  store i32 0, i32* %merge.reg2mem, !insn.addr !915
  br i1 %41, label %dec_label_pc_4031a8, label %dec_label_pc_4031ec, !insn.addr !915

dec_label_pc_4031ec:                              ; preds = %dec_label_pc_4031e6
  %42 = inttoptr i32 %40 to i8*, !insn.addr !916
  %43 = load i8, i8* %42, align 1, !insn.addr !916
  %44 = trunc i32 %39 to i8, !insn.addr !916
  %45 = add i8 %43, %44, !insn.addr !916
  store i8 %45, i8* %42, align 1, !insn.addr !916
  %46 = add i32 %1, 93, !insn.addr !917
  %47 = inttoptr i32 %46 to i8*, !insn.addr !917
  %48 = load i8, i8* %47, align 1, !insn.addr !917
  %49 = add i8 %48, 62, !insn.addr !917
  store i8 %49, i8* %47, align 1, !insn.addr !917
  ret i32 %40, !insn.addr !918

dec_label_pc_40321e:                              ; preds = %dec_label_pc_4031b5
  %50 = add i32 %1, -20, !insn.addr !919
  %51 = inttoptr i32 %50 to i32*, !insn.addr !919
  %52 = load i32, i32* %51, align 4, !insn.addr !919
  %53 = add i32 %3, -1915806781, !insn.addr !920
  %54 = inttoptr i32 %53 to i8*, !insn.addr !920
  %55 = load i8, i8* %54, align 1, !insn.addr !920
  %56 = trunc i32 %52 to i8, !insn.addr !920
  %57 = add i8 %55, %56, !insn.addr !920
  %58 = icmp ult i8 %57, %55, !insn.addr !920
  store i8 %57, i8* %54, align 1, !insn.addr !920
  %59 = zext i1 %58 to i32, !insn.addr !921
  %60 = add i32 %29, ptrtoint (i32* @global_var_411727 to i32), !insn.addr !921
  %61 = add i32 %60, %59, !insn.addr !921
  %62 = add i32 %2, -52, !insn.addr !922
  %63 = inttoptr i32 %62 to i32*, !insn.addr !922
  store i32 %26, i32* %63, align 4, !insn.addr !922
  ret i32 %61, !insn.addr !923
}

define i32 @function_4032ed() local_unnamed_addr {
dec_label_pc_4032ed:
  %0 = call i32 @function_d6ff0040(), !insn.addr !924
  ret i32 %0, !insn.addr !924
}

define i32 @function_403390() local_unnamed_addr {
dec_label_pc_403390:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = icmp sgt i32 %1, 1, !insn.addr !925
  br i1 %4, label %dec_label_pc_4033e1, label %dec_label_pc_403393, !insn.addr !925

dec_label_pc_403393:                              ; preds = %dec_label_pc_403390
  %5 = add i32 %3, 1, !insn.addr !926
  %6 = and i32 %5, 65280, !insn.addr !927
  %7 = add i32 %6, %2
  %8 = and i32 %7, 65280, !insn.addr !927
  %9 = and i32 %5, -65281, !insn.addr !927
  %10 = or i32 %8, %9, !insn.addr !927
  %11 = load i32, i32* inttoptr (i32 16187972 to i32*), align 4, !insn.addr !928
  %12 = trunc i32 %11 to i8, !insn.addr !929
  %13 = inttoptr i32 %10 to i8*, !insn.addr !929
  %14 = load i8, i8* %13, align 1, !insn.addr !929
  %15 = add i8 %14, %12, !insn.addr !929
  %16 = zext i8 %15 to i32, !insn.addr !929
  %17 = and i32 %11, -256, !insn.addr !929
  %18 = or i32 %17, %16, !insn.addr !929
  %19 = inttoptr i32 %0 to i32*, !insn.addr !930
  store i32 %18, i32* %19, align 4, !insn.addr !930
  br label %dec_label_pc_4033e1, !insn.addr !931

dec_label_pc_4033e1:                              ; preds = %dec_label_pc_403393, %dec_label_pc_403390
  %20 = call i32 @__asm_sti(), !insn.addr !932
  ret i32 570483171, !insn.addr !933
}

define i32 @function_40342e() local_unnamed_addr {
dec_label_pc_40342e:
  %0 = call i32 @function_d8b0041(), !insn.addr !934
  ret i32 %0, !insn.addr !934
}

define i32 @function_40346e() local_unnamed_addr {
dec_label_pc_40346e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !935
}

define i32 @function_403477(i32 %arg1) local_unnamed_addr {
dec_label_pc_403477:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !936
}

define i32 @function_403487() local_unnamed_addr {
dec_label_pc_403487:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !937
}

define i32 @function_4034aa() local_unnamed_addr {
dec_label_pc_4034aa:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !938
}

define i32 @function_4034c2(i16 %arg1) local_unnamed_addr {
dec_label_pc_4034c2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1306305220, !insn.addr !939
  %3 = inttoptr i32 %2 to i8*, !insn.addr !939
  %4 = load i8, i8* %3, align 1, !insn.addr !939
  %5 = trunc i32 %1 to i8, !insn.addr !939
  %6 = add i8 %4, %5, !insn.addr !939
  store i8 %6, i8* %3, align 1, !insn.addr !939
  %7 = load i32, i32* inttoptr (i32 1922400 to i32*), align 32, !insn.addr !940
  %8 = call i8 @__asm_in.7(i8 -95), !insn.addr !941
  %9 = sext i8 %8 to i32, !insn.addr !941
  %10 = and i32 %7, -256, !insn.addr !941
  %11 = or i32 %10, %9, !insn.addr !941
  ret i32 %11, !insn.addr !942
}

define i32 @function_40355f(i16 %arg1) local_unnamed_addr {
dec_label_pc_40355f:
  %ebp.1.reg2mem = alloca i32, !insn.addr !943
  %esp.1.reg2mem = alloca i32, !insn.addr !943
  %pf.0.in.in.reg2mem = alloca i8, !insn.addr !943
  %of.0.reg2mem = alloca i1, !insn.addr !943
  %sf.0.reg2mem = alloca i1, !insn.addr !943
  %zf.0.reg2mem = alloca i1, !insn.addr !943
  %.pre-phi67.reg2mem = alloca i32*, !insn.addr !943
  %ebp.0.reg2mem = alloca i32, !insn.addr !943
  %esp.0.reg2mem = alloca i32, !insn.addr !943
  %ebx.0.reg2mem = alloca i32, !insn.addr !943
  %ecx.0.reg2mem = alloca i32, !insn.addr !943
  %eax.0.reg2mem = alloca i32, !insn.addr !943
  %merge.reg2mem = alloca i32, !insn.addr !943
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_13753 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %7 = icmp eq i1 %6, %5, !insn.addr !943
  br i1 %7, label %dec_label_pc_4035b6, label %dec_label_pc_403561, !insn.addr !943

dec_label_pc_403561:                              ; preds = %dec_label_pc_40355f
  %8 = call i32 @__asm_hlt(), !insn.addr !944
  %9 = add i32 %2, -48, !insn.addr !945
  %10 = inttoptr i32 %9 to i32*, !insn.addr !945
  store i32 -1, i32* %10, align 4, !insn.addr !945
  %11 = add i32 %2, -40, !insn.addr !946
  %12 = inttoptr i32 %11 to i32*, !insn.addr !946
  store i32 436207615, i32* %12, align 4, !insn.addr !946
  %13 = add i32 %2, -77, !insn.addr !947
  %14 = inttoptr i32 %13 to i32*, !insn.addr !947
  store i32 2046820351, i32* %14, align 4, !insn.addr !947
  %15 = icmp slt i32 %3, 1
  br i1 %15, label %16, label %dec_label_pc_40358d, !insn.addr !948

; <label>:16:                                     ; preds = %dec_label_pc_403561
  %17 = add i32 %2, -24, !insn.addr !949
  %18 = inttoptr i32 %17 to i32*, !insn.addr !949
  %19 = add i32 %1, -1407874276, !insn.addr !950
  %20 = inttoptr i32 %19 to i32*, !insn.addr !950
  %21 = call i32 @function_463654(), !insn.addr !948
  br label %dec_label_pc_40358d, !insn.addr !948

dec_label_pc_40358d:                              ; preds = %16, %dec_label_pc_403561
  %22 = call i32 @function_dc4b94a7(), !insn.addr !951
  ret i32 %22, !insn.addr !951

dec_label_pc_4035a2:                              ; preds = %dec_label_pc_40363f
  %23 = add i32 %ebp.1.reload, -5, !insn.addr !952
  %24 = inttoptr i32 %23 to i32*, !insn.addr !952
  %25 = inttoptr i32 %23 to i8*, !insn.addr !953
  %26 = load i8, i8* %25, align 1, !insn.addr !953
  %27 = trunc i32 %3 to i8, !insn.addr !953
  %28 = or i8 %26, %27, !insn.addr !953
  store i8 %28, i8* %25, align 1, !insn.addr !953
  %29 = add i32 %3, -8, !insn.addr !954
  %30 = inttoptr i32 %29 to i32*, !insn.addr !954
  %31 = load i32, i32* %30, align 4, !insn.addr !954
  %32 = add i32 %ebp.1.reload, -57, !insn.addr !955
  %33 = inttoptr i32 %32 to i32*, !insn.addr !955
  store i32 %31, i32* %33, align 4, !insn.addr !955
  ret i32 %142, !insn.addr !956

dec_label_pc_4035b5.loopexit:                     ; preds = %dec_label_pc_4035d7
  %34 = and i32 %esp.0.reload, -256, !insn.addr !957
  %35 = zext i8 %51 to i32, !insn.addr !957
  %36 = or i32 %34, %35, !insn.addr !957
  store i32 %36, i32* %merge.reg2mem
  br label %dec_label_pc_4035b5

dec_label_pc_4035b5:                              ; preds = %dec_label_pc_4035b5.loopexit, %dec_label_pc_403901, %dec_label_pc_403606, %dec_label_pc_403615
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !958

dec_label_pc_4035b6:                              ; preds = %dec_label_pc_40355f
  %37 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !959
  store i32 %37, i32* %stack_var_13753, align 4, !insn.addr !960
  %38 = ptrtoint i32* %stack_var_13753 to i32, !insn.addr !960
  %39 = add i32 %3, -1962229747, !insn.addr !961
  %40 = inttoptr i32 %39 to i32*, !insn.addr !961
  %41 = add i32 %3, 1435098957
  %42 = inttoptr i32 %41 to i32*
  store i32 %38, i32* %esp.0.reg2mem, !insn.addr !960
  store i32 %37, i32* %ebp.0.reg2mem, !insn.addr !960
  br label %dec_label_pc_4035bc, !insn.addr !960

dec_label_pc_4035bc:                              ; preds = %dec_label_pc_40361c, %dec_label_pc_4035b6
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %43 = inttoptr i32 %ebx.0.reload to i32*, !insn.addr !962
  %44 = load i32, i32* %43, align 4, !insn.addr !962
  %45 = or i32 %44, %eax.0.reload, !insn.addr !962
  store i32 %45, i32* %43, align 4, !insn.addr !962
  %46 = add i32 %ebp.0.reload, 1, !insn.addr !963
  %47 = add i32 %eax.0.reload, -4, !insn.addr !964
  %48 = inttoptr i32 %47 to i32*, !insn.addr !964
  store i32 %46, i32* %48, align 4, !insn.addr !964
  %49 = load i32, i32* %40, align 4, !insn.addr !961
  %50 = trunc i32 %esp.0.reload to i8, !insn.addr !957
  %51 = add i8 %50, -88, !insn.addr !957
  %52 = xor i8 %51, %50, !insn.addr !957
  %53 = add i8 %50, 40, !insn.addr !957
  %54 = and i8 %52, %53, !insn.addr !957
  %55 = icmp slt i8 %54, 0, !insn.addr !957
  %56 = icmp eq i8 %51, 0, !insn.addr !957
  %57 = icmp slt i8 %51, 0, !insn.addr !957
  %58 = add i32 %49, -8, !insn.addr !965
  %59 = inttoptr i32 %58 to i32*, !insn.addr !965
  store i32 %47, i32* %59, align 4, !insn.addr !965
  %60 = icmp eq i1 %57, %55, !insn.addr !966
  %61 = icmp eq i1 %56, false, !insn.addr !966
  %62 = icmp eq i1 %60, %61, !insn.addr !966
  br i1 %62, label %dec_label_pc_4035bc.dec_label_pc_4035dc_crit_edge, label %dec_label_pc_4035d7, !insn.addr !966

dec_label_pc_4035bc.dec_label_pc_4035dc_crit_edge: ; preds = %dec_label_pc_4035bc
  %63 = add i32 %49, -4, !insn.addr !967
  %64 = inttoptr i32 %63 to i32*, !insn.addr !967
  %65 = call i8 @llvm.ctpop.i8(i8 %51), !range !405, !insn.addr !957
  %.pre = add i32 %eax.0.reload, -44, !insn.addr !968
  %.pre66 = inttoptr i32 %.pre to i32*, !insn.addr !968
  store i32* %.pre66, i32** %.pre-phi67.reg2mem
  store i1 %56, i1* %zf.0.reg2mem
  store i1 %57, i1* %sf.0.reg2mem
  store i1 %55, i1* %of.0.reg2mem
  store i8 %65, i8* %pf.0.in.in.reg2mem
  br label %dec_label_pc_4035dc

dec_label_pc_4035d7:                              ; preds = %dec_label_pc_4035bc
  %66 = add i32 %eax.0.reload, -44
  %67 = inttoptr i32 %66 to i32*
  %68 = load i32, i32* %67, align 4, !insn.addr !969
  %69 = sub i32 %68, %ecx.0.reload, !insn.addr !969
  %70 = icmp ult i32 %68, %ecx.0.reload, !insn.addr !969
  %71 = xor i32 %68, %ecx.0.reload, !insn.addr !969
  %72 = xor i32 %69, %68, !insn.addr !969
  %73 = and i32 %72, %71, !insn.addr !969
  %74 = icmp slt i32 %73, 0, !insn.addr !969
  %75 = icmp eq i32 %69, 0, !insn.addr !969
  %76 = icmp slt i32 %69, 0, !insn.addr !969
  %77 = trunc i32 %69 to i8, !insn.addr !969
  %78 = call i8 @llvm.ctpop.i8(i8 %77), !range !405, !insn.addr !969
  store i32* %67, i32** %.pre-phi67.reg2mem, !insn.addr !970
  store i1 %75, i1* %zf.0.reg2mem, !insn.addr !970
  store i1 %76, i1* %sf.0.reg2mem, !insn.addr !970
  store i1 %74, i1* %of.0.reg2mem, !insn.addr !970
  store i8 %78, i8* %pf.0.in.in.reg2mem, !insn.addr !970
  br i1 %70, label %dec_label_pc_4035b5.loopexit, label %dec_label_pc_4035dc, !insn.addr !970

dec_label_pc_4035dc:                              ; preds = %dec_label_pc_4035bc.dec_label_pc_4035dc_crit_edge, %dec_label_pc_4035d7
  %pf.0.in.in.reload = load i8, i8* %pf.0.in.in.reg2mem
  %.pre-phi67.reload = load i32*, i32** %.pre-phi67.reg2mem
  %pf.0.in = and i8 %pf.0.in.in.reload, 1
  %pf.0 = icmp eq i8 %pf.0.in, 0
  store i32 %ecx.0.reload, i32* %.pre-phi67.reload, align 4, !insn.addr !968
  %79 = add i32 %eax.0.reload, -40, !insn.addr !971
  %80 = inttoptr i32 %79 to i32*, !insn.addr !971
  store i32 %47, i32* %80, align 4, !insn.addr !971
  %81 = icmp eq i1 %pf.0, false, !insn.addr !972
  store i32 %58, i32* %esp.1.reg2mem, !insn.addr !972
  store i32 %47, i32* %ebp.1.reg2mem, !insn.addr !972
  br i1 %81, label %dec_label_pc_40363f, label %dec_label_pc_4035ea, !insn.addr !972

dec_label_pc_4035ea:                              ; preds = %dec_label_pc_4035dc
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %sf.0.reload = load i1, i1* %sf.0.reg2mem
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  %82 = call i32 @__asm_hlt(), !insn.addr !973
  %83 = icmp eq i1 %sf.0.reload, %of.0.reload, !insn.addr !974
  %84 = icmp eq i1 %zf.0.reload, false, !insn.addr !974
  %85 = icmp eq i1 %83, %84, !insn.addr !974
  br i1 %85, label %dec_label_pc_40361c, label %dec_label_pc_4035f0, !insn.addr !974

dec_label_pc_4035f0:                              ; preds = %dec_label_pc_4035ea
  br i1 %83, label %dec_label_pc_4035f2, label %dec_label_pc_4035fa, !insn.addr !975

dec_label_pc_4035f2:                              ; preds = %dec_label_pc_4035f0
  %86 = add i32 %eax.0.reload, -20, !insn.addr !976
  %87 = inttoptr i32 %86 to i32*, !insn.addr !976
  %88 = load i32, i32* %87, align 4, !insn.addr !976
  %89 = add i32 %eax.0.reload, -60, !insn.addr !977
  %90 = inttoptr i32 %89 to i32*, !insn.addr !977
  %91 = load i32, i32* %90, align 4, !insn.addr !977
  %92 = icmp ugt i32 %88, %91
  br i1 %92, label %dec_label_pc_403606, label %dec_label_pc_4035fa, !insn.addr !978

dec_label_pc_4035fa:                              ; preds = %dec_label_pc_4035f2, %dec_label_pc_4035f0
  %93 = add i32 %ecx.0.reload, -16, !insn.addr !979
  %94 = inttoptr i32 %93 to i32*, !insn.addr !979
  store i32 %ebx.0.reload, i32* %94, align 4, !insn.addr !979
  %95 = add i32 %eax.0.reload, -123, !insn.addr !980
  %96 = inttoptr i32 %95 to i32*, !insn.addr !980
  %97 = load i32, i32* %96, align 4, !insn.addr !980
  %98 = add i32 %eax.0.reload, -16, !insn.addr !981
  %99 = inttoptr i32 %98 to i32*, !insn.addr !981
  store i32 %97, i32* %99, align 4, !insn.addr !981
  br label %dec_label_pc_403606, !insn.addr !981

dec_label_pc_403606:                              ; preds = %dec_label_pc_4035f2, %dec_label_pc_4035fa
  %100 = add i32 %eax.0.reload, -64, !insn.addr !982
  %101 = inttoptr i32 %100 to i32*, !insn.addr !982
  %102 = load i32, i32* %101, align 4, !insn.addr !982
  %103 = add i32 %eax.0.reload, -24, !insn.addr !983
  %104 = inttoptr i32 %103 to i8*, !insn.addr !983
  %105 = load i8, i8* %104, align 1, !insn.addr !983
  %106 = trunc i32 %102 to i8, !insn.addr !983
  %107 = and i8 %105, %106, !insn.addr !983
  %108 = icmp eq i8 %107, 0, !insn.addr !983
  %109 = icmp slt i8 %107, 0, !insn.addr !983
  %110 = icmp eq i1 %109, false, !insn.addr !984
  %111 = icmp eq i1 %108, false, !insn.addr !984
  %112 = icmp eq i1 %110, %111, !insn.addr !984
  %or.cond = or i1 %110, %112
  store i32 %82, i32* %merge.reg2mem, !insn.addr !984
  br i1 %or.cond, label %dec_label_pc_4035b5, label %dec_label_pc_403615, !insn.addr !984

dec_label_pc_403615:                              ; preds = %dec_label_pc_403606
  %113 = add i32 %eax.0.reload, -28, !insn.addr !985
  %114 = inttoptr i32 %113 to i32*, !insn.addr !985
  store i32 %ecx.0.reload, i32* %114, align 4, !insn.addr !985
  %115 = inttoptr i32 %103 to i32*, !insn.addr !986
  store i32 %102, i32* %115, align 4, !insn.addr !986
  store i32 %82, i32* %merge.reg2mem, !insn.addr !986
  br label %dec_label_pc_4035b5, !insn.addr !986

dec_label_pc_40361c:                              ; preds = %dec_label_pc_4035ea
  %116 = add i32 %49, -12, !insn.addr !987
  %117 = inttoptr i32 %116 to i32*, !insn.addr !987
  store i32 %47, i32* %117, align 4, !insn.addr !987
  %118 = add i32 %49, -16, !insn.addr !988
  %119 = inttoptr i32 %118 to i32*, !insn.addr !988
  store i32 %47, i32* %119, align 4, !insn.addr !988
  %120 = add i32 %49, 1517, !insn.addr !988
  call void @__asm_into(i32 %4), !insn.addr !989
  %121 = call i32 @__asm_int3(), !insn.addr !990
  %122 = or i32 %121, 1, !insn.addr !991
  %123 = load i32, i32* %42, align 4, !insn.addr !992
  %124 = udiv i32 %123, 2, !insn.addr !992
  %125 = shl i32 %123, 31, !insn.addr !992
  %126 = or i32 %124, %125, !insn.addr !992
  store i32 %126, i32* %42, align 4, !insn.addr !992
  %127 = add i32 %ecx.0.reload, -1, !insn.addr !993
  %128 = icmp eq i32 %127, 0, !insn.addr !993
  store i32 %122, i32* %eax.0.reg2mem, !insn.addr !993
  store i32 %127, i32* %ecx.0.reg2mem, !insn.addr !993
  store i32 %120, i32* %esp.0.reg2mem, !insn.addr !993
  store i32 %118, i32* %ebp.0.reg2mem, !insn.addr !993
  br i1 %128, label %dec_label_pc_403631, label %dec_label_pc_4035bc, !insn.addr !993

dec_label_pc_403631:                              ; preds = %dec_label_pc_40361c
  %129 = add i32 %eax.0.reload, -56, !insn.addr !994
  %130 = inttoptr i32 %129 to i32*, !insn.addr !994
  %131 = add i32 %49, 1513, !insn.addr !995
  %132 = inttoptr i32 %131 to i32*, !insn.addr !995
  store i32 %118, i32* %132, align 4, !insn.addr !995
  %133 = call i8 @__asm_in.7(i8 -117), !insn.addr !996
  %134 = add i32 %3, 1435105357, !insn.addr !997
  %135 = inttoptr i32 %134 to i32*, !insn.addr !997
  %136 = load i32, i32* %135, align 4, !insn.addr !997
  %137 = udiv i32 %136, 2, !insn.addr !997
  %138 = shl i32 %136, 31, !insn.addr !997
  %139 = or i32 %137, %138, !insn.addr !997
  store i32 %139, i32* %135, align 4, !insn.addr !997
  %140 = call i8 @__asm_in.7(i8 -117), !insn.addr !998
  store i32 %131, i32* %esp.1.reg2mem, !insn.addr !998
  store i32 %118, i32* %ebp.1.reg2mem, !insn.addr !998
  br label %dec_label_pc_40363f, !insn.addr !998

dec_label_pc_40363f:                              ; preds = %dec_label_pc_4035dc, %dec_label_pc_403631
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %141 = trunc i32 %3 to i16, !insn.addr !999
  %142 = call i32 @__asm_in(i16 %141), !insn.addr !999
  %143 = add i32 %ebp.1.reload, -1, !insn.addr !1000
  %144 = icmp eq i32 %143, 0, !insn.addr !1000
  %145 = icmp eq i1 %144, false, !insn.addr !1001
  br i1 %145, label %dec_label_pc_4035a2, label %dec_label_pc_403654, !insn.addr !1001

dec_label_pc_403654:                              ; preds = %dec_label_pc_40363f
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %146 = add i32 %ebp.1.reload, -49, !insn.addr !1002
  %147 = inttoptr i32 %146 to i32*, !insn.addr !1002
  %148 = load i32, i32* %147, align 4, !insn.addr !1002
  %149 = add i32 %0, -1308622348, !insn.addr !1003
  %150 = inttoptr i32 %149 to i32*, !insn.addr !1003
  %151 = load i32, i32* %150, align 4, !insn.addr !1003
  %152 = add i32 %151, -796721046, !insn.addr !1003
  store i32 %152, i32* %150, align 4, !insn.addr !1003
  %153 = add i32 %142, -24, !insn.addr !1004
  %154 = inttoptr i32 %153 to i8*, !insn.addr !1004
  %155 = load i8, i8* %154, align 1, !insn.addr !1004
  %156 = udiv i32 %148, 256, !insn.addr !1004
  %157 = trunc i32 %156 to i8, !insn.addr !1004
  %158 = add i8 %155, %157, !insn.addr !1004
  store i8 %158, i8* %154, align 1, !insn.addr !1004
  %159 = inttoptr i32 %142 to i32*, !insn.addr !1005
  %160 = load i32, i32* %159, align 4, !insn.addr !1005
  %161 = add i32 %142, 81, !insn.addr !1005
  %162 = add i32 %161, %160, !insn.addr !1006
  %163 = inttoptr i32 %162 to i8*, !insn.addr !1006
  %164 = load i8, i8* %163, align 1, !insn.addr !1006
  %165 = trunc i32 %3 to i8, !insn.addr !1006
  %166 = add i8 %164, %165, !insn.addr !1006
  store i8 %166, i8* %163, align 1, !insn.addr !1006
  %167 = call i32 @function_40b590(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1007
  %168 = add i32 %ebp.1.reload, -37, !insn.addr !1008
  %169 = inttoptr i32 %168 to i32*, !insn.addr !1008
  %170 = load i32, i32* %169, align 4, !insn.addr !1008
  store i32 %167, i32* %147, align 4, !insn.addr !1009
  %171 = inttoptr i32 %167 to i8*, !insn.addr !1010
  %172 = load i8, i8* %171, align 1, !insn.addr !1010
  %173 = trunc i32 %167 to i8, !insn.addr !1010
  %174 = add i8 %172, %173, !insn.addr !1010
  store i8 %174, i8* %171, align 1, !insn.addr !1010
  %175 = call i32 @unknown_83403684(), !insn.addr !1011
  %176 = inttoptr i32 %175 to i32*, !insn.addr !1012
  %177 = load i32, i32* %176, align 4, !insn.addr !1012
  %178 = mul i32 %177, 2, !insn.addr !1012
  %179 = lshr i32 %177, 31, !insn.addr !1012
  %180 = or i32 %179, %178, !insn.addr !1012
  store i32 %180, i32* %176, align 4, !insn.addr !1012
  %181 = add i32 %esp.1.reload, -4, !insn.addr !1013
  %182 = inttoptr i32 %181 to i32*, !insn.addr !1013
  store i32 %170, i32* %182, align 4, !insn.addr !1013
  %183 = add i32 %esp.1.reload, -8, !insn.addr !1014
  %184 = inttoptr i32 %183 to i32*, !insn.addr !1014
  store i32 %175, i32* %184, align 4, !insn.addr !1014
  %185 = call i32 @unknown_b450b590(), !insn.addr !1015
  %186 = load i32, i32* inttoptr (i32 -666531575 to i32*), align 4, !insn.addr !1016
  %187 = add i32 %ebp.1.reload, -17, !insn.addr !1017
  %188 = inttoptr i32 %187 to i32*, !insn.addr !1017
  %189 = load i32, i32* %188, align 4, !insn.addr !1017
  %190 = add i32 %186, -4, !insn.addr !1018
  %191 = inttoptr i32 %190 to i32*, !insn.addr !1018
  store i32 90, i32* %191, align 4, !insn.addr !1018
  %192 = xor i32 %189, -4
  %193 = icmp ult i32 %192, 500, !insn.addr !1019
  %194 = add i32 %186, -8, !insn.addr !1020
  %195 = inttoptr i32 %194 to i32*, !insn.addr !1020
  store i32 1000, i32* %195, align 4, !insn.addr !1020
  %196 = zext i1 %193 to i32, !insn.addr !1021
  %197 = add i32 %170, %196, !insn.addr !1021
  %198 = icmp eq i32 %197, 0, !insn.addr !1021
  %199 = call i32 @unknown_2b1cb590(), !insn.addr !1022
  %200 = add i32 %197, -1, !insn.addr !1023
  %201 = icmp eq i32 %200, 0, !insn.addr !1023
  %202 = or i1 %198, %201, !insn.addr !1023
  br i1 %202, label %dec_label_pc_4036b1, label %dec_label_pc_4036fe, !insn.addr !1023

dec_label_pc_4036b1:                              ; preds = %dec_label_pc_403654
  %203 = inttoptr i32 %0 to i32*, !insn.addr !1024
  %204 = call i8 @__asm_in.4(i16 %141), !insn.addr !1025
  %205 = sext i8 %204 to i32, !insn.addr !1025
  %206 = and i32 %199, -256, !insn.addr !1025
  %207 = or i32 %206, %205, !insn.addr !1025
  store i32 %207, i32* %188, align 4, !insn.addr !1026
  %208 = add i32 %ebp.1.reload, -25, !insn.addr !1027
  %209 = inttoptr i32 %208 to i32*, !insn.addr !1027
  %210 = load i32, i32* %209, align 4, !insn.addr !1027
  %211 = add i32 %186, -12, !insn.addr !1028
  %212 = inttoptr i32 %211 to i32*, !insn.addr !1028
  store i32 -92, i32* %212, align 4, !insn.addr !1028
  %213 = add i32 %210, 500, !insn.addr !1029
  %214 = add i32 %186, -16, !insn.addr !1030
  %215 = inttoptr i32 %214 to i32*, !insn.addr !1030
  store i32 1733493736, i32* %215, align 4, !insn.addr !1030
  call void @__asm_into(i32 %4), !insn.addr !1031
  %216 = mul i32 %3, 2, !insn.addr !1032
  %217 = lshr i32 %3, 31, !insn.addr !1032
  %218 = or i32 %217, %216, !insn.addr !1032
  %219 = add i32 %3, -397389324, !insn.addr !1033
  %220 = inttoptr i32 %219 to i32*, !insn.addr !1033
  store i32 %218, i32* %220, align 4, !insn.addr !1033
  ret i32 %213, !insn.addr !1034

dec_label_pc_4036fe:                              ; preds = %dec_label_pc_403654
  %221 = icmp ule i32 %197, %170, !insn.addr !1021
  %222 = icmp eq i1 %193, %221, !insn.addr !1021
  %223 = call i32 @unknown_840137a6(), !insn.addr !1035
  %224 = call i8 @__asm_in.4(i16 %141), !insn.addr !1036
  %225 = add i32 %186, -12, !insn.addr !1037
  %226 = inttoptr i32 %225 to i32*, !insn.addr !1037
  store i32 %143, i32* %226, align 4, !insn.addr !1037
  %227 = call i32 @__asm_int3(), !insn.addr !1038
  %228 = add i32 %186, -16, !insn.addr !1039
  %229 = inttoptr i32 %228 to i32*, !insn.addr !1039
  store i32 %200, i32* %229, align 4, !insn.addr !1039
  %230 = add i32 %186, -20, !insn.addr !1040
  %231 = inttoptr i32 %230 to i32*, !insn.addr !1040
  store i32 %227, i32* %231, align 4, !insn.addr !1040
  %232 = call i32 @function_40b590(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1041
  br i1 %222, label %dec_label_pc_403757, label %dec_label_pc_403716, !insn.addr !1042

dec_label_pc_403716:                              ; preds = %dec_label_pc_4036fe
  %233 = and i32 %0, 255, !insn.addr !1043
  %234 = and i32 %232, -256, !insn.addr !1043
  %235 = or i32 %234, %233, !insn.addr !1043
  %236 = icmp eq i32 %235, 0, !insn.addr !1044
  br i1 %236, label %dec_label_pc_403722, label %dec_label_pc_4038d1, !insn.addr !1045

dec_label_pc_403722:                              ; preds = %dec_label_pc_403716
  %237 = add i32 %ebp.1.reload, -29, !insn.addr !1046
  %238 = inttoptr i32 %237 to i32*, !insn.addr !1046
  %239 = load i32, i32* inttoptr (i32 4305832 to i32*), align 8, !insn.addr !1047
  %240 = add i32 %186, -24, !insn.addr !1048
  %241 = inttoptr i32 %240 to i32*, !insn.addr !1048
  %242 = add i32 %186, -28, !insn.addr !1049
  %243 = inttoptr i32 %242 to i32*, !insn.addr !1049
  store i32 %239, i32* %243, align 4, !insn.addr !1049
  %244 = load i8*, i8** @global_var_4117f0, align 4, !insn.addr !1050
  %245 = ptrtoint i8* %244 to i32, !insn.addr !1050
  store i32 %245, i32* %243, align 4, !insn.addr !1051
  %246 = add i32 %186, -32, !insn.addr !1052
  %247 = inttoptr i32 %246 to i32*, !insn.addr !1052
  store i32 %245, i32* %247, align 4, !insn.addr !1052
  ret i32 %245, !insn.addr !1052

dec_label_pc_403757:                              ; preds = %dec_label_pc_4036fe
  %248 = add i32 %ebp.1.reload, -45, !insn.addr !1053
  %249 = inttoptr i32 %248 to i32*, !insn.addr !1053
  %250 = trunc i32 %0 to i8
  call void @__asm_out.6(i16 %141, i8 %250), !insn.addr !1054
  %251 = call i32 @__asm_int3(), !insn.addr !1055
  %252 = add i32 %186, 12, !insn.addr !1056
  %253 = inttoptr i32 %252 to i32*, !insn.addr !1056
  %254 = call i32 @__asm_int1(), !insn.addr !1057
  %255 = load i32, i32* inttoptr (i32 -1685978452 to i32*), align 4, !insn.addr !1058
  %256 = add i32 %186, 8, !insn.addr !1059
  %257 = inttoptr i32 %256 to i32*, !insn.addr !1059
  %258 = ashr i32 %255, 31, !insn.addr !1060
  %259 = add i32 %186, 4, !insn.addr !1061
  %260 = inttoptr i32 %259 to i32*, !insn.addr !1061
  store i32 -397192880, i32* %260, align 4, !insn.addr !1061
  %261 = udiv i32 %200, 256, !insn.addr !1062
  %262 = add nsw i32 %258, %261, !insn.addr !1062
  %263 = and i32 %262, 255, !insn.addr !1062
  %264 = and i32 %258, -256, !insn.addr !1062
  %265 = or i32 %263, %264, !insn.addr !1062
  %266 = or i32 %255, 2821032, !insn.addr !1063
  %267 = add i32 %186, 2, !insn.addr !1064
  %268 = inttoptr i32 %267 to i32*, !insn.addr !1064
  store i32 %265, i32* %268, align 4, !insn.addr !1064
  %269 = load i32, i32* %249, align 4, !insn.addr !1065
  %270 = add i32 %186, -2, !insn.addr !1066
  %271 = inttoptr i32 %270 to i32*, !insn.addr !1066
  store i32 %266, i32* %271, align 4, !insn.addr !1066
  %272 = load i32, i32* %147, align 4, !insn.addr !1067
  %273 = inttoptr i32 %3 to i32*, !insn.addr !1068
  store i32 %269, i32* %273, align 4, !insn.addr !1068
  %274 = add i32 %186, -6, !insn.addr !1069
  %275 = inttoptr i32 %274 to i32*, !insn.addr !1069
  store i32 %272, i32* %275, align 4, !insn.addr !1069
  %276 = and i32 %200, -256, !insn.addr !1070
  %277 = or i32 %276, 154, !insn.addr !1070
  %278 = add i32 %186, -10, !insn.addr !1071
  %279 = inttoptr i32 %278 to i32*, !insn.addr !1071
  store i32 %277, i32* %279, align 4, !insn.addr !1071
  %280 = add i32 %186, -14, !insn.addr !1072
  %281 = inttoptr i32 %280 to i32*, !insn.addr !1072
  store i32 ptrtoint ([88 x i8]* @global_var_40e080 to i32), i32* %281, align 4, !insn.addr !1072
  %282 = load i8*, i8** @global_var_4102ac, align 4, !insn.addr !1073
  %283 = ptrtoint i8* %282 to i32, !insn.addr !1073
  ret i32 %283, !insn.addr !1074

dec_label_pc_4038d1:                              ; preds = %dec_label_pc_403716
  %284 = icmp eq i32 %235, %3, !insn.addr !1075
  br i1 %284, label %dec_label_pc_4038e3, label %dec_label_pc_4038d5, !insn.addr !1076

dec_label_pc_4038d5:                              ; preds = %dec_label_pc_4038d1
  %285 = add i32 %186, -24, !insn.addr !1077
  %286 = inttoptr i32 %285 to i32*, !insn.addr !1077
  store i32 %235, i32* %286, align 4, !insn.addr !1077
  %287 = add i32 %186, -28, !insn.addr !1078
  %288 = inttoptr i32 %287 to i32*, !insn.addr !1078
  store i32 5040184, i32* %288, align 4, !insn.addr !1078
  ret i32 %235, !insn.addr !1079

dec_label_pc_4038e3:                              ; preds = %dec_label_pc_4038d1
  %289 = add i32 %3, 106, !insn.addr !1080
  %290 = inttoptr i32 %289 to i32*, !insn.addr !1080
  %291 = load i32, i32* %290, align 4, !insn.addr !1080
  %292 = add i32 %3, 8, !insn.addr !1081
  %293 = inttoptr i32 %292 to i32*, !insn.addr !1081
  %294 = load i32, i32* %293, align 4, !insn.addr !1081
  %295 = add i32 %294, %143, !insn.addr !1081
  store i32 %295, i32* %293, align 4, !insn.addr !1081
  %296 = call i32 @function_408db0(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1082
  %297 = sub i32 %296, %3, !insn.addr !1083
  %298 = icmp slt i32 %297, 0, !insn.addr !1083
  br i1 %298, label %dec_label_pc_403901, label %dec_label_pc_4038f3, !insn.addr !1084

dec_label_pc_4038f3:                              ; preds = %dec_label_pc_4038e3
  %299 = call i32 @unknown_42a1593b(), !insn.addr !1085
  ret i32 %299, !insn.addr !1086

dec_label_pc_403901:                              ; preds = %dec_label_pc_4038e3
  %300 = load i32, i32* inttoptr (i32 3670636 to i32*), align 4, !insn.addr !1087
  %301 = add i32 %0, 1, !insn.addr !1088
  %302 = add i32 %291, -8, !insn.addr !1089
  %303 = inttoptr i32 %302 to i32*, !insn.addr !1089
  store i32 %300, i32* %303, align 4, !insn.addr !1089
  %304 = inttoptr i32 %301 to i32*, !insn.addr !1090
  %305 = load i32, i32* %304, align 4, !insn.addr !1090
  %306 = add i32 %291, -12, !insn.addr !1091
  %307 = inttoptr i32 %306 to i32*, !insn.addr !1091
  store i32 64, i32* %307, align 4, !insn.addr !1091
  %308 = add i32 %291, -16, !insn.addr !1092
  %309 = inttoptr i32 %308 to i32*, !insn.addr !1092
  store i32 %305, i32* %309, align 4, !insn.addr !1092
  %310 = call i32 @unknown_8fa9b0(), !insn.addr !1093
  %311 = icmp eq i32 %310, %3, !insn.addr !1094
  br i1 %311, label %dec_label_pc_4035b5, label %dec_label_pc_403919, !insn.addr !1095

dec_label_pc_403919:                              ; preds = %dec_label_pc_403901
  %312 = add i32 %291, -4, !insn.addr !1096
  %313 = inttoptr i32 %312 to i32*, !insn.addr !1096
  %314 = add i32 %0, 2, !insn.addr !1088
  %315 = call i32 @unknown_162933a6(), !insn.addr !1097
  %316 = call i32 @__asm_in.2(i32 255), !insn.addr !1098
  %317 = add i32 %3, 227215556, !insn.addr !1099
  %318 = inttoptr i32 %317 to i32*, !insn.addr !1099
  %319 = load i32, i32* %318, align 4, !insn.addr !1099
  %320 = add i32 %319, 1, !insn.addr !1099
  store i32 %320, i32* %318, align 4, !insn.addr !1099
  %321 = call i8 @__asm_insb(i16 20494), !insn.addr !1100
  %322 = inttoptr i32 %301 to i8*, !insn.addr !1100
  store i8 %321, i8* %322, align 1, !insn.addr !1100
  %323 = inttoptr i32 %314 to i32*, !insn.addr !1101
  %324 = load i32, i32* %323, align 4, !insn.addr !1101
  call void @__asm_outsd(i16 20494, i32 %324), !insn.addr !1101
  %325 = add i32 %3, -2140667881, !insn.addr !1102
  %326 = inttoptr i32 %325 to i8*, !insn.addr !1102
  %327 = load i8, i8* %326, align 1, !insn.addr !1102
  %328 = trunc i32 %197 to i8, !insn.addr !1102
  %329 = add i8 %327, %328, !insn.addr !1102
  store i8 %329, i8* %326, align 1, !insn.addr !1102
  %330 = add i32 %291, -14, !insn.addr !1103
  %331 = inttoptr i32 %330 to i16*, !insn.addr !1103
  %332 = call i32 @unknown_aa618db0(), !insn.addr !1104
  %333 = inttoptr i32 %143 to i32*, !insn.addr !1105
  %334 = load i32, i32* %333, align 4, !insn.addr !1105
  %335 = add i32 %334, 308826187, !insn.addr !1106
  %336 = inttoptr i32 %335 to i8*, !insn.addr !1106
  %337 = load i8, i8* %336, align 1, !insn.addr !1106
  %338 = and i8 %337, 80, !insn.addr !1106
  %339 = zext i8 %338 to i32, !insn.addr !1106
  %340 = mul i32 %339, 256, !insn.addr !1106
  %341 = or i32 %340, 308805646, !insn.addr !1106
  %342 = inttoptr i32 %197 to i32*, !insn.addr !1107
  %343 = load i32, i32* %342, align 4, !insn.addr !1107
  store i32 %341, i32* %342, align 4, !insn.addr !1107
  %344 = add i32 %334, 807686158, !insn.addr !1108
  %345 = add i32 %344, %343, !insn.addr !1108
  %346 = inttoptr i32 %345 to i32*, !insn.addr !1108
  %347 = load i32, i32* %346, align 4, !insn.addr !1108
  %348 = add i32 %347, %314, !insn.addr !1108
  store i32 %348, i32* %346, align 4, !insn.addr !1108
  %349 = call i32 @unknown_8440393d(), !insn.addr !1109
  ret i32 %349, !insn.addr !1109
}

define i32 @function_40395a(i32 %arg1) local_unnamed_addr {
dec_label_pc_40395a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = and i32 %3, -256, !insn.addr !1110
  %6 = load i8, i8* inttoptr (i32 -1996444917 to i8*), align 1, !insn.addr !1111
  %7 = zext i8 %6 to i32, !insn.addr !1111
  %8 = or i32 %5, %7, !insn.addr !1111
  %9 = trunc i32 %1 to i16, !insn.addr !1112
  %10 = call i32 @__asm_insd(i16 %9), !insn.addr !1112
  %11 = inttoptr i32 %0 to i32*, !insn.addr !1112
  store i32 %10, i32* %11, align 4, !insn.addr !1112
  %12 = bitcast i32* %esi to i8*
  %13 = load i8, i8* %12, align 4, !insn.addr !1113
  %14 = inttoptr i32 %0 to i8*, !insn.addr !1113
  store i8 %13, i8* %14, align 1, !insn.addr !1113
  %15 = load i32, i32* %esi, align 4, !insn.addr !1113
  %16 = select i1 %4, i32 -1, i32 1, !insn.addr !1113
  %17 = add i32 %16, %0, !insn.addr !1113
  %18 = add i32 %2, -85, !insn.addr !1114
  %19 = inttoptr i32 %18 to i32*, !insn.addr !1114
  %20 = load i32, i32* %19, align 4, !insn.addr !1114
  %21 = or i32 %8, %20, !insn.addr !1114
  %22 = inttoptr i32 %17 to i32*, !insn.addr !1115
  %23 = load i32, i32* %22, align 4, !insn.addr !1115
  %24 = add i32 %16, -1873213392, !insn.addr !1113
  %25 = add i32 %24, %15, !insn.addr !1116
  %26 = inttoptr i32 %25 to i32*, !insn.addr !1116
  store i32 %21, i32* %26, align 4, !insn.addr !1116
  %27 = load i32, i32* inttoptr (i32 692172452 to i32*), align 4, !insn.addr !1117
  %28 = add i32 %27, %arg1, !insn.addr !1118
  %29 = inttoptr i32 %28 to i8*, !insn.addr !1118
  %30 = udiv i32 %23, 256, !insn.addr !1118
  %31 = trunc i32 %30 to i8, !insn.addr !1118
  store i8 %31, i8* %29, align 1, !insn.addr !1118
  %32 = inttoptr i32 %27 to i8*, !insn.addr !1119
  %33 = load i8, i8* %32, align 1, !insn.addr !1119
  %34 = trunc i32 %27 to i8, !insn.addr !1119
  %35 = add i8 %33, %34, !insn.addr !1119
  store i8 %35, i8* %32, align 1, !insn.addr !1119
  switch i32 %27, label %dec_label_pc_4039a1 [
    i32 0, label %dec_label_pc_403995
    i32 620017, label %37
  ]

dec_label_pc_403995:                              ; preds = %dec_label_pc_40395a
  %36 = call i32 @function_403a5d(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1120
  br label %dec_label_pc_4039a1

; <label>:37:                                     ; preds = %dec_label_pc_40395a
  %38 = call i32 @function_1353a16(), !insn.addr !1121
  br label %dec_label_pc_4039a1, !insn.addr !1121

dec_label_pc_4039a1:                              ; preds = %dec_label_pc_403995, %dec_label_pc_40395a, %37
  %39 = call i32 @function_b63eea1(), !insn.addr !1122
  ret i32 %39, !insn.addr !1122
}

define i32 @function_4039b5(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_4039b5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %stack_var_20 = alloca i32, align 4
  %1 = add i32 %0, -4, !insn.addr !1123
  %2 = inttoptr i32 %1 to i32*, !insn.addr !1123
  %3 = add i32 %0, -8, !insn.addr !1124
  %4 = inttoptr i32 %3 to i32*, !insn.addr !1124
  %5 = ptrtoint i32* %stack_var_20 to i32, !insn.addr !1125
  ret i32 %5, !insn.addr !1125
}

define i32 @function_4039f8() local_unnamed_addr {
dec_label_pc_4039f8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1126
}

define i32 @function_4039fd() local_unnamed_addr {
dec_label_pc_4039fd:
  %eax.0.reg2mem = alloca i32, !insn.addr !1127
  %.pre-phi.reg2mem = alloca i8, !insn.addr !1127
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %2, 104, !insn.addr !1128
  %7 = inttoptr i32 %6 to i8*, !insn.addr !1128
  %8 = load i8, i8* %7, align 1, !insn.addr !1128
  %9 = trunc i32 %3 to i8, !insn.addr !1128
  %10 = add i8 %8, %9, !insn.addr !1128
  store i8 %10, i8* %7, align 1, !insn.addr !1128
  %sext = mul i32 %5, 65536
  %11 = sdiv i32 %sext, 65536, !insn.addr !1129
  %12 = trunc i32 %11 to i8
  %13 = trunc i32 %4 to i8
  %14 = and i8 %13, 31, !insn.addr !1130
  %15 = icmp eq i8 %14, 0, !insn.addr !1130
  store i8 %12, i8* %.pre-phi.reg2mem, !insn.addr !1130
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !1130
  br i1 %15, label %24, label %16, !insn.addr !1130

; <label>:16:                                     ; preds = %dec_label_pc_4039fd
  %17 = lshr i8 %12, %14, !insn.addr !1130
  %18 = sub nsw i8 8, %14, !insn.addr !1130
  %19 = shl i8 %12, %18, !insn.addr !1130
  %20 = or i8 %17, %19, !insn.addr !1130
  %21 = zext i8 %20 to i32, !insn.addr !1130
  %22 = and i32 %11, -256, !insn.addr !1130
  %23 = or i32 %22, %21, !insn.addr !1130
  store i8 %20, i8* %.pre-phi.reg2mem, !insn.addr !1130
  store i32 %23, i32* %eax.0.reg2mem, !insn.addr !1130
  br label %24, !insn.addr !1130

; <label>:24:                                     ; preds = %dec_label_pc_4039fd, %16
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %25 = add nsw i32 %eax.0.reload, -7116, !insn.addr !1131
  %26 = inttoptr i32 %25 to i8*, !insn.addr !1131
  %27 = load i8, i8* %26, align 1, !insn.addr !1131
  %28 = udiv i32 %3, 256, !insn.addr !1131
  %29 = trunc i32 %28 to i8, !insn.addr !1131
  %30 = add i8 %27, %29, !insn.addr !1131
  store i8 %30, i8* %26, align 1, !insn.addr !1131
  %31 = add i32 %1, 8, !insn.addr !1132
  %32 = inttoptr i32 %31 to i32*, !insn.addr !1132
  store i32 8126464, i32* %32, align 4, !insn.addr !1132
  %33 = mul i32 %0, 8, !insn.addr !1133
  %34 = add i32 %1, -1, !insn.addr !1133
  %35 = add i32 %34, %33, !insn.addr !1133
  %36 = inttoptr i32 %35 to i8*, !insn.addr !1133
  %37 = load i8, i8* %36, align 1, !insn.addr !1133
  %38 = xor i8 %37, %.pre-phi.reload, !insn.addr !1133
  store i8 %38, i8* %36, align 1, !insn.addr !1133
  %39 = add i32 %2, 1583285362, !insn.addr !1134
  %40 = inttoptr i32 %39 to i32*, !insn.addr !1134
  %41 = load i32, i32* %40, align 4, !insn.addr !1134
  %42 = add i32 %41, 1, !insn.addr !1134
  store i32 %42, i32* %40, align 4, !insn.addr !1134
  ret i32 %eax.0.reload, !insn.addr !1135
}

define i32 @function_403a2a(i32 %arg1) local_unnamed_addr {
dec_label_pc_403a2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i16 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, 1, !insn.addr !1136
  %5 = call i32 @unknown_158b0846(i16 %2), !insn.addr !1137
  %6 = add i32 %1, -16, !insn.addr !1138
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1138
  store i32 -721842944, i32* %7, align 4, !insn.addr !1138
  %8 = call i32 @__asm_hlt(), !insn.addr !1139
  %9 = add i32 %8, 204, !insn.addr !1140
  %10 = and i32 %9, 255, !insn.addr !1140
  %11 = and i32 %8, -256, !insn.addr !1140
  %12 = or i32 %10, %11, !insn.addr !1140
  %13 = add i32 %1, -7, !insn.addr !1141
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1141
  store i32 %12, i32* %14, align 4, !insn.addr !1141
  %15 = add i32 %1, -3, !insn.addr !1142
  %16 = inttoptr i32 %15 to i32*, !insn.addr !1142
  store i32 %4, i32* %16, align 4, !insn.addr !1142
  ret i32 %3, !insn.addr !1143
}

define i32 @function_403a5d(i32 %arg1) local_unnamed_addr {
dec_label_pc_403a5d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, 8, !insn.addr !1144
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1144
  store i32 2, i32* %5, align 4, !insn.addr !1144
  %6 = and i32 %2, -256, !insn.addr !1145
  %7 = add i32 %1, 1, !insn.addr !1146
  store i32 %7, i32* inttoptr (i32 289473192 to i32*), align 8, !insn.addr !1147
  call void @__asm_into(i32 %3), !insn.addr !1148
  %8 = call i8 @__asm_in.7(i8 -45), !insn.addr !1149
  %9 = sext i8 %8 to i32, !insn.addr !1149
  %10 = or i32 %6, %9, !insn.addr !1149
  %11 = add i32 %1, 1834971845, !insn.addr !1150
  %12 = inttoptr i32 %11 to i32*, !insn.addr !1150
  %13 = load i32, i32* %12, align 4, !insn.addr !1150
  %14 = add i32 %13, -1, !insn.addr !1150
  store i32 %14, i32* %12, align 4, !insn.addr !1150
  ret i32 %10, !insn.addr !1151
}

define i32 @function_403a90() local_unnamed_addr {
dec_label_pc_403a90:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_403aad() local_unnamed_addr {
dec_label_pc_403aad:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = and i32 %1, -65281, !insn.addr !1152
  %3 = or i32 %2, 3840, !insn.addr !1152
  %4 = add i32 %0, 1820594112, !insn.addr !1153
  %5 = inttoptr i32 %4 to i8*, !insn.addr !1153
  %6 = load i8, i8* %5, align 1, !insn.addr !1153
  %7 = trunc i32 %1 to i8, !insn.addr !1153
  %8 = add i8 %6, %7, !insn.addr !1153
  store i8 %8, i8* %5, align 1, !insn.addr !1153
  %9 = inttoptr i32 %3 to i32*, !insn.addr !1154
  %10 = load i32, i32* %9, align 4, !insn.addr !1154
  %11 = add i32 %10, %3, !insn.addr !1154
  store i32 %11, i32* %9, align 4, !insn.addr !1154
  store i32 %3, i32* inttoptr (i32 -717159756 to i32*), align 4, !insn.addr !1155
  %12 = call i32 @function_f8403c25(), !insn.addr !1156
  ret i32 %12, !insn.addr !1156
}

define i32 @function_403ac4() local_unnamed_addr {
dec_label_pc_403ac4:
  %edi = alloca i32, align 8
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i128 @__decompiler_undefined_function_9()
  %3 = load i32, i32* @global_var_4102b4, align 4, !insn.addr !1157
  %4 = icmp eq i32 %3, 1, !insn.addr !1157
  %5 = icmp eq i1 %4, false, !insn.addr !1158
  br i1 %5, label %dec_label_pc_403ad7, label %dec_label_pc_403acd, !insn.addr !1158

dec_label_pc_403acd:                              ; preds = %dec_label_pc_403ac4
  %6 = add i32 %0, 16, !insn.addr !1159
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1159
  %8 = load i32, i32* %7, align 4, !insn.addr !1159
  store i32 %8, i32* @global_var_41028c, align 4, !insn.addr !1160
  br label %dec_label_pc_403afb, !insn.addr !1161

dec_label_pc_403ad7:                              ; preds = %dec_label_pc_403ac4
  %9 = load i32, i32* inttoptr (i32 -918444669 to i32*), align 4, !insn.addr !1162
  %10 = icmp eq i32 %1, %9, !insn.addr !1163
  br i1 %10, label %dec_label_pc_403afb, label %dec_label_pc_403ae3, !insn.addr !1164

dec_label_pc_403ae3:                              ; preds = %dec_label_pc_403ad7
  %11 = load i32, i32* inttoptr (i32 -1186921800 to i32*), align 8, !insn.addr !1165
  %12 = and i32 %9, -256, !insn.addr !1166
  %13 = trunc i32 %9 to i8
  %14 = add i8 %13, 1, !insn.addr !1167
  %15 = inttoptr i32 %11 to i8*, !insn.addr !1167
  %16 = load i8, i8* %15, align 1, !insn.addr !1167
  %17 = add i8 %14, %16, !insn.addr !1167
  %18 = zext i8 %17 to i32, !insn.addr !1167
  %19 = or i32 %12, %18, !insn.addr !1167
  %20 = add i32 %19, 1, !insn.addr !1168
  %21 = trunc i32 %11 to i8
  %22 = add i8 %21, 1, !insn.addr !1169
  store i8 %22, i8* @global_var_4102b8, align 1, !insn.addr !1169
  store i32 %20, i32* @global_var_4102c0, align 4, !insn.addr !1170
  br label %dec_label_pc_403afb, !insn.addr !1170

dec_label_pc_403afb:                              ; preds = %dec_label_pc_403ae3, %dec_label_pc_403ad7, %dec_label_pc_403acd
  %23 = load i32, i32* inttoptr (i32 -398392759 to i32*), align 4, !insn.addr !1171
  %24 = bitcast i32* %edi to i128*
  %25 = load i128, i128* %24, align 8, !insn.addr !1172
  %26 = call i128 @__asm_maxps(i128 %2, i128 %25), !insn.addr !1172
  %27 = inttoptr i32 %23 to i8*, !insn.addr !1173
  %28 = load i8, i8* %27, align 1, !insn.addr !1173
  %29 = trunc i32 %23 to i8, !insn.addr !1173
  %30 = add i8 %28, %29, !insn.addr !1173
  store i8 %30, i8* %27, align 1, !insn.addr !1173
  %31 = udiv i32 %23, 256, !insn.addr !1174
  %32 = mul nuw i32 %31, 231, !insn.addr !1174
  %33 = add i32 %32, %23, !insn.addr !1174
  %34 = and i32 %33, 255, !insn.addr !1174
  %35 = and i32 %23, -65536, !insn.addr !1174
  %36 = or i32 %34, %35, !insn.addr !1174
  %37 = add i32 %36, -1555826006, !insn.addr !1175
  %38 = bitcast i32* %esi to i8*
  %39 = load i8, i8* %38, align 4, !insn.addr !1176
  %40 = and i32 %37, -1280, !insn.addr !1176
  %41 = add i8 %39, 78, !insn.addr !1177
  %42 = zext i8 %41 to i32, !insn.addr !1177
  %43 = or i32 %40, %42, !insn.addr !1177
  %44 = inttoptr i32 %43 to i8*, !insn.addr !1178
  %45 = load i8, i8* %44, align 1, !insn.addr !1178
  %46 = add i8 %45, %41, !insn.addr !1178
  store i8 %46, i8* %44, align 1, !insn.addr !1178
  ret i32 %43, !insn.addr !1178
}

define i32 @function_403b27() local_unnamed_addr {
dec_label_pc_403b27:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = and i32 %4, -256, !insn.addr !1179
  %7 = and i32 %1, 255, !insn.addr !1180
  %8 = select i1 %5, i32 -1, i32 1, !insn.addr !1180
  %9 = add i32 %8, %1, !insn.addr !1180
  %10 = inttoptr i32 %9 to i8*, !insn.addr !1181
  %11 = load i8, i8* %10, align 1, !insn.addr !1181
  %12 = inttoptr i32 %0 to i8*, !insn.addr !1181
  store i8 %11, i8* %12, align 1, !insn.addr !1181
  %13 = add i32 %8, %0, !insn.addr !1181
  %14 = add i32 %9, %8, !insn.addr !1181
  %15 = or i32 %3, %7, !insn.addr !1180
  %16 = or i32 %15, %6, !insn.addr !1182
  %17 = trunc i32 %2 to i8, !insn.addr !1183
  %18 = add i32 %16, 8, !insn.addr !1183
  %19 = inttoptr i32 %18 to i8*, !insn.addr !1183
  store i8 %17, i8* %19, align 1, !insn.addr !1183
  %20 = inttoptr i32 %16 to i8*, !insn.addr !1184
  %21 = load i8, i8* %20, align 1, !insn.addr !1184
  %22 = trunc i32 %15 to i8, !insn.addr !1184
  %23 = add i8 %21, %22, !insn.addr !1184
  store i8 %23, i8* %20, align 1, !insn.addr !1184
  %24 = inttoptr i32 %14 to i8*, !insn.addr !1185
  %25 = load i8, i8* %24, align 1, !insn.addr !1185
  %26 = inttoptr i32 %13 to i8*, !insn.addr !1185
  store i8 %25, i8* %26, align 1, !insn.addr !1185
  %27 = add i32 %14, %8, !insn.addr !1185
  %28 = add i32 %16, -1, !insn.addr !1186
  %29 = inttoptr i32 %28 to i8*, !insn.addr !1187
  %30 = load i8, i8* %29, align 1, !insn.addr !1187
  %31 = trunc i32 %28 to i8, !insn.addr !1187
  %32 = or i8 %30, %31, !insn.addr !1187
  store i8 %32, i8* %29, align 1, !insn.addr !1187
  %33 = add i32 %3, 524694, !insn.addr !1188
  %34 = inttoptr i32 %33 to i8*, !insn.addr !1188
  %35 = load i8, i8* %34, align 1, !insn.addr !1188
  %36 = trunc i32 %3 to i8, !insn.addr !1188
  %37 = add i8 %35, %36, !insn.addr !1188
  store i8 %37, i8* %34, align 1, !insn.addr !1188
  %38 = add i32 %16, 6, !insn.addr !1189
  %39 = inttoptr i32 %38 to i8*, !insn.addr !1189
  %40 = load i8, i8* %39, align 1, !insn.addr !1189
  %41 = udiv i32 %2, 256, !insn.addr !1189
  %42 = trunc i32 %41 to i8, !insn.addr !1189
  %43 = add i8 %40, %42, !insn.addr !1189
  store i8 %43, i8* %39, align 1, !insn.addr !1189
  %44 = add i32 %27, 2100, !insn.addr !1190
  %45 = inttoptr i32 %44 to i32*, !insn.addr !1190
  %46 = load i32, i32* %45, align 4, !insn.addr !1190
  %47 = add nsw i32 %8, 4, !insn.addr !1185
  %48 = add i32 %47, %13, !insn.addr !1191
  %49 = inttoptr i32 %48 to i32*, !insn.addr !1191
  store i32 %46, i32* %49, align 4, !insn.addr !1191
  %50 = load i8, i8* %29, align 1, !insn.addr !1192
  %51 = add i8 %50, %31, !insn.addr !1192
  store i8 %51, i8* %29, align 1, !insn.addr !1192
  %52 = add i32 %27, 2096, !insn.addr !1193
  %53 = inttoptr i32 %52 to i32*, !insn.addr !1193
  %54 = load i32, i32* %53, align 4, !insn.addr !1193
  %55 = load i32, i32* %45, align 4, !insn.addr !1194
  %56 = icmp ult i32 %46, %54, !insn.addr !1195
  %57 = add i32 %55, 2147, !insn.addr !1196
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1196
  %59 = load i32, i32* %58, align 4, !insn.addr !1196
  %60 = mul i32 %54, 4, !insn.addr !1197
  %61 = add i32 %60, -64, !insn.addr !1197
  %62 = add i32 %61, %59, !insn.addr !1197
  %63 = inttoptr i32 %62 to i32*, !insn.addr !1197
  %64 = load i32, i32* %63, align 4, !insn.addr !1197
  %65 = zext i1 %56 to i32, !insn.addr !1197
  %66 = add i32 %64, %65, !insn.addr !1197
  %67 = icmp slt i32 %55, %66, !insn.addr !1198
  br i1 %67, label %dec_label_pc_403b74, label %dec_label_pc_403c2a, !insn.addr !1198

dec_label_pc_403b74:                              ; preds = %dec_label_pc_403b27
  ret i32 %54, !insn.addr !1199

dec_label_pc_403c2a:                              ; preds = %dec_label_pc_403b27
  %68 = load i8, i8* inttoptr (i32 1170673749 to i8*), align 1, !insn.addr !1200
  %69 = zext i8 %68 to i32, !insn.addr !1200
  ret i32 %69, !insn.addr !1200
}

define i32 @function_403c33() local_unnamed_addr {
dec_label_pc_403c33:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !1201
  %5 = inttoptr i32 %2 to i8*, !insn.addr !1201
  store i8 %4, i8* %5, align 1, !insn.addr !1201
  %6 = call i32 @unknown_644061d3(i32 %2, i32 %1), !insn.addr !1202
  %7 = add i32 %6, 4, !insn.addr !1203
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1203
  %9 = load i32, i32* %8, align 4, !insn.addr !1203
  %10 = trunc i32 %0 to i16, !insn.addr !1204
  %11 = call i8 @__asm_insb(i16 %10), !insn.addr !1204
  %12 = inttoptr i32 %0 to i8*, !insn.addr !1204
  store i8 %11, i8* %12, align 1, !insn.addr !1204
  %13 = add i32 %9, 8, !insn.addr !1205
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1205
  store i32 23040, i32* %14, align 4, !insn.addr !1205
  ret i32 %6, !insn.addr !1206
}

define i32 @function_403ca9(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_403ca9:
  %ecx.1.reg2mem = alloca i32, !insn.addr !1207
  %eax.0.reg2mem = alloca i32, !insn.addr !1207
  %ecx.0.reg2mem = alloca i32, !insn.addr !1207
  %.reg2mem = alloca i32, !insn.addr !1207
  %storemerge.reg2mem = alloca i32, !insn.addr !1207
  %edi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i64 @__decompiler_undefined_function_8()
  %7 = call i64 @__decompiler_undefined_function_8()
  %8 = call i1 @__decompiler_undefined_function_2()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %9 = add i32 %4, 184375294, !insn.addr !1207
  %10 = inttoptr i32 %9 to i8*, !insn.addr !1207
  %11 = load i8, i8* %10, align 1, !insn.addr !1207
  %12 = trunc i32 %5 to i8, !insn.addr !1207
  %13 = add i8 %11, %12, !insn.addr !1207
  store i8 %13, i8* %10, align 1, !insn.addr !1207
  %14 = bitcast i32* %edi to i8*
  %15 = load i8, i8* %14, align 4, !insn.addr !1208
  %16 = trunc i32 %4 to i8, !insn.addr !1208
  %17 = add i8 %15, %16, !insn.addr !1208
  %18 = load i32, i32* %edi, align 4, !insn.addr !1208
  %19 = inttoptr i32 %18 to i8*, !insn.addr !1208
  store i8 %17, i8* %19, align 1, !insn.addr !1208
  %20 = call i64 @__asm_paddsb(i64 %7, i64 %6), !insn.addr !1209
  %21 = load i32, i32* inttoptr (i32 1090521852 to i32*), align 4, !insn.addr !1210
  %22 = add i32 %21, -25100288, !insn.addr !1211
  %23 = and i32 %3, -256, !insn.addr !1212
  %24 = or i32 %23, 4, !insn.addr !1212
  %25 = inttoptr i32 %22 to i32*, !insn.addr !1213
  %26 = load i32, i32* %25, align 4, !insn.addr !1213
  %27 = mul i32 %26, 96240655, !insn.addr !1213
  %28 = inttoptr i32 %27 to i8*, !insn.addr !1214
  %29 = load i8, i8* %28, align 1, !insn.addr !1214
  %30 = trunc i32 %27 to i8, !insn.addr !1214
  %31 = add i8 %29, %30, !insn.addr !1214
  store i8 %31, i8* %28, align 1, !insn.addr !1214
  %32 = add i32 %1, -1, !insn.addr !1215
  %33 = icmp eq i32 %32, 0, !insn.addr !1215
  %34 = icmp eq i1 %33, false, !insn.addr !1216
  br i1 %34, label %dec_label_pc_403d61, label %dec_label_pc_403ce4, !insn.addr !1216

dec_label_pc_403ce4:                              ; preds = %dec_label_pc_403ca9
  %35 = add i32 %4, -83973758, !insn.addr !1217
  %36 = icmp eq i32 %35, 0, !insn.addr !1217
  %37 = inttoptr i32 %4 to i32*, !insn.addr !1217
  store i32 %35, i32* %37, align 4, !insn.addr !1217
  %38 = icmp eq i1 %36, false, !insn.addr !1218
  br i1 %38, label %dec_label_pc_403d09, label %dec_label_pc_403cec, !insn.addr !1218

dec_label_pc_403cec:                              ; preds = %dec_label_pc_403ce4
  %39 = add i32 %0, 87, !insn.addr !1219
  %40 = inttoptr i32 %39 to i32*, !insn.addr !1219
  %41 = load i32, i32* %40, align 4, !insn.addr !1219
  %42 = add i32 %1, 65, !insn.addr !1220
  %43 = inttoptr i32 %42 to i8*, !insn.addr !1220
  %44 = load i8, i8* %43, align 1, !insn.addr !1220
  %45 = udiv i32 %27, 256
  %46 = trunc i32 %45 to i8, !insn.addr !1220
  %47 = add i8 %44, %46, !insn.addr !1220
  store i8 %47, i8* %43, align 1, !insn.addr !1220
  store i32 %41, i32* inttoptr (i32 4298932 to i32*), align 4, !insn.addr !1221
  %48 = call i32 @function_403a90(), !insn.addr !1222
  %49 = inttoptr i32 %24 to i32*, !insn.addr !1223
  %50 = load i32, i32* %49, align 4, !insn.addr !1223
  %51 = and i32 %50, 37, !insn.addr !1223
  store i32 %51, i32* %49, align 4, !insn.addr !1223
  ret i32 %48, !insn.addr !1224

dec_label_pc_403d09:                              ; preds = %dec_label_pc_403ce4
  %52 = load i32, i32* %edi, align 4, !insn.addr !1225
  %53 = icmp eq i32 %0, %52, !insn.addr !1225
  br i1 %53, label %dec_label_pc_403d8c, label %dec_label_pc_403d0d, !insn.addr !1226

dec_label_pc_403d0d:                              ; preds = %dec_label_pc_403d09
  %54 = load i32, i32* inttoptr (i32 1849754312 to i32*), align 8, !insn.addr !1227
  %55 = load i32, i32* @global_var_41025c, align 4, !insn.addr !1228
  %56 = add i32 %54, 1, !insn.addr !1229
  %57 = icmp eq i32 %55, %52, !insn.addr !1230
  store i32 %56, i32* inttoptr (i32 8782369 to i32*), align 4, !insn.addr !1231
  br i1 %57, label %dec_label_pc_403d7b, label %dec_label_pc_403d23, !insn.addr !1232

dec_label_pc_403d23:                              ; preds = %dec_label_pc_403d0d
  %58 = load i32, i32* inttoptr (i32 1311416 to i32*), align 8, !insn.addr !1233
  %59 = trunc i32 %58 to i8
  %60 = add i8 %59, 1, !insn.addr !1234
  store i8 %60, i8* @global_var_4102b8, align 1, !insn.addr !1234
  %61 = call i32 @unknown_3f4e90(), !insn.addr !1235
  %62 = load i32, i32* inttoptr (i32 4278314 to i32*), align 4, !insn.addr !1236
  %63 = trunc i32 %62 to i8, !insn.addr !1237
  %64 = and i8 %63, 14, !insn.addr !1237
  %65 = icmp ugt i8 %64, 9, !insn.addr !1237
  %66 = icmp ugt i8 %63, -103
  br i1 %65, label %67, label %72, !insn.addr !1237

; <label>:67:                                     ; preds = %dec_label_pc_403d23
  %.v = select i1 %66, i32 102, i32 6
  %68 = add i32 %.v, %62, !insn.addr !1237
  %69 = and i32 %68, 255, !insn.addr !1237
  %70 = and i32 %62, -256, !insn.addr !1237
  %71 = or i32 %69, %70, !insn.addr !1237
  store i32 %71, i32* %storemerge.reg2mem, !insn.addr !1237
  br label %78, !insn.addr !1237

; <label>:72:                                     ; preds = %dec_label_pc_403d23
  %73 = add i32 %62, 96, !insn.addr !1237
  %74 = select i1 %66, i32 %73, i32 %62, !insn.addr !1237
  %75 = and i32 %74, 255, !insn.addr !1237
  %76 = and i32 %62, -256, !insn.addr !1237
  %77 = or i32 %75, %76, !insn.addr !1237
  store i32 %77, i32* %storemerge.reg2mem, !insn.addr !1237
  br label %78, !insn.addr !1237

; <label>:78:                                     ; preds = %67, %72
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %79 = and i32 %storemerge.reload, 92834831, !insn.addr !1238
  %80 = add i32 %54, 1519750487, !insn.addr !1239
  %81 = inttoptr i32 %80 to i8*, !insn.addr !1239
  %82 = load i8, i8* %81, align 1, !insn.addr !1239
  %83 = udiv i32 %79, 256, !insn.addr !1239
  %84 = trunc i32 %83 to i8, !insn.addr !1239
  %85 = add i8 %82, %84, !insn.addr !1239
  store i8 %85, i8* %81, align 1, !insn.addr !1239
  ret i32 %79, !insn.addr !1240

dec_label_pc_403d61:                              ; preds = %dec_label_pc_403ca9
  %86 = add i32 %24, -1402435136, !insn.addr !1241
  %87 = inttoptr i32 %86 to i8*, !insn.addr !1241
  %88 = load i8, i8* %87, align 4, !insn.addr !1241
  %89 = add i8 %88, %30, !insn.addr !1241
  store i8 %89, i8* %87, align 4, !insn.addr !1241
  %90 = udiv i8 %30, 64, !insn.addr !1242
  %91 = urem i8 %30, 64, !insn.addr !1242
  %92 = zext i8 %91 to i32, !insn.addr !1242
  %93 = and i32 %27, -65536, !insn.addr !1242
  %94 = or i32 %93, %92, !insn.addr !1242
  %95 = zext i8 %90 to i32, !insn.addr !1242
  %96 = mul i32 %95, 256, !insn.addr !1242
  %97 = or i32 %94, %96, !insn.addr !1242
  %98 = inttoptr i32 %97 to %_IO_FILE*, !insn.addr !1243
  %99 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %98, i8* bitcast (i32* @0 to i8*)), !insn.addr !1244
  ret i32 %99, !insn.addr !1245

dec_label_pc_403d7b:                              ; preds = %dec_label_pc_403d0d
  %100 = mul i32 %32, 8, !insn.addr !1246
  %101 = add i32 %56, %100, !insn.addr !1246
  %102 = inttoptr i32 %101 to i32*, !insn.addr !1246
  %103 = load i32, i32* %102, align 4, !insn.addr !1246
  %104 = udiv i32 %103, 512, !insn.addr !1246
  %105 = mul i32 %103, 8388608, !insn.addr !1246
  %106 = or i32 %104, %105, !insn.addr !1246
  store i32 %106, i32* %102, align 4, !insn.addr !1246
  %107 = udiv i32 %52, 256, !insn.addr !1247
  %108 = trunc i32 %107 to i8, !insn.addr !1247
  %109 = sdiv i8 %108, 8, !insn.addr !1247
  %110 = zext i8 %109 to i32, !insn.addr !1247
  %111 = mul i32 %110, 256, !insn.addr !1247
  %112 = and i32 %52, -65281, !insn.addr !1247
  %113 = or i32 %111, %112, !insn.addr !1247
  ret i32 %113, !insn.addr !1248

dec_label_pc_403d8c:                              ; preds = %dec_label_pc_403d09
  %114 = load i32, i32* @global_var_410290, align 4, !insn.addr !1249
  %115 = load i8, i8* inttoptr (i32 13173396 to i8*), align 4, !insn.addr !1250
  %116 = or i8 %115, -16, !insn.addr !1250
  store i8 %116, i8* inttoptr (i32 13173396 to i8*), align 4, !insn.addr !1250
  %117 = add i32 %114, %4, !insn.addr !1251
  %118 = icmp ult i32 %117, %114, !insn.addr !1251
  %119 = zext i1 %118 to i32, !insn.addr !1252
  %120 = add i32 %0, -751094544, !insn.addr !1252
  %121 = add i32 %120, %119, !insn.addr !1252
  store i32 %117, i32* inttoptr (i32 -398392688 to i32*), align 16, !insn.addr !1253
  store i32 %121, i32* @global_var_410294, align 4, !insn.addr !1254
  %122 = add i32 %0, 12, !insn.addr !1255
  %123 = inttoptr i32 %122 to i32*, !insn.addr !1255
  %124 = load i32, i32* %123, align 4, !insn.addr !1255
  %125 = icmp eq i32 %121, %2, !insn.addr !1256
  %126 = icmp eq i1 %125, false, !insn.addr !1257
  br i1 %126, label %dec_label_pc_403dc3, label %dec_label_pc_403daf, !insn.addr !1257

dec_label_pc_403daf:                              ; preds = %dec_label_pc_403d8c
  %127 = call i32 @unknown_6d6a00(), !insn.addr !1258
  %128 = add i32 %124, 119, !insn.addr !1259
  %129 = inttoptr i32 %128 to i32*, !insn.addr !1259
  %130 = load i32, i32* %129, align 4, !insn.addr !1259
  %131 = add i32 %24, 2120, !insn.addr !1260
  %132 = inttoptr i32 %131 to i32*, !insn.addr !1260
  store i32 %127, i32* %132, align 4, !insn.addr !1260
  %133 = add i32 %24, 2124, !insn.addr !1261
  %134 = inttoptr i32 %133 to i32*, !insn.addr !1261
  store i32 %121, i32* %134, align 16, !insn.addr !1261
  %.pre = load i32, i32* %edi, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !1261
  store i32 %130, i32* %ecx.0.reg2mem, !insn.addr !1261
  br label %dec_label_pc_403dc3, !insn.addr !1261

dec_label_pc_403dc3:                              ; preds = %dec_label_pc_403daf, %dec_label_pc_403d8c
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !1262
  %135 = add nsw i32 %24, 12, !insn.addr !1263
  %136 = inttoptr i32 %135 to i32*, !insn.addr !1263
  %137 = load i32, i32* %136, align 16, !insn.addr !1263
  %138 = add i32 %24, 8521768, !insn.addr !1264
  %139 = inttoptr i32 %138 to i32*, !insn.addr !1264
  %140 = load i32, i32* %139, align 4, !insn.addr !1264
  %141 = add i32 %137, %ecx.0.reload, !insn.addr !1265
  %142 = icmp eq i32 %140, %.reload, !insn.addr !1262
  store i32 %141, i32* %136, align 16, !insn.addr !1266
  %143 = icmp eq i1 %142, false, !insn.addr !1267
  br i1 %143, label %144, label %dec_label_pc_403dd9, !insn.addr !1267

; <label>:144:                                    ; preds = %dec_label_pc_403dc3
  %145 = call i32 @function_464099(), !insn.addr !1267
  br label %dec_label_pc_403dd9, !insn.addr !1267

dec_label_pc_403dd9:                              ; preds = %144, %dec_label_pc_403dc3
  %146 = add i32 %124, -1761605612, !insn.addr !1268
  %147 = inttoptr i32 %146 to i32*, !insn.addr !1268
  %148 = load i32, i32* %147, align 4, !insn.addr !1268
  %149 = sub i32 2047, %117, !insn.addr !1269
  %150 = add i32 %148, 40, !insn.addr !1270
  %151 = inttoptr i32 %150 to i32*, !insn.addr !1270
  store i32 4, i32* %151, align 4, !insn.addr !1270
  %152 = add i32 %148, 21, !insn.addr !1271
  %153 = inttoptr i32 %152 to i32*, !insn.addr !1271
  store i32 %149, i32* %153, align 4, !insn.addr !1271
  store i32 %149, i32* inttoptr (i32 -1812335539 to i32*), align 4, !insn.addr !1272
  %154 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !1273
  %155 = load i8, i8* %154, align 1, !insn.addr !1273
  %156 = trunc i32 %141 to i8, !insn.addr !1273
  %157 = and i8 %155, %156, !insn.addr !1273
  store i8 %157, i8* %154, align 1, !insn.addr !1273
  %158 = inttoptr i32 %149 to i8*, !insn.addr !1274
  %159 = load i8, i8* %158, align 1, !insn.addr !1274
  %160 = trunc i32 %149 to i8, !insn.addr !1274
  %161 = add i8 %159, %160, !insn.addr !1274
  %162 = and i8 %159, 15, !insn.addr !1274
  %163 = and i8 %160, 15, !insn.addr !1274
  %164 = add nuw nsw i8 %162, %163, !insn.addr !1274
  %165 = icmp ugt i8 %164, 15, !insn.addr !1274
  store i8 %161, i8* %158, align 1, !insn.addr !1274
  %166 = and i32 %149, 14
  %167 = icmp ugt i32 %166, 9, !insn.addr !1275
  %168 = or i1 %167, %165, !insn.addr !1275
  %169 = add i32 %149, 6, !insn.addr !1275
  %170 = select i1 %168, i32 %169, i32 %149, !insn.addr !1275
  %171 = zext i1 %168 to i32, !insn.addr !1275
  %172 = and i32 %170, 15, !insn.addr !1275
  %173 = and i32 %149, -65536, !insn.addr !1275
  %174 = or i32 %172, %173, !insn.addr !1275
  %175 = mul i32 %171, 256
  %176 = add i32 %175, %149
  %177 = and i32 %176, 65280, !insn.addr !1275
  %178 = or i32 %174, %177, !insn.addr !1275
  %179 = udiv i32 %3, 256, !insn.addr !1276
  %180 = trunc i32 %179 to i8, !insn.addr !1276
  %181 = or i32 %23, 36, !insn.addr !1276
  %182 = add i32 %141, %181, !insn.addr !1276
  %183 = inttoptr i32 %182 to i8*, !insn.addr !1276
  store i8 %180, i8* %183, align 1, !insn.addr !1276
  %184 = load i32, i32* %edi, align 4
  %185 = mul i32 %184, 4, !insn.addr !1277
  %186 = inttoptr i32 %184 to i32*, !insn.addr !1277
  store i32 %185, i32* %186, align 4, !insn.addr !1277
  %187 = inttoptr i32 %117 to i8*, !insn.addr !1278
  %188 = load i32, i32* %edi, align 4, !insn.addr !1278
  %189 = inttoptr i32 %188 to i8*, !insn.addr !1278
  call void @__asm_rep_movsd_memcpy(i8* %189, i8* %187, i32 %149), !insn.addr !1278
  %190 = select i1 %8, i32 -4, i32 4, !insn.addr !1278
  %191 = mul i32 %149, %190, !insn.addr !1278
  %192 = add i32 %188, %191, !insn.addr !1278
  %193 = add i32 %148, -13, !insn.addr !1279
  %194 = inttoptr i32 %193 to i32*, !insn.addr !1279
  %195 = load i32, i32* %194, align 4, !insn.addr !1279
  %196 = sub i32 %178, %195, !insn.addr !1280
  %197 = trunc i32 %196 to i8, !insn.addr !1281
  %198 = icmp ugt i8 %197, -93
  %199 = icmp ult i8 %197, -92
  %200 = add i32 %196, 92
  %201 = select i1 %199, i32 %196, i32 %200, !insn.addr !1281
  %202 = and i32 %201, 255, !insn.addr !1281
  %203 = and i32 %196, -65536, !insn.addr !1281
  %204 = or i32 %202, %203, !insn.addr !1281
  %205 = zext i1 %198 to i32, !insn.addr !1281
  %206 = mul i32 %205, 256, !insn.addr !1281
  %207 = or i32 %204, %206, !insn.addr !1281
  %208 = add i32 %148, 71, !insn.addr !1282
  %209 = inttoptr i32 %208 to i32*, !insn.addr !1282
  store i32 %207, i32* %209, align 4, !insn.addr !1282
  %210 = mul i32 %192, 2, !insn.addr !1283
  store i32 %210, i32* inttoptr (i32 -1509908672 to i32*), align 64, !insn.addr !1284
  %211 = add i32 %210, -1509926592, !insn.addr !1285
  %212 = inttoptr i32 %211 to i8*, !insn.addr !1285
  store i8 0, i8* %212, align 2, !insn.addr !1285
  %213 = load i32, i32* inttoptr (i32 4296792 to i32*), align 8, !insn.addr !1286
  %factor = mul i32 %195, 2
  %214 = add i32 %factor, -115, !insn.addr !1287
  %215 = inttoptr i32 %214 to i8*, !insn.addr !1287
  %216 = load i8, i8* %215, align 1, !insn.addr !1287
  %217 = add i8 %216, 89, !insn.addr !1287
  %218 = zext i8 %217 to i32, !insn.addr !1287
  %219 = mul i32 %218, 256, !insn.addr !1287
  %220 = or i32 %219, -1509949408, !insn.addr !1287
  %221 = add nsw i32 %220, 33, !insn.addr !1288
  %222 = call i32 @unknown_3bc98d47(i32 %221, i32 10742003, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @global_var_40e8f0, i32 0, i32 0)), !insn.addr !1289
  %223 = add i32 %148, -9, !insn.addr !1290
  %224 = inttoptr i32 %223 to i32*, !insn.addr !1290
  store i32 %222, i32* %224, align 4, !insn.addr !1290
  %225 = add i32 %222, -76, !insn.addr !1291
  %226 = inttoptr i32 %225 to i8*, !insn.addr !1291
  %227 = load i8, i8* %226, align 1, !insn.addr !1291
  %228 = udiv i32 %213, 256, !insn.addr !1291
  %229 = trunc i32 %228 to i8, !insn.addr !1291
  %230 = add i8 %227, %229, !insn.addr !1291
  store i8 %230, i8* %226, align 1, !insn.addr !1291
  %231 = icmp slt i32* %stack_var_0, inttoptr (i32 1 to i32*), !insn.addr !1292
  br i1 %231, label %dec_label_pc_403ec0, label %dec_label_pc_403e7b, !insn.addr !1292

dec_label_pc_403e7b:                              ; preds = %dec_label_pc_403dd9
  %232 = icmp eq i32 %222, 0, !insn.addr !1293
  %233 = add i32 %148, -17, !insn.addr !1294
  %234 = inttoptr i32 %233 to i32*, !insn.addr !1294
  store i32 38146, i32* %234, align 4, !insn.addr !1294
  %235 = icmp eq i1 %232, false, !insn.addr !1295
  store i32 %222, i32* %eax.0.reg2mem, !insn.addr !1295
  store i32 %213, i32* %ecx.1.reg2mem, !insn.addr !1295
  br i1 %235, label %dec_label_pc_403e8e, label %dec_label_pc_403e87, !insn.addr !1295

dec_label_pc_403e87:                              ; preds = %dec_label_pc_403e7b
  %236 = add i32 %148, -1, !insn.addr !1296
  %237 = trunc i32 %195 to i16, !insn.addr !1297
  %238 = call i8 @__asm_in.4(i16 %237), !insn.addr !1297
  %239 = sext i8 %238 to i32, !insn.addr !1297
  %240 = and i32 %222, -256, !insn.addr !1297
  %241 = or i32 %240, %239, !insn.addr !1297
  %242 = inttoptr i32 %236 to i32*, !insn.addr !1298
  store i32 %241, i32* %242, align 4, !insn.addr !1298
  %243 = udiv i32 %213, 32
  %244 = and i32 %243, 1792, !insn.addr !1299
  %245 = and i32 %213, -65281, !insn.addr !1299
  %246 = or i32 %244, %245, !insn.addr !1299
  store i32 %241, i32* %eax.0.reg2mem, !insn.addr !1299
  store i32 %246, i32* %ecx.1.reg2mem, !insn.addr !1299
  br label %dec_label_pc_403e8e, !insn.addr !1299

dec_label_pc_403e8e:                              ; preds = %dec_label_pc_403e87, %dec_label_pc_403e7b
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %247 = add i32 %eax.0.reload, -1593835447, !insn.addr !1300
  %248 = mul i32 %247, 256
  %249 = add i32 %248, %ecx.1.reload
  %250 = and i32 %249, 65280, !insn.addr !1301
  %251 = and i32 %ecx.1.reload, -65281, !insn.addr !1301
  %252 = or i32 %250, %251, !insn.addr !1301
  %253 = add i32 %148, -2, !insn.addr !1302
  %254 = add i32 %252, -1, !insn.addr !1303
  %255 = icmp eq i32 %254, 0, !insn.addr !1303
  br i1 %255, label %dec_label_pc_403ea1, label %dec_label_pc_403ea2, !insn.addr !1303

dec_label_pc_403ea1:                              ; preds = %dec_label_pc_403e8e
  ret i32 %253, !insn.addr !1303

dec_label_pc_403ea2:                              ; preds = %dec_label_pc_403e8e
  %256 = and i32 %247, -256, !insn.addr !1304
  %257 = add i32 %eax.0.reload, 214, !insn.addr !1304
  %258 = and i32 %257, 255, !insn.addr !1304
  %259 = or i32 %256, %258, !insn.addr !1304
  %260 = inttoptr i32 %253 to i8*, !insn.addr !1305
  %261 = load i8, i8* %260, align 1, !insn.addr !1305
  %262 = trunc i32 %253 to i8, !insn.addr !1305
  %263 = add i8 %261, %262, !insn.addr !1305
  store i8 %263, i8* %260, align 1, !insn.addr !1305
  %264 = add i32 %259, -62, !insn.addr !1306
  %265 = inttoptr i32 %264 to i32*, !insn.addr !1306
  store i32 %254, i32* %265, align 4, !insn.addr !1306
  ret i32 %253, !insn.addr !1307

dec_label_pc_403ec0:                              ; preds = %dec_label_pc_403dd9
  %266 = inttoptr i32 %195 to i8*, !insn.addr !1308
  %267 = load i8, i8* %266, align 1, !insn.addr !1308
  %268 = add i8 %267, -123, !insn.addr !1308
  %269 = mul i8 %268, 2, !insn.addr !1309
  %270 = lshr i8 %268, 7, !insn.addr !1309
  %271 = or i8 %270, %269, !insn.addr !1309
  store i8 %271, i8* %266, align 1, !insn.addr !1309
  ret i32 %222, !insn.addr !1310
}

define i32 @function_403ee8() local_unnamed_addr {
dec_label_pc_403ee8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1311
}

define i32 @function_403eec() local_unnamed_addr {
dec_label_pc_403eec:
  %0 = call i32 @function_4040bb(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1312
  ret i32 %0, !insn.addr !1312
}

define i32 @function_403ef3() local_unnamed_addr {
dec_label_pc_403ef3:
  %0 = load i32, i32* @global_var_4102b4, align 4, !insn.addr !1313
  ret i32 %0, !insn.addr !1314
}

define i32 @function_403efb() local_unnamed_addr {
dec_label_pc_403efb:
  %eax.2.reg2mem = alloca i32, !insn.addr !1315
  %eax.1.reg2mem = alloca i32, !insn.addr !1315
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !1315
  %edx.1.reg2mem = alloca i32, !insn.addr !1315
  %edx.0.reg2mem = alloca i32, !insn.addr !1315
  %ecx.0.reg2mem = alloca i32, !insn.addr !1315
  %eax.0.reg2mem = alloca i32, !insn.addr !1315
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i128 @__decompiler_undefined_function_9()
  %stack_var_33 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %7 = mul i32 %5, 4, !insn.addr !1316
  %8 = add i32 %2, -60, !insn.addr !1316
  %9 = add i32 %8, %7, !insn.addr !1316
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1316
  %11 = load i32, i32* %10, align 4, !insn.addr !1316
  store i32 %11, i32* %stack_var_-12, align 4, !insn.addr !1316
  %12 = add i32 %3, 2075333600, !insn.addr !1317
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1317
  %14 = load i8, i8* %13, align 1, !insn.addr !1317
  %15 = udiv i32 %2, 256, !insn.addr !1317
  %16 = trunc i32 %15 to i8, !insn.addr !1317
  %17 = or i8 %14, %16, !insn.addr !1317
  store i8 %17, i8* %13, align 1, !insn.addr !1317
  %18 = icmp eq i32 %5, 0, !insn.addr !1318
  store i32* %stack_var_-12, i32** %esp.0.in.reg2mem, !insn.addr !1319
  br i1 %18, label %dec_label_pc_403f3d, label %dec_label_pc_403f10, !insn.addr !1319

dec_label_pc_403f10:                              ; preds = %dec_label_pc_403efb
  %19 = add i32 %5, 8, !insn.addr !1320
  %20 = inttoptr i32 %19 to i8*, !insn.addr !1320
  %21 = load i8, i8* %20, align 1, !insn.addr !1320
  %22 = zext i8 %21 to i32, !insn.addr !1320
  %23 = and i32 %4, -256, !insn.addr !1320
  %24 = or i32 %23, %22, !insn.addr !1320
  %25 = add i32 %3, -53, !insn.addr !1321
  %26 = inttoptr i32 %25 to i32*, !insn.addr !1321
  %27 = load i32, i32* %26, align 4, !insn.addr !1321
  %28 = xor i32 %27, -128, !insn.addr !1321
  store i32 %28, i32* %26, align 4, !insn.addr !1321
  %29 = and i32 %3, 65280
  %30 = and i32 %29, %5, !insn.addr !1322
  %31 = and i32 %3, -65281, !insn.addr !1322
  %32 = or i32 %30, %31, !insn.addr !1322
  store i32 %24, i32* %ecx.0.reg2mem, !insn.addr !1322
  store i32 %32, i32* %edx.0.reg2mem, !insn.addr !1322
  br label %dec_label_pc_403f1a, !insn.addr !1322

dec_label_pc_403f1a:                              ; preds = %dec_label_pc_403f8e, %dec_label_pc_403f10
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %33 = add i32 %eax.0.reload, 120, !insn.addr !1323
  %34 = and i32 %33, 255, !insn.addr !1323
  %35 = and i32 %eax.0.reload, -256, !insn.addr !1323
  %36 = or i32 %34, %35, !insn.addr !1323
  %37 = trunc i32 %ecx.0.reload to i8, !insn.addr !1324
  %38 = add i32 %edx.0.reload, 1078067528, !insn.addr !1324
  %39 = inttoptr i32 %38 to i8*, !insn.addr !1324
  %40 = load i8, i8* %39, align 1, !insn.addr !1324
  %41 = or i8 %40, %37, !insn.addr !1324
  %42 = zext i8 %41 to i32, !insn.addr !1324
  %43 = and i32 %ecx.0.reload, -256, !insn.addr !1324
  %44 = or i32 %43, %42, !insn.addr !1324
  %45 = add i32 %edx.0.reload, -1, !insn.addr !1325
  %46 = icmp sgt i32 %edx.0.reload, 1, !insn.addr !1326
  br i1 %46, label %dec_label_pc_403f8e, label %dec_label_pc_403f27, !insn.addr !1326

dec_label_pc_403f27:                              ; preds = %dec_label_pc_403f1a
  %47 = inttoptr i32 %45 to i8*, !insn.addr !1327
  store i8 31, i8* %47, align 1, !insn.addr !1327
  %48 = icmp eq i32 %36, 0, !insn.addr !1328
  store i32 %36, i32* %edx.1.reg2mem, !insn.addr !1329
  store i32* %stack_var_33, i32** %esp.0.in.reg2mem, !insn.addr !1329
  br i1 %48, label %dec_label_pc_403f71, label %dec_label_pc_403f3d, !insn.addr !1329

dec_label_pc_403f3d:                              ; preds = %dec_label_pc_403f27, %dec_label_pc_403efb
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %49 = trunc i32 %0 to i16, !insn.addr !1330
  %50 = call i16 @__asm_arpl.5(i16 %49), !insn.addr !1330
  %51 = load i32, i32* inttoptr (i32 -126 to i32*), align 4, !insn.addr !1331
  %52 = udiv i32 %51, 2, !insn.addr !1331
  %53 = shl i32 %51, 31, !insn.addr !1331
  %54 = or i32 %52, %53, !insn.addr !1331
  store i32 %54, i32* inttoptr (i32 -126 to i32*), align 4, !insn.addr !1331
  %55 = add i32 %0, 6913, !insn.addr !1332
  %56 = inttoptr i32 %55 to i8*, !insn.addr !1332
  %57 = load i8, i8* %56, align 1, !insn.addr !1332
  %58 = add i8 %57, -1, !insn.addr !1332
  %59 = icmp eq i8 %57, 0, !insn.addr !1332
  store i8 %58, i8* %56, align 1, !insn.addr !1332
  store i8 0, i8* inttoptr (i32 -1 to i8*), align 1, !insn.addr !1333
  %60 = load i32, i32* inttoptr (i32 5085800 to i32*), align 8, !insn.addr !1334
  %61 = select i1 %59, i32 0, i32 255, !insn.addr !1335
  %62 = and i32 %60, -256, !insn.addr !1335
  %63 = or i32 %62, %61, !insn.addr !1335
  %64 = inttoptr i32 %63 to i8*, !insn.addr !1336
  %65 = load i8, i8* %64, align 1, !insn.addr !1336
  %66 = trunc i32 %61 to i8, !insn.addr !1336
  %67 = add i8 %65, %66, !insn.addr !1336
  store i8 %67, i8* %64, align 1, !insn.addr !1336
  %68 = sub i32 %2, %63, !insn.addr !1337
  %69 = call i32 @unknown_ffae400e(), !insn.addr !1338
  %70 = and i32 %69, 255, !insn.addr !1339
  %71 = add i32 %70, %68, !insn.addr !1339
  %72 = inttoptr i32 %71 to i8*, !insn.addr !1339
  %73 = load i8, i8* %72, align 1, !insn.addr !1339
  %74 = zext i8 %73 to i32, !insn.addr !1339
  %75 = and i32 %69, -256, !insn.addr !1339
  %76 = or i32 %75, %74, !insn.addr !1339
  %77 = add i32 %76, -24, !insn.addr !1340
  %78 = inttoptr i32 %77 to i128*, !insn.addr !1340
  %79 = load i128, i128* %78, align 4, !insn.addr !1340
  %80 = call i128 @__asm_minps(i128 %6, i128 %79), !insn.addr !1340
  %81 = add i32 %76, 1, !insn.addr !1341
  %82 = add i32 %0, -1, !insn.addr !1342
  %83 = inttoptr i32 %82 to i8*, !insn.addr !1342
  %84 = load i8, i8* %83, align 1, !insn.addr !1342
  %85 = trunc i32 %edx.1.reload to i8, !insn.addr !1342
  %86 = add i8 %84, %85, !insn.addr !1342
  store i8 %86, i8* %83, align 1, !insn.addr !1342
  %87 = and i32 %81, 255, !insn.addr !1343
  %88 = add i32 %87, %68, !insn.addr !1343
  %89 = inttoptr i32 %88 to i8*, !insn.addr !1343
  %90 = load i8, i8* %89, align 1, !insn.addr !1343
  %91 = zext i8 %90 to i32, !insn.addr !1343
  %92 = and i32 %81, -256, !insn.addr !1343
  %93 = or i32 %92, %91, !insn.addr !1343
  %94 = inttoptr i32 %edx.1.reload to i32*, !insn.addr !1344
  %95 = load i32, i32* %94, align 4, !insn.addr !1344
  %96 = or i32 %95, 8, !insn.addr !1344
  store i32 %96, i32* %94, align 4, !insn.addr !1344
  %97 = add i32 %93, -92, !insn.addr !1345
  %98 = inttoptr i32 %97 to i64*, !insn.addr !1345
  %99 = load i64, i64* %98, align 4, !insn.addr !1345
  %100 = call i32 @__asm_bound(i64 %99), !insn.addr !1345
  %101 = call i32 @unknown_abc3c(), !insn.addr !1346
  %102 = and i32 %101, 255, !insn.addr !1347
  %103 = add i32 %102, %68, !insn.addr !1347
  %104 = inttoptr i32 %103 to i8*, !insn.addr !1347
  %105 = load i8, i8* %104, align 1, !insn.addr !1347
  %106 = zext i8 %105 to i32, !insn.addr !1347
  %107 = and i32 %101, -256, !insn.addr !1347
  %108 = or i32 %107, %106, !insn.addr !1347
  %109 = icmp eq i32 %108, 0, !insn.addr !1348
  %110 = icmp eq i1 %109, false, !insn.addr !1349
  store i32 %108, i32* %eax.2.reg2mem, !insn.addr !1349
  br i1 %110, label %dec_label_pc_40401b, label %dec_label_pc_404006, !insn.addr !1349

dec_label_pc_403f71:                              ; preds = %dec_label_pc_403f27
  %111 = call i32 @__asm_int1(), !insn.addr !1350
  %112 = or i32 %111, ptrtoint ([4 x i8]* @global_var_40e8d4 to i32), !insn.addr !1351
  call void @__asm_out.1(i32 8, i32 %112), !insn.addr !1352
  %113 = call i8 @__asm_in.4(i16 0), !insn.addr !1353
  %114 = sext i8 %113 to i32, !insn.addr !1353
  %115 = or i32 %112, %114, !insn.addr !1353
  %116 = udiv i32 %ecx.0.reload, 256, !insn.addr !1354
  %117 = trunc i32 %116 to i8, !insn.addr !1354
  %118 = add i32 %44, 88, !insn.addr !1354
  %119 = inttoptr i32 %118 to i8*, !insn.addr !1354
  %120 = load i8, i8* %119, align 1, !insn.addr !1354
  %121 = xor i8 %120, %117, !insn.addr !1354
  %122 = zext i8 %121 to i32, !insn.addr !1354
  %123 = mul i32 %122, 256, !insn.addr !1354
  %124 = and i32 %44, -65281, !insn.addr !1354
  %125 = or i32 %123, %124, !insn.addr !1354
  %126 = inttoptr i32 %125 to i8*, !insn.addr !1355
  %127 = load i8, i8* %126, align 1, !insn.addr !1355
  %128 = add i8 %127, %113, !insn.addr !1355
  %129 = zext i8 %128 to i32, !insn.addr !1355
  %130 = and i32 %115, -256, !insn.addr !1355
  %131 = or i32 %130, %129, !insn.addr !1355
  ret i32 %131, !insn.addr !1356

dec_label_pc_403f8e:                              ; preds = %dec_label_pc_403f1a
  %132 = sub i32 0, %edx.0.reload
  %133 = and i32 %edx.0.reload, %132, !insn.addr !1325
  %134 = icmp slt i32 %133, 0, !insn.addr !1325
  store i32 %36, i32* %eax.0.reg2mem, !insn.addr !1357
  store i32 %44, i32* %ecx.0.reg2mem, !insn.addr !1357
  store i32 %45, i32* %edx.0.reg2mem, !insn.addr !1357
  br i1 %134, label %dec_label_pc_403f1a, label %dec_label_pc_403f91, !insn.addr !1357

dec_label_pc_403f91:                              ; preds = %dec_label_pc_403f8e
  %135 = trunc i32 %33 to i8
  %136 = add i8 %135, -48, !insn.addr !1358
  %137 = inttoptr i32 %44 to i8*, !insn.addr !1358
  %138 = load i8, i8* %137, align 1, !insn.addr !1358
  %139 = add i8 %138, %136, !insn.addr !1358
  %140 = xor i8 %139, %136, !insn.addr !1358
  %141 = xor i8 %139, %138, !insn.addr !1358
  %142 = and i8 %140, %141, !insn.addr !1358
  %143 = icmp slt i8 %142, 0, !insn.addr !1358
  %144 = icmp slt i8 %139, 0, !insn.addr !1358
  %145 = zext i8 %139 to i32, !insn.addr !1358
  %146 = or i32 %35, %145, !insn.addr !1358
  %147 = icmp eq i1 %144, %143, !insn.addr !1359
  store i32 %146, i32* %eax.1.reg2mem, !insn.addr !1359
  br i1 %147, label %dec_label_pc_403f98, label %dec_label_pc_403fba, !insn.addr !1359

dec_label_pc_403f98:                              ; preds = %dec_label_pc_403f91
  %148 = add i32 %1, 8, !insn.addr !1360
  %149 = call i32 @unknown_cb000000(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @global_var_40e8ac, i32 0, i32 0), i32 %148), !insn.addr !1361
  store i32 %149, i32* %eax.1.reg2mem, !insn.addr !1362
  br label %dec_label_pc_403fba, !insn.addr !1362

dec_label_pc_403fba:                              ; preds = %dec_label_pc_403f91, %dec_label_pc_403f98
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %150 = trunc i32 %eax.1.reload to i8, !insn.addr !1363
  %151 = sdiv i8 %150, 2, !insn.addr !1363
  %152 = zext i8 %151 to i32, !insn.addr !1363
  %153 = and i32 %eax.1.reload, -256, !insn.addr !1363
  %154 = or i32 %153, %152, !insn.addr !1363
  ret i32 %154, !insn.addr !1363

dec_label_pc_404006:                              ; preds = %dec_label_pc_403f3d
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %155 = add i32 %esp.0, 12, !insn.addr !1364
  %156 = inttoptr i32 %155 to i32*, !insn.addr !1364
  store i32 4238424, i32* %156, align 4, !insn.addr !1364
  %157 = add i32 %esp.0, 8, !insn.addr !1365
  %158 = inttoptr i32 %157 to i32*, !insn.addr !1365
  %159 = mul i32 %108, 2, !insn.addr !1366
  %160 = inttoptr i32 %159 to i32*, !insn.addr !1366
  %161 = load i32, i32* %160, align 4, !insn.addr !1366
  %162 = add i32 %esp.0, 4, !insn.addr !1366
  %163 = inttoptr i32 %162 to i32*, !insn.addr !1366
  store i32 %161, i32* %163, align 4, !insn.addr !1366
  %164 = add i32 %108, 1, !insn.addr !1367
  store i32 %164, i32* %eax.2.reg2mem, !insn.addr !1368
  br label %dec_label_pc_40401b, !insn.addr !1368

dec_label_pc_40401b:                              ; preds = %dec_label_pc_404006, %dec_label_pc_403f3d
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %165 = add i32 %68, 2174, !insn.addr !1369
  %166 = inttoptr i32 %165 to i8*, !insn.addr !1369
  %167 = load i8, i8* %166, align 1, !insn.addr !1369
  %168 = trunc i32 %eax.2.reload to i8, !insn.addr !1369
  %169 = sub i8 %167, %168, !insn.addr !1369
  store i8 %169, i8* %166, align 1, !insn.addr !1369
  %170 = inttoptr i32 %eax.2.reload to i8*, !insn.addr !1370
  %171 = load i8, i8* %170, align 1, !insn.addr !1370
  %172 = add i8 %171, %168, !insn.addr !1370
  store i8 %172, i8* %170, align 1, !insn.addr !1370
  %173 = load i8, i8* inttoptr (i32 -1405025697 to i8*), align 1, !insn.addr !1371
  %174 = udiv i32 %eax.2.reload, 256, !insn.addr !1371
  %175 = trunc i32 %174 to i8, !insn.addr !1371
  %176 = add i8 %173, %175, !insn.addr !1371
  store i8 %176, i8* inttoptr (i32 -1405025697 to i8*), align 1, !insn.addr !1371
  %177 = icmp slt i8 %175, 0, !insn.addr !1372
  %178 = icmp eq i1 %177, false, !insn.addr !1373
  br i1 %178, label %179, label %dec_label_pc_404033, !insn.addr !1373

; <label>:179:                                    ; preds = %dec_label_pc_40401b
  %180 = call i32 @function_ff92506d(), !insn.addr !1373
  br label %dec_label_pc_404033, !insn.addr !1373

dec_label_pc_404033:                              ; preds = %179, %dec_label_pc_40401b
  %181 = call i32 @function_40403f(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1374
  ret i32 %181, !insn.addr !1374
}

define i32 @function_40403d() local_unnamed_addr {
dec_label_pc_40403d:
  %0 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_int(i32 192), !insn.addr !1375
  ret i32 %0, !insn.addr !1375
}

define i32 @function_40403f(i32 %arg1) local_unnamed_addr {
dec_label_pc_40403f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i32*, !insn.addr !1376
  %2 = call i32 @function_404052(), !insn.addr !1377
  ret i32 %2, !insn.addr !1377
}

define i32 @function_40404b() local_unnamed_addr {
dec_label_pc_40404b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = trunc i32 %1 to i8, !insn.addr !1378
  %4 = add i8 %3, %2, !insn.addr !1378
  %5 = inttoptr i32 %0 to i8*, !insn.addr !1378
  store i8 %4, i8* %5, align 1, !insn.addr !1378
  %6 = bitcast i32* %eax to i8*
  %7 = load i8, i8* %6, align 4, !insn.addr !1379
  %8 = load i32, i32* %eax, align 4
  %9 = trunc i32 %8 to i8, !insn.addr !1379
  %10 = add i8 %7, %9, !insn.addr !1379
  %11 = inttoptr i32 %8 to i8*, !insn.addr !1379
  store i8 %10, i8* %11, align 1, !insn.addr !1379
  %12 = load i32, i32* %eax, align 4, !insn.addr !1380
  ret i32 %12, !insn.addr !1380
}

define i32 @function_404052() local_unnamed_addr {
dec_label_pc_404052:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = zext i1 %5 to i32, !insn.addr !1381
  %7 = sub i32 %4, %6, !insn.addr !1381
  %8 = and i32 %7, 255, !insn.addr !1381
  %9 = and i32 %4, -256, !insn.addr !1381
  %10 = or i32 %8, %9, !insn.addr !1381
  %11 = inttoptr i32 %10 to i8*, !insn.addr !1382
  %12 = load i8, i8* %11, align 1, !insn.addr !1382
  %13 = trunc i32 %7 to i8, !insn.addr !1382
  %14 = add i8 %12, %13, !insn.addr !1382
  store i8 %14, i8* %11, align 1, !insn.addr !1382
  %15 = add i32 %2, 1972108357, !insn.addr !1383
  %16 = inttoptr i32 %15 to i8*, !insn.addr !1383
  %17 = load i8, i8* %16, align 1, !insn.addr !1383
  %18 = trunc i32 %3 to i8, !insn.addr !1383
  %19 = add i8 %17, %18, !insn.addr !1383
  store i8 %19, i8* %16, align 1, !insn.addr !1383
  %20 = add i32 %1, -12, !insn.addr !1384
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1384
  %22 = load i32, i32* %21, align 4, !insn.addr !1384
  %23 = add i32 %1, -16, !insn.addr !1385
  %24 = inttoptr i32 %23 to i32*, !insn.addr !1385
  %25 = load i32, i32* %24, align 4, !insn.addr !1385
  %26 = and i32 %10, %0, !insn.addr !1386
  %27 = trunc i32 %22 to i16, !insn.addr !1387
  call void @__asm_outsd(i16 %27, i32 %0), !insn.addr !1387
  %28 = load i32, i32* inttoptr (i32 -1961856119 to i32*), align 4, !insn.addr !1388
  %29 = or i32 %26, 4323331, !insn.addr !1389
  %30 = trunc i32 %29 to i8, !insn.addr !1390
  %31 = inttoptr i32 %25 to i8*, !insn.addr !1390
  %32 = load i8, i8* %31, align 1, !insn.addr !1390
  %33 = add i8 %32, %30, !insn.addr !1390
  %34 = icmp ult i8 %33, %30, !insn.addr !1390
  %35 = zext i8 %33 to i32, !insn.addr !1390
  %36 = and i32 %29, -256, !insn.addr !1390
  %37 = or i32 %36, %35, !insn.addr !1390
  %38 = zext i1 %34 to i32, !insn.addr !1391
  %39 = add i32 %37, %38, !insn.addr !1391
  %40 = add i32 %0, ptrtoint (i32* @global_var_410278 to i32), !insn.addr !1388
  %41 = add i32 %40, %28, !insn.addr !1392
  %42 = inttoptr i32 %41 to i32*, !insn.addr !1392
  ret i32 %39, !insn.addr !1393
}

define i32 @function_4040bb(i32 %arg1) local_unnamed_addr {
dec_label_pc_4040bb:
  %ecx.0.reg2mem = alloca i32, !insn.addr !1394
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %5 = add i32 %3, 520095780, !insn.addr !1394
  %6 = inttoptr i32 %5 to i32*, !insn.addr !1394
  %7 = load i32, i32* %6, align 4, !insn.addr !1394
  %8 = icmp eq i32 %7, %0, !insn.addr !1394
  br i1 %8, label %9, label %dec_label_pc_4040c7, !insn.addr !1395

; <label>:9:                                      ; preds = %dec_label_pc_4040bb
  %10 = call i32 @function_6b4297(), !insn.addr !1395
  br label %dec_label_pc_4040c7, !insn.addr !1395

dec_label_pc_4040c7:                              ; preds = %9, %dec_label_pc_4040bb
  %11 = add i32 %3, 73, !insn.addr !1396
  %12 = inttoptr i32 %11 to i32*, !insn.addr !1396
  %13 = load i32, i32* %12, align 4, !insn.addr !1396
  %14 = add i32 %0, 264321820, !insn.addr !1397
  %15 = inttoptr i32 %14 to i32*, !insn.addr !1397
  %16 = load i32, i32* %15, align 4, !insn.addr !1397
  %17 = inttoptr i32 %13 to i8*, !insn.addr !1398
  %18 = load i8, i8* %17, align 1, !insn.addr !1398
  %19 = trunc i32 %13 to i8, !insn.addr !1398
  %20 = add i8 %18, %19, !insn.addr !1398
  store i8 %20, i8* %17, align 1, !insn.addr !1398
  %21 = add i32 %1, 45392812, !insn.addr !1399
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1399
  %23 = load i32, i32* %22, align 4, !insn.addr !1399
  %24 = xor i32 %23, %2, !insn.addr !1399
  store i32 %24, i32* %22, align 4, !insn.addr !1399
  %25 = add i32 %2, 11, !insn.addr !1400
  %26 = inttoptr i32 %25 to i8*, !insn.addr !1400
  %27 = load i8, i8* %26, align 1, !insn.addr !1400
  %28 = add i8 %27, -46, !insn.addr !1400
  %29 = icmp ugt i8 %27, 45, !insn.addr !1400
  store i8 %28, i8* %26, align 1, !insn.addr !1400
  %30 = call i8 @__asm_in.4(i16 -11562), !insn.addr !1401
  %31 = load i32, i32* %stack_var_0, align 4, !insn.addr !1402
  %32 = add i32 %4, 1090685966, !insn.addr !1403
  %33 = inttoptr i32 %32 to i8*, !insn.addr !1403
  %34 = load i8, i8* %33, align 1, !insn.addr !1403
  %35 = trunc i32 %4 to i8
  %36 = add i8 %35, 1, !insn.addr !1403
  %37 = zext i1 %29 to i8, !insn.addr !1403
  %38 = add i8 %36, %37, !insn.addr !1403
  %39 = add i8 %38, %34, !insn.addr !1403
  store i8 %39, i8* %33, align 1, !insn.addr !1403
  %40 = add i32 %0, 273910563, !insn.addr !1404
  %41 = inttoptr i32 %40 to i8*, !insn.addr !1404
  %42 = load i8, i8* %41, align 1, !insn.addr !1404
  %43 = udiv i32 %16, 256, !insn.addr !1404
  %44 = trunc i32 %43 to i8, !insn.addr !1404
  %45 = add i8 %42, %44, !insn.addr !1404
  store i8 %45, i8* %41, align 1, !insn.addr !1404
  %46 = inttoptr i32 %16 to i32*, !insn.addr !1405
  %47 = load i32, i32* %46, align 4, !insn.addr !1405
  %48 = icmp eq i32 %47, -57, !insn.addr !1405
  br i1 %48, label %dec_label_pc_404114, label %dec_label_pc_4040fc, !insn.addr !1406

dec_label_pc_4040fc:                              ; preds = %dec_label_pc_4040c7
  %49 = load i32, i32* inttoptr (i32 -1992228160 to i32*), align 64, !insn.addr !1407
  %50 = add i32 %49, 1, !insn.addr !1408
  %51 = add i32 %1, -72, !insn.addr !1409
  %52 = inttoptr i32 %51 to i32*, !insn.addr !1409
  store i32 4313814, i32* %52, align 4, !insn.addr !1409
  %53 = udiv i32 %50, 256, !insn.addr !1410
  %54 = trunc i32 %53 to i8, !insn.addr !1410
  %55 = inttoptr i32 %50 to i8*, !insn.addr !1410
  %56 = load i8, i8* %55, align 1, !insn.addr !1410
  %57 = add i8 %56, %54, !insn.addr !1410
  %58 = zext i8 %57 to i32, !insn.addr !1410
  %59 = mul i32 %58, 256, !insn.addr !1410
  %60 = and i32 %50, -65281, !insn.addr !1410
  %61 = or i32 %59, %60, !insn.addr !1410
  store i32 %61, i32* @global_var_4102c0, align 4, !insn.addr !1411
  br label %dec_label_pc_404114, !insn.addr !1411

dec_label_pc_404114:                              ; preds = %dec_label_pc_4040fc, %dec_label_pc_4040c7
  %62 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !1412
  %63 = load i32, i32* inttoptr (i32 -129914452 to i32*), align 4, !insn.addr !1413
  %64 = load i32, i32* @global_var_410bc8, align 4
  store i32 1869881454, i32* %ecx.0.reg2mem, !insn.addr !1414
  br label %dec_label_pc_40411f, !insn.addr !1414

dec_label_pc_40411f:                              ; preds = %dec_label_pc_404127, %dec_label_pc_404114
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %65 = icmp slt i32 %63, %ecx.0.reload, !insn.addr !1415
  br i1 %65, label %dec_label_pc_404127, label %dec_label_pc_40423a, !insn.addr !1415

dec_label_pc_404127:                              ; preds = %dec_label_pc_40411f
  %66 = icmp ult i32 %63, %ecx.0.reload, !insn.addr !1416
  store i32 %64, i32* %ecx.0.reg2mem, !insn.addr !1417
  br i1 %66, label %dec_label_pc_40411f, label %dec_label_pc_40412f, !insn.addr !1417

dec_label_pc_40412f:                              ; preds = %dec_label_pc_404127
  %67 = mul i32 %1, 32, !insn.addr !1418
  %68 = add i32 %64, %67, !insn.addr !1419
  %69 = load i32, i32* inttoptr (i32 -1858010448 to i32*), align 16, !insn.addr !1420
  %70 = add i32 %63, 1, !insn.addr !1421
  %71 = add i32 %69, 1, !insn.addr !1422
  store i32 %70, i32* @global_var_4102ea, align 4, !insn.addr !1423
  store i32 %71, i32* inttoptr (i32 1749877297 to i32*), align 4, !insn.addr !1424
  %72 = call i32 @unknown_30ec69ee(), !insn.addr !1425
  %73 = add i32 %16, -1124071179, !insn.addr !1426
  %74 = inttoptr i32 %73 to i32*, !insn.addr !1426
  store i32 %72, i32* %74, align 4, !insn.addr !1426
  %75 = add i32 %16, 2096, !insn.addr !1427
  %76 = inttoptr i32 %75 to i32*, !insn.addr !1427
  %77 = load i32, i32* %76, align 4, !insn.addr !1427
  %78 = inttoptr i32 %68 to i32*, !insn.addr !1428
  store i32 %16, i32* %78, align 4, !insn.addr !1428
  %79 = inttoptr i32 %77 to i8*, !insn.addr !1429
  %80 = load i8, i8* %79, align 1, !insn.addr !1429
  %81 = trunc i32 %77 to i8, !insn.addr !1429
  %82 = or i8 %80, %81, !insn.addr !1429
  store i8 %82, i8* %79, align 1, !insn.addr !1429
  %83 = add i32 %69, 311134983, !insn.addr !1430
  %84 = inttoptr i32 %83 to i8*, !insn.addr !1430
  %85 = load i8, i8* %84, align 1, !insn.addr !1430
  %86 = trunc i32 %71 to i8, !insn.addr !1430
  %87 = add i8 %85, %86, !insn.addr !1430
  store i8 %87, i8* %84, align 1, !insn.addr !1430
  %88 = load i8, i8* %79, align 1, !insn.addr !1431
  %89 = or i8 %88, %81, !insn.addr !1431
  store i8 %89, i8* %79, align 1, !insn.addr !1431
  %90 = add i32 %68, -79, !insn.addr !1432
  %91 = inttoptr i32 %90 to i32*, !insn.addr !1432
  store i32 %71, i32* %91, align 4, !insn.addr !1432
  %92 = add i32 %16, 2104, !insn.addr !1433
  %93 = inttoptr i32 %92 to i64*, !insn.addr !1433
  %94 = load i64, i64* %93, align 4, !insn.addr !1433
  %95 = call i32 @__asm_bound(i64 %94), !insn.addr !1433
  %96 = add i32 %16, 28464, !insn.addr !1434
  %97 = inttoptr i32 %96 to i32*, !insn.addr !1434
  %98 = load i32, i32* %97, align 4, !insn.addr !1434
  %99 = xor i32 %16, 8, !insn.addr !1435
  %100 = add i32 %31, 545491912, !insn.addr !1436
  %101 = add i32 %100, %98, !insn.addr !1436
  %102 = inttoptr i32 %101 to i8*, !insn.addr !1436
  %103 = load i8, i8* %102, align 1, !insn.addr !1436
  %104 = trunc i32 %99 to i8, !insn.addr !1436
  %105 = add i8 %103, %104, !insn.addr !1436
  store i8 %105, i8* %102, align 1, !insn.addr !1436
  %106 = inttoptr i32 %99 to i8*, !insn.addr !1437
  %107 = load i8, i8* %106, align 1, !insn.addr !1437
  %108 = or i8 %107, %104, !insn.addr !1437
  store i8 %108, i8* %106, align 1, !insn.addr !1437
  %109 = inttoptr i32 %98 to i8*, !insn.addr !1438
  %110 = load i8, i8* %109, align 1, !insn.addr !1438
  %111 = trunc i32 %98 to i8, !insn.addr !1438
  %112 = add i8 %110, %111, !insn.addr !1438
  store i8 %112, i8* %109, align 1, !insn.addr !1438
  ret i32 %99, !insn.addr !1439

dec_label_pc_40423a:                              ; preds = %dec_label_pc_40411f
  %113 = call i32 @__asm_int3(), !insn.addr !1440
  %114 = call i32 @unknown_3840e000(), !insn.addr !1441
  store i32 %114, i32* inttoptr (i32 9702304 to i32*), align 32, !insn.addr !1442
  %115 = trunc i32 %1 to i8
  %116 = inttoptr i32 %0 to i8*, !insn.addr !1443
  store i8 %115, i8* %116, align 1, !insn.addr !1443
  %117 = load i32, i32* inttoptr (i32 4313810 to i32*), align 4, !insn.addr !1444
  %118 = or i32 %117, %62, !insn.addr !1444
  %119 = load i32, i32* inttoptr (i32 -79623260 to i32*), align 4, !insn.addr !1445
  store i32 %119, i32* inttoptr (i32 -587198270 to i32*), align 4, !insn.addr !1446
  %120 = and i32 %114, -256, !insn.addr !1447
  %121 = load i8, i8* inttoptr (i32 -1996451317 to i8*), align 1, !insn.addr !1448
  %122 = zext i8 %121 to i32, !insn.addr !1448
  %123 = or i32 %120, %122, !insn.addr !1448
  %124 = inttoptr i32 %123 to i8*, !insn.addr !1449
  %125 = load i8, i8* %124, align 1, !insn.addr !1449
  %126 = or i8 %125, %121, !insn.addr !1449
  store i8 %126, i8* %124, align 1, !insn.addr !1449
  %127 = add i32 %119, ptrtoint (i8** @global_var_410ba4 to i32), !insn.addr !1450
  %128 = inttoptr i32 %127 to i8*, !insn.addr !1450
  %129 = load i8, i8* %128, align 1, !insn.addr !1450
  %130 = udiv i32 %114, 256, !insn.addr !1450
  %131 = trunc i32 %130 to i8, !insn.addr !1450
  %132 = add i8 %129, %131, !insn.addr !1450
  store i8 %132, i8* %128, align 1, !insn.addr !1450
  %133 = add i32 %118, -4, !insn.addr !1451
  %134 = inttoptr i32 %133 to i32*, !insn.addr !1451
  store i32 2199, i32* %134, align 4, !insn.addr !1451
  %135 = add i32 %31, 23092, !insn.addr !1452
  %136 = inttoptr i32 %135 to i32*, !insn.addr !1452
  store i32 %31, i32* %136, align 4, !insn.addr !1452
  %137 = call i32 @unknown_5b401ea0(), !insn.addr !1453
  %138 = call i32 @__asm_in.2(i32 93), !insn.addr !1454
  ret i32 %138, !insn.addr !1455
}

define i32 @function_40429f() local_unnamed_addr {
dec_label_pc_40429f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, -717159800, !insn.addr !1456
  %4 = inttoptr i32 %3 to i32*, !insn.addr !1456
  %5 = load i32, i32* %4, align 4, !insn.addr !1456
  %6 = or i32 %5, %1, !insn.addr !1456
  store i32 %6, i32* %4, align 4, !insn.addr !1456
  %7 = call i32 @function_566800f0(i32 %0), !insn.addr !1457
  ret i32 %7, !insn.addr !1457
}

define i32 @function_4042b9() local_unnamed_addr {
dec_label_pc_4042b9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = mul i32 %2, 8, !insn.addr !1458
  %5 = add i32 %0, 1089103976, !insn.addr !1458
  %6 = add i32 %5, %4, !insn.addr !1458
  %7 = inttoptr i32 %6 to i8*, !insn.addr !1458
  %8 = load i8, i8* %7, align 1, !insn.addr !1458
  %9 = trunc i32 %3 to i8, !insn.addr !1458
  %10 = add i8 %8, %9, !insn.addr !1458
  store i8 %10, i8* %7, align 1, !insn.addr !1458
  %11 = udiv i32 %1, 256, !insn.addr !1459
  %12 = trunc i32 %11 to i8, !insn.addr !1459
  %13 = sub i8 0, %12
  %14 = sub i8 %13, 1
  %15 = icmp ult i8 %14, %12, !insn.addr !1459
  %16 = select i1 %15, i32 255, i32 0, !insn.addr !1460
  %17 = and i32 %3, -256, !insn.addr !1460
  %18 = or i32 %16, %17, !insn.addr !1460
  ret i32 %18, !insn.addr !1461
}

define i32 @function_4042d2() local_unnamed_addr {
dec_label_pc_4042d2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1462
}

define i32 @function_4042d8() local_unnamed_addr {
dec_label_pc_4042d8:
  %0 = call i32 @function_d6580034(), !insn.addr !1463
  ret i32 %0, !insn.addr !1463
}

define i32 @function_4042df() local_unnamed_addr {
dec_label_pc_4042df:
  %0 = call i32 @function_16260077(), !insn.addr !1464
  ret i32 %0, !insn.addr !1464
}

define i32 @function_4042e9() local_unnamed_addr {
dec_label_pc_4042e9:
  %0 = call i32 @function_d73f432e(), !insn.addr !1465
  ret i32 %0, !insn.addr !1465
}

define i32 @function_4042f0() local_unnamed_addr {
dec_label_pc_4042f0:
  %0 = call i32 @function_d73f4335(), !insn.addr !1466
  ret i32 %0, !insn.addr !1466
}

define i32 @function_4042f7() local_unnamed_addr {
dec_label_pc_4042f7:
  %0 = call i32 @function_d73f50fd(), !insn.addr !1467
  ret i32 %0, !insn.addr !1467
}

define i32 @function_4042fe() local_unnamed_addr {
dec_label_pc_4042fe:
  %0 = call i32 @function_d73f4343(), !insn.addr !1468
  ret i32 %0, !insn.addr !1468
}

define i32 @function_404305() local_unnamed_addr {
dec_label_pc_404305:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = select i1 %1, i32 140, i32 139, !insn.addr !1469
  %3 = sub i32 %0, %2, !insn.addr !1469
  %4 = and i32 %3, 255, !insn.addr !1469
  %5 = and i32 %0, -256, !insn.addr !1469
  %6 = or i32 %4, %5, !insn.addr !1469
  ret i32 %6, !insn.addr !1470
}

define i32 @function_404342() local_unnamed_addr {
dec_label_pc_404342:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = inttoptr i32 %1 to i8*, !insn.addr !1471
  store i8 -1, i8* %2, align 1, !insn.addr !1471
  %3 = add i32 %1, 1, !insn.addr !1472
  %4 = add i32 %0, -11517760, !insn.addr !1473
  %5 = inttoptr i32 %4 to i8*, !insn.addr !1473
  %6 = load i8, i8* %5, align 1, !insn.addr !1473
  %7 = trunc i32 %3 to i8, !insn.addr !1473
  %8 = add i8 %6, %7, !insn.addr !1473
  store i8 %8, i8* %5, align 1, !insn.addr !1473
  ret i32 %3, !insn.addr !1474
}

define i32 @function_40436d() local_unnamed_addr {
dec_label_pc_40436d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1475
}

define i32 @function_404385(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_404385:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_4256 = alloca i32, align 4
  %stack_var_-16524 = alloca i32, align 4
  %stack_var_48 = alloca i32, align 4
  %4 = add i32 %1, -3768895, !insn.addr !1476
  %5 = inttoptr i32 %4 to i8*, !insn.addr !1476
  %6 = load i8, i8* %5, align 1, !insn.addr !1476
  %7 = trunc i32 %2 to i8, !insn.addr !1476
  %8 = add i8 %6, %7, !insn.addr !1476
  store i8 %8, i8* %5, align 1, !insn.addr !1476
  %9 = load i32, i32* inttoptr (i32 4243684 to i32*), align 4, !insn.addr !1477
  %10 = add i32 %9, 82, !insn.addr !1478
  %11 = inttoptr i32 %10 to i8*, !insn.addr !1478
  %12 = load i8, i8* %11, align 1, !insn.addr !1478
  %13 = sub i8 0, %12, !insn.addr !1478
  store i8 %13, i8* %11, align 1, !insn.addr !1478
  %14 = add i32 %arg1, -11452223, !insn.addr !1479
  %15 = inttoptr i32 %14 to i8*, !insn.addr !1479
  %16 = load i8, i8* %15, align 1, !insn.addr !1479
  %17 = trunc i32 %9 to i8
  %18 = add i8 %17, 99, !insn.addr !1479
  %19 = add i8 %18, %16, !insn.addr !1479
  store i8 %19, i8* %15, align 1, !insn.addr !1479
  %20 = call i32 @__asm_iretd(), !insn.addr !1480
  %21 = load i32, i32* inttoptr (i32 4243656 to i32*), align 8
  %22 = add i32 %21, -75, !insn.addr !1481
  %23 = inttoptr i32 %arg1 to i32*, !insn.addr !1482
  %24 = load i32, i32* %23, align 4, !insn.addr !1482
  %25 = add i32 %24, 64, !insn.addr !1482
  %26 = icmp ugt i32 %24, -65, !insn.addr !1482
  store i32 %25, i32* %23, align 4, !insn.addr !1482
  %27 = select i1 %26, i32 255, i32 0, !insn.addr !1483
  %28 = and i32 %22, -256, !insn.addr !1483
  %29 = or i32 %27, %28, !insn.addr !1483
  %30 = load i32, i32* inttoptr (i32 893436104 to i32*), align 8, !insn.addr !1484
  %31 = icmp ugt i32 %30, -75, !insn.addr !1485
  %.neg9 = sext i1 %31 to i32
  %.neg10 = add i32 %30, 74, !insn.addr !1486
  %32 = sub i32 %.neg10, %29, !insn.addr !1485
  %33 = add i32 %32, %.neg9, !insn.addr !1486
  %34 = trunc i32 %33 to i16, !insn.addr !1487
  %35 = call i8 @__asm_in.4(i16 %34), !insn.addr !1487
  %36 = add i32 %33, 118, !insn.addr !1488
  %37 = inttoptr i32 %36 to i8*, !insn.addr !1488
  %38 = load i8, i8* %37, align 1, !insn.addr !1488
  %39 = trunc i32 %33 to i8, !insn.addr !1488
  %40 = add i8 %38, %39, !insn.addr !1488
  store i8 %40, i8* %37, align 1, !insn.addr !1488
  %41 = load i32, i32* inttoptr (i32 16167624 to i32*), align 8, !insn.addr !1489
  %42 = select i1 %3, i32 -1, i32 1, !insn.addr !1490
  %43 = add i32 %42, %0, !insn.addr !1490
  %44 = load i32, i32* inttoptr (i32 9683144 to i32*), align 8, !insn.addr !1491
  %45 = add i32 %44, -23, !insn.addr !1492
  %46 = icmp ugt i32 %44, 22, !insn.addr !1492
  %47 = zext i1 %46 to i32, !insn.addr !1493
  %48 = add i32 %45, %47, !insn.addr !1493
  %49 = sub i32 %43, %48, !insn.addr !1493
  %50 = sub i32 %49, %47, !insn.addr !1493
  %51 = icmp ult i32 %43, %50, !insn.addr !1493
  %52 = icmp ne i32 %48, -1, !insn.addr !1493
  %53 = or i1 %52, %51, !insn.addr !1493
  %54 = icmp ult i32 %43, %48, !insn.addr !1493
  %55 = select i1 %46, i1 %53, i1 %54, !insn.addr !1493
  %56 = load i32, i32* %23, align 4, !insn.addr !1494
  %57 = ptrtoint i32* %stack_var_48 to i32, !insn.addr !1495
  store i32 %57, i32* %stack_var_-16524, align 4, !insn.addr !1495
  %58 = ptrtoint i32* %stack_var_-16524 to i32, !insn.addr !1495
  %59 = add i32 %56, 64, !insn.addr !1496
  %60 = inttoptr i32 %59 to i32*, !insn.addr !1496
  %61 = load i32, i32* %60, align 4, !insn.addr !1496
  %62 = zext i1 %55 to i32, !insn.addr !1496
  %63 = add i32 %61, 78, !insn.addr !1496
  %64 = add i32 %63, %62, !insn.addr !1496
  store i32 %64, i32* %60, align 4, !insn.addr !1496
  %65 = load i32, i32* inttoptr (i32 708886728 to i32*), align 8, !insn.addr !1497
  %66 = add i32 %65, 64, !insn.addr !1498
  %67 = load i32, i32* inttoptr (i32 4243656 to i32*), align 8, !insn.addr !1499
  %68 = add i32 %67, 64, !insn.addr !1500
  store i32 %68, i32* %stack_var_4256, align 4, !insn.addr !1501
  %69 = ptrtoint i32* %stack_var_4256 to i32, !insn.addr !1501
  %70 = add i32 %69, 13, !insn.addr !1502
  %71 = add i32 %70, %58, !insn.addr !1502
  %72 = inttoptr i32 %71 to i32*, !insn.addr !1502
  %73 = load i32, i32* %72, align 4, !insn.addr !1502
  %74 = add i32 %73, 1, !insn.addr !1502
  store i32 %74, i32* %72, align 4, !insn.addr !1502
  %75 = add i32 %41, 128, !insn.addr !1503
  %76 = trunc i32 %66 to i16, !insn.addr !1504
  %77 = call i8 @__asm_in.4(i16 %76), !insn.addr !1504
  %78 = sext i8 %77 to i32, !insn.addr !1504
  %79 = and i32 %68, -256, !insn.addr !1504
  %80 = or i32 %79, %78, !insn.addr !1504
  %81 = add i32 %80, 1, !insn.addr !1505
  %82 = add i32 %41, 127, !insn.addr !1506
  %83 = inttoptr i32 %82 to i8*, !insn.addr !1506
  %84 = load i8, i8* %83, align 1, !insn.addr !1506
  %85 = trunc i32 %66 to i8, !insn.addr !1506
  %86 = add i8 %84, %85, !insn.addr !1506
  %87 = icmp ult i8 %86, %84, !insn.addr !1506
  store i8 %86, i8* %83, align 1, !insn.addr !1506
  %88 = select i1 %87, i32 255, i32 0, !insn.addr !1507
  %89 = and i32 %81, -256, !insn.addr !1507
  %90 = or i32 %89, %88, !insn.addr !1507
  %91 = load i32, i32* inttoptr (i32 4243656 to i32*), align 8, !insn.addr !1508
  %92 = add i32 %41, 192, !insn.addr !1509
  %93 = inttoptr i32 %92 to i32*, !insn.addr !1509
  %94 = load i32, i32* %93, align 4, !insn.addr !1509
  %95 = add i32 %94, 82, !insn.addr !1509
  %96 = icmp ugt i32 %94, -83, !insn.addr !1509
  store i32 %95, i32* %93, align 4, !insn.addr !1509
  %97 = zext i1 %96 to i32, !insn.addr !1510
  %98 = add i32 %90, -146751288, !insn.addr !1510
  %99 = add i32 %98, %97, !insn.addr !1510
  call void @__asm_out.1(i32 164, i32 %99), !insn.addr !1511
  %100 = trunc i32 %91 to i16, !insn.addr !1512
  %101 = call i8 @__asm_in.4(i16 %100), !insn.addr !1512
  %102 = sext i8 %101 to i32, !insn.addr !1512
  %103 = and i32 %99, -256, !insn.addr !1512
  %104 = or i32 %103, %102, !insn.addr !1512
  %105 = add i32 %104, 1, !insn.addr !1513
  %106 = inttoptr i32 %105 to i8*, !insn.addr !1514
  %107 = load i8, i8* %106, align 1, !insn.addr !1514
  %108 = udiv i32 %arg1, 256, !insn.addr !1514
  %109 = trunc i32 %108 to i8, !insn.addr !1514
  %110 = add i8 %107, %109, !insn.addr !1514
  store i8 %110, i8* %106, align 1, !insn.addr !1514
  %111 = inttoptr i32 %49 to i32*, !insn.addr !1515
  %112 = load i32, i32* %111, align 4, !insn.addr !1515
  %113 = inttoptr i32 %56 to i32*, !insn.addr !1515
  %114 = load i32, i32* %113, align 4, !insn.addr !1515
  %115 = icmp ult i32 %112, %114, !insn.addr !1515
  %116 = load i32, i32* inttoptr (i32 -935280440 to i32*), align 8, !insn.addr !1516
  %.neg11 = sub i32 -128, %41
  %.neg12 = sext i1 %115 to i32
  %.neg13 = add i32 %.neg11, %116, !insn.addr !1516
  %117 = add i32 %.neg13, %.neg12, !insn.addr !1516
  store i32 %117, i32* inttoptr (i32 -935280440 to i32*), align 8, !insn.addr !1516
  %118 = icmp ult i32 %92, %75, !insn.addr !1517
  %119 = select i1 %118, i32 255, i32 0, !insn.addr !1518
  %120 = and i32 %105, -256, !insn.addr !1518
  %121 = or i32 %120, %119, !insn.addr !1518
  %122 = add i32 %121, -107, !insn.addr !1519
  %123 = inttoptr i32 %122 to i8*, !insn.addr !1519
  %124 = load i8, i8* %123, align 1, !insn.addr !1519
  %125 = udiv i32 %92, 256, !insn.addr !1519
  %126 = trunc i32 %125 to i8, !insn.addr !1519
  %127 = add i8 %124, %126, !insn.addr !1519
  store i8 %127, i8* %123, align 1, !insn.addr !1519
  %128 = call i32 @function_404544(i32 %92, i32 4844608), !insn.addr !1520
  ret i32 %128, !insn.addr !1520
}

define i32 @function_404504() local_unnamed_addr {
dec_label_pc_404504:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 978469058, !insn.addr !1521
  %3 = inttoptr i32 %2 to i8*, !insn.addr !1521
  %4 = load i8, i8* %3, align 1, !insn.addr !1521
  %5 = trunc i32 %1 to i8, !insn.addr !1521
  %6 = add i8 %4, %5, !insn.addr !1521
  %7 = icmp ult i8 %6, %4, !insn.addr !1521
  store i8 %6, i8* %3, align 1, !insn.addr !1521
  %8 = select i1 %7, i32 255, i32 0, !insn.addr !1522
  %9 = and i32 %1, -256, !insn.addr !1522
  %10 = or i32 %8, %9, !insn.addr !1522
  ret i32 %10, !insn.addr !1523
}

define i32 @function_40450e() local_unnamed_addr {
dec_label_pc_40450e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, 1, !insn.addr !1524
  %3 = add i32 %1, -79, !insn.addr !1525
  %4 = inttoptr i32 %3 to i8*, !insn.addr !1525
  %5 = load i8, i8* %4, align 1, !insn.addr !1525
  %6 = udiv i32 %0, 256, !insn.addr !1525
  %7 = trunc i32 %6 to i8, !insn.addr !1525
  %8 = add i8 %5, %7, !insn.addr !1525
  store i8 %8, i8* %4, align 1, !insn.addr !1525
  ret i32 %2, !insn.addr !1526
}

define i32 @function_404520() local_unnamed_addr {
dec_label_pc_404520:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, 112, !insn.addr !1527
  %3 = inttoptr i32 %2 to i8*, !insn.addr !1527
  %4 = load i8, i8* %3, align 1, !insn.addr !1527
  %5 = udiv i32 %0, 256, !insn.addr !1527
  %6 = trunc i32 %5 to i8, !insn.addr !1527
  %7 = add i8 %4, %6, !insn.addr !1527
  store i8 %7, i8* %3, align 1, !insn.addr !1527
  %8 = call i32 @function_404565(), !insn.addr !1528
  ret i32 %8, !insn.addr !1528
}

define i32 @function_404530() local_unnamed_addr {
dec_label_pc_404530:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, 1, !insn.addr !1529
  %3 = add i32 %1, 53, !insn.addr !1530
  %4 = inttoptr i32 %3 to i8*, !insn.addr !1530
  %5 = load i8, i8* %4, align 1, !insn.addr !1530
  %6 = udiv i32 %0, 256, !insn.addr !1530
  %7 = trunc i32 %6 to i8, !insn.addr !1530
  %8 = add i8 %5, %7, !insn.addr !1530
  store i8 %8, i8* %4, align 1, !insn.addr !1530
  ret i32 %2, !insn.addr !1531
}

define i32 @function_404538() local_unnamed_addr {
dec_label_pc_404538:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1532
}

define i32 @function_404544(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_404544:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %0 to i16, !insn.addr !1533
  call void @__asm_out.3(i16 %3, i32 %2), !insn.addr !1533
  %4 = add i32 %1, -353081122, !insn.addr !1534
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1534
  %6 = load i32, i32* %5, align 4, !insn.addr !1534
  %7 = or i32 %6, 64, !insn.addr !1534
  store i32 %7, i32* %5, align 4, !insn.addr !1534
  %8 = add i32 %2, -1, !insn.addr !1535
  %9 = inttoptr i32 %8 to i8*, !insn.addr !1535
  %10 = load i8, i8* %9, align 1, !insn.addr !1535
  %11 = trunc i32 %0 to i8, !insn.addr !1535
  %12 = add i8 %10, %11, !insn.addr !1535
  store i8 %12, i8* %9, align 1, !insn.addr !1535
  call void @exit(i32 105), !insn.addr !1536
  unreachable, !insn.addr !1536
}

define i32 @function_404565() local_unnamed_addr {
dec_label_pc_404565:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = and i32 %2, 31, !insn.addr !1537
  %5 = icmp eq i32 %4, 0, !insn.addr !1537
  br i1 %5, label %20, label %6, !insn.addr !1537

; <label>:6:                                      ; preds = %dec_label_pc_404565
  %7 = and i32 %3, 255, !insn.addr !1538
  %8 = add i32 %7, %1, !insn.addr !1538
  %9 = inttoptr i32 %8 to i8*, !insn.addr !1538
  %10 = load i8, i8* %9, align 1, !insn.addr !1538
  %11 = zext i8 %10 to i32, !insn.addr !1538
  %12 = and i32 %3, -256, !insn.addr !1538
  %13 = or i32 %12, %11, !insn.addr !1538
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1537
  %15 = load i32, i32* %14, align 4, !insn.addr !1537
  %16 = shl i32 %15, %4, !insn.addr !1537
  %17 = sub nsw i32 32, %4, !insn.addr !1537
  %18 = lshr i32 %15, %17, !insn.addr !1537
  %19 = or i32 %18, %16, !insn.addr !1537
  store i32 %19, i32* %14, align 4, !insn.addr !1537
  br label %20, !insn.addr !1537

; <label>:20:                                     ; preds = %dec_label_pc_404565, %6
  %21 = add i32 %0, -22, !insn.addr !1539
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1539
  %23 = load i32, i32* %22, align 4, !insn.addr !1539
  %24 = inttoptr i32 %23 to i8*, !insn.addr !1540
  %25 = load i8, i8* %24, align 1, !insn.addr !1540
  %26 = udiv i32 %2, 256, !insn.addr !1540
  %27 = trunc i32 %26 to i8, !insn.addr !1540
  %28 = add i8 %25, %27, !insn.addr !1540
  store i8 %28, i8* %24, align 1, !insn.addr !1540
  %29 = call i32 @__asm_sti(), !insn.addr !1541
  %sext = mul i32 %29, 65536
  %30 = sdiv i32 %sext, 65536, !insn.addr !1542
  ret i32 %30, !insn.addr !1543
}

define i32 @function_404591() local_unnamed_addr {
dec_label_pc_404591:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = zext i1 %4 to i32, !insn.addr !1544
  %6 = trunc i32 %3 to i8
  %7 = mul i8 %6, 2, !insn.addr !1545
  %8 = inttoptr i32 %3 to i8*, !insn.addr !1545
  store i8 %7, i8* %8, align 1, !insn.addr !1545
  %9 = add i32 %0, -1, !insn.addr !1544
  %10 = add i32 %9, %1, !insn.addr !1544
  %11 = add i32 %10, %5, !insn.addr !1546
  %12 = inttoptr i32 %11 to i8*, !insn.addr !1546
  %13 = load i8, i8* %12, align 1, !insn.addr !1546
  %14 = udiv i32 %2, 256, !insn.addr !1546
  %15 = trunc i32 %14 to i8, !insn.addr !1546
  %16 = add i8 %13, %15, !insn.addr !1546
  %17 = icmp ult i8 %16, %13, !insn.addr !1546
  store i8 %16, i8* %12, align 1, !insn.addr !1546
  %18 = select i1 %17, i32 0, i32 255, !insn.addr !1547
  %19 = and i32 %3, -256, !insn.addr !1547
  %20 = or i32 %18, %19, !insn.addr !1547
  ret i32 %20, !insn.addr !1548
}

define i32 @function_4045ac() local_unnamed_addr {
dec_label_pc_4045ac:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1549
}

define i32 @function_4045e1() local_unnamed_addr {
dec_label_pc_4045e1:
  %0 = call i32 @function_8be63ae8(), !insn.addr !1550
  ret i32 %0, !insn.addr !1550
}

define i32 @function_4045e6(i32 %arg1) local_unnamed_addr {
dec_label_pc_4045e6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1551
}

define i32 @function_4045ee() local_unnamed_addr {
dec_label_pc_4045ee:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %2, -959763512, !insn.addr !1552
  %7 = inttoptr i32 %6 to i8*, !insn.addr !1552
  %8 = load i8, i8* %7, align 1, !insn.addr !1552
  %9 = trunc i32 %3 to i8, !insn.addr !1552
  %10 = or i8 %8, %9, !insn.addr !1552
  store i8 %10, i8* %7, align 1, !insn.addr !1552
  call void @__asm_into(i32 %5), !insn.addr !1553
  %11 = inttoptr i32 %4 to i32*, !insn.addr !1554
  store i32 0, i32* %11, align 4, !insn.addr !1554
  %12 = load i8, i8* @global_var_41404c, align 1, !insn.addr !1555
  %13 = add i32 %1, -194446267, !insn.addr !1556
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1556
  %15 = load i32, i32* %14, align 4, !insn.addr !1556
  %16 = sub i32 %15, %3, !insn.addr !1556
  store i32 %16, i32* %14, align 4, !insn.addr !1556
  %17 = add i32 %3, 1, !insn.addr !1557
  %18 = add i32 %4, 104, !insn.addr !1558
  %19 = inttoptr i32 %18 to i8*, !insn.addr !1558
  %20 = load i8, i8* %19, align 1, !insn.addr !1558
  %21 = add i8 %20, %12, !insn.addr !1558
  store i8 %21, i8* %19, align 1, !insn.addr !1558
  %22 = add i32 %17, %2, !insn.addr !1559
  %23 = and i32 %22, 255, !insn.addr !1559
  %24 = and i32 %17, -256, !insn.addr !1559
  %25 = or i32 %23, %24, !insn.addr !1559
  %26 = load i8, i8* inttoptr (i32 10254 to i8*), align 2, !insn.addr !1560
  %27 = trunc i32 %4 to i8, !insn.addr !1560
  %28 = add i8 %26, %27, !insn.addr !1560
  %29 = icmp ult i8 %28, %26, !insn.addr !1560
  store i8 %28, i8* inttoptr (i32 10254 to i8*), align 2, !insn.addr !1560
  %30 = zext i1 %29 to i32, !insn.addr !1561
  %31 = mul i32 %4, 2, !insn.addr !1561
  %32 = or i32 %31, %30, !insn.addr !1561
  %33 = icmp ule i32 %32, %4, !insn.addr !1561
  %34 = icmp ult i32 %31, %4, !insn.addr !1561
  %35 = select i1 %29, i1 %33, i1 %34, !insn.addr !1561
  %36 = zext i1 %35 to i32, !insn.addr !1562
  %37 = add i32 %32, 133, !insn.addr !1562
  %38 = add i32 %37, %36, !insn.addr !1562
  %39 = and i32 %38, 255, !insn.addr !1562
  %40 = and i32 %31, -256, !insn.addr !1562
  %41 = or i32 %39, %40, !insn.addr !1562
  %42 = inttoptr i32 %41 to i8*, !insn.addr !1563
  %43 = load i8, i8* %42, align 1, !insn.addr !1563
  %44 = trunc i32 %38 to i8, !insn.addr !1563
  %45 = add i8 %43, %44, !insn.addr !1563
  store i8 %45, i8* %42, align 1, !insn.addr !1563
  %46 = add i32 %25, 4265985, !insn.addr !1564
  %47 = inttoptr i32 %46 to i8*, !insn.addr !1564
  %48 = load i8, i8* %47, align 1, !insn.addr !1564
  %49 = udiv i32 %4, 128
  %50 = trunc i32 %49 to i8, !insn.addr !1564
  %51 = add i8 %48, %50, !insn.addr !1564
  store i8 %51, i8* %47, align 1, !insn.addr !1564
  %52 = call i32 @__asm_sti(), !insn.addr !1565
  %53 = inttoptr i32 %52 to i8*, !insn.addr !1566
  %54 = load i8, i8* %53, align 1, !insn.addr !1566
  %55 = trunc i32 %52 to i8, !insn.addr !1566
  %56 = add i8 %54, %55, !insn.addr !1566
  store i8 %56, i8* %53, align 1, !insn.addr !1566
  %57 = add i32 %2, -1065018043, !insn.addr !1567
  %58 = inttoptr i32 %57 to i8*, !insn.addr !1567
  %59 = load i8, i8* %58, align 1, !insn.addr !1567
  %60 = trunc i32 %22 to i8
  %61 = add i8 %60, 1, !insn.addr !1567
  %62 = add i8 %61, %59, !insn.addr !1567
  %63 = icmp eq i8 %62, 0, !insn.addr !1567
  store i8 %62, i8* %58, align 1, !insn.addr !1567
  %64 = icmp eq i1 %63, false, !insn.addr !1568
  br i1 %64, label %65, label %dec_label_pc_404632, !insn.addr !1568

; <label>:65:                                     ; preds = %dec_label_pc_4045ee
  %66 = call i32 @function_5c404702(), !insn.addr !1568
  br label %dec_label_pc_404632, !insn.addr !1568

dec_label_pc_404632:                              ; preds = %65, %dec_label_pc_4045ee
  %67 = load i16, i16* @global_var_41402d, align 2, !insn.addr !1569
  %68 = sext i16 %67 to i32, !insn.addr !1569
  %69 = call i32 @unknown_69ff5850(i32 %68, i32 %0), !insn.addr !1570
  %70 = call i8 @__asm_in.7(i8 23), !insn.addr !1571
  %71 = sext i8 %70 to i32, !insn.addr !1571
  %72 = and i32 %69, -256, !insn.addr !1571
  %73 = or i32 %72, %71, !insn.addr !1571
  %74 = add i32 %73, -3759360, !insn.addr !1572
  %75 = icmp ult i32 %73, 3759360, !insn.addr !1572
  store i32 %74, i32* inttoptr (i32 1809931152 to i32*), align 16, !insn.addr !1573
  %76 = add i32 %2, 4301056, !insn.addr !1574
  %77 = inttoptr i32 %76 to i32*, !insn.addr !1574
  %78 = load i32, i32* %77, align 4, !insn.addr !1574
  %79 = load i32, i32* inttoptr (i32 4313273 to i32*), align 4, !insn.addr !1575
  %80 = call i32 @unknown_be9955d0(i32 %79, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_40f2d0, i32 0, i32 0), i32 %78), !insn.addr !1576
  %81 = add i32 %1, 194813196, !insn.addr !1577
  %82 = inttoptr i32 %81 to i32*, !insn.addr !1577
  %83 = load i32, i32* %82, align 4, !insn.addr !1577
  %84 = select i1 %75, i32 66, i32 65, !insn.addr !1577
  %85 = sub i32 %83, %84, !insn.addr !1577
  store i32 %85, i32* %82, align 4, !insn.addr !1577
  %86 = trunc i16 %67 to i8, !insn.addr !1578
  %87 = mul i8 %86, 2, !insn.addr !1578
  %88 = icmp ult i8 %87, %86, !insn.addr !1578
  %89 = icmp eq i8 %87, 0, !insn.addr !1578
  %90 = or i1 %88, %89, !insn.addr !1579
  br i1 %90, label %dec_label_pc_4046a6, label %dec_label_pc_404673, !insn.addr !1579

dec_label_pc_404673:                              ; preds = %dec_label_pc_404632
  ret i32 %80, !insn.addr !1580

dec_label_pc_4046a6:                              ; preds = %dec_label_pc_404632
  %91 = and i32 %68, -256, !insn.addr !1578
  %92 = zext i8 %87 to i32, !insn.addr !1578
  %93 = or i32 %91, %92, !insn.addr !1578
  store i16 %67, i16* bitcast (i32* @global_var_40c19e to i16*), align 4, !insn.addr !1581
  %94 = add nsw i32 %93, 106, !insn.addr !1582
  %95 = add i32 %94, %80, !insn.addr !1582
  %96 = inttoptr i32 %95 to i32*, !insn.addr !1582
  %97 = load i32, i32* %96, align 4, !insn.addr !1582
  %98 = or i32 %97, 1, !insn.addr !1582
  store i32 %98, i32* %96, align 4, !insn.addr !1582
  %99 = load i16, i16* @global_var_4117f4, align 2, !insn.addr !1583
  %100 = icmp eq i16 %99, 0, !insn.addr !1584
  %101 = icmp eq i1 %100, false, !insn.addr !1585
  br i1 %101, label %dec_label_pc_4046ea, label %dec_label_pc_4046ce, !insn.addr !1585

dec_label_pc_4046ce:                              ; preds = %dec_label_pc_4046a6
  store i32 1583284304, i32* inttoptr (i32 1780094964 to i32*), align 4, !insn.addr !1586
  store i32 4314068, i32* @global_var_410b6e, align 4, !insn.addr !1587
  ret i32 0, !insn.addr !1588

dec_label_pc_4046ea:                              ; preds = %dec_label_pc_4046a6
  %102 = zext i16 %99 to i32, !insn.addr !1583
  %103 = and i32 %80, -65536, !insn.addr !1583
  %104 = or i32 %103, %102, !insn.addr !1583
  call void @__asm_out.1(i32 51, i32 %104), !insn.addr !1589
  %105 = and i8 %87, 30, !insn.addr !1590
  %106 = icmp eq i8 %105, 0, !insn.addr !1590
  br i1 %106, label %112, label %107, !insn.addr !1590

; <label>:107:                                    ; preds = %dec_label_pc_4046ea
  %108 = add i32 %0, -117, !insn.addr !1590
  %109 = inttoptr i32 %108 to i8*, !insn.addr !1590
  %110 = load i8, i8* %109, align 1, !insn.addr !1590
  %111 = shl i8 %110, %105, !insn.addr !1590
  store i8 %111, i8* %109, align 1, !insn.addr !1590
  br label %112, !insn.addr !1590

; <label>:112:                                    ; preds = %dec_label_pc_4046ea, %107
  %113 = udiv i32 %68, 256, !insn.addr !1591
  %114 = add i32 %113, %2, !insn.addr !1591
  %115 = and i32 %114, 255, !insn.addr !1591
  %116 = and i32 %2, -256, !insn.addr !1591
  %117 = or i32 %115, %116, !insn.addr !1591
  %118 = add i32 %117, 76, !insn.addr !1592
  %119 = inttoptr i32 %118 to i8*, !insn.addr !1592
  %120 = load i8, i8* %119, align 1, !insn.addr !1592
  %121 = udiv i8 %120, 2, !insn.addr !1592
  %122 = shl i8 %120, 7, !insn.addr !1592
  %123 = or i8 %121, %122, !insn.addr !1592
  store i8 %123, i8* %119, align 1, !insn.addr !1592
  %124 = ashr i32 %80, 31, !insn.addr !1593
  %125 = add nsw i32 %124, 104, !insn.addr !1594
  %126 = inttoptr i32 %125 to i8*, !insn.addr !1594
  %127 = load i8, i8* %126, align 1, !insn.addr !1594
  %128 = trunc i32 %124 to i8, !insn.addr !1594
  %129 = add i8 %127, %128, !insn.addr !1594
  store i8 %129, i8* %126, align 1, !insn.addr !1594
  %130 = add i32 %104, 1, !insn.addr !1595
  %131 = add i32 %104, -23, !insn.addr !1596
  %132 = inttoptr i32 %131 to i8*, !insn.addr !1596
  %133 = load i8, i8* %132, align 1, !insn.addr !1596
  %134 = add i8 %133, %128, !insn.addr !1596
  store i8 %134, i8* %132, align 1, !insn.addr !1596
  ret i32 %130, !insn.addr !1597
}

define i32 @function_404705(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_404705:
  %storemerge.in.reg2mem = alloca i8, !insn.addr !1598
  %storemerge1.reg2mem = alloca i32, !insn.addr !1598
  %merge.reg2mem = alloca i32, !insn.addr !1598
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-34 = alloca i32, align 4
  %8 = add i32 %3, -1398600508, !insn.addr !1598
  %9 = inttoptr i32 %8 to i8*, !insn.addr !1598
  %10 = load i8, i8* %9, align 1, !insn.addr !1598
  %11 = trunc i32 %6 to i8, !insn.addr !1598
  %12 = add i8 %10, %11, !insn.addr !1598
  store i8 %12, i8* %9, align 1, !insn.addr !1598
  %13 = add i32 %5, 1, !insn.addr !1599
  %14 = icmp slt i32 %13, 0, !insn.addr !1599
  %15 = icmp eq i1 %14, false, !insn.addr !1600
  br i1 %15, label %dec_label_pc_40473e, label %dec_label_pc_40470f, !insn.addr !1600

dec_label_pc_40470f:                              ; preds = %dec_label_pc_404705
  %16 = add i32 %0, 94, !insn.addr !1601
  %17 = inttoptr i32 %16 to i8*, !insn.addr !1601
  store i8 -1, i8* %17, align 1, !insn.addr !1601
  ret i32 %6, !insn.addr !1602

dec_label_pc_40473d:                              ; preds = %94, %dec_label_pc_404788, %40
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !1603

dec_label_pc_40473e:                              ; preds = %dec_label_pc_404705
  %18 = and i32 %5, 15, !insn.addr !1599
  %19 = icmp eq i32 %18, 15, !insn.addr !1599
  %20 = icmp ult i8 %12, %10, !insn.addr !1598
  %21 = add i32 %2, 8, !insn.addr !1604
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1604
  %23 = load i32, i32* %22, align 4, !insn.addr !1604
  %24 = and i8 %11, 14, !insn.addr !1605
  %25 = icmp ugt i8 %24, 9, !insn.addr !1605
  %26 = or i1 %19, %25, !insn.addr !1605
  %27 = icmp ugt i8 %11, -103
  %28 = or i1 %27, %20
  br i1 %26, label %29, label %34, !insn.addr !1605

; <label>:29:                                     ; preds = %dec_label_pc_40473e
  %.v = select i1 %28, i8 -102, i8 -6
  %30 = add i8 %.v, %11, !insn.addr !1605
  %31 = zext i8 %30 to i32, !insn.addr !1605
  %32 = and i32 %6, -256, !insn.addr !1605
  %33 = or i32 %32, %31, !insn.addr !1605
  store i32 %33, i32* %storemerge1.reg2mem, !insn.addr !1605
  store i8 %30, i8* %storemerge.in.reg2mem, !insn.addr !1605
  br label %40, !insn.addr !1605

; <label>:34:                                     ; preds = %dec_label_pc_40473e
  %35 = add i8 %11, -96, !insn.addr !1605
  %36 = select i1 %28, i8 %35, i8 %11, !insn.addr !1605
  %37 = zext i8 %36 to i32, !insn.addr !1605
  %38 = and i32 %6, -256, !insn.addr !1605
  %39 = or i32 %38, %37, !insn.addr !1605
  store i32 %39, i32* %storemerge1.reg2mem, !insn.addr !1605
  store i8 %36, i8* %storemerge.in.reg2mem, !insn.addr !1605
  br label %40, !insn.addr !1605

; <label>:40:                                     ; preds = %29, %34
  %storemerge.in.reload = load i8, i8* %storemerge.in.reg2mem
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  %storemerge = icmp eq i8 %storemerge.in.reload, 0
  %41 = or i1 %28, %storemerge, !insn.addr !1606
  store i32 %storemerge1.reload, i32* %merge.reg2mem, !insn.addr !1606
  br i1 %41, label %dec_label_pc_40473d, label %dec_label_pc_40474d, !insn.addr !1606

dec_label_pc_40474d:                              ; preds = %40
  %42 = add i32 %23, 81, !insn.addr !1607
  %43 = inttoptr i32 %42 to i8*, !insn.addr !1607
  %44 = load i8, i8* %43, align 1, !insn.addr !1607
  %45 = trunc i32 %4 to i8, !insn.addr !1607
  %46 = or i8 %44, %45, !insn.addr !1607
  store i8 %46, i8* %43, align 1, !insn.addr !1607
  %47 = call i32 @unknown_2ee09400(i32 1, i32 175181823, i32 %0, i32 %1), !insn.addr !1608
  %48 = icmp eq i32 %47, 0, !insn.addr !1609
  br i1 %48, label %dec_label_pc_404788, label %dec_label_pc_40475b, !insn.addr !1610

dec_label_pc_40475b:                              ; preds = %dec_label_pc_40474d
  %49 = and i32 %47, -256, !insn.addr !1611
  %50 = add i32 %49, 1383639688, !insn.addr !1612
  %51 = and i32 %50, -256, !insn.addr !1613
  %52 = or i32 %51, 15, !insn.addr !1613
  %53 = add i32 %52, -1588592576, !insn.addr !1614
  ret i32 %53, !insn.addr !1614

dec_label_pc_404788:                              ; preds = %dec_label_pc_40474d
  %54 = call i32 @unknown_7d40b032(i32 %4, i32 -2123845264), !insn.addr !1615
  %55 = add i32 %2, -120, !insn.addr !1616
  store i32 %55, i32* %stack_var_-34, align 4, !insn.addr !1617
  %56 = ptrtoint i32* %stack_var_-34 to i32, !insn.addr !1617
  %57 = mul i32 %55, %55, !insn.addr !1618
  %58 = inttoptr i32 %23 to i32*, !insn.addr !1619
  %59 = load i32, i32* %58, align 4, !insn.addr !1619
  %60 = xor i32 %59, %23, !insn.addr !1619
  store i32 %60, i32* %58, align 4, !insn.addr !1619
  %61 = or i32 %56, 1, !insn.addr !1620
  %62 = icmp slt i32 %61, 0, !insn.addr !1620
  %63 = trunc i32 %61 to i8, !insn.addr !1620
  %64 = call i8 @llvm.ctpop.i8(i8 %63), !range !1621, !insn.addr !1620
  %65 = and i8 %64, 1, !insn.addr !1620
  %66 = icmp eq i8 %65, 0, !insn.addr !1620
  %67 = zext i1 %66 to i32, !insn.addr !1622
  %68 = zext i1 %62 to i32, !insn.addr !1622
  %69 = mul i32 %67, 1024, !insn.addr !1622
  %70 = mul i32 %68, 32768, !insn.addr !1622
  %71 = and i32 %57, -65281, !insn.addr !1622
  %72 = or i32 %71, %70, !insn.addr !1622
  %73 = or i32 %72, %69, !insn.addr !1622
  %74 = or i32 %73, 512, !insn.addr !1622
  %75 = load i32, i32* inttoptr (i32 4197064 to i32*), align 8, !insn.addr !1623
  %76 = add nsw i32 %74, -46, !insn.addr !1624
  %77 = inttoptr i32 %76 to i32*, !insn.addr !1624
  %78 = load i32, i32* %77, align 4, !insn.addr !1624
  %79 = mul i32 %78, 4194304, !insn.addr !1624
  %80 = udiv i32 %78, 1024, !insn.addr !1624
  %81 = or i32 %80, %79, !insn.addr !1624
  store i32 %81, i32* %77, align 4, !insn.addr !1624
  %82 = select i1 %7, i32 -4, i32 4, !insn.addr !1625
  %83 = add i32 %54, %82, !insn.addr !1625
  %84 = add i32 %83, -117, !insn.addr !1626
  %85 = inttoptr i32 %84 to i8*, !insn.addr !1626
  %86 = load i8, i8* %85, align 1, !insn.addr !1626
  %87 = add i8 %86, 27, !insn.addr !1626
  store i8 %87, i8* %85, align 1, !insn.addr !1626
  %88 = add i32 %2, -1854691, !insn.addr !1627
  %89 = inttoptr i32 %88 to i8*, !insn.addr !1627
  %90 = load i8, i8* %89, align 1, !insn.addr !1627
  %91 = trunc i32 %75 to i8
  %92 = and i8 %91, 31, !insn.addr !1627
  %93 = icmp eq i8 %92, 0, !insn.addr !1627
  store i32 %83, i32* %merge.reg2mem, !insn.addr !1627
  br i1 %93, label %dec_label_pc_40473d, label %94, !insn.addr !1627

; <label>:94:                                     ; preds = %dec_label_pc_404788
  %95 = icmp ult i8 %86, -27, !insn.addr !1626
  %96 = zext i1 %95 to i8, !insn.addr !1627
  %97 = shl i8 %90, %92, !insn.addr !1627
  %98 = zext i8 %90 to i16, !insn.addr !1627
  %99 = sub nsw i8 9, %92, !insn.addr !1627
  %100 = zext i8 %99 to i16, !insn.addr !1627
  %101 = lshr i16 %98, %100, !insn.addr !1627
  %102 = add nsw i8 %92, -1, !insn.addr !1627
  %103 = shl i8 %96, %102, !insn.addr !1627
  %104 = trunc i16 %101 to i8
  %105 = or i8 %103, %97
  %106 = or i8 %105, %104, !insn.addr !1627
  store i8 %106, i8* %89, align 1, !insn.addr !1627
  store i32 %83, i32* %merge.reg2mem, !insn.addr !1627
  br label %dec_label_pc_40473d, !insn.addr !1627
}

define i32 @function_4047df() local_unnamed_addr {
dec_label_pc_4047df:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = add i32 %1, -993722304, !insn.addr !1628
  %3 = inttoptr i32 %2 to i8*, !insn.addr !1628
  %4 = load i8, i8* %3, align 1, !insn.addr !1628
  %5 = trunc i32 %1 to i8, !insn.addr !1628
  %6 = sub i8 %4, %5, !insn.addr !1628
  store i8 %6, i8* %3, align 1, !insn.addr !1628
  %7 = bitcast i32* %eax to i8*
  %8 = load i8, i8* %7, align 4, !insn.addr !1629
  %9 = udiv i32 %1, 256, !insn.addr !1629
  %10 = trunc i32 %9 to i8, !insn.addr !1629
  %11 = and i8 %8, %10, !insn.addr !1629
  %12 = load i32, i32* %eax, align 4, !insn.addr !1629
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1629
  store i8 %11, i8* %13, align 1, !insn.addr !1629
  %14 = add i32 %0, -1960610487, !insn.addr !1630
  %15 = inttoptr i32 %14 to i8*, !insn.addr !1630
  %16 = load i8, i8* %15, align 1, !insn.addr !1630
  %17 = add i8 %16, 21, !insn.addr !1630
  %18 = icmp ugt i8 %16, -22, !insn.addr !1630
  store i8 %17, i8* %15, align 1, !insn.addr !1630
  %19 = load i32, i32* %eax, align 4, !insn.addr !1631
  %20 = trunc i32 %19 to i8, !insn.addr !1631
  %21 = zext i1 %18 to i8, !insn.addr !1631
  %22 = add i8 %20, %5, !insn.addr !1631
  %23 = add i8 %22, %21, !insn.addr !1631
  %24 = icmp ule i8 %23, %20, !insn.addr !1631
  %25 = icmp ult i8 %22, %20, !insn.addr !1631
  %26 = select i1 %18, i1 %24, i1 %25, !insn.addr !1631
  %27 = call i32 @__asm_sti(), !insn.addr !1632
  %28 = zext i1 %26 to i32, !insn.addr !1633
  %29 = add i32 %27, 4243840, !insn.addr !1633
  %30 = add i32 %29, %28, !insn.addr !1633
  %31 = udiv i32 %30, 256, !insn.addr !1634
  %32 = add i32 %31, %30, !insn.addr !1634
  %33 = and i32 %32, 255, !insn.addr !1634
  %34 = and i32 %30, -256, !insn.addr !1634
  %35 = or i32 %33, %34, !insn.addr !1634
  %36 = add i32 %35, 9437196, !insn.addr !1635
  %37 = inttoptr i32 %36 to i8*, !insn.addr !1635
  %38 = load i8, i8* %37, align 1, !insn.addr !1635
  %39 = or i8 %38, %10, !insn.addr !1635
  store i8 %39, i8* %37, align 1, !insn.addr !1635
  ret i32 %35, !insn.addr !1636
}

define i32 @function_404812(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_404812:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = load i32, i32* inttoptr (i32 440468080 to i32*), align 16, !insn.addr !1637
  %5 = call i8 @__asm_in.7(i8 0), !insn.addr !1638
  %6 = sext i8 %5 to i32, !insn.addr !1638
  %7 = and i32 %3, -256, !insn.addr !1638
  %8 = or i32 %7, %6, !insn.addr !1638
  %9 = add i32 %2, -990497296, !insn.addr !1639
  %10 = inttoptr i32 %9 to i8*, !insn.addr !1639
  %11 = load i8, i8* %10, align 1, !insn.addr !1639
  %12 = trunc i32 %4 to i8, !insn.addr !1639
  %13 = add i8 %11, %12, !insn.addr !1639
  store i8 %13, i8* %10, align 1, !insn.addr !1639
  %14 = add i32 %8, -1787315594, !insn.addr !1640
  %15 = icmp slt i32 %14, 0, !insn.addr !1640
  br i1 %15, label %dec_label_pc_404881, label %dec_label_pc_404831, !insn.addr !1641

dec_label_pc_404831:                              ; preds = %dec_label_pc_404812
  %16 = call i32 @unknown_864086b4(i32 %1), !insn.addr !1642
  %17 = add i32 %4, -20, !insn.addr !1643
  %18 = inttoptr i32 %17 to %_IO_FILE*, !insn.addr !1644
  %19 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %18, i8* inttoptr (i32 6340320 to i8*)), !insn.addr !1645
  ret i32 %0, !insn.addr !1646

dec_label_pc_404881:                              ; preds = %dec_label_pc_404812
  %20 = inttoptr i32 %14 to i32*, !insn.addr !1647
  %21 = load i32, i32* %20, align 4, !insn.addr !1647
  %22 = mul i32 %21, 16384, !insn.addr !1647
  %23 = udiv i32 %21, 262144, !insn.addr !1647
  %24 = or i32 %23, %22, !insn.addr !1647
  store i32 %24, i32* %20, align 4, !insn.addr !1647
  %25 = add i32 %2, -763000892, !insn.addr !1648
  %26 = inttoptr i32 %25 to i8*, !insn.addr !1648
  %27 = load i8, i8* %26, align 1, !insn.addr !1648
  %28 = mul i8 %27, 2, !insn.addr !1648
  %29 = lshr i8 %27, 7, !insn.addr !1648
  %30 = or i8 %29, %28, !insn.addr !1648
  store i8 %30, i8* %26, align 1, !insn.addr !1648
  %31 = add i32 %4, 26, !insn.addr !1649
  %32 = inttoptr i32 %31 to i32*, !insn.addr !1649
  %33 = load i32, i32* %32, align 4, !insn.addr !1649
  %34 = sdiv i32 %33, 524288, !insn.addr !1649
  store i32 %34, i32* %32, align 4, !insn.addr !1649
  %35 = add i32 %2, -1985221382, !insn.addr !1650
  %36 = inttoptr i32 %35 to i8*, !insn.addr !1650
  %37 = load i8, i8* %36, align 1, !insn.addr !1650
  %38 = udiv i8 %37, 4, !insn.addr !1650
  %39 = mul i8 %37, 64, !insn.addr !1650
  %40 = or i8 %38, %39, !insn.addr !1650
  store i8 %40, i8* %36, align 1, !insn.addr !1650
  %41 = add nsw i32 %6, 255, !insn.addr !1651
  %42 = and i32 %41, 255, !insn.addr !1651
  %43 = and i32 %14, -256, !insn.addr !1651
  %44 = or i32 %43, %42, !insn.addr !1651
  ret i32 %44, !insn.addr !1652
}

define i32 @function_4048b0() local_unnamed_addr {
dec_label_pc_4048b0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = zext i16 %5 to i32, !insn.addr !1653
  %7 = add i32 %0, -126, !insn.addr !1654
  %8 = inttoptr i32 %7 to i8*, !insn.addr !1654
  %9 = load i8, i8* %8, align 1, !insn.addr !1654
  %10 = sub i8 0, %9
  %11 = sub i8 %10, 1
  store i8 %11, i8* %8, align 1, !insn.addr !1654
  %12 = trunc i32 %3 to i16, !insn.addr !1655
  %13 = call i32 @__asm_in(i16 %12), !insn.addr !1655
  %14 = add i32 %13, 20, !insn.addr !1656
  %15 = and i32 %2, -256, !insn.addr !1657
  %16 = or i32 %15, 229, !insn.addr !1657
  %17 = inttoptr i32 %14 to i32*, !insn.addr !1658
  %18 = load i32, i32* %17, align 4, !insn.addr !1658
  %19 = icmp eq i32 %18, 0, !insn.addr !1659
  br i1 %19, label %dec_label_pc_404914, label %dec_label_pc_4048cd, !insn.addr !1660

dec_label_pc_4048cd:                              ; preds = %dec_label_pc_4048b0
  %20 = add nsw i32 %6, -4, !insn.addr !1661
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1661
  store i32 %18, i32* %21, align 4, !insn.addr !1661
  %22 = add i32 %18, %3, !insn.addr !1662
  %23 = and i32 %22, -65536, !insn.addr !1663
  %24 = add i32 %1, -16, !insn.addr !1664
  %25 = inttoptr i32 %24 to i8*, !insn.addr !1664
  %26 = load i8, i8* %25, align 1, !insn.addr !1664
  %27 = mul i8 %26, 8, !insn.addr !1664
  store i8 %27, i8* %25, align 1, !insn.addr !1664
  %28 = mul i32 %4, 2, !insn.addr !1665
  %29 = add i32 %28, %16, !insn.addr !1665
  %30 = inttoptr i32 %29 to i8*, !insn.addr !1665
  store i8 117, i8* %30, align 1, !insn.addr !1665
  %31 = call i8 @__asm_in.7(i8 -117), !insn.addr !1666
  %32 = sext i8 %31 to i32, !insn.addr !1666
  %33 = or i32 %23, %32, !insn.addr !1666
  %34 = add nsw i32 %6, -8, !insn.addr !1667
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1667
  %36 = add nsw i32 %6, -12, !insn.addr !1668
  %37 = add nsw i32 %6, -16, !insn.addr !1668
  %38 = add nsw i32 %6, -20, !insn.addr !1668
  %39 = add nsw i32 %6, -24, !insn.addr !1668
  %40 = add nsw i32 %6, -28, !insn.addr !1668
  %41 = add nsw i32 %6, -32, !insn.addr !1668
  %42 = add nsw i32 %6, -36, !insn.addr !1668
  %43 = add nsw i32 %6, -40, !insn.addr !1668
  %44 = inttoptr i32 %36 to i32*, !insn.addr !1668
  store i32 %33, i32* %44, align 4, !insn.addr !1668
  %45 = inttoptr i32 %37 to i32*, !insn.addr !1668
  %46 = inttoptr i32 %38 to i32*, !insn.addr !1668
  store i32 %22, i32* %46, align 4, !insn.addr !1668
  %47 = inttoptr i32 %39 to i32*, !insn.addr !1668
  store i32 %16, i32* %47, align 4, !insn.addr !1668
  %48 = inttoptr i32 %40 to i32*, !insn.addr !1668
  store i32 %34, i32* %48, align 4, !insn.addr !1668
  %49 = inttoptr i32 %41 to i32*, !insn.addr !1668
  %50 = inttoptr i32 %42 to i32*, !insn.addr !1668
  store i32 %14, i32* %50, align 4, !insn.addr !1668
  %51 = inttoptr i32 %43 to i32*, !insn.addr !1668
  %52 = add nsw i32 %6, -44, !insn.addr !1669
  %53 = inttoptr i32 %52 to i32*, !insn.addr !1669
  store i32 %22, i32* %53, align 4, !insn.addr !1669
  %54 = add nsw i32 %16, 4, !insn.addr !1670
  %55 = inttoptr i32 %54 to i32*, !insn.addr !1670
  %56 = load i32, i32* %55, align 4, !insn.addr !1670
  %57 = and i32 %56, 95, !insn.addr !1670
  store i32 %57, i32* %55, align 4, !insn.addr !1670
  ret i32 %33, !insn.addr !1671

dec_label_pc_404914:                              ; preds = %dec_label_pc_4048b0
  %58 = add i32 %1, 1, !insn.addr !1672
  %59 = add i32 %16, -1034041024, !insn.addr !1673
  %60 = inttoptr i32 %59 to i8*, !insn.addr !1673
  %61 = load i8, i8* %60, align 1, !insn.addr !1673
  %62 = trunc i32 %4 to i8, !insn.addr !1673
  %63 = or i8 %61, %62, !insn.addr !1673
  store i8 %63, i8* %60, align 1, !insn.addr !1673
  %64 = inttoptr i32 %14 to i8*, !insn.addr !1674
  %65 = load i8, i8* %64, align 1, !insn.addr !1674
  %66 = zext i8 %65 to i32, !insn.addr !1674
  %67 = add nsw i32 %6, -4, !insn.addr !1675
  %68 = inttoptr i32 %67 to i32*, !insn.addr !1675
  store i32 %58, i32* %68, align 4, !insn.addr !1675
  %69 = add nsw i32 %6, -8, !insn.addr !1676
  %70 = inttoptr i32 %69 to i32*, !insn.addr !1676
  store i32 58, i32* %70, align 4, !insn.addr !1676
  %71 = add i32 %16, 1107132741, !insn.addr !1677
  %72 = inttoptr i32 %71 to i8*, !insn.addr !1677
  %73 = load i8, i8* %72, align 2, !insn.addr !1677
  %74 = or i8 %73, %62, !insn.addr !1677
  store i8 %74, i8* %72, align 2, !insn.addr !1677
  %75 = add i32 %1, -61, !insn.addr !1678
  %76 = inttoptr i32 %75 to i8*, !insn.addr !1678
  %77 = load i8, i8* %76, align 1, !insn.addr !1678
  %78 = add i8 %77, -27, !insn.addr !1678
  store i8 %78, i8* %76, align 1, !insn.addr !1678
  %79 = inttoptr i32 %66 to i8*, !insn.addr !1679
  %80 = load i8, i8* %79, align 1, !insn.addr !1679
  %81 = or i8 %80, %65, !insn.addr !1679
  store i8 %81, i8* %79, align 1, !insn.addr !1679
  %82 = add nsw i32 %66, -4, !insn.addr !1680
  %83 = inttoptr i32 %82 to i32*, !insn.addr !1680
  store i32 %58, i32* %83, align 4, !insn.addr !1680
  %84 = add nuw nsw i32 %66, 4, !insn.addr !1681
  %85 = inttoptr i32 %84 to i32*, !insn.addr !1681
  %86 = load i32, i32* %85, align 4, !insn.addr !1681
  %87 = and i32 %86, -65281, !insn.addr !1682
  %88 = or i32 %87, 57088, !insn.addr !1682
  ret i32 %88, !insn.addr !1683
}

define i32 @function_404945() local_unnamed_addr {
dec_label_pc_404945:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, 1, !insn.addr !1684
  %5 = add i32 %0, -118, !insn.addr !1685
  %6 = inttoptr i32 %5 to i8*, !insn.addr !1685
  %7 = load i8, i8* %6, align 1, !insn.addr !1685
  %8 = trunc i32 %2 to i8, !insn.addr !1685
  %9 = add i8 %7, %8, !insn.addr !1685
  %10 = icmp eq i8 %9, 0, !insn.addr !1685
  store i8 %9, i8* %6, align 1, !insn.addr !1685
  %11 = trunc i32 %4 to i8, !insn.addr !1686
  store i8 %11, i8* bitcast (i32* @global_var_4102d8 to i8*), align 4, !insn.addr !1686
  %12 = icmp eq i1 %10, false, !insn.addr !1687
  br i1 %12, label %dec_label_pc_40497b, label %dec_label_pc_40495b, !insn.addr !1687

dec_label_pc_40495b:                              ; preds = %dec_label_pc_404945
  %13 = icmp ult i8 %9, %7, !insn.addr !1685
  %14 = add i32 %1, -2046820353, !insn.addr !1688
  %15 = inttoptr i32 %14 to i32*, !insn.addr !1688
  %16 = load i32, i32* %15, align 4, !insn.addr !1688
  %17 = mul i32 %16, 2, !insn.addr !1688
  %18 = zext i1 %13 to i32, !insn.addr !1688
  %19 = or i32 %17, %18, !insn.addr !1688
  store i32 %19, i32* %15, align 4, !insn.addr !1688
  ret i32 %4, !insn.addr !1689

dec_label_pc_40497b:                              ; preds = %dec_label_pc_404945
  ret i32 %4, !insn.addr !1690
}

define i32 @function_4049b1() local_unnamed_addr {
dec_label_pc_4049b1:
  %0 = call i32 @__asm_wait(), !insn.addr !1691
  ret i32 %0, !insn.addr !1692
}

define i32 @function_404a05() local_unnamed_addr {
dec_label_pc_404a05:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404a09() local_unnamed_addr {
dec_label_pc_404a09:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -1956724722, !insn.addr !1693
  %2 = inttoptr i32 %1 to i32*, !insn.addr !1693
  %3 = load i32, i32* %2, align 4, !insn.addr !1693
  %4 = add i32 %3, -1, !insn.addr !1693
  store i32 %4, i32* %2, align 4, !insn.addr !1693
  %5 = call i32 @__asm_in.2(i32 198), !insn.addr !1694
  ret i32 %5, !insn.addr !1695
}

define i32 @function_404a44(i32 %arg1) local_unnamed_addr {
dec_label_pc_404a44:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1696
  %3 = inttoptr i32 %0 to i8*, !insn.addr !1696
  store i8 %2, i8* %3, align 1, !insn.addr !1696
  store i32 2687083, i32* @global_var_4102e0, align 4, !insn.addr !1697
  ret i32 %0, !insn.addr !1698
}

define i32 @function_404a60(i32 %arg1) local_unnamed_addr {
dec_label_pc_404a60:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404a69(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_404a69:
  %eax.0.reg2mem = alloca i32, !insn.addr !1699
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = and i32 %1, -8, !insn.addr !1700
  %6 = add i32 %3, 8, !insn.addr !1701
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1701
  %8 = load i32, i32* %7, align 4, !insn.addr !1701
  %9 = add i32 %8, 1, !insn.addr !1702
  %10 = icmp eq i32 %2, 0, !insn.addr !1703
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !1703
  br i1 %10, label %11, label %dec_label_pc_404a80, !insn.addr !1703

; <label>:11:                                     ; preds = %dec_label_pc_404a69
  %12 = add i32 %5, -1961004040, !insn.addr !1704
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1704
  %14 = call i32 @function_404a05(), !insn.addr !1703
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !1703
  br label %dec_label_pc_404a80, !insn.addr !1703

dec_label_pc_404a80:                              ; preds = %11, %dec_label_pc_404a69
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %15 = trunc i32 %eax.0.reload to i8, !insn.addr !1705
  store i8 %15, i8* inttoptr (i32 38175754 to i8*), align 2, !insn.addr !1705
  %16 = add i32 %eax.0.reload, -792785814, !insn.addr !1706
  %17 = inttoptr i32 %16 to i8*, !insn.addr !1706
  %18 = load i8, i8* %17, align 1, !insn.addr !1706
  %19 = trunc i32 %5 to i8, !insn.addr !1706
  %20 = add i8 %18, %19, !insn.addr !1706
  store i8 %20, i8* %17, align 1, !insn.addr !1706
  %21 = add i32 %5, 96, !insn.addr !1707
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1707
  %23 = load i32, i32* %22, align 8, !insn.addr !1707
  %24 = icmp ult i32 %0, %23, !insn.addr !1707
  %25 = inttoptr i32 %5 to i8*, !insn.addr !1708
  %26 = load i8, i8* %25, align 8, !insn.addr !1708
  %27 = udiv i32 %eax.0.reload, 256, !insn.addr !1708
  %28 = trunc i32 %27 to i8, !insn.addr !1708
  %29 = zext i1 %24 to i8, !insn.addr !1708
  %30 = add i8 %26, %28, !insn.addr !1708
  %31 = add i8 %30, %29, !insn.addr !1708
  %32 = icmp ule i8 %31, %26, !insn.addr !1708
  %33 = icmp ult i8 %30, %26, !insn.addr !1708
  %34 = select i1 %24, i1 %32, i1 %33, !insn.addr !1708
  store i8 %31, i8* %25, align 8, !insn.addr !1708
  %35 = add i32 %4, -119, !insn.addr !1709
  %36 = inttoptr i32 %35 to i32*, !insn.addr !1709
  %37 = load i32, i32* %36, align 4, !insn.addr !1709
  %38 = zext i1 %34 to i32, !insn.addr !1709
  %39 = udiv i32 %37, 2, !insn.addr !1709
  %40 = shl nuw i32 %38, 31, !insn.addr !1709
  %41 = or i32 %40, %39, !insn.addr !1709
  store i32 %41, i32* %36, align 4, !insn.addr !1709
  store i32 905971906, i32* inttoptr (i32 -4 to i32*), align 4, !insn.addr !1710
  %42 = call i32 @function_5bc1f55e(), !insn.addr !1711
  ret i32 %42, !insn.addr !1711
}

define i32 @function_404d0d() local_unnamed_addr {
dec_label_pc_404d0d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 59, !insn.addr !1712
  %2 = and i32 %1, 255, !insn.addr !1712
  %3 = and i32 %0, -256, !insn.addr !1712
  %4 = or i32 %2, %3, !insn.addr !1712
  ret i32 %4, !insn.addr !1713
}

define i32 @function_404d7a() local_unnamed_addr {
dec_label_pc_404d7a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 990541001, !insn.addr !1714
  %3 = inttoptr i32 %2 to i8*, !insn.addr !1714
  %4 = load i8, i8* %3, align 1, !insn.addr !1714
  %5 = trunc i32 %1 to i8, !insn.addr !1714
  %6 = or i8 %4, %5, !insn.addr !1714
  store i8 %6, i8* %3, align 1, !insn.addr !1714
  ret i32 %1, !insn.addr !1715
}

define i32 @function_404d9b() local_unnamed_addr {
dec_label_pc_404d9b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404da5() local_unnamed_addr {
dec_label_pc_404da5:
  %0 = call i32 @function_404d9b(), !insn.addr !1716
  ret i32 %0, !insn.addr !1716
}

define i32 @function_404db5() local_unnamed_addr {
dec_label_pc_404db5:
  %0 = call i32 @function_404e15(), !insn.addr !1717
  ret i32 %0, !insn.addr !1717
}

define i32 @function_404ddf() local_unnamed_addr {
dec_label_pc_404ddf:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404de7(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_404de7:
  %pf.0.reg2mem = alloca i1, !insn.addr !1718
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = icmp ne i1 %3, %2, !insn.addr !1718
  %6 = or i1 %4, %5, !insn.addr !1718
  br i1 %6, label %dec_label_pc_404ded, label %dec_label_pc_404de9, !insn.addr !1718

dec_label_pc_404de9:                              ; preds = %dec_label_pc_404de7
  %7 = icmp eq i32 %1, 0, !insn.addr !1719
  %8 = trunc i32 %1 to i8, !insn.addr !1719
  %9 = call i8 @llvm.ctpop.i8(i8 %8), !range !405, !insn.addr !1719
  %10 = and i8 %9, 1, !insn.addr !1719
  %11 = icmp eq i8 %10, 0, !insn.addr !1719
  %12 = icmp eq i1 %7, false, !insn.addr !1720
  store i1 %11, i1* %pf.0.reg2mem, !insn.addr !1720
  br i1 %12, label %13, label %dec_label_pc_404ded, !insn.addr !1720

; <label>:13:                                     ; preds = %dec_label_pc_404de9
  %14 = call i32 @function_404ddf(), !insn.addr !1720
  store i1 %11, i1* %pf.0.reg2mem, !insn.addr !1720
  br label %dec_label_pc_404ded, !insn.addr !1720

dec_label_pc_404ded:                              ; preds = %13, %dec_label_pc_404de9, %dec_label_pc_404de7
  %pf.0.reload = load i1, i1* %pf.0.reg2mem
  %15 = icmp eq i1 %pf.0.reload, false, !insn.addr !1721
  br i1 %15, label %dec_label_pc_404df9, label %dec_label_pc_404df5, !insn.addr !1721

dec_label_pc_404df5:                              ; preds = %dec_label_pc_404ded
  %16 = add i32 %0, -12, !insn.addr !1722
  %17 = inttoptr i32 %16 to i32*, !insn.addr !1722
  %18 = load i32, i32* %17, align 4, !insn.addr !1722
  ret i32 %18, !insn.addr !1723

dec_label_pc_404df9:                              ; preds = %dec_label_pc_404ded
  %19 = add i32 %0, -119, !insn.addr !1724
  %20 = inttoptr i32 %19 to i32*, !insn.addr !1724
  %21 = call i32 @__asm_in.2(i32 93), !insn.addr !1725
  ret i32 %21, !insn.addr !1726
}

define i32 @function_404e00(i32 %arg1) local_unnamed_addr {
dec_label_pc_404e00:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404e15() local_unnamed_addr {
dec_label_pc_404e15:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 4, !insn.addr !1727
  %2 = inttoptr i32 %1 to i32*, !insn.addr !1727
  %3 = load i32, i32* %2, align 4, !insn.addr !1727
  ret i32 %3, !insn.addr !1728
}

define i32 @function_404e19() local_unnamed_addr {
dec_label_pc_404e19:
  %ebx.0.reg2mem = alloca i32, !insn.addr !1729
  %eax.0.reg2mem = alloca i32, !insn.addr !1729
  %.pre-phi.reg2mem = alloca i8, !insn.addr !1729
  %storemerge.reg2mem = alloca i32, !insn.addr !1729
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %2 to i16, !insn.addr !1729
  %6 = trunc i32 %0 to i8
  call void @__asm_outsb(i16 %5, i8 %6), !insn.addr !1729
  %7 = add i32 %4, 38, !insn.addr !1730
  %8 = and i32 %7, 255, !insn.addr !1730
  %9 = and i32 %4, -256, !insn.addr !1730
  %10 = or i32 %8, %9, !insn.addr !1730
  %11 = udiv i32 %1, 32
  %12 = udiv i32 %1, 8192
  %13 = and i32 %12, 7, !insn.addr !1731
  %.masked = and i32 %11, 248
  %14 = or i32 %13, %.masked, !insn.addr !1731
  %15 = mul i32 %14, 256, !insn.addr !1731
  %16 = and i32 %1, -65281, !insn.addr !1731
  %17 = or i32 %15, %16, !insn.addr !1731
  %18 = inttoptr i32 %10 to i8*, !insn.addr !1732
  %19 = load i8, i8* %18, align 1, !insn.addr !1732
  %20 = trunc i32 %7 to i8, !insn.addr !1732
  %factor = mul i8 %20, 2
  %21 = add i8 %19, %factor, !insn.addr !1733
  %22 = icmp eq i8 %21, 0, !insn.addr !1733
  store i8 %21, i8* %18, align 1, !insn.addr !1733
  %23 = add i32 %17, 60, !insn.addr !1734
  %24 = inttoptr i32 %23 to i32*, !insn.addr !1734
  store i32 0, i32* %24, align 4, !insn.addr !1734
  br i1 %22, label %dec_label_pc_404e39, label %dec_label_pc_404e2c, !insn.addr !1735

dec_label_pc_404e2c:                              ; preds = %dec_label_pc_404e19
  %25 = call i32 @function_404e00(i32 %10), !insn.addr !1736
  %26 = add i32 %17, 89, !insn.addr !1737
  %27 = inttoptr i32 %26 to i32*, !insn.addr !1737
  %28 = load i32, i32* %27, align 4, !insn.addr !1737
  ret i32 %28, !insn.addr !1738

dec_label_pc_404e39:                              ; preds = %dec_label_pc_404e19
  %29 = add i32 %17, 16, !insn.addr !1739
  %30 = call i32 @unknown_a4056f0(i32 %29), !insn.addr !1740
  %31 = call i32 @__asm_in.2(i32 8), !insn.addr !1741
  %32 = inttoptr i32 %31 to i8*, !insn.addr !1742
  %33 = load i8, i8* %32, align 1, !insn.addr !1742
  %34 = trunc i32 %31 to i8, !insn.addr !1742
  %35 = add i8 %33, %34, !insn.addr !1742
  store i8 %35, i8* %32, align 1, !insn.addr !1742
  %36 = add i32 %17, -1065024060, !insn.addr !1743
  %37 = call i32 @__readfsdword(i32 %36), !insn.addr !1743
  %38 = add i32 %37, %31, !insn.addr !1743
  %39 = icmp eq i32 %38, 0, !insn.addr !1743
  br i1 %39, label %dec_label_pc_404e39.dec_label_pc_404e89_crit_edge, label %dec_label_pc_404e54, !insn.addr !1744

dec_label_pc_404e39.dec_label_pc_404e89_crit_edge: ; preds = %dec_label_pc_404e39
  %.pre = trunc i32 %2 to i8
  store i8 %.pre, i8* %.pre-phi.reg2mem
  store i32 0, i32* %eax.0.reg2mem
  store i32 %17, i32* %ebx.0.reg2mem
  br label %dec_label_pc_404e89

dec_label_pc_404e54:                              ; preds = %dec_label_pc_404e39
  %40 = icmp ult i32 %38, %31, !insn.addr !1743
  %41 = add i32 %2, -24, !insn.addr !1745
  %42 = inttoptr i32 %41 to i8*, !insn.addr !1745
  %43 = load i8, i8* %42, align 1, !insn.addr !1745
  %44 = trunc i32 %2 to i8
  %45 = zext i1 %40 to i8, !insn.addr !1745
  %46 = add i8 %45, %44, !insn.addr !1745
  %47 = sub i8 %43, %46, !insn.addr !1745
  %48 = and i8 %43, 15, !insn.addr !1745
  %49 = and i8 %46, 15, !insn.addr !1745
  %50 = sub nsw i8 %45, %49, !insn.addr !1745
  %51 = add nsw i8 %50, %48, !insn.addr !1745
  %52 = icmp ugt i8 %51, 15, !insn.addr !1745
  %53 = sub i8 %47, %45, !insn.addr !1745
  %54 = icmp ult i8 %43, %53, !insn.addr !1745
  %55 = icmp ne i8 %46, -1, !insn.addr !1745
  %56 = or i1 %55, %54, !insn.addr !1745
  %57 = icmp ult i8 %43, %46, !insn.addr !1745
  %58 = select i1 %40, i1 %56, i1 %57, !insn.addr !1745
  store i8 %47, i8* %42, align 1, !insn.addr !1745
  %59 = trunc i32 %38 to i8, !insn.addr !1746
  %60 = and i8 %59, 14, !insn.addr !1746
  %61 = icmp ugt i8 %60, 9, !insn.addr !1746
  %62 = or i1 %61, %52, !insn.addr !1746
  %63 = icmp ugt i8 %59, -103
  %64 = or i1 %63, %58
  br i1 %62, label %65, label %70, !insn.addr !1746

; <label>:65:                                     ; preds = %dec_label_pc_404e54
  %.v = select i1 %64, i32 102, i32 6
  %66 = add i32 %.v, %38, !insn.addr !1746
  %67 = and i32 %66, 255, !insn.addr !1746
  %68 = and i32 %38, -256, !insn.addr !1746
  %69 = or i32 %67, %68, !insn.addr !1746
  store i32 %69, i32* %storemerge.reg2mem, !insn.addr !1746
  br label %76, !insn.addr !1746

; <label>:70:                                     ; preds = %dec_label_pc_404e54
  %71 = add i32 %38, 96, !insn.addr !1746
  %72 = select i1 %64, i32 %71, i32 %38, !insn.addr !1746
  %73 = and i32 %72, 255, !insn.addr !1746
  %74 = and i32 %38, -256, !insn.addr !1746
  %75 = or i32 %73, %74, !insn.addr !1746
  store i32 %75, i32* %storemerge.reg2mem, !insn.addr !1746
  br label %76, !insn.addr !1746

; <label>:76:                                     ; preds = %65, %70
  %77 = and i32 %17, -256, !insn.addr !1747
  %78 = or i32 %77, 16, !insn.addr !1747
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %79 = add i32 %78, 1946846704, !insn.addr !1748
  %80 = inttoptr i32 %79 to i32*, !insn.addr !1748
  %81 = load i32, i32* %80, align 256, !insn.addr !1748
  %82 = add i32 %81, -1, !insn.addr !1748
  store i32 %82, i32* %80, align 256, !insn.addr !1748
  %83 = udiv i32 %3, 256, !insn.addr !1749
  %84 = add nuw nsw i32 %83, 16, !insn.addr !1749
  %85 = and i32 %84, 255, !insn.addr !1749
  %86 = or i32 %77, %85, !insn.addr !1749
  %87 = add i32 %86, 12, !insn.addr !1750
  %88 = inttoptr i32 %87 to i32*, !insn.addr !1750
  %89 = load i32, i32* %88, align 4, !insn.addr !1750
  %90 = add i32 %3, 1557204034, !insn.addr !1751
  %91 = inttoptr i32 %90 to i8*, !insn.addr !1751
  %92 = load i8, i8* %91, align 1, !insn.addr !1751
  %93 = trunc i32 %3 to i8, !insn.addr !1751
  %94 = or i8 %92, %93, !insn.addr !1751
  %95 = icmp eq i8 %94, 0, !insn.addr !1751
  store i8 %94, i8* %91, align 1, !insn.addr !1751
  store i8 %44, i8* %.pre-phi.reg2mem, !insn.addr !1752
  store i32 %89, i32* %eax.0.reg2mem, !insn.addr !1752
  store i32 %86, i32* %ebx.0.reg2mem, !insn.addr !1752
  br i1 %95, label %dec_label_pc_404e89, label %dec_label_pc_404e83, !insn.addr !1752

dec_label_pc_404e83:                              ; preds = %76
  %96 = inttoptr i32 %storemerge.reload to i32*, !insn.addr !1753
  %97 = and i32 %86, -65281, !insn.addr !1754
  %98 = or i32 %97, 21504, !insn.addr !1754
  %99 = trunc i32 %89 to i8
  %100 = add i8 %99, %44, !insn.addr !1755
  %101 = inttoptr i32 %2 to i8*, !insn.addr !1755
  store i8 %100, i8* %101, align 1, !insn.addr !1755
  store i8 %99, i8* %.pre-phi.reg2mem, !insn.addr !1755
  store i32 %98, i32* %ebx.0.reg2mem, !insn.addr !1755
  br label %dec_label_pc_404e89, !insn.addr !1755

dec_label_pc_404e89:                              ; preds = %dec_label_pc_404e39.dec_label_pc_404e89_crit_edge, %dec_label_pc_404e83, %76
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %102 = load i8, i8* inttoptr (i32 2059018619 to i8*), align 1, !insn.addr !1756
  %103 = xor i8 %102, %.pre-phi.reload, !insn.addr !1756
  store i8 %103, i8* inttoptr (i32 2059018619 to i8*), align 1, !insn.addr !1756
  %104 = add i32 %eax.0.reload, 199, !insn.addr !1757
  %105 = and i32 %104, 255, !insn.addr !1757
  %106 = and i32 %eax.0.reload, -256, !insn.addr !1757
  %107 = or i32 %105, %106, !insn.addr !1757
  %108 = add i32 %ebx.0.reload, -95554555, !insn.addr !1758
  %109 = inttoptr i32 %108 to i8*, !insn.addr !1758
  %110 = load i8, i8* %109, align 1, !insn.addr !1758
  %111 = add i8 %110, %.pre-phi.reload, !insn.addr !1758
  store i8 %111, i8* %109, align 1, !insn.addr !1758
  ret i32 %107, !insn.addr !1759
}

define i32 @function_404ea0() local_unnamed_addr {
dec_label_pc_404ea0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = icmp eq i1 %7, false, !insn.addr !1760
  br i1 %8, label %dec_label_pc_404eaa, label %dec_label_pc_404ea2, !insn.addr !1760

dec_label_pc_404ea2:                              ; preds = %dec_label_pc_404ea0
  %9 = call i32 @unknown_ffb04900(i32 %0, i32 -122), !insn.addr !1761
  br label %dec_label_pc_404eaa, !insn.addr !1761

dec_label_pc_404eaa:                              ; preds = %dec_label_pc_404ea2, %dec_label_pc_404ea0
  %10 = add i32 %0, 1, !insn.addr !1762
  %11 = trunc i32 %3 to i16, !insn.addr !1763
  %12 = call i32 @__asm_in(i16 %11), !insn.addr !1763
  %13 = and i32 %12, -256, !insn.addr !1764
  %14 = select i1 %6, i32 -1, i32 1, !insn.addr !1765
  %15 = add i32 %10, %14, !insn.addr !1765
  %16 = call i32 @unknown_9cf8a2d0(i32 %13), !insn.addr !1766
  %17 = add i32 %15, 4, !insn.addr !1767
  %18 = inttoptr i32 %17 to i32*, !insn.addr !1767
  %19 = load i32, i32* %18, align 4, !insn.addr !1767
  %20 = trunc i32 %4 to i8, !insn.addr !1768
  %21 = and i8 %20, 31, !insn.addr !1768
  %22 = icmp eq i8 %21, 0, !insn.addr !1768
  br i1 %22, label %30, label %23, !insn.addr !1768

; <label>:23:                                     ; preds = %dec_label_pc_404eaa
  %24 = inttoptr i32 %15 to i8*, !insn.addr !1768
  %25 = load i8, i8* %24, align 1, !insn.addr !1768
  %26 = lshr i8 %25, %21, !insn.addr !1768
  %27 = sub nsw i8 8, %21, !insn.addr !1768
  %28 = shl i8 %25, %27, !insn.addr !1768
  %29 = or i8 %26, %28, !insn.addr !1768
  store i8 %29, i8* %24, align 1, !insn.addr !1768
  br label %30, !insn.addr !1768

; <label>:30:                                     ; preds = %dec_label_pc_404eaa, %23
  %31 = add i32 %14, %1, !insn.addr !1765
  %32 = add i32 %2, -8, !insn.addr !1769
  %33 = inttoptr i32 %32 to i32*, !insn.addr !1769
  store i32 %19, i32* %33, align 4, !insn.addr !1769
  %34 = add i32 %2, -4, !insn.addr !1770
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1770
  %36 = inttoptr i32 %31 to i32*, !insn.addr !1771
  %37 = load i32, i32* %36, align 4, !insn.addr !1771
  %38 = add i32 %2, 235551689, !insn.addr !1772
  %39 = inttoptr i32 %38 to i8*, !insn.addr !1772
  %40 = load i8, i8* %39, align 1, !insn.addr !1772
  %41 = trunc i32 %37 to i8, !insn.addr !1772
  %42 = or i8 %40, %41, !insn.addr !1772
  store i8 %42, i8* %39, align 1, !insn.addr !1772
  %43 = mul i32 %31, 2, !insn.addr !1773
  %44 = add i32 %15, -32, !insn.addr !1774
  %45 = add i32 %44, %43, !insn.addr !1774
  %46 = inttoptr i32 %45 to i32*, !insn.addr !1774
  %47 = call i32 @function_404f0f(i16 %5), !insn.addr !1775
  ret i32 %47, !insn.addr !1775
}

define i32 @function_404efb() local_unnamed_addr {
dec_label_pc_404efb:
  %0 = call i32 @function_404f05(), !insn.addr !1776
  ret i32 %0, !insn.addr !1776
}

define i32 @function_404efd() local_unnamed_addr {
dec_label_pc_404efd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = inttoptr i32 %1 to i32*, !insn.addr !1777
  %4 = add i32 %0, 20, !insn.addr !1778
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1778
  ret i32 %2, !insn.addr !1778
}

define i32 @function_404f05() local_unnamed_addr {
dec_label_pc_404f05:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 43, !insn.addr !1779
  %2 = and i32 %1, 255, !insn.addr !1779
  %3 = and i32 %0, -256, !insn.addr !1779
  %4 = or i32 %2, %3, !insn.addr !1779
  ret i32 %4, !insn.addr !1779
}

define i32 @function_404f0a() local_unnamed_addr {
dec_label_pc_404f0a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404f0f(i16 %arg1) local_unnamed_addr {
dec_label_pc_404f0f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i16 %arg1, 1
  %4 = icmp eq i16 %3, 0
  %5 = add i32 %0, 8, !insn.addr !1780
  %6 = inttoptr i32 %5 to i32*, !insn.addr !1780
  %7 = add i32 %1, -2062764917, !insn.addr !1781
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1781
  %9 = select i1 %4, i32 -318767020, i32 -318767019, !insn.addr !1782
  %10 = add i32 %2, %9, !insn.addr !1782
  ret i32 %10, !insn.addr !1782
}

define i32 @function_404f2e() local_unnamed_addr {
dec_label_pc_404f2e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i32, !insn.addr !1783
  %3 = add i32 %0, 139, !insn.addr !1783
  %4 = add i32 %3, %2, !insn.addr !1783
  %5 = and i32 %4, 255, !insn.addr !1783
  %6 = and i32 %0, -256, !insn.addr !1783
  %7 = or i32 %5, %6, !insn.addr !1783
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1784
  %9 = load i32, i32* %8, align 4, !insn.addr !1784
  %10 = mul i32 %9, 2048, !insn.addr !1784
  %11 = udiv i32 %9, 2097152, !insn.addr !1784
  %12 = or i32 %11, %10, !insn.addr !1784
  store i32 %12, i32* %8, align 4, !insn.addr !1784
  ret i32 %7, !insn.addr !1785
}

define i32 @function_404f58() local_unnamed_addr {
dec_label_pc_404f58:
  %eax.0.reg2mem = alloca i32, !insn.addr !1786
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = icmp eq i32 %0, 1, !insn.addr !1786
  %3 = or i1 %2, %1, !insn.addr !1786
  br i1 %3, label %dec_label_pc_404f5a, label %4, !insn.addr !1786

; <label>:4:                                      ; preds = %dec_label_pc_404f58
  %5 = call i32 @function_404f0a(), !insn.addr !1786
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !1786
  br label %dec_label_pc_404f5a, !insn.addr !1786

dec_label_pc_404f5a:                              ; preds = %dec_label_pc_404f58, %4
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1787
}

define i32 @function_404f60(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_404f60:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_404f6d(i32 %arg1) local_unnamed_addr {
dec_label_pc_404f6d:
  %ebx.0.reg2mem = alloca i32, !insn.addr !1788
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %0, -2062912054, !insn.addr !1789
  %6 = inttoptr i32 %5 to i8*, !insn.addr !1789
  %7 = load i8, i8* %6, align 1, !insn.addr !1789
  %8 = trunc i32 %4 to i8
  %9 = or i8 %8, -35, !insn.addr !1789
  %10 = add i8 %7, %9, !insn.addr !1789
  store i8 %10, i8* %6, align 1, !insn.addr !1789
  %11 = trunc i32 %3 to i8, !insn.addr !1790
  %12 = add i32 %1, -1159580263, !insn.addr !1790
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1790
  %14 = load i8, i8* %13, align 1, !insn.addr !1790
  %15 = icmp ugt i8 %14, %11, !insn.addr !1790
  %16 = add i32 %1, -117, !insn.addr !1791
  %17 = inttoptr i32 %16 to i8*, !insn.addr !1791
  %18 = load i8, i8* %17, align 1, !insn.addr !1791
  %19 = trunc i32 %2 to i8, !insn.addr !1791
  %20 = zext i1 %15 to i8, !insn.addr !1791
  %21 = add i8 %18, %19, !insn.addr !1791
  %22 = add i8 %21, %20, !insn.addr !1791
  store i8 %22, i8* %17, align 1, !insn.addr !1791
  %23 = icmp eq i32 %1, 0, !insn.addr !1792
  %24 = icmp eq i1 %23, false, !insn.addr !1793
  br i1 %24, label %dec_label_pc_404f9c, label %dec_label_pc_404f99, !insn.addr !1793

dec_label_pc_404f99:                              ; preds = %dec_label_pc_404f6d
  %25 = and i32 %4, -4321280, !insn.addr !1794
  %26 = icmp ule i8 %22, %18, !insn.addr !1791
  %27 = icmp ult i8 %21, %18, !insn.addr !1791
  %28 = select i1 %15, i1 %26, i1 %27, !insn.addr !1791
  %29 = select i1 %28, i32 70, i32 69, !insn.addr !1795
  %30 = or i32 %25, %29, !insn.addr !1795
  %31 = or i32 %30, 4321048, !insn.addr !1796
  %32 = inttoptr i32 %31 to i32*, !insn.addr !1796
  %33 = load i32, i32* %32, align 4, !insn.addr !1796
  store i32 %33, i32* %ebx.0.reg2mem, !insn.addr !1796
  br label %dec_label_pc_404f9c, !insn.addr !1796

dec_label_pc_404f9c:                              ; preds = %dec_label_pc_404f99, %dec_label_pc_404f6d
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %34 = add i32 %ebx.0.reload, -64, !insn.addr !1797
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1797
  %36 = load i32, i32* %35, align 4, !insn.addr !1797
  %37 = inttoptr i32 %ebx.0.reload to i32*, !insn.addr !1798
  %38 = load i32, i32* %37, align 4, !insn.addr !1798
  %39 = add i32 %ebx.0.reload, 24, !insn.addr !1799
  %40 = icmp eq i32 %36, 0, !insn.addr !1800
  %41 = icmp eq i1 %40, false, !insn.addr !1801
  br i1 %41, label %dec_label_pc_404fd1, label %dec_label_pc_404fc2, !insn.addr !1801

dec_label_pc_404fc2:                              ; preds = %dec_label_pc_404f9c
  %42 = icmp ult i32 %38, 27393
  br i1 %42, label %dec_label_pc_404fc6, label %dec_label_pc_404fed, !insn.addr !1802

dec_label_pc_404fc6:                              ; preds = %dec_label_pc_404fc2
  %43 = add i32 %ebx.0.reload, 155, !insn.addr !1803
  %44 = and i32 %43, 255, !insn.addr !1803
  %45 = and i32 %39, -256, !insn.addr !1803
  %46 = or i32 %45, %44, !insn.addr !1803
  call void @__asm_int(i32 4), !insn.addr !1804
  ret i32 %46, !insn.addr !1805

dec_label_pc_404fd1:                              ; preds = %dec_label_pc_404f9c
  %47 = add i32 %0, 13, !insn.addr !1806
  %48 = inttoptr i32 %47 to i32*, !insn.addr !1806
  %49 = add i32 %38, -1970991304, !insn.addr !1807
  %50 = inttoptr i32 %49 to i32*, !insn.addr !1807
  %51 = load i32, i32* %50, align 4, !insn.addr !1807
  %52 = add i32 %51, -1, !insn.addr !1807
  store i32 %52, i32* %50, align 4, !insn.addr !1807
  %53 = load i8, i8* inttoptr (i32 265370368 to i8*), align 256, !insn.addr !1808
  %54 = udiv i32 %39, 256, !insn.addr !1808
  %55 = trunc i32 %54 to i8, !insn.addr !1808
  %56 = add i8 %53, %55, !insn.addr !1808
  store i8 %56, i8* inttoptr (i32 265370368 to i8*), align 256, !insn.addr !1808
  %57 = load i8, i8* inttoptr (i32 -1962906770 to i8*), align 2, !insn.addr !1809
  %58 = add i8 %57, 80, !insn.addr !1809
  store i8 %58, i8* inttoptr (i32 -1962906770 to i8*), align 2, !insn.addr !1809
  br label %dec_label_pc_404fed, !insn.addr !1809

dec_label_pc_404fed:                              ; preds = %dec_label_pc_404fc2, %dec_label_pc_404fd1
  %59 = call i32 @unknown_5ec599d9(), !insn.addr !1810
  store i32 %38, i32* %37, align 4, !insn.addr !1811
  %60 = call i32 @function_40506d(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1812
  ret i32 %60, !insn.addr !1812
}

define i32 @function_404ffe() local_unnamed_addr {
dec_label_pc_404ffe:
  %edx.0.reg2mem = alloca i32, !insn.addr !1813
  %eax.0.reg2mem = alloca i32, !insn.addr !1813
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = call i1 @__decompiler_undefined_function_2()
  %12 = trunc i32 %5 to i8, !insn.addr !1814
  %13 = zext i1 %11 to i8, !insn.addr !1814
  %14 = add i8 %12, -115, !insn.addr !1814
  %15 = add i8 %14, %13, !insn.addr !1814
  %16 = icmp ule i8 %15, %12, !insn.addr !1814
  %17 = icmp ugt i8 %12, 114, !insn.addr !1814
  %18 = select i1 %11, i1 %16, i1 %17, !insn.addr !1814
  %19 = icmp eq i1 %18, false, !insn.addr !1815
  br i1 %19, label %dec_label_pc_405018, label %dec_label_pc_405004, !insn.addr !1815

dec_label_pc_405004:                              ; preds = %dec_label_pc_404ffe
  %20 = icmp eq i8 %15, 0, !insn.addr !1814
  br i1 %20, label %dec_label_pc_405037, label %dec_label_pc_405008, !insn.addr !1816

dec_label_pc_405008:                              ; preds = %dec_label_pc_405004
  %21 = add i32 %2, 13, !insn.addr !1817
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1817
  %23 = load i32, i32* %22, align 4, !insn.addr !1817
  %24 = call i32 @unknown_130a2d0(i32 %23, i16 %6), !insn.addr !1818
  ret i32 %0, !insn.addr !1819

dec_label_pc_405018:                              ; preds = %dec_label_pc_404ffe
  %25 = and i32 %5, -65536, !insn.addr !1813
  %26 = zext i1 %10 to i32, !insn.addr !1813
  %27 = mul i32 %26, 4, !insn.addr !1813
  %28 = zext i1 %11 to i32, !insn.addr !1813
  %29 = zext i1 %9 to i32, !insn.addr !1813
  %30 = mul i32 %29, 16, !insn.addr !1813
  %31 = zext i1 %8 to i32, !insn.addr !1813
  %32 = mul i32 %31, 64, !insn.addr !1813
  %33 = zext i1 %7 to i32, !insn.addr !1813
  %34 = mul i32 %33, 128, !insn.addr !1813
  %35 = or i32 %32, %34, !insn.addr !1813
  %36 = or i32 %35, %30, !insn.addr !1813
  %37 = or i32 %36, %28, !insn.addr !1813
  %38 = or i32 %37, %27, !insn.addr !1813
  %39 = mul i32 %38, 256, !insn.addr !1813
  %40 = zext i8 %15 to i32, !insn.addr !1814
  %41 = or i32 %25, %40, !insn.addr !1813
  %42 = or i32 %41, %39, !insn.addr !1813
  %43 = or i32 %42, 512, !insn.addr !1814
  %44 = add i32 %1, 957183222, !insn.addr !1820
  %45 = inttoptr i32 %44 to i8*, !insn.addr !1820
  %46 = load i8, i8* %45, align 1, !insn.addr !1820
  %47 = xor i8 %46, %15, !insn.addr !1820
  store i8 %47, i8* %45, align 1, !insn.addr !1820
  store i32 %43, i32* %eax.0.reg2mem
  br label %dec_label_pc_405069

dec_label_pc_405037:                              ; preds = %dec_label_pc_405004
  %48 = call i32* @malloc(i32 4096), !insn.addr !1821
  %49 = icmp eq i32 %3, 0, !insn.addr !1822
  br i1 %49, label %dec_label_pc_40504f.thread, label %dec_label_pc_40504f, !insn.addr !1823

dec_label_pc_40504f.thread:                       ; preds = %dec_label_pc_405037
  %50 = call i32 @function_405328(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1823
  call void @llvm.trap()
  unreachable

dec_label_pc_40504f:                              ; preds = %dec_label_pc_405037
  %51 = add i32 %3, 24, !insn.addr !1824
  %52 = inttoptr i32 %3 to i32*, !insn.addr !1825
  store i32 10485760, i32* %52, align 4, !insn.addr !1825
  %53 = icmp slt i32 %3, 1
  store i32 %51, i32* %edx.0.reg2mem, !insn.addr !1826
  br i1 %53, label %dec_label_pc_405069, label %dec_label_pc_405061, !insn.addr !1826

dec_label_pc_405061:                              ; preds = %dec_label_pc_40504f
  %54 = add i32 %3, 16, !insn.addr !1827
  %55 = inttoptr i32 %54 to i32*, !insn.addr !1827
  store i32 %51, i32* %55, align 4, !insn.addr !1827
  %56 = add i32 %3, 20, !insn.addr !1828
  %57 = inttoptr i32 %56 to i32*, !insn.addr !1828
  ret i32 %4, !insn.addr !1829

dec_label_pc_405069:                              ; preds = %dec_label_pc_405018, %dec_label_pc_40504f
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %58 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !1830
  store i32 %edx.0.reload, i32* %58, align 4, !insn.addr !1830
  ret i32 %eax.0.reload, !insn.addr !1830
}

define i32 @function_40506d(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40506d:
  %cf.0.reg2mem = alloca i32, !insn.addr !1831
  %eax.0.reg2mem = alloca i32, !insn.addr !1831
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %0, 8, !insn.addr !1831
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1831
  %8 = load i32, i32* %7, align 4, !insn.addr !1831
  %9 = add i32 %3, 8, !insn.addr !1832
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1832
  %11 = load i32, i32* %10, align 4, !insn.addr !1832
  %12 = add i32 %2, -117, !insn.addr !1833
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1833
  %14 = load i32, i32* %13, align 4, !insn.addr !1833
  %15 = add i32 %0, 13, !insn.addr !1834
  %16 = inttoptr i32 %15 to i32*, !insn.addr !1834
  %17 = load i32, i32* %16, align 4, !insn.addr !1834
  %18 = trunc i32 %2 to i8, !insn.addr !1835
  %19 = and i8 %18, 31, !insn.addr !1835
  %20 = icmp eq i8 %19, 0, !insn.addr !1835
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !1835
  store i32 1, i32* %cf.0.reg2mem, !insn.addr !1835
  br i1 %20, label %dec_label_pc_40508b, label %21, !insn.addr !1835

; <label>:21:                                     ; preds = %dec_label_pc_40506d
  %22 = trunc i32 %17 to i8, !insn.addr !1835
  %23 = shl i8 %22, %19, !insn.addr !1835
  %24 = sub nsw i8 8, %19, !insn.addr !1835
  %25 = lshr i8 %22, %24, !insn.addr !1835
  %26 = or i8 %25, %23, !insn.addr !1835
  %27 = zext i8 %26 to i32, !insn.addr !1835
  %28 = and i32 %17, -256, !insn.addr !1835
  %29 = or i32 %28, %27, !insn.addr !1835
  %30 = and i8 %26, 1, !insn.addr !1835
  %31 = icmp ne i8 %30, 0, !insn.addr !1835
  %phitmp = icmp ne i1 %31, true
  %phitmp2 = zext i1 %phitmp to i32
  store i32 %29, i32* %eax.0.reg2mem, !insn.addr !1835
  store i32 %phitmp2, i32* %cf.0.reg2mem, !insn.addr !1835
  br label %dec_label_pc_40508b, !insn.addr !1835

dec_label_pc_40508b:                              ; preds = %21, %dec_label_pc_40506d
  %cf.0.reload = load i32, i32* %cf.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %32 = call i32 @unknown_8a40a340(i32 %eax.0.reload), !insn.addr !1836
  %33 = inttoptr i32 %32 to i8*, !insn.addr !1837
  %34 = load i8, i8* %33, align 1, !insn.addr !1837
  %35 = trunc i32 %32 to i8, !insn.addr !1837
  %36 = add i8 %34, %35, !insn.addr !1837
  %37 = add i8 %36, %35, !insn.addr !1838
  %38 = icmp slt i8 %37, 0, !insn.addr !1838
  store i8 %37, i8* %33, align 1, !insn.addr !1838
  br i1 %38, label %dec_label_pc_40511d, label %dec_label_pc_40509f, !insn.addr !1839

dec_label_pc_40509f:                              ; preds = %dec_label_pc_40508b
  %39 = add i32 %0, 1, !insn.addr !1840
  %40 = add i32 %32, %cf.0.reload, !insn.addr !1841
  %41 = mul i32 %40, 256
  %42 = sub i32 %39, %41
  %43 = and i32 %42, 65280, !insn.addr !1841
  %44 = and i32 %39, -65281, !insn.addr !1841
  %45 = or i32 %43, %44, !insn.addr !1841
  %46 = icmp ult i8 %37, %36, !insn.addr !1838
  %47 = add i32 %45, -1174663091, !insn.addr !1842
  %48 = inttoptr i32 %47 to i8*, !insn.addr !1842
  %49 = load i8, i8* %48, align 1, !insn.addr !1842
  %50 = zext i1 %46 to i8, !insn.addr !1842
  %51 = add i8 %50, %18, !insn.addr !1842
  %52 = add i8 %51, %49, !insn.addr !1842
  store i8 %52, i8* %48, align 1, !insn.addr !1842
  %53 = add i32 %32, 141, !insn.addr !1843
  %54 = and i32 %53, 255, !insn.addr !1843
  %55 = and i32 %32, -256, !insn.addr !1843
  %56 = or i32 %54, %55, !insn.addr !1843
  %57 = add i32 %56, 1, !insn.addr !1844
  %58 = add i32 %8, 53, !insn.addr !1845
  %59 = inttoptr i32 %58 to i32*, !insn.addr !1845
  store i32 %57, i32* %59, align 4, !insn.addr !1845
  %60 = add i32 %2, 16, !insn.addr !1846
  %61 = inttoptr i32 %60 to i8*, !insn.addr !1846
  %62 = load i8, i8* %61, align 1, !insn.addr !1846
  %63 = add i8 %62, -119, !insn.addr !1846
  %64 = icmp ugt i8 %62, 118, !insn.addr !1846
  store i8 %63, i8* %61, align 1, !insn.addr !1846
  %65 = add i32 %45, 2005470045, !insn.addr !1847
  %66 = inttoptr i32 %65 to i8*, !insn.addr !1847
  %67 = load i8, i8* %66, align 1, !insn.addr !1847
  %68 = zext i1 %64 to i8, !insn.addr !1847
  %69 = add i8 %68, %18, !insn.addr !1847
  %70 = sub i8 %67, %69, !insn.addr !1847
  %71 = sub i8 %70, %68, !insn.addr !1847
  %72 = icmp ult i8 %67, %71, !insn.addr !1847
  %73 = icmp ne i8 %69, -1, !insn.addr !1847
  %74 = or i1 %73, %72, !insn.addr !1847
  %75 = icmp ult i8 %67, %69, !insn.addr !1847
  %76 = select i1 %64, i1 %74, i1 %75, !insn.addr !1847
  %77 = icmp eq i8 %70, 0, !insn.addr !1847
  store i8 %70, i8* %66, align 1, !insn.addr !1847
  %78 = call i8 @__asm_in.7(i8 -119), !insn.addr !1848
  %79 = sext i8 %78 to i32, !insn.addr !1848
  %80 = and i32 %57, -256, !insn.addr !1848
  %81 = or i32 %80, %79, !insn.addr !1848
  %82 = or i1 %77, %76, !insn.addr !1849
  br i1 %82, label %dec_label_pc_4050bd, label %dec_label_pc_4050fa, !insn.addr !1849

dec_label_pc_4050bd:                              ; preds = %dec_label_pc_40509f
  %83 = sext i16 %4 to i32, !insn.addr !1850
  %84 = inttoptr i32 %45 to i8*, !insn.addr !1851
  %85 = load i8, i8* %84, align 1, !insn.addr !1851
  %86 = udiv i32 %42, 256, !insn.addr !1851
  %87 = trunc i32 %86 to i8, !insn.addr !1851
  %88 = and i8 %85, %87, !insn.addr !1851
  %89 = icmp eq i8 %88, 0, !insn.addr !1851
  store i8 %88, i8* %84, align 1, !insn.addr !1851
  %90 = add nsw i32 %83, 20, !insn.addr !1852
  %91 = inttoptr i32 %90 to i32*, !insn.addr !1852
  store i32 0, i32* %91, align 4, !insn.addr !1852
  %92 = add nsw i32 %83, 56, !insn.addr !1853
  %93 = inttoptr i32 %92 to i32*, !insn.addr !1853
  store i32 0, i32* %93, align 4, !insn.addr !1853
  br i1 %89, label %dec_label_pc_405104, label %dec_label_pc_4050f2, !insn.addr !1854

dec_label_pc_4050f2:                              ; preds = %dec_label_pc_4050bd
  %94 = and i32 %81, -256, !insn.addr !1855
  %95 = or i32 %94, 46, !insn.addr !1855
  ret i32 %95, !insn.addr !1856

dec_label_pc_4050fa:                              ; preds = %dec_label_pc_40509f
  %96 = add nsw i32 %79, 77, !insn.addr !1857
  %97 = and i32 %96, 255, !insn.addr !1857
  %98 = and i32 %81, -256, !insn.addr !1857
  %99 = or i32 %98, %97, !insn.addr !1857
  ret i32 %99, !insn.addr !1858

dec_label_pc_405104:                              ; preds = %dec_label_pc_4050bd
  %100 = add i32 %14, %1, !insn.addr !1833
  %101 = inttoptr i32 %81 to i32*, !insn.addr !1859
  %102 = inttoptr i32 %100 to i32*, !insn.addr !1860
  %103 = add i32 %100, 12, !insn.addr !1861
  %104 = inttoptr i32 %103 to i32*, !insn.addr !1861
  store i32 %100, i32* %104, align 4, !insn.addr !1861
  %105 = add nsw i32 %83, 12, !insn.addr !1862
  %106 = inttoptr i32 %105 to i32*, !insn.addr !1862
  store i32 %81, i32* %106, align 4, !insn.addr !1862
  ret i32 0, !insn.addr !1863

dec_label_pc_40511d:                              ; preds = %dec_label_pc_40508b
  %107 = select i1 %5, i32 14, i32 16, !insn.addr !1864
  %108 = add i32 %11, %107, !insn.addr !1865
  %109 = inttoptr i32 %108 to i32*, !insn.addr !1865
  %110 = inttoptr i32 %2 to i32*, !insn.addr !1866
  store i32 %32, i32* %110, align 4, !insn.addr !1866
  ret i32 0, !insn.addr !1867
}

define i32 @function_4051f3() local_unnamed_addr {
dec_label_pc_4051f3:
  %eax.0.reg2mem = alloca i32, !insn.addr !1868
  %.pre-phi4.reg2mem = alloca i32*, !insn.addr !1868
  %merge.reg2mem = alloca i32, !insn.addr !1868
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %2, -32, !insn.addr !1868
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1868
  %8 = load i32, i32* %7, align 4, !insn.addr !1868
  %9 = inttoptr i32 %8 to i8*, !insn.addr !1869
  store i8 0, i8* %9, align 1, !insn.addr !1869
  %10 = add i32 %8, 1213300561, !insn.addr !1870
  %11 = inttoptr i32 %10 to i32*, !insn.addr !1870
  %12 = load i32, i32* %11, align 4, !insn.addr !1870
  %13 = trunc i32 %8 to i8, !insn.addr !1871
  %14 = icmp ugt i8 %13, -63
  %15 = icmp ult i8 %13, -62
  %16 = add i32 %8, 62
  %17 = select i1 %15, i32 %8, i32 %16, !insn.addr !1871
  %18 = and i32 %17, 255, !insn.addr !1871
  %19 = and i32 %8, -65536, !insn.addr !1871
  %20 = or i32 %18, %19, !insn.addr !1871
  %21 = zext i1 %14 to i32, !insn.addr !1871
  %22 = mul i32 %21, 256, !insn.addr !1871
  %23 = or i32 %20, %22, !insn.addr !1871
  %24 = add nsw i32 %23, 8, !insn.addr !1872
  %25 = and i32 %24, -64520, !insn.addr !1873
  %26 = add i32 %25, %3, !insn.addr !1874
  %27 = add i32 %4, 95, !insn.addr !1875
  %28 = inttoptr i32 %27 to i32*, !insn.addr !1875
  store i32 %26, i32* %28, align 4, !insn.addr !1875
  %29 = add i32 %2, 106, !insn.addr !1876
  %30 = inttoptr i32 %29 to i32*, !insn.addr !1876
  %31 = load i32, i32* %30, align 4, !insn.addr !1876
  %32 = trunc i32 %26 to i8, !insn.addr !1877
  %33 = trunc i32 %12 to i8, !insn.addr !1877
  %34 = add i8 %32, %33, !insn.addr !1877
  %35 = icmp ult i8 %34, %32, !insn.addr !1877
  %36 = zext i8 %34 to i32, !insn.addr !1877
  %37 = and i32 %26, -256, !insn.addr !1877
  %38 = or i32 %37, %36, !insn.addr !1877
  %39 = add i32 %38, 71, !insn.addr !1878
  %40 = inttoptr i32 %39 to i8*, !insn.addr !1878
  %41 = load i8, i8* %40, align 1, !insn.addr !1878
  %42 = udiv i32 %26, 256, !insn.addr !1878
  %43 = trunc i32 %42 to i8, !insn.addr !1878
  %.neg1 = sext i1 %35 to i8
  %.neg2 = sub i8 %41, %43, !insn.addr !1878
  %44 = add i8 %.neg2, %.neg1, !insn.addr !1878
  store i8 %44, i8* %40, align 1, !insn.addr !1878
  %45 = or i8 %34, -123, !insn.addr !1879
  %46 = zext i8 %45 to i32, !insn.addr !1879
  %47 = or i32 %37, %46, !insn.addr !1879
  %48 = select i1 %5, i32 -4, i32 4, !insn.addr !1880
  %49 = add i32 %48, %0, !insn.addr !1880
  %50 = inttoptr i32 %47 to i8*, !insn.addr !1881
  %51 = load i8, i8* %50, align 1, !insn.addr !1881
  %52 = add i8 %45, %51, !insn.addr !1881
  store i8 %52, i8* %50, align 1, !insn.addr !1881
  %53 = add i32 %49, 4, !insn.addr !1882
  %54 = inttoptr i32 %53 to i32*, !insn.addr !1882
  %55 = load i32, i32* %54, align 4, !insn.addr !1882
  %56 = inttoptr i32 %49 to i32*, !insn.addr !1883
  store i32 %55, i32* %56, align 4, !insn.addr !1883
  %57 = add i32 %49, 8, !insn.addr !1884
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1884
  %59 = load i32, i32* %58, align 4, !insn.addr !1884
  %60 = add i32 %49, -2, !insn.addr !1885
  %61 = add i32 %2, -4, !insn.addr !1886
  %62 = inttoptr i32 %61 to i32*, !insn.addr !1886
  %63 = load i32, i32* %62, align 4, !insn.addr !1886
  %64 = add i32 %63, -1, !insn.addr !1887
  %65 = icmp eq i32 %64, 0, !insn.addr !1887
  br i1 %65, label %dec_label_pc_40523e, label %dec_label_pc_405283, !insn.addr !1887

dec_label_pc_40523e:                              ; preds = %dec_label_pc_4051f3
  %66 = add i32 %31, %48, !insn.addr !1880
  %67 = or i8 %34, -113, !insn.addr !1888
  %68 = zext i8 %67 to i32, !insn.addr !1888
  %69 = or i32 %37, %68, !insn.addr !1888
  %70 = xor i32 %69, -2047260993, !insn.addr !1889
  %71 = icmp eq i32 %70, 0, !insn.addr !1889
  %.pre = inttoptr i32 %66 to i32*
  br i1 %71, label %dec_label_pc_405250, label %dec_label_pc_405246, !insn.addr !1890

dec_label_pc_405246:                              ; preds = %dec_label_pc_40523e
  %72 = load i32, i32* %.pre, align 4, !insn.addr !1891
  %73 = icmp ugt i32 %70, %72
  br i1 %73, label %dec_label_pc_40524a, label %dec_label_pc_405250, !insn.addr !1892

dec_label_pc_40524a:                              ; preds = %dec_label_pc_405246
  %74 = trunc i32 %59 to i16, !insn.addr !1893
  %75 = trunc i32 %70 to i8, !insn.addr !1893
  call void @__asm_out.6(i16 %74, i8 %75), !insn.addr !1893
  %76 = add i32 %2, 2, !insn.addr !1894
  %77 = inttoptr i32 %76 to i16*, !insn.addr !1894
  store i32 %70, i32* %merge.reg2mem, !insn.addr !1895
  br label %dec_label_pc_40525f, !insn.addr !1895

dec_label_pc_405250:                              ; preds = %dec_label_pc_40523e, %dec_label_pc_405246
  %78 = add i32 %1, 16, !insn.addr !1896
  %79 = inttoptr i32 %78 to i32*, !insn.addr !1896
  %80 = inttoptr i32 %60 to i16*, !insn.addr !1885
  %81 = trunc i32 %59 to i16, !insn.addr !1897
  %82 = inttoptr i32 %66 to i8*, !insn.addr !1897
  %83 = load i8, i8* %82, align 1, !insn.addr !1897
  call void @__asm_outsb(i16 %81, i8 %83), !insn.addr !1897
  store i32 0, i32* %.pre, align 4, !insn.addr !1898
  store i32 %70, i32* %merge.reg2mem
  br label %dec_label_pc_40525f

dec_label_pc_40525f:                              ; preds = %dec_label_pc_405250, %dec_label_pc_40529b, %dec_label_pc_40524a
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !1899

dec_label_pc_405283:                              ; preds = %dec_label_pc_4051f3
  %84 = add i32 %2, 12, !insn.addr !1900
  %85 = inttoptr i32 %84 to i32*, !insn.addr !1900
  %86 = load i32, i32* %85, align 4, !insn.addr !1900
  store i32 %59, i32* %58, align 4, !insn.addr !1901
  store i32 %86, i32* %56, align 4, !insn.addr !1902
  %87 = add i32 %49, -98, !insn.addr !1903
  %88 = inttoptr i32 %87 to i32*, !insn.addr !1903
  %89 = load i32, i32* %88, align 4, !insn.addr !1903
  %90 = icmp eq i32 %89, 0, !insn.addr !1904
  br i1 %90, label %dec_label_pc_405283.dec_label_pc_40529b_crit_edge, label %dec_label_pc_405295, !insn.addr !1905

dec_label_pc_405283.dec_label_pc_40529b_crit_edge: ; preds = %dec_label_pc_405283
  %.pre3 = inttoptr i32 %60 to i32*, !insn.addr !1906
  store i32* %.pre3, i32** %.pre-phi4.reg2mem
  store i32 %86, i32* %eax.0.reg2mem
  br label %dec_label_pc_40529b

dec_label_pc_405295:                              ; preds = %dec_label_pc_405283
  %91 = add i32 %49, -6, !insn.addr !1907
  %92 = inttoptr i32 %91 to i32*
  store i32 %89, i32* %92, align 4, !insn.addr !1907
  %93 = call i32 @unknown_c540e040(i32 %47), !insn.addr !1908
  store i32* %92, i32** %.pre-phi4.reg2mem, !insn.addr !1908
  store i32 %93, i32* %eax.0.reg2mem, !insn.addr !1908
  br label %dec_label_pc_40529b, !insn.addr !1908

dec_label_pc_40529b:                              ; preds = %dec_label_pc_405283.dec_label_pc_40529b_crit_edge, %dec_label_pc_405295
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.pre-phi4.reload = load i32*, i32** %.pre-phi4.reg2mem
  %94 = and i32 %eax.0.reload, 255
  %95 = xor i32 %94, %64, !insn.addr !1909
  %96 = add i32 %eax.0.reload, 1, !insn.addr !1910
  %97 = mul i32 %96, 2, !insn.addr !1911
  %98 = and i32 %97, 254, !insn.addr !1911
  %99 = and i32 %96, -256, !insn.addr !1911
  %100 = or i32 %98, %99, !insn.addr !1911
  %101 = inttoptr i32 %100 to i32*, !insn.addr !1912
  %102 = load i32, i32* %101, align 4, !insn.addr !1912
  store i32 %100, i32* %101, align 4, !insn.addr !1912
  %103 = load i32, i32* %.pre-phi4.reload, align 4, !insn.addr !1906
  store i32 %102, i32* %.pre-phi4.reload, align 4, !insn.addr !1913
  %104 = add i32 %95, %102, !insn.addr !1914
  %105 = inttoptr i32 %104 to i32*, !insn.addr !1914
  %106 = load i32, i32* %105, align 4, !insn.addr !1914
  %107 = add i32 %106, 4, !insn.addr !1915
  %108 = inttoptr i32 %107 to i8*, !insn.addr !1915
  %109 = load i8, i8* %108, align 1, !insn.addr !1915
  %110 = icmp eq i8 %109, 0, !insn.addr !1916
  %111 = icmp eq i1 %110, false, !insn.addr !1917
  store i32 %103, i32* %merge.reg2mem, !insn.addr !1917
  br i1 %111, label %dec_label_pc_40525f, label %dec_label_pc_4052c0, !insn.addr !1917

dec_label_pc_4052c0:                              ; preds = %dec_label_pc_40529b
  %112 = and i32 %102, -256, !insn.addr !1915
  %113 = zext i8 %109 to i32, !insn.addr !1915
  %114 = or i32 %112, %113, !insn.addr !1915
  ret i32 %114, !insn.addr !1918
}

define i32 @function_4052d0() local_unnamed_addr {
dec_label_pc_4052d0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %ds = alloca i16, align 4
  %5 = trunc i32 %3 to i8, !insn.addr !1919
  %6 = and i8 %5, 31, !insn.addr !1919
  %7 = icmp eq i8 %6, 0, !insn.addr !1919
  br i1 %7, label %16, label %8, !insn.addr !1919

; <label>:8:                                      ; preds = %dec_label_pc_4052d0
  %9 = add i32 %3, %0, !insn.addr !1919
  %10 = inttoptr i32 %9 to i8*, !insn.addr !1919
  %11 = load i8, i8* %10, align 1, !insn.addr !1919
  %12 = lshr i8 %11, %6, !insn.addr !1919
  %13 = sub nsw i8 8, %6, !insn.addr !1919
  %14 = shl i8 %11, %13, !insn.addr !1919
  %15 = or i8 %12, %14, !insn.addr !1919
  store i8 %15, i8* %10, align 1, !insn.addr !1919
  br label %16, !insn.addr !1919

; <label>:16:                                     ; preds = %dec_label_pc_4052d0, %8
  %17 = and i32 %3, 65280, !insn.addr !1920
  %18 = add i32 %17, %3
  %19 = and i32 %18, 65280, !insn.addr !1920
  %20 = and i32 %3, -65281, !insn.addr !1920
  %21 = or i32 %19, %20, !insn.addr !1920
  %22 = add i32 %1, 1367934032, !insn.addr !1921
  %23 = inttoptr i32 %22 to i8*, !insn.addr !1921
  %24 = load i8, i8* %23, align 1, !insn.addr !1921
  %25 = add i8 %24, %5, !insn.addr !1921
  store i8 %25, i8* %23, align 1, !insn.addr !1921
  %26 = add i32 %21, 71863041, !insn.addr !1922
  %27 = inttoptr i32 %26 to i8*, !insn.addr !1922
  %28 = load i8, i8* %27, align 1, !insn.addr !1922
  %29 = or i8 %28, %5, !insn.addr !1922
  %30 = trunc i32 %4 to i8
  %31 = add i8 %30, 21, !insn.addr !1923
  %32 = icmp ult i8 %31, -117, !insn.addr !1923
  %33 = load i16, i16* %ds, align 4, !insn.addr !1924
  %34 = zext i16 %33 to i32
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1924
  %36 = add i8 %30, -118, !insn.addr !1925
  %37 = zext i1 %32 to i8, !insn.addr !1925
  %38 = add i8 %31, %37, !insn.addr !1925
  %39 = icmp ule i8 %38, %36, !insn.addr !1925
  %40 = icmp ugt i8 %36, 116, !insn.addr !1925
  %41 = select i1 %32, i1 %39, i1 %40, !insn.addr !1925
  %42 = sext i16 %33 to i32, !insn.addr !1926
  %43 = add i32 %1, -2116474064, !insn.addr !1927
  %44 = inttoptr i32 %43 to i8*, !insn.addr !1927
  %45 = load i8, i8* %44, align 1, !insn.addr !1927
  %46 = zext i1 %41 to i8, !insn.addr !1927
  %47 = add i8 %29, %46, !insn.addr !1927
  %48 = add i8 %47, %45, !insn.addr !1927
  store i8 %48, i8* %44, align 1, !insn.addr !1927
  %49 = bitcast i16* %ds to i32*
  %50 = load i32, i32* %49, align 4, !insn.addr !1928
  %51 = mul i32 %50, 512, !insn.addr !1928
  %52 = udiv i32 %50, 8388608, !insn.addr !1928
  %53 = or i32 %52, %51, !insn.addr !1928
  store i32 %53, i32* %35, align 4, !insn.addr !1928
  %54 = and i32 %34, 14
  %55 = icmp ugt i32 %54, 9, !insn.addr !1929
  %56 = add nsw i32 %42, 6, !insn.addr !1929
  %57 = select i1 %55, i32 %56, i32 %42, !insn.addr !1929
  %58 = zext i1 %55 to i32, !insn.addr !1929
  %59 = and i32 %57, 15, !insn.addr !1929
  %60 = and i32 %42, -65536, !insn.addr !1929
  %61 = mul i32 %58, 256
  %62 = add nsw i32 %61, %42
  %63 = and i32 %62, 65280, !insn.addr !1929
  %64 = or i32 %63, %60, !insn.addr !1929
  %65 = udiv i32 %2, 256, !insn.addr !1930
  %66 = add nuw nsw i32 %59, %65, !insn.addr !1930
  %67 = and i32 %66, 255, !insn.addr !1930
  %68 = or i32 %64, %67, !insn.addr !1930
  ret i32 %68, !insn.addr !1931
}

define i32 @function_405328(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_405328:
  %ebp.0.reg2mem = alloca i32, !insn.addr !1932
  %eax.1.reg2mem = alloca i32, !insn.addr !1932
  %cf.0.reg2mem = alloca i1, !insn.addr !1932
  %.reg2mem = alloca i8, !insn.addr !1932
  %eax.0.reg2mem = alloca i32, !insn.addr !1932
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_4 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_4, align 4
  %6 = add i32 %2, 71469328, !insn.addr !1933
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1933
  %8 = load i32, i32* %7, align 4, !insn.addr !1933
  %9 = add i32 %8, %2, !insn.addr !1933
  store i32 %9, i32* %7, align 4, !insn.addr !1933
  %10 = add i32 %0, 16, !insn.addr !1934
  %11 = inttoptr i32 %10 to i8*, !insn.addr !1934
  %12 = load i8, i8* %11, align 1, !insn.addr !1934
  %13 = trunc i32 %1 to i8, !insn.addr !1934
  %14 = add i8 %12, %13, !insn.addr !1934
  store i8 %14, i8* %11, align 1, !insn.addr !1934
  %15 = load i32, i32* %stack_var_4, align 4, !insn.addr !1935
  %16 = call i32 @__asm_in.2(i32 93), !insn.addr !1936
  %17 = trunc i32 %16 to i8, !insn.addr !1937
  %18 = icmp eq i8 %17, 0, !insn.addr !1937
  store i32 %16, i32* %eax.0.reg2mem, !insn.addr !1938
  br i1 %18, label %19, label %dec_label_pc_405340, !insn.addr !1938

; <label>:19:                                     ; preds = %dec_label_pc_405328
  %20 = call i32 @function_4052d0(), !insn.addr !1938
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !1938
  br label %dec_label_pc_405340, !insn.addr !1938

dec_label_pc_405340:                              ; preds = %19, %dec_label_pc_405328
  %21 = add i32 %15, 1, !insn.addr !1939
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %22 = add i32 %15, 1519081303, !insn.addr !1940
  %23 = inttoptr i32 %22 to i8*, !insn.addr !1940
  %24 = load i8, i8* %23, align 1, !insn.addr !1940
  %25 = trunc i32 %2 to i8, !insn.addr !1940
  %26 = or i8 %24, %25, !insn.addr !1940
  store i8 %26, i8* %23, align 1, !insn.addr !1940
  %27 = add i32 %arg3, 209357570, !insn.addr !1941
  %28 = inttoptr i32 %27 to i8*, !insn.addr !1941
  %29 = load i8, i8* %28, align 1, !insn.addr !1941
  %30 = or i8 %29, %25, !insn.addr !1941
  store i8 %30, i8* %28, align 1, !insn.addr !1941
  %31 = inttoptr i32 %21 to i32*, !insn.addr !1942
  %32 = load i32, i32* %31, align 4, !insn.addr !1942
  %33 = sub i32 %2, %32, !insn.addr !1942
  %34 = icmp ult i32 %2, %32, !insn.addr !1942
  %35 = add i32 %33, 864941125, !insn.addr !1943
  %36 = inttoptr i32 %35 to i8*, !insn.addr !1943
  %37 = load i8, i8* %36, align 1, !insn.addr !1943
  %38 = trunc i32 %33 to i8, !insn.addr !1943
  %39 = zext i1 %34 to i8, !insn.addr !1943
  %40 = add i8 %37, %38, !insn.addr !1943
  %41 = add i8 %40, %39, !insn.addr !1943
  store i8 %41, i8* %36, align 1, !insn.addr !1943
  %42 = mul i32 %arg1, 8, !insn.addr !1944
  %43 = add i32 %42, 32, !insn.addr !1944
  %44 = add i32 %43, %33, !insn.addr !1944
  %45 = inttoptr i32 %44 to i8*, !insn.addr !1944
  %46 = load i8, i8* %45, align 1, !insn.addr !1944
  %47 = udiv i32 %eax.0.reload, 256, !insn.addr !1944
  %48 = trunc i32 %47 to i8, !insn.addr !1944
  %49 = add i8 %46, %48, !insn.addr !1944
  %50 = icmp ult i8 %49, %46, !insn.addr !1944
  store i8 %49, i8* %45, align 1, !insn.addr !1944
  %51 = icmp eq i1 %50, false, !insn.addr !1945
  %spec.select = select i1 %51, i32 %33, i32 32
  %52 = udiv i32 %spec.select, 256, !insn.addr !1946
  %53 = and i32 %52, 255
  %54 = xor i32 %53, %3, !insn.addr !1946
  %55 = add i32 %eax.0.reload, 2071266187, !insn.addr !1947
  %56 = inttoptr i32 %55 to i8*, !insn.addr !1947
  %57 = load i8, i8* %56, align 1, !insn.addr !1947
  %58 = trunc i32 %arg3 to i8, !insn.addr !1947
  %59 = add i8 %57, %58, !insn.addr !1947
  store i8 %59, i8* %56, align 1, !insn.addr !1947
  %60 = add i32 %eax.0.reload, 20, !insn.addr !1948
  %61 = inttoptr i32 %60 to i32*, !insn.addr !1948
  %62 = load i32, i32* %61, align 4, !insn.addr !1948
  %63 = add i32 %eax.0.reload, 16, !insn.addr !1949
  %64 = inttoptr i32 %63 to i32*, !insn.addr !1949
  %65 = load i32, i32* %64, align 4, !insn.addr !1949
  %66 = sub i32 %62, %65, !insn.addr !1949
  %67 = icmp ugt i32 %spec.select, %66
  br i1 %67, label %dec_label_pc_4053ea, label %dec_label_pc_405379, !insn.addr !1950

dec_label_pc_405379:                              ; preds = %dec_label_pc_405340
  %68 = call i32 @__asm_hlt(), !insn.addr !1951
  %69 = inttoptr i32 %66 to i8*, !insn.addr !1952
  %70 = load i8, i8* %69, align 1, !insn.addr !1952
  %71 = udiv i32 %arg3, 256, !insn.addr !1952
  %72 = trunc i32 %71 to i8, !insn.addr !1952
  %73 = xor i8 %70, %72, !insn.addr !1952
  store i8 %73, i8* %69, align 1, !insn.addr !1952
  %sext = mul i32 %68, 65536
  %74 = sdiv i32 %sext, 65536, !insn.addr !1953
  %75 = inttoptr i32 %74 to i32*, !insn.addr !1954
  %76 = load i32, i32* %75, align 4, !insn.addr !1954
  %77 = add nsw i32 %74, 4, !insn.addr !1955
  %78 = inttoptr i32 %77 to i32*, !insn.addr !1955
  %79 = load i32, i32* %78, align 4, !insn.addr !1955
  %80 = add i32 %76, 4, !insn.addr !1956
  %81 = inttoptr i32 %80 to i32*, !insn.addr !1956
  store i32 %79, i32* %81, align 4, !insn.addr !1956
  %82 = add i32 %arg3, -74, !insn.addr !1957
  %83 = inttoptr i32 %82 to i32*, !insn.addr !1957
  %84 = load i32, i32* %83, align 4, !insn.addr !1957
  %85 = add i32 %79, -1, !insn.addr !1958
  %86 = add i32 %79, 136, !insn.addr !1959
  %87 = and i32 %86, 255, !insn.addr !1959
  %88 = and i32 %85, -256, !insn.addr !1959
  %89 = or i32 %88, %87, !insn.addr !1959
  %90 = add i32 %84, 1547929996, !insn.addr !1960
  %91 = inttoptr i32 %90 to i32*, !insn.addr !1960
  %92 = load i32, i32* %91, align 4, !insn.addr !1960
  %93 = add i32 %92, %84, !insn.addr !1960
  store i32 %93, i32* %91, align 4, !insn.addr !1960
  %94 = add i32 %89, 12, !insn.addr !1961
  %95 = inttoptr i32 %94 to i32*, !insn.addr !1961
  store i32 6422528, i32* %95, align 4, !insn.addr !1961
  %96 = add i32 %arg1, 44, !insn.addr !1962
  %97 = inttoptr i32 %96 to i32*, !insn.addr !1962
  store i32 %89, i32* %97, align 4, !insn.addr !1962
  %98 = add i32 %arg3, 20, !insn.addr !1963
  %99 = inttoptr i32 %98 to i32*, !insn.addr !1963
  %100 = load i32, i32* %99, align 4, !insn.addr !1963
  %101 = load i8, i8* inttoptr (i32 346859520 to i8*), align 2048, !insn.addr !1964
  %102 = udiv i32 %100, 256, !insn.addr !1964
  %103 = trunc i32 %102 to i8, !insn.addr !1964
  %104 = add i8 %101, %103, !insn.addr !1964
  store i8 %104, i8* inttoptr (i32 346859520 to i8*), align 2048, !insn.addr !1964
  %105 = add i32 %100, -1, !insn.addr !1965
  %106 = trunc i32 %54 to i16, !insn.addr !1966
  %107 = call i8 @__asm_in.4(i16 %106), !insn.addr !1966
  %108 = sext i8 %107 to i32, !insn.addr !1966
  %109 = or i32 %105, %108, !insn.addr !1966
  %110 = and i32 %109, -256, !insn.addr !1967
  %111 = or i8 %107, 127, !insn.addr !1968
  %112 = zext i8 %111 to i32, !insn.addr !1968
  %113 = or i32 %110, %112, !insn.addr !1968
  ret i32 %113, !insn.addr !1969

dec_label_pc_4053ea:                              ; preds = %dec_label_pc_405340
  %114 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !1970
  %115 = add i32 %arg1, 24, !insn.addr !1971
  %116 = inttoptr i32 %115 to i32*, !insn.addr !1971
  %117 = load i32, i32* %116, align 4, !insn.addr !1971
  %118 = add i32 %spec.select, ptrtoint (i32* @global_var_411017 to i32), !insn.addr !1972
  %119 = and i32 %118, -8327168, !insn.addr !1973
  %120 = inttoptr i32 %54 to i8*, !insn.addr !1974
  %121 = load i8, i8* %120, align 1, !insn.addr !1974
  %122 = udiv i32 %3, 256, !insn.addr !1974
  %123 = trunc i32 %122 to i8, !insn.addr !1974
  %124 = sub i8 %121, %123, !insn.addr !1974
  store i8 %124, i8* %120, align 1, !insn.addr !1974
  %125 = add i32 %arg3, -1122724356, !insn.addr !1975
  %126 = inttoptr i32 %125 to i32*, !insn.addr !1975
  store i32 %114, i32* %126, align 4, !insn.addr !1975
  %127 = inttoptr i32 %119 to i32*, !insn.addr !1976
  %128 = load i32, i32* %127, align 4096, !insn.addr !1976
  %129 = add i32 %128, %119, !insn.addr !1976
  %130 = icmp slt i32 %129, 0, !insn.addr !1976
  store i32 %129, i32* %127, align 4096, !insn.addr !1976
  %131 = icmp eq i1 %130, false, !insn.addr !1977
  br i1 %131, label %dec_label_pc_405441, label %dec_label_pc_405404, !insn.addr !1977

dec_label_pc_405404:                              ; preds = %dec_label_pc_4053ea
  %132 = inttoptr i32 %119 to i8*, !insn.addr !1978
  %133 = load i8, i8* %132, align 4096, !insn.addr !1978
  %134 = udiv i32 %119, 256, !insn.addr !1978
  %135 = trunc i32 %134 to i8, !insn.addr !1978
  %136 = add i8 %133, %135, !insn.addr !1978
  store i8 %136, i8* %132, align 4096, !insn.addr !1978
  %137 = add i32 %117, 12, !insn.addr !1979
  %138 = inttoptr i32 %137 to i32*, !insn.addr !1979
  %139 = load i32, i32* %138, align 4, !insn.addr !1979
  %140 = call i32 @unknown_12f45d0(i32 %139, i16 %4), !insn.addr !1980
  ret i32 %140, !insn.addr !1981

dec_label_pc_405441:                              ; preds = %dec_label_pc_4053ea
  %141 = icmp ult i32 %129, %128, !insn.addr !1976
  %142 = select i1 %141, i32 129, i32 128, !insn.addr !1982
  %143 = or i32 %142, %119, !insn.addr !1982
  %144 = inttoptr i32 %arg1 to i32*, !insn.addr !1983
  store i32 %spec.select, i32* %144, align 4, !insn.addr !1983
  %145 = add nsw i32 %143, 1, !insn.addr !1984
  %146 = xor i32 %spec.select, -2
  %147 = icmp ult i32 %146, 797665346, !insn.addr !1985
  %148 = call i32 @__asm_wait(), !insn.addr !1986
  %149 = mul i32 %145, 8, !insn.addr !1987
  %150 = add i32 %143, 1252067445, !insn.addr !1987
  %151 = add i32 %150, %149, !insn.addr !1987
  %152 = inttoptr i32 %151 to i8*, !insn.addr !1987
  %153 = load i8, i8* %152, align 1, !insn.addr !1987
  %154 = trunc i32 %148 to i8, !insn.addr !1987
  %155 = zext i1 %147 to i8, !insn.addr !1987
  %156 = add i8 %153, %154, !insn.addr !1987
  %157 = add i8 %156, %155, !insn.addr !1987
  %158 = icmp ule i8 %157, %153, !insn.addr !1987
  %159 = icmp ult i8 %156, %153, !insn.addr !1987
  %160 = select i1 %147, i1 %158, i1 %159, !insn.addr !1987
  store i8 %157, i8* %152, align 1, !insn.addr !1987
  %161 = zext i1 %160 to i32, !insn.addr !1988
  %162 = add i32 %148, 89, !insn.addr !1988
  %163 = add i32 %162, %161, !insn.addr !1988
  %164 = and i32 %163, 255, !insn.addr !1988
  %165 = and i32 %148, -256, !insn.addr !1988
  %166 = or i32 %164, %165, !insn.addr !1988
  %167 = add i32 %143, 1120277595, !insn.addr !1989
  %168 = inttoptr i32 %167 to i32*, !insn.addr !1989
  %169 = load i32, i32* %168, align 4, !insn.addr !1989
  %170 = or i32 %169, %145, !insn.addr !1989
  %171 = inttoptr i32 %170 to i8*, !insn.addr !1990
  %.promoted = load i8, i8* %171, align 1
  store i8 %.promoted, i8* %.reg2mem, !insn.addr !1989
  store i1 false, i1* %cf.0.reg2mem, !insn.addr !1989
  store i32 %166, i32* %eax.1.reg2mem, !insn.addr !1989
  store i32 %114, i32* %ebp.0.reg2mem, !insn.addr !1989
  br label %dec_label_pc_4054d1, !insn.addr !1989

dec_label_pc_4054d1:                              ; preds = %dec_label_pc_4054d1, %dec_label_pc_405441
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %.reload = load i8, i8* %.reg2mem
  %172 = trunc i32 %eax.1.reload to i8, !insn.addr !1990
  %173 = zext i1 %cf.0.reload to i8, !insn.addr !1990
  %174 = add i8 %.reload, %173, !insn.addr !1990
  %175 = add i8 %174, %172, !insn.addr !1990
  %176 = xor i32 %eax.1.reload, 1935209549, !insn.addr !1991
  %177 = add i32 %ebp.0.reload, %arg3, !insn.addr !1992
  %178 = icmp ult i32 %177, %ebp.0.reload, !insn.addr !1992
  %179 = icmp slt i32 %177, 0, !insn.addr !1992
  store i8 %175, i8* %.reg2mem, !insn.addr !1993
  store i1 %178, i1* %cf.0.reg2mem, !insn.addr !1993
  store i32 %176, i32* %eax.1.reg2mem, !insn.addr !1993
  store i32 %177, i32* %ebp.0.reg2mem, !insn.addr !1993
  br i1 %179, label %dec_label_pc_4054d1, label %dec_label_pc_4054dc, !insn.addr !1993

dec_label_pc_4054dc:                              ; preds = %dec_label_pc_4054d1
  %180 = mul i32 %arg1, 4, !insn.addr !1994
  %181 = select i1 %5, i32 -4, i32 4, !insn.addr !1983
  %182 = add i32 %117, %180, !insn.addr !1994
  %183 = add i32 %181, %arg1, !insn.addr !1983
  %184 = add i32 %arg4, -1, !insn.addr !1995
  store i8 %175, i8* %171, align 1
  %185 = udiv i32 %170, 4, !insn.addr !1996
  %186 = inttoptr i32 %182 to i8*, !insn.addr !1997
  %187 = inttoptr i32 %183 to i8*, !insn.addr !1997
  call void @__asm_rep_movsd_memcpy(i8* %187, i8* %186, i32 %185), !insn.addr !1997
  %188 = mul i32 %185, %181, !insn.addr !1997
  %189 = add i32 %188, %183, !insn.addr !1997
  %190 = and i32 %170, 3, !insn.addr !1998
  %191 = inttoptr i32 %189 to i8*, !insn.addr !1999
  call void @__asm_rep_movsb_memcpy(i8* %191, i8* %191, i32 %190), !insn.addr !1999
  %192 = add i32 %arg4, 7, !insn.addr !2000
  %193 = inttoptr i32 %192 to i32*, !insn.addr !2000
  store i32 %176, i32* %193, align 4, !insn.addr !2000
  %194 = add i32 %176, 16, !insn.addr !2001
  %195 = inttoptr i32 %194 to i32*, !insn.addr !2001
  %196 = load i32, i32* %195, align 4, !insn.addr !2001
  %197 = add i32 %196, %170, !insn.addr !2002
  %198 = inttoptr i32 %184 to i32*, !insn.addr !2003
  store i32 %197, i32* %198, align 4, !insn.addr !2003
  %199 = trunc i32 %184 to i16, !insn.addr !2004
  %200 = call i32 @__asm_in(i16 %199), !insn.addr !2004
  %201 = add i32 %arg4, -79, !insn.addr !2005
  %202 = inttoptr i32 %201 to i32*, !insn.addr !2005
  store i32 %200, i32* %202, align 4, !insn.addr !2005
  ret i32 %200, !insn.addr !2006
}

define i32 @function_405548() local_unnamed_addr {
dec_label_pc_405548:
  %ebp.1.reg2mem = alloca i32, !insn.addr !2007
  %ebx.0.reg2mem = alloca i32, !insn.addr !2007
  %ecx.0.reg2mem = alloca i32, !insn.addr !2007
  %ebp.0.reg2mem = alloca i32, !insn.addr !2007
  %esp.0.reg2mem = alloca i32, !insn.addr !2007
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  br label %dec_label_pc_40554e, !insn.addr !2008

dec_label_pc_40554e:                              ; preds = %dec_label_pc_40554e, %dec_label_pc_405548
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %4 = add i32 %esp.0.reload, -4, !insn.addr !2009
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2009
  store i32 -19, i32* %5, align 4, !insn.addr !2009
  %6 = add i32 %ebp.0.reload, -1, !insn.addr !2010
  %7 = add i32 %esp.0.reload, -2, !insn.addr !2011
  %8 = call i32 @__asm_in.2(i32 139), !insn.addr !2012
  %9 = icmp sgt i32 %ebp.0.reload, 0, !insn.addr !2013
  store i32 %7, i32* %esp.0.reg2mem, !insn.addr !2013
  store i32 %6, i32* %ebp.0.reg2mem, !insn.addr !2013
  br i1 %9, label %dec_label_pc_40554e, label %dec_label_pc_405556, !insn.addr !2013

dec_label_pc_405556:                              ; preds = %dec_label_pc_40554e
  %10 = add i32 %ebp.0.reload, -5, !insn.addr !2014
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2014
  %12 = load i32, i32* %11, align 4, !insn.addr !2014
  %13 = add i32 %esp.0.reload, -6, !insn.addr !2015
  %14 = inttoptr i32 %13 to i32*, !insn.addr !2015
  store i32 %12, i32* %14, align 4, !insn.addr !2015
  %15 = inttoptr i32 %0 to i32*, !insn.addr !2016
  %16 = select i1 %3, i32 -4, i32 4, !insn.addr !2016
  %17 = add i32 %16, %0, !insn.addr !2016
  %18 = add i32 %2, -1, !insn.addr !2017
  %phitmp = add i32 %ebp.0.reload, -2
  %19 = inttoptr i32 %12 to i32*, !insn.addr !2018
  %20 = trunc i32 %12 to i8, !insn.addr !2019
  %21 = inttoptr i32 %12 to i16*, !insn.addr !2020
  %22 = trunc i32 %12 to i16, !insn.addr !2020
  %23 = inttoptr i32 %12 to i8*
  %24 = mul i32 %17, 2
  %25 = add i32 %24, -384544662
  store i32 %18, i32* %ecx.0.reg2mem
  store i32 %phitmp, i32* %ebp.1.reg2mem
  br label %dec_label_pc_40555d

dec_label_pc_40555d:                              ; preds = %dec_label_pc_405556, %dec_label_pc_40555d
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %26 = load i32, i32* %19, align 4, !insn.addr !2018
  %27 = mul i32 %26, 8388608, !insn.addr !2018
  %28 = udiv i32 %26, 512, !insn.addr !2018
  %29 = or i32 %28, %27, !insn.addr !2018
  store i32 %29, i32* %19, align 4, !insn.addr !2018
  store i8 %20, i8* inttoptr (i32 -1957062720 to i8*), align 64, !insn.addr !2019
  %30 = load i16, i16* %21, align 2, !insn.addr !2020
  call void @__asm_arpl(i16 %30, i16 %22), !insn.addr !2020
  %31 = udiv i32 %ecx.0.reload, 256, !insn.addr !2021
  %32 = add i32 %31, %ecx.0.reload, !insn.addr !2021
  %33 = and i32 %32, 255, !insn.addr !2021
  %34 = and i32 %ecx.0.reload, -256, !insn.addr !2021
  %35 = or i32 %33, %34, !insn.addr !2021
  %36 = load i8, i8* %23, align 1, !insn.addr !2022
  %37 = add i8 %36, %20, !insn.addr !2022
  store i8 %37, i8* %23, align 1, !insn.addr !2022
  %38 = add i32 %25, %ebx.0.reload, !insn.addr !2023
  %39 = inttoptr i32 %38 to i32*, !insn.addr !2023
  store i32 %35, i32* %39, align 4, !insn.addr !2023
  %40 = or i32 %ebx.0.reload, 65280, !insn.addr !2024
  %41 = add i32 %35, -119, !insn.addr !2025
  %42 = inttoptr i32 %41 to i32*, !insn.addr !2025
  %43 = load i32, i32* %42, align 4, !insn.addr !2025
  %44 = add i32 %40, 1317734471, !insn.addr !2026
  %45 = inttoptr i32 %44 to i8*, !insn.addr !2026
  %46 = load i8, i8* %45, align 1, !insn.addr !2026
  %47 = trunc i32 %43 to i8, !insn.addr !2026
  %48 = or i8 %46, %47, !insn.addr !2026
  store i8 %48, i8* %45, align 1, !insn.addr !2026
  %49 = inttoptr i32 %40 to i8*, !insn.addr !2027
  %50 = load i8, i8* %49, align 1, !insn.addr !2027
  %51 = or i8 %50, %20, !insn.addr !2027
  %52 = icmp eq i8 %51, 0, !insn.addr !2027
  store i8 %51, i8* %49, align 1, !insn.addr !2027
  store i32 %ebp.1.reload, i32* inttoptr (i32 -1235777260 to i32*), align 4, !insn.addr !2028
  %53 = add i32 %43, -1, !insn.addr !2029
  %54 = icmp ne i32 %53, 0, !insn.addr !2029
  %55 = icmp eq i1 %54, %52, !insn.addr !2029
  store i32 %53, i32* %ecx.0.reg2mem, !insn.addr !2029
  store i32 %40, i32* %ebx.0.reg2mem, !insn.addr !2029
  store i32 -1235777261, i32* %ebp.1.reg2mem, !insn.addr !2029
  br i1 %55, label %dec_label_pc_40555d, label %dec_label_pc_405595, !insn.addr !2029

dec_label_pc_405595:                              ; preds = %dec_label_pc_40555d
  %56 = add i32 %16, %1, !insn.addr !2016
  %57 = add i32 %56, 4, !insn.addr !2030
  %58 = inttoptr i32 %57 to i32*, !insn.addr !2030
  store i32 %53, i32* %58, align 4, !insn.addr !2030
  %59 = inttoptr i32 %40 to i32*, !insn.addr !2031
  %60 = load i32, i32* %59, align 4, !insn.addr !2031
  %61 = mul i32 %60, 512, !insn.addr !2031
  %62 = udiv i32 %60, 8388608, !insn.addr !2031
  %63 = or i32 %62, %61, !insn.addr !2031
  store i32 %63, i32* %59, align 4, !insn.addr !2031
  %64 = add i32 %40, -162866100, !insn.addr !2032
  %65 = inttoptr i32 %64 to i8*, !insn.addr !2032
  %66 = load i8, i8* %65, align 1, !insn.addr !2032
  %67 = trunc i32 %53 to i8, !insn.addr !2032
  %68 = or i8 %66, %67, !insn.addr !2032
  %69 = icmp eq i8 %68, 0, !insn.addr !2032
  store i8 %68, i8* %65, align 1, !insn.addr !2032
  br i1 %69, label %dec_label_pc_4055ad, label %dec_label_pc_4055a4, !insn.addr !2033

dec_label_pc_4055a4:                              ; preds = %dec_label_pc_405595
  %70 = add i32 %56, 1, !insn.addr !2034
  store i32 %70, i32* inttoptr (i32 -1235795323 to i32*), align 4, !insn.addr !2035
  %71 = call i32 @unknown_cc40a340(), !insn.addr !2036
  br label %dec_label_pc_4055ad, !insn.addr !2037

dec_label_pc_4055ad:                              ; preds = %dec_label_pc_4055a4, %dec_label_pc_405595
  %72 = add i32 %17, 24, !insn.addr !2038
  %73 = inttoptr i32 %17 to i32*, !insn.addr !2039
  store i32 452984832, i32* %73, align 4, !insn.addr !2039
  %74 = add i32 %17, 16, !insn.addr !2040
  %75 = inttoptr i32 %74 to i32*, !insn.addr !2040
  store i32 %72, i32* %75, align 4, !insn.addr !2040
  ret i32 %17, !insn.addr !2041
}

define i32 @function_4055c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_4055c8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2042
}

define i32 @function_4055e3() local_unnamed_addr {
dec_label_pc_4055e3:
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 8, !insn.addr !2043
  %3 = inttoptr i32 %2 to i32*, !insn.addr !2043
  %4 = load i32, i32* %3, align 4, !insn.addr !2043
  %5 = add i32 %0, 12, !insn.addr !2044
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2044
  %7 = load i32, i32* %6, align 4, !insn.addr !2044
  %8 = add i32 %4, 40, !insn.addr !2045
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2045
  store i32 %7, i32* %9, align 4, !insn.addr !2045
  %10 = trunc i32 %1 to i16, !insn.addr !2046
  %11 = bitcast i32* %esi to i8*
  %12 = load i8, i8* %11, align 4, !insn.addr !2046
  call void @__asm_outsb(i16 %10, i8 %12), !insn.addr !2046
  ret i32 %7, !insn.addr !2047
}

define i32 @function_405600(i32 %arg1) local_unnamed_addr {
dec_label_pc_405600:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -1959781642, !insn.addr !2048
  %4 = inttoptr i32 %3 to i8*, !insn.addr !2048
  %5 = load i8, i8* %4, align 1, !insn.addr !2048
  %6 = trunc i32 %2 to i8, !insn.addr !2048
  %7 = or i8 %5, %6, !insn.addr !2048
  store i8 %7, i8* %4, align 1, !insn.addr !2048
  %8 = add i32 %0, 1, !insn.addr !2049
  %9 = add i32 %1, -2046260473, !insn.addr !2050
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2050
  store i8 0, i8* %10, align 1, !insn.addr !2050
  %11 = call i32 @function_404a60(i32 %8), !insn.addr !2051
  %12 = add i32 %1, -29, !insn.addr !2052
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2052
  %14 = load i32, i32* %13, align 4, !insn.addr !2052
  %15 = add i32 %1, 23, !insn.addr !2053
  %16 = inttoptr i32 %15 to i32*, !insn.addr !2053
  %17 = load i32, i32* %16, align 4, !insn.addr !2053
  %18 = add i32 %14, 341150468, !insn.addr !2054
  %19 = inttoptr i32 %18 to i32*, !insn.addr !2054
  store i32 %11, i32* %19, align 4, !insn.addr !2054
  %20 = add i32 %11, 8, !insn.addr !2055
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2055
  store i32 %17, i32* %21, align 4, !insn.addr !2055
  %22 = add i32 %11, 12, !insn.addr !2056
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2056
  store i32 %14, i32* %23, align 4, !insn.addr !2056
  %24 = add i32 %0, 17, !insn.addr !2057
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2057
  %26 = load i32, i32* %25, align 4, !insn.addr !2057
  %27 = inttoptr i32 %11 to i32*, !insn.addr !2058
  store i32 %26, i32* %27, align 4, !insn.addr !2058
  %28 = add i32 %0, -57, !insn.addr !2059
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2059
  store i32 %11, i32* %29, align 4, !insn.addr !2059
  ret i32 %11, !insn.addr !2060
}

define i32 @function_405640(i32 %arg1, i8 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_405640:
  %esi.0.reg2mem = alloca i32, !insn.addr !2061
  %esp.1.reg2mem = alloca i32, !insn.addr !2061
  %ecx.0.reg2mem = alloca i32, !insn.addr !2061
  %eax.0.reg2mem = alloca i32, !insn.addr !2061
  %mm1.0.reg2mem = alloca i64, !insn.addr !2061
  %zf.0.reg2mem = alloca i1, !insn.addr !2061
  %esp.0.reg2mem = alloca i32, !insn.addr !2061
  %edx.0.reg2mem = alloca i32, !insn.addr !2061
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_8()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %6 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2062
  %7 = zext i8 %arg2 to i32, !insn.addr !2063
  %8 = and i32 %1, -256, !insn.addr !2063
  %9 = or i32 %8, %7, !insn.addr !2063
  %10 = add i32 %9, 16, !insn.addr !2064
  %11 = icmp eq i32 %10, 0, !insn.addr !2065
  store i32 -16, i32* %edx.0.reg2mem, !insn.addr !2066
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !2066
  br i1 %11, label %dec_label_pc_40567d, label %dec_label_pc_40565d, !insn.addr !2066

dec_label_pc_40565d:                              ; preds = %dec_label_pc_405640
  call void @__asm_out.1(i32 120, i32 %10), !insn.addr !2067
  %12 = add i8 %arg2, -123
  %13 = zext i8 %12 to i32, !insn.addr !2068
  %14 = and i32 %10, 65280, !insn.addr !2068
  %15 = or i32 %14, %13, !insn.addr !2068
  %16 = add nuw nsw i32 %15, 28729, !insn.addr !2069
  %17 = load i8, i8* inttoptr (i32 269546835 to i8*), align 1, !insn.addr !2070
  %18 = or i8 %17, %arg2, !insn.addr !2070
  %19 = zext i8 %18 to i32, !insn.addr !2070
  %20 = or i32 %8, %19, !insn.addr !2070
  %21 = add i32 %2, 340429593, !insn.addr !2071
  %22 = inttoptr i32 %21 to i8*, !insn.addr !2071
  %23 = load i8, i8* %22, align 1, !insn.addr !2071
  %24 = trunc i32 %2 to i8, !insn.addr !2071
  %25 = sub i8 %23, %24, !insn.addr !2071
  store i8 %25, i8* %22, align 1, !insn.addr !2071
  call void @__asm_into(i32 %4), !insn.addr !2072
  %26 = add i32 %0, 66, !insn.addr !2073
  %27 = inttoptr i32 %26 to i8*, !insn.addr !2073
  %28 = load i8, i8* %27, align 1, !insn.addr !2073
  %29 = udiv i32 %16, 256, !insn.addr !2073
  %30 = trunc i32 %29 to i8, !insn.addr !2073
  %31 = or i8 %28, %30, !insn.addr !2073
  store i8 %31, i8* %27, align 1, !insn.addr !2073
  store i32 %6, i32* %stack_var_-8, align 4, !insn.addr !2074
  %32 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !2074
  store i32 %20, i32* %edx.0.reg2mem, !insn.addr !2074
  store i32 %32, i32* %esp.0.reg2mem, !insn.addr !2074
  br label %dec_label_pc_40567d, !insn.addr !2074

dec_label_pc_40567d:                              ; preds = %dec_label_pc_40565d, %dec_label_pc_405640
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %33 = call i32 @__asm_int3(), !insn.addr !2075
  %34 = trunc i32 %33 to i8, !insn.addr !2076
  call void @__asm_out(i32 56, i8 %34), !insn.addr !2076
  %35 = icmp eq i32 %33, 0, !insn.addr !2077
  %phitmp = add i32 %2, -1
  store i1 %35, i1* %zf.0.reg2mem, !insn.addr !2077
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !2077
  store i32 %phitmp, i32* %ecx.0.reg2mem, !insn.addr !2077
  br label %dec_label_pc_405685, !insn.addr !2077

dec_label_pc_405685:                              ; preds = %dec_label_pc_405689, %dec_label_pc_40567d
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  br i1 %zf.0.reload, label %dec_label_pc_4056c3, label %dec_label_pc_405687, !insn.addr !2078

dec_label_pc_405687:                              ; preds = %dec_label_pc_405685
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %36 = icmp eq i32 %ecx.0.reload, 0, !insn.addr !2079
  br i1 %36, label %dec_label_pc_405689, label %dec_label_pc_405701, !insn.addr !2079

dec_label_pc_405689:                              ; preds = %dec_label_pc_405687
  %mm1.0.reload = load i64, i64* %mm1.0.reg2mem
  %37 = add i32 %eax.0.reload, 117, !insn.addr !2080
  %38 = and i32 %37, 255, !insn.addr !2080
  %39 = and i32 %eax.0.reload, -256, !insn.addr !2080
  %40 = or i32 %38, %39, !insn.addr !2080
  %41 = add i32 %40, 1946710073, !insn.addr !2081
  %42 = call i64 @__asm_paddd(i64 %mm1.0.reload, i64 %3), !insn.addr !2082
  %43 = inttoptr i32 %41 to i32*, !insn.addr !2083
  %44 = load i32, i32* %43, align 4, !insn.addr !2083
  %45 = icmp eq i32 %44, 0, !insn.addr !2084
  %46 = icmp eq i1 %45, false, !insn.addr !2085
  store i1 false, i1* %zf.0.reg2mem, !insn.addr !2085
  store i64 %42, i64* %mm1.0.reg2mem, !insn.addr !2085
  store i32 %44, i32* %eax.0.reg2mem, !insn.addr !2085
  store i32 -1, i32* %ecx.0.reg2mem, !insn.addr !2085
  br i1 %46, label %dec_label_pc_405685, label %dec_label_pc_405699, !insn.addr !2085

dec_label_pc_405699:                              ; preds = %dec_label_pc_405689
  %47 = add i32 %44, 163, !insn.addr !2086
  %48 = and i32 %47, 255, !insn.addr !2086
  %49 = and i32 %44, -256, !insn.addr !2086
  %50 = or i32 %48, %49, !insn.addr !2086
  ret i32 %50, !insn.addr !2087

dec_label_pc_4056c3:                              ; preds = %dec_label_pc_405685
  %51 = sext i8 %arg2 to i32, !insn.addr !2088
  %52 = add i32 %esp.0.reload, -4, !insn.addr !2089
  %53 = inttoptr i32 %52 to i32*, !insn.addr !2089
  %54 = add i32 %esp.0.reload, -8, !insn.addr !2090
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2090
  store i32 %arg3, i32* %55, align 4, !insn.addr !2090
  %56 = add i32 %esp.0.reload, -12, !insn.addr !2091
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2091
  store i32 %arg4, i32* %57, align 4, !insn.addr !2091
  %58 = add i32 %esp.0.reload, -16, !insn.addr !2092
  %59 = inttoptr i32 %58 to i32*, !insn.addr !2092
  store i32 %51, i32* %59, align 4, !insn.addr !2092
  %60 = inttoptr i32 %arg3 to i8*, !insn.addr !2093
  store i8 %arg2, i8* %60, align 1, !insn.addr !2093
  %61 = add i32 %esp.0.reload, -20, !insn.addr !2094
  %62 = inttoptr i32 %61 to i32*, !insn.addr !2094
  store i32 -1, i32* %62, align 4, !insn.addr !2094
  ret i32 %51, !insn.addr !2094

dec_label_pc_405701:                              ; preds = %dec_label_pc_405687
  %63 = add i32 %eax.0.reload, 4, !insn.addr !2095
  %64 = inttoptr i32 %63 to i32*, !insn.addr !2095
  %65 = load i32, i32* %64, align 4, !insn.addr !2095
  %66 = add i32 %65, %edx.0.reload, !insn.addr !2095
  %67 = add i32 %esp.0.reload, -4, !insn.addr !2096
  %68 = inttoptr i32 %67 to i32*, !insn.addr !2096
  store i32 %66, i32* %68, align 4, !insn.addr !2096
  %69 = inttoptr i32 %esp.0.reload to i32*, !insn.addr !2097
  %70 = load i32, i32* %69, align 4, !insn.addr !2097
  %71 = and i32 %70, -256, !insn.addr !2098
  %72 = or i32 %71, 175, !insn.addr !2098
  %73 = add i32 %72, -1869574024, !insn.addr !2099
  %74 = inttoptr i32 %73 to i8*, !insn.addr !2099
  %75 = load i8, i8* %74, align 1, !insn.addr !2099
  %76 = xor i8 %75, -76, !insn.addr !2099
  store i8 %76, i8* %74, align 1, !insn.addr !2099
  %77 = add i32 %esp.0.reload, 4, !insn.addr !2100
  %78 = inttoptr i32 %77 to i32*, !insn.addr !2100
  store i32 %6, i32* %78, align 4, !insn.addr !2100
  %79 = add i32 %0, 1393068163, !insn.addr !2101
  %80 = inttoptr i32 %79 to i32*, !insn.addr !2101
  %81 = load i32, i32* %80, align 4, !insn.addr !2101
  store i32 %arg3, i32* %69, align 4, !insn.addr !2102
  %82 = xor i32 %81, %6, !insn.addr !2103
  %83 = add i32 %arg3, 1, !insn.addr !2104
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !2105
  br label %dec_label_pc_405748, !insn.addr !2105

dec_label_pc_405748:                              ; preds = %dec_label_pc_405764, %dec_label_pc_405701
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %84 = inttoptr i32 %esi.0.reload to i32*, !insn.addr !2106
  %85 = load i32, i32* %84, align 4, !insn.addr !2106
  %86 = add i32 %esp.1.reload, -4, !insn.addr !2107
  %87 = inttoptr i32 %86 to i32*, !insn.addr !2107
  store i32 1, i32* %87, align 4, !insn.addr !2107
  %88 = add i32 %esp.1.reload, -8, !insn.addr !2108
  %89 = inttoptr i32 %88 to i32*, !insn.addr !2108
  store i32 -74, i32* %89, align 4, !insn.addr !2108
  %90 = add i32 %esp.1.reload, -12, !insn.addr !2109
  %91 = inttoptr i32 %90 to i32*, !insn.addr !2109
  store i32 0, i32* %91, align 4, !insn.addr !2109
  %92 = add i32 %esp.1.reload, -16, !insn.addr !2110
  %93 = inttoptr i32 %92 to i32*, !insn.addr !2110
  store i32 %85, i32* %93, align 4, !insn.addr !2110
  %94 = call i32 @unknown_6da4b0(), !insn.addr !2111
  %95 = icmp eq i32 %94, 70006, !insn.addr !2112
  br i1 %95, label %dec_label_pc_405764, label %dec_label_pc_40575d, !insn.addr !2113

dec_label_pc_40575d:                              ; preds = %dec_label_pc_405748
  %96 = call i8 @__asm_in.4(i16 24244), !insn.addr !2114
  %97 = sext i8 %96 to i32, !insn.addr !2114
  %98 = and i32 %94, -256, !insn.addr !2114
  %99 = or i32 %98, %97, !insn.addr !2114
  ret i32 %99, !insn.addr !2115

dec_label_pc_405764:                              ; preds = %dec_label_pc_405748
  %100 = add i32 %esi.0.reload, 8, !insn.addr !2116
  %101 = inttoptr i32 %100 to i32*, !insn.addr !2116
  %102 = load i32, i32* %101, align 4, !insn.addr !2116
  %103 = icmp eq i32 %102, 0, !insn.addr !2117
  %104 = icmp eq i1 %103, false, !insn.addr !2118
  store i32 %92, i32* %esp.1.reg2mem, !insn.addr !2118
  store i32 %102, i32* %esi.0.reg2mem, !insn.addr !2118
  br i1 %104, label %dec_label_pc_405748, label %dec_label_pc_405786, !insn.addr !2118

dec_label_pc_405786:                              ; preds = %dec_label_pc_405764
  %105 = mul i32 %ecx.0.reload, 4, !insn.addr !2119
  %106 = add i32 %5, -1065024442, !insn.addr !2119
  %107 = add i32 %106, %105, !insn.addr !2119
  %108 = inttoptr i32 %107 to i32*, !insn.addr !2119
  %109 = load i32, i32* %108, align 4, !insn.addr !2119
  %110 = add i32 %109, 8, !insn.addr !2120
  %111 = inttoptr i32 %110 to i32*, !insn.addr !2120
  %112 = load i32, i32* %111, align 4, !insn.addr !2120
  %113 = call i32 @__asm_insd(i16 24244), !insn.addr !2121
  %114 = inttoptr i32 %83 to i32*, !insn.addr !2121
  store i32 %113, i32* %114, align 4, !insn.addr !2121
  %115 = mul i32 %112, 2, !insn.addr !2122
  %116 = add i32 %82, -69, !insn.addr !2122
  %117 = add i32 %116, %115, !insn.addr !2122
  %118 = inttoptr i32 %117 to i32*, !insn.addr !2122
  %119 = load i32, i32* %118, align 4, !insn.addr !2122
  %120 = add i32 %esp.1.reload, -20, !insn.addr !2122
  %121 = inttoptr i32 %120 to i32*, !insn.addr !2122
  store i32 %119, i32* %121, align 4, !insn.addr !2122
  %122 = call i32 @unknown_92ae6d60(), !insn.addr !2123
  ret i32 %122, !insn.addr !2124
}

define i32 @function_4057a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_4057a4:
  %merge.reg2mem = alloca i32, !insn.addr !2125
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %3, 1963066494, !insn.addr !2125
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2125
  %8 = load i32, i32* %7, align 4, !insn.addr !2125
  %9 = add i32 %8, 1, !insn.addr !2125
  store i32 %9, i32* %7, align 4, !insn.addr !2125
  %10 = load i32, i32* inttoptr (i32 1781814550 to i32*), align 4, !insn.addr !2126
  %11 = and i32 %10, %4, !insn.addr !2126
  %12 = load i32, i32* inttoptr (i32 5044200 to i32*), align 8, !insn.addr !2127
  %13 = add i32 %11, 119670, !insn.addr !2128
  %14 = inttoptr i32 %13 to i8*, !insn.addr !2128
  %15 = load i8, i8* %14, align 1, !insn.addr !2128
  %16 = trunc i32 %5 to i8, !insn.addr !2128
  %17 = add i8 %15, %16, !insn.addr !2128
  %18 = icmp eq i8 %17, 0, !insn.addr !2128
  store i8 %17, i8* %14, align 1, !insn.addr !2128
  %19 = icmp eq i1 %18, false, !insn.addr !2129
  store i32 %12, i32* %merge.reg2mem, !insn.addr !2129
  br i1 %19, label %dec_label_pc_4057c7, label %dec_label_pc_4057c0, !insn.addr !2129

dec_label_pc_4057c0:                              ; preds = %dec_label_pc_4057a4
  %20 = and i8 %15, 15, !insn.addr !2128
  %21 = and i8 %16, 15, !insn.addr !2128
  %22 = add nuw nsw i8 %20, %21, !insn.addr !2128
  %23 = icmp ugt i8 %22, 15, !insn.addr !2128
  %24 = and i32 %12, 14
  %25 = icmp ugt i32 %24, 9, !insn.addr !2130
  %26 = or i1 %25, %23, !insn.addr !2130
  %27 = add i32 %12, 10, !insn.addr !2130
  %28 = select i1 %26, i32 %27, i32 %12, !insn.addr !2130
  %29 = sext i1 %26 to i32, !insn.addr !2130
  %30 = and i32 %28, 15, !insn.addr !2130
  %31 = and i32 %12, -65536, !insn.addr !2130
  %32 = or i32 %30, %31, !insn.addr !2130
  %33 = mul i32 %29, 256
  %34 = add i32 %33, %12
  %35 = and i32 %34, 65280, !insn.addr !2130
  %36 = or i32 %32, %35, !insn.addr !2130
  %37 = inttoptr i32 %36 to i8*, !insn.addr !2131
  %38 = load i8, i8* %37, align 1, !insn.addr !2131
  %39 = trunc i32 %30 to i8, !insn.addr !2131
  %40 = add i8 %38, %39, !insn.addr !2131
  store i8 %40, i8* %37, align 1, !insn.addr !2131
  %41 = add i32 %1, 17, !insn.addr !2132
  %42 = inttoptr i32 %41 to i32*, !insn.addr !2132
  %43 = load i32, i32* %42, align 4, !insn.addr !2132
  %44 = icmp eq i32 %43, 0, !insn.addr !2133
  %45 = icmp eq i1 %44, false, !insn.addr !2134
  store i32 %36, i32* %merge.reg2mem, !insn.addr !2134
  br i1 %45, label %dec_label_pc_4057c7, label %dec_label_pc_4057d5, !insn.addr !2134

dec_label_pc_4057c7:                              ; preds = %dec_label_pc_4057c0, %dec_label_pc_4057a4
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2135

dec_label_pc_4057d5:                              ; preds = %dec_label_pc_4057c0
  %46 = icmp eq i32 %0, 0, !insn.addr !2136
  br i1 %46, label %dec_label_pc_405803, label %dec_label_pc_4057d9, !insn.addr !2137

dec_label_pc_4057d9:                              ; preds = %dec_label_pc_4057d5
  %47 = icmp ult i32 %36, 3000000, !insn.addr !2138
  %48 = icmp eq i1 %47, false, !insn.addr !2139
  br i1 %48, label %dec_label_pc_405803, label %dec_label_pc_4057ea, !insn.addr !2139

dec_label_pc_4057ea:                              ; preds = %dec_label_pc_4057d9
  %49 = add i32 %2, -4, !insn.addr !2140
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2140
  %51 = load i32, i32* %50, align 4, !insn.addr !2140
  %52 = trunc i32 %arg2 to i16, !insn.addr !2141
  %53 = inttoptr i32 %51 to i32*, !insn.addr !2141
  %54 = load i32, i32* %53, align 4, !insn.addr !2141
  call void @__asm_outsd(i16 %52, i32 %54), !insn.addr !2141
  %55 = call i32 @function_40b540(i32 %arg1, i32 %51, i32 2), !insn.addr !2142
  ret i32 %55, !insn.addr !2143

dec_label_pc_405803:                              ; preds = %dec_label_pc_4057d9, %dec_label_pc_4057d5
  %56 = add i32 %2, 8, !insn.addr !2144
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2144
  %58 = load i32, i32* %57, align 4, !insn.addr !2144
  %59 = add i32 %58, 4, !insn.addr !2145
  %60 = inttoptr i32 %59 to i32*, !insn.addr !2145
  %61 = load i32, i32* %60, align 4, !insn.addr !2145
  %62 = icmp eq i32 %61, 108, !insn.addr !2145
  %63 = icmp eq i1 %62, false, !insn.addr !2146
  br i1 %63, label %dec_label_pc_405818, label %dec_label_pc_40580e, !insn.addr !2146

dec_label_pc_40580e:                              ; preds = %dec_label_pc_405803
  %64 = inttoptr i32 %58 to i32*, !insn.addr !2147
  %65 = load i32, i32* %64, align 4, !insn.addr !2147
  ret i32 %65, !insn.addr !2148

dec_label_pc_405818:                              ; preds = %dec_label_pc_405803
  %66 = add i32 %58, 8, !insn.addr !2149
  %67 = inttoptr i32 %66 to i32*, !insn.addr !2149
  %68 = load i32, i32* %67, align 4, !insn.addr !2149
  %69 = xor i32 %68, -378145147, !insn.addr !2149
  store i32 %69, i32* %67, align 4, !insn.addr !2149
  ret i32 %36, !insn.addr !2150
}

define i32 @function_405821() local_unnamed_addr {
dec_label_pc_405821:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 4, !insn.addr !2151
  %2 = inttoptr i32 %1 to i32*, !insn.addr !2151
  %3 = load i32, i32* %2, align 4, !insn.addr !2151
  ret i32 %3, !insn.addr !2152
}

define i32 @function_405826() local_unnamed_addr {
dec_label_pc_405826:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8
  %4 = udiv i32 %2, 256, !insn.addr !2153
  %5 = trunc i32 %4 to i8, !insn.addr !2153
  %6 = add i8 %5, %3, !insn.addr !2153
  %7 = inttoptr i32 %1 to i8*, !insn.addr !2153
  store i8 %6, i8* %7, align 1, !insn.addr !2153
  %8 = call i32 @unknown_4f40a4b0(i32 %2, i32 0), !insn.addr !2154
  %9 = add i32 %0, 8, !insn.addr !2155
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2155
  %11 = load i32, i32* %10, align 4, !insn.addr !2155
  %12 = icmp eq i32 %11, 0, !insn.addr !2156
  %13 = icmp eq i1 %12, false, !insn.addr !2157
  br i1 %13, label %14, label %dec_label_pc_40583d, !insn.addr !2157

; <label>:14:                                     ; preds = %dec_label_pc_405826
  %15 = call i32 @function_405821(), !insn.addr !2157
  br label %dec_label_pc_40583d, !insn.addr !2157

dec_label_pc_40583d:                              ; preds = %14, %dec_label_pc_405826
  %16 = trunc i32 %2 to i16, !insn.addr !2158
  %17 = call i32 @__asm_in(i16 %16), !insn.addr !2158
  ret i32 %17, !insn.addr !2159
}

define i32 @function_405850(i32 %arg1) local_unnamed_addr {
dec_label_pc_405850:
  %.lcssa.reg2mem = alloca i8, !insn.addr !2160
  %ecx.01.reg2mem = alloca i32, !insn.addr !2160
  %edi.02.reg2mem = alloca i32, !insn.addr !2160
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %3 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2160
  %4 = xor i32 %1, %0, !insn.addr !2161
  %5 = icmp eq i32 %4, 0, !insn.addr !2161
  br i1 %5, label %dec_label_pc_405888, label %dec_label_pc_40585d, !insn.addr !2162

dec_label_pc_40585d:                              ; preds = %dec_label_pc_405850
  %6 = add i32 %1, 12, !insn.addr !2163
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2163
  %8 = load i32, i32* %7, align 4, !insn.addr !2163
  %9 = add i32 %3, -8, !insn.addr !2164
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2164
  store i32 %4, i32* %10, align 4, !insn.addr !2164
  %11 = trunc i32 %1 to i8
  %12 = select i1 %2, i32 -1, i32 1, !insn.addr !2165
  store i32 %8, i32* %edi.02.reg2mem
  store i32 -1, i32* %ecx.01.reg2mem
  br label %17

; <label>:13:                                     ; preds = %17
  %14 = add i32 %ecx.01.reload, -1, !insn.addr !2165
  %15 = add i32 %edi.02.reload, %12, !insn.addr !2165
  %16 = icmp eq i32 %14, 0, !insn.addr !2165
  store i32 %15, i32* %edi.02.reg2mem, !insn.addr !2165
  store i32 %14, i32* %ecx.01.reg2mem, !insn.addr !2165
  store i8 %19, i8* %.lcssa.reg2mem, !insn.addr !2165
  br i1 %16, label %21, label %17, !insn.addr !2165

; <label>:17:                                     ; preds = %dec_label_pc_40585d, %13
  %ecx.01.reload = load i32, i32* %ecx.01.reg2mem
  %edi.02.reload = load i32, i32* %edi.02.reg2mem
  %18 = inttoptr i32 %edi.02.reload to i8*, !insn.addr !2165
  %19 = load i8, i8* %18, align 1, !insn.addr !2165
  %20 = icmp eq i8 %19, %11, !insn.addr !2165
  store i8 %11, i8* %.lcssa.reg2mem, !insn.addr !2165
  br i1 %20, label %21, label %13, !insn.addr !2165

; <label>:21:                                     ; preds = %13, %17
  %.lcssa.reload = load i8, i8* %.lcssa.reg2mem
  %22 = icmp ugt i8 %.lcssa.reload, %11, !insn.addr !2165
  %23 = add i32 %3, -12, !insn.addr !2166
  %24 = inttoptr i32 %23 to i32*, !insn.addr !2166
  store i32 %ecx.01.reload, i32* %24, align 4, !insn.addr !2166
  br i1 %22, label %dec_label_pc_405872, label %25, !insn.addr !2167

; <label>:25:                                     ; preds = %21
  %26 = call i32 @function_405826(), !insn.addr !2167
  br label %dec_label_pc_405872, !insn.addr !2167

dec_label_pc_405872:                              ; preds = %21, %25
  %27 = add i32 %3, -16, !insn.addr !2168
  %28 = inttoptr i32 %27 to i32*, !insn.addr !2168
  %29 = call i32 @__asm_int1(), !insn.addr !2169
  ret i32 %29, !insn.addr !2169

dec_label_pc_405888:                              ; preds = %dec_label_pc_405850
  %30 = add i32 %3, -4, !insn.addr !2170
  %31 = inttoptr i32 %30 to i32*, !insn.addr !2170
  ret i32 %1, !insn.addr !2171
}

define i32 @function_405890(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_405890:
  %ecx.2.reg2mem = alloca i32, !insn.addr !2172
  %edi.1.reg2mem = alloca i32, !insn.addr !2172
  %ecx.1.reg2mem = alloca i32, !insn.addr !2172
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = trunc i32 %3 to i16, !insn.addr !2173
  %6 = call i8 @__asm_in.4(i16 %5), !insn.addr !2173
  %7 = add i32 %1, 12, !insn.addr !2174
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2174
  %9 = load i32, i32* %8, align 4, !insn.addr !2174
  %10 = icmp eq i32 %0, 0, !insn.addr !2175
  br i1 %10, label %dec_label_pc_4058c7, label %dec_label_pc_4058a7.preheader, !insn.addr !2176

dec_label_pc_4058a7.preheader:                    ; preds = %dec_label_pc_405890
  %11 = select i1 %4, i32 -1, i32 1
  br label %dec_label_pc_4058a7

dec_label_pc_4058a7:                              ; preds = %dec_label_pc_4058a7.preheader, %13
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %12 = icmp eq i32 %ecx.1.reload, 0, !insn.addr !2177
  store i32 0, i32* %ecx.2.reg2mem, !insn.addr !2177
  br i1 %12, label %dec_label_pc_4058b6, label %13, !insn.addr !2177

; <label>:13:                                     ; preds = %dec_label_pc_4058a7
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %14 = inttoptr i32 %edi.1.reload to i8*, !insn.addr !2177
  %15 = load i8, i8* %14, align 1, !insn.addr !2177
  %16 = icmp eq i8 %15, 0, !insn.addr !2177
  %17 = add i32 %edi.1.reload, %11, !insn.addr !2177
  %18 = add i32 %ecx.1.reload, -1, !insn.addr !2177
  store i32 %18, i32* %ecx.1.reg2mem, !insn.addr !2177
  store i32 %17, i32* %edi.1.reg2mem, !insn.addr !2177
  store i32 %18, i32* %ecx.2.reg2mem, !insn.addr !2177
  br i1 %16, label %dec_label_pc_4058b6, label %dec_label_pc_4058a7, !insn.addr !2177

dec_label_pc_4058b6:                              ; preds = %dec_label_pc_4058a7, %13
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %19 = sub i32 -2, %ecx.2.reload, !insn.addr !2178
  %20 = add i32 %9, -4, !insn.addr !2179
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2179
  store i32 %19, i32* %21, align 4, !insn.addr !2179
  %22 = add i32 %9, -9, !insn.addr !2180
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2180
  store i32 0, i32* %23, align 4, !insn.addr !2180
  ret i32 0, !insn.addr !2180

dec_label_pc_4058c7:                              ; preds = %dec_label_pc_405890
  %24 = add i32 %2, 8, !insn.addr !2181
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2181
  %26 = load i32, i32* %25, align 4, !insn.addr !2181
  %27 = add i32 %9, -4, !insn.addr !2182
  %28 = inttoptr i32 %27 to i32*, !insn.addr !2182
  store i32 0, i32* %28, align 4, !insn.addr !2182
  ret i32 %26, !insn.addr !2183
}

define i32 @function_4058d1() local_unnamed_addr {
dec_label_pc_4058d1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2184
}

define i32 @function_4058d3() local_unnamed_addr {
dec_label_pc_4058d3:
  %0 = call i32 @function_405931(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2185
  ret i32 %0, !insn.addr !2185
}

define i32 @function_4058e3() local_unnamed_addr {
dec_label_pc_4058e3:
  %edi.1.reg2mem = alloca i32, !insn.addr !2186
  %edx.1.reg2mem = alloca i32, !insn.addr !2186
  %ecx.1.reg2mem = alloca i32, !insn.addr !2186
  %eax.1.reg2mem = alloca i32, !insn.addr !2186
  %edi.0.reg2mem = alloca i32, !insn.addr !2186
  %esi.0.reg2mem = alloca i32, !insn.addr !2186
  %cf.0.reg2mem = alloca i32, !insn.addr !2186
  %esp.0.reg2mem = alloca i32, !insn.addr !2186
  %edx.0.reg2mem = alloca i32, !insn.addr !2186
  %ecx.0.reg2mem = alloca i32, !insn.addr !2186
  %eax.0.reg2mem = alloca i32, !insn.addr !2186
  %sf.0.reg2mem = alloca i1, !insn.addr !2186
  %of.0.reg2mem = alloca i1, !insn.addr !2186
  %df.0.reg2mem = alloca i32, !insn.addr !2186
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = add i32 %0, -18, !insn.addr !2186
  %4 = add i32 %0, -8, !insn.addr !2187
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2187
  store i32 %3, i32* %5, align 4, !insn.addr !2187
  %phitmp = select i1 %1, i32 -1, i32 1
  %phitmp1 = select i1 %2, i32 -81, i32 -82
  %6 = add i32 %0, -4
  %7 = inttoptr i32 %6 to i32*
  store i32 %phitmp, i32* %df.0.reg2mem, !insn.addr !2188
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !2188
  store i32 %phitmp1, i32* %cf.0.reg2mem, !insn.addr !2188
  br label %dec_label_pc_4058ee, !insn.addr !2188

dec_label_pc_4058eb:                              ; preds = %dec_label_pc_405923
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %8 = icmp ult i32 %eax.1.reload, 277414633, !insn.addr !2189
  %9 = select i1 %8, i32 -123827777, i32 -123827778, !insn.addr !2190
  %10 = add i32 %45, %9, !insn.addr !2190
  %11 = icmp slt i32 %55, 0, !insn.addr !2191
  %12 = inttoptr i32 %10 to i32*, !insn.addr !2192
  %13 = load i32, i32* %12, align 4, !insn.addr !2192
  store i32 1, i32* %df.0.reg2mem, !insn.addr !2193
  store i1 false, i1* %of.0.reg2mem, !insn.addr !2193
  store i1 %11, i1* %sf.0.reg2mem, !insn.addr !2193
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !2193
  store i32 0, i32* %ecx.0.reg2mem, !insn.addr !2193
  store i32 %edx.1.reload, i32* %edx.0.reg2mem, !insn.addr !2193
  store i32 %51, i32* %esp.0.reg2mem, !insn.addr !2193
  store i32 -82, i32* %cf.0.reg2mem, !insn.addr !2193
  store i32 %55, i32* %esi.0.reg2mem, !insn.addr !2193
  store i32 %13, i32* %edi.0.reg2mem, !insn.addr !2193
  br label %dec_label_pc_4058ee, !insn.addr !2193

dec_label_pc_4058ee:                              ; preds = %dec_label_pc_4058eb, %dec_label_pc_4058e3
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %sf.0.reload = load i1, i1* %sf.0.reg2mem
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %df.0.reload = load i32, i32* %df.0.reg2mem
  %14 = icmp eq i1 %sf.0.reload, %of.0.reload, !insn.addr !2194
  br i1 %14, label %dec_label_pc_4058fd, label %dec_label_pc_4058f3, !insn.addr !2194

dec_label_pc_4058f3:                              ; preds = %dec_label_pc_4058ee
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %15 = mul i32 %ecx.0.reload, 2, !insn.addr !2195
  %16 = add i32 %15, -38, !insn.addr !2195
  %17 = add i32 %16, %esp.0.reload, !insn.addr !2195
  %18 = inttoptr i32 %17 to i32*, !insn.addr !2195
  %19 = load i32, i32* %18, align 4, !insn.addr !2195
  %20 = add i32 %ecx.0.reload, 1, !insn.addr !2196
  store i32 %20, i32* %7, align 4, !insn.addr !2197
  store i32 %19, i32* %eax.1.reg2mem, !insn.addr !2198
  store i32 %20, i32* %ecx.1.reg2mem, !insn.addr !2198
  store i32 %edx.0.reload, i32* %edx.1.reg2mem, !insn.addr !2198
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !2198
  br label %dec_label_pc_405911, !insn.addr !2198

dec_label_pc_4058fd:                              ; preds = %dec_label_pc_4058ee
  %cf.0.reload = load i32, i32* %cf.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %21 = trunc i32 %ecx.0.reload to i16, !insn.addr !2199
  %22 = trunc i32 %eax.0.reload to i16, !insn.addr !2199
  %23 = and i16 %21, 255, !insn.addr !2199
  %24 = add i32 %esp.0.reload, -2, !insn.addr !2200
  %25 = inttoptr i32 %24 to i16*, !insn.addr !2200
  %26 = and i32 %eax.0.reload, -65536, !insn.addr !2199
  %27 = sdiv i16 %22, %23, !insn.addr !2199
  %28 = and i16 %27, 255
  %.masked = zext i16 %28 to i32
  %29 = or i32 %26, %.masked, !insn.addr !2199
  %30 = srem i16 %22, %23, !insn.addr !2199
  %31 = mul i16 %30, 256
  %32 = zext i16 %31 to i32, !insn.addr !2199
  %33 = or i32 %29, %32, !insn.addr !2199
  %34 = add i32 %esi.0.reload, -232049691, !insn.addr !2201
  %35 = inttoptr i32 %34 to i32*, !insn.addr !2201
  %36 = load i32, i32* %35, align 4, !insn.addr !2201
  %37 = sub i32 %36, %cf.0.reload, !insn.addr !2201
  store i32 %37, i32* %35, align 4, !insn.addr !2201
  %38 = sext i32 %edx.0.reload to i64, !insn.addr !2202
  %39 = sext i32 %33 to i64, !insn.addr !2202
  %40 = mul nsw i64 %39, %38, !insn.addr !2202
  %41 = udiv i64 %40, 4294967296, !insn.addr !2202
  %42 = trunc i64 %41 to i32, !insn.addr !2202
  %43 = add i32 %ecx.0.reload, -1, !insn.addr !2203
  store i32 %43, i32* %eax.1.reg2mem, !insn.addr !2204
  store i32 %43, i32* %ecx.1.reg2mem, !insn.addr !2204
  store i32 %42, i32* %edx.1.reg2mem, !insn.addr !2204
  store i32 %42, i32* %edi.1.reg2mem, !insn.addr !2204
  br label %dec_label_pc_405911, !insn.addr !2204

dec_label_pc_405911:                              ; preds = %dec_label_pc_4058fd, %dec_label_pc_4058f3
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %44 = icmp eq i32 %eax.1.reload, 277414633, !insn.addr !2189
  %45 = load i32, i32* %5, align 4, !insn.addr !2205
  %46 = add i32 %ecx.1.reload, -1, !insn.addr !2206
  %47 = icmp ne i32 %46, 0, !insn.addr !2206
  %48 = icmp eq i1 %47, %44, !insn.addr !2206
  br i1 %48, label %dec_label_pc_405923, label %dec_label_pc_405920, !insn.addr !2206

dec_label_pc_405920:                              ; preds = %dec_label_pc_405911
  ret i32 %45, !insn.addr !2207

dec_label_pc_405923:                              ; preds = %dec_label_pc_405911
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %49 = add i32 %ecx.1.reload, -7, !insn.addr !2208
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2208
  %51 = load i32, i32* %50, align 4, !insn.addr !2208
  %52 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !2209
  %53 = inttoptr i32 %edi.1.reload to i8*, !insn.addr !2209
  call void @__asm_rep_movsb_memcpy(i8* %53, i8* %52, i32 %46), !insn.addr !2209
  %54 = mul i32 %46, %df.0.reload, !insn.addr !2209
  %55 = add i32 %edi.1.reload, %54, !insn.addr !2209
  %56 = icmp eq i32 %55, 0, !insn.addr !2191
  %57 = icmp eq i1 %56, false, !insn.addr !2210
  br i1 %57, label %dec_label_pc_4058eb, label %dec_label_pc_40592e, !insn.addr !2210

dec_label_pc_40592e:                              ; preds = %dec_label_pc_405923
  %58 = add i32 %0, -12, !insn.addr !2211
  %59 = inttoptr i32 %58 to i32*, !insn.addr !2211
  %60 = load i32, i32* %59, align 4, !insn.addr !2211
  ret i32 %60, !insn.addr !2211
}

define i32 @function_405931(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_405931:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 61, !insn.addr !2212
  %2 = inttoptr i32 %1 to i8*, !insn.addr !2212
  %3 = load i8, i8* %2, align 1, !insn.addr !2212
  %4 = trunc i32 %0 to i8, !insn.addr !2212
  %5 = add i8 %3, %4, !insn.addr !2212
  store i8 %5, i8* %2, align 1, !insn.addr !2212
  %6 = call i32 @__asm_in.2(i32 93), !insn.addr !2213
  ret i32 %6, !insn.addr !2214
}

define i32 @function_405954(i32 %arg1) local_unnamed_addr {
dec_label_pc_405954:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2215
}

define i32 @function_405962() local_unnamed_addr {
dec_label_pc_405962:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2216
}

define i32 @function_40596d(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40596d:
  %merge.reg2mem = alloca i32, !insn.addr !2217
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %sext = mul i32 %4, 65536
  %10 = sdiv i32 %sext, 65536, !insn.addr !2217
  store i32 %10, i32* %eax, align 4, !insn.addr !2217
  %11 = icmp eq i1 %8, %6, !insn.addr !2218
  %12 = icmp eq i1 %9, false, !insn.addr !2218
  %13 = icmp eq i1 %11, %12, !insn.addr !2218
  br i1 %13, label %dec_label_pc_4059c8, label %dec_label_pc_405972, !insn.addr !2218

dec_label_pc_405972:                              ; preds = %dec_label_pc_40596d
  %14 = trunc i32 %0 to i8
  call void @__asm_into(i32 %5), !insn.addr !2219
  %15 = add nsw i32 %10, 133, !insn.addr !2220
  %16 = and i32 %15, 255, !insn.addr !2220
  %17 = and i32 %10, -256, !insn.addr !2220
  %18 = or i32 %16, %17, !insn.addr !2220
  %19 = inttoptr i32 %arg1 to i32*, !insn.addr !2221
  %20 = load i32, i32* %19, align 4, !insn.addr !2221
  %21 = trunc i32 %2 to i8, !insn.addr !2222
  %22 = sub i8 %14, %21, !insn.addr !2222
  %23 = icmp ult i8 %14, %21, !insn.addr !2222
  %24 = inttoptr i32 %0 to i8*, !insn.addr !2222
  store i8 %22, i8* %24, align 1, !insn.addr !2222
  %25 = add i32 %20, 16, !insn.addr !2223
  %26 = inttoptr i32 %25 to i8*, !insn.addr !2223
  store i8 125, i8* %26, align 1, !insn.addr !2223
  %27 = select i1 %23, i32 add (i32 ptrtoint ([5 x i8]* @global_var_40f3bc to i32), i32 1), i32 ptrtoint ([5 x i8]* @global_var_40f3bc to i32), !insn.addr !2224
  %28 = add i32 %27, %18, !insn.addr !2224
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2225
  %30 = load i8, i8* @global_var_40f3c0, align 1, !insn.addr !2226
  %31 = add i32 %28, 4, !insn.addr !2227
  %32 = inttoptr i32 %31 to i8*, !insn.addr !2227
  store i8 %30, i8* %32, align 1, !insn.addr !2227
  ret i32 %28, !insn.addr !2228

dec_label_pc_4059c8:                              ; preds = %dec_label_pc_40596d
  %33 = add i32 %2, -695484021, !insn.addr !2229
  %34 = inttoptr i32 %33 to i32*, !insn.addr !2229
  %35 = load i32, i32* %34, align 4, !insn.addr !2229
  %36 = and i32 %1, 255
  %37 = xor i32 %2, %36, !insn.addr !2230
  %38 = add i32 %37, -792163342, !insn.addr !2231
  %39 = inttoptr i32 %38 to i8*, !insn.addr !2231
  %40 = load i8, i8* %39, align 1, !insn.addr !2231
  %41 = add i8 %40, 10, !insn.addr !2231
  store i8 %41, i8* %39, align 1, !insn.addr !2231
  %42 = add i32 %3, -51, !insn.addr !2232
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2232
  %44 = load i32, i32* %43, align 4, !insn.addr !2232
  %45 = xor i32 %44, 1912602627, !insn.addr !2232
  store i32 %45, i32* %43, align 4, !insn.addr !2232
  %46 = add i32 %37, -21, !insn.addr !2233
  %47 = inttoptr i32 %46 to i32*, !insn.addr !2233
  %48 = load i32, i32* %47, align 4, !insn.addr !2233
  %49 = mul i32 %48, 4, !insn.addr !2233
  store i32 %49, i32* %eax, align 4, !insn.addr !2233
  %50 = icmp slt i32 %1, 0, !insn.addr !2234
  br i1 %50, label %dec_label_pc_405a56, label %dec_label_pc_4059f7, !insn.addr !2235

dec_label_pc_4059f7:                              ; preds = %dec_label_pc_4059c8
  %51 = icmp eq i32 %1, 0, !insn.addr !2234
  %52 = icmp eq i1 %51, false, !insn.addr !2236
  store i32 %49, i32* %merge.reg2mem, !insn.addr !2236
  br i1 %52, label %dec_label_pc_4059fe, label %dec_label_pc_4059f9, !insn.addr !2236

dec_label_pc_4059f9:                              ; preds = %dec_label_pc_405a56, %dec_label_pc_4059f7
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2236

dec_label_pc_4059fe:                              ; preds = %dec_label_pc_4059f7
  %53 = mul i32 %arg1, 2, !insn.addr !2237
  %54 = add i32 %3, %53, !insn.addr !2237
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2237
  %56 = load i32, i32* %55, align 4, !insn.addr !2237
  %57 = add i32 %56, -117, !insn.addr !2237
  store i32 %57, i32* %55, align 4, !insn.addr !2237
  %58 = load i32, i32* %eax, align 4
  %59 = and i32 %58, 122, !insn.addr !2238
  %60 = or i32 %59, 133, !insn.addr !2238
  %61 = and i32 %58, -256, !insn.addr !2238
  %62 = or i32 %60, %61, !insn.addr !2238
  store i32 %62, i32* %eax, align 4, !insn.addr !2238
  %63 = inttoptr i32 %62 to i8*, !insn.addr !2239
  %64 = load i8, i8* %63, align 1, !insn.addr !2239
  %65 = trunc i32 %60 to i8, !insn.addr !2239
  %66 = add i8 %64, %65, !insn.addr !2239
  %67 = xor i8 %66, %64, !insn.addr !2239
  %68 = xor i8 %66, -128, !insn.addr !2239
  %69 = and i8 %67, %68, !insn.addr !2239
  %70 = icmp slt i8 %69, 0, !insn.addr !2239
  %71 = icmp slt i8 %66, 0, !insn.addr !2239
  store i8 %66, i8* %63, align 1, !insn.addr !2239
  %72 = icmp eq i1 %71, %70, !insn.addr !2240
  br i1 %72, label %dec_label_pc_405a0f, label %dec_label_pc_405a56, !insn.addr !2240

dec_label_pc_405a0f:                              ; preds = %dec_label_pc_4059fe
  %73 = trunc i32 %3 to i16, !insn.addr !2241
  %74 = call i16 @__asm_arpl.5(i16 %73), !insn.addr !2241
  %75 = bitcast i32* %eax to i8*
  %76 = load i8, i8* %75, align 4, !insn.addr !2242
  %77 = add i8 %76, 11, !insn.addr !2242
  %78 = inttoptr i32 %10 to i8*, !insn.addr !2242
  store i8 %77, i8* %78, align 1, !insn.addr !2242
  %79 = load i32, i32* %eax, align 4, !insn.addr !2243
  %80 = add i32 %35, -4, !insn.addr !2243
  %81 = inttoptr i32 %80 to i32*, !insn.addr !2243
  store i32 %79, i32* %81, align 4, !insn.addr !2243
  %82 = add i32 %35, -8, !insn.addr !2244
  %83 = inttoptr i32 %82 to i32*, !insn.addr !2244
  store i32 11, i32* %83, align 4, !insn.addr !2244
  %84 = add i32 %35, -12, !insn.addr !2245
  %85 = inttoptr i32 %84 to i32*, !insn.addr !2245
  store i32 -1833700436, i32* %85, align 4, !insn.addr !2245
  %86 = add i32 %35, -16, !insn.addr !2246
  %87 = inttoptr i32 %86 to i32*, !insn.addr !2246
  store i32 5, i32* %87, align 4, !insn.addr !2246
  %88 = add i32 %35, -20, !insn.addr !2247
  %89 = inttoptr i32 %88 to i32*, !insn.addr !2247
  store i32 276138755, i32* %89, align 4, !insn.addr !2247
  %90 = call i32 @unknown_690b8680(), !insn.addr !2248
  %91 = inttoptr i32 %10 to i32*, !insn.addr !2249
  store i32 276138755, i32* %91, align 4, !insn.addr !2249
  %92 = select i1 %7, i32 -4, i32 4, !insn.addr !2249
  %93 = add nsw i32 %92, %10, !insn.addr !2249
  %94 = or i32 %3, 42, !insn.addr !2250
  %95 = trunc i32 %94 to i16, !insn.addr !2251
  %96 = call i32 @__asm_insd(i16 %95), !insn.addr !2251
  %97 = inttoptr i32 %93 to i32*, !insn.addr !2251
  store i32 %96, i32* %97, align 4, !insn.addr !2251
  %98 = add i32 %90, 1258502048, !insn.addr !2252
  %99 = inttoptr i32 %98 to i32*, !insn.addr !2252
  store i32 %94, i32* %99, align 4, !insn.addr !2252
  ret i32 276138894, !insn.addr !2253

dec_label_pc_405a56:                              ; preds = %dec_label_pc_4059fe, %dec_label_pc_4059c8
  %100 = mul i32 %37, 8, !insn.addr !2254
  %101 = add i32 %37, 256, !insn.addr !2254
  %102 = add i32 %101, %100, !insn.addr !2254
  %103 = ashr i32 %102, 31, !insn.addr !2255
  %104 = and i32 %103, 511, !insn.addr !2256
  %105 = add i32 %104, %102, !insn.addr !2257
  store i32 %105, i32* %eax, align 4, !insn.addr !2257
  %106 = icmp slt i32 %105, 10, !insn.addr !2258
  store i32 %105, i32* %merge.reg2mem, !insn.addr !2258
  br i1 %106, label %dec_label_pc_405a8c, label %dec_label_pc_4059f9, !insn.addr !2258

dec_label_pc_405a8c:                              ; preds = %dec_label_pc_405a56
  %107 = icmp slt i32 %105, 0, !insn.addr !2259
  %108 = icmp eq i1 %107, false, !insn.addr !2260
  br i1 %108, label %dec_label_pc_405aa6, label %dec_label_pc_405a93, !insn.addr !2260

dec_label_pc_405a93:                              ; preds = %dec_label_pc_405a8c
  %sext1 = mul i32 %1, 65536
  %109 = sdiv i32 %sext1, 65536, !insn.addr !2261
  %110 = or i32 %109, 2246052, !insn.addr !2262
  %111 = add nsw i32 %110, 1, !insn.addr !2263
  ret i32 %111, !insn.addr !2263

dec_label_pc_405aa6:                              ; preds = %dec_label_pc_405a8c
  %112 = add i32 %35, 45, !insn.addr !2264
  %113 = inttoptr i32 %112 to i32*, !insn.addr !2265
  %114 = load i32, i32* %113, align 4, !insn.addr !2265
  %115 = add i32 %35, 49, !insn.addr !2265
  %116 = inttoptr i32 %115 to i32*, !insn.addr !2266
  %117 = load i32, i32* %116, align 4, !insn.addr !2266
  %118 = inttoptr i32 %arg1 to i32*, !insn.addr !2267
  %119 = load i32, i32* %118, align 4, !insn.addr !2267
  %120 = add i32 %114, 1, !insn.addr !2268
  store i32 10, i32* %118, align 4, !insn.addr !2269
  %121 = add i32 %arg1, -4, !insn.addr !2270
  %122 = inttoptr i32 %121 to i32*, !insn.addr !2270
  store i32 %119, i32* %122, align 4, !insn.addr !2270
  %123 = add i32 %arg1, -8, !insn.addr !2271
  %124 = inttoptr i32 %123 to i32*, !insn.addr !2271
  store i32 48, i32* %124, align 4, !insn.addr !2271
  %125 = add i32 %arg1, -12, !insn.addr !2272
  %126 = inttoptr i32 %125 to i32*, !insn.addr !2272
  store i32 %120, i32* %126, align 4, !insn.addr !2272
  %127 = call i32 @unknown_e83ffa60(), !insn.addr !2273
  %128 = mul i32 %117, 8, !insn.addr !2274
  %129 = add i32 %128, -1048570542, !insn.addr !2274
  %130 = add i32 %129, %127, !insn.addr !2274
  %131 = inttoptr i32 %130 to i32*, !insn.addr !2274
  %132 = load i32, i32* %131, align 4, !insn.addr !2274
  %133 = add i32 %127, 1, !insn.addr !2275
  %134 = add i32 %117, 59314301, !insn.addr !2276
  %135 = inttoptr i32 %134 to i8*, !insn.addr !2276
  %136 = load i8, i8* %135, align 1, !insn.addr !2276
  %137 = trunc i32 %132 to i8, !insn.addr !2276
  %138 = add i8 %136, %137, !insn.addr !2276
  store i8 %138, i8* %135, align 1, !insn.addr !2276
  %139 = inttoptr i32 %133 to i32*, !insn.addr !2277
  store i32 %120, i32* %139, align 4, !insn.addr !2277
  %140 = inttoptr i32 %117 to i32*, !insn.addr !2278
  %141 = load i32, i32* %140, align 4, !insn.addr !2278
  ret i32 %141, !insn.addr !2278
}

define i32 @function_405ae4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_405ae4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = load i32, i32* inttoptr (i32 -616525368 to i32*), align 8, !insn.addr !2279
  %4 = add i32 %3, 64, !insn.addr !2280
  %5 = add i32 %1, 8, !insn.addr !2281
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2281
  store i32 %4, i32* %6, align 4, !insn.addr !2281
  %7 = bitcast i32* %ebx to i8*
  %8 = load i8, i8* %7, align 4, !insn.addr !2282
  %9 = zext i8 %8 to i32, !insn.addr !2282
  %10 = and i32 %2, -256, !insn.addr !2282
  %11 = or i32 %10, %9, !insn.addr !2282
  %12 = trunc i32 %11 to i16, !insn.addr !2283
  %13 = call i8 @__asm_in.4(i16 %12), !insn.addr !2283
  %14 = load i32, i32* %ebx, align 4, !insn.addr !2284
  %15 = add i32 %14, 32, !insn.addr !2284
  %16 = inttoptr i32 %15 to i32*, !insn.addr !2284
  store i32 2033124052, i32* %16, align 4, !insn.addr !2284
  %17 = load i32, i32* %ebx, align 4, !insn.addr !2285
  %18 = trunc i32 %17 to i8, !insn.addr !2286
  %19 = xor i8 %18, -119, !insn.addr !2286
  %20 = icmp slt i8 %19, 0, !insn.addr !2286
  %21 = zext i8 %19 to i32, !insn.addr !2286
  %22 = and i32 %17, -256, !insn.addr !2286
  %23 = or i32 %22, %21, !insn.addr !2286
  br i1 %20, label %dec_label_pc_405b2b, label %dec_label_pc_405b13, !insn.addr !2287

dec_label_pc_405b13:                              ; preds = %dec_label_pc_405ae4
  %24 = add i32 %23, -1, !insn.addr !2288
  call void @__asm_out.3(i16 %12, i32 %24), !insn.addr !2289
  ret i32 %24, !insn.addr !2290

dec_label_pc_405b2b:                              ; preds = %dec_label_pc_405ae4
  %25 = udiv i32 %2, 256, !insn.addr !2291
  %26 = trunc i32 %25 to i8, !insn.addr !2291
  %27 = add i8 %18, %26, !insn.addr !2291
  %28 = icmp ult i8 %27, %26, !insn.addr !2291
  %29 = zext i8 %27 to i32, !insn.addr !2291
  %30 = mul i32 %29, 256, !insn.addr !2291
  %31 = and i32 %11, -65281, !insn.addr !2291
  %32 = or i32 %30, %31, !insn.addr !2291
  %33 = inttoptr i32 %0 to i32*, !insn.addr !2292
  %34 = add i32 %23, -1952124157, !insn.addr !2293
  %35 = inttoptr i32 %34 to i32*, !insn.addr !2293
  %36 = load i32, i32* %35, align 4, !insn.addr !2293
  %37 = select i1 %28, i32 12, i32 11, !insn.addr !2293
  %38 = add i32 %36, %37, !insn.addr !2293
  store i32 %38, i32* %35, align 4, !insn.addr !2293
  %39 = load i32, i32* %ebx, align 4, !insn.addr !2294
  %40 = add i32 %39, 1, !insn.addr !2294
  %41 = add i32 %39, 333847297, !insn.addr !2295
  %42 = inttoptr i32 %41 to i8*, !insn.addr !2295
  %43 = load i8, i8* %42, align 1, !insn.addr !2295
  %44 = trunc i32 %arg2 to i8, !insn.addr !2295
  %45 = add i8 %43, %44, !insn.addr !2295
  store i8 %45, i8* %42, align 1, !insn.addr !2295
  %46 = add i32 %32, 37, !insn.addr !2296
  %47 = inttoptr i32 %46 to i32*, !insn.addr !2296
  store i32 6697, i32* %47, align 4, !insn.addr !2296
  %48 = inttoptr i32 %40 to i32*, !insn.addr !2297
  %49 = load i32, i32* %48, align 4, !insn.addr !2297
  %50 = add i32 %49, 12, !insn.addr !2298
  %51 = inttoptr i32 %50 to i32*, !insn.addr !2298
  store i32 -1526724863, i32* %51, align 4, !insn.addr !2298
  store i8 -1, i8* inttoptr (i32 -58 to i8*), align 2, !insn.addr !2299
  ret i32 -1526724658, !insn.addr !2300
}

define i32 @function_405b75(i16 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_405b75:
  %eax.1.reg2mem = alloca i32, !insn.addr !2301
  %esi.0.reg2mem = alloca i32, !insn.addr !2301
  %ecx.0.reg2mem = alloca i32, !insn.addr !2301
  %eax.0.reg2mem = alloca i32, !insn.addr !2301
  %edx.0.reg2mem = alloca i32, !insn.addr !2301
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i8 @__decompiler_undefined_function_5()
  %stack_var_2 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_2, align 4
  %10 = icmp eq i1 %7, false, !insn.addr !2301
  br i1 %10, label %dec_label_pc_405b7f, label %dec_label_pc_405b77, !insn.addr !2301

dec_label_pc_405b77:                              ; preds = %dec_label_pc_405b75
  %11 = zext i1 %8 to i32, !insn.addr !2302
  %12 = add i32 %6, 141, !insn.addr !2302
  %13 = add i32 %12, %11, !insn.addr !2302
  %14 = and i32 %13, 255, !insn.addr !2302
  %15 = and i32 %6, -256, !insn.addr !2302
  %16 = or i32 %14, %15, !insn.addr !2302
  ret i32 %16, !insn.addr !2302

dec_label_pc_405b7f:                              ; preds = %dec_label_pc_405b75
  %17 = trunc i32 %1 to i8, !insn.addr !2303
  %18 = call i8 @llvm.ctpop.i8(i8 %17), !range !405, !insn.addr !2303
  %19 = and i8 %18, 1, !insn.addr !2303
  %20 = icmp eq i8 %19, 0, !insn.addr !2303
  %21 = icmp eq i1 %20, false, !insn.addr !2304
  br i1 %21, label %dec_label_pc_405bfc, label %dec_label_pc_405b8e, !insn.addr !2304

dec_label_pc_405b8e:                              ; preds = %dec_label_pc_405b7f
  %22 = add i32 %4, -20, !insn.addr !2305
  %23 = inttoptr i32 %22 to i8*, !insn.addr !2305
  %24 = load i8, i8* %23, align 1, !insn.addr !2305
  %25 = trunc i32 %3 to i8, !insn.addr !2305
  %26 = add i8 %24, %25, !insn.addr !2305
  store i8 %26, i8* %23, align 1, !insn.addr !2305
  %27 = udiv i32 %4, 256, !insn.addr !2306
  %28 = trunc i32 %27 to i8, !insn.addr !2306
  %29 = add i8 %9, %28, !insn.addr !2306
  %30 = call i32 @function_4c07be9(i8 %29), !insn.addr !2307
  ret i32 %30, !insn.addr !2307

dec_label_pc_405bfc:                              ; preds = %dec_label_pc_405b7f
  %31 = add i32 %1, 6, !insn.addr !2308
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2308
  %33 = load i32, i32* %32, align 4, !insn.addr !2308
  %34 = and i32 %33, 132, !insn.addr !2309
  %35 = or i32 %34, 123, !insn.addr !2309
  %36 = and i32 %33, -256, !insn.addr !2309
  %37 = or i32 %35, %36, !insn.addr !2309
  %38 = icmp eq i32 %1, 0, !insn.addr !2303
  store i32 %37, i32* %eax.1.reg2mem, !insn.addr !2310
  br i1 %38, label %dec_label_pc_405cba, label %dec_label_pc_405c02, !insn.addr !2310

dec_label_pc_405c02:                              ; preds = %dec_label_pc_405bfc
  %39 = icmp slt i32 %1, 0, !insn.addr !2303
  br i1 %39, label %dec_label_pc_405c7c, label %dec_label_pc_405c04, !insn.addr !2311

dec_label_pc_405c04:                              ; preds = %dec_label_pc_405c02
  %40 = add i32 %4, %0, !insn.addr !2312
  %41 = icmp eq i32 %40, 0, !insn.addr !2312
  %42 = inttoptr i32 %4 to i32*, !insn.addr !2312
  store i32 %40, i32* %42, align 4, !insn.addr !2312
  br i1 %41, label %dec_label_pc_405c22, label %dec_label_pc_405c08, !insn.addr !2313

dec_label_pc_405c08:                              ; preds = %dec_label_pc_405c04
  %43 = inttoptr i32 %2 to i32*, !insn.addr !2314
  store i32 -1954545664, i32* %43, align 4, !insn.addr !2314
  %44 = add i32 %37, -2062613861, !insn.addr !2315
  %45 = inttoptr i32 %44 to i8*, !insn.addr !2315
  %46 = load i8, i8* %45, align 2, !insn.addr !2315
  %47 = trunc i32 %35 to i8, !insn.addr !2315
  %48 = and i8 %46, %47, !insn.addr !2315
  store i8 %48, i8* %45, align 2, !insn.addr !2315
  %49 = trunc i32 %4 to i8
  %50 = mul i8 %49, 2, !insn.addr !2316
  %51 = inttoptr i32 %4 to i8*, !insn.addr !2316
  store i8 %50, i8* %51, align 1, !insn.addr !2316
  %52 = call i32 @function_cc26ac(i32 %3, i32 %1), !insn.addr !2317
  ret i32 %52, !insn.addr !2317

dec_label_pc_405c22:                              ; preds = %dec_label_pc_405c04
  %53 = load i32, i32* %stack_var_2, align 4, !insn.addr !2318
  %54 = add i32 %1, 32, !insn.addr !2318
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2318
  store i32 %53, i32* %55, align 4, !insn.addr !2318
  %56 = load i32, i32* inttoptr (i32 -1821114312 to i32*), align 8, !insn.addr !2319
  %57 = trunc i32 %4 to i16, !insn.addr !2320
  %58 = call i32 @__asm_insd(i16 %57), !insn.addr !2320
  %59 = inttoptr i32 %0 to i32*, !insn.addr !2320
  store i32 %58, i32* %59, align 4, !insn.addr !2320
  %60 = add i32 %56, 137, !insn.addr !2321
  %61 = and i32 %60, 255, !insn.addr !2321
  %62 = and i32 %56, -256, !insn.addr !2321
  %63 = or i32 %61, %62, !insn.addr !2321
  %64 = sub i32 0, %2, !insn.addr !2322
  %65 = icmp eq i32 %3, %64, !insn.addr !2322
  store i32 %63, i32* %eax.0.reg2mem, !insn.addr !2323
  br i1 %65, label %dec_label_pc_405ca9, label %dec_label_pc_405c32, !insn.addr !2323

dec_label_pc_405c32:                              ; preds = %dec_label_pc_405c22
  %66 = and i32 %60, 116, !insn.addr !2324
  %67 = or i32 %66, 139, !insn.addr !2324
  %68 = or i32 %67, %62, !insn.addr !2324
  %69 = add i32 %4, 48, !insn.addr !2325
  %70 = inttoptr i32 %69 to i8*, !insn.addr !2325
  %71 = load i8, i8* %70, align 1, !insn.addr !2325
  %72 = trunc i32 %67 to i8, !insn.addr !2325
  %73 = sub i8 %71, %72, !insn.addr !2325
  store i8 %73, i8* %70, align 1, !insn.addr !2325
  ret i32 %68, !insn.addr !2326

dec_label_pc_405c7c:                              ; preds = %dec_label_pc_405c02
  %74 = ptrtoint i32* %stack_var_2 to i32, !insn.addr !2327
  %75 = call i32 @unknown_52126674(), !insn.addr !2328
  %76 = xor i32 %74, -16
  %77 = icmp ult i32 %76, 16, !insn.addr !2329
  %78 = add i32 %4, 1717506134, !insn.addr !2330
  %79 = inttoptr i32 %78 to i8*, !insn.addr !2330
  %80 = load i8, i8* %79, align 1, !insn.addr !2330
  %81 = trunc i32 %5 to i8, !insn.addr !2330
  %82 = zext i1 %77 to i8, !insn.addr !2330
  %83 = add i8 %80, %81, !insn.addr !2330
  %84 = add i8 %83, %82, !insn.addr !2330
  %85 = icmp ule i8 %84, %80, !insn.addr !2330
  %86 = icmp ult i8 %83, %80, !insn.addr !2330
  %87 = select i1 %77, i1 %85, i1 %86, !insn.addr !2330
  store i8 %84, i8* %79, align 1, !insn.addr !2330
  %88 = trunc i32 %4 to i8, !insn.addr !2331
  %89 = inttoptr i32 %75 to i8*, !insn.addr !2331
  store i8 %88, i8* %89, align 1, !insn.addr !2331
  %90 = load i8, i8* inttoptr (i32 65641 to i8*), align 1, !insn.addr !2332
  %91 = zext i1 %87 to i8, !insn.addr !2332
  %92 = add i8 %90, 105, !insn.addr !2332
  %93 = add i8 %92, %91, !insn.addr !2332
  store i8 %93, i8* inttoptr (i32 65641 to i8*), align 1, !insn.addr !2332
  %94 = add i32 %1, 28, !insn.addr !2333
  %95 = inttoptr i32 %94 to i32*, !insn.addr !2333
  %96 = load i32, i32* %95, align 4, !insn.addr !2333
  %97 = add i32 %96, 262564, !insn.addr !2334
  %98 = inttoptr i32 %97 to i32*, !insn.addr !2334
  %99 = load i32, i32* %98, align 4, !insn.addr !2334
  %100 = add i32 %2, -96, !insn.addr !2335
  %101 = inttoptr i32 %100 to i32*, !insn.addr !2335
  %102 = load i32, i32* %101, align 4, !insn.addr !2335
  %103 = inttoptr i32 %102 to i32*, !insn.addr !2336
  store i32 %99, i32* %103, align 4, !insn.addr !2336
  %104 = add i32 %1, 1, !insn.addr !2337
  %105 = mul i32 %99, 256
  %106 = or i32 %105, -65281
  %107 = and i32 %106, %102, !insn.addr !2338
  store i32 %99, i32* %edx.0.reg2mem, !insn.addr !2338
  store i32 %107, i32* %eax.0.reg2mem, !insn.addr !2338
  store i32 %96, i32* %ecx.0.reg2mem, !insn.addr !2338
  store i32 %104, i32* %esi.0.reg2mem, !insn.addr !2338
  br label %dec_label_pc_405ca9, !insn.addr !2338

dec_label_pc_405ca9:                              ; preds = %dec_label_pc_405c7c, %dec_label_pc_405c22
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %108 = trunc i32 %eax.0.reload to i8, !insn.addr !2339
  %109 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !2339
  %110 = load i8, i8* %109, align 1, !insn.addr !2339
  %111 = add i8 %110, %108, !insn.addr !2339
  %112 = icmp ult i8 %111, %108, !insn.addr !2339
  %113 = and i32 %eax.0.reload, -256, !insn.addr !2339
  %114 = add i32 %esi.0.reload, 12, !insn.addr !2340
  %115 = inttoptr i32 %114 to i8*, !insn.addr !2340
  %116 = load i8, i8* %115, align 1, !insn.addr !2340
  %117 = zext i1 %112 to i8, !insn.addr !2340
  %118 = add i8 %116, %117, !insn.addr !2340
  %119 = sub i8 %111, %118, !insn.addr !2340
  %120 = sub i8 %119, %117, !insn.addr !2340
  %121 = icmp ult i8 %111, %120, !insn.addr !2340
  %122 = icmp ne i8 %118, -1, !insn.addr !2340
  %123 = or i1 %122, %121, !insn.addr !2340
  %124 = icmp ult i8 %111, %118, !insn.addr !2340
  %125 = select i1 %112, i1 %123, i1 %124, !insn.addr !2340
  %126 = zext i8 %119 to i32, !insn.addr !2340
  %127 = or i32 %113, %126, !insn.addr !2340
  %128 = add i32 %edx.0.reload, 861868110, !insn.addr !2341
  %129 = inttoptr i32 %128 to i8*, !insn.addr !2341
  %130 = load i8, i8* %129, align 1, !insn.addr !2341
  %131 = trunc i32 %ecx.0.reload to i8, !insn.addr !2341
  %132 = zext i1 %125 to i8, !insn.addr !2341
  %133 = add i8 %130, %131, !insn.addr !2341
  %134 = add i8 %133, %132, !insn.addr !2341
  store i8 %134, i8* %129, align 1, !insn.addr !2341
  %135 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !2342
  %136 = load i8, i8* %135, align 1, !insn.addr !2342
  %137 = inttoptr i32 %0 to i8*, !insn.addr !2342
  store i8 %136, i8* %137, align 1, !insn.addr !2342
  %138 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !2343
  store i8 %131, i8* %138, align 1, !insn.addr !2343
  store i32 %127, i32* %eax.1.reg2mem, !insn.addr !2343
  br label %dec_label_pc_405cba, !insn.addr !2343

dec_label_pc_405cba:                              ; preds = %dec_label_pc_405ca9, %dec_label_pc_405bfc
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !2344
}

define i32 @function_405cbf(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_405cbf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %5, %4, !insn.addr !2345
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2345
  %8 = load i32, i32* %7, align 4, !insn.addr !2345
  %9 = and i32 %8, -118, !insn.addr !2345
  store i32 %9, i32* %7, align 4, !insn.addr !2345
  %10 = load i32, i32* %edx, align 4, !insn.addr !2346
  %11 = mul i32 %0, 8, !insn.addr !2346
  %12 = add i32 %11, -1949302786, !insn.addr !2346
  %13 = add i32 %12, %10, !insn.addr !2346
  %14 = inttoptr i32 %13 to i8*, !insn.addr !2346
  %15 = load i8, i8* %14, align 1, !insn.addr !2346
  %16 = trunc i32 %5 to i8, !insn.addr !2346
  %17 = sub i8 %15, %16, !insn.addr !2346
  store i8 %17, i8* %14, align 1, !insn.addr !2346
  %18 = add i32 %5, 57999418, !insn.addr !2347
  %19 = inttoptr i32 %18 to i8*, !insn.addr !2347
  %20 = load i8, i8* %19, align 1, !insn.addr !2347
  %21 = and i8 %20, %16, !insn.addr !2347
  store i8 %21, i8* %19, align 1, !insn.addr !2347
  %22 = add i32 %1, 12, !insn.addr !2348
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2348
  %24 = load i32, i32* %23, align 4, !insn.addr !2348
  %25 = add i32 %24, 1, !insn.addr !2348
  store i32 %25, i32* %23, align 4, !insn.addr !2348
  %26 = add i32 %2, -139889472, !insn.addr !2349
  %27 = inttoptr i32 %26 to i8*, !insn.addr !2349
  %28 = load i8, i8* %27, align 1, !insn.addr !2349
  %29 = mul i8 %28, 2, !insn.addr !2349
  %30 = lshr i8 %28, 7, !insn.addr !2349
  %31 = or i8 %30, %29, !insn.addr !2349
  store i8 %31, i8* %27, align 1, !insn.addr !2349
  %32 = udiv i32 %3, 256, !insn.addr !2350
  %33 = trunc i32 %32 to i8, !insn.addr !2350
  %34 = bitcast i32* %edx to i8*
  %35 = load i8, i8* %34, align 4, !insn.addr !2350
  %36 = xor i8 %35, %33, !insn.addr !2350
  %37 = icmp eq i8 %36, 0, !insn.addr !2350
  br i1 %37, label %dec_label_pc_405cff, label %dec_label_pc_405ce0, !insn.addr !2351

dec_label_pc_405ce0:                              ; preds = %dec_label_pc_405cbf
  %38 = and i32 %3, -65281, !insn.addr !2350
  %39 = zext i8 %36 to i32, !insn.addr !2350
  %40 = mul i32 %39, 256, !insn.addr !2350
  %41 = or i32 %40, %38, !insn.addr !2350
  %42 = add i32 %1, 28, !insn.addr !2352
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2352
  %44 = load i32, i32* %43, align 4, !insn.addr !2352
  %45 = add i32 %1, 16, !insn.addr !2353
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2353
  %47 = load i32, i32* %46, align 4, !insn.addr !2353
  %48 = inttoptr i32 %44 to i32*, !insn.addr !2354
  %49 = load i32, i32* %48, align 4, !insn.addr !2354
  %50 = call i32 @unknown_481d3780(i32 %49, i32 %47, i32 %1), !insn.addr !2355
  %51 = add i32 %41, -865572282, !insn.addr !2356
  %52 = inttoptr i32 %51 to i8*, !insn.addr !2356
  %53 = load i8, i8* %52, align 1, !insn.addr !2356
  %54 = trunc i32 %44 to i8, !insn.addr !2356
  %55 = add i8 %53, %54, !insn.addr !2356
  store i8 %55, i8* %52, align 1, !insn.addr !2356
  %56 = add i32 %50, 131, !insn.addr !2357
  %57 = and i32 %56, 255, !insn.addr !2357
  %58 = and i32 %50, -256, !insn.addr !2357
  %59 = or i32 %57, %58, !insn.addr !2357
  ret i32 %59, !insn.addr !2357

dec_label_pc_405cff:                              ; preds = %dec_label_pc_405cbf
  %60 = add i32 %2, -18, !insn.addr !2358
  %61 = inttoptr i32 %60 to i32*, !insn.addr !2358
  %62 = load i32, i32* %61, align 4, !insn.addr !2358
  %63 = add i32 %1, 16, !insn.addr !2359
  %64 = inttoptr i32 %63 to i8*, !insn.addr !2359
  %65 = load i8, i8* %64, align 1, !insn.addr !2359
  %66 = inttoptr i32 %62 to i8*, !insn.addr !2360
  store i8 %65, i8* %66, align 1, !insn.addr !2360
  ret i32 7626364, !insn.addr !2361
}

define i32 @function_405d59() local_unnamed_addr {
dec_label_pc_405d59:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i32 @unknown_8b0040c0(i16 %4), !insn.addr !2362
  %10 = trunc i32 %1 to i8
  %11 = sub i8 0, %10
  %12 = sub i8 %11, 1
  %13 = inttoptr i32 %1 to i8*, !insn.addr !2363
  store i8 %12, i8* %13, align 1, !insn.addr !2363
  %14 = load i32, i32* @global_var_410301, align 4, !insn.addr !2364
  %15 = icmp eq i32 %14, 0, !insn.addr !2365
  %16 = icmp slt i32 %14, 0, !insn.addr !2365
  %17 = trunc i32 %14 to i8, !insn.addr !2365
  %18 = call i8 @llvm.ctpop.i8(i8 %17), !range !405, !insn.addr !2365
  %19 = and i8 %18, 1, !insn.addr !2365
  %20 = icmp eq i8 %19, 0, !insn.addr !2365
  %21 = zext i1 %20 to i32, !insn.addr !2366
  %22 = mul i32 %21, 4, !insn.addr !2366
  %23 = zext i1 %15 to i32, !insn.addr !2366
  %24 = mul i32 %23, 64, !insn.addr !2366
  %25 = zext i1 %16 to i32, !insn.addr !2366
  %26 = mul i32 %25, 128, !insn.addr !2366
  %27 = zext i1 %8 to i32, !insn.addr !2366
  %28 = mul i32 %27, 256, !insn.addr !2366
  %29 = zext i1 %7 to i32, !insn.addr !2366
  %30 = mul i32 %29, 512, !insn.addr !2366
  %31 = zext i1 %6 to i32, !insn.addr !2366
  %32 = mul i32 %31, 1024, !insn.addr !2366
  %33 = zext i1 %5 to i32, !insn.addr !2366
  %34 = mul i32 %33, 16384, !insn.addr !2366
  %35 = or i32 %34, %32, !insn.addr !2366
  %36 = or i32 %35, %30, !insn.addr !2366
  %37 = or i32 %36, %28, !insn.addr !2366
  %38 = or i32 %37, %24, !insn.addr !2366
  %39 = or i32 %38, %26, !insn.addr !2366
  %40 = or i32 %39, %22, !insn.addr !2366
  %41 = or i32 %40, 2, !insn.addr !2366
  %42 = bitcast i32* %ebx to i8*
  %43 = load i8, i8* %42, align 4, !insn.addr !2367
  %44 = zext i8 %43 to i32, !insn.addr !2367
  %45 = and i32 %14, -256, !insn.addr !2367
  %46 = or i32 %45, %44, !insn.addr !2367
  %sext = mul i32 %9, 65536
  %47 = sdiv i32 %sext, 65536, !insn.addr !2368
  %48 = call i32 @function_40a940(i32 3, i32 4194320, i32 %46, i32 %41, i32 %47), !insn.addr !2368
  %49 = inttoptr i32 %48 to i32*, !insn.addr !2369
  %50 = load i32, i32* %49, align 4, !insn.addr !2369
  %51 = xor i32 %50, 12, !insn.addr !2369
  store i32 %51, i32* %49, align 4, !insn.addr !2369
  store i32 %48, i32* @global_var_410358, align 4, !insn.addr !2370
  %52 = trunc i32 %48 to i8, !insn.addr !2371
  store i8 %52, i8* inttoptr (i32 -1350299712 to i8*), align 64, !insn.addr !2371
  %53 = inttoptr i32 %48 to i8*, !insn.addr !2372
  %54 = load i8, i8* %53, align 1, !insn.addr !2372
  %55 = add i8 %54, %52, !insn.addr !2372
  store i8 %55, i8* %53, align 1, !insn.addr !2372
  %56 = add i32 %2, -984482739, !insn.addr !2373
  %57 = inttoptr i32 %56 to i8*, !insn.addr !2373
  %58 = load i8, i8* %57, align 1, !insn.addr !2373
  %59 = trunc i32 %3 to i8, !insn.addr !2373
  %60 = add i8 %58, %59, !insn.addr !2373
  store i8 %60, i8* %57, align 1, !insn.addr !2373
  %61 = add i32 %2, 101, !insn.addr !2374
  %62 = inttoptr i32 %61 to i32*, !insn.addr !2374
  %63 = load i32, i32* %62, align 4, !insn.addr !2374
  %64 = add i32 %2, 12, !insn.addr !2375
  %65 = inttoptr i32 %64 to i32*, !insn.addr !2375
  %66 = load i32, i32* %65, align 4, !insn.addr !2375
  %67 = or i32 %66, 134236204, !insn.addr !2376
  %68 = add i32 %2, 8, !insn.addr !2377
  %69 = inttoptr i32 %68 to i32*, !insn.addr !2377
  %70 = load i32, i32* %69, align 4, !insn.addr !2377
  %71 = inttoptr i32 %70 to i32*, !insn.addr !2378
  store i32 %67, i32* %71, align 4, !insn.addr !2378
  %72 = inttoptr i32 %66 to i32*, !insn.addr !2379
  %73 = call i32* @GlobalFree(i32* %72), !insn.addr !2379
  %74 = ptrtoint i32* %73 to i32, !insn.addr !2379
  %75 = load i32, i32* %ebx, align 4, !insn.addr !2380
  %76 = load i32, i32* inttoptr (i32 -1774141356 to i32*), align 4, !insn.addr !2381
  %77 = icmp ult i32 %76, %63, !insn.addr !2381
  %78 = zext i1 %77 to i32, !insn.addr !2382
  %79 = add i32 %74, -901725734, !insn.addr !2382
  %80 = add i32 %79, %78, !insn.addr !2382
  %81 = icmp slt i32 %80, 0, !insn.addr !2382
  %82 = call i32 @function_405e54(i32 %80, i32 %75), !insn.addr !2383
  %83 = icmp eq i1 %81, false, !insn.addr !2384
  br i1 %83, label %dec_label_pc_405dde, label %dec_label_pc_405dce, !insn.addr !2384

dec_label_pc_405dce:                              ; preds = %dec_label_pc_405d59
  %84 = and i32 %74, 15, !insn.addr !2382
  %85 = add nuw nsw i32 %84, 10, !insn.addr !2382
  %86 = add nuw nsw i32 %85, %78, !insn.addr !2382
  %87 = icmp ugt i32 %86, 15, !insn.addr !2382
  %88 = and i32 %82, 14
  %89 = icmp ugt i32 %88, 9, !insn.addr !2385
  %90 = or i1 %89, %87, !insn.addr !2385
  %91 = and i32 %82, -65536, !insn.addr !2385
  %92 = add i32 %82, 10, !insn.addr !2385
  %93 = select i1 %90, i32 %92, i32 %82, !insn.addr !2385
  %94 = and i32 %93, 15, !insn.addr !2385
  %95 = or i32 %94, %91, !insn.addr !2385
  %96 = sext i1 %90 to i32, !insn.addr !2385
  %97 = mul i32 %96, 256
  %98 = add i32 %97, %82
  %99 = and i32 %98, 65280, !insn.addr !2385
  %100 = or i32 %95, %99, !insn.addr !2385
  %101 = add i32 %100, -1, !insn.addr !2386
  ret i32 %101, !insn.addr !2386

dec_label_pc_405dde:                              ; preds = %dec_label_pc_405d59
  %102 = add i32 %0, -1, !insn.addr !2387
  %103 = inttoptr i32 %102 to i32*, !insn.addr !2387
  %104 = call i32 @function_8be650fe(), !insn.addr !2388
  ret i32 %104, !insn.addr !2388
}

define i32 @function_405dfc(i32 %arg1) local_unnamed_addr {
dec_label_pc_405dfc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2389
}

define i32 @function_405dff() local_unnamed_addr {
dec_label_pc_405dff:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %3, %1, !insn.addr !2390
  %7 = icmp ult i32 %6, %1, !insn.addr !2390
  %8 = inttoptr i32 %6 to i8*, !insn.addr !2391
  %9 = load i8, i8* %8, align 1, !insn.addr !2391
  %10 = inttoptr i32 %0 to i8*, !insn.addr !2391
  store i8 %9, i8* %10, align 1, !insn.addr !2391
  %11 = zext i1 %7 to i32, !insn.addr !2392
  %12 = add i32 %4, ptrtoint (i32* @global_var_40c0bd to i32), !insn.addr !2392
  %13 = add i32 %12, %11, !insn.addr !2392
  %14 = icmp eq i32 %13, 0, !insn.addr !2392
  br i1 %14, label %dec_label_pc_405e2e, label %dec_label_pc_405e18, !insn.addr !2393

dec_label_pc_405e18:                              ; preds = %dec_label_pc_405dff
  %15 = select i1 %5, i32 -1, i32 1, !insn.addr !2391
  %16 = add i32 %15, %0, !insn.addr !2391
  %17 = trunc i32 %13 to i8, !insn.addr !2394
  %18 = inttoptr i32 %16 to i8*, !insn.addr !2394
  store i8 %17, i8* %18, align 1, !insn.addr !2394
  %19 = add i32 %16, %15, !insn.addr !2394
  %20 = inttoptr i32 %2 to i32*, !insn.addr !2395
  store i32 %19, i32* %20, align 4, !insn.addr !2395
  br label %dec_label_pc_405e2e, !insn.addr !2396

dec_label_pc_405e2e:                              ; preds = %dec_label_pc_405e18, %dec_label_pc_405dff
  ret i32 0, !insn.addr !2397
}

define i32 @function_405e3e(i32 %arg1) local_unnamed_addr {
dec_label_pc_405e3e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %.neg1 = sext i1 %4 to i32
  %.neg2 = sub i32 %3, %1, !insn.addr !2398
  %5 = add i32 %.neg2, %.neg1, !insn.addr !2398
  %6 = and i32 %5, 255, !insn.addr !2398
  %7 = and i32 %3, -256, !insn.addr !2398
  %8 = or i32 %6, %7, !insn.addr !2398
  %9 = trunc i32 %2 to i16, !insn.addr !2399
  %10 = trunc i32 %0 to i8
  call void @__asm_outsb(i16 %9, i8 %10), !insn.addr !2399
  ret i32 %8, !insn.addr !2400
}

define i32 @function_405e54(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_405e54:
  %eax.1.reg2mem = alloca i32, !insn.addr !2401
  %eax.0.reg2mem = alloca i32, !insn.addr !2401
  %0 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %1 = add i32 %0, 12, !insn.addr !2401
  %2 = inttoptr i32 %1 to i32*, !insn.addr !2401
  %3 = load i32, i32* %2, align 4, !insn.addr !2401
  %4 = add i32 %0, 16, !insn.addr !2402
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2402
  %6 = load i32, i32* %5, align 4, !insn.addr !2402
  %7 = add i32 %3, 589945733, !insn.addr !2403
  %8 = icmp ugt i32 %3, -589945734, !insn.addr !2403
  %9 = add i32 %6, 1, !insn.addr !2404
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2404
  %11 = load i8, i8* %10, align 1, !insn.addr !2404
  %12 = udiv i32 %6, 256, !insn.addr !2404
  %13 = trunc i32 %12 to i8, !insn.addr !2404
  %.neg = sext i1 %8 to i8
  %.neg2 = add i8 %11, %.neg, !insn.addr !2404
  %14 = sub i8 %.neg2, %13, !insn.addr !2404
  store i8 %14, i8* %10, align 1, !insn.addr !2404
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !2404
  br label %dec_label_pc_405e66, !insn.addr !2404

dec_label_pc_405e66:                              ; preds = %dec_label_pc_405e66, %dec_label_pc_405e54
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %factor = mul i32 %eax.0.reload, 2
  %15 = add i32 %factor, -2090465163, !insn.addr !2405
  %16 = inttoptr i32 %15 to i16*, !insn.addr !2405
  %17 = load i16, i16* %16, align 2, !insn.addr !2405
  %18 = xor i16 %17, 120, !insn.addr !2405
  store i16 %18, i16* %16, align 2, !insn.addr !2405
  %19 = trunc i32 %eax.0.reload to i8, !insn.addr !2406
  %20 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2406
  %21 = load i8, i8* %20, align 1, !insn.addr !2406
  %22 = add i8 %21, %19, !insn.addr !2406
  %23 = icmp eq i8 %22, 0, !insn.addr !2406
  %24 = zext i8 %22 to i32, !insn.addr !2406
  %25 = and i32 %eax.0.reload, -256, !insn.addr !2406
  %26 = or i32 %25, %24, !insn.addr !2406
  %27 = add i32 %26, 2, !insn.addr !2407
  store i32 %27, i32* %eax.0.reg2mem, !insn.addr !2408
  br i1 %23, label %dec_label_pc_405e79, label %dec_label_pc_405e66, !insn.addr !2408

dec_label_pc_405e79:                              ; preds = %dec_label_pc_405e66
  %28 = load i32, i32* %2, align 4, !insn.addr !2409
  %29 = sub i32 %26, %28, !insn.addr !2409
  %30 = icmp sgt i32 %26, %28, !insn.addr !2410
  store i32 %29, i32* %eax.1.reg2mem, !insn.addr !2410
  br i1 %30, label %dec_label_pc_405e7e, label %31, !insn.addr !2410

; <label>:31:                                     ; preds = %dec_label_pc_405e79
  %32 = call i32 @function_405e3e(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2410
  store i32 %32, i32* %eax.1.reg2mem, !insn.addr !2410
  br label %dec_label_pc_405e7e, !insn.addr !2410

dec_label_pc_405e7e:                              ; preds = %dec_label_pc_405e79, %31
  %33 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2411
  %34 = and i32 %24, 15, !insn.addr !2409
  %35 = and i32 %28, 15, !insn.addr !2409
  %36 = sub nsw i32 %34, %35, !insn.addr !2409
  %37 = icmp ugt i32 %36, 15, !insn.addr !2409
  %38 = icmp ult i32 %26, %28, !insn.addr !2409
  %39 = icmp eq i32 %29, 0, !insn.addr !2409
  %40 = icmp slt i32 %29, 0, !insn.addr !2409
  %41 = trunc i32 %29 to i8, !insn.addr !2409
  %42 = call i8 @llvm.ctpop.i8(i8 %41), !range !405, !insn.addr !2409
  %43 = and i8 %42, 1, !insn.addr !2409
  %44 = icmp eq i8 %43, 0, !insn.addr !2409
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %45 = zext i1 %38 to i32, !insn.addr !2412
  %46 = zext i1 %44 to i32, !insn.addr !2412
  %47 = zext i1 %37 to i32, !insn.addr !2412
  %48 = zext i1 %39 to i32, !insn.addr !2412
  %49 = zext i1 %40 to i32, !insn.addr !2412
  %50 = mul i32 %46, 4, !insn.addr !2412
  %51 = mul i32 %47, 16, !insn.addr !2412
  %52 = mul i32 %48, 64, !insn.addr !2412
  %53 = mul i32 %49, 128, !insn.addr !2412
  %54 = or i32 %52, %45, !insn.addr !2412
  %55 = or i32 %54, %53, !insn.addr !2412
  %56 = or i32 %55, %51, !insn.addr !2412
  %57 = or i32 %56, %50, !insn.addr !2412
  %58 = mul i32 %57, 256, !insn.addr !2412
  %59 = or i32 %58, 512, !insn.addr !2412
  %60 = or i32 %eax.1.reload, %58, !insn.addr !2412
  %61 = and i32 %33, 12, !insn.addr !2413
  %62 = add nsw i32 %61, -1, !insn.addr !2413
  %63 = icmp ugt i32 %62, 15, !insn.addr !2413
  %64 = and i32 %eax.1.reload, 14
  %65 = icmp ugt i32 %64, 9, !insn.addr !2414
  %66 = or i1 %63, %65, !insn.addr !2414
  %67 = add i32 %eax.1.reload, 6, !insn.addr !2414
  %68 = select i1 %66, i32 %67, i32 %eax.1.reload, !insn.addr !2414
  %69 = zext i1 %66 to i32, !insn.addr !2414
  %70 = and i32 %68, 15, !insn.addr !2414
  %71 = mul i32 %69, 256
  %72 = add i32 %71, %59
  %73 = and i32 %72, 65280, !insn.addr !2414
  %.masked = and i32 %60, -65536
  %74 = or i32 %70, %.masked, !insn.addr !2414
  %75 = or i32 %74, %73, !insn.addr !2414
  store i32 %75, i32* %5, align 4, !insn.addr !2415
  ret i32 %75, !insn.addr !2415
}

define i32 @function_405e85() local_unnamed_addr {
dec_label_pc_405e85:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, 4, !insn.addr !2416
  %3 = inttoptr i32 %2 to i32*, !insn.addr !2416
  %4 = load i32, i32* %3, align 4, !insn.addr !2416
  %5 = sub i32 0, %4, !insn.addr !2416
  store i32 %5, i32* %3, align 4, !insn.addr !2416
  %6 = add i32 %0, 1, !insn.addr !2417
  %7 = call i32* @malloc(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2418
  %8 = load i32, i32* inttoptr (i32 1442922525 to i32*), align 4, !insn.addr !2419
  %9 = add i32 %1, -4, !insn.addr !2420
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2420
  store i32 %6, i32* %10, align 4, !insn.addr !2420
  ret i32 %8, !insn.addr !2421
}

define i32 @function_405ea2() local_unnamed_addr {
dec_label_pc_405ea2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %1, 8, !insn.addr !2422
  %3 = udiv i32 %1, 536870912, !insn.addr !2422
  %4 = or i32 %3, %2, !insn.addr !2422
  %5 = inttoptr i32 %1 to i32*, !insn.addr !2422
  store i32 %4, i32* %5, align 4, !insn.addr !2422
  %6 = and i32 %1, -252, !insn.addr !2423
  %7 = inttoptr i32 %0 to i32*, !insn.addr !2424
  store i32 %6, i32* %7, align 4, !insn.addr !2424
  ret i32 %6, !insn.addr !2425
}

define i32 @function_405eb4() local_unnamed_addr {
dec_label_pc_405eb4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @unknown_d3abf0(), !insn.addr !2426
  %5 = add i32 %2, -4, !insn.addr !2427
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2427
  %7 = load i32, i32* %6, align 4, !insn.addr !2427
  %8 = sub i32 %1, %7, !insn.addr !2428
  %9 = call i32 @unknown_1fa290d(i32 %4, i32 %8), !insn.addr !2429
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2430
  %11 = load i8, i8* %10, align 1, !insn.addr !2430
  %12 = trunc i32 %9 to i8, !insn.addr !2430
  %13 = add i8 %11, %12, !insn.addr !2430
  store i8 %13, i8* %10, align 1, !insn.addr !2430
  %14 = add i32 %3, 1564149956, !insn.addr !2431
  %15 = inttoptr i32 %14 to i8*, !insn.addr !2431
  %16 = load i8, i8* %15, align 1, !insn.addr !2431
  %17 = add i8 %16, %12, !insn.addr !2431
  store i8 %17, i8* %15, align 1, !insn.addr !2431
  %18 = inttoptr i32 %0 to i32*, !insn.addr !2432
  store i32 %9, i32* %18, align 4, !insn.addr !2432
  %19 = icmp slt i8 %17, 1, !insn.addr !2433
  br i1 %19, label %dec_label_pc_405f02, label %dec_label_pc_405ed9, !insn.addr !2433

dec_label_pc_405ed9:                              ; preds = %dec_label_pc_405eb4
  %20 = add i32 %3, -1, !insn.addr !2434
  %21 = add i32 %0, 4, !insn.addr !2435
  %22 = add i32 %2, -81, !insn.addr !2436
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2436
  store i32 %20, i32* %23, align 4, !insn.addr !2436
  %24 = inttoptr i32 %21 to i32*, !insn.addr !2437
  store i32 %8, i32* %24, align 4, !insn.addr !2437
  %25 = or i32 %21, 247, !insn.addr !2438
  ret i32 %25, !insn.addr !2438

dec_label_pc_405f02:                              ; preds = %dec_label_pc_405eb4
  %26 = mul i32 %3, 4, !insn.addr !2439
  %27 = add i32 %26, %0, !insn.addr !2439
  %28 = inttoptr i32 %27 to i32*, !insn.addr !2439
  store i32 245, i32* %28, align 4, !insn.addr !2439
  %29 = add i32 %8, 95, !insn.addr !2440
  %30 = inttoptr i32 %29 to i32*, !insn.addr !2440
  ret i32 %3, !insn.addr !2441
}

define i32 @function_405f18() local_unnamed_addr {
dec_label_pc_405f18:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %3 to i16, !insn.addr !2442
  %6 = call i8 @__asm_in.4(i16 %5), !insn.addr !2442
  %7 = sext i8 %6 to i32, !insn.addr !2442
  %8 = or i32 %4, %7, !insn.addr !2442
  %9 = udiv i8 %6, 4, !insn.addr !2443
  %10 = urem i8 %6, 4, !insn.addr !2443
  %11 = zext i8 %10 to i32, !insn.addr !2443
  %12 = and i32 %8, -65536, !insn.addr !2443
  %13 = or i32 %12, %11, !insn.addr !2443
  %14 = zext i8 %9 to i32, !insn.addr !2443
  %15 = mul i32 %14, 256, !insn.addr !2443
  %16 = or i32 %13, %15, !insn.addr !2443
  %17 = inttoptr i32 %16 to i8*, !insn.addr !2444
  %18 = load i8, i8* %17, align 1, !insn.addr !2444
  %19 = add i8 %18, %10, !insn.addr !2444
  store i8 %19, i8* %17, align 1, !insn.addr !2444
  %20 = and i32 %1, 1962688771, !insn.addr !2445
  %21 = add i32 %0, -1017256565, !insn.addr !2446
  %22 = inttoptr i32 %21 to i32*, !insn.addr !2446
  %23 = load i32, i32* %22, align 4, !insn.addr !2446
  %24 = xor i32 %23, %20, !insn.addr !2446
  %25 = call i32 @__asm_hlt(), !insn.addr !2447
  store i32 %24, i32* inttoptr (i32 -420714673 to i32*), align 4, !insn.addr !2448
  %26 = call i32 @unknown_c2a6d1(), !insn.addr !2449
  %27 = xor i32 %26, 121, !insn.addr !2450
  %28 = udiv i32 %2, 256, !insn.addr !2451
  %29 = trunc i32 %28 to i8, !insn.addr !2451
  %30 = sub i8 0, %29
  %31 = sub i8 %30, 1
  %32 = icmp ult i8 %31, %29, !insn.addr !2451
  %33 = select i1 %32, i32 4243621, i32 4243620, !insn.addr !2452
  %34 = add i32 %27, %33, !insn.addr !2452
  store i32 %34, i32* inttoptr (i32 12257620 to i32*), align 4, !insn.addr !2453
  %35 = call i32 @function_c0c65f3e(), !insn.addr !2454
  ret i32 %35, !insn.addr !2454
}

define i32 @function_405f66() local_unnamed_addr {
dec_label_pc_405f66:
  %merge.reg2mem = alloca i32, !insn.addr !2455
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -4, !insn.addr !2456
  %4 = call i32 @function_404f60(i32 %3, i32 %2, i32 %2), !insn.addr !2457
  %5 = icmp eq i32 %4, 0, !insn.addr !2458
  store i32 20002, i32* %merge.reg2mem, !insn.addr !2459
  br i1 %5, label %dec_label_pc_405f81, label %dec_label_pc_405f78, !insn.addr !2459

dec_label_pc_405f78:                              ; preds = %dec_label_pc_405fdb, %dec_label_pc_405f66
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2460

dec_label_pc_405f81:                              ; preds = %dec_label_pc_405f66
  %6 = icmp eq i32 %0, 1, !insn.addr !2461
  %7 = icmp eq i1 %6, false, !insn.addr !2462
  br i1 %7, label %dec_label_pc_405fdb, label %dec_label_pc_405fb5, !insn.addr !2462

dec_label_pc_405fb5:                              ; preds = %dec_label_pc_405f81
  %8 = add i32 %1, -56, !insn.addr !2463
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2463
  %10 = load i32, i32* %9, align 4, !insn.addr !2463
  %11 = inttoptr i32 %3 to i32*, !insn.addr !2464
  %12 = load i32, i32* %11, align 4, !insn.addr !2464
  %13 = inttoptr i32 %1 to i32*, !insn.addr !2465
  store i32 %12, i32* %13, align 4, !insn.addr !2465
  %14 = call i32 @function_40a420(i32 1023410174, i32 16, i32 1392508926, i32 %10, i32 9303076), !insn.addr !2466
  %15 = call i32 @function_40a49c(), !insn.addr !2467
  ret i32 0, !insn.addr !2468

dec_label_pc_405fdb:                              ; preds = %dec_label_pc_405f81
  store i32 16121872, i32* inttoptr (i32 574686088 to i32*), align 8, !insn.addr !2469
  store i32 16121872, i32* %merge.reg2mem
  br label %dec_label_pc_405f78
}

define i32 @function_40600a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40600a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call x86_fp80 @__decompiler_undefined_function_4()
  %8 = trunc i32 %4 to i8, !insn.addr !2470
  %9 = add i32 %6, -755527512, !insn.addr !2470
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2470
  %11 = load i8, i8* %10, align 1, !insn.addr !2470
  %12 = and i8 %11, %8, !insn.addr !2470
  %13 = zext i8 %12 to i32, !insn.addr !2470
  %14 = and i32 %4, -256, !insn.addr !2470
  %15 = or i32 %14, %13, !insn.addr !2470
  %16 = add i32 %0, 1460946188, !insn.addr !2471
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2471
  %18 = load i32, i32* %17, align 4, !insn.addr !2471
  %19 = add i32 %3, -117, !insn.addr !2472
  %20 = add i32 %19, %15, !insn.addr !2472
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2472
  %22 = load i32, i32* %21, align 4, !insn.addr !2472
  %23 = add i32 %22, %1, !insn.addr !2472
  store i32 %23, i32* %21, align 4, !insn.addr !2472
  %24 = and i32 %5, 31, !insn.addr !2473
  %25 = icmp eq i32 %24, 0, !insn.addr !2473
  br i1 %25, label %42, label %26, !insn.addr !2473

; <label>:26:                                     ; preds = %dec_label_pc_40600a
  %27 = add i32 %0, -57, !insn.addr !2473
  %28 = inttoptr i32 %27 to i32*, !insn.addr !2473
  %29 = load i32, i32* %28, align 4, !insn.addr !2473
  %30 = icmp ult i32 %23, %22, !insn.addr !2472
  %31 = zext i1 %30 to i32, !insn.addr !2473
  %32 = lshr i32 %29, %24, !insn.addr !2473
  %33 = zext i32 %29 to i64, !insn.addr !2473
  %34 = sub nsw i32 33, %24, !insn.addr !2473
  %35 = zext i32 %34 to i64, !insn.addr !2473
  %36 = shl i64 %33, %35, !insn.addr !2473
  %37 = sub nsw i32 32, %24, !insn.addr !2473
  %38 = shl i32 %31, %37, !insn.addr !2473
  %39 = trunc i64 %36 to i32
  %40 = or i32 %38, %32
  %41 = or i32 %40, %39, !insn.addr !2473
  store i32 %41, i32* %28, align 4, !insn.addr !2473
  br label %42, !insn.addr !2473

; <label>:42:                                     ; preds = %dec_label_pc_40600a, %26
  %43 = inttoptr i32 %18 to i8*, !insn.addr !2474
  %44 = load i8, i8* %43, align 1, !insn.addr !2474
  %45 = trunc i32 %18 to i8, !insn.addr !2474
  %factor = mul i8 %45, 2
  %46 = add i8 %44, %factor, !insn.addr !2475
  store i8 %46, i8* %43, align 1, !insn.addr !2475
  store i8 %45, i8* inttoptr (i32 17926072 to i8*), align 8, !insn.addr !2476
  %47 = add i32 %2, -61, !insn.addr !2477
  %48 = inttoptr i32 %47 to i8*, !insn.addr !2477
  %49 = load i8, i8* %48, align 1, !insn.addr !2477
  %50 = trunc i32 %3 to i8, !insn.addr !2477
  %51 = add i8 %49, %50, !insn.addr !2477
  %52 = icmp ult i8 %51, %49, !insn.addr !2477
  store i8 %51, i8* %48, align 1, !insn.addr !2477
  %53 = load i8, i8* %43, align 1, !insn.addr !2478
  %54 = zext i1 %52 to i8, !insn.addr !2478
  %55 = add i8 %53, %45, !insn.addr !2478
  %56 = add i8 %55, %54, !insn.addr !2478
  store i8 %56, i8* %43, align 1, !insn.addr !2478
  %57 = fptosi x86_fp80 %7 to i64, !insn.addr !2479
  %58 = add i32 %2, 13, !insn.addr !2479
  %59 = inttoptr i32 %58 to i64*, !insn.addr !2479
  store i64 %57, i64* %59, align 4, !insn.addr !2479
  %60 = load i8, i8* %43, align 1, !insn.addr !2480
  %61 = add i8 %60, %45, !insn.addr !2480
  store i8 %61, i8* %43, align 1, !insn.addr !2480
  store i32 22, i32* inttoptr (i32 1 to i32*), align 4, !insn.addr !2481
  %62 = load i8, i8* %48, align 1, !insn.addr !2482
  %63 = add i8 %62, %50, !insn.addr !2482
  store i8 %63, i8* %48, align 1, !insn.addr !2482
  %64 = add i32 %3, -110, !insn.addr !2483
  %65 = inttoptr i32 %64 to i8*, !insn.addr !2483
  %66 = load i8, i8* %65, align 1, !insn.addr !2483
  %67 = add i8 %66, -1, !insn.addr !2483
  %68 = icmp ne i8 %66, 0, !insn.addr !2483
  store i8 %67, i8* %65, align 1, !insn.addr !2483
  %69 = load i8, i8* inttoptr (i32 23 to i8*), align 1, !insn.addr !2484
  %70 = zext i1 %68 to i8, !insn.addr !2484
  %71 = add i8 %69, 23, !insn.addr !2484
  %72 = add i8 %71, %70, !insn.addr !2484
  store i8 %72, i8* inttoptr (i32 23 to i8*), align 1, !insn.addr !2484
  %73 = call i32 @function_7587ffff(), !insn.addr !2485
  ret i32 %73, !insn.addr !2485
}

define i32 @function_406090() local_unnamed_addr {
dec_label_pc_406090:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = trunc i32 %2 to i8
  %5 = udiv i32 %0, 256, !insn.addr !2486
  %6 = trunc i32 %5 to i8, !insn.addr !2486
  %.neg1 = sext i1 %3 to i8
  %.neg2 = sub i8 %4, %6, !insn.addr !2486
  %7 = add i8 %.neg2, %.neg1, !insn.addr !2486
  %8 = inttoptr i32 %2 to i8*, !insn.addr !2486
  store i8 %7, i8* %8, align 1, !insn.addr !2486
  %9 = add i32 %2, -12728340, !insn.addr !2487
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2487
  %11 = load i8, i8* %10, align 1, !insn.addr !2487
  %12 = trunc i32 %1 to i8, !insn.addr !2487
  %13 = add i8 %11, %12, !insn.addr !2487
  store i8 %13, i8* %10, align 1, !insn.addr !2487
  ret i32 %2, !insn.addr !2488
}

define i32 @function_40609e() local_unnamed_addr {
dec_label_pc_40609e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 48, !insn.addr !2489
  %2 = inttoptr i32 %1 to i32*, !insn.addr !2489
  %3 = load i32, i32* %2, align 4, !insn.addr !2489
  %4 = or i32 %3, -1679294284, !insn.addr !2489
  store i32 %4, i32* %2, align 4, !insn.addr !2489
  %5 = call i32 @function_1724606e(), !insn.addr !2490
  ret i32 %5, !insn.addr !2490
}

define i32 @function_4060c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_4060c0:
  %merge.reg2mem = alloca i32, !insn.addr !2491
  %esp.1.reg2mem = alloca i32, !insn.addr !2491
  %eax.1.reg2mem = alloca i32, !insn.addr !2491
  %esp.0.reg2mem = alloca i32, !insn.addr !2491
  %ecx.0.reg2mem = alloca i32, !insn.addr !2491
  %eax.0.reg2mem = alloca i32, !insn.addr !2491
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = and i32 %3, 1166797921, !insn.addr !2491
  %6 = or i32 %5, 4, !insn.addr !2492
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2492
  %8 = load i32, i32* %7, align 4, !insn.addr !2492
  %9 = add nsw i32 %5, -70, !insn.addr !2493
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2493
  %11 = load i32, i32* %10, align 4, !insn.addr !2493
  %12 = icmp eq i32 %8, %11, !insn.addr !2494
  %13 = icmp eq i1 %12, false, !insn.addr !2495
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !2495
  br i1 %13, label %dec_label_pc_4060df, label %dec_label_pc_4060d3, !insn.addr !2495

dec_label_pc_4060d3:                              ; preds = %dec_label_pc_4060c0
  %14 = trunc i32 %5 to i8, !insn.addr !2496
  call void @__asm_out(i32 94, i8 %14), !insn.addr !2496
  store i32 -470302099, i32* %eax.0.reg2mem, !insn.addr !2497
  br label %dec_label_pc_4060df, !insn.addr !2497

dec_label_pc_4060df:                              ; preds = %dec_label_pc_4060d3, %dec_label_pc_4060c0
  %15 = and i32 %2, 255
  %16 = or i32 %15, %1, !insn.addr !2498
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %17 = add i32 %0, 28, !insn.addr !2499
  %18 = inttoptr i32 %17 to i32*, !insn.addr !2499
  %19 = load i32, i32* %18, align 4, !insn.addr !2499
  %20 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2500
  %21 = load i8, i8* %20, align 1, !insn.addr !2500
  %22 = trunc i32 %eax.0.reload to i8, !insn.addr !2500
  %23 = xor i8 %21, %22, !insn.addr !2500
  store i8 %23, i8* %20, align 1, !insn.addr !2500
  %24 = add i32 %16, 210570333, !insn.addr !2501
  %25 = inttoptr i32 %24 to i8*, !insn.addr !2501
  %26 = load i8, i8* %25, align 1, !insn.addr !2501
  %27 = trunc i32 %8 to i8, !insn.addr !2501
  %28 = add i8 %26, %27, !insn.addr !2501
  store i8 %28, i8* %25, align 1, !insn.addr !2501
  %29 = call i32 @__asm_hlt(), !insn.addr !2502
  %30 = mul i32 %16, 5, !insn.addr !2503
  %31 = inttoptr i32 %16 to i8*, !insn.addr !2504
  %32 = inttoptr i32 %30 to i8*, !insn.addr !2504
  call void @__asm_rep_movsd_memcpy(i8* %32, i8* %31, i32 5), !insn.addr !2504
  %33 = select i1 %4, i32 -20, i32 20, !insn.addr !2504
  %34 = add i32 %33, %30, !insn.addr !2504
  %35 = inttoptr i32 %34 to i32*, !insn.addr !2505
  %36 = load i32, i32* %35, align 4, !insn.addr !2505
  %37 = add i32 %29, 17, !insn.addr !2506
  %38 = and i32 %37, 255, !insn.addr !2506
  %39 = and i32 %29, -256, !insn.addr !2506
  %40 = or i32 %38, %39, !insn.addr !2506
  %41 = inttoptr i32 %40 to i32*, !insn.addr !2507
  %42 = load i32, i32* %41, align 4, !insn.addr !2507
  %43 = add i32 %42, %40, !insn.addr !2507
  store i32 %43, i32* %41, align 4, !insn.addr !2507
  %44 = inttoptr i32 %40 to i8*, !insn.addr !2508
  %45 = load i8, i8* %44, align 1, !insn.addr !2508
  %46 = trunc i32 %37 to i8, !insn.addr !2508
  %47 = add i8 %45, %46, !insn.addr !2508
  %48 = icmp eq i8 %47, 0, !insn.addr !2508
  store i8 %47, i8* %44, align 1, !insn.addr !2508
  %49 = icmp eq i1 %48, false, !insn.addr !2509
  store i32 -939469047, i32* %merge.reg2mem, !insn.addr !2509
  br i1 %49, label %dec_label_pc_406155, label %dec_label_pc_406107, !insn.addr !2509

dec_label_pc_406107:                              ; preds = %dec_label_pc_4060df
  %50 = or i8 %46, -117, !insn.addr !2510
  %51 = call i8 @llvm.ctpop.i8(i8 %50), !range !2511, !insn.addr !2510
  %52 = and i8 %51, 1, !insn.addr !2510
  %53 = icmp eq i8 %52, 0, !insn.addr !2510
  %54 = zext i8 %50 to i32, !insn.addr !2510
  br i1 %53, label %dec_label_pc_406111, label %dec_label_pc_40610d, !insn.addr !2512

dec_label_pc_40610d:                              ; preds = %dec_label_pc_406107
  %55 = or i32 %39, %54, !insn.addr !2510
  ret i32 %55, !insn.addr !2513

dec_label_pc_406111:                              ; preds = %dec_label_pc_406107
  %56 = xor i32 %36, 255, !insn.addr !2514
  %57 = add i32 %0, -117, !insn.addr !2515
  %58 = add i32 %57, %16, !insn.addr !2515
  %59 = inttoptr i32 %58 to i32*, !insn.addr !2515
  %60 = load i32, i32* %59, align 4, !insn.addr !2515
  %61 = mul i32 %60, 2, !insn.addr !2515
  store i32 %61, i32* %59, align 4, !insn.addr !2515
  %62 = or i32 %39, %54, !insn.addr !2516
  %63 = or i32 %62, 51, !insn.addr !2516
  %64 = add i32 %0, 4, !insn.addr !2517
  %65 = and i32 %19, %34, !insn.addr !2518
  %66 = icmp eq i32 %65, 0, !insn.addr !2518
  store i32 %56, i32* %ecx.0.reg2mem, !insn.addr !2519
  store i32 %64, i32* %esp.0.reg2mem, !insn.addr !2519
  br i1 %66, label %dec_label_pc_40612c, label %dec_label_pc_40611d, !insn.addr !2519

dec_label_pc_40611d:                              ; preds = %dec_label_pc_406111
  %67 = mul i32 %16, 8, !insn.addr !2520
  %68 = add i32 %16, 141835889, !insn.addr !2520
  %69 = add i32 %68, %67, !insn.addr !2520
  %70 = add i32 %56, 1, !insn.addr !2521
  %71 = inttoptr i32 %63 to i32*, !insn.addr !2522
  %72 = load i32, i32* %71, align 4, !insn.addr !2522
  %73 = add i32 %72, 109, !insn.addr !2522
  store i32 %73, i32* %71, align 4, !insn.addr !2522
  %74 = and i32 %34, %69, !insn.addr !2523
  store i32 %70, i32* %ecx.0.reg2mem, !insn.addr !2523
  store i32 %74, i32* %esp.0.reg2mem, !insn.addr !2523
  br label %dec_label_pc_40612c, !insn.addr !2523

dec_label_pc_40612c:                              ; preds = %dec_label_pc_40611d, %dec_label_pc_406111
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %75 = icmp eq i32 %ecx.0.reload, %19, !insn.addr !2524
  %76 = icmp eq i1 %75, false, !insn.addr !2525
  store i32 %63, i32* %eax.1.reg2mem, !insn.addr !2525
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !2525
  br i1 %76, label %dec_label_pc_406143, label %dec_label_pc_406130, !insn.addr !2525

dec_label_pc_406130:                              ; preds = %dec_label_pc_40612c
  %77 = icmp ult i32 %ecx.0.reload, %19, !insn.addr !2524
  %78 = select i1 %77, i32 -805043973, i32 -805043974, !insn.addr !2526
  %79 = sub i32 %63, %78, !insn.addr !2526
  %80 = icmp ult i32 %63, %78, !insn.addr !2526
  %81 = or i1 %77, %80, !insn.addr !2526
  %82 = add i32 %esp.0.reload, -2, !insn.addr !2527
  %83 = icmp eq i1 %81, false, !insn.addr !2528
  store i32 %79, i32* %eax.1.reg2mem, !insn.addr !2528
  store i32 %82, i32* %esp.1.reg2mem, !insn.addr !2528
  br i1 %83, label %dec_label_pc_406143, label %dec_label_pc_406138, !insn.addr !2528

dec_label_pc_406138:                              ; preds = %dec_label_pc_406130
  %84 = inttoptr i32 %82 to i16*, !insn.addr !2527
  %85 = mul i32 %ecx.0.reload, 4, !insn.addr !2529
  %86 = or i32 %79, 16, !insn.addr !2529
  %87 = add i32 %86, %85, !insn.addr !2529
  %88 = inttoptr i32 %87 to i32*, !insn.addr !2529
  store i32 %16, i32* %88, align 4, !insn.addr !2529
  %89 = add nsw i32 %79, 55, !insn.addr !2530
  %90 = inttoptr i32 %89 to i32*, !insn.addr !2530
  %91 = load i32, i32* %90, align 4, !insn.addr !2530
  %92 = add i32 %91, 1, !insn.addr !2531
  %93 = add nsw i32 %79, 12, !insn.addr !2532
  %94 = inttoptr i32 %93 to i32*, !insn.addr !2532
  store i32 %92, i32* %94, align 4, !insn.addr !2532
  store i32 %79, i32* %eax.1.reg2mem, !insn.addr !2532
  store i32 %82, i32* %esp.1.reg2mem, !insn.addr !2532
  br label %dec_label_pc_406143, !insn.addr !2532

dec_label_pc_406143:                              ; preds = %dec_label_pc_406138, %dec_label_pc_406130, %dec_label_pc_40612c
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %95 = add i32 %eax.1.reload, 4134, !insn.addr !2533
  %96 = inttoptr i32 %95 to i32*, !insn.addr !2533
  %97 = load i32, i32* %96, align 4, !insn.addr !2533
  %98 = icmp eq i32 %97, 0, !insn.addr !2534
  store i32 %eax.1.reload, i32* %merge.reg2mem, !insn.addr !2535
  br i1 %98, label %dec_label_pc_4061c5, label %dec_label_pc_406155, !insn.addr !2535

dec_label_pc_406155:                              ; preds = %dec_label_pc_4060df, %dec_label_pc_4061d3, %dec_label_pc_406143
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2535

dec_label_pc_406159:                              ; preds = %dec_label_pc_4061c5
  %99 = add i8 %110, %109, !insn.addr !2536
  store i8 %99, i8* %107, align 1, !insn.addr !2536
  %100 = add i32 %esp.1.reload, -4, !insn.addr !2537
  %101 = inttoptr i32 %100 to i32*, !insn.addr !2537
  store i32 %16, i32* %101, align 4, !insn.addr !2537
  ret i32 %eax.1.reload, !insn.addr !2538

dec_label_pc_4061c5:                              ; preds = %dec_label_pc_406143
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %102 = add i32 %eax.1.reload, -117432300, !insn.addr !2539
  %103 = inttoptr i32 %102 to i32*, !insn.addr !2539
  store i32 0, i32* %103, align 4, !insn.addr !2539
  %104 = load i8, i8* inttoptr (i32 47104 to i8*), align 2048, !insn.addr !2540
  %105 = trunc i32 %16 to i8, !insn.addr !2540
  %106 = sub i8 %104, %105, !insn.addr !2540
  store i8 %106, i8* inttoptr (i32 47104 to i8*), align 2048, !insn.addr !2540
  %107 = inttoptr i32 %eax.1.reload to i8*, !insn.addr !2541
  %108 = load i8, i8* %107, align 1, !insn.addr !2541
  %109 = trunc i32 %eax.1.reload to i8, !insn.addr !2541
  %110 = add i8 %108, %109, !insn.addr !2541
  store i8 %110, i8* %107, align 1, !insn.addr !2541
  %111 = icmp slt i8 %110, 1, !insn.addr !2542
  br i1 %111, label %dec_label_pc_406159, label %dec_label_pc_4061d3, !insn.addr !2542

dec_label_pc_4061d3:                              ; preds = %dec_label_pc_4061c5
  %112 = add i32 %esp.1.reload, -2, !insn.addr !2543
  %113 = inttoptr i32 %112 to i16*, !insn.addr !2543
  store i32 %eax.1.reload, i32* %merge.reg2mem
  br label %dec_label_pc_406155
}

define i32 @function_4063f7() local_unnamed_addr {
dec_label_pc_4063f7:
  %eax.0.reg2mem = alloca i32, !insn.addr !2544
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = icmp eq i32 %0, -1, !insn.addr !2545
  %4 = trunc i32 %1 to i16, !insn.addr !2546
  %5 = call i8 @__asm_in.4(i16 %4), !insn.addr !2546
  %6 = call x86_fp80 @function_40b750(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2547
  %7 = fptrunc x86_fp80 %6 to float, !insn.addr !2547
  %8 = bitcast float %7 to i32, !insn.addr !2547
  %9 = add i32 %0, -15, !insn.addr !2548
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2548
  store i32 %8, i32* %10, align 4, !insn.addr !2548
  %11 = icmp ne i32 %2, 1, !insn.addr !2549
  %12 = icmp eq i1 %11, %3, !insn.addr !2549
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !2549
  br i1 %12, label %13, label %dec_label_pc_406406, !insn.addr !2549

; <label>:13:                                     ; preds = %dec_label_pc_4063f7
  %14 = call i32 @function_40644b(), !insn.addr !2549
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !2549
  br label %dec_label_pc_406406, !insn.addr !2549

dec_label_pc_406406:                              ; preds = %13, %dec_label_pc_4063f7
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %15 = call i8 @__asm_in.4(i16 %4), !insn.addr !2550
  %16 = sext i8 %15 to i32, !insn.addr !2550
  %17 = and i32 %eax.0.reload, -256, !insn.addr !2550
  %18 = or i32 %17, %16, !insn.addr !2550
  ret i32 %18, !insn.addr !2550
}

define i32 @function_406407() local_unnamed_addr {
dec_label_pc_406407:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2551
}

define i32 @function_406426() local_unnamed_addr {
dec_label_pc_406426:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i16, !insn.addr !2552
  call void @__asm_out.3(i16 %2, i32 %1), !insn.addr !2552
  ret i32 %1, !insn.addr !2552
}

define i32 @function_40644b() local_unnamed_addr {
dec_label_pc_40644b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40645c() local_unnamed_addr {
dec_label_pc_40645c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_int(i32 196), !insn.addr !2553
  %2 = mul i32 %1, 2048, !insn.addr !2554
  %3 = udiv i32 %1, 2097152, !insn.addr !2554
  %4 = or i32 %3, %2, !insn.addr !2554
  %5 = inttoptr i32 %1 to i32*, !insn.addr !2554
  store i32 %4, i32* %5, align 4, !insn.addr !2554
  %6 = icmp eq i32 %1, ptrtoint (i32* @global_var_40c1d8 to i32), !insn.addr !2555
  br i1 %6, label %7, label %dec_label_pc_40647c, !insn.addr !2556

; <label>:7:                                      ; preds = %dec_label_pc_40645c
  %8 = call i32 @function_4365d3(), !insn.addr !2556
  br label %dec_label_pc_40647c, !insn.addr !2556

dec_label_pc_40647c:                              ; preds = %7, %dec_label_pc_40645c
  %9 = add i32 %0, -2, !insn.addr !2557
  %10 = inttoptr i32 %9 to i16*, !insn.addr !2557
  %11 = bitcast i32* %ecx to i8*
  %12 = load i8, i8* %11, align 4, !insn.addr !2558
  %13 = load i32, i32* %ecx, align 4
  %14 = trunc i32 %13 to i8, !insn.addr !2558
  %15 = add i8 %12, %14, !insn.addr !2558
  %16 = inttoptr i32 %13 to i8*, !insn.addr !2558
  store i8 %15, i8* %16, align 1, !insn.addr !2558
  %17 = add i32 %0, -4, !insn.addr !2559
  %18 = inttoptr i32 %17 to i16*, !insn.addr !2559
  ret i32 70007, !insn.addr !2560
}

define i32 @function_4064ce() local_unnamed_addr {
dec_label_pc_4064ce:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2561
}

define i32 @function_4064e4() local_unnamed_addr {
dec_label_pc_4064e4:
  %0 = call i32 @function_74865650(), !insn.addr !2562
  ret i32 %0, !insn.addr !2562
}

define i32 @function_4064ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_4064ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2563
}

define i32 @function_4064ef(i32 %arg1) local_unnamed_addr {
dec_label_pc_4064ef:
  %esp.1.reg2mem = alloca i32, !insn.addr !2564
  %eax.1.reg2mem = alloca i32, !insn.addr !2564
  %cf.0.reg2mem = alloca i1, !insn.addr !2564
  %esi.0.reg2mem = alloca i32, !insn.addr !2564
  %ebp.0.reg2mem = alloca i32, !insn.addr !2564
  %esp.0.ptr.reg2mem = alloca i32*, !insn.addr !2564
  %ebx.0.reg2mem = alloca i32, !insn.addr !2564
  %edx.0.reg2mem = alloca i32, !insn.addr !2564
  %ecx.0.reg2mem = alloca i8, !insn.addr !2564
  %eax.0.reg2mem = alloca i32, !insn.addr !2564
  %edi.0.reg2mem = alloca i32, !insn.addr !2564
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4, !insn.addr !2565
  %3 = call i32 @function_40b960(), !insn.addr !2566
  %4 = call i32 @__asm_int3(), !insn.addr !2567
  %5 = trunc i32 %0 to i8
  %6 = udiv i8 %5, 16, !insn.addr !2568
  %7 = mul i8 %5, 16, !insn.addr !2568
  %8 = or i8 %6, %7, !insn.addr !2568
  %9 = inttoptr i32 %0 to i8*, !insn.addr !2568
  store i8 %8, i8* %9, align 1, !insn.addr !2568
  %phitmp = trunc i32 %1 to i8
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !2568
  store i8 %phitmp, i8* %ecx.0.reg2mem, !insn.addr !2568
  store i32* %stack_var_0, i32** %esp.0.ptr.reg2mem, !insn.addr !2568
  store i32 %arg1, i32* %esi.0.reg2mem, !insn.addr !2568
  br label %dec_label_pc_406501, !insn.addr !2568

dec_label_pc_406501:                              ; preds = %dec_label_pc_406501, %dec_label_pc_4064ef
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.ptr.reload = load i32*, i32** %esp.0.ptr.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i8, i8* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %10 = load i32, i32* %esp.0.ptr.reload, align 4, !insn.addr !2569
  %11 = and i32 %10, 1024, !insn.addr !2569
  %12 = icmp eq i32 %11, 0, !insn.addr !2569
  %13 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2570
  %14 = load i8, i8* %13, align 1, !insn.addr !2570
  %15 = trunc i32 %eax.0.reload to i8, !insn.addr !2570
  %16 = add i8 %14, %15, !insn.addr !2570
  store i8 %16, i8* %13, align 1, !insn.addr !2570
  %17 = add i32 %edi.0.reload, -886039373, !insn.addr !2571
  %18 = inttoptr i32 %17 to i8*, !insn.addr !2571
  %19 = load i8, i8* %18, align 1, !insn.addr !2571
  %20 = udiv i32 %edx.0.reload, 256, !insn.addr !2571
  %21 = trunc i32 %20 to i8, !insn.addr !2571
  %22 = add i8 %19, %21, !insn.addr !2571
  store i8 %22, i8* %18, align 1, !insn.addr !2571
  %23 = and i32 %ebx.0.reload, 65280, !insn.addr !2572
  %24 = add i32 %23, %ebx.0.reload
  %25 = and i32 %24, 65280, !insn.addr !2572
  %26 = and i32 %ebx.0.reload, -65281, !insn.addr !2572
  %27 = or i32 %25, %26, !insn.addr !2572
  %28 = add i32 %ebp.0.reload, 1, !insn.addr !2573
  %29 = inttoptr i32 %27 to i8*, !insn.addr !2574
  %30 = load i8, i8* %29, align 1, !insn.addr !2574
  %31 = or i8 %30, %15, !insn.addr !2574
  store i8 %31, i8* %29, align 1, !insn.addr !2574
  %32 = mul i32 %edi.0.reload, 8, !insn.addr !2575
  %33 = add i32 %32, %eax.0.reload, !insn.addr !2575
  %34 = inttoptr i32 %33 to i8*, !insn.addr !2575
  %35 = load i8, i8* %34, align 1, !insn.addr !2575
  %36 = add i8 %35, %ecx.0.reload, !insn.addr !2575
  %37 = icmp slt i8 %36, 0, !insn.addr !2575
  store i8 %36, i8* %34, align 1, !insn.addr !2575
  %38 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !2576
  %39 = inttoptr i32 %edi.0.reload to i8*, !insn.addr !2576
  call void @__asm_rep_movsd_memcpy(i8* %39, i8* %38, i32 5), !insn.addr !2576
  %40 = select i1 %12, i32 20, i32 -20, !insn.addr !2576
  %41 = add i32 %40, %edi.0.reload, !insn.addr !2576
  %42 = add i32 %27, 12320, !insn.addr !2577
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2577
  %44 = load i32, i32* %43, align 4, !insn.addr !2577
  %45 = inttoptr i32 %41 to i32*, !insn.addr !2578
  %46 = load i32, i32* %45, align 4, !insn.addr !2578
  %47 = call i32 @__asm_hlt(), !insn.addr !2579
  %48 = add i32 %44, 10, !insn.addr !2580
  %49 = add i32 %48, %47, !insn.addr !2580
  %50 = inttoptr i32 %49 to i16*, !insn.addr !2580
  store i16 0, i16* %50, align 2, !insn.addr !2580
  %51 = add i32 %ebp.0.reload, -54293, !insn.addr !2581
  %52 = inttoptr i32 %51 to i32*, !insn.addr !2581
  store i32 %47, i32* %52, align 4, !insn.addr !2581
  %53 = trunc i32 %44 to i16, !insn.addr !2582
  %54 = inttoptr i32 %41 to i8*, !insn.addr !2582
  %55 = load i8, i8* %54, align 1, !insn.addr !2582
  call void @__asm_outsb(i16 %53, i8 %55), !insn.addr !2582
  %56 = call i32 @function_40b960(), !insn.addr !2583
  %57 = add i32 %ebp.0.reload, 9, !insn.addr !2584
  %58 = inttoptr i32 %57 to i32*, !insn.addr !2584
  %59 = load i32, i32* %58, align 4, !insn.addr !2584
  %60 = icmp eq i1 %37, false, !insn.addr !2585
  store i32 %41, i32* %edi.0.reg2mem, !insn.addr !2585
  store i32 %56, i32* %eax.0.reg2mem, !insn.addr !2585
  store i8 0, i8* %ecx.0.reg2mem, !insn.addr !2585
  store i32 %44, i32* %edx.0.reg2mem, !insn.addr !2585
  store i32 %46, i32* %ebx.0.reg2mem, !insn.addr !2585
  store i32* %52, i32** %esp.0.ptr.reg2mem, !insn.addr !2585
  store i32 %28, i32* %ebp.0.reg2mem, !insn.addr !2585
  store i32 %59, i32* %esi.0.reg2mem, !insn.addr !2585
  br i1 %60, label %dec_label_pc_406501, label %dec_label_pc_406541, !insn.addr !2585

dec_label_pc_406541:                              ; preds = %dec_label_pc_406501
  %61 = icmp eq i8 %36, 0, !insn.addr !2575
  %62 = icmp ult i8 %36, %35, !insn.addr !2575
  store i1 %62, i1* %cf.0.reg2mem, !insn.addr !2586
  br i1 %61, label %dec_label_pc_406552, label %dec_label_pc_406543, !insn.addr !2586

dec_label_pc_406543:                              ; preds = %dec_label_pc_406541
  %63 = inttoptr i32 %56 to i8*, !insn.addr !2587
  %64 = load i8, i8* %63, align 1, !insn.addr !2587
  %65 = udiv i32 %44, 256, !insn.addr !2587
  %66 = trunc i32 %65 to i8, !insn.addr !2587
  %67 = and i8 %64, %66, !insn.addr !2587
  %68 = trunc i32 %56 to i8, !insn.addr !2588
  %69 = add i8 %67, %68, !insn.addr !2588
  store i8 %69, i8* %63, align 1, !insn.addr !2588
  %70 = load i8, i8* inttoptr (i32 -1929311695 to i8*), align 1, !insn.addr !2589
  %71 = add i8 %70, -68, !insn.addr !2589
  store i8 %71, i8* inttoptr (i32 -1929311695 to i8*), align 1, !insn.addr !2589
  store i1 false, i1* %cf.0.reg2mem, !insn.addr !2590
  br label %dec_label_pc_406552, !insn.addr !2590

dec_label_pc_406552:                              ; preds = %dec_label_pc_406543, %dec_label_pc_406541
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %72 = add i32 %ebp.0.reload, -4119, !insn.addr !2591
  %73 = add i32 %ebp.0.reload, -54297, !insn.addr !2592
  %74 = inttoptr i32 %73 to i32*, !insn.addr !2592
  store i32 %72, i32* %74, align 4, !insn.addr !2592
  %75 = mul i32 %56, 2, !insn.addr !2593
  %76 = inttoptr i32 %75 to i32*, !insn.addr !2593
  %77 = load i32, i32* %76, align 4, !insn.addr !2593
  %78 = add i32 %77, %72, !insn.addr !2593
  store i32 %78, i32* %76, align 4, !insn.addr !2593
  %79 = icmp eq i32 %56, 0, !insn.addr !2594
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !2595
  store i32 %73, i32* %esp.1.reg2mem, !insn.addr !2595
  br i1 %79, label %dec_label_pc_406572, label %dec_label_pc_406563, !insn.addr !2595

dec_label_pc_406563:                              ; preds = %dec_label_pc_406552
  %80 = add i32 %46, 4554272, !insn.addr !2596
  %81 = inttoptr i32 %80 to i32*, !insn.addr !2596
  %82 = load i32, i32* %81, align 4, !insn.addr !2596
  %83 = add i32 %41, 42, !insn.addr !2597
  %84 = inttoptr i32 %83 to i8*, !insn.addr !2597
  %85 = load i8, i8* %84, align 1, !insn.addr !2597
  %86 = add i8 %85, -10, !insn.addr !2597
  store i8 %86, i8* %84, align 1, !insn.addr !2597
  %87 = add i32 %82, 141, !insn.addr !2598
  %88 = and i32 %87, 255, !insn.addr !2598
  %89 = and i32 %82, -256, !insn.addr !2598
  %90 = or i32 %88, %89, !insn.addr !2598
  %91 = add i32 %ebp.0.reload, -54296, !insn.addr !2599
  store i32 %90, i32* %eax.1.reg2mem, !insn.addr !2600
  store i32 %91, i32* %esp.1.reg2mem, !insn.addr !2600
  br label %dec_label_pc_406572, !insn.addr !2600

dec_label_pc_406572:                              ; preds = %dec_label_pc_406563, %dec_label_pc_406552
  %92 = zext i1 %cf.0.reload to i32, !insn.addr !2601
  %93 = add i32 %56, %92, !insn.addr !2601
  %94 = mul i32 %93, 256, !insn.addr !2601
  %95 = and i32 %94, 65280, !insn.addr !2601
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %96 = add i32 %esp.1.reload, -4, !insn.addr !2602
  %97 = inttoptr i32 %96 to i32*, !insn.addr !2602
  store i32 %95, i32* %97, align 4, !insn.addr !2602
  %98 = add i32 %esp.1.reload, -8, !insn.addr !2603
  %99 = inttoptr i32 %98 to i32*, !insn.addr !2603
  store i32 %41, i32* %99, align 4, !insn.addr !2603
  %100 = mul i32 %eax.1.reload, -1819603084, !insn.addr !2604
  %101 = call x86_fp80 @__asm_fbstp(x86_fp80 %2), !insn.addr !2605
  %102 = inttoptr i32 %100 to x86_fp80*, !insn.addr !2605
  store x86_fp80 %101, x86_fp80* %102, align 4, !insn.addr !2605
  store i32 %100, i32* inttoptr (i32 843874304 to i32*), align 32768, !insn.addr !2606
  %103 = add i32 %eax.1.reload, 1300945363, !insn.addr !2607
  %104 = inttoptr i32 %103 to i8*, !insn.addr !2607
  %105 = load i8, i8* %104, align 1, !insn.addr !2607
  %106 = trunc i32 %100 to i8, !insn.addr !2607
  %107 = add i8 %105, %106, !insn.addr !2607
  store i8 %107, i8* %104, align 1, !insn.addr !2607
  %108 = add i32 %eax.1.reload, -1195949481, !insn.addr !2608
  %109 = inttoptr i32 %108 to i8*, !insn.addr !2608
  %110 = load i8, i8* %109, align 1, !insn.addr !2608
  %111 = or i8 %110, -48, !insn.addr !2608
  store i8 %111, i8* %109, align 1, !insn.addr !2608
  %112 = call i32 @function_f868ef72(), !insn.addr !2609
  ret i32 %112, !insn.addr !2609
}

define i32 @function_4065b6() local_unnamed_addr {
dec_label_pc_4065b6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2610
}

define i32 @function_4065d9() local_unnamed_addr {
dec_label_pc_4065d9:
  %0 = call i32 @__asm_in.2(i32 196), !insn.addr !2611
  ret i32 %0, !insn.addr !2612
}

define i32 @function_4065de(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_4065de:
  ret i32 9, !insn.addr !2613
}

define i32 @function_4065f0() local_unnamed_addr {
dec_label_pc_4065f0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %5 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2614
  %6 = add i32 %1, 98, !insn.addr !2615
  %7 = inttoptr i32 %6 to i8*, !insn.addr !2615
  %8 = load i8, i8* %7, align 1, !insn.addr !2615
  %9 = udiv i32 %4, 256, !insn.addr !2615
  %10 = trunc i32 %9 to i8, !insn.addr !2615
  %11 = add i8 %8, %10, !insn.addr !2615
  %12 = icmp ult i8 %11, %8, !insn.addr !2615
  store i8 %11, i8* %7, align 1, !insn.addr !2615
  %13 = add i32 %2, 1448114293, !insn.addr !2616
  %14 = inttoptr i32 %13 to i8*, !insn.addr !2616
  %15 = load i8, i8* %14, align 1, !insn.addr !2616
  %16 = trunc i32 %3 to i8, !insn.addr !2616
  %17 = zext i1 %12 to i8, !insn.addr !2616
  %18 = add i8 %17, %16, !insn.addr !2616
  %19 = sub i8 %15, %18, !insn.addr !2616
  %20 = sub i8 %19, %17, !insn.addr !2616
  %21 = icmp ult i8 %15, %20, !insn.addr !2616
  %22 = icmp ne i8 %18, -1, !insn.addr !2616
  %23 = or i1 %22, %21, !insn.addr !2616
  %24 = icmp ult i8 %15, %18, !insn.addr !2616
  %25 = select i1 %12, i1 %23, i1 %24, !insn.addr !2616
  store i8 %19, i8* %14, align 1, !insn.addr !2616
  %26 = load i32, i32* %stack_var_-4, align 4, !insn.addr !2617
  %27 = call i32 @unknown_73411480(i32 %26), !insn.addr !2617
  %28 = trunc i32 %27 to i8, !insn.addr !2618
  %29 = zext i1 %25 to i8, !insn.addr !2618
  %30 = add i8 %28, -117, !insn.addr !2618
  %31 = add i8 %30, %29, !insn.addr !2618
  %32 = icmp ule i8 %31, %28, !insn.addr !2618
  %33 = icmp ugt i8 %28, 116, !insn.addr !2618
  %34 = select i1 %25, i1 %32, i1 %33, !insn.addr !2618
  %35 = zext i8 %31 to i32, !insn.addr !2618
  %36 = and i32 %27, -256, !insn.addr !2618
  %37 = or i32 %36, %35, !insn.addr !2618
  %38 = add i32 %2, 1364454084, !insn.addr !2619
  %39 = inttoptr i32 %38 to i8*, !insn.addr !2619
  %40 = load i8, i8* %39, align 1, !insn.addr !2619
  %41 = zext i1 %34 to i8, !insn.addr !2619
  %42 = add i8 %31, %40, !insn.addr !2619
  %43 = add i8 %42, %41, !insn.addr !2619
  store i8 %43, i8* %39, align 1, !insn.addr !2619
  %44 = trunc i32 %5 to i16, !insn.addr !2620
  %45 = call i8 @__asm_insb(i16 %44), !insn.addr !2620
  %46 = inttoptr i32 %0 to i8*, !insn.addr !2620
  store i8 %45, i8* %46, align 1, !insn.addr !2620
  %47 = call i32 @unknown_1e757cf8(i32 %37), !insn.addr !2621
  %48 = add i32 %47, 6093952, !insn.addr !2622
  ret i32 %48, !insn.addr !2623
}

define i32 @function_40664e() local_unnamed_addr {
dec_label_pc_40664e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, -36, !insn.addr !2624
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2624
  %6 = load i32, i32* %5, align 4, !insn.addr !2624
  %7 = sub i32 0, %6
  %8 = sub i32 %7, 1
  store i32 %8, i32* %5, align 4, !insn.addr !2624
  %9 = bitcast i32* %ecx to i8*
  %10 = load i8, i8* %9, align 4, !insn.addr !2625
  %11 = trunc i32 %3 to i8, !insn.addr !2625
  %12 = or i8 %10, %11, !insn.addr !2625
  %13 = load i32, i32* %ecx, align 4, !insn.addr !2625
  %14 = inttoptr i32 %13 to i8*, !insn.addr !2625
  store i8 %12, i8* %14, align 1, !insn.addr !2625
  %15 = icmp ult i32 %1, %0, !insn.addr !2626
  %16 = zext i1 %15 to i32, !insn.addr !2627
  %17 = mul i32 %3, 2, !insn.addr !2627
  %18 = or i32 %17, %16, !insn.addr !2627
  %19 = inttoptr i32 %3 to i32*, !insn.addr !2627
  store i32 %18, i32* %19, align 4, !insn.addr !2627
  %20 = call i32 @function_40669a(i32 %3, i32 1), !insn.addr !2628
  ret i32 %20, !insn.addr !2628
}

define i32 @function_406391(i16 %arg1) local_unnamed_addr {
dec_label_pc_406391:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = mul i32 %2, 8, !insn.addr !2629
  %5 = add i32 %4, %0, !insn.addr !2629
  %6 = inttoptr i32 %5 to i8*, !insn.addr !2629
  %7 = load i8, i8* %6, align 1, !insn.addr !2629
  %8 = trunc i32 %1 to i8, !insn.addr !2629
  %9 = add i8 %7, %8, !insn.addr !2629
  store i8 %9, i8* %6, align 1, !insn.addr !2629
  ret i32 %3, !insn.addr !2630
}

define i32 @function_40639d() local_unnamed_addr {
dec_label_pc_40639d:
  %zf.0.reg2mem = alloca i1, !insn.addr !2631
  %sf.0.reg2mem = alloca i1, !insn.addr !2631
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__asm_hlt(), !insn.addr !2632
  %5 = trunc i32 %4 to i8, !insn.addr !2633
  call void @__asm_out(i32 236, i8 %5), !insn.addr !2633
  %6 = call i32 @function_410ab8(), !insn.addr !2634
  %7 = add i32 %0, 133, !insn.addr !2635
  %8 = and i32 %7, 255, !insn.addr !2635
  %9 = and i32 %0, -256, !insn.addr !2635
  %10 = or i32 %8, %9, !insn.addr !2635
  call void @__writefsdword(i32 %10, i32 0), !insn.addr !2636
  %11 = trunc i32 %7 to i8, !insn.addr !2637
  %12 = trunc i32 %2 to i8, !insn.addr !2637
  %13 = add i32 %2, %7, !insn.addr !2637
  %14 = sub i8 0, %11
  %15 = sub i8 %14, 1
  %16 = icmp ult i8 %15, %12, !insn.addr !2637
  %17 = zext i1 %16 to i32, !insn.addr !2638
  %18 = add i32 %13, %17, !insn.addr !2638
  call void @__asm_int(i32 117), !insn.addr !2639
  %19 = trunc i32 %18 to i8, !insn.addr !2640
  %20 = icmp slt i8 %19, 0, !insn.addr !2640
  %21 = icmp eq i1 %20, false, !insn.addr !2641
  br i1 %21, label %dec_label_pc_4063e0, label %dec_label_pc_4063d4, !insn.addr !2641

dec_label_pc_4063d4:                              ; preds = %dec_label_pc_40639d
  %22 = and i32 %3, -256, !insn.addr !2642
  %23 = udiv i32 %2, 256, !insn.addr !2642
  %24 = and i32 %23, 255, !insn.addr !2642
  %25 = or i32 %22, %24, !insn.addr !2642
  %26 = and i32 %2, -65281, !insn.addr !2642
  %27 = mul i32 %3, 256, !insn.addr !2642
  %28 = and i32 %27, 65280, !insn.addr !2642
  %29 = or i32 %28, %26, !insn.addr !2642
  %30 = inttoptr i32 %29 to i32*, !insn.addr !2643
  %31 = load i32, i32* %30, align 4, !insn.addr !2643
  %32 = and i32 %31, %25, !insn.addr !2643
  %33 = icmp eq i32 %32, 0, !insn.addr !2643
  %34 = icmp slt i32 %32, 0, !insn.addr !2643
  %35 = icmp eq i1 %34, false, !insn.addr !2644
  %36 = icmp eq i1 %33, false, !insn.addr !2644
  %37 = icmp eq i1 %35, %36, !insn.addr !2644
  store i1 %34, i1* %sf.0.reg2mem, !insn.addr !2644
  store i1 %33, i1* %zf.0.reg2mem, !insn.addr !2644
  br i1 %37, label %dec_label_pc_4063e2, label %dec_label_pc_4063d8, !insn.addr !2644

dec_label_pc_4063d8:                              ; preds = %dec_label_pc_4063d4
  br i1 %35, label %dec_label_pc_4063da, label %dec_label_pc_4063e0, !insn.addr !2645

dec_label_pc_4063da:                              ; preds = %dec_label_pc_4063d8
  %38 = icmp eq i32 %6, 0, !insn.addr !2646
  %39 = icmp slt i32 %6, 0, !insn.addr !2646
  store i1 %39, i1* %sf.0.reg2mem
  store i1 %38, i1* %zf.0.reg2mem
  br label %dec_label_pc_4063e2

dec_label_pc_4063e0:                              ; preds = %dec_label_pc_4063d8, %dec_label_pc_40639d
  %40 = call i32 @function_406407(), !insn.addr !2647
  ret i32 %40, !insn.addr !2647

dec_label_pc_4063e2:                              ; preds = %dec_label_pc_4063da, %dec_label_pc_4063d4
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  %sf.0.reload = load i1, i1* %sf.0.reg2mem
  %41 = add i32 %1, -3, !insn.addr !2648
  %42 = inttoptr i32 %41 to i32*, !insn.addr !2648
  store i32 0, i32* %42, align 4, !insn.addr !2648
  %43 = or i1 %sf.0.reload, %zf.0.reload, !insn.addr !2649
  br i1 %43, label %44, label %dec_label_pc_4063e6, !insn.addr !2649

; <label>:44:                                     ; preds = %dec_label_pc_4063e2
  %45 = call i32 @function_406426(), !insn.addr !2649
  br label %dec_label_pc_4063e6, !insn.addr !2649

dec_label_pc_4063e6:                              ; preds = %44, %dec_label_pc_4063e2
  %46 = call i32 @function_4063f7(), !insn.addr !2650
  ret i32 %46, !insn.addr !2650
}

define i32 @function_4063ec() local_unnamed_addr {
dec_label_pc_4063ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = load i8, i8* inttoptr (i32 1781399614 to i8*), align 2, !insn.addr !2651
  %3 = zext i8 %2 to i32, !insn.addr !2651
  %4 = and i32 %1, -256, !insn.addr !2651
  %5 = or i32 %4, %3, !insn.addr !2651
  %6 = add i32 %5, 64, !insn.addr !2652
  %7 = inttoptr i32 %6 to i8*, !insn.addr !2652
  %8 = load i8, i8* %7, align 1, !insn.addr !2652
  %9 = udiv i32 %0, 256, !insn.addr !2652
  %10 = trunc i32 %9 to i8, !insn.addr !2652
  %11 = add i8 %8, %10, !insn.addr !2652
  store i8 %11, i8* %7, align 1, !insn.addr !2652
  ret i32 %5, !insn.addr !2653
}

define i32 @function_406669() local_unnamed_addr {
dec_label_pc_406669:
  %0 = call i32 @function_40694f(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2654
  %1 = call i32 @function_40667d(), !insn.addr !2655
  ret i32 %1, !insn.addr !2655
}

define i32 @function_406674() local_unnamed_addr {
dec_label_pc_406674:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2656
}

define i32 @function_40667d() local_unnamed_addr {
dec_label_pc_40667d:
  %0 = call i32 @function_40668c(), !insn.addr !2657
  ret i32 %0, !insn.addr !2657
}

define i32 @function_406681() local_unnamed_addr {
dec_label_pc_406681:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -1658636446, !insn.addr !2658
  ret i32 %1, !insn.addr !2659
}

define i32 @function_40668c() local_unnamed_addr {
dec_label_pc_40668c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %7 = call i32 @function_40669f(i32 %0, i32 %1, i32 %2, i32* nonnull %stack_var_0, i32 %3, i32 %4, i32 %5, i32 %6), !insn.addr !2660
  ret i32 %7, !insn.addr !2660
}

define i32 @function_406692(i32 %arg1) local_unnamed_addr {
dec_label_pc_406692:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2661
}

define i32 @function_40669a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40669a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i16, !insn.addr !2662
  %4 = trunc i32 %0 to i8
  call void @__asm_outsb(i16 %3, i8 %4), !insn.addr !2662
  ret i32 %2, !insn.addr !2663
}

define i32 @function_40669f(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_40669f:
  %0 = call i32 @__readfsdword(i32 48), !insn.addr !2664
  %1 = call i32 @function_4066b5(), !insn.addr !2665
  ret i32 %1, !insn.addr !2665
}

define i32 @function_4066ab() local_unnamed_addr {
dec_label_pc_4066ab:
  %0 = call i32 @function_baf31e19(), !insn.addr !2666
  ret i32 %0, !insn.addr !2666
}

define i32 @function_4066b5() local_unnamed_addr {
dec_label_pc_4066b5:
  %0 = call i32 @function_4066cc(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2667
  ret i32 %0, !insn.addr !2667
}

define i32 @function_4066be(i32 %arg1) local_unnamed_addr {
dec_label_pc_4066be:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2668
}

define i32 @function_4066bf() local_unnamed_addr {
dec_label_pc_4066bf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %0, -65536, !insn.addr !2669
  %2 = or i32 %1, 146, !insn.addr !2670
  ret i32 %2, !insn.addr !2671
}

define i32 @function_4066cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_4066cc:
  %edi.1.reg2mem = alloca i32, !insn.addr !2672
  %esi.1.reg2mem = alloca i32, !insn.addr !2672
  %ecx.1.reg2mem = alloca i32, !insn.addr !2672
  %ecx.0.reg2mem = alloca i32, !insn.addr !2672
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = add i32 %1, 38, !insn.addr !2673
  %4 = inttoptr i32 %3 to i16*, !insn.addr !2673
  %5 = load i16, i16* %4, align 2, !insn.addr !2673
  %6 = zext i16 %5 to i32, !insn.addr !2673
  store i32 %6, i32* %ecx.0.reg2mem, !insn.addr !2674
  br label %dec_label_pc_4066d7, !insn.addr !2674

dec_label_pc_4066d7:                              ; preds = %dec_label_pc_4066d7, %dec_label_pc_4066cc
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %7 = add i32 %ecx.0.reload, -1, !insn.addr !2675
  %8 = icmp eq i32 %7, 0, !insn.addr !2675
  %9 = icmp eq i1 %8, false, !insn.addr !2676
  store i32 %7, i32* %ecx.0.reg2mem, !insn.addr !2676
  br i1 %9, label %dec_label_pc_4066d7, label %dec_label_pc_406735, !insn.addr !2676

dec_label_pc_406735:                              ; preds = %dec_label_pc_4066d7
  %10 = add i32 %1, 16, !insn.addr !2677
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2677
  %12 = load i32, i32* %11, align 4, !insn.addr !2677
  %13 = add i32 %12, 60, !insn.addr !2678
  %14 = inttoptr i32 %13 to i32*, !insn.addr !2678
  %15 = load i32, i32* %14, align 4, !insn.addr !2678
  %16 = add i32 %12, 120, !insn.addr !2679
  %17 = add i32 %16, %15, !insn.addr !2680
  %18 = inttoptr i32 %17 to i32*, !insn.addr !2680
  %19 = load i32, i32* %18, align 4, !insn.addr !2680
  %20 = icmp eq i32 %19, 0, !insn.addr !2681
  br i1 %20, label %dec_label_pc_406910, label %dec_label_pc_40676a, !insn.addr !2682

dec_label_pc_40676a:                              ; preds = %dec_label_pc_406735
  %21 = select i1 %2, i32 -1, i32 1, !insn.addr !2683
  %22 = add i32 %19, %12, !insn.addr !2684
  %23 = add i32 %22, 24, !insn.addr !2685
  %24 = inttoptr i32 %23 to i32*, !insn.addr !2685
  %25 = load i32, i32* %24, align 4, !insn.addr !2685
  %26 = add i32 %22, 32, !insn.addr !2686
  %27 = inttoptr i32 %26 to i32*, !insn.addr !2686
  %28 = load i32, i32* %27, align 4, !insn.addr !2686
  %29 = add i32 %28, %12, !insn.addr !2687
  %30 = add i32 %0, -8
  %31 = inttoptr i32 %30 to i32*
  %32 = add i32 %0, 36
  %33 = inttoptr i32 %32 to i32*
  store i32 %25, i32* %ecx.1.reg2mem, !insn.addr !2688
  br label %dec_label_pc_40679c, !insn.addr !2688

dec_label_pc_40679c:                              ; preds = %dec_label_pc_406810, %dec_label_pc_40676a
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %34 = icmp eq i32 %ecx.1.reload, 0, !insn.addr !2689
  br i1 %34, label %dec_label_pc_406910, label %dec_label_pc_4067a5, !insn.addr !2690

dec_label_pc_4067a5:                              ; preds = %dec_label_pc_40679c
  %35 = add i32 %ecx.1.reload, -1, !insn.addr !2691
  %36 = mul i32 %35, 4, !insn.addr !2692
  %37 = add i32 %29, %36, !insn.addr !2692
  %38 = inttoptr i32 %37 to i32*, !insn.addr !2692
  %39 = load i32, i32* %38, align 4, !insn.addr !2692
  %40 = add i32 %39, %12, !insn.addr !2693
  store i32 %40, i32* %esi.1.reg2mem, !insn.addr !2694
  store i32 0, i32* %edi.1.reg2mem, !insn.addr !2694
  br label %dec_label_pc_4067be, !insn.addr !2694

dec_label_pc_4067be:                              ; preds = %dec_label_pc_4067be, %dec_label_pc_4067a5
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %41 = inttoptr i32 %esi.1.reload to i8*, !insn.addr !2695
  %42 = load i8, i8* %41, align 1, !insn.addr !2695
  %43 = zext i8 %42 to i32, !insn.addr !2695
  %44 = add i32 %esi.1.reload, %21, !insn.addr !2695
  %45 = udiv i32 %edi.1.reload, 8192, !insn.addr !2696
  %46 = mul i32 %edi.1.reload, 524288, !insn.addr !2696
  %47 = or i32 %45, %46, !insn.addr !2696
  %48 = add i32 %47, %43, !insn.addr !2697
  %49 = icmp eq i8 %42, 0, !insn.addr !2698
  %50 = icmp eq i1 %49, false, !insn.addr !2699
  store i32 %44, i32* %esi.1.reg2mem, !insn.addr !2699
  store i32 %48, i32* %edi.1.reg2mem, !insn.addr !2699
  br i1 %50, label %dec_label_pc_4067be, label %dec_label_pc_406810, !insn.addr !2699

dec_label_pc_406810:                              ; preds = %dec_label_pc_4067be
  %51 = load i32, i32* %31, align 4, !insn.addr !2700
  %52 = add i32 %51, %48, !insn.addr !2700
  %53 = load i32, i32* %33, align 4, !insn.addr !2701
  %54 = icmp eq i32 %52, %53, !insn.addr !2701
  %55 = icmp eq i1 %54, false, !insn.addr !2702
  store i32 %35, i32* %ecx.1.reg2mem, !insn.addr !2702
  br i1 %55, label %dec_label_pc_40679c, label %dec_label_pc_40683f, !insn.addr !2702

dec_label_pc_40683f:                              ; preds = %dec_label_pc_406810
  %56 = add i32 %22, 36, !insn.addr !2703
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2703
  %58 = load i32, i32* %57, align 4, !insn.addr !2703
  %59 = mul i32 %35, 2, !insn.addr !2704
  %60 = add i32 %59, %12, !insn.addr !2705
  %61 = add i32 %60, %58, !insn.addr !2704
  %62 = inttoptr i32 %61 to i16*, !insn.addr !2704
  %63 = load i16, i16* %62, align 2, !insn.addr !2704
  %64 = zext i16 %63 to i32, !insn.addr !2704
  %65 = and i32 %35, 1073676288, !insn.addr !2704
  %66 = or i32 %65, %64, !insn.addr !2704
  %67 = add i32 %22, 28, !insn.addr !2706
  %68 = inttoptr i32 %67 to i32*, !insn.addr !2706
  %69 = load i32, i32* %68, align 4, !insn.addr !2706
  %70 = add i32 %69, %12, !insn.addr !2707
  %71 = mul i32 %66, 4, !insn.addr !2708
  %72 = add i32 %70, %71, !insn.addr !2708
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2708
  %74 = load i32, i32* %73, align 4, !insn.addr !2708
  %75 = add i32 %74, %12, !insn.addr !2709
  ret i32 %75, !insn.addr !2710

dec_label_pc_406910:                              ; preds = %dec_label_pc_40679c, %dec_label_pc_406735
  %76 = call i32 @function_406921(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2711
  ret i32 %76, !insn.addr !2711
}

define i32 @function_406915() local_unnamed_addr {
dec_label_pc_406915:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -949119386, !insn.addr !2712
  %2 = inttoptr i32 %1 to i8*, !insn.addr !2712
  %3 = load i8, i8* %2, align 1, !insn.addr !2712
  %4 = sub i8 0, %3, !insn.addr !2712
  store i8 %4, i8* %2, align 1, !insn.addr !2712
  %5 = call i32 @__asm_sti(), !insn.addr !2713
  ret i32 %5, !insn.addr !2713
}

define i32 @function_406921(i32 %arg1) local_unnamed_addr {
dec_label_pc_406921:
  %0 = call i32 @function_406933(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2714
  ret i32 %0, !insn.addr !2714
}

define i32 @function_406927() local_unnamed_addr {
dec_label_pc_406927:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = udiv i32 %2, 256, !insn.addr !2715
  %5 = trunc i32 %4 to i8, !insn.addr !2715
  %6 = add i32 %1, 78, !insn.addr !2715
  %7 = inttoptr i32 %6 to i8*, !insn.addr !2715
  store i8 %5, i8* %7, align 1, !insn.addr !2715
  call void @__asm_into(i32 %3), !insn.addr !2716
  ret i32 %0, !insn.addr !2716
}

define i32 @function_406933(i32 %arg1) local_unnamed_addr {
dec_label_pc_406933:
  %0 = call i32 @function_40694a(), !insn.addr !2717
  ret i32 %0, !insn.addr !2717
}

define i32 @function_406941() local_unnamed_addr {
dec_label_pc_406941:
  %.reg2mem3 = alloca i8, !insn.addr !2718
  %.reg2mem = alloca i32, !insn.addr !2718
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = and i32 %3, 31, !insn.addr !2718
  %7 = icmp eq i32 %6, 0, !insn.addr !2718
  br i1 %7, label %dec_label_pc_406941._crit_edge, label %9, !insn.addr !2718

dec_label_pc_406941._crit_edge:                   ; preds = %dec_label_pc_406941
  %8 = trunc i32 %1 to i8
  store i8 %8, i8* %.reg2mem3
  br label %14

; <label>:9:                                      ; preds = %dec_label_pc_406941
  %10 = add i32 %2, -1217810799, !insn.addr !2718
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2718
  %12 = load i32, i32* %11, align 4, !insn.addr !2718
  %13 = ashr i32 %12, %6, !insn.addr !2718
  store i32 %13, i32* %11, align 4, !insn.addr !2718
  %.phi.trans.insert = bitcast i32* %esi to i8*
  %.pre = load i8, i8* %.phi.trans.insert, align 4
  %.pre1 = load i32, i32* %esi, align 4
  store i32 %.pre1, i32* %.reg2mem, !insn.addr !2718
  store i8 %.pre, i8* %.reg2mem3, !insn.addr !2718
  br label %14, !insn.addr !2718

; <label>:14:                                     ; preds = %dec_label_pc_406941._crit_edge, %9
  %.reload4 = load i8, i8* %.reg2mem3, !insn.addr !2719
  %.reload = load i32, i32* %.reg2mem, !insn.addr !2719
  %15 = zext i8 %.reload4 to i32, !insn.addr !2719
  %16 = and i32 %4, -256, !insn.addr !2719
  %17 = or i32 %16, %15, !insn.addr !2719
  %18 = select i1 %5, i32 -1, i32 1, !insn.addr !2719
  %19 = add i32 %.reload, %18, !insn.addr !2719
  %20 = inttoptr i32 %19 to i32*, !insn.addr !2720
  %21 = load i32, i32* %20, align 4, !insn.addr !2720
  %22 = inttoptr i32 %0 to i32*, !insn.addr !2720
  store i32 %21, i32* %22, align 4, !insn.addr !2720
  %23 = trunc i32 %2 to i16, !insn.addr !2721
  call void @__asm_out.6(i16 %23, i8 %.reload4), !insn.addr !2721
  ret i32 %17, !insn.addr !2721
}

define i32 @function_40694a() local_unnamed_addr {
dec_label_pc_40694a:
  %0 = call i32 @function_4066cc(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2722
  ret i32 %0, !insn.addr !2722
}

define i32 @function_40694f(i32 %arg1) local_unnamed_addr {
dec_label_pc_40694f:
  %0 = call i32 @function_406961(), !insn.addr !2723
  ret i32 %0, !insn.addr !2723
}

define i32 @function_406958(i32 %arg1) local_unnamed_addr {
dec_label_pc_406958:
  %0 = call i32 @unknown_b45eaee3(), !insn.addr !2724
  ret i32 %0, !insn.addr !2725
}

define i32 @function_406961() local_unnamed_addr {
dec_label_pc_406961:
  %0 = call i32 @function_40697c(i32 64), !insn.addr !2726
  ret i32 %0, !insn.addr !2726
}

define i32 @function_40696e() local_unnamed_addr {
dec_label_pc_40696e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = trunc i32 %1 to i8, !insn.addr !2727
  %5 = and i8 %4, 31, !insn.addr !2727
  %6 = icmp eq i8 %5, 0, !insn.addr !2727
  br i1 %6, label %24, label %7, !insn.addr !2727

; <label>:7:                                      ; preds = %dec_label_pc_40696e
  %8 = mul i32 %2, 4, !insn.addr !2727
  %9 = add i32 %0, -836947403, !insn.addr !2727
  %10 = add i32 %9, %8, !insn.addr !2727
  %11 = inttoptr i32 %10 to i8*, !insn.addr !2727
  %12 = load i8, i8* %11, align 1, !insn.addr !2727
  %13 = zext i1 %3 to i8, !insn.addr !2727
  %14 = shl i8 %12, %5, !insn.addr !2727
  %15 = zext i8 %12 to i16, !insn.addr !2727
  %16 = sub nsw i8 9, %5, !insn.addr !2727
  %17 = zext i8 %16 to i16, !insn.addr !2727
  %18 = lshr i16 %15, %17, !insn.addr !2727
  %19 = add nsw i8 %5, -1, !insn.addr !2727
  %20 = shl i8 %13, %19, !insn.addr !2727
  %21 = trunc i16 %18 to i8
  %22 = or i8 %20, %14
  %23 = or i8 %22, %21, !insn.addr !2727
  store i8 %23, i8* %11, align 1, !insn.addr !2727
  br label %24, !insn.addr !2727

; <label>:24:                                     ; preds = %dec_label_pc_40696e, %7
  %25 = udiv i32 %2, 256, !insn.addr !2728
  %26 = mul nuw i32 %25, 133, !insn.addr !2728
  %27 = add i32 %26, %2, !insn.addr !2728
  %28 = and i32 %27, 255, !insn.addr !2728
  %29 = and i32 %2, -65536, !insn.addr !2728
  %30 = or i32 %28, %29, !insn.addr !2728
  call void @__asm_out.1(i32 125, i32 %30), !insn.addr !2729
  ret i32 %30, !insn.addr !2729
}

define i32 @function_40697c(i32 %arg1) local_unnamed_addr {
dec_label_pc_40697c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_406999(i32 -447503272, i32 0, i32 %0, i32 4096), !insn.addr !2730
  ret i32 %1, !insn.addr !2730
}

define i32 @function_40698f(i32 %arg1) local_unnamed_addr {
dec_label_pc_40698f:
  %storemerge.reg2mem = alloca i32, !insn.addr !2731
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = trunc i32 %0 to i8, !insn.addr !2731
  %4 = and i8 %3, 14, !insn.addr !2731
  %5 = icmp ugt i8 %4, 9, !insn.addr !2731
  %6 = or i1 %1, %5, !insn.addr !2731
  %7 = icmp ugt i8 %3, -103
  %8 = or i1 %7, %2
  br i1 %6, label %9, label %14, !insn.addr !2731

; <label>:9:                                      ; preds = %dec_label_pc_40698f
  %.v = select i1 %8, i32 154, i32 250
  %10 = add i32 %.v, %0, !insn.addr !2731
  %11 = and i32 %10, 255, !insn.addr !2731
  %12 = and i32 %0, -256, !insn.addr !2731
  %13 = or i32 %11, %12, !insn.addr !2731
  store i32 %13, i32* %storemerge.reg2mem, !insn.addr !2731
  br label %20, !insn.addr !2731

; <label>:14:                                     ; preds = %dec_label_pc_40698f
  %15 = add i32 %0, 160, !insn.addr !2731
  %16 = select i1 %8, i32 %15, i32 %0, !insn.addr !2731
  %17 = and i32 %16, 255, !insn.addr !2731
  %18 = and i32 %0, -256, !insn.addr !2731
  %19 = or i32 %17, %18, !insn.addr !2731
  store i32 %19, i32* %storemerge.reg2mem, !insn.addr !2731
  br label %20, !insn.addr !2731

; <label>:20:                                     ; preds = %9, %14
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !2732
}

define i32 @function_406999(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_406999:
  %0 = call i32 @function_4069ab(), !insn.addr !2733
  ret i32 %0, !insn.addr !2733
}

define i32 @function_4069a1(i16 %arg1) local_unnamed_addr {
dec_label_pc_4069a1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 204, !insn.addr !2734
  %2 = and i32 %1, 255, !insn.addr !2734
  %3 = and i32 %0, -256, !insn.addr !2734
  %4 = or i32 %2, %3, !insn.addr !2734
  ret i32 %4, !insn.addr !2735
}

define i32 @function_4069ab() local_unnamed_addr {
dec_label_pc_4069ab:
  %0 = call i32 @function_4069bb(), !insn.addr !2736
  ret i32 %0, !insn.addr !2736
}

define i32 @function_4069b6() local_unnamed_addr {
dec_label_pc_4069b6:
  %0 = call i32 @function_aee24374(), !insn.addr !2737
  ret i32 %0, !insn.addr !2737
}

define i32 @function_4069bb() local_unnamed_addr {
dec_label_pc_4069bb:
  %0 = call i32 @function_4069d2(), !insn.addr !2738
  ret i32 %0, !insn.addr !2738
}

define i32 @function_4069c5() local_unnamed_addr {
dec_label_pc_4069c5:
  %storemerge.reg2mem = alloca i32, !insn.addr !2739
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = zext i1 %5 to i32, !insn.addr !2740
  %7 = zext i1 %4 to i32, !insn.addr !2740
  %8 = zext i1 %3 to i32, !insn.addr !2740
  %9 = zext i1 %2 to i32, !insn.addr !2740
  %10 = zext i1 %1 to i32, !insn.addr !2740
  %11 = mul i32 %7, 4, !insn.addr !2740
  %12 = mul i32 %8, 16, !insn.addr !2740
  %13 = mul i32 %9, 64, !insn.addr !2740
  %14 = mul i32 %10, 128, !insn.addr !2740
  %15 = or i32 %13, %14, !insn.addr !2740
  %16 = or i32 %15, %12, !insn.addr !2740
  %17 = or i32 %16, %6, !insn.addr !2740
  %18 = or i32 %17, %11, !insn.addr !2740
  %19 = mul i32 %18, 256, !insn.addr !2740
  %20 = and i32 %0, -65281, !insn.addr !2740
  %21 = or i32 %20, %19, !insn.addr !2740
  %22 = or i32 %21, 512, !insn.addr !2740
  %23 = trunc i32 %0 to i8, !insn.addr !2741
  %24 = and i8 %23, 14, !insn.addr !2741
  %25 = icmp ugt i8 %24, 9, !insn.addr !2741
  %26 = or i1 %25, %3, !insn.addr !2741
  %27 = icmp ugt i8 %23, -103
  %28 = or i1 %27, %5
  br i1 %26, label %29, label %34, !insn.addr !2741

; <label>:29:                                     ; preds = %dec_label_pc_4069c5
  %.v = select i1 %28, i32 102, i32 6
  %30 = add i32 %.v, %0, !insn.addr !2741
  %31 = and i32 %30, 255, !insn.addr !2741
  %32 = and i32 %22, -256, !insn.addr !2741
  %33 = or i32 %32, %31, !insn.addr !2741
  store i32 %33, i32* %storemerge.reg2mem, !insn.addr !2741
  br label %40, !insn.addr !2741

; <label>:34:                                     ; preds = %dec_label_pc_4069c5
  %35 = add i32 %0, 96, !insn.addr !2741
  %36 = select i1 %28, i32 %35, i32 %0, !insn.addr !2741
  %37 = and i32 %36, 255, !insn.addr !2741
  %38 = and i32 %22, -256, !insn.addr !2741
  %39 = or i32 %38, %37, !insn.addr !2741
  store i32 %39, i32* %storemerge.reg2mem, !insn.addr !2741
  br label %40, !insn.addr !2741

; <label>:40:                                     ; preds = %29, %34
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !2742
}

define i32 @function_4069d2() local_unnamed_addr {
dec_label_pc_4069d2:
  %0 = call i32 @function_406ad2(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2743
  %1 = call i32 @function_4069e6(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2744
  ret i32 %1, !insn.addr !2744
}

define i32 @function_4069dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_4069dc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = add i32 %0, -664414963, !insn.addr !2745
  %3 = inttoptr i32 %2 to i8*, !insn.addr !2745
  %4 = load i8, i8* %3, align 1, !insn.addr !2745
  %5 = zext i1 %1 to i8, !insn.addr !2745
  %6 = udiv i8 %4, 2, !insn.addr !2745
  %7 = shl nuw i8 %5, 7, !insn.addr !2745
  %8 = or i8 %7, %6, !insn.addr !2745
  store i8 %8, i8* %3, align 1, !insn.addr !2745
  ret i32 %0, !insn.addr !2746
}

define i32 @function_4069e6(i32 %arg1) local_unnamed_addr {
dec_label_pc_4069e6:
  %0 = call i32 @function_4069fa(), !insn.addr !2747
  ret i32 %0, !insn.addr !2747
}

define i32 @function_4069ed() local_unnamed_addr {
dec_label_pc_4069ed:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = icmp eq i1 %1, false, !insn.addr !2748
  br i1 %2, label %3, label %dec_label_pc_4069ef, !insn.addr !2748

; <label>:3:                                      ; preds = %dec_label_pc_4069ed
  %4 = call i32 @function_406a51(), !insn.addr !2748
  br label %dec_label_pc_4069ef, !insn.addr !2748

dec_label_pc_4069ef:                              ; preds = %3, %dec_label_pc_4069ed
  %5 = call i32 @function_d31fcc79(i32 %0), !insn.addr !2749
  ret i32 %5, !insn.addr !2749
}

define i32 @function_4069fa() local_unnamed_addr {
dec_label_pc_4069fa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i8
  %3 = inttoptr i32 %0 to i8*, !insn.addr !2750
  store i8 %2, i8* %3, align 1, !insn.addr !2750
  %4 = call i32 @function_406a0e(), !insn.addr !2751
  ret i32 %4, !insn.addr !2751
}

define i32 @function_406a02() local_unnamed_addr {
dec_label_pc_406a02:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = zext i1 %10 to i32, !insn.addr !2752
  %12 = zext i1 %9 to i32, !insn.addr !2752
  %13 = mul i32 %12, 4, !insn.addr !2752
  %14 = zext i1 %8 to i32, !insn.addr !2752
  %15 = mul i32 %14, 16, !insn.addr !2752
  %16 = zext i1 %7 to i32, !insn.addr !2752
  %17 = mul i32 %16, 64, !insn.addr !2752
  %18 = zext i1 %6 to i32, !insn.addr !2752
  %19 = mul i32 %18, 128, !insn.addr !2752
  %20 = zext i1 %5 to i32, !insn.addr !2752
  %21 = mul i32 %20, 256, !insn.addr !2752
  %22 = zext i1 %4 to i32, !insn.addr !2752
  %23 = mul i32 %22, 512, !insn.addr !2752
  %24 = zext i1 %3 to i32, !insn.addr !2752
  %25 = mul i32 %24, 1024, !insn.addr !2752
  %26 = zext i1 %2 to i32, !insn.addr !2752
  %27 = mul i32 %26, 2048, !insn.addr !2752
  %28 = zext i1 %1 to i32, !insn.addr !2752
  %29 = mul i32 %28, 16384, !insn.addr !2752
  %30 = or i32 %29, %27, !insn.addr !2752
  %31 = or i32 %30, %25, !insn.addr !2752
  %32 = or i32 %31, %23, !insn.addr !2752
  %33 = or i32 %32, %21, !insn.addr !2752
  %34 = or i32 %33, %19, !insn.addr !2752
  %35 = or i32 %34, %17, !insn.addr !2752
  %36 = or i32 %35, %15, !insn.addr !2752
  %37 = or i32 %36, %11, !insn.addr !2752
  %38 = or i32 %37, %13, !insn.addr !2752
  %39 = or i32 %38, 2, !insn.addr !2752
  %40 = call i32 @function_a06c1b31(i32 %39, i32 %0), !insn.addr !2753
  ret i32 %40, !insn.addr !2753
}

define i32 @function_406a0e() local_unnamed_addr {
dec_label_pc_406a0e:
  %0 = call i32 @__readfsdword(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2754
  %1 = call i32 @function_406a28(), !insn.addr !2755
  ret i32 %1, !insn.addr !2755
}

define i32 @function_406a1a() local_unnamed_addr {
dec_label_pc_406a1a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = and i32 %0, -256, !insn.addr !2756
  %3 = or i32 %2, 226, !insn.addr !2756
  %4 = add i32 %3, -210952405, !insn.addr !2757
  %5 = inttoptr i32 %4 to i8*, !insn.addr !2757
  %6 = load i8, i8* %5, align 1, !insn.addr !2757
  %7 = trunc i32 %1 to i16, !insn.addr !2757
  %8 = zext i8 %6 to i16, !insn.addr !2757
  %9 = sdiv i16 %7, %8, !insn.addr !2757
  %10 = and i32 %1, -65536, !insn.addr !2757
  %11 = srem i16 %7, %8, !insn.addr !2757
  %12 = mul i16 %11, 256
  %13 = zext i16 %12 to i32, !insn.addr !2757
  %14 = and i16 %9, 255
  %.masked = zext i16 %14 to i32
  %15 = or i32 %10, %.masked, !insn.addr !2757
  %16 = or i32 %15, %13, !insn.addr !2757
  ret i32 %16, !insn.addr !2757
}

define i32 @function_406a28() local_unnamed_addr {
dec_label_pc_406a28:
  %0 = call i32 @function_406a52(), !insn.addr !2758
  ret i32 %0, !insn.addr !2758
}

define i32 @function_406a4b(i32 %arg1) local_unnamed_addr {
dec_label_pc_406a4b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2759
}

define i32 @function_406a51() local_unnamed_addr {
dec_label_pc_406a51:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_406a52() local_unnamed_addr {
dec_label_pc_406a52:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2760
}

define i32 @function_406a95(i32 %Offset) local_unnamed_addr {
dec_label_pc_406a95:
  %0 = call i32 @__readfsdword(i32 %Offset), !insn.addr !2761
  call void @__writefsdword(i32 %0, i32 ptrtoint (i32* @0 to i32)), !insn.addr !2762
  ret i32 ptrtoint (i32* @0 to i32), !insn.addr !2762
}

define i32 @function_406aa0(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_406aa0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__asm_wait(), !insn.addr !2763
  %5 = trunc i32 %2 to i16, !insn.addr !2764
  %6 = call i32 @__asm_insd(i16 %5), !insn.addr !2764
  %7 = inttoptr i32 %0 to i32*, !insn.addr !2764
  store i32 %6, i32* %7, align 4, !insn.addr !2764
  %8 = icmp eq i32 %3, 0, !insn.addr !2765
  br label %dec_label_pc_406aa3, !insn.addr !2764

dec_label_pc_406aa3:                              ; preds = %dec_label_pc_406aa3, %dec_label_pc_406aa0
  br i1 %8, label %dec_label_pc_406aa3, label %dec_label_pc_406aa5, !insn.addr !2765

dec_label_pc_406aa5:                              ; preds = %dec_label_pc_406aa3
  %9 = add i32 %1, -20, !insn.addr !2766
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2766
  %11 = load i8, i8* %10, align 1, !insn.addr !2766
  %12 = and i8 %11, 121, !insn.addr !2766
  store i8 %12, i8* %10, align 1, !insn.addr !2766
  %13 = call i32 @__asm_in(i16 %5), !insn.addr !2767
  ret i32 %13, !insn.addr !2767
}

define void @function_406aab(i32 %Offset, i32 %Data) local_unnamed_addr {
dec_label_pc_406aab:
  call void @__writefsdword(i32 %Offset, i32 %Data), !insn.addr !2768
  %0 = call i32 @function_406abc(), !insn.addr !2769
  ret void, !insn.addr !2769
}

define i32 @function_406ab7() local_unnamed_addr {
dec_label_pc_406ab7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2770
}

define i32 @function_406abc() local_unnamed_addr {
dec_label_pc_406abc:
  %0 = call i32 @function_406acd(), !insn.addr !2771
  ret i32 %0, !insn.addr !2771
}

define i32 @function_406ac5() local_unnamed_addr {
dec_label_pc_406ac5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 140, !insn.addr !2772
  %2 = and i32 %1, 255, !insn.addr !2772
  %3 = and i32 %0, -256, !insn.addr !2772
  %4 = or i32 %2, %3, !insn.addr !2772
  ret i32 %4, !insn.addr !2772
}

define i32 @function_406acd() local_unnamed_addr {
dec_label_pc_406acd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2773
}

define i32 @function_406ad2(i32 %arg1) local_unnamed_addr {
dec_label_pc_406ad2:
  %eax.5.reg2mem = alloca i32, !insn.addr !2774
  %edi.1.reg2mem = alloca i32, !insn.addr !2774
  %esi.1.reg2mem = alloca i32, !insn.addr !2774
  %eax.4.reg2mem = alloca i32, !insn.addr !2774
  %ecx.1.reg2mem = alloca i32, !insn.addr !2774
  %eax.3.reg2mem = alloca i32, !insn.addr !2774
  %edi.0.reg2mem = alloca i32, !insn.addr !2774
  %esi.0.reg2mem = alloca i32, !insn.addr !2774
  %ecx.0.reg2mem = alloca i32, !insn.addr !2774
  %eax.1.reg2mem = alloca i32, !insn.addr !2774
  %storemerge.in.in.reg2mem = alloca i32, !insn.addr !2774
  %eax.0.reg2mem = alloca i32, !insn.addr !2774
  %0 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %1 = call i32 @function_406b5f(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2775
  %2 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !2776
  %3 = call i32 @__readfsdword(i32 48), !insn.addr !2777
  %4 = add i32 %3, 12, !insn.addr !2778
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2778
  %6 = load i32, i32* %5, align 4, !insn.addr !2778
  %7 = add i32 %6, 20, !insn.addr !2779
  %8 = add i32 %2, -4
  %9 = inttoptr i32 %8 to i32*
  %10 = add i32 %2, -8, !insn.addr !2780
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2780
  %12 = add i32 %2, -12
  %13 = inttoptr i32 %12 to i32*
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !2779
  store i32 %7, i32* %storemerge.in.in.reg2mem, !insn.addr !2779
  br label %dec_label_pc_406aec, !insn.addr !2779

dec_label_pc_406aec:                              ; preds = %dec_label_pc_406b59, %dec_label_pc_406ad2
  %storemerge.in.in.reload = load i32, i32* %storemerge.in.in.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %storemerge.in = inttoptr i32 %storemerge.in.in.reload to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %14 = add i32 %storemerge, 40, !insn.addr !2781
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2781
  %16 = load i32, i32* %15, align 4, !insn.addr !2781
  %17 = add i32 %storemerge, 38, !insn.addr !2782
  %18 = inttoptr i32 %17 to i16*, !insn.addr !2782
  %19 = load i16, i16* %18, align 2, !insn.addr !2782
  %20 = zext i16 %19 to i32, !insn.addr !2782
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !2783
  store i32 %20, i32* %ecx.0.reg2mem, !insn.addr !2783
  store i32 %16, i32* %esi.0.reg2mem, !insn.addr !2783
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !2783
  br label %dec_label_pc_406af5, !insn.addr !2783

dec_label_pc_406af5:                              ; preds = %dec_label_pc_406af5, %dec_label_pc_406aec
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %21 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !2784
  %22 = load i8, i8* %21, align 1, !insn.addr !2784
  %23 = and i32 %eax.1.reload, -256, !insn.addr !2784
  %24 = add i32 %esi.0.reload, 1, !insn.addr !2784
  %25 = icmp slt i8 %22, 97, !insn.addr !2785
  %26 = add i8 %22, -32
  %spec.select = select i1 %25, i8 %22, i8 %26
  %.pn = zext i8 %spec.select to i32
  %eax.2 = or i32 %23, %.pn
  %27 = udiv i32 %edi.0.reload, 8192, !insn.addr !2786
  %28 = mul i32 %edi.0.reload, 524288, !insn.addr !2786
  %29 = or i32 %27, %28, !insn.addr !2786
  %30 = add i32 %eax.2, %29, !insn.addr !2787
  %31 = add i32 %ecx.0.reload, -1, !insn.addr !2788
  %32 = icmp eq i32 %31, 0, !insn.addr !2788
  store i32 %eax.2, i32* %eax.1.reg2mem, !insn.addr !2788
  store i32 %31, i32* %ecx.0.reg2mem, !insn.addr !2788
  store i32 %24, i32* %esi.0.reg2mem, !insn.addr !2788
  store i32 %30, i32* %edi.0.reg2mem, !insn.addr !2788
  br i1 %32, label %dec_label_pc_406b03, label %dec_label_pc_406af5, !insn.addr !2788

dec_label_pc_406b03:                              ; preds = %dec_label_pc_406af5
  store i32 %storemerge, i32* %9, align 4, !insn.addr !2789
  store i32 %30, i32* %11, align 4, !insn.addr !2780
  %33 = add i32 %storemerge, 16, !insn.addr !2790
  %34 = inttoptr i32 %33 to i32*, !insn.addr !2790
  %35 = load i32, i32* %34, align 4, !insn.addr !2790
  %36 = add i32 %35, 60, !insn.addr !2791
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2791
  %38 = load i32, i32* %37, align 4, !insn.addr !2791
  %39 = add i32 %35, 120, !insn.addr !2792
  %40 = add i32 %39, %38, !insn.addr !2792
  %41 = inttoptr i32 %40 to i32*, !insn.addr !2792
  %42 = load i32, i32* %41, align 4, !insn.addr !2792
  %43 = icmp eq i32 %42, 0, !insn.addr !2793
  store i32 %eax.2, i32* %eax.5.reg2mem, !insn.addr !2793
  br i1 %43, label %dec_label_pc_406b59, label %dec_label_pc_406b11, !insn.addr !2793

dec_label_pc_406b11:                              ; preds = %dec_label_pc_406b03
  %44 = add i32 %42, %35, !insn.addr !2794
  store i32 %44, i32* %13, align 4, !insn.addr !2795
  %45 = add i32 %44, 32, !insn.addr !2796
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2796
  %47 = load i32, i32* %46, align 4, !insn.addr !2796
  %48 = add i32 %47, %35, !insn.addr !2797
  %49 = add i32 %44, 24, !insn.addr !2798
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2798
  %51 = load i32, i32* %50, align 4, !insn.addr !2798
  store i32 %eax.2, i32* %eax.3.reg2mem, !insn.addr !2798
  store i32 %51, i32* %ecx.1.reg2mem, !insn.addr !2798
  br label %dec_label_pc_406b1c, !insn.addr !2798

dec_label_pc_406b1c:                              ; preds = %dec_label_pc_406b30, %dec_label_pc_406b11
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.3.reload = load i32, i32* %eax.3.reg2mem
  %52 = icmp eq i32 %ecx.1.reload, 0, !insn.addr !2799
  store i32 %eax.3.reload, i32* %eax.5.reg2mem, !insn.addr !2799
  br i1 %52, label %dec_label_pc_406b59, label %dec_label_pc_406b1e, !insn.addr !2799

dec_label_pc_406b1e:                              ; preds = %dec_label_pc_406b1c
  %53 = add i32 %ecx.1.reload, -1, !insn.addr !2800
  %54 = mul i32 %53, 4, !insn.addr !2801
  %55 = add i32 %48, %54, !insn.addr !2801
  %56 = inttoptr i32 %55 to i32*, !insn.addr !2801
  %57 = load i32, i32* %56, align 4, !insn.addr !2801
  %58 = add i32 %57, %35, !insn.addr !2802
  store i32 %eax.3.reload, i32* %eax.4.reg2mem, !insn.addr !2803
  store i32 %58, i32* %esi.1.reg2mem, !insn.addr !2803
  store i32 0, i32* %edi.1.reg2mem, !insn.addr !2803
  br label %dec_label_pc_406b26, !insn.addr !2803

dec_label_pc_406b26:                              ; preds = %dec_label_pc_406b26, %dec_label_pc_406b1e
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %eax.4.reload = load i32, i32* %eax.4.reg2mem
  %59 = inttoptr i32 %esi.1.reload to i8*, !insn.addr !2804
  %60 = load i8, i8* %59, align 1, !insn.addr !2804
  %61 = zext i8 %60 to i32, !insn.addr !2804
  %62 = and i32 %eax.4.reload, -256, !insn.addr !2804
  %63 = or i32 %62, %61, !insn.addr !2804
  %64 = add i32 %esi.1.reload, 1, !insn.addr !2804
  %65 = udiv i32 %edi.1.reload, 8192, !insn.addr !2805
  %66 = mul i32 %edi.1.reload, 524288, !insn.addr !2805
  %67 = or i32 %65, %66, !insn.addr !2805
  %68 = add i32 %63, %67, !insn.addr !2806
  %69 = udiv i32 %eax.4.reload, 256, !insn.addr !2807
  %70 = trunc i32 %69 to i8, !insn.addr !2807
  %71 = icmp eq i8 %60, %70, !insn.addr !2807
  %72 = icmp eq i1 %71, false, !insn.addr !2808
  store i32 %63, i32* %eax.4.reg2mem, !insn.addr !2808
  store i32 %64, i32* %esi.1.reg2mem, !insn.addr !2808
  store i32 %68, i32* %edi.1.reg2mem, !insn.addr !2808
  br i1 %72, label %dec_label_pc_406b26, label %dec_label_pc_406b30, !insn.addr !2808

dec_label_pc_406b30:                              ; preds = %dec_label_pc_406b26
  %73 = add i32 %68, %0, !insn.addr !2809
  %74 = icmp eq i32 %73, %arg1, !insn.addr !2810
  %75 = icmp eq i1 %74, false, !insn.addr !2811
  store i32 %63, i32* %eax.3.reg2mem, !insn.addr !2811
  store i32 %53, i32* %ecx.1.reg2mem, !insn.addr !2811
  br i1 %75, label %dec_label_pc_406b1c, label %dec_label_pc_406b38, !insn.addr !2811

dec_label_pc_406b38:                              ; preds = %dec_label_pc_406b30
  %76 = add i32 %44, 36, !insn.addr !2812
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2812
  %78 = load i32, i32* %77, align 4, !insn.addr !2812
  %79 = mul i32 %53, 2, !insn.addr !2813
  %80 = add i32 %79, %35, !insn.addr !2814
  %81 = add i32 %80, %78, !insn.addr !2813
  %82 = inttoptr i32 %81 to i16*, !insn.addr !2813
  %83 = load i16, i16* %82, align 2, !insn.addr !2813
  %84 = zext i16 %83 to i32, !insn.addr !2813
  %85 = and i32 %53, 1073676288, !insn.addr !2813
  %86 = or i32 %85, %84, !insn.addr !2813
  %87 = add i32 %44, 28, !insn.addr !2815
  %88 = inttoptr i32 %87 to i32*, !insn.addr !2815
  %89 = load i32, i32* %88, align 4, !insn.addr !2815
  %90 = add i32 %89, %35, !insn.addr !2816
  %91 = mul i32 %86, 4, !insn.addr !2817
  %92 = add i32 %90, %91, !insn.addr !2817
  %93 = inttoptr i32 %92 to i32*, !insn.addr !2817
  %94 = load i32, i32* %93, align 4, !insn.addr !2817
  %95 = add i32 %94, %35, !insn.addr !2818
  %96 = add i32 %2, 28, !insn.addr !2819
  %97 = inttoptr i32 %96 to i32*, !insn.addr !2819
  store i32 %95, i32* %97, align 4, !insn.addr !2819
  %98 = add i32 %2, 32, !insn.addr !2820
  %99 = inttoptr i32 %98 to i32*, !insn.addr !2821
  %100 = load i32, i32* %99, align 4, !insn.addr !2821
  %101 = add i32 %2, 36, !insn.addr !2822
  %102 = inttoptr i32 %101 to i32*, !insn.addr !2822
  store i32 %100, i32* %102, align 4, !insn.addr !2822
  ret i32 %95, !insn.addr !2823

dec_label_pc_406b59:                              ; preds = %dec_label_pc_406b1c, %dec_label_pc_406b03
  %eax.5.reload = load i32, i32* %eax.5.reg2mem
  %103 = load i32, i32* %9, align 4, !insn.addr !2824
  store i32 %eax.5.reload, i32* %eax.0.reg2mem, !insn.addr !2825
  store i32 %103, i32* %storemerge.in.in.reg2mem, !insn.addr !2825
  br label %dec_label_pc_406aec, !insn.addr !2825
}

define i32 @function_406b5f(i32 %arg1) local_unnamed_addr {
dec_label_pc_406b5f:
  %esi.0.reg2mem = alloca i32, !insn.addr !2826
  %esp.2.reg2mem = alloca i32, !insn.addr !2826
  %ebx.0.reg2mem = alloca i32, !insn.addr !2826
  %esp.1.reg2mem = alloca i32, !insn.addr !2826
  %esp.0.reg2mem = alloca i32, !insn.addr !2826
  %stack_var_-428.0.reg2mem = alloca i32, !insn.addr !2826
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-436 = alloca i32, align 4
  store i32 1544617986, i32* %stack_var_-436, align 4, !insn.addr !2827
  store i32 -522252310, i32* %stack_var_-464, align 4, !insn.addr !2828
  %2 = ptrtoint i32* %stack_var_-464 to i32, !insn.addr !2828
  %3 = ptrtoint i32* %stack_var_-436 to i32
  %4 = icmp eq i32 %0, 0, !insn.addr !2829
  store i32 5, i32* %stack_var_-428.0.reg2mem, !insn.addr !2830
  store i32 %2, i32* %esp.0.reg2mem, !insn.addr !2830
  br label %dec_label_pc_406ba0, !insn.addr !2830

dec_label_pc_406ba0:                              ; preds = %dec_label_pc_406baf, %dec_label_pc_406b5f
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %stack_var_-428.0.reload = load i32, i32* %stack_var_-428.0.reg2mem
  %5 = add i32 %esp.0.reload, -4, !insn.addr !2831
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2831
  store i32 16, i32* %6, align 4, !insn.addr !2831
  %7 = add i32 %esp.0.reload, -8, !insn.addr !2832
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2832
  store i32 %3, i32* %8, align 4, !insn.addr !2832
  %9 = add i32 %esp.0.reload, -12, !insn.addr !2833
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2833
  store i32 402, i32* %10, align 4, !insn.addr !2833
  %11 = add i32 %esp.0.reload, -16, !insn.addr !2834
  %12 = inttoptr i32 %11 to i32*, !insn.addr !2834
  store i32 1635034521, i32* %12, align 4, !insn.addr !2834
  store i32 %11, i32* %esp.1.reg2mem, !insn.addr !2835
  br i1 %4, label %dec_label_pc_406bbb, label %dec_label_pc_406baf, !insn.addr !2835

dec_label_pc_406baf:                              ; preds = %dec_label_pc_406ba0
  %13 = add nsw i32 %stack_var_-428.0.reload, -1, !insn.addr !2836
  %14 = icmp eq i32 %13, 0, !insn.addr !2836
  %15 = icmp eq i1 %14, false, !insn.addr !2837
  store i32 %13, i32* %stack_var_-428.0.reg2mem, !insn.addr !2837
  store i32 %11, i32* %esp.0.reg2mem, !insn.addr !2837
  br i1 %15, label %dec_label_pc_406ba0, label %dec_label_pc_406bb4, !insn.addr !2837

dec_label_pc_406bb4:                              ; preds = %dec_label_pc_406baf
  %16 = add i32 %esp.0.reload, -20, !insn.addr !2838
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2838
  store i32 1453503984, i32* %17, align 4, !insn.addr !2838
  store i32 %16, i32* %esp.1.reg2mem, !insn.addr !2839
  br label %dec_label_pc_406bbb, !insn.addr !2839

dec_label_pc_406bbb:                              ; preds = %dec_label_pc_406ba0, %dec_label_pc_406bb4
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %18 = add i32 %esp.1.reload, -4, !insn.addr !2840
  %19 = inttoptr i32 %18 to i32*, !insn.addr !2840
  store i32 0, i32* %19, align 4, !insn.addr !2840
  %20 = add i32 %esp.1.reload, -8, !insn.addr !2841
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2841
  store i32 4, i32* %21, align 4, !insn.addr !2841
  %22 = add i32 %esp.1.reload, -12, !insn.addr !2842
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2842
  store i32 %3, i32* %23, align 4, !insn.addr !2842
  %24 = add i32 %esp.1.reload, -16, !insn.addr !2843
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2843
  store i32 402, i32* %25, align 4, !insn.addr !2843
  %26 = add i32 %esp.1.reload, -20, !insn.addr !2844
  %27 = inttoptr i32 %26 to i32*, !insn.addr !2844
  store i32 1606998274, i32* %27, align 4, !insn.addr !2844
  %28 = load i32, i32* %stack_var_-436, align 4, !insn.addr !2845
  %29 = add i32 %esp.1.reload, -24, !insn.addr !2846
  %30 = inttoptr i32 %29 to i32*, !insn.addr !2846
  store i32 64, i32* %30, align 4, !insn.addr !2846
  %31 = add i32 %esp.1.reload, -28, !insn.addr !2847
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2847
  store i32 4096, i32* %32, align 4, !insn.addr !2847
  %33 = add i32 %esp.1.reload, -32, !insn.addr !2848
  %34 = inttoptr i32 %33 to i32*, !insn.addr !2848
  store i32 %28, i32* %34, align 4, !insn.addr !2848
  %35 = add i32 %esp.1.reload, -36, !insn.addr !2849
  %36 = inttoptr i32 %35 to i32*, !insn.addr !2849
  store i32 0, i32* %36, align 4, !insn.addr !2849
  %37 = add i32 %esp.1.reload, -40, !insn.addr !2850
  %38 = inttoptr i32 %37 to i32*, !insn.addr !2850
  store i32 -447503272, i32* %38, align 4, !insn.addr !2850
  %39 = add i32 %esp.1.reload, -44, !insn.addr !2851
  %40 = inttoptr i32 %39 to i32*, !insn.addr !2851
  store i32 %39, i32* %esp.2.reg2mem, !insn.addr !2851
  store i32 %28, i32* %esi.0.reg2mem, !insn.addr !2851
  br label %dec_label_pc_406bdd, !insn.addr !2851

dec_label_pc_406bdd:                              ; preds = %dec_label_pc_406bdd, %dec_label_pc_406bbb
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %41 = add i32 %esp.2.reload, -4, !insn.addr !2852
  %42 = inttoptr i32 %41 to i32*, !insn.addr !2852
  store i32 0, i32* %42, align 4, !insn.addr !2852
  %43 = add i32 %esp.2.reload, -8, !insn.addr !2853
  %44 = inttoptr i32 %43 to i32*, !insn.addr !2853
  store i32 %esi.0.reload, i32* %44, align 4, !insn.addr !2853
  %45 = add i32 %esp.2.reload, -12, !insn.addr !2854
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2854
  store i32 %ebx.0.reload, i32* %46, align 4, !insn.addr !2854
  %47 = add i32 %esp.2.reload, -16, !insn.addr !2855
  %48 = inttoptr i32 %47 to i32*, !insn.addr !2855
  store i32 402, i32* %48, align 4, !insn.addr !2855
  %49 = add i32 %esp.2.reload, -20, !insn.addr !2856
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2856
  store i32 1606998274, i32* %50, align 4, !insn.addr !2856
  %51 = add i32 %ebx.0.reload, %1, !insn.addr !2857
  %52 = sub i32 %esi.0.reload, %1, !insn.addr !2858
  %53 = icmp eq i32 %52, 0, !insn.addr !2858
  %54 = icmp eq i1 %53, false, !insn.addr !2859
  store i32 %51, i32* %ebx.0.reg2mem, !insn.addr !2859
  store i32 %49, i32* %esp.2.reg2mem, !insn.addr !2859
  store i32 %52, i32* %esi.0.reg2mem, !insn.addr !2859
  br i1 %54, label %dec_label_pc_406bdd, label %dec_label_pc_406bef, !insn.addr !2859

dec_label_pc_406bef:                              ; preds = %dec_label_pc_406bdd
  ret i32 %1, !insn.addr !2860
}

define i32 @function_406bf1(i16 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_406bf1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %4, -61961232, !insn.addr !2861
  %7 = inttoptr i32 %6 to i8*, !insn.addr !2861
  %8 = load i8, i8* %7, align 1, !insn.addr !2861
  %9 = trunc i32 %2 to i8, !insn.addr !2861
  %10 = add i8 %8, %9, !insn.addr !2861
  store i8 %10, i8* %7, align 1, !insn.addr !2861
  %11 = add i32 %2, 40, !insn.addr !2862
  %12 = inttoptr i32 %11 to i32*, !insn.addr !2862
  %13 = add i32 %5, 84, !insn.addr !2863
  %14 = inttoptr i32 %13 to i32*, !insn.addr !2863
  %15 = load i32, i32* %14, align 4, !insn.addr !2863
  %16 = add i32 %1, -72, !insn.addr !2864
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2864
  %18 = load i32, i32* %17, align 4, !insn.addr !2864
  %19 = add i32 %18, %0, !insn.addr !2864
  %20 = add i32 %5, -268990328, !insn.addr !2865
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2865
  %22 = mul i32 %3, 8, !insn.addr !2866
  %23 = add i32 %22, -779418119, !insn.addr !2866
  %24 = add i32 %23, %19, !insn.addr !2866
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2866
  %26 = load i32, i32* %25, align 4, !insn.addr !2866
  %27 = sext i32 %19 to i64, !insn.addr !2867
  %28 = mul nsw i64 %27, -1297959995, !insn.addr !2867
  %29 = trunc i64 %28 to i32, !insn.addr !2867
  %30 = udiv i64 %28, 4294967296, !insn.addr !2867
  %31 = trunc i64 %30 to i32, !insn.addr !2867
  %32 = add i32 %19, %31, !insn.addr !2868
  %33 = and i32 %32, %15, !insn.addr !2869
  %34 = add i32 %33, %29, !insn.addr !2870
  %35 = add i32 %2, -30, !insn.addr !2866
  %36 = add i32 %35, %26, !insn.addr !2871
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2871
  store i32 %34, i32* %37, align 4, !insn.addr !2871
  ret i32 0, !insn.addr !2872
}

define i32 @function_406c64(i32 %arg1) local_unnamed_addr {
dec_label_pc_406c64:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2873
}

define i32 @function_406c6f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_406c6f:
  %edx.0.lcssa.reg2mem = alloca i32, !insn.addr !2874
  %eax.0.lcssa.reg2mem = alloca i32, !insn.addr !2874
  %edx.05.reg2mem = alloca i32, !insn.addr !2874
  %.in.in.in.reg2mem = alloca i32, !insn.addr !2874
  %.pn.reg2mem = alloca i32, !insn.addr !2874
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call x86_fp80 @__decompiler_undefined_function_4()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-3 = alloca i32, align 4
  %stack_var_1 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_1, align 4
  %9 = fptosi x86_fp80 %6 to i64, !insn.addr !2874
  %10 = inttoptr i32 %3 to i64*, !insn.addr !2874
  store i64 %9, i64* %10, align 4, !insn.addr !2874
  %11 = add i32 %4, 2072350073, !insn.addr !2875
  %12 = inttoptr i32 %11 to i8*, !insn.addr !2875
  %13 = load i8, i8* %12, align 1, !insn.addr !2875
  %14 = trunc i32 %4 to i8, !insn.addr !2875
  %15 = add i8 %13, %14, !insn.addr !2875
  %16 = icmp ult i8 %15, %13, !insn.addr !2875
  store i8 %15, i8* %12, align 1, !insn.addr !2875
  %17 = zext i1 %16 to i32, !insn.addr !2876
  %18 = add i32 %5, 675332224, !insn.addr !2876
  %19 = add i32 %18, %17, !insn.addr !2876
  %20 = icmp eq i32 %19, 1, !insn.addr !2877
  br i1 %20, label %dec_label_pc_406cbb, label %dec_label_pc_406c8b, !insn.addr !2878

dec_label_pc_406c8b:                              ; preds = %dec_label_pc_406c6f
  %21 = add i32 %19, -2, !insn.addr !2879
  %22 = icmp eq i32 %21, 0, !insn.addr !2879
  %23 = icmp eq i1 %22, false, !insn.addr !2880
  br i1 %23, label %dec_label_pc_406cfe.preheader, label %dec_label_pc_406c8e, !insn.addr !2880

dec_label_pc_406cfe.preheader:                    ; preds = %dec_label_pc_406c8b
  %24 = load i32, i32* %stack_var_1, align 4, !insn.addr !2881
  %25 = mul i32 %2, 3, !insn.addr !2882
  %26 = inttoptr i32 %25 to i32*, !insn.addr !2882
  %27 = load i32, i32* %26, align 4, !insn.addr !2882
  %28 = xor i32 %27, %24, !insn.addr !2882
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2883
  %30 = load i32, i32* %29, align 4, !insn.addr !2883
  %31 = icmp ult i32 %21, %30, !insn.addr !2883
  %32 = icmp eq i1 %31, false, !insn.addr !2884
  store i32 %21, i32* %eax.0.lcssa.reg2mem, !insn.addr !2884
  br i1 %32, label %dec_label_pc_406d66, label %dec_label_pc_406d11.lr.ph, !insn.addr !2884

dec_label_pc_406d11.lr.ph:                        ; preds = %dec_label_pc_406cfe.preheader
  %33 = select i1 %7, i32 -4, i32 4, !insn.addr !2883
  %34 = ptrtoint i32* %stack_var_1 to i32, !insn.addr !2885
  %35 = inttoptr i32 %1 to i32*
  store i32 %28, i32* %.pn.reg2mem
  store i32 %34, i32* %.in.in.in.reg2mem
  br label %dec_label_pc_406d11

dec_label_pc_406c8e:                              ; preds = %dec_label_pc_406c8b
  %36 = add i32 %1, -224, !insn.addr !2886
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2886
  %38 = load i32, i32* %37, align 4, !insn.addr !2886
  %39 = and i32 %21, -255
  %40 = inttoptr i32 %39 to i8*, !insn.addr !2887
  %41 = load i8, i8* %40, align 1, !insn.addr !2887
  %42 = trunc i32 %39 to i8, !insn.addr !2887
  %43 = add i8 %41, %42, !insn.addr !2887
  store i8 %43, i8* %40, align 1, !insn.addr !2887
  %44 = or i32 %39, 10, !insn.addr !2888
  %45 = mul i32 %0, 2, !insn.addr !2889
  %46 = add i32 %8, %45, !insn.addr !2889
  %47 = inttoptr i32 %46 to i32*, !insn.addr !2889
  %48 = load i32, i32* %47, align 4, !insn.addr !2889
  %49 = add i32 %48, -76, !insn.addr !2890
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2890
  %51 = load i32, i32* %50, align 4, !insn.addr !2890
  %52 = add i32 %51, -4, !insn.addr !2891
  %53 = inttoptr i32 %52 to i32*, !insn.addr !2891
  %54 = ptrtoint i32* %stack_var_-3 to i32, !insn.addr !2891
  store i32 %54, i32* %53, align 4, !insn.addr !2891
  %55 = icmp ne i32 %38, 1, !insn.addr !2892
  %56 = icmp eq i1 %55, false, !insn.addr !2892
  br i1 %56, label %dec_label_pc_406cb1, label %dec_label_pc_406caf, !insn.addr !2892

dec_label_pc_406caf:                              ; preds = %dec_label_pc_406c8e
  ret i32 %44, !insn.addr !2892

dec_label_pc_406cb1:                              ; preds = %dec_label_pc_406c8e
  %57 = inttoptr i32 %48 to i8*, !insn.addr !2893
  %58 = load i8, i8* %57, align 1, !insn.addr !2893
  %59 = udiv i32 %3, 256, !insn.addr !2893
  %60 = trunc i32 %59 to i8, !insn.addr !2893
  %61 = sub i8 %58, %60, !insn.addr !2893
  %62 = icmp ult i8 %58, %60, !insn.addr !2893
  store i8 %61, i8* %57, align 1, !insn.addr !2893
  %63 = add i32 %48, 18, !insn.addr !2894
  %64 = inttoptr i32 %63 to i8*, !insn.addr !2894
  %65 = load i8, i8* %64, align 1, !insn.addr !2894
  %66 = zext i1 %62 to i8, !insn.addr !2894
  %67 = udiv i8 %65, 32, !insn.addr !2894
  %68 = mul i8 %65, 16, !insn.addr !2894
  %69 = mul i8 %66, 8, !insn.addr !2894
  %70 = or i8 %68, %67, !insn.addr !2894
  %71 = or i8 %70, %69, !insn.addr !2894
  store i8 %71, i8* %64, align 1, !insn.addr !2894
  ret i32 %44, !insn.addr !2895

dec_label_pc_406cbb:                              ; preds = %dec_label_pc_406c6f
  %72 = add i32 %1, -224, !insn.addr !2896
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2896
  %74 = load i32, i32* %73, align 4, !insn.addr !2896
  %75 = add i32 %1, -7089036, !insn.addr !2897
  %76 = inttoptr i32 %75 to i32*, !insn.addr !2897
  %77 = load i32, i32* %76, align 4, !insn.addr !2897
  %78 = add i32 %77, %74, !insn.addr !2898
  %79 = add i32 %2, 36, !insn.addr !2899
  %80 = inttoptr i32 %79 to i32*, !insn.addr !2899
  store i32 0, i32* %80, align 4, !insn.addr !2899
  %81 = mul i32 %78, 262143, !insn.addr !2900
  %82 = add i32 %2, 40, !insn.addr !2901
  call void @__writegsdword(i32 %82, i32 %81), !insn.addr !2901
  ret i32 0, !insn.addr !2902

dec_label_pc_406cee:                              ; preds = %dec_label_pc_406d11
  %edx.05.reload = load i32, i32* %edx.05.reg2mem
  %.in.in.in.reload = load i32, i32* %.in.in.in.reg2mem
  %.pn.reload = load i32, i32* %.pn.reg2mem
  %.in.in = add i32 %.in.in.in.reload, 4
  %.in = inttoptr i32 %.in.in to i32*
  %83 = load i32, i32* %.in, align 4
  %84 = add i32 %.pn.reload, %33
  %85 = trunc i32 %edx.05.reload to i8, !insn.addr !2903
  %86 = add i32 %83, -203243189, !insn.addr !2903
  %87 = inttoptr i32 %86 to i8*, !insn.addr !2903
  %88 = load i8, i8* %87, align 1, !insn.addr !2903
  %89 = and i8 %88, %85, !insn.addr !2903
  %90 = zext i8 %89 to i32, !insn.addr !2903
  %91 = and i32 %edx.05.reload, 1073741568, !insn.addr !2903
  %92 = or i32 %91, %90, !insn.addr !2903
  %93 = add i32 %104, -1, !insn.addr !2904
  %94 = mul i32 %92, 4, !insn.addr !2905
  %95 = trunc i32 %94 to i16, !insn.addr !2906
  %96 = call i8 @__asm_insb(i16 %95), !insn.addr !2906
  %97 = inttoptr i32 %84 to i8*, !insn.addr !2906
  store i8 %96, i8* %97, align 1, !insn.addr !2906
  %98 = load i32, i32* %26, align 4, !insn.addr !2882
  %99 = xor i32 %98, %2, !insn.addr !2882
  %100 = inttoptr i32 %99 to i32*, !insn.addr !2883
  %101 = load i32, i32* %100, align 4, !insn.addr !2883
  %102 = icmp ult i32 %94, %101, !insn.addr !2883
  %103 = icmp eq i1 %102, false, !insn.addr !2884
  store i32 %99, i32* %.pn.reg2mem, !insn.addr !2884
  store i32 %93, i32* %edx.05.reg2mem, !insn.addr !2884
  store i32 %94, i32* %eax.0.lcssa.reg2mem, !insn.addr !2884
  store i32 %93, i32* %edx.0.lcssa.reg2mem, !insn.addr !2884
  br i1 %103, label %dec_label_pc_406d66, label %dec_label_pc_406d11, !insn.addr !2884

dec_label_pc_406d11:                              ; preds = %dec_label_pc_406d11.lr.ph, %dec_label_pc_406cee
  %104 = load i32, i32* inttoptr (i32 -1254029929 to i32*), align 4, !insn.addr !2907
  %105 = icmp eq i32 %104, 0, !insn.addr !2908
  %106 = icmp eq i1 %105, false, !insn.addr !2909
  br i1 %106, label %dec_label_pc_406cee, label %dec_label_pc_406d1c, !insn.addr !2909

dec_label_pc_406d1c:                              ; preds = %dec_label_pc_406d11
  %107 = add i32 %1, -4, !insn.addr !2910
  %108 = inttoptr i32 %107 to i32*, !insn.addr !2910
  store i32 8717376, i32* %108, align 4, !insn.addr !2910
  store i32 %104, i32* @global_var_4104ec, align 4, !insn.addr !2911
  %109 = add i32 %1, 8, !insn.addr !2912
  %110 = inttoptr i32 %109 to i32*, !insn.addr !2912
  %111 = load i32, i32* %110, align 4, !insn.addr !2912
  %112 = add i32 %111, 78657, !insn.addr !2913
  %113 = inttoptr i32 %112 to i32*, !insn.addr !2914
  store i32 967509056, i32* %113, align 4, !insn.addr !2914
  %114 = load i32, i32* inttoptr (i32 3802235 to i32*), align 4, !insn.addr !2915
  ret i32 %114, !insn.addr !2916

dec_label_pc_406d66:                              ; preds = %dec_label_pc_406cee, %dec_label_pc_406cfe.preheader
  %edx.0.lcssa.reload = load i32, i32* %edx.0.lcssa.reg2mem
  %eax.0.lcssa.reload = load i32, i32* %eax.0.lcssa.reg2mem
  %115 = add i32 %1, 8, !insn.addr !2917
  %116 = inttoptr i32 %115 to i32*, !insn.addr !2917
  %117 = load i32, i32* %116, align 4, !insn.addr !2917
  %118 = add i32 %1, -4, !insn.addr !2918
  %119 = inttoptr i32 %118 to i32*, !insn.addr !2918
  %120 = add i32 %eax.0.lcssa.reload, -24, !insn.addr !2919
  %121 = inttoptr i32 %120 to i8*, !insn.addr !2919
  %122 = load i8, i8* %121, align 1, !insn.addr !2919
  %123 = udiv i32 %117, 256, !insn.addr !2919
  %124 = trunc i32 %123 to i8, !insn.addr !2919
  %125 = add i8 %122, %124, !insn.addr !2919
  store i8 %125, i8* %121, align 1, !insn.addr !2919
  %126 = inttoptr i32 %eax.0.lcssa.reload to i32*, !insn.addr !2920
  %127 = load i32, i32* %126, align 4, !insn.addr !2920
  %128 = add i32 %127, %eax.0.lcssa.reload, !insn.addr !2920
  %129 = icmp ult i32 %128, %eax.0.lcssa.reload, !insn.addr !2920
  %130 = trunc i32 %edx.0.lcssa.reload to i16, !insn.addr !2921
  %131 = call i8 @__asm_in.4(i16 %130), !insn.addr !2921
  %132 = sext i8 %131 to i32, !insn.addr !2921
  %133 = and i32 %128, -256, !insn.addr !2921
  %134 = or i32 %133, %132, !insn.addr !2921
  %135 = inttoptr i32 %117 to i32*, !insn.addr !2922
  %136 = load i32, i32* %135, align 4, !insn.addr !2922
  %.neg1 = sext i1 %129 to i32
  %.neg2 = sub i32 %136, %2, !insn.addr !2922
  %137 = add i32 %.neg2, %.neg1, !insn.addr !2922
  store i32 %137, i32* %135, align 4, !insn.addr !2922
  %138 = add i32 %134, -1, !insn.addr !2923
  %139 = inttoptr i32 %138 to i8*, !insn.addr !2923
  %140 = load i8, i8* %139, align 1, !insn.addr !2923
  %141 = trunc i32 %edx.0.lcssa.reload to i8, !insn.addr !2923
  %142 = add i8 %140, %141, !insn.addr !2923
  %143 = icmp ult i8 %142, %140, !insn.addr !2923
  store i8 %142, i8* %139, align 1, !insn.addr !2923
  %144 = zext i1 %143 to i32, !insn.addr !2924
  %145 = add i32 %134, 4243600, !insn.addr !2924
  %146 = add i32 %145, %144, !insn.addr !2924
  ret i32 %146, !insn.addr !2925
}

define i32 @function_406d82() local_unnamed_addr {
dec_label_pc_406d82:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_406d8e() local_unnamed_addr {
dec_label_pc_406d8e:
  %eax.0.reg2mem = alloca i32, !insn.addr !2926
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %4, -1058250738, !insn.addr !2926
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2926
  %8 = load i32, i32* %7, align 4, !insn.addr !2926
  %9 = zext i1 %5 to i32, !insn.addr !2926
  %10 = add i32 %8, %3, !insn.addr !2926
  %11 = add i32 %10, %9, !insn.addr !2926
  %12 = icmp ule i32 %11, %8, !insn.addr !2926
  %13 = icmp ult i32 %10, %8, !insn.addr !2926
  %14 = select i1 %5, i1 %12, i1 %13, !insn.addr !2926
  store i32 %11, i32* %7, align 4, !insn.addr !2926
  %15 = add i32 %1, -117, !insn.addr !2927
  %16 = inttoptr i32 %15 to i8*, !insn.addr !2927
  %17 = load i8, i8* %16, align 1, !insn.addr !2927
  %18 = trunc i32 %3 to i8, !insn.addr !2927
  %19 = zext i1 %14 to i8, !insn.addr !2927
  %20 = add i8 %17, %18, !insn.addr !2927
  %21 = add i8 %20, %19, !insn.addr !2927
  %22 = icmp eq i8 %21, 0, !insn.addr !2927
  store i8 %21, i8* %16, align 1, !insn.addr !2927
  %23 = icmp eq i1 %22, false, !insn.addr !2928
  br i1 %23, label %24, label %dec_label_pc_406d9a, !insn.addr !2928

; <label>:24:                                     ; preds = %dec_label_pc_406d8e
  %25 = call i32 @function_406d82(), !insn.addr !2928
  store i32 %25, i32* %eax.0.reg2mem, !insn.addr !2928
  br label %dec_label_pc_406d9a, !insn.addr !2928

dec_label_pc_406d9a:                              ; preds = %24, %dec_label_pc_406d8e
  %26 = icmp ule i8 %21, %17, !insn.addr !2927
  %27 = icmp ult i8 %20, %17, !insn.addr !2927
  %28 = select i1 %14, i1 %26, i1 %27, !insn.addr !2927
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %29 = add i32 %eax.0.reload, 32, !insn.addr !2929
  %30 = inttoptr i32 %29 to i32*, !insn.addr !2929
  %31 = load i32, i32* %30, align 4, !insn.addr !2929
  %32 = add i32 %2, 87, !insn.addr !2930
  %33 = inttoptr i32 %32 to i32*, !insn.addr !2930
  %34 = load i32, i32* %33, align 4, !insn.addr !2930
  %.neg = sext i1 %28 to i32
  %.neg2 = add i32 %3, %.neg, !insn.addr !2930
  %35 = sub i32 %.neg2, %34, !insn.addr !2930
  %36 = call i32 @unknown_f740acc3(i32 %35, i32 %31, i32 %0), !insn.addr !2931
  %37 = icmp eq i32 %36, 0, !insn.addr !2932
  %38 = icmp eq i1 %37, false, !insn.addr !2933
  %spec.select = select i1 %38, i32 %36, i32 156
  ret i32 %spec.select, !insn.addr !2934
}

define i32 @function_406dc0() local_unnamed_addr {
dec_label_pc_406dc0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = and i32 %0, 14
  %3 = icmp ugt i32 %2, 9, !insn.addr !2935
  %4 = or i1 %1, %3, !insn.addr !2935
  %5 = add i32 %0, 6, !insn.addr !2935
  %6 = select i1 %4, i32 %5, i32 %0, !insn.addr !2935
  %7 = zext i1 %4 to i32, !insn.addr !2935
  %8 = and i32 %6, 15, !insn.addr !2935
  %9 = and i32 %0, -65536, !insn.addr !2935
  %10 = mul i32 %7, 256
  %11 = add i32 %10, %0
  %12 = and i32 %11, 65280, !insn.addr !2935
  %13 = or i32 %12, %9
  %14 = or i32 %13, %8, !insn.addr !2935
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2936
  %16 = load i32, i32* %15, align 4, !insn.addr !2936
  %17 = add i32 %16, 1, !insn.addr !2936
  store i32 %17, i32* %15, align 4, !insn.addr !2936
  %18 = trunc i32 %8 to i8, !insn.addr !2937
  call void @__asm_out(i32 192, i8 %18), !insn.addr !2937
  %19 = call i8 @__asm_in.7(i8 93), !insn.addr !2938
  %20 = sext i8 %19 to i32, !insn.addr !2938
  %21 = or i32 %13, %20, !insn.addr !2938
  ret i32 %21, !insn.addr !2939
}

define i32 @function_406e16(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_406e16:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 94, !insn.addr !2940
  %4 = inttoptr i32 %3 to i8*, !insn.addr !2940
  %5 = load i8, i8* %4, align 1, !insn.addr !2940
  %6 = trunc i32 %1 to i8, !insn.addr !2940
  %7 = and i8 %5, %6, !insn.addr !2940
  store i8 %7, i8* %4, align 1, !insn.addr !2940
  ret i32 %2, !insn.addr !2941
}

define i32 @function_406e39() local_unnamed_addr {
dec_label_pc_406e39:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_406e6e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_406e6e:
  %ecx.02.reg2mem = alloca i32, !insn.addr !2942
  %esp.03.reg2mem = alloca i32, !insn.addr !2942
  %merge.reg2mem = alloca i32, !insn.addr !2942
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = icmp eq i32 %1, 0, !insn.addr !2943
  br i1 %2, label %dec_label_pc_406ec7.lr.ph, label %dec_label_pc_406e8a, !insn.addr !2944

dec_label_pc_406ec7.lr.ph:                        ; preds = %dec_label_pc_406e6e
  %3 = udiv i32 %0, 256
  %4 = trunc i32 %3 to i8
  br label %dec_label_pc_406ec7

dec_label_pc_406e78:                              ; preds = %dec_label_pc_406ec7
  %5 = icmp ult i8 %53, %51, !insn.addr !2945
  %6 = select i1 %5, i8* inttoptr (i32 4222504 to i8*), i8* inttoptr (i32 4222503 to i8*), !insn.addr !2946
  %7 = load i8, i8* %6, align 1, !insn.addr !2946
  %8 = add i8 %7, %4, !insn.addr !2946
  store i8 %8, i8* %6, align 1, !insn.addr !2946
  %9 = trunc i32 %54 to i8, !insn.addr !2947
  %10 = and i8 %9, 31, !insn.addr !2947
  %11 = icmp eq i8 %10, 0, !insn.addr !2947
  br i1 %11, label %dec_label_pc_406e86, label %12, !insn.addr !2947

; <label>:12:                                     ; preds = %dec_label_pc_406e78
  %13 = add i32 %24, -1979151477, !insn.addr !2947
  %14 = inttoptr i32 %13 to i8*, !insn.addr !2947
  %15 = load i8, i8* %14, align 1, !insn.addr !2947
  %16 = ashr i8 %15, %10, !insn.addr !2947
  store i8 %16, i8* %14, align 1, !insn.addr !2947
  br label %dec_label_pc_406e86, !insn.addr !2947

dec_label_pc_406e86:                              ; preds = %dec_label_pc_406e78, %12
  %17 = add i32 %esp.03.reload, -113, !insn.addr !2948
  %18 = inttoptr i32 %17 to i32*, !insn.addr !2948
  %19 = add i32 %30, 2, !insn.addr !2949
  %20 = and i32 %19, 4, !insn.addr !2950
  %21 = icmp eq i32 %20, 0, !insn.addr !2943
  store i32 %20, i32* %merge.reg2mem, !insn.addr !2944
  store i32 %40, i32* %esp.03.reg2mem, !insn.addr !2944
  store i32 %54, i32* %ecx.02.reg2mem, !insn.addr !2944
  br i1 %21, label %dec_label_pc_406ec7, label %dec_label_pc_406e8a, !insn.addr !2944

dec_label_pc_406e8a:                              ; preds = %dec_label_pc_406e86, %dec_label_pc_406ec7, %dec_label_pc_406e6e
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2951

dec_label_pc_406ec7:                              ; preds = %dec_label_pc_406ec7.lr.ph, %dec_label_pc_406e86
  %ecx.02.reload = load i32, i32* %ecx.02.reg2mem
  %esp.03.reload = load i32, i32* %esp.03.reg2mem
  %22 = add i32 %esp.03.reload, -119, !insn.addr !2952
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2953
  %24 = load i32, i32* %23, align 4, !insn.addr !2953
  %25 = add i32 %esp.03.reload, -115, !insn.addr !2953
  %26 = inttoptr i32 %25 to i32*, !insn.addr !2954
  %27 = load i32, i32* %26, align 4, !insn.addr !2954
  %28 = add i32 %esp.03.reload, -111, !insn.addr !2954
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2955
  %30 = load i32, i32* %29, align 4, !insn.addr !2955
  %31 = add i32 %esp.03.reload, -107, !insn.addr !2955
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2956
  %33 = load i32, i32* %32, align 4, !insn.addr !2956
  %34 = add i32 %esp.03.reload, -101, !insn.addr !2957
  %35 = add i32 %esp.03.reload, -105, !insn.addr !2948
  %36 = add i32 %esp.03.reload, -109, !insn.addr !2948
  %37 = add i32 %esp.03.reload, -117, !insn.addr !2948
  %38 = add i32 %esp.03.reload, -121, !insn.addr !2948
  %39 = add i32 %esp.03.reload, -125, !insn.addr !2948
  %40 = add i32 %esp.03.reload, -129, !insn.addr !2948
  %41 = add i32 %esp.03.reload, -133, !insn.addr !2948
  %42 = inttoptr i32 %35 to i32*, !insn.addr !2948
  store i32 22, i32* %42, align 4, !insn.addr !2948
  %43 = inttoptr i32 %36 to i32*, !insn.addr !2948
  store i32 %ecx.02.reload, i32* %43, align 4, !insn.addr !2948
  %44 = inttoptr i32 %37 to i32*, !insn.addr !2948
  store i32 %30, i32* %44, align 4, !insn.addr !2948
  %45 = inttoptr i32 %38 to i32*, !insn.addr !2948
  store i32 %34, i32* %45, align 4, !insn.addr !2948
  %46 = inttoptr i32 %39 to i32*, !insn.addr !2948
  store i32 %33, i32* %46, align 4, !insn.addr !2948
  %47 = inttoptr i32 %40 to i32*, !insn.addr !2948
  store i32 %27, i32* %47, align 4, !insn.addr !2948
  %48 = inttoptr i32 %41 to i32*, !insn.addr !2948
  store i32 %24, i32* %48, align 4, !insn.addr !2948
  %49 = add i32 %33, -11489721, !insn.addr !2945
  %50 = inttoptr i32 %49 to i8*, !insn.addr !2945
  %51 = load i8, i8* %50, align 1, !insn.addr !2945
  %52 = trunc i32 %ecx.02.reload to i8, !insn.addr !2945
  %53 = add i8 %51, %52, !insn.addr !2945
  store i8 %53, i8* %50, align 1, !insn.addr !2945
  %54 = add i32 %ecx.02.reload, -1, !insn.addr !2958
  %55 = icmp eq i32 %54, 0, !insn.addr !2958
  store i32 %30, i32* %merge.reg2mem, !insn.addr !2958
  br i1 %55, label %dec_label_pc_406e8a, label %dec_label_pc_406e78, !insn.addr !2958
}

define i32 @function_406f6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_406f6c:
  ret i32 22, !insn.addr !2959
}

define i32 @function_406f73() local_unnamed_addr {
dec_label_pc_406f73:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2960
}

define i32 @function_406f9a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_406f9a:
  %.reg2mem6 = alloca i32, !insn.addr !2961
  %.reg2mem = alloca i32, !insn.addr !2961
  %edi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %.neg = sext i1 %3 to i8
  %4 = inttoptr i32 %2 to i8*, !insn.addr !2961
  store i8 %.neg, i8* %4, align 1, !insn.addr !2961
  %5 = add i32 %0, -17, !insn.addr !2962
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2962
  %7 = load i32, i32* %6, align 4, !insn.addr !2962
  %8 = icmp eq i32 %7, 0, !insn.addr !2963
  %9 = add i32 %0, 67, !insn.addr !2964
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2964
  store i32 %7, i32* %10, align 4, !insn.addr !2964
  %11 = icmp eq i1 %8, false, !insn.addr !2965
  br i1 %11, label %13, label %dec_label_pc_406f9a.dec_label_pc_406fb5_crit_edge, !insn.addr !2965

dec_label_pc_406f9a.dec_label_pc_406fb5_crit_edge: ; preds = %dec_label_pc_406f9a
  %12 = xor i32 %2, -333949552, !insn.addr !2966
  store i32 %12, i32* %.reg2mem
  br label %dec_label_pc_406fb5

; <label>:13:                                     ; preds = %dec_label_pc_406f9a
  %14 = call i32 @function_406f73(), !insn.addr !2965
  store i32 %14, i32* %.reg2mem, !insn.addr !2965
  br label %dec_label_pc_406fb5, !insn.addr !2965

dec_label_pc_406fb5:                              ; preds = %dec_label_pc_406f9a.dec_label_pc_406fb5_crit_edge, %13
  %.reload = load i32, i32* %.reg2mem, !insn.addr !2967
  %15 = bitcast i32* %edi to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !2967
  %17 = zext i8 %16 to i32, !insn.addr !2967
  %18 = and i32 %.reload, -256, !insn.addr !2967
  %19 = or i32 %18, %17, !insn.addr !2967
  %20 = icmp slt i8 %16, 48, !insn.addr !2968
  %spec.select.v = select i1 %20, i8 -48, i8 -57
  %spec.select = add i8 %spec.select.v, %16
  %spec.select5 = select i1 %20, i8 47, i8 56
  %.pn = sub i8 %spec.select5, %16
  %of.0.in = and i8 %.pn, %16
  %zf.0 = icmp eq i8 %spec.select, 0
  %of.0 = icmp slt i8 %of.0.in, 0
  %sf.0 = icmp slt i8 %spec.select, 0
  %21 = icmp eq i1 %sf.0, %of.0, !insn.addr !2969
  %22 = icmp eq i1 %zf.0, false, !insn.addr !2969
  %23 = icmp eq i1 %21, %22, !insn.addr !2969
  store i32 %19, i32* %.reg2mem6, !insn.addr !2969
  br i1 %23, label %24, label %dec_label_pc_406fcc, !insn.addr !2969

; <label>:24:                                     ; preds = %dec_label_pc_406fb5
  %25 = call i32 @function_97707d(), !insn.addr !2969
  store i32 %25, i32* %.reg2mem6, !insn.addr !2969
  br label %dec_label_pc_406fcc, !insn.addr !2969

dec_label_pc_406fcc:                              ; preds = %24, %dec_label_pc_406fb5
  %.reload7 = load i32, i32* %.reg2mem6
  %26 = inttoptr i32 %.reload7 to i16*, !insn.addr !2970
  %27 = load i16, i16* %26, align 2, !insn.addr !2970
  %28 = trunc i32 %.reload7 to i16, !insn.addr !2970
  call void @__asm_arpl(i16 %27, i16 %28), !insn.addr !2970
  store i32 14611520, i32* %edi, align 4, !insn.addr !2971
  %29 = call i32 @function_406f6c(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %30 = load i32, i32* inttoptr (i32 57 to i32*), align 4, !insn.addr !2972
  %31 = udiv i32 %30, 2, !insn.addr !2972
  %32 = shl i32 %30, 31, !insn.addr !2972
  %33 = or i32 %31, %32, !insn.addr !2972
  store i32 %33, i32* inttoptr (i32 57 to i32*), align 4, !insn.addr !2972
  %34 = load i32, i32* inttoptr (i32 14611520 to i32*), align 64, !insn.addr !2973
  %35 = udiv i32 %34, 2, !insn.addr !2973
  %36 = shl i32 %34, 31, !insn.addr !2973
  %37 = or i32 %35, %36, !insn.addr !2973
  store i32 %37, i32* inttoptr (i32 14611520 to i32*), align 64, !insn.addr !2973
  %38 = add i32 %29, 466665928, !insn.addr !2974
  %39 = add i32 %0, -8, !insn.addr !2975
  %40 = inttoptr i32 %39 to i32*, !insn.addr !2975
  store i32 %38, i32* %40, align 4, !insn.addr !2975
  %41 = trunc i32 %1 to i16, !insn.addr !2976
  %42 = call i8 @__asm_in.4(i16 %41), !insn.addr !2976
  store i32 1076173845, i32* inttoptr (i32 -1639085584 to i32*), align 16, !insn.addr !2977
  %43 = add i32 %1, 12, !insn.addr !2978
  %44 = inttoptr i32 %43 to i32*, !insn.addr !2978
  %45 = load i32, i32* %44, align 4, !insn.addr !2978
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2979
  %47 = load i32, i32* %46, align 4, !insn.addr !2979
  %48 = and i32 %47, 1076173845, !insn.addr !2979
  %49 = icmp eq i32 %48, 0, !insn.addr !2979
  br i1 %49, label %dec_label_pc_4070c6, label %dec_label_pc_40701e, !insn.addr !2980

dec_label_pc_40701e:                              ; preds = %dec_label_pc_406fcc
  %50 = load i32, i32* %edi, align 4, !insn.addr !2981
  %51 = mul i32 %50, 8, !insn.addr !2981
  %52 = add i32 %0, -9, !insn.addr !2982
  %53 = inttoptr i32 %52 to i32*, !insn.addr !2982
  store i32 %48, i32* %53, align 4, !insn.addr !2982
  %54 = add i32 %29, 466665924, !insn.addr !2981
  %55 = add i32 %54, %51, !insn.addr !2983
  %56 = inttoptr i32 %55 to i32*, !insn.addr !2983
  store i32 56, i32* %56, align 4, !insn.addr !2983
  %57 = add i32 %1, 89, !insn.addr !2984
  %58 = and i32 %1, -256, !insn.addr !2984
  %59 = and i32 %57, 255, !insn.addr !2985
  %60 = or i32 %59, %58
  %61 = xor i32 %60, 218, !insn.addr !2985
  ret i32 %61, !insn.addr !2985

dec_label_pc_4070c6:                              ; preds = %dec_label_pc_406fcc
  %62 = add i32 %0, 12, !insn.addr !2986
  %63 = inttoptr i32 %62 to i32*, !insn.addr !2986
  %64 = call i32 @__asm_wait(), !insn.addr !2987
  ret i32 %64, !insn.addr !2988
}

define i32 @function_407150() local_unnamed_addr {
dec_label_pc_407150:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_407156() local_unnamed_addr {
dec_label_pc_407156:
  %eax.0.reg2mem = alloca i32, !insn.addr !2989
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = trunc i32 %3 to i8
  %7 = mul i8 %6, 2, !insn.addr !2989
  %8 = inttoptr i32 %3 to i8*, !insn.addr !2989
  store i8 %7, i8* %8, align 1, !insn.addr !2989
  %9 = add i32 %4, %2, !insn.addr !2990
  %10 = trunc i32 %9 to i8, !insn.addr !2991
  %11 = and i8 %10, 31, !insn.addr !2991
  %12 = icmp eq i8 %11, 0, !insn.addr !2991
  br i1 %12, label %21, label %13, !insn.addr !2991

; <label>:13:                                     ; preds = %dec_label_pc_407156
  %14 = add i32 %0, 57, !insn.addr !2991
  %15 = inttoptr i32 %14 to i8*, !insn.addr !2991
  %16 = load i8, i8* %15, align 1, !insn.addr !2991
  %17 = shl i8 %16, %11, !insn.addr !2991
  %18 = sub nsw i8 8, %11, !insn.addr !2991
  %19 = lshr i8 %16, %18, !insn.addr !2991
  %20 = or i8 %19, %17, !insn.addr !2991
  store i8 %20, i8* %15, align 1, !insn.addr !2991
  br label %21, !insn.addr !2991

; <label>:21:                                     ; preds = %dec_label_pc_407156, %13
  %22 = and i32 %9, 255, !insn.addr !2990
  %23 = and i32 %4, -256, !insn.addr !2990
  %24 = or i32 %22, %23, !insn.addr !2990
  %25 = add i32 %24, 1166654533, !insn.addr !2992
  %26 = inttoptr i32 %25 to i32*, !insn.addr !2992
  %27 = load i32, i32* %26, align 4, !insn.addr !2992
  %28 = add i32 %27, %24, !insn.addr !2992
  store i32 %28, i32* %26, align 4, !insn.addr !2992
  %29 = add i32 %24, 1431554133, !insn.addr !2993
  %30 = inttoptr i32 %29 to i8*, !insn.addr !2993
  %31 = load i8, i8* %30, align 1, !insn.addr !2993
  %32 = udiv i8 %31, 16, !insn.addr !2993
  %33 = mul i8 %31, 16, !insn.addr !2993
  %34 = or i8 %32, %33, !insn.addr !2993
  store i8 %34, i8* %30, align 1, !insn.addr !2993
  %35 = add i32 %5, 2106194773, !insn.addr !2994
  %36 = inttoptr i32 %35 to i8*, !insn.addr !2994
  %37 = load i8, i8* %36, align 1, !insn.addr !2994
  %38 = and i8 %37, %10, !insn.addr !2994
  store i8 %38, i8* %36, align 1, !insn.addr !2994
  %39 = add i32 %1, 86, !insn.addr !2995
  %40 = inttoptr i32 %39 to i8*, !insn.addr !2995
  %41 = load i8, i8* %40, align 1, !insn.addr !2995
  %42 = udiv i32 %2, 256, !insn.addr !2995
  %43 = trunc i32 %42 to i8, !insn.addr !2995
  %44 = add i8 %41, %43, !insn.addr !2995
  store i8 %44, i8* %40, align 1, !insn.addr !2995
  %45 = add i32 %24, -450013205, !insn.addr !2996
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2996
  %47 = load i32, i32* %46, align 4, !insn.addr !2996
  %48 = xor i32 %47, %3, !insn.addr !2996
  %49 = icmp slt i32 %48, 0, !insn.addr !2996
  br i1 %49, label %50, label %dec_label_pc_40718f, !insn.addr !2997

; <label>:50:                                     ; preds = %21
  %51 = add i32 %24, 390448852, !insn.addr !2998
  %52 = inttoptr i32 %51 to i32*, !insn.addr !2998
  %53 = call i32 @function_407150(), !insn.addr !2997
  store i32 %53, i32* %eax.0.reg2mem, !insn.addr !2997
  br label %dec_label_pc_40718f, !insn.addr !2997

dec_label_pc_40718f:                              ; preds = %50, %21
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %54 = add i32 %eax.0.reload, 1, !insn.addr !2999
  %55 = add i32 %24, -528268990, !insn.addr !3000
  %56 = inttoptr i32 %55 to i32*, !insn.addr !3000
  %57 = load i32, i32* %56, align 4, !insn.addr !3000
  %58 = or i32 %57, %54, !insn.addr !3000
  store i32 %58, i32* %56, align 4, !insn.addr !3000
  ret i32 %54, !insn.addr !3001
}

define i32 @function_4071aa() local_unnamed_addr {
dec_label_pc_4071aa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 88, !insn.addr !3002
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3002
  %3 = call i32 @function_4071aa(), !insn.addr !3003
  ret i32 %3, !insn.addr !3003
}

define i32 @function_4071b6() local_unnamed_addr {
dec_label_pc_4071b6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -60, !insn.addr !3004
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3004
  %3 = call i32 @function_4071aa(), !insn.addr !3005
  ret i32 %3, !insn.addr !3005
}

define i32 @function_4071c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4071c0:
  %merge.reg2mem = alloca i32, !insn.addr !3006
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_5299 = alloca i32, align 4
  %6 = trunc i32 %4 to i8, !insn.addr !3006
  %7 = icmp eq i8 %6, 35, !insn.addr !3006
  %8 = icmp eq i1 %7, false, !insn.addr !3007
  br i1 %8, label %dec_label_pc_4071ca, label %dec_label_pc_4071c4, !insn.addr !3007

dec_label_pc_4071c4:                              ; preds = %dec_label_pc_40721e, %dec_label_pc_407289, %dec_label_pc_4071c0
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !3007

dec_label_pc_4071ca:                              ; preds = %dec_label_pc_4071c0
  %9 = icmp eq i8 %6, 48, !insn.addr !3008
  %10 = icmp eq i1 %9, false, !insn.addr !3009
  br i1 %10, label %dec_label_pc_40721c, label %dec_label_pc_4071d8, !insn.addr !3009

dec_label_pc_4071d8:                              ; preds = %dec_label_pc_4071ca
  %11 = call i32 @function_4071aa(), !insn.addr !3010
  ret i32 %11, !insn.addr !3010

dec_label_pc_40721c:                              ; preds = %dec_label_pc_4071ca
  %12 = icmp slt i8 %6, 48, !insn.addr !3011
  br i1 %12, label %dec_label_pc_40721e, label %dec_label_pc_407289, !insn.addr !3011

dec_label_pc_40721e:                              ; preds = %dec_label_pc_40721c
  %13 = icmp ult i8 %6, 48, !insn.addr !3008
  %14 = select i1 %13, i32 1075606552, i32 1075606551, !insn.addr !3012
  %15 = sub i32 %4, %14, !insn.addr !3012
  %16 = add i32 %3, 981721230, !insn.addr !3013
  %17 = inttoptr i32 %16 to i8*, !insn.addr !3013
  %18 = load i8, i8* %17, align 1, !insn.addr !3013
  %19 = trunc i32 %3 to i8, !insn.addr !3013
  %20 = add i8 %18, %19, !insn.addr !3013
  store i8 %20, i8* %17, align 1, !insn.addr !3013
  %21 = add i32 %1, 74, !insn.addr !3014
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3014
  %23 = load i32, i32* %22, align 4, !insn.addr !3014
  %24 = add i32 %23, %0, !insn.addr !3014
  store i32 %24, i32* %22, align 4, !insn.addr !3014
  %25 = add i32 %3, 71, !insn.addr !3015
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3015
  %27 = load i32, i32* %26, align 4, !insn.addr !3015
  %28 = xor i32 %27, %15, !insn.addr !3015
  %29 = add i32 %28, 138, !insn.addr !3016
  %30 = and i32 %29, 255, !insn.addr !3016
  %31 = and i32 %28, -256, !insn.addr !3016
  %32 = or i32 %30, %31, !insn.addr !3016
  store i32 %32, i32* %stack_var_5299, align 4, !insn.addr !3017
  %33 = ptrtoint i32* %stack_var_5299 to i32, !insn.addr !3017
  %34 = call i32 @unknown_cace00(i32 %32), !insn.addr !3018
  %35 = icmp ult i32 %arg1, -21, !insn.addr !3019
  %36 = add i32 %5, 4243760, !insn.addr !3020
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3020
  %38 = load i32, i32* %37, align 4, !insn.addr !3020
  %39 = zext i1 %35 to i32, !insn.addr !3020
  %40 = or i32 %33, %39, !insn.addr !3020
  %41 = add i32 %38, %40, !insn.addr !3020
  store i32 %41, i32* %37, align 4, !insn.addr !3020
  %42 = call i32 @__asm_hlt(), !insn.addr !3021
  %43 = inttoptr i32 %42 to i32*, !insn.addr !3022
  %44 = load i32, i32* %43, align 4, !insn.addr !3022
  %45 = add i32 %44, %42, !insn.addr !3022
  store i32 %45, i32* %43, align 4, !insn.addr !3022
  %46 = inttoptr i32 %42 to i8*, !insn.addr !3023
  %47 = load i8, i8* %46, align 1, !insn.addr !3023
  %48 = trunc i32 %42 to i8, !insn.addr !3023
  %49 = add i8 %47, %48, !insn.addr !3023
  store i8 %49, i8* %46, align 1, !insn.addr !3023
  call void @__asm_out(i32 38, i8 %48), !insn.addr !3024
  %50 = call i32 @__asm_iretd(), !insn.addr !3025
  %51 = trunc i32 %2 to i8, !insn.addr !3026
  %52 = udiv i32 %2, 256, !insn.addr !3026
  %53 = trunc i32 %52 to i8, !insn.addr !3026
  %54 = add i8 %53, %51, !insn.addr !3026
  %55 = icmp eq i8 %54, 0, !insn.addr !3026
  %56 = icmp eq i1 %55, false, !insn.addr !3027
  store i32 %50, i32* %merge.reg2mem, !insn.addr !3027
  br i1 %56, label %dec_label_pc_4071c4, label %dec_label_pc_407276, !insn.addr !3027

dec_label_pc_407276:                              ; preds = %dec_label_pc_40721e
  %57 = and i32 %2, -256, !insn.addr !3026
  %58 = zext i8 %54 to i32, !insn.addr !3026
  %59 = or i32 %57, %58, !insn.addr !3026
  %60 = inttoptr i32 %59 to i32*, !insn.addr !3028
  %61 = load i32, i32* %60, align 4, !insn.addr !3028
  ret i32 %61, !insn.addr !3029

dec_label_pc_407289:                              ; preds = %dec_label_pc_40721c
  %62 = add i32 %4, -1614785143, !insn.addr !3030
  store i32 %62, i32* %merge.reg2mem, !insn.addr !3031
  br label %dec_label_pc_4071c4, !insn.addr !3031
}

define i32 @function_4072b6() local_unnamed_addr {
dec_label_pc_4072b6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %1, 4, !insn.addr !3032
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3032
  %8 = load i8, i8* %7, align 1, !insn.addr !3032
  %9 = trunc i32 %3 to i8, !insn.addr !3032
  %.neg1 = sext i1 %5 to i8
  %.neg2 = sub i8 %.neg1, %9, !insn.addr !3032
  %10 = add i8 %.neg2, %8, !insn.addr !3032
  store i8 %10, i8* %7, align 1, !insn.addr !3032
  %11 = inttoptr i32 %0 to i8*, !insn.addr !3033
  store i8 %9, i8* %11, align 1, !insn.addr !3033
  %12 = trunc i32 %2 to i16, !insn.addr !3034
  %13 = call i8 @__asm_insb(i16 %12), !insn.addr !3034
  store i8 %13, i8* %11, align 1, !insn.addr !3034
  ret i32 %4, !insn.addr !3035
}

define i32 @function_4072bf() local_unnamed_addr {
dec_label_pc_4072bf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = mul i32 %0, 8, !insn.addr !3036
  %2 = udiv i32 %0, 536870912, !insn.addr !3036
  %3 = or i32 %2, %1, !insn.addr !3036
  %4 = inttoptr i32 %0 to i32*, !insn.addr !3036
  store i32 %3, i32* %4, align 4, !insn.addr !3036
  %5 = call i32 @function_4072db(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !3037
  ret i32 %5, !insn.addr !3037
}

define i32 @function_4072c9() local_unnamed_addr {
dec_label_pc_4072c9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %0, 255, !insn.addr !3038
  ret i32 %1, !insn.addr !3039
}

define i32 @function_4072db(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_4072db:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -1959365334, !insn.addr !3040
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3040
  %4 = load i8, i8* %3, align 1, !insn.addr !3040
  %5 = and i8 %4, 27, !insn.addr !3040
  store i8 %5, i8* %3, align 1, !insn.addr !3040
  ret i32 %1, !insn.addr !3041
}

define i32 @function_407d58() local_unnamed_addr {
dec_label_pc_407d58:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3042
}

define i32 @function_407d80(i32 %arg1) local_unnamed_addr {
dec_label_pc_407d80:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3043
}

define i32 @function_407db3(i32 %arg1) local_unnamed_addr {
dec_label_pc_407db3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3044
}

define i32 @function_407dbd() local_unnamed_addr {
dec_label_pc_407dbd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3045
}

define i32 @function_407df2(i32 %arg1) local_unnamed_addr {
dec_label_pc_407df2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = xor i8 %1, -117, !insn.addr !3046
  %3 = inttoptr i32 %0 to i8*, !insn.addr !3046
  store i8 %2, i8* %3, align 1, !insn.addr !3046
  ret i32 %0, !insn.addr !3047
}

define i32 @function_407dfa() local_unnamed_addr {
dec_label_pc_407dfa:
  %0 = call i32 @function_8bec73b1(), !insn.addr !3048
  ret i32 %0, !insn.addr !3048
}

define i32 @function_407e0c(i16 %arg1) local_unnamed_addr {
dec_label_pc_407e0c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_407e22() local_unnamed_addr {
dec_label_pc_407e22:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3049
}

define i32 @function_407e30(i32 %arg1) local_unnamed_addr {
dec_label_pc_407e30:
  %0 = call i32 @__asm_in.2(i32 13), !insn.addr !3050
  ret i32 %0, !insn.addr !3051
}

define i32 @function_407e44() local_unnamed_addr {
dec_label_pc_407e44:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_2e47448a(i32 %0), !insn.addr !3052
  ret i32 %1, !insn.addr !3052
}

define i32 @function_407e63() local_unnamed_addr {
dec_label_pc_407e63:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !3053
  %3 = inttoptr i32 %0 to i8*, !insn.addr !3053
  store i8 %2, i8* %3, align 1, !insn.addr !3053
  %4 = load i64, i64* inttoptr (i32 109588484 to i64*), align 4, !insn.addr !3054
  %5 = call i32 @__asm_bound(i64 %4), !insn.addr !3054
  %6 = call i32 @__asm_hlt(), !insn.addr !3055
  ret i32 %6, !insn.addr !3056
}

define i32 @function_407e84(i32 %arg1) local_unnamed_addr {
dec_label_pc_407e84:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = ashr i32 %2, 31, !insn.addr !3057
  %5 = zext i32 %2 to i64, !insn.addr !3058
  %6 = zext i32 %4 to i64, !insn.addr !3058
  %7 = mul i64 %6, 4294967296, !insn.addr !3058
  %8 = or i64 %7, %5, !insn.addr !3058
  %9 = sdiv i64 %8, 10, !insn.addr !3058
  %10 = trunc i64 %9 to i32, !insn.addr !3058
  %11 = srem i64 %8, 10, !insn.addr !3058
  %12 = trunc i64 %11 to i32, !insn.addr !3058
  %13 = add i32 %1, -1207861558, !insn.addr !3059
  %14 = inttoptr i32 %13 to i8*, !insn.addr !3059
  %15 = load i8, i8* %14, align 1, !insn.addr !3059
  %16 = lshr i8 %15, 7, !insn.addr !3059
  %17 = mul i8 %15, 2, !insn.addr !3059
  %18 = or i8 %16, %17, !insn.addr !3059
  store i8 %18, i8* %14, align 1, !insn.addr !3059
  %19 = load i16, i16* inttoptr (i32 39633389 to i16*), align 2, !insn.addr !3060
  %20 = zext i16 %19 to i32, !insn.addr !3060
  %21 = and i32 %10, -65536, !insn.addr !3060
  %22 = or i32 %21, %20, !insn.addr !3060
  %23 = load i32, i32* inttoptr (i32 118 to i32*), align 4, !insn.addr !3061
  %24 = xor i32 %23, -24, !insn.addr !3061
  store i32 %24, i32* inttoptr (i32 118 to i32*), align 4, !insn.addr !3061
  %25 = add i32 %20, %12, !insn.addr !3062
  %26 = bitcast i32* %esi to i8*
  %27 = load i8, i8* %26, align 4, !insn.addr !3063
  %28 = or i8 %27, 48, !insn.addr !3063
  %29 = load i32, i32* %esi, align 4, !insn.addr !3063
  %30 = inttoptr i32 %29 to i8*, !insn.addr !3063
  store i8 %28, i8* %30, align 1, !insn.addr !3063
  %31 = trunc i32 %25 to i8, !insn.addr !3064
  %32 = load i32, i32* %esi, align 4, !insn.addr !3064
  %33 = inttoptr i32 %32 to i8*, !insn.addr !3064
  store i8 %31, i8* %33, align 1, !insn.addr !3064
  %34 = load i32, i32* %esi, align 4, !insn.addr !3065
  %35 = add i32 %34, 1, !insn.addr !3065
  %36 = inttoptr i32 %35 to i8*, !insn.addr !3066
  %37 = load i8, i8* %36, align 1, !insn.addr !3066
  %38 = inttoptr i32 %0 to i8*, !insn.addr !3066
  store i8 %37, i8* %38, align 1, !insn.addr !3066
  %39 = inttoptr i32 %22 to i32*, !insn.addr !3067
  %40 = load i32, i32* %39, align 4, !insn.addr !3067
  %41 = mul i32 %40, 256, !insn.addr !3067
  store i32 %41, i32* %39, align 4, !insn.addr !3067
  %42 = call i32 @function_407e0c(i16 %3), !insn.addr !3068
  ret i32 %42, !insn.addr !3068
}

define i32 @function_407eb3() local_unnamed_addr {
dec_label_pc_407eb3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = and i32 %1, 255, !insn.addr !3069
  %3 = add i32 %2, %0, !insn.addr !3069
  %4 = inttoptr i32 %3 to i8*, !insn.addr !3069
  %5 = load i8, i8* %4, align 1, !insn.addr !3069
  %6 = zext i8 %5 to i32, !insn.addr !3069
  %7 = and i32 %1, -256, !insn.addr !3069
  %8 = or i32 %7, %6, !insn.addr !3069
  ret i32 %8, !insn.addr !3070
}

define i32 @function_407eb7() local_unnamed_addr {
dec_label_pc_407eb7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 95, !insn.addr !3071
  %4 = inttoptr i32 %3 to i8*, !insn.addr !3071
  %5 = load i8, i8* %4, align 1, !insn.addr !3071
  %6 = trunc i32 %1 to i8, !insn.addr !3071
  %7 = add i8 %5, %6, !insn.addr !3071
  store i8 %7, i8* %4, align 1, !insn.addr !3071
  ret i32 %2, !insn.addr !3072
}

define i32 @function_407ec0(i32 %arg1) local_unnamed_addr {
dec_label_pc_407ec0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 24, !insn.addr !3073
  %4 = inttoptr i32 %3 to i16*, !insn.addr !3073
  %5 = load i16, i16* %4, align 2, !insn.addr !3073
  %6 = trunc i32 %0 to i16, !insn.addr !3073
  call void @__asm_arpl(i16 %5, i16 %6), !insn.addr !3073
  %7 = add i32 %2, -482669312, !insn.addr !3074
  ret i32 %7, !insn.addr !3075
}

define i32 @function_407efd() local_unnamed_addr {
dec_label_pc_407efd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %0, -585231285, !insn.addr !3076
  %6 = inttoptr i32 %5 to i8*, !insn.addr !3076
  %7 = load i8, i8* %6, align 1, !insn.addr !3076
  %8 = udiv i32 %2, 256, !insn.addr !3076
  %9 = trunc i32 %8 to i8, !insn.addr !3076
  %10 = zext i1 %4 to i8, !insn.addr !3076
  %11 = add i8 %7, %9, !insn.addr !3076
  %12 = add i8 %11, %10, !insn.addr !3076
  store i8 %12, i8* %6, align 1, !insn.addr !3076
  %13 = mul i32 %1, 256
  %14 = and i32 %13, 65280
  %15 = or i32 %14, %3, !insn.addr !3077
  ret i32 %15, !insn.addr !3078
}

define i32 @function_407f26() local_unnamed_addr {
dec_label_pc_407f26:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_407f48() local_unnamed_addr {
dec_label_pc_407f48:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %3 = add i32 %0, 807263468, !insn.addr !3079
  %4 = fptrunc x86_fp80 %2 to double, !insn.addr !3079
  %5 = inttoptr i32 %3 to double*, !insn.addr !3079
  store double %4, double* %5, align 4, !insn.addr !3079
  ret i32 %1, !insn.addr !3080
}

define i32 @function_407f68() local_unnamed_addr {
dec_label_pc_407f68:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3081
}

define i32 @function_407f77() local_unnamed_addr {
dec_label_pc_407f77:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_4()
  %6 = add i32 %4, 1, !insn.addr !3082
  %7 = add i32 %1, -2091848634, !insn.addr !3083
  %8 = inttoptr i32 %7 to i8*, !insn.addr !3083
  %9 = load i8, i8* %8, align 1, !insn.addr !3083
  %10 = trunc i32 %3 to i8
  %11 = add i8 %10, 1, !insn.addr !3083
  %12 = add i8 %11, %9, !insn.addr !3083
  store i8 %12, i8* %8, align 1, !insn.addr !3083
  %13 = add i32 %4, 1648410905, !insn.addr !3084
  %14 = icmp ult i32 %13, %6, !insn.addr !3084
  %15 = add i32 %1, -11, !insn.addr !3085
  %16 = fptrunc x86_fp80 %5 to double, !insn.addr !3085
  %17 = inttoptr i32 %15 to double*, !insn.addr !3085
  store double %16, double* %17, align 4, !insn.addr !3085
  %18 = call i32 @__asm_fnsave(), !insn.addr !3086
  %19 = sext i32 %18 to i864, !insn.addr !3086
  %20 = mul i32 %0, 8, !insn.addr !3086
  %21 = add i32 %20, -36, !insn.addr !3086
  %22 = add i32 %21, %2, !insn.addr !3086
  %23 = inttoptr i32 %22 to i864*, !insn.addr !3086
  store i864 %19, i864* %23, align 4, !insn.addr !3086
  %24 = select i1 %14, i32 9, i32 8, !insn.addr !3087
  %25 = sub i32 %18, %24, !insn.addr !3087
  %26 = and i32 %25, 255, !insn.addr !3087
  %27 = and i32 %18, -256, !insn.addr !3087
  %28 = or i32 %26, %27, !insn.addr !3087
  ret i32 %28, !insn.addr !3088
}

define i32 @function_407f9e() local_unnamed_addr {
dec_label_pc_407f9e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3089
}

define i32 @function_407fc1() local_unnamed_addr {
dec_label_pc_407fc1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_407fc4(i16 %arg1) local_unnamed_addr {
dec_label_pc_407fc4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1, !insn.addr !3090
  %3 = icmp ult i32 %2, %1, !insn.addr !3091
  br i1 %3, label %4, label %dec_label_pc_407fcb, !insn.addr !3092

; <label>:4:                                      ; preds = %dec_label_pc_407fc4
  %5 = call i32 @function_407fc1(), !insn.addr !3092
  br label %dec_label_pc_407fcb, !insn.addr !3092

dec_label_pc_407fcb:                              ; preds = %4, %dec_label_pc_407fc4
  %6 = call i32 @function_408015(), !insn.addr !3093
  ret i32 %6, !insn.addr !3093
}

define i32 @function_407fcd(i32 %arg1) local_unnamed_addr {
dec_label_pc_407fcd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i32 @__asm_fnsave(), !insn.addr !3094
  %3 = sext i32 %2 to i864, !insn.addr !3094
  %4 = inttoptr i32 %0 to i864*, !insn.addr !3094
  store i864 %3, i864* %4, align 4, !insn.addr !3094
  %5 = select i1 %1, i32 1646510641, i32 1646510640, !insn.addr !3095
  %6 = sub i32 %2, %5, !insn.addr !3095
  ret i32 %6, !insn.addr !3096
}

define x86_fp80 @function_407fda() local_unnamed_addr {
dec_label_pc_407fda:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !3097
  %5 = inttoptr i32 %2 to i8*, !insn.addr !3097
  store i8 %4, i8* %5, align 1, !insn.addr !3097
  %6 = inttoptr i32 %0 to i32*, !insn.addr !3098
  %7 = add i32 %1, 8, !insn.addr !3099
  %8 = inttoptr i32 %7 to double*, !insn.addr !3099
  %9 = load double, double* %8, align 4, !insn.addr !3099
  %10 = fpext double %9 to x86_fp80, !insn.addr !3099
  %11 = fmul x86_fp80 %10, %10, !insn.addr !3100
  ret x86_fp80 %11, !insn.addr !3101
}

define i32 @function_407ff0() local_unnamed_addr {
dec_label_pc_407ff0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3102
}

define i32 @function_407fff() local_unnamed_addr {
dec_label_pc_407fff:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3103
}

define i32 @function_408009() local_unnamed_addr {
dec_label_pc_408009:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3104
}

define i32 @function_408015() local_unnamed_addr {
dec_label_pc_408015:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__asm_hlt(), !insn.addr !3105
  %2 = add i32 %0, -4, !insn.addr !3106
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3106
  %4 = call x86_fp80 @function_40801d(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3107
  %5 = fptrunc x86_fp80 %4 to float, !insn.addr !3107
  %6 = bitcast float %5 to i32, !insn.addr !3107
  ret i32 %6, !insn.addr !3107
}

define x86_fp80 @function_40801b() local_unnamed_addr {
dec_label_pc_40801b:
  %0 = call x86_fp80 @__decompiler_undefined_function_4()
  ret x86_fp80 %0, !insn.addr !3108
}

define x86_fp80 @function_40801d(i32 %arg1) local_unnamed_addr {
dec_label_pc_40801d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call x86_fp80 @__decompiler_undefined_function_4()
  %4 = add i32 %0, -76, !insn.addr !3109
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3109
  %6 = load i32, i32* %5, align 4, !insn.addr !3109
  %7 = and i32 %6, %1, !insn.addr !3110
  %8 = icmp eq i32 %7, 0, !insn.addr !3110
  %9 = icmp eq i1 %8, false, !insn.addr !3111
  br label %dec_label_pc_408029, !insn.addr !3112

dec_label_pc_408029:                              ; preds = %dec_label_pc_408029, %dec_label_pc_40801d
  br i1 %9, label %dec_label_pc_408029, label %dec_label_pc_40802d, !insn.addr !3111

dec_label_pc_40802d:                              ; preds = %dec_label_pc_408029
  %10 = add i32 %6, 59, !insn.addr !3113
  %11 = and i32 %10, 255, !insn.addr !3113
  %12 = and i32 %6, -256, !insn.addr !3113
  %13 = or i32 %11, %12, !insn.addr !3113
  %14 = add i32 %0, 16, !insn.addr !3114
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3114
  %16 = load i32, i32* %15, align 4, !insn.addr !3114
  %17 = xor i32 %16, %13, !insn.addr !3114
  store i32 %17, i32* %15, align 4, !insn.addr !3114
  %18 = add i32 %2, 247346, !insn.addr !3115
  %19 = inttoptr i32 %18 to float*, !insn.addr !3115
  %20 = load float, float* %19, align 4, !insn.addr !3115
  %21 = fpext float %20 to x86_fp80, !insn.addr !3115
  %22 = fmul x86_fp80 %3, %21, !insn.addr !3115
  ret x86_fp80 %22, !insn.addr !3116
}

define i32 @function_408047(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_408047:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = icmp ugt i32 %0, %1
  br i1 %5, label %dec_label_pc_408086, label %dec_label_pc_408050, !insn.addr !3117

dec_label_pc_408050:                              ; preds = %dec_label_pc_408047
  ret i32 %4, !insn.addr !3118

dec_label_pc_408086:                              ; preds = %dec_label_pc_408047
  %6 = trunc i32 %4 to i8
  %7 = add i8 %6, 55, !insn.addr !3119
  %8 = call i8 @llvm.ctpop.i8(i8 %7), !range !405, !insn.addr !3119
  %9 = and i8 %8, 1, !insn.addr !3119
  %10 = icmp eq i8 %9, 0, !insn.addr !3119
  br i1 %10, label %dec_label_pc_4080df, label %dec_label_pc_40808f, !insn.addr !3120

dec_label_pc_40808f:                              ; preds = %dec_label_pc_408086
  %11 = add i32 %2, -4, !insn.addr !3121
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3121
  %13 = load i32, i32* %12, align 4, !insn.addr !3121
  %14 = icmp ult i32 %1, %13, !insn.addr !3122
  br i1 %14, label %dec_label_pc_4080a0, label %dec_label_pc_408093, !insn.addr !3123

dec_label_pc_408093:                              ; preds = %dec_label_pc_40808f
  %15 = add i32 %3, 79, !insn.addr !3124
  %16 = inttoptr i32 %15 to i8*, !insn.addr !3124
  store i8 0, i8* %16, align 1, !insn.addr !3124
  %17 = call i32 @__asm_in.2(i32 93), !insn.addr !3125
  ret i32 %17, !insn.addr !3126

dec_label_pc_4080a0:                              ; preds = %dec_label_pc_40808f
  %18 = add i32 %3, 118, !insn.addr !3127
  %19 = inttoptr i32 %18 to i8*, !insn.addr !3127
  %20 = load i8, i8* %19, align 1, !insn.addr !3127
  %21 = icmp eq i8 %20, -128, !insn.addr !3128
  br i1 %21, label %dec_label_pc_4080d6, label %dec_label_pc_4080ae, !insn.addr !3128

dec_label_pc_4080ae:                              ; preds = %dec_label_pc_4080a0
  %22 = add i32 %2, 28, !insn.addr !3129
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3129
  %24 = load i32, i32* %23, align 4, !insn.addr !3129
  %25 = add i32 %1, 5, !insn.addr !3130
  %26 = inttoptr i32 %25 to i8*, !insn.addr !3130
  %27 = load i8, i8* %26, align 1, !insn.addr !3130
  %28 = udiv i32 %24, 256, !insn.addr !3130
  %29 = trunc i32 %28 to i8, !insn.addr !3130
  %30 = xor i8 %27, %29, !insn.addr !3130
  store i8 %30, i8* %26, align 1, !insn.addr !3130
  %31 = add i32 %1, -1, !insn.addr !3131
  %32 = inttoptr i32 %31 to i8*, !insn.addr !3132
  %33 = load i8, i8* %32, align 1, !insn.addr !3132
  %34 = add i8 %33, 1, !insn.addr !3132
  store i8 %34, i8* %32, align 1, !insn.addr !3132
  ret i32 %1, !insn.addr !3133

dec_label_pc_4080d6:                              ; preds = %dec_label_pc_4080a0
  %35 = inttoptr i32 %1 to i8*, !insn.addr !3134
  store i8 0, i8* %35, align 1, !insn.addr !3134
  ret i32 %1, !insn.addr !3135

dec_label_pc_4080df:                              ; preds = %dec_label_pc_408086
  %36 = call i32 @__asm_in.2(i32 93), !insn.addr !3136
  %37 = and i32 %36, 138, !insn.addr !3137
  %38 = or i32 %37, 117, !insn.addr !3137
  %39 = and i32 %36, -256, !insn.addr !3137
  %40 = add i32 %38, %3, !insn.addr !3138
  %41 = inttoptr i32 %40 to i8*, !insn.addr !3138
  %42 = load i8, i8* %41, align 1, !insn.addr !3138
  %43 = zext i8 %42 to i32, !insn.addr !3138
  %44 = or i32 %39, %43, !insn.addr !3138
  ret i32 %44, !insn.addr !3139
}

define i32 @function_4080f2() local_unnamed_addr {
dec_label_pc_4080f2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = trunc i32 %3 to i16, !insn.addr !3140
  %5 = call i8 @__asm_in.4(i16 %4), !insn.addr !3140
  %6 = trunc i32 %1 to i8, !insn.addr !3141
  %7 = inttoptr i32 %0 to i8*, !insn.addr !3141
  store i8 %6, i8* %7, align 1, !insn.addr !3141
  %8 = add i32 %2, -14, !insn.addr !3142
  %9 = inttoptr i32 %8 to i8*, !insn.addr !3142
  %10 = load i8, i8* %9, align 1, !insn.addr !3142
  %11 = trunc i32 %3 to i8, !insn.addr !3142
  %12 = or i8 %10, %11, !insn.addr !3142
  store i8 %12, i8* %9, align 1, !insn.addr !3142
  ret i32 %1, !insn.addr !3143
}

define i32 @function_408100(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_408100:
  %eax.0.reg2mem = alloca i32, !insn.addr !3144
  %esi.0.reg2mem = alloca i32, !insn.addr !3144
  %esp.0.reg2mem = alloca i32, !insn.addr !3144
  %ecx.0.reg2mem = alloca i32, !insn.addr !3144
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  br i1 %5, label %dec_label_pc_408110, label %dec_label_pc_408105, !insn.addr !3145

dec_label_pc_408105:                              ; preds = %dec_label_pc_408100
  %6 = trunc i32 %0 to i8
  %7 = and i32 %4, -256, !insn.addr !3146
  %8 = udiv i32 %2, 256, !insn.addr !3147
  %9 = trunc i32 %8 to i8, !insn.addr !3147
  %10 = add i8 %9, %6, !insn.addr !3147
  %11 = inttoptr i32 %0 to i8*, !insn.addr !3147
  store i8 %10, i8* %11, align 1, !insn.addr !3147
  %12 = trunc i32 %2 to i16, !insn.addr !3148
  %13 = call i8 @__asm_in.4(i16 %12), !insn.addr !3148
  %14 = sext i8 %13 to i32, !insn.addr !3148
  %15 = or i32 %7, %14, !insn.addr !3148
  %16 = inttoptr i32 %15 to i8*, !insn.addr !3149
  %17 = load i8, i8* %16, align 1, !insn.addr !3149
  %18 = add i8 %17, %13, !insn.addr !3149
  store i8 %18, i8* %16, align 1, !insn.addr !3149
  br label %dec_label_pc_408122, !insn.addr !3150

dec_label_pc_408110:                              ; preds = %dec_label_pc_408100
  %19 = icmp eq i32 %3, 1, !insn.addr !3151
  br i1 %19, label %dec_label_pc_408115, label %dec_label_pc_408190, !insn.addr !3151

dec_label_pc_408115:                              ; preds = %dec_label_pc_408110
  %20 = load i32, i32* inttoptr (i32 17 to i32*), align 4, !insn.addr !3152
  %21 = and i32 %4, -256, !insn.addr !3153
  %22 = inttoptr i32 %20 to i32*, !insn.addr !3154
  store i32 %21, i32* %22, align 4, !insn.addr !3154
  %23 = and i32 %4, -65536, !insn.addr !3155
  %24 = or i32 %23, 512, !insn.addr !3155
  ret i32 %24, !insn.addr !3155

dec_label_pc_408122:                              ; preds = %dec_label_pc_408130, %dec_label_pc_408105
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %25 = zext i32 %ecx.0.reload to i64, !insn.addr !3156
  %26 = mul nuw i64 %25, 3435973837, !insn.addr !3156
  %27 = trunc i64 %26 to i32, !insn.addr !3156
  %28 = and i64 %26, 17179869184
  %29 = icmp ne i64 %28, 0, !insn.addr !3157
  %30 = icmp eq i1 %29, false, !insn.addr !3158
  store i32 %27, i32* %eax.0.reg2mem, !insn.addr !3158
  br i1 %30, label %31, label %dec_label_pc_408130, !insn.addr !3158

; <label>:31:                                     ; preds = %dec_label_pc_408122
  %32 = call i32 @function_4080f2(), !insn.addr !3158
  store i32 %32, i32* %eax.0.reg2mem, !insn.addr !3158
  br label %dec_label_pc_408130, !insn.addr !3158

dec_label_pc_408130:                              ; preds = %31, %dec_label_pc_408122
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %33 = add i32 %esi.0.reload, -1, !insn.addr !3159
  %34 = trunc i32 %eax.0.reload to i16, !insn.addr !3160
  %sext1 = mul i16 %34, 256
  %35 = sdiv i16 %sext1, 256, !insn.addr !3160
  %36 = mul nsw i16 %35, -119, !insn.addr !3160
  %37 = zext i16 %36 to i32, !insn.addr !3160
  %38 = and i32 %eax.0.reload, -65536, !insn.addr !3160
  %39 = or i32 %38, %37, !insn.addr !3160
  %40 = sub i32 %ecx.0.reload, %37, !insn.addr !3161
  %41 = and i32 %40, 255, !insn.addr !3161
  %42 = and i32 %ecx.0.reload, -256, !insn.addr !3161
  %43 = or i32 %41, %42, !insn.addr !3161
  %44 = inttoptr i32 %39 to i32*, !insn.addr !3162
  %45 = load i32, i32* %44, align 4, !insn.addr !3162
  %46 = mul i32 %45, 256, !insn.addr !3162
  store i32 %46, i32* %44, align 4, !insn.addr !3162
  %47 = add i32 %esp.0.reload, 2, !insn.addr !3163
  %48 = icmp ult i64 %26, 34359738368, !insn.addr !3164
  %49 = icmp eq i1 %48, false, !insn.addr !3165
  store i32 %43, i32* %ecx.0.reg2mem, !insn.addr !3165
  store i32 %47, i32* %esp.0.reg2mem, !insn.addr !3165
  store i32 %33, i32* %esi.0.reg2mem, !insn.addr !3165
  br i1 %49, label %dec_label_pc_408122, label %dec_label_pc_408140, !insn.addr !3165

dec_label_pc_408140:                              ; preds = %dec_label_pc_408130
  %50 = inttoptr i32 %47 to i16*, !insn.addr !3163
  %51 = add i32 %1, 126, !insn.addr !3166
  %52 = inttoptr i32 %51 to i32*, !insn.addr !3166
  %53 = load i32, i32* %52, align 4, !insn.addr !3166
  %54 = sub i32 %0, %33, !insn.addr !3167
  %55 = inttoptr i32 %53 to i32*, !insn.addr !3168
  store i32 %54, i32* %55, align 4, !insn.addr !3168
  ret i32 %33, !insn.addr !3169

dec_label_pc_408190:                              ; preds = %dec_label_pc_408110
  ret i32 %4, !insn.addr !3170
}

define i32 @function_4081a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4081a0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1532957892, !insn.addr !3171
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3171
  %4 = load i32, i32* %3, align 4, !insn.addr !3171
  %5 = add i32 %4, 1, !insn.addr !3171
  store i32 %5, i32* %3, align 4, !insn.addr !3171
  ret i32 %1, !insn.addr !3172
}

define i32 @function_4081ab() local_unnamed_addr {
dec_label_pc_4081ab:
  %0 = call i32 @function_ebac8268(), !insn.addr !3173
  ret i32 %0, !insn.addr !3173
}

define i32 @function_4081db() local_unnamed_addr {
dec_label_pc_4081db:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4081de() local_unnamed_addr {
dec_label_pc_4081de:
  %0 = call i32 @function_40b890(), !insn.addr !3174
  ret i32 %0, !insn.addr !3175
}

define i32 @function_4081ef() local_unnamed_addr {
dec_label_pc_4081ef:
  %0 = call i32 @function_8032292a(), !insn.addr !3176
  ret i32 %0, !insn.addr !3176
}

define i32 @function_4081fa(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_4081fa:
  %eax.0.reg2mem = alloca i32, !insn.addr !3177
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_4 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_4, align 4
  %4 = or i32 %3, %1, !insn.addr !3178
  %5 = icmp eq i32 %4, 0, !insn.addr !3178
  %6 = icmp eq i1 %5, false, !insn.addr !3179
  br i1 %6, label %7, label %dec_label_pc_408200, !insn.addr !3179

; <label>:7:                                      ; preds = %dec_label_pc_4081fa
  %8 = call i32 @function_4081db(), !insn.addr !3179
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !3179
  br label %dec_label_pc_408200, !insn.addr !3179

dec_label_pc_408200:                              ; preds = %7, %dec_label_pc_4081fa
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %9 = sub i32 %eax.0.reload, %0, !insn.addr !3180
  %10 = add i32 %2, 1533003659, !insn.addr !3181
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3181
  %12 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !3181
  store i32 %12, i32* %11, align 4, !insn.addr !3181
  ret i32 %9, !insn.addr !3182
}

define i32 @function_408216() local_unnamed_addr {
dec_label_pc_408216:
  %0 = call i32 @function_90909090(), !insn.addr !3183
  ret i32 %0, !insn.addr !3183
}

define i32 @function_408238(i32 %arg1) local_unnamed_addr {
dec_label_pc_408238:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3184
}

define i32 @function_40827c() local_unnamed_addr {
dec_label_pc_40827c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_4082fe(i32 %0, i32 1, i32 -2), !insn.addr !3185
  ret i32 %1, !insn.addr !3185
}

define i32 @function_408294() local_unnamed_addr {
dec_label_pc_408294:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_fffb8cf0(i32 %0), !insn.addr !3186
  %3 = call i32 @__asm_int1(), !insn.addr !3187
  %4 = add i32 %3, 43, !insn.addr !3188
  %5 = inttoptr i32 %4 to i8*, !insn.addr !3188
  %6 = load i8, i8* %5, align 1, !insn.addr !3188
  %7 = trunc i32 %1 to i8, !insn.addr !3188
  %8 = and i8 %6, %7, !insn.addr !3188
  store i8 %8, i8* %5, align 1, !insn.addr !3188
  ret i32 %3, !insn.addr !3188
}

define i32 @function_4082a6(i32 %arg1) local_unnamed_addr {
dec_label_pc_4082a6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i32*, !insn.addr !3189
  %2 = call i32 @__asm_in.2(i32 93), !insn.addr !3190
  ret i32 %2, !insn.addr !3191
}

define i32 @function_4082c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_4082c8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3192
}

define i32 @function_4082cd() local_unnamed_addr {
dec_label_pc_4082cd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @unknown_ffa117eb(i32 %0, i32 68), !insn.addr !3193
  call void @__asm_int(i32 81), !insn.addr !3194
  %2 = call i32 @unknown_6d65(), !insn.addr !3195
  ret i32 %2, !insn.addr !3196
}

define i32 @function_4082fe(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_4082fe:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3197
}

define i32 @function_4082ff(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_4082ff:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = inttoptr i32 %0 to i8*, !insn.addr !3198
  store i8 63, i8* %2, align 1, !insn.addr !3198
  %3 = inttoptr i32 %1 to i32*, !insn.addr !3199
  %4 = call i32 @__asm_hlt(), !insn.addr !3200
  ret i32 %4, !insn.addr !3201
}

define i32 @function_408316(i32 %arg1) local_unnamed_addr {
dec_label_pc_408316:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__asm_in.2(i32 251), !insn.addr !3202
  %4 = add i32 %1, 1584861262, !insn.addr !3203
  %5 = sub i32 %4, %2, !insn.addr !3204
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3204
  %7 = load i32, i32* %6, align 4, !insn.addr !3204
  %8 = or i32 %7, -309657098, !insn.addr !3204
  store i32 %8, i32* %6, align 4, !insn.addr !3204
  %9 = add i32 %0, -2, !insn.addr !3205
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3205
  %11 = add i32 %0, -16, !insn.addr !3206
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3206
  %13 = load i32, i32* %12, align 4, !insn.addr !3206
  %14 = add i32 %0, -6, !insn.addr !3207
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3207
  store i32 %13, i32* %15, align 4, !insn.addr !3207
  %16 = add i32 %arg1, 1364389197, !insn.addr !3208
  %17 = add i32 %0, -10, !insn.addr !3209
  %18 = inttoptr i32 %17 to i32*, !insn.addr !3209
  store i32 1, i32* %18, align 4, !insn.addr !3209
  %19 = add i32 %0, -14, !insn.addr !3210
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3210
  store i32 %16, i32* %20, align 4, !insn.addr !3210
  ret i32 %19, !insn.addr !3211
}

define i32 @function_40835d() local_unnamed_addr {
dec_label_pc_40835d:
  %ebp.1.reg2mem = alloca i32, !insn.addr !3212
  %esp.1.reg2mem = alloca i32, !insn.addr !3212
  %ebx.0.reg2mem = alloca i32, !insn.addr !3212
  %edx.0.reg2mem = alloca i32, !insn.addr !3212
  %ecx.1.reg2mem = alloca i32, !insn.addr !3212
  %eax.0.reg2mem = alloca i32, !insn.addr !3212
  %cf.0.reg2mem = alloca i32, !insn.addr !3212
  %edi.0.reg2mem = alloca i32, !insn.addr !3212
  %ebp.0.reg2mem = alloca i32, !insn.addr !3212
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !3212
  %ecx.0.reg2mem = alloca i32, !insn.addr !3212
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-130 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %8 = load i32, i32* inttoptr (i32 574650973 to i32*), align 4, !insn.addr !3212
  %9 = and i32 %8, -65281, !insn.addr !3213
  %10 = or i32 %9, 36864, !insn.addr !3213
  %11 = and i32 %3, 14
  %12 = icmp ugt i32 %11, 9, !insn.addr !3214
  %13 = or i1 %12, %7, !insn.addr !3214
  %14 = add i32 %3, 10, !insn.addr !3214
  %15 = select i1 %13, i32 %14, i32 %3, !insn.addr !3214
  %16 = sext i1 %13 to i32, !insn.addr !3214
  %17 = and i32 %15, 15, !insn.addr !3214
  %18 = and i32 %3, -65536, !insn.addr !3214
  %19 = mul i32 %16, 256
  %20 = add i32 %19, %3
  %21 = and i32 %20, 65280, !insn.addr !3214
  %22 = or i32 %21, %18
  %23 = or i32 %22, %17, !insn.addr !3214
  %24 = add i32 %23, -1869574000, !insn.addr !3215
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3215
  %26 = load i32, i32* %25, align 4, !insn.addr !3215
  %27 = zext i1 %13 to i32, !insn.addr !3215
  %28 = add i32 %2, -83, !insn.addr !3216
  %29 = inttoptr i32 %28 to i8*, !insn.addr !3216
  %30 = load i8, i8* %29, align 1, !insn.addr !3216
  %31 = add i32 %1, 32, !insn.addr !3215
  %32 = add i32 %31, %27, !insn.addr !3215
  %33 = add i32 %32, %26, !insn.addr !3217
  %34 = inttoptr i32 %33 to i32*, !insn.addr !3217
  %35 = load i32, i32* %34, align 4, !insn.addr !3217
  store i32 %35, i32* %stack_var_-108, align 4, !insn.addr !3218
  %36 = add i32 %2, 24, !insn.addr !3219
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3219
  %38 = load i32, i32* %37, align 4, !insn.addr !3219
  %39 = icmp eq i8 %30, 102, !insn.addr !3220
  %40 = icmp eq i1 %39, false, !insn.addr !3221
  store i32* %stack_var_-108, i32** %esp.0.in.reg2mem, !insn.addr !3221
  store i32 %38, i32* %edi.0.reg2mem, !insn.addr !3221
  br i1 %40, label %dec_label_pc_4083a2, label %dec_label_pc_408386, !insn.addr !3221

dec_label_pc_408386:                              ; preds = %dec_label_pc_40835d
  %41 = trunc i32 %0 to i8
  %42 = zext i8 %30 to i32, !insn.addr !3216
  %43 = or i32 %22, %42, !insn.addr !3216
  %44 = add i32 %2, 1, !insn.addr !3222
  %45 = inttoptr i32 %38 to i8*, !insn.addr !3223
  store i8 %41, i8* %45, align 1, !insn.addr !3223
  %46 = select i1 %6, i32 -1, i32 1, !insn.addr !3223
  %47 = add i32 %38, %46, !insn.addr !3223
  %48 = add i32 %2, 17, !insn.addr !3224
  %49 = inttoptr i32 %48 to i32*, !insn.addr !3224
  %50 = load i32, i32* %49, align 4, !insn.addr !3224
  %51 = add i32 %2, 25, !insn.addr !3225
  %52 = add i32 %2, 13, !insn.addr !3226
  %53 = inttoptr i32 %52 to i32*, !insn.addr !3226
  %54 = load i32, i32* %53, align 4, !insn.addr !3226
  store i32 %54, i32* %stack_var_-130, align 4, !insn.addr !3227
  %55 = load i32, i32* %stack_var_-108, align 4, !insn.addr !3228
  %56 = call i32 @function_408560(i32 %54, i32 %50, i32 %47, i32 %51, i32 %43, i16 %4, i32 %55, i32 %0, i32 %10), !insn.addr !3228
  call void @__asm_into(i32 %5), !insn.addr !3229
  store i32 %54, i32* %ecx.0.reg2mem, !insn.addr !3230
  store i32* %stack_var_-130, i32** %esp.0.in.reg2mem, !insn.addr !3230
  store i32 %44, i32* %ebp.0.reg2mem, !insn.addr !3230
  store i32 %47, i32* %edi.0.reg2mem, !insn.addr !3230
  br label %dec_label_pc_4083a2, !insn.addr !3230

dec_label_pc_4083a2:                              ; preds = %dec_label_pc_408386, %dec_label_pc_40835d
  %57 = icmp ult i8 %30, 102, !insn.addr !3220
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %58 = add i32 %ebp.0.reload, -1957685014, !insn.addr !3231
  %59 = inttoptr i32 %58 to i8*, !insn.addr !3231
  %60 = load i8, i8* %59, align 1, !insn.addr !3231
  %61 = trunc i32 %ecx.0.reload to i8, !insn.addr !3231
  %62 = zext i1 %57 to i8, !insn.addr !3231
  %63 = add i8 %60, %61, !insn.addr !3231
  %64 = add i8 %63, %62, !insn.addr !3231
  %65 = icmp ule i8 %64, %60, !insn.addr !3231
  %66 = icmp ult i8 %63, %60, !insn.addr !3231
  %67 = select i1 %57, i1 %65, i1 %66, !insn.addr !3231
  store i8 %64, i8* %59, align 1, !insn.addr !3231
  %68 = add i32 %ebp.0.reload, 1, !insn.addr !3232
  %69 = call i32 @__asm_wait(), !insn.addr !3233
  %70 = add i32 %edi.0.reload, 1, !insn.addr !3234
  %71 = add i32 %esp.0, -4, !insn.addr !3235
  %72 = inttoptr i32 %71 to i32*, !insn.addr !3235
  store i32 %ecx.0.reload, i32* %72, align 4, !insn.addr !3235
  %73 = add i32 %ebp.0.reload, 13, !insn.addr !3236
  %74 = inttoptr i32 %73 to i32*, !insn.addr !3236
  %75 = load i32, i32* %74, align 4, !insn.addr !3236
  %phitmp = select i1 %67, i32 255, i32 0
  store i32 %phitmp, i32* %cf.0.reg2mem, !insn.addr !3236
  store i32 %69, i32* %eax.0.reg2mem, !insn.addr !3236
  store i32 %75, i32* %ecx.1.reg2mem, !insn.addr !3236
  store i32 %70, i32* %edx.0.reg2mem, !insn.addr !3236
  store i32 %10, i32* %ebx.0.reg2mem, !insn.addr !3236
  store i32 %71, i32* %esp.1.reg2mem, !insn.addr !3236
  store i32 %68, i32* %ebp.1.reg2mem, !insn.addr !3236
  br label %dec_label_pc_4083b7, !insn.addr !3236

dec_label_pc_4083b7:                              ; preds = %dec_label_pc_4083b7, %dec_label_pc_4083a2
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %cf.0.reload = load i32, i32* %cf.0.reg2mem
  %76 = add i32 %esp.1.reload, -4, !insn.addr !3237
  %77 = inttoptr i32 %76 to i32*, !insn.addr !3237
  store i32 %edx.0.reload, i32* %77, align 4, !insn.addr !3237
  %78 = add i32 %esp.1.reload, -8, !insn.addr !3238
  %79 = inttoptr i32 %78 to i32*, !insn.addr !3238
  store i32 %eax.0.reload, i32* %79, align 4, !insn.addr !3238
  %80 = add i32 %esp.1.reload, -12, !insn.addr !3239
  %81 = inttoptr i32 %80 to i32*, !insn.addr !3239
  store i32 %ecx.1.reload, i32* %81, align 4, !insn.addr !3239
  %82 = call i32 @function_407f26(), !insn.addr !3240
  %83 = add i32 %ebx.0.reload, 4243828, !insn.addr !3241
  %84 = inttoptr i32 %83 to i32*, !insn.addr !3241
  %85 = load i32, i32* %84, align 4, !insn.addr !3241
  %86 = add i32 %esp.1.reload, -16, !insn.addr !3242
  %87 = inttoptr i32 %86 to i32*
  store i32 %ebp.1.reload, i32* %87, align 4, !insn.addr !3242
  %88 = and i32 %82, -256, !insn.addr !3243
  %89 = or i32 %88, %cf.0.reload, !insn.addr !3243
  %90 = add i32 %85, 21, !insn.addr !3244
  %91 = inttoptr i32 %90 to i32*, !insn.addr !3244
  %92 = load i32, i32* %91, align 4, !insn.addr !3244
  %93 = add i32 %92, %edi.0.reload, !insn.addr !3244
  store i32 %93, i32* %91, align 4, !insn.addr !3244
  %94 = add i32 %89, 3, !insn.addr !3245
  %95 = inttoptr i32 %94 to i8*, !insn.addr !3245
  %96 = load i8, i8* %95, align 1, !insn.addr !3245
  %97 = udiv i8 %96, 2, !insn.addr !3245
  store i8 %97, i8* %95, align 1, !insn.addr !3245
  %98 = inttoptr i32 %89 to i8*, !insn.addr !3246
  %99 = load i8, i8* %98, align 1, !insn.addr !3246
  %100 = trunc i32 %cf.0.reload to i8, !insn.addr !3246
  %101 = add i8 %99, %100, !insn.addr !3246
  store i8 %101, i8* %98, align 1, !insn.addr !3246
  %102 = add i32 %esp.1.reload, -6360, !insn.addr !3247
  %103 = inttoptr i32 %102 to i32*, !insn.addr !3247
  store i32 %89, i32* %103, align 4, !insn.addr !3247
  store i8 %100, i8* inttoptr (i32 1086416917 to i8*), align 1, !insn.addr !3248
  %104 = add i32 %85, 367724740, !insn.addr !3249
  %105 = inttoptr i32 %104 to i8*, !insn.addr !3249
  %106 = load i8, i8* %105, align 1, !insn.addr !3249
  %107 = udiv i32 %82, 256, !insn.addr !3249
  %108 = trunc i32 %107 to i8, !insn.addr !3249
  %109 = add i8 %106, %108, !insn.addr !3249
  store i8 %109, i8* %105, align 1, !insn.addr !3249
  %110 = load i32, i32* inttoptr (i32 4243832 to i32*), align 8, !insn.addr !3250
  %111 = inttoptr i32 %82 to i8*, !insn.addr !3251
  %112 = load i8, i8* %111, align 1, !insn.addr !3251
  %113 = zext i8 %112 to i32, !insn.addr !3251
  %114 = inttoptr i32 %110 to i32*, !insn.addr !3252
  %115 = load i32, i32* %114, align 4, !insn.addr !3252
  %116 = mul i32 %113, 2, !insn.addr !3253
  %117 = add i32 %116, %115, !insn.addr !3253
  %118 = inttoptr i32 %117 to i16*, !insn.addr !3253
  %119 = load i16, i16* %118, align 2, !insn.addr !3253
  %120 = and i16 %119, 480
  %121 = icmp eq i16 %120, 0, !insn.addr !3254
  store i32 0, i32* %cf.0.reg2mem, !insn.addr !3255
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !3255
  store i32 %113, i32* %ecx.1.reg2mem, !insn.addr !3255
  store i32 %110, i32* %edx.0.reg2mem, !insn.addr !3255
  store i32 %82, i32* %ebx.0.reg2mem, !insn.addr !3255
  store i32 %102, i32* %esp.1.reg2mem, !insn.addr !3255
  store i32 %86, i32* %ebp.1.reg2mem, !insn.addr !3255
  br i1 %121, label %dec_label_pc_4083b7, label %dec_label_pc_4083fd, !insn.addr !3255

dec_label_pc_4083fd:                              ; preds = %dec_label_pc_4083b7
  %122 = or i16 %120, 30
  %123 = zext i16 %122 to i32, !insn.addr !3256
  %124 = inttoptr i32 %123 to i32*, !insn.addr !3256
  %125 = load i32, i32* %124, align 4, !insn.addr !3256
  %126 = inttoptr i32 %125 to i32*, !insn.addr !3257
  %127 = load i32, i32* %126, align 4, !insn.addr !3257
  store i32 %127, i32* %87, align 4, !insn.addr !3257
  %128 = add i32 %125, 1808922611, !insn.addr !3258
  %129 = inttoptr i32 %128 to i8*, !insn.addr !3258
  store i8 0, i8* %129, align 1, !insn.addr !3258
  %130 = add i32 %esp.1.reload, -20, !insn.addr !3259
  %131 = inttoptr i32 %130 to i32*, !insn.addr !3259
  store i32 %86, i32* %131, align 4, !insn.addr !3259
  %132 = add i32 %edi.0.reload, -1043231856, !insn.addr !3260
  %133 = inttoptr i32 %132 to i32*, !insn.addr !3260
  store i32 %edi.0.reload, i32* %133, align 4, !insn.addr !3260
  %134 = call i32 @function_8be6778c(), !insn.addr !3261
  ret i32 %134, !insn.addr !3261
}

define i32 @function_40841e(i32 %arg1) local_unnamed_addr {
dec_label_pc_40841e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3262
}

define i32 @function_408421(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_408421:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %3 = sub i32 0, %0
  %4 = sub i32 %3, 1
  %5 = icmp ugt i32 %2, %4, !insn.addr !3263
  %6 = add i32 %1, -125, !insn.addr !3264
  %7 = call i32 @__readgsdword(i32 %6), !insn.addr !3264
  %8 = add i32 %2, -57, !insn.addr !3265
  %9 = inttoptr i32 %8 to i8*, !insn.addr !3265
  %10 = load i8, i8* %9, align 1, !insn.addr !3265
  %11 = select i1 %5, i8 2, i8 1, !insn.addr !3265
  %12 = sub i8 %10, %11, !insn.addr !3265
  store i8 %12, i8* %9, align 1, !insn.addr !3265
  %13 = bitcast i32* %eax to i8*
  %14 = load i8, i8* %13, align 4, !insn.addr !3266
  %15 = load i32, i32* %eax, align 4
  %16 = trunc i32 %15 to i8, !insn.addr !3266
  %17 = add i8 %14, %16, !insn.addr !3266
  %18 = inttoptr i32 %15 to i8*, !insn.addr !3266
  store i8 %17, i8* %18, align 1, !insn.addr !3266
  %19 = load i8, i8* %13, align 4, !insn.addr !3267
  %20 = load i32, i32* %eax, align 4
  %21 = trunc i32 %20 to i8, !insn.addr !3267
  %22 = add i8 %19, %21, !insn.addr !3267
  %23 = icmp eq i8 %22, 0, !insn.addr !3267
  %24 = inttoptr i32 %20 to i8*, !insn.addr !3267
  store i8 %22, i8* %24, align 1, !insn.addr !3267
  %25 = icmp eq i1 %23, false, !insn.addr !3268
  br i1 %25, label %26, label %dec_label_pc_40843c, !insn.addr !3268

; <label>:26:                                     ; preds = %dec_label_pc_408421
  %27 = call i32 @function_ffff84a8(), !insn.addr !3268
  br label %dec_label_pc_40843c, !insn.addr !3268

dec_label_pc_40843c:                              ; preds = %26, %dec_label_pc_408421
  %28 = load i32, i32* inttoptr (i32 -2146948852 to i32*), align 4, !insn.addr !3269
  store i32 %28, i32* %eax, align 4, !insn.addr !3269
  %29 = icmp eq i32 %28, 0, !insn.addr !3270
  %30 = icmp slt i32 %28, 0, !insn.addr !3270
  %31 = icmp eq i1 %30, false, !insn.addr !3271
  %32 = icmp eq i1 %29, false, !insn.addr !3271
  %33 = icmp eq i1 %31, %32, !insn.addr !3271
  br i1 %33, label %dec_label_pc_408484, label %dec_label_pc_408443, !insn.addr !3271

dec_label_pc_408443:                              ; preds = %dec_label_pc_40843c
  %34 = icmp eq i32 %arg1, 0, !insn.addr !3272
  %35 = icmp slt i32 %arg1, 0, !insn.addr !3272
  %36 = trunc i32 %arg1 to i8, !insn.addr !3272
  %37 = call i8 @llvm.ctpop.i8(i8 %36), !range !405, !insn.addr !3272
  %38 = and i8 %37, 1, !insn.addr !3272
  %39 = icmp eq i8 %38, 0, !insn.addr !3272
  %40 = zext i1 %39 to i32, !insn.addr !3273
  %41 = zext i1 %34 to i32, !insn.addr !3273
  %42 = zext i1 %35 to i32, !insn.addr !3273
  %43 = mul i32 %40, 1024, !insn.addr !3273
  %44 = mul i32 %41, 16384, !insn.addr !3273
  %45 = mul i32 %42, 32768, !insn.addr !3273
  %46 = and i32 %28, -65281, !insn.addr !3273
  %47 = or i32 %45, %44, !insn.addr !3273
  %48 = or i32 %47, %43, !insn.addr !3273
  %49 = or i32 %48, %46, !insn.addr !3273
  %50 = or i32 %49, 512, !insn.addr !3273
  ret i32 %50, !insn.addr !3274

dec_label_pc_408484:                              ; preds = %dec_label_pc_40843c
  %51 = and i32 %28, 255, !insn.addr !3275
  %52 = add i32 %51, %2, !insn.addr !3275
  %53 = inttoptr i32 %52 to i8*, !insn.addr !3275
  %54 = load i8, i8* %53, align 1, !insn.addr !3275
  %55 = zext i8 %54 to i32, !insn.addr !3275
  %56 = and i32 %28, -256, !insn.addr !3275
  %57 = or i32 %56, %55, !insn.addr !3275
  store i32 %57, i32* inttoptr (i32 -2146948852 to i32*), align 4, !insn.addr !3276
  %58 = load i8, i8* inttoptr (i32 -1006143620 to i8*), align 4, !insn.addr !3277
  %59 = udiv i32 %2, 256, !insn.addr !3277
  %60 = trunc i32 %59 to i8, !insn.addr !3277
  %61 = or i8 %58, %60, !insn.addr !3277
  store i8 %61, i8* inttoptr (i32 -1006143620 to i8*), align 4, !insn.addr !3277
  store i8 %54, i8* inttoptr (i32 -176779905 to i8*), align 1, !insn.addr !3278
  ret i32 %57, !insn.addr !3279
}

define i32 @function_4084c1() local_unnamed_addr {
dec_label_pc_4084c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3280
}

define i32 @function_4084c3() local_unnamed_addr {
dec_label_pc_4084c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %2, 1, !insn.addr !3281
  %6 = inttoptr i32 %5 to i8*, !insn.addr !3281
  %7 = load i8, i8* %6, align 1, !insn.addr !3281
  %8 = icmp eq i8 %7, 0, !insn.addr !3282
  %9 = icmp slt i8 %7, 0, !insn.addr !3282
  %10 = call i8 @llvm.ctpop.i8(i8 %7), !range !405, !insn.addr !3282
  %11 = and i8 %10, 1, !insn.addr !3282
  %12 = icmp eq i8 %11, 0, !insn.addr !3282
  %13 = zext i1 %12 to i32, !insn.addr !3283
  %14 = zext i1 %8 to i32, !insn.addr !3283
  %15 = zext i1 %9 to i32, !insn.addr !3283
  %16 = mul i32 %13, 1024, !insn.addr !3283
  %17 = mul i32 %14, 16384, !insn.addr !3283
  %18 = mul i32 %15, 32768, !insn.addr !3283
  %19 = and i32 %4, 255, !insn.addr !3283
  %20 = or i32 %17, %19, !insn.addr !3283
  %21 = or i32 %20, %18, !insn.addr !3283
  %22 = or i32 %21, %16, !insn.addr !3283
  %23 = mul i32 %22, 65536, !insn.addr !3283
  %sext = sdiv i32 %23, 65536
  %24 = or i32 %sext, 512, !insn.addr !3284
  %25 = add i32 %3, 116, !insn.addr !3285
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3285
  %27 = load i32, i32* %26, align 4, !insn.addr !3285
  %28 = sub i32 %27, %24, !insn.addr !3285
  store i32 %28, i32* %26, align 4, !insn.addr !3285
  %29 = and i8 %7, 31, !insn.addr !3286
  %30 = icmp eq i8 %29, 0, !insn.addr !3286
  br i1 %30, label %39, label %31, !insn.addr !3286

; <label>:31:                                     ; preds = %dec_label_pc_4084c3
  %32 = add i32 %24, -1991752170, !insn.addr !3286
  %33 = inttoptr i32 %32 to i8*, !insn.addr !3286
  %34 = load i8, i8* %33, align 1, !insn.addr !3286
  %35 = lshr i8 %34, %29, !insn.addr !3286
  %36 = sub nsw i8 8, %29, !insn.addr !3286
  %37 = shl i8 %34, %36, !insn.addr !3286
  %38 = or i8 %35, %37, !insn.addr !3286
  store i8 %38, i8* %33, align 1, !insn.addr !3286
  br label %39, !insn.addr !3286

; <label>:39:                                     ; preds = %dec_label_pc_4084c3, %31
  %40 = icmp eq i32 %28, 0, !insn.addr !3285
  br i1 %40, label %dec_label_pc_408535, label %dec_label_pc_4084e2, !insn.addr !3287

dec_label_pc_4084e2:                              ; preds = %39
  %41 = call i32 @__asm_sti(), !insn.addr !3288
  ret i32 %41, !insn.addr !3288

dec_label_pc_408535:                              ; preds = %39
  %42 = add i32 %1, 1, !insn.addr !3289
  %43 = add i32 %0, 43, !insn.addr !3290
  %44 = inttoptr i32 %43 to i8*, !insn.addr !3290
  store i8 70, i8* %44, align 1, !insn.addr !3290
  %45 = inttoptr i32 %42 to i8*, !insn.addr !3291
  store i8 48, i8* %45, align 1, !insn.addr !3291
  %46 = add i32 %1, 2, !insn.addr !3292
  %47 = inttoptr i32 %46 to i8*, !insn.addr !3293
  store i8 48, i8* %47, align 1, !insn.addr !3293
  ret i32 %3, !insn.addr !3294
}

define i32 @function_408549() local_unnamed_addr {
dec_label_pc_408549:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_4()
  %2 = add i32 %0, -1956946315, !insn.addr !3295
  %3 = fptrunc x86_fp80 %1 to double, !insn.addr !3295
  %4 = inttoptr i32 %2 to double*, !insn.addr !3295
  store double %3, double* %4, align 4, !insn.addr !3295
  %5 = call i32 @__asm_in.2(i32 133), !insn.addr !3296
  ret i32 %5, !insn.addr !3297
}

define i32 @function_408559(i32 %arg1) local_unnamed_addr {
dec_label_pc_408559:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3298
}

define i32 @function_408560(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i16 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_408560:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i16, !insn.addr !3299
  %4 = call i8 @__asm_in.4(i16 %3), !insn.addr !3299
  %5 = add i32 %0, 1343509847, !insn.addr !3300
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3300
  %7 = load i32, i32* %6, align 4, !insn.addr !3300
  %8 = add i32 %0, 16, !insn.addr !3301
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3301
  %10 = load i32, i32* %9, align 4, !insn.addr !3301
  %11 = add i32 %10, 81, !insn.addr !3302
  %12 = inttoptr i32 %11 to i8*, !insn.addr !3302
  %13 = load i8, i8* %12, align 1, !insn.addr !3302
  %14 = trunc i32 %7 to i8, !insn.addr !3302
  %15 = or i8 %13, %14, !insn.addr !3302
  store i8 %15, i8* %12, align 1, !insn.addr !3302
  %16 = call i32 @unknown_ff98faf0(i32 %7, i32 %7, i32 %2, i32 0), !insn.addr !3303
  ret i32 %16, !insn.addr !3304
}

define i32 @function_40858c(i32 %arg1) local_unnamed_addr {
dec_label_pc_40858c:
  %eax.0.reg2mem = alloca i32, !insn.addr !3305
  %storemerge.reg2mem = alloca i32, !insn.addr !3305
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = trunc i32 %1 to i8, !insn.addr !3305
  %5 = and i8 %4, 14, !insn.addr !3305
  %6 = icmp ugt i8 %5, 9, !insn.addr !3305
  %7 = or i1 %2, %6, !insn.addr !3305
  %8 = icmp ugt i8 %4, -103
  %9 = or i1 %8, %3
  br i1 %7, label %10, label %15, !insn.addr !3305

; <label>:10:                                     ; preds = %dec_label_pc_40858c
  %.v = select i1 %9, i32 102, i32 6
  %11 = add i32 %.v, %1, !insn.addr !3305
  %12 = and i32 %11, 255, !insn.addr !3305
  %13 = and i32 %1, -256, !insn.addr !3305
  %14 = or i32 %12, %13, !insn.addr !3305
  store i32 %14, i32* %storemerge.reg2mem, !insn.addr !3305
  br label %21, !insn.addr !3305

; <label>:15:                                     ; preds = %dec_label_pc_40858c
  %16 = add i32 %1, 96, !insn.addr !3305
  %17 = select i1 %9, i32 %16, i32 %1, !insn.addr !3305
  %18 = and i32 %17, 255, !insn.addr !3305
  %19 = and i32 %1, -256, !insn.addr !3305
  %20 = or i32 %18, %19, !insn.addr !3305
  store i32 %20, i32* %storemerge.reg2mem, !insn.addr !3305
  br label %21, !insn.addr !3305

; <label>:21:                                     ; preds = %10, %15
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %22 = add i32 %0, 87, !insn.addr !3306
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3306
  %24 = load i32, i32* %23, align 4, !insn.addr !3306
  %25 = zext i1 %9 to i32, !insn.addr !3306
  %26 = select i1 %9, i32 -116, i32 -117, !insn.addr !3306
  %27 = add i32 %24, %26, !insn.addr !3306
  %28 = add i32 %27, %25, !insn.addr !3306
  %29 = xor i32 %28, %24, !insn.addr !3306
  %30 = xor i32 %28, -2147483648, !insn.addr !3306
  %31 = and i32 %29, %30, !insn.addr !3306
  %32 = icmp slt i32 %31, 0, !insn.addr !3306
  %33 = icmp slt i32 %27, 0, !insn.addr !3306
  store i32 %27, i32* %23, align 4, !insn.addr !3306
  %34 = icmp eq i1 %33, %32, !insn.addr !3307
  store i32 %storemerge.reload, i32* %eax.0.reg2mem, !insn.addr !3307
  br i1 %34, label %dec_label_pc_4085a5, label %dec_label_pc_408599, !insn.addr !3307

dec_label_pc_408599:                              ; preds = %21
  %35 = add i32 %arg1, 188, !insn.addr !3308
  %36 = and i32 %35, 255, !insn.addr !3308
  %37 = and i32 %arg1, -256, !insn.addr !3308
  %38 = or i32 %36, %37, !insn.addr !3308
  store i32 %38, i32* %eax.0.reg2mem, !insn.addr !3308
  br label %dec_label_pc_4085a5, !insn.addr !3308

dec_label_pc_4085a5:                              ; preds = %dec_label_pc_408599, %21
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3309
}

define i32 @function_4085a8() local_unnamed_addr {
dec_label_pc_4085a8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %1, %0, !insn.addr !3310
  ret i32 %2, !insn.addr !3311
}

define i32 @function_4085b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_4085b8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3312
}

define i32 @function_4085d2() local_unnamed_addr {
dec_label_pc_4085d2:
  %eax.0.reg2mem = alloca i32, !insn.addr !3313
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = trunc i32 %0 to i8
  %4 = udiv i32 %1, 256, !insn.addr !3313
  %5 = trunc i32 %4 to i8, !insn.addr !3313
  %.neg1 = sext i1 %2 to i8
  %.neg2 = sub i8 %.neg1, %5, !insn.addr !3313
  %6 = add i8 %.neg2, %3, !insn.addr !3313
  %7 = icmp eq i8 %6, 0, !insn.addr !3313
  %8 = inttoptr i32 %0 to i8*, !insn.addr !3313
  store i8 %6, i8* %8, align 1, !insn.addr !3313
  %9 = call i32 @__asm_wait(), !insn.addr !3314
  %10 = icmp eq i1 %7, false, !insn.addr !3315
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !3315
  br i1 %10, label %11, label %dec_label_pc_4085db, !insn.addr !3315

; <label>:11:                                     ; preds = %dec_label_pc_4085d2
  %12 = call i32 @function_408638(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3315
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !3315
  br label %dec_label_pc_4085db, !insn.addr !3315

dec_label_pc_4085db:                              ; preds = %11, %dec_label_pc_4085d2
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3316
}

define i32 @function_4085ee() local_unnamed_addr {
dec_label_pc_4085ee:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !3317
  %5 = inttoptr i32 %2 to i8*, !insn.addr !3317
  store i8 %4, i8* %5, align 1, !insn.addr !3317
  %6 = add i32 %0, 800790645, !insn.addr !3318
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3318
  %8 = load i8, i8* %7, align 1, !insn.addr !3318
  %9 = trunc i32 %1 to i8, !insn.addr !3318
  %10 = add i8 %8, %9, !insn.addr !3318
  store i8 %10, i8* %7, align 1, !insn.addr !3318
  ret i32 %2, !insn.addr !3319
}

define i32 @function_4085ff(i32 %arg1) local_unnamed_addr {
dec_label_pc_4085ff:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 1086509243, !insn.addr !3320
  ret i32 %1, !insn.addr !3321
}

define i32 @function_408618() local_unnamed_addr {
dec_label_pc_408618:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i128 @__decompiler_undefined_function_9()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = select i1 %2, i32 83, i32 82, !insn.addr !3322
  %4 = sub i32 %0, %3, !insn.addr !3322
  %5 = and i32 %4, 255, !insn.addr !3322
  %6 = and i32 %0, -256, !insn.addr !3322
  %7 = or i32 %5, %6, !insn.addr !3322
  %8 = inttoptr i32 %7 to i128*, !insn.addr !3323
  %9 = load i128, i128* %8, align 4, !insn.addr !3323
  %10 = call i128 @__asm_andnps(i128 %1, i128 %9), !insn.addr !3323
  ret i32 %7, !insn.addr !3324
}

define i32 @function_408625() local_unnamed_addr {
dec_label_pc_408625:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i32, !insn.addr !3325
  %3 = add i32 %0, -2095972353, !insn.addr !3325
  %4 = add i32 %3, %2, !insn.addr !3325
  ret i32 %4, !insn.addr !3326
}

define i32 @function_408638(i32 %arg1) local_unnamed_addr {
dec_label_pc_408638:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_13725 = alloca i32, align 4
  %stack_var_13761 = alloca i32, align 4
  %7 = call i32 @__decompiler_undefined_function_0()
  %8 = call i32 @__decompiler_undefined_function_0()
  %9 = call i32 @__decompiler_undefined_function_0()
  %10 = call i32 @__decompiler_undefined_function_0()
  %11 = call i32 @__decompiler_undefined_function_0()
  %12 = add i32 %4, 273517326, !insn.addr !3327
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3327
  %14 = load i32, i32* %13, align 4, !insn.addr !3327
  %15 = zext i1 %6 to i32, !insn.addr !3327
  %16 = add i32 %3, %15, !insn.addr !3327
  %17 = sub i32 %14, %16, !insn.addr !3327
  %18 = sub i32 %17, %15, !insn.addr !3327
  %19 = icmp ult i32 %14, %18, !insn.addr !3327
  %20 = icmp ne i32 %16, -1, !insn.addr !3327
  %21 = or i1 %20, %19, !insn.addr !3327
  %22 = icmp ult i32 %14, %16, !insn.addr !3327
  %23 = select i1 %6, i1 %21, i1 %22, !insn.addr !3327
  store i32 %17, i32* %13, align 4, !insn.addr !3327
  %24 = add i32 %1, 721420338, !insn.addr !3328
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3328
  %26 = load i32, i32* %25, align 4, !insn.addr !3328
  %27 = zext i1 %23 to i32, !insn.addr !3328
  %28 = add i32 %0, %27, !insn.addr !3328
  %29 = sub i32 %26, %28, !insn.addr !3328
  %30 = sub i32 %29, %27, !insn.addr !3328
  %31 = icmp ult i32 %26, %30, !insn.addr !3328
  %32 = icmp ne i32 %28, -1, !insn.addr !3328
  %33 = or i1 %32, %31, !insn.addr !3328
  %34 = icmp ult i32 %26, %28, !insn.addr !3328
  %35 = select i1 %23, i1 %33, i1 %34, !insn.addr !3328
  store i32 %29, i32* %25, align 4, !insn.addr !3328
  %36 = call i32 @unknown_8b58cbd8(i32 %1), !insn.addr !3329
  %37 = and i32 %36, -256, !insn.addr !3330
  %38 = or i32 %37, 95, !insn.addr !3330
  %39 = inttoptr i32 %2 to i32*, !insn.addr !3331
  store i32 %38, i32* %39, align 4, !insn.addr !3331
  br i1 %35, label %dec_label_pc_408678, label %dec_label_pc_40866c, !insn.addr !3332

dec_label_pc_40866c:                              ; preds = %dec_label_pc_408638
  %40 = inttoptr i32 %8 to i32*, !insn.addr !3333
  %41 = load i32, i32* %40, align 4, !insn.addr !3333
  ret i32 %41, !insn.addr !3334

dec_label_pc_408678:                              ; preds = %dec_label_pc_408638
  %42 = add i32 %0, 1, !insn.addr !3335
  %43 = inttoptr i32 %0 to i32*, !insn.addr !3335
  store i32 %42, i32* %43, align 4, !insn.addr !3335
  %44 = add i32 %11, -117, !insn.addr !3336
  %45 = inttoptr i32 %44 to i8*, !insn.addr !3336
  %46 = load i8, i8* %45, align 1, !insn.addr !3336
  %47 = udiv i32 %10, 256, !insn.addr !3336
  %48 = trunc i32 %47 to i8, !insn.addr !3336
  %49 = or i8 %46, %48, !insn.addr !3336
  %50 = icmp eq i8 %49, 0, !insn.addr !3336
  store i8 %49, i8* %45, align 1, !insn.addr !3336
  %51 = icmp eq i1 %50, false, !insn.addr !3337
  br i1 %51, label %dec_label_pc_408696, label %dec_label_pc_40868a, !insn.addr !3337

dec_label_pc_40868a:                              ; preds = %dec_label_pc_408678
  %52 = inttoptr i32 %11 to i32*, !insn.addr !3338
  %53 = load i32, i32* %52, align 4, !insn.addr !3338
  %54 = and i32 %53, %2, !insn.addr !3338
  %55 = icmp eq i32 %54, 0, !insn.addr !3338
  %56 = icmp eq i1 %55, false, !insn.addr !3339
  br i1 %56, label %dec_label_pc_4086dc, label %dec_label_pc_40868e, !insn.addr !3339

dec_label_pc_40868e:                              ; preds = %dec_label_pc_40868a
  %57 = add i32 %7, -8, !insn.addr !3340
  %58 = inttoptr i32 %57 to i32*, !insn.addr !3340
  %59 = add i32 %7, -37, !insn.addr !3341
  %60 = inttoptr i32 %59 to i32*, !insn.addr !3341
  %61 = call i32 @__asm_iretd(), !insn.addr !3342
  ret i32 %61, !insn.addr !3342

dec_label_pc_408696:                              ; preds = %dec_label_pc_408678
  %62 = load i32, i32* %stack_var_13725, align 4, !insn.addr !3343
  %63 = call i32 @unknown_5b407119(i32 %7, i16 %5, i32 %62, i32 %0, i32 %11, i32 %7, i32* nonnull %stack_var_13761, i32 %10, i32 %2, i32 %9, i32 %8), !insn.addr !3343
  %64 = icmp eq i32 %63, -1, !insn.addr !3344
  %65 = icmp eq i1 %64, false, !insn.addr !3345
  br i1 %65, label %dec_label_pc_4086cb, label %dec_label_pc_4086c8, !insn.addr !3345

dec_label_pc_4086c8:                              ; preds = %dec_label_pc_408696
  ret i32 %63, !insn.addr !3346

dec_label_pc_4086cb:                              ; preds = %dec_label_pc_408696
  call void @__asm_int(i32 67), !insn.addr !3347
  %66 = call i32 @__asm_in.2(i32 93), !insn.addr !3348
  %67 = add i32 %10, -1866203192, !insn.addr !3349
  %68 = inttoptr i32 %67 to i32*, !insn.addr !3349
  %69 = load i32, i32* %68, align 4, !insn.addr !3349
  %70 = sub i32 0, %66
  %71 = sub i32 %70, 1
  %72 = add i32 %69, %71, !insn.addr !3349
  store i32 %72, i32* %68, align 4, !insn.addr !3349
  ret i32 %66, !insn.addr !3350

dec_label_pc_4086dc:                              ; preds = %dec_label_pc_40868a
  %73 = trunc i32 %54 to i8, !insn.addr !3338
  %74 = call i8 @llvm.ctpop.i8(i8 %73), !range !405, !insn.addr !3338
  %75 = and i8 %74, 1, !insn.addr !3338
  %76 = icmp eq i8 %75, 0, !insn.addr !3338
  br i1 %76, label %dec_label_pc_408736, label %dec_label_pc_4086e1, !insn.addr !3351

dec_label_pc_4086e1:                              ; preds = %dec_label_pc_4086dc
  %77 = mul i32 %0, 2, !insn.addr !3352
  %78 = load i8, i8* inttoptr (i32 59680 to i8*), align 32, !insn.addr !3353
  %79 = or i8 %78, %48, !insn.addr !3353
  store i8 %79, i8* inttoptr (i32 59680 to i8*), align 32, !insn.addr !3353
  %80 = load i32, i32* %stack_var_13725, align 4, !insn.addr !3354
  %81 = call i32 @function_4094fc(i32 %77, i32 %2, i32 %11, i32* nonnull %stack_var_13725, i32 %80, i32 %0, i32 %11, i32 %7, i32* nonnull %stack_var_13761, i32 %10, i32 %2, i32 %9, i32 %8), !insn.addr !3354
  %82 = or i32 %81, 93, !insn.addr !3355
  ret i32 %82, !insn.addr !3356

dec_label_pc_408736:                              ; preds = %dec_label_pc_4086dc
  %83 = call i32 @unknown_7caa8780(i32 %8, i32 %2), !insn.addr !3357
  %84 = add i32 %2, 12, !insn.addr !3358
  store i32 %84, i32* %39, align 4, !insn.addr !3358
  ret i32 %83, !insn.addr !3358
}

define i32 @function_408741() local_unnamed_addr {
dec_label_pc_408741:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3359
}

define i32 @function_408744(i32 %arg1) local_unnamed_addr {
dec_label_pc_408744:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = icmp sgt i32 %3, 5373055, !insn.addr !3360
  br i1 %4, label %dec_label_pc_408764, label %dec_label_pc_40874b, !insn.addr !3360

dec_label_pc_40874b:                              ; preds = %dec_label_pc_408744
  ret i32 %3, !insn.addr !3361

dec_label_pc_408764:                              ; preds = %dec_label_pc_408744
  %5 = add i32 %1, 12, !insn.addr !3362
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3362
  %7 = load i32, i32* %6, align 4, !insn.addr !3362
  %8 = add i32 %3, -4586624, !insn.addr !3363
  %9 = add i32 %1, 16, !insn.addr !3364
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3364
  %11 = load i32, i32* %10, align 4, !insn.addr !3364
  %12 = call i32 @unknown_c889d0(i32 %7, i32 %11, i32 %8), !insn.addr !3365
  %13 = trunc i32 %2 to i16, !insn.addr !3366
  call void @__asm_outsd(i16 %13, i32 %0), !insn.addr !3366
  %14 = or i32 %12, 224, !insn.addr !3367
  ret i32 %14, !insn.addr !3368
}

define i32 @function_408780() local_unnamed_addr {
dec_label_pc_408780:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_408793(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_408793:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !3369
  %3 = inttoptr i32 %0 to i8*, !insn.addr !3369
  store i8 %2, i8* %3, align 1, !insn.addr !3369
  call void @__asm_int(i32 198), !insn.addr !3370
  ret i32 %0, !insn.addr !3371
}

define i32 @function_4087a3() local_unnamed_addr {
dec_label_pc_4087a3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 301600267, !insn.addr !3372
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3372
  %5 = load i32, i32* %4, align 4, !insn.addr !3372
  %6 = add i32 %2, 117, !insn.addr !3373
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3373
  %8 = load i32, i32* %7, align 4, !insn.addr !3373
  %9 = add i32 %8, %5, !insn.addr !3373
  store i32 %9, i32* %7, align 4, !insn.addr !3373
  ret i32 %1, !insn.addr !3374
}

define i32 @function_4087b3(i32 %arg1) local_unnamed_addr {
dec_label_pc_4087b3:
  %eax.0.reg2mem = alloca i32, !insn.addr !3375
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = trunc i32 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !3376
  %6 = inttoptr i32 %3 to i8*, !insn.addr !3376
  store i8 %5, i8* %6, align 1, !insn.addr !3376
  %7 = add i32 %3, -6276, !insn.addr !3377
  %8 = add i32 %0, 25, !insn.addr !3378
  %9 = icmp ugt i32 %0, -26, !insn.addr !3378
  %10 = icmp eq i32 %8, 0, !insn.addr !3378
  %11 = inttoptr i32 %0 to i32*, !insn.addr !3378
  store i32 %8, i32* %11, align 4, !insn.addr !3378
  %12 = or i1 %9, %10, !insn.addr !3379
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !3379
  br i1 %12, label %dec_label_pc_4087c5, label %13, !insn.addr !3379

; <label>:13:                                     ; preds = %dec_label_pc_4087b3
  %14 = call i32 @function_1e40cbfc(), !insn.addr !3379
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !3379
  br label %dec_label_pc_4087c5, !insn.addr !3379

dec_label_pc_4087c5:                              ; preds = %dec_label_pc_4087b3, %13
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %15 = add i32 %1, -123, !insn.addr !3380
  %16 = inttoptr i32 %15 to i32*, !insn.addr !3380
  %17 = load i32, i32* %16, align 4, !insn.addr !3380
  %18 = add i32 %17, -1, !insn.addr !3380
  store i32 %18, i32* %16, align 4, !insn.addr !3380
  %19 = add i32 %eax.0.reload, 40, !insn.addr !3381
  %20 = and i32 %19, 255, !insn.addr !3381
  %21 = and i32 %eax.0.reload, -256, !insn.addr !3381
  %22 = or i32 %20, %21, !insn.addr !3381
  %23 = add i32 %22, 1, !insn.addr !3382
  %24 = add i32 %22, 4259973, !insn.addr !3383
  %25 = inttoptr i32 %24 to i8*, !insn.addr !3383
  %26 = load i8, i8* %25, align 1, !insn.addr !3383
  %27 = udiv i32 %2, 256, !insn.addr !3383
  %28 = trunc i32 %27 to i8, !insn.addr !3383
  %29 = add i8 %26, %28, !insn.addr !3383
  store i8 %29, i8* %25, align 1, !insn.addr !3383
  ret i32 %23, !insn.addr !3384
}

define i32 @function_4087d3(i32 %arg1) local_unnamed_addr {
dec_label_pc_4087d3:
  ret i32 4292960, !insn.addr !3385
}

define i32 @function_4087da(i32 %arg1) local_unnamed_addr {
dec_label_pc_4087da:
  ret i32 ptrtoint ([13 x i8]* @global_var_410075 to i32), !insn.addr !3386
}

define i32 @function_4087e1() local_unnamed_addr {
dec_label_pc_4087e1:
  %0 = call i32 @unknown_2540ae(), !insn.addr !3387
  ret i32 %0, !insn.addr !3387
}

define i32 @function_4087eb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_4087eb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -61, !insn.addr !3388
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3388
  %4 = load i8, i8* %3, align 1, !insn.addr !3388
  %5 = trunc i32 %1 to i8, !insn.addr !3388
  %6 = add i8 %4, %5, !insn.addr !3388
  store i8 %6, i8* %3, align 1, !insn.addr !3388
  ret i32 994115508, !insn.addr !3389
}

define i32 @function_4087fd(i32 %arg1) local_unnamed_addr {
dec_label_pc_4087fd:
  ret i32 ptrtoint ([53 x i8]* @global_var_40ff50 to i32), !insn.addr !3390
}

define i32 @function_408804(i32 %arg1) local_unnamed_addr {
dec_label_pc_408804:
  ret i32 -582948576, !insn.addr !3391
}

define i32 @function_40880e(i32 %arg1) local_unnamed_addr {
dec_label_pc_40880e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -61, !insn.addr !3392
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3392
  %4 = load i8, i8* %3, align 1, !insn.addr !3392
  %5 = trunc i32 %0 to i8, !insn.addr !3392
  %6 = add i8 %4, %5, !insn.addr !3392
  store i8 %6, i8* %3, align 1, !insn.addr !3392
  ret i32 ptrtoint ([59 x i8]* @global_var_40feb4 to i32), !insn.addr !3393
}

define i32 @function_408819(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_408819:
  ret i32 16055932, !insn.addr !3394
}

define i32 @function_408827() local_unnamed_addr {
dec_label_pc_408827:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -61, !insn.addr !3395
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3395
  %4 = load i8, i8* %3, align 1, !insn.addr !3395
  %5 = trunc i32 %1 to i8
  %6 = add i8 %5, -1, !insn.addr !3395
  %7 = add i8 %6, %4, !insn.addr !3395
  store i8 %7, i8* %3, align 1, !insn.addr !3395
  ret i32 ptrtoint ([39 x i8]* @global_var_40fe2c to i32), !insn.addr !3396
}

define i32 @function_408835(i32 %arg1) local_unnamed_addr {
dec_label_pc_408835:
  ret i32 6880756, !insn.addr !3397
}

define i32 @function_408843() local_unnamed_addr {
dec_label_pc_408843:
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = or i1 %1, icmp ugt (i8 ptrtoint ([25 x i8]* @global_var_40fdf6 to i8), i8 -103)
  %3 = select i1 %2, i32 or (i32 zext (i8 add (i8 ptrtoint ([25 x i8]* @global_var_40fdf6 to i8), i8 102) to i32), i32 and (i32 ptrtoint ([25 x i8]* @global_var_40fdf6 to i32), i32 -256)), i32 or (i32 zext (i8 add (i8 ptrtoint ([25 x i8]* @global_var_40fdf6 to i8), i8 6) to i32), i32 and (i32 ptrtoint ([25 x i8]* @global_var_40fdf6 to i32), i32 -256))
  %4 = select i1 %2, i32 or (i32 zext (i8 add (i8 ptrtoint ([25 x i8]* @global_var_40fdf6 to i8), i8 96) to i32), i32 and (i32 ptrtoint ([25 x i8]* @global_var_40fdf6 to i32), i32 -256)), i32 or (i32 zext (i8 ptrtoint ([25 x i8]* @global_var_40fdf6 to i8) to i32), i32 and (i32 ptrtoint ([25 x i8]* @global_var_40fdf6 to i32), i32 -256))
  %storemerge = select i1 %0, i32 %3, i32 %4
  ret i32 %storemerge, !insn.addr !3398
}

define i32 @function_40884a(i32 %arg1) local_unnamed_addr {
dec_label_pc_40884a:
  ret i32 ptrtoint ([39 x i8]* @global_var_40fdac to i32), !insn.addr !3399
}

define i32 @function_408851(i32 %arg1) local_unnamed_addr {
dec_label_pc_408851:
  ret i32 ptrtoint ([63 x i8]* @global_var_40fd6c to i32), !insn.addr !3400
}

define i32 @function_408858(i32 %arg1) local_unnamed_addr {
dec_label_pc_408858:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -61, !insn.addr !3401
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3401
  %4 = load i8, i8* %3, align 1, !insn.addr !3401
  %5 = trunc i32 %0 to i8, !insn.addr !3401
  %6 = add i8 %4, %5, !insn.addr !3401
  store i8 %6, i8* %3, align 1, !insn.addr !3401
  ret i32 ptrtoint ([31 x i8]* @global_var_40fd1c to i32), !insn.addr !3402
}

define i32 @function_408866(i32 %arg1) local_unnamed_addr {
dec_label_pc_408866:
  ret i32 ptrtoint ([15 x i8]* @global_var_40fd0c to i32), !insn.addr !3403
}

define i32 @function_408872(i32 %arg1) local_unnamed_addr {
dec_label_pc_408872:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3404
}

define i32 @function_408878(i32 %arg1) local_unnamed_addr {
dec_label_pc_408878:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i16 @__decompiler_undefined_function_1()
  %3 = add i32 %0, 2121733880, !insn.addr !3405
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3405
  %5 = load i32, i32* %4, align 4, !insn.addr !3405
  %6 = add i32 %5, 1, !insn.addr !3405
  store i32 %6, i32* %4, align 4, !insn.addr !3405
  %7 = add i32 %1, -123, !insn.addr !3406
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3406
  %9 = load i32, i32* %8, align 4, !insn.addr !3406
  %10 = add i32 %9, 1, !insn.addr !3406
  store i32 %10, i32* %8, align 4, !insn.addr !3406
  %11 = call i32 @unknown_3f5d00c0(i16 %2), !insn.addr !3407
  ret i32 %11, !insn.addr !3408
}

define i32 @function_408893(i32 %arg1) local_unnamed_addr {
dec_label_pc_408893:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -61, !insn.addr !3409
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3409
  %4 = load i8, i8* %3, align 1, !insn.addr !3409
  %5 = trunc i32 %1 to i8, !insn.addr !3409
  %6 = add i8 %4, %5, !insn.addr !3409
  store i8 %6, i8* %3, align 1, !insn.addr !3409
  ret i32 ptrtoint ([50 x i8]* @global_var_40fbbc to i32), !insn.addr !3410
}

define i32 @function_4088a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_4088a8:
  ret i32 977337241, !insn.addr !3411
}

define i32 @function_4088b6() local_unnamed_addr {
dec_label_pc_4088b6:
  ret i32 4206248, !insn.addr !3412
}

define i32 @function_4088be(i32 %arg1) local_unnamed_addr {
dec_label_pc_4088be:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = udiv i32 %1, 256, !insn.addr !3413
  %4 = add i32 %3, %1, !insn.addr !3413
  %5 = add i32 %0, -61, !insn.addr !3414
  %6 = inttoptr i32 %5 to i8*, !insn.addr !3414
  %7 = load i8, i8* %6, align 1, !insn.addr !3414
  %8 = trunc i32 %4 to i8, !insn.addr !3414
  %9 = add i8 %7, %8, !insn.addr !3414
  store i8 %9, i8* %6, align 1, !insn.addr !3414
  %10 = add i32 %2, -85149501, !insn.addr !3415
  %11 = inttoptr i32 %10 to i8*, !insn.addr !3415
  %12 = load i8, i8* %11, align 1, !insn.addr !3415
  %13 = add i8 %12, %8, !insn.addr !3415
  %14 = icmp ult i8 %13, %12, !insn.addr !3415
  store i8 %13, i8* %11, align 1, !insn.addr !3415
  %15 = add i32 %0, -34, !insn.addr !3416
  %16 = inttoptr i32 %15 to i8*, !insn.addr !3416
  %17 = load i8, i8* %16, align 1, !insn.addr !3416
  %18 = select i1 %14, i8 -71, i8 -72, !insn.addr !3416
  %19 = sub i8 %17, %18, !insn.addr !3416
  store i8 %19, i8* %16, align 1, !insn.addr !3416
  %20 = add i32 %2, -101664573, !insn.addr !3417
  %21 = inttoptr i32 %20 to i8*, !insn.addr !3417
  %22 = load i8, i8* %21, align 1, !insn.addr !3417
  %23 = add i8 %22, 102, !insn.addr !3417
  store i8 %23, i8* %21, align 1, !insn.addr !3417
  %24 = load i8, i8* %6, align 1, !insn.addr !3418
  %25 = add i8 %24, %8, !insn.addr !3418
  store i8 %25, i8* %6, align 1, !insn.addr !3418
  ret i32 ptrtoint ([56 x i8]* @global_var_40f9b4 to i32), !insn.addr !3419
}

define i32 @function_4088f5(i32 %arg1) local_unnamed_addr {
dec_label_pc_4088f5:
  ret i32 1614870940, !insn.addr !3420
}

define i32 @function_4088fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_4088fc:
  ret i32 8190332, !insn.addr !3421
}

define i32 @function_408903() local_unnamed_addr {
dec_label_pc_408903:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %4, 77, !insn.addr !3422
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3422
  %7 = load i32, i32* %6, align 4, !insn.addr !3422
  %8 = trunc i32 %7 to i8, !insn.addr !3423
  %9 = add i32 %7, 106, !insn.addr !3423
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3423
  store i8 %8, i8* %10, align 1, !insn.addr !3423
  %11 = and i32 %3, 31, !insn.addr !3424
  %12 = icmp eq i32 %11, 0, !insn.addr !3424
  br i1 %12, label %21, label %13, !insn.addr !3424

; <label>:13:                                     ; preds = %dec_label_pc_408903
  %14 = add i32 %0, -1411776448, !insn.addr !3424
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3424
  %16 = load i32, i32* %15, align 4, !insn.addr !3424
  %17 = shl i32 %16, %11, !insn.addr !3424
  %18 = sub nsw i32 32, %11, !insn.addr !3424
  %19 = lshr i32 %16, %18, !insn.addr !3424
  %20 = or i32 %19, %17, !insn.addr !3424
  store i32 %20, i32* %15, align 4, !insn.addr !3424
  br label %21, !insn.addr !3424

; <label>:21:                                     ; preds = %dec_label_pc_408903, %13
  %22 = add i32 %7, 1, !insn.addr !3425
  %23 = udiv i32 %22, 256, !insn.addr !3426
  %24 = add i32 %23, %3, !insn.addr !3426
  %25 = and i32 %24, 255, !insn.addr !3426
  %26 = and i32 %3, 1073741568, !insn.addr !3426
  %27 = or i32 %25, %26, !insn.addr !3426
  %28 = inttoptr i32 %1 to i32*, !insn.addr !3427
  %29 = call i32 @unknown_ef40c9a4(), !insn.addr !3428
  %30 = add i32 %29, 81, !insn.addr !3429
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3429
  %32 = load i32, i32* %31, align 4, !insn.addr !3429
  store i32 %29, i32* %31, align 4, !insn.addr !3429
  %33 = mul i32 %27, 4, !insn.addr !3430
  %34 = add i32 %32, %33, !insn.addr !3430
  %35 = inttoptr i32 %34 to i8*, !insn.addr !3430
  %36 = load i8, i8* %35, align 1, !insn.addr !3430
  %37 = trunc i32 %32 to i8, !insn.addr !3430
  %38 = add i8 %36, %37, !insn.addr !3430
  store i8 %38, i8* %35, align 1, !insn.addr !3430
  %39 = inttoptr i32 %0 to i32*, !insn.addr !3431
  store i8 %37, i8* inttoptr (i32 4229131 to i8*), align 1, !insn.addr !3432
  %40 = add i32 %32, 1, !insn.addr !3433
  %41 = add i32 %1, -116, !insn.addr !3434
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3434
  %43 = load i32, i32* %42, align 4, !insn.addr !3434
  %44 = and i32 %43, %2, !insn.addr !3434
  call void @__asm_out.1(i32 0, i32 %40), !insn.addr !3435
  %45 = add i32 %1, -11, !insn.addr !3436
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3436
  %47 = load i32, i32* %46, align 4, !insn.addr !3436
  %48 = sub i32 %47, %44, !insn.addr !3436
  store i32 %48, i32* %46, align 4, !insn.addr !3436
  %49 = call i32 @function_10e1167(), !insn.addr !3437
  ret i32 %49, !insn.addr !3437
}

define i32 @function_4089a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4089a0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3438
}

define i32 @function_4089fd() local_unnamed_addr {
dec_label_pc_4089fd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3439
}

define i32 @function_408a04() local_unnamed_addr {
dec_label_pc_408a04:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_408a06() local_unnamed_addr {
dec_label_pc_408a06:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3440
}

define i32 @function_408a0b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_408a0b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  br i1 %4, label %dec_label_pc_408a1b, label %dec_label_pc_408a0d, !insn.addr !3441

dec_label_pc_408a0d:                              ; preds = %dec_label_pc_408a0b
  %6 = zext i1 %5 to i32, !insn.addr !3442
  %7 = add i32 %3, 36, !insn.addr !3442
  %8 = add i32 %7, %6, !insn.addr !3442
  %9 = and i32 %8, 255, !insn.addr !3442
  %10 = and i32 %3, -256, !insn.addr !3442
  %11 = or i32 %9, %10, !insn.addr !3442
  ret i32 %11, !insn.addr !3443

dec_label_pc_408a1b:                              ; preds = %dec_label_pc_408a0b
  %12 = mul i32 %3, 8, !insn.addr !3444
  %13 = add i32 %12, 1027654428, !insn.addr !3444
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3444
  %15 = load i32, i32* %14, align 4, !insn.addr !3444
  %16 = add i32 %2, -125, !insn.addr !3445
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3445
  %18 = load i32, i32* %17, align 4, !insn.addr !3445
  %sext2 = mul i32 %1, 16777216
  %19 = sdiv i32 %sext2, 16777216, !insn.addr !3446
  %20 = add nsw i32 %19, 579518731, !insn.addr !3447
  %21 = inttoptr i32 %20 to i32*, !insn.addr !3447
  %22 = load i32, i32* %21, align 4, !insn.addr !3447
  %23 = mul i32 %22, 1073741824, !insn.addr !3447
  %24 = udiv i32 %22, 8
  %25 = or i32 %24, %23
  store i32 %25, i32* %21, align 4, !insn.addr !3447
  %26 = add i32 %15, 63871, !insn.addr !3448
  %27 = mul i32 %0, 4, !insn.addr !3449
  %28 = add i32 %27, -64, !insn.addr !3449
  %29 = add i32 %28, %18, !insn.addr !3449
  %30 = inttoptr i32 %29 to i8*, !insn.addr !3449
  %31 = load i8, i8* %30, align 1, !insn.addr !3449
  %32 = udiv i32 %26, 256, !insn.addr !3449
  %33 = trunc i32 %32 to i8, !insn.addr !3449
  %34 = xor i8 %31, %33, !insn.addr !3449
  store i8 %34, i8* %30, align 1, !insn.addr !3449
  %35 = add i32 %15, -724466328, !insn.addr !3450
  ret i32 %35, !insn.addr !3451
}

define i32 @function_408a5c() local_unnamed_addr {
dec_label_pc_408a5c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3452
}

define i32 @function_408a5f(i32 %arg1) local_unnamed_addr {
dec_label_pc_408a5f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %5 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3453
  %6 = call i32 @unknown_d8b80(i32 %1, i32 %2, i32 -2076114776, i32 %0), !insn.addr !3454
  %7 = xor i32 %5, -16
  %8 = icmp ult i32 %7, 16, !insn.addr !3455
  %9 = add i32 %0, 93, !insn.addr !3456
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3456
  %11 = load i8, i8* %10, align 1, !insn.addr !3456
  %12 = select i1 %8, i8 119, i8 118, !insn.addr !3456
  %13 = sub i8 %11, %12, !insn.addr !3456
  store i8 %13, i8* %10, align 1, !insn.addr !3456
  %14 = add i32 %0, 369053704, !insn.addr !3457
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3457
  %16 = load i32, i32* %15, align 4, !insn.addr !3457
  %17 = add i32 %16, 193, !insn.addr !3458
  %18 = and i32 %17, 255, !insn.addr !3458
  %19 = and i32 %16, -256, !insn.addr !3458
  %20 = or i32 %18, %19, !insn.addr !3458
  %21 = inttoptr i32 %20 to i32*, !insn.addr !3459
  %22 = load i32, i32* %21, align 4, !insn.addr !3459
  %23 = and i32 %20, %22, !insn.addr !3459
  store i32 %23, i32* %21, align 4, !insn.addr !3459
  %24 = call i32 @unknown_3fef80(i32 %3, i32 %4, i32 %20), !insn.addr !3460
  %25 = call i32 @unknown_72818406(), !insn.addr !3461
  %26 = call i32 @function_408780(), !insn.addr !3462
  %27 = or i32 %26, 93, !insn.addr !3463
  ret i32 %27, !insn.addr !3464
}

define i32 @function_408abe(i32 %arg1) local_unnamed_addr {
dec_label_pc_408abe:
  %eax.0.reg2mem = alloca i32, !insn.addr !3465
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %4 = icmp sgt i32* %stack_var_-4, inttoptr (i32 -32 to i32*), !insn.addr !3466
  br i1 %4, label %dec_label_pc_408b27, label %dec_label_pc_408ac8, !insn.addr !3466

dec_label_pc_408ac8:                              ; preds = %dec_label_pc_408abe
  %5 = select i1 %3, i32 -4, i32 4, !insn.addr !3467
  %6 = add i32 %5, %arg1, !insn.addr !3467
  %7 = call i32 @__asm_hlt(), !insn.addr !3468
  %8 = add i32 %2, -117, !insn.addr !3469
  %9 = inttoptr i32 %8 to i8*, !insn.addr !3469
  %10 = load i8, i8* %9, align 1, !insn.addr !3469
  %11 = trunc i32 %2 to i8, !insn.addr !3469
  %12 = add i8 %10, %11, !insn.addr !3469
  store i8 %12, i8* %9, align 1, !insn.addr !3469
  %13 = call i32 @__asm_hlt(), !insn.addr !3470
  %14 = inttoptr i32 %6 to i8*, !insn.addr !3471
  %15 = load i8, i8* %14, align 1, !insn.addr !3471
  %16 = inttoptr i32 %0 to i8*, !insn.addr !3471
  store i8 %15, i8* %16, align 1, !insn.addr !3471
  %17 = select i1 %3, i32 -1, i32 1, !insn.addr !3471
  %18 = add i32 %6, %17, !insn.addr !3471
  %19 = call i32 @WSASend(i32 20992, %_WSABUF* bitcast (i32* @0 to %_WSABUF*), i32 ptrtoint (i32* @0 to i32), i32* nonnull @0, i32 ptrtoint (i32* @0 to i32), %_OVERLAPPED* bitcast (i32* @0 to %_OVERLAPPED*), void (i32, i32, %_OVERLAPPED*, i32)* bitcast (i32* @0 to void (i32, i32, %_OVERLAPPED*, i32)*)), !insn.addr !3472
  %20 = icmp eq i32 %19, -1, !insn.addr !3473
  %21 = icmp eq i1 %20, false, !insn.addr !3474
  br i1 %21, label %dec_label_pc_408b2a, label %dec_label_pc_408afe, !insn.addr !3474

dec_label_pc_408afe:                              ; preds = %dec_label_pc_408ac8
  %22 = icmp eq i32 %19, 0, !insn.addr !3475
  %23 = icmp eq i1 %22, false, !insn.addr !3476
  %24 = inttoptr i32 %18 to i32*
  br i1 %23, label %dec_label_pc_408b15, label %dec_label_pc_408b0b, !insn.addr !3476

dec_label_pc_408b0b:                              ; preds = %dec_label_pc_408afe
  store i32 %19, i32* %24, align 4, !insn.addr !3477
  %25 = trunc i32 %2 to i16, !insn.addr !3478
  call void @__asm_outsd(i16 %25, i32 %2), !insn.addr !3478
  %26 = call i32 @__asm_in.2(i32 48), !insn.addr !3479
  %27 = and i32 %26, -256, !insn.addr !3480
  ret i32 %27, !insn.addr !3481

dec_label_pc_408b15:                              ; preds = %dec_label_pc_408afe
  store i32 14548992, i32* %24, align 4, !insn.addr !3482
  %28 = add i32 %18, -117, !insn.addr !3483
  %29 = inttoptr i32 %28 to i8*, !insn.addr !3483
  %30 = load i8, i8* %29, align 1, !insn.addr !3483
  %31 = trunc i32 %1 to i8, !insn.addr !3483
  %32 = add i8 %30, %31, !insn.addr !3483
  store i8 %32, i8* %29, align 1, !insn.addr !3483
  %33 = call i32 @__asm_in.2(i32 148), !insn.addr !3484
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !3484
  br label %dec_label_pc_408b27, !insn.addr !3484

dec_label_pc_408b27:                              ; preds = %dec_label_pc_408b15, %dec_label_pc_408abe
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3485

dec_label_pc_408b2a:                              ; preds = %dec_label_pc_408ac8
  %34 = inttoptr i32 %18 to i32*, !insn.addr !3486
  store i32 20992, i32* %34, align 4, !insn.addr !3486
  %35 = call i32 @function_90000cc2(i32 %1), !insn.addr !3487
  ret i32 %35, !insn.addr !3487
}

define i32 @function_408b9a(i32 %arg1) local_unnamed_addr {
dec_label_pc_408b9a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3488
}

define i32 @function_408bc4() local_unnamed_addr {
dec_label_pc_408bc4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %0, 1575324457, !insn.addr !3489
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3489
  %6 = load i32, i32* %5, align 4, !insn.addr !3489
  %7 = zext i1 %3 to i32, !insn.addr !3489
  %8 = add i32 %6, %1, !insn.addr !3489
  %9 = add i32 %8, %7, !insn.addr !3489
  store i32 %9, i32* %5, align 4, !insn.addr !3489
  ret i32 %2, !insn.addr !3490
}

define i32 @function_408bce() local_unnamed_addr {
dec_label_pc_408bce:
  %eax.0.reg2mem = alloca i32, !insn.addr !3491
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %4, 1374456632, !insn.addr !3491
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3491
  %8 = load i32, i32* %7, align 4, !insn.addr !3491
  %9 = select i1 %5, i32 -116, i32 -117, !insn.addr !3491
  %10 = add i32 %8, %9, !insn.addr !3491
  store i32 %10, i32* %7, align 4, !insn.addr !3491
  %11 = udiv i32 %2, 256, !insn.addr !3492
  %12 = and i32 %11, 255
  %13 = xor i32 %12, %4, !insn.addr !3492
  %14 = trunc i32 %3 to i8, !insn.addr !3493
  %15 = mul i32 %0, 4, !insn.addr !3493
  %16 = add i32 %1, 19, !insn.addr !3493
  %17 = add i32 %16, %15, !insn.addr !3493
  %18 = inttoptr i32 %17 to i8*, !insn.addr !3493
  %19 = load i8, i8* %18, align 1, !insn.addr !3493
  %20 = and i8 %19, %14, !insn.addr !3493
  %21 = zext i8 %20 to i32, !insn.addr !3493
  %22 = and i32 %3, 65280, !insn.addr !3493
  %23 = or i32 %22, %21, !insn.addr !3493
  %24 = inttoptr i32 %13 to i8*, !insn.addr !3494
  %25 = load i8, i8* %24, align 1, !insn.addr !3494
  %26 = add i8 %25, %20, !insn.addr !3494
  %27 = icmp ult i8 %26, %25, !insn.addr !3494
  store i8 %26, i8* %24, align 1, !insn.addr !3494
  %28 = zext i1 %27 to i32, !insn.addr !3495
  %29 = add i32 %13, ptrtoint (i32* @global_var_40c1b4 to i32), !insn.addr !3495
  %30 = add i32 %29, %28, !insn.addr !3495
  %31 = icmp ule i32 %30, %13, !insn.addr !3495
  %32 = icmp ult i32 %29, %13, !insn.addr !3495
  %33 = select i1 %27, i1 %31, i1 %32, !insn.addr !3495
  %34 = add i32 %2, -1, !insn.addr !3496
  %35 = inttoptr i32 %34 to i32*, !insn.addr !3496
  %36 = load i32, i32* %35, align 4, !insn.addr !3496
  %37 = select i1 %33, i32 118, i32 117, !insn.addr !3496
  %38 = sub i32 %36, %37, !insn.addr !3496
  %39 = zext i1 %33 to i32, !insn.addr !3496
  %40 = sub i32 0, %38
  %41 = sub i32 %40, 1
  %42 = add i32 %41, %39
  %43 = and i32 %42, %36, !insn.addr !3496
  %44 = icmp slt i32 %43, 0, !insn.addr !3496
  store i32 %38, i32* %35, align 4, !insn.addr !3496
  %45 = trunc i32 %23 to i16, !insn.addr !3497
  call void @__asm_outsd(i16 %45, i32 %1), !insn.addr !3497
  store i32 %30, i32* %eax.0.reg2mem, !insn.addr !3498
  br i1 %44, label %46, label %dec_label_pc_408bf6, !insn.addr !3498

; <label>:46:                                     ; preds = %dec_label_pc_408bce
  %47 = call i32 @function_408c2b(), !insn.addr !3498
  store i32 %47, i32* %eax.0.reg2mem, !insn.addr !3498
  br label %dec_label_pc_408bf6, !insn.addr !3498

dec_label_pc_408bf6:                              ; preds = %46, %dec_label_pc_408bce
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3499
}

define i32 @function_408bf9() local_unnamed_addr {
dec_label_pc_408bf9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, 0, !insn.addr !3500
  %2 = icmp eq i1 %1, false, !insn.addr !3501
  br i1 %2, label %dec_label_pc_408c05, label %dec_label_pc_408c00, !insn.addr !3501

dec_label_pc_408c00:                              ; preds = %dec_label_pc_408bf9
  call void @__asm_out.1(i32 139, i32 %0), !insn.addr !3502
  %3 = call i32 @__asm_in.2(i32 93), !insn.addr !3503
  ret i32 %3, !insn.addr !3504

dec_label_pc_408c05:                              ; preds = %dec_label_pc_408bf9
  ret i32 %0, !insn.addr !3505
}

define i32 @function_408c08(i32 %arg1) local_unnamed_addr {
dec_label_pc_408c08:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3506
}

define i32 @function_408c2b() local_unnamed_addr {
dec_label_pc_408c2b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -4, !insn.addr !3507
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3507
  store i32 1, i32* %3, align 4, !insn.addr !3507
  %4 = call i32 @unknown_80391070(i32 %1, i32 973366910), !insn.addr !3508
  %5 = add i32 %4, 1, !insn.addr !3509
  %6 = icmp eq i32 %5, 0, !insn.addr !3509
  %7 = icmp eq i1 %6, false, !insn.addr !3510
  br i1 %7, label %dec_label_pc_408c6b, label %dec_label_pc_408c43, !insn.addr !3510

dec_label_pc_408c43:                              ; preds = %dec_label_pc_408c2b
  %8 = call i32 @unknown_4ac180(), !insn.addr !3511
  %9 = mul i32 %1, 2, !insn.addr !3512
  %10 = inttoptr i32 %1 to i32*, !insn.addr !3512
  store i32 %9, i32* %10, align 4, !insn.addr !3512
  %11 = call i32 @unknown_4ac180(), !insn.addr !3513
  %12 = add i32 %11, 2686117, !insn.addr !3514
  ret i32 %12, !insn.addr !3515

dec_label_pc_408c6b:                              ; preds = %dec_label_pc_408c2b
  %13 = trunc i32 %5 to i8, !insn.addr !3509
  %14 = call i8 @llvm.ctpop.i8(i8 %13), !range !405, !insn.addr !3509
  %15 = and i8 %14, 1, !insn.addr !3509
  %16 = icmp eq i8 %15, 0, !insn.addr !3509
  %17 = icmp slt i32 %5, 0, !insn.addr !3509
  %18 = icmp ne i32 %4, -1, !insn.addr !3509
  %19 = and i32 %4, 15, !insn.addr !3509
  %20 = add nsw i32 %19, -15, !insn.addr !3509
  %21 = icmp ugt i32 %20, 15, !insn.addr !3509
  %22 = zext i1 %18 to i32, !insn.addr !3516
  %23 = zext i1 %16 to i32, !insn.addr !3516
  %24 = zext i1 %21 to i32, !insn.addr !3516
  %25 = zext i1 %17 to i32, !insn.addr !3516
  %26 = mul i32 %23, 4, !insn.addr !3516
  %27 = mul i32 %24, 16, !insn.addr !3516
  %28 = mul i32 %25, 128, !insn.addr !3516
  %29 = or i32 %28, %22, !insn.addr !3516
  %30 = or i32 %29, %27, !insn.addr !3516
  %31 = or i32 %30, %26, !insn.addr !3516
  %32 = mul i32 %31, 256, !insn.addr !3516
  %33 = and i32 %4, -65281, !insn.addr !3516
  %34 = or i32 %33, %32, !insn.addr !3516
  %35 = or i32 %34, 512, !insn.addr !3516
  ret i32 %35, !insn.addr !3516
}

define i32 @function_408c70(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_408c70:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  br i1 %6, label %7, label %dec_label_pc_408c7d, !insn.addr !3517

; <label>:7:                                      ; preds = %dec_label_pc_408c70
  %8 = call i32 @function_408c08(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3517
  br label %dec_label_pc_408c7d, !insn.addr !3517

dec_label_pc_408c7d:                              ; preds = %7, %dec_label_pc_408c70
  %9 = icmp eq i1 %5, %4, !insn.addr !3518
  br i1 %9, label %dec_label_pc_408c8f, label %dec_label_pc_408c7f, !insn.addr !3518

dec_label_pc_408c7f:                              ; preds = %dec_label_pc_408c7d
  %10 = or i32 %0, %arg3, !insn.addr !3519
  %11 = icmp eq i32 %10, 0, !insn.addr !3519
  %12 = icmp eq i1 %11, false, !insn.addr !3520
  br i1 %12, label %dec_label_pc_408cca, label %dec_label_pc_408c85, !insn.addr !3520

dec_label_pc_408c85:                              ; preds = %dec_label_pc_408c7f
  %13 = add i32 %1, -938793956, !insn.addr !3521
  %14 = add i32 %13, %2, !insn.addr !3522
  %15 = inttoptr i32 %14 to i8*, !insn.addr !3522
  %16 = load i8, i8* %15, align 1, !insn.addr !3522
  %17 = udiv i32 %arg3, 256, !insn.addr !3522
  %18 = trunc i32 %17 to i8, !insn.addr !3522
  %19 = and i8 %16, %18, !insn.addr !3522
  store i8 %19, i8* %15, align 1, !insn.addr !3522
  ret i32 %10, !insn.addr !3522

dec_label_pc_408c8f:                              ; preds = %dec_label_pc_408c7d
  %20 = call i32 @unknown_4568b00(i16 %3), !insn.addr !3523
  ret i32 %20, !insn.addr !3524

dec_label_pc_408cca:                              ; preds = %dec_label_pc_408c7f
  %21 = add i32 %arg2, 4, !insn.addr !3525
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3525
  %23 = load i32, i32* %22, align 4, !insn.addr !3525
  %sext = mul i32 %23, 65536
  %24 = sdiv i32 %sext, 65536, !insn.addr !3526
  ret i32 %24, !insn.addr !3527
}

define i32 @function_408db0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_408db0:
  %merge.reg2mem = alloca i32, !insn.addr !3528
  %eax.0.reg2mem = alloca i32, !insn.addr !3528
  %ebp = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -127, !insn.addr !3529
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3529
  %5 = load i32, i32* %4, align 4, !insn.addr !3529
  %6 = xor i32 %5, %0, !insn.addr !3530
  %7 = trunc i32 %1 to i16, !insn.addr !3531
  %8 = call i8 @__asm_in.4(i16 %7), !insn.addr !3531
  %9 = sext i8 %8 to i32, !insn.addr !3531
  %10 = and i32 %6, -256, !insn.addr !3531
  %11 = or i32 %10, %9, !insn.addr !3531
  store i32 %11, i32* %ebp, align 4, !insn.addr !3532
  %12 = add i32 %2, 1301019725, !insn.addr !3533
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3533
  %14 = load i32, i32* %13, align 4, !insn.addr !3533
  %15 = udiv i32 %14, 4096, !insn.addr !3533
  %16 = mul i32 %14, 1048576, !insn.addr !3533
  %17 = or i32 %15, %16, !insn.addr !3533
  store i32 %17, i32* %13, align 4, !insn.addr !3533
  %18 = icmp sgt i32 %2, 64, !insn.addr !3534
  br i1 %18, label %dec_label_pc_409003, label %dec_label_pc_408dce, !insn.addr !3534

dec_label_pc_408dce:                              ; preds = %dec_label_pc_408db0
  %19 = icmp eq i32 %2, 64, !insn.addr !3535
  br i1 %19, label %20, label %dec_label_pc_408dd4, !insn.addr !3536

; <label>:20:                                     ; preds = %dec_label_pc_408dce
  %21 = call i32 @function_2f408fdb(), !insn.addr !3536
  store i32 %21, i32* %eax.0.reg2mem, !insn.addr !3536
  br label %dec_label_pc_408dd4, !insn.addr !3536

dec_label_pc_408dd4:                              ; preds = %20, %dec_label_pc_408dce
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %22 = add i32 %2, -1, !insn.addr !3537
  %23 = bitcast i32* %ebx to i8*
  %24 = load i8, i8* %23, align 4, !insn.addr !3538
  %25 = trunc i32 %eax.0.reload to i8, !insn.addr !3538
  %26 = add i8 %24, %25, !insn.addr !3538
  %27 = load i32, i32* %ebx, align 4, !insn.addr !3538
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3538
  store i8 %26, i8* %28, align 1, !insn.addr !3538
  %29 = add i32 %eax.0.reload, 51, !insn.addr !3539
  %30 = inttoptr i32 %29 to i8*, !insn.addr !3539
  %31 = load i8, i8* %30, align 1, !insn.addr !3539
  %32 = load i32, i32* %ebx, align 4, !insn.addr !3539
  %33 = trunc i32 %32 to i8, !insn.addr !3539
  %34 = add i8 %31, %33, !insn.addr !3539
  store i8 %34, i8* %30, align 1, !insn.addr !3539
  %35 = trunc i32 %22 to i8, !insn.addr !3540
  %36 = and i8 %35, 31, !insn.addr !3540
  %37 = icmp eq i8 %36, 0, !insn.addr !3540
  br i1 %37, label %46, label %38, !insn.addr !3540

; <label>:38:                                     ; preds = %dec_label_pc_408dd4
  %39 = add i32 %1, -1433333615, !insn.addr !3540
  %40 = inttoptr i32 %39 to i8*, !insn.addr !3540
  %41 = load i8, i8* %40, align 1, !insn.addr !3540
  %42 = lshr i8 %41, %36, !insn.addr !3540
  %43 = sub nsw i8 8, %36, !insn.addr !3540
  %44 = shl i8 %41, %43, !insn.addr !3540
  %45 = or i8 %42, %44, !insn.addr !3540
  store i8 %45, i8* %40, align 1, !insn.addr !3540
  br label %46, !insn.addr !3540

; <label>:46:                                     ; preds = %dec_label_pc_408dd4, %38
  %47 = load i32, i32* %ebp, align 4, !insn.addr !3541
  %48 = add i32 %47, -1862759132, !insn.addr !3541
  %49 = inttoptr i32 %48 to i8*, !insn.addr !3541
  %50 = load i8, i8* %49, align 1, !insn.addr !3541
  %51 = udiv i32 %22, 256, !insn.addr !3541
  %52 = trunc i32 %51 to i8, !insn.addr !3541
  %53 = add i8 %50, %52, !insn.addr !3541
  store i8 %53, i8* %49, align 1, !insn.addr !3541
  %54 = load i32, i32* %ebx, align 4, !insn.addr !3542
  %55 = add i32 %54, -764016523, !insn.addr !3542
  %56 = inttoptr i32 %55 to i8*, !insn.addr !3542
  %57 = load i8, i8* %56, align 1, !insn.addr !3542
  %58 = add i8 %57, %35, !insn.addr !3542
  store i8 %58, i8* %56, align 1, !insn.addr !3542
  %59 = load i32, i32* %ebx, align 4, !insn.addr !3543
  %60 = icmp eq i32 %59, -2, !insn.addr !3544
  %61 = zext i1 %60 to i32, !insn.addr !3545
  %62 = and i32 %1, -256, !insn.addr !3545
  %63 = or i32 %62, %61, !insn.addr !3545
  %64 = icmp eq i32 %eax.0.reload, %63, !insn.addr !3546
  store i32 0, i32* %merge.reg2mem, !insn.addr !3547
  br i1 %64, label %dec_label_pc_408e31, label %dec_label_pc_408e02, !insn.addr !3547

dec_label_pc_408e02:                              ; preds = %46
  %65 = load i32, i32* %ebp, align 4, !insn.addr !3548
  %66 = add i32 %65, -62550780, !insn.addr !3548
  %67 = inttoptr i32 %66 to i32*, !insn.addr !3548
  %68 = load i32, i32* %67, align 4, !insn.addr !3548
  store i32 4, i32* inttoptr (i32 -2029056011 to i32*), align 4, !insn.addr !3549
  store i32 %eax.0.reload, i32* inttoptr (i32 -2029056015 to i32*), align 4, !insn.addr !3550
  store i32 8, i32* inttoptr (i32 -2029056019 to i32*), align 4, !insn.addr !3551
  store i32 %68, i32* inttoptr (i32 -2029056023 to i32*), align 4, !insn.addr !3552
  ret i32 %eax.0.reload, !insn.addr !3552

dec_label_pc_408e31:                              ; preds = %dec_label_pc_409003, %46
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !3553

dec_label_pc_409003:                              ; preds = %dec_label_pc_408db0
  %69 = sub i32 63, %2
  %70 = and i32 %69, %2, !insn.addr !3535
  %71 = icmp slt i32 %70, 0, !insn.addr !3535
  br i1 %71, label %dec_label_pc_408e31, label %dec_label_pc_409005, !insn.addr !3554

dec_label_pc_409005:                              ; preds = %dec_label_pc_409003
  %72 = bitcast i32* %ebp to i8*
  %73 = load i8, i8* %72, align 4, !insn.addr !3555
  %74 = trunc i32 %0 to i8, !insn.addr !3555
  %75 = add i8 %73, %74, !insn.addr !3555
  %76 = inttoptr i32 %0 to i8*, !insn.addr !3555
  store i8 %75, i8* %76, align 1, !insn.addr !3555
  %77 = add i32 %0, 65167, !insn.addr !3556
  %78 = inttoptr i32 %77 to i8*, !insn.addr !3556
  %79 = load i8, i8* %78, align 1, !insn.addr !3556
  %80 = udiv i32 %2, 256, !insn.addr !3556
  %81 = trunc i32 %80 to i8, !insn.addr !3556
  %82 = add i8 %79, %81, !insn.addr !3556
  store i8 %82, i8* %78, align 1, !insn.addr !3556
  ret i32 %0, !insn.addr !3557
}

define i32 @function_409024(i32 %arg1) local_unnamed_addr {
dec_label_pc_409024:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %0 to i8
  %6 = trunc i32 %3 to i8, !insn.addr !3558
  %7 = add i8 %6, %5, !insn.addr !3558
  %8 = inttoptr i32 %0 to i8*, !insn.addr !3558
  store i8 %7, i8* %8, align 1, !insn.addr !3558
  %9 = bitcast i32* %ebx to i8*
  %10 = load i8, i8* %9, align 4, !insn.addr !3559
  %11 = udiv i32 %2, 256, !insn.addr !3559
  %12 = trunc i32 %11 to i8, !insn.addr !3559
  %13 = or i8 %10, %12, !insn.addr !3559
  %14 = load i32, i32* %ebx, align 4, !insn.addr !3559
  %15 = inttoptr i32 %14 to i8*, !insn.addr !3559
  store i8 %13, i8* %15, align 1, !insn.addr !3559
  %16 = load i32, i32* %ecx, align 4, !insn.addr !3560
  %17 = trunc i32 %16 to i8, !insn.addr !3560
  %18 = and i8 %17, 31, !insn.addr !3560
  %19 = icmp eq i8 %18, 0, !insn.addr !3560
  br i1 %19, label %32, label %20, !insn.addr !3560

; <label>:20:                                     ; preds = %dec_label_pc_409024
  %21 = load i32, i32* %ebx, align 4, !insn.addr !3560
  %22 = udiv i32 %21, 256, !insn.addr !3560
  %23 = trunc i32 %22 to i8, !insn.addr !3560
  %24 = shl i8 %23, %18, !insn.addr !3560
  %25 = sub nsw i8 8, %18, !insn.addr !3560
  %26 = lshr i8 %23, %25, !insn.addr !3560
  %27 = or i8 %26, %24, !insn.addr !3560
  %28 = zext i8 %27 to i32, !insn.addr !3560
  %29 = mul i32 %28, 256, !insn.addr !3560
  %30 = and i32 %21, -65281, !insn.addr !3560
  %31 = or i32 %29, %30, !insn.addr !3560
  store i32 %31, i32* %ebx, align 4, !insn.addr !3560
  br label %32, !insn.addr !3560

; <label>:32:                                     ; preds = %dec_label_pc_409024, %20
  %33 = add i32 %1, -1, !insn.addr !3561
  %34 = add i32 %16, 1835257, !insn.addr !3562
  %35 = inttoptr i32 %34 to i8*, !insn.addr !3562
  %36 = load i8, i8* %35, align 1, !insn.addr !3562
  %37 = trunc i32 %4 to i8, !insn.addr !3562
  %38 = add i8 %36, %37, !insn.addr !3562
  store i8 %38, i8* %35, align 1, !insn.addr !3562
  %39 = bitcast i32* %ecx to i8*
  %40 = load i8, i8* %39, align 4, !insn.addr !3563
  %41 = load i32, i32* %ecx, align 4
  %42 = udiv i32 %41, 256, !insn.addr !3563
  %43 = trunc i32 %42 to i8, !insn.addr !3563
  %44 = add i8 %40, %43, !insn.addr !3563
  %45 = inttoptr i32 %41 to i8*, !insn.addr !3563
  store i8 %44, i8* %45, align 1, !insn.addr !3563
  %46 = inttoptr i32 %33 to i8*, !insn.addr !3564
  %47 = load i8, i8* %46, align 1, !insn.addr !3564
  store i8 %47, i8* %8, align 1, !insn.addr !3564
  call void @__asm_out.1(i32 255, i32 %4), !insn.addr !3565
  %48 = load i32, i32* %ebx, align 4
  %49 = add i32 %48, 1166869582, !insn.addr !3566
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3566
  %51 = load i32, i32* %50, align 4, !insn.addr !3566
  %52 = add i32 %51, -1, !insn.addr !3566
  store i32 %52, i32* %50, align 4, !insn.addr !3566
  %53 = add i32 %2, 4, !insn.addr !3567
  %54 = inttoptr i32 %53 to i8*, !insn.addr !3567
  %55 = load i8, i8* %54, align 1, !insn.addr !3567
  %56 = load i32, i32* %ecx, align 4, !insn.addr !3567
  %57 = udiv i32 %56, 256, !insn.addr !3567
  %58 = trunc i32 %57 to i8, !insn.addr !3567
  %59 = add i8 %55, %58, !insn.addr !3567
  store i8 %59, i8* %54, align 1, !insn.addr !3567
  %60 = inttoptr i32 %4 to i8*, !insn.addr !3568
  %61 = load i32, i32* %ecx, align 4, !insn.addr !3569
  %62 = call i32 @setsockopt(i32 %61, i32 6, i32 1, i8* %60, i32 ptrtoint (i32* @0 to i32)), !insn.addr !3570
  ret i32 %62, !insn.addr !3571
}

define i32 @function_409065() local_unnamed_addr {
dec_label_pc_409065:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @WSAGetLastError(), !insn.addr !3572
  %2 = icmp eq i32 %1, 0, !insn.addr !3573
  %3 = icmp eq i1 %2, false, !insn.addr !3574
  br i1 %3, label %dec_label_pc_409078, label %dec_label_pc_409071, !insn.addr !3574

dec_label_pc_409071:                              ; preds = %dec_label_pc_409065
  ret i32 %1, !insn.addr !3575

dec_label_pc_409078:                              ; preds = %dec_label_pc_409065
  %4 = call i32 @WSAGetLastError(), !insn.addr !3576
  %5 = call i32 @__asm_wait(), !insn.addr !3577
  %6 = load i8, i8* inttoptr (i32 2147483642 to i8*), align 2, !insn.addr !3578
  %7 = trunc i32 %0 to i8, !insn.addr !3578
  %8 = add i8 %6, %7, !insn.addr !3578
  store i8 %8, i8* inttoptr (i32 2147483642 to i8*), align 2, !insn.addr !3578
  %9 = call i32 @__asm_in.2(i32 93), !insn.addr !3579
  ret i32 %9, !insn.addr !3580
}

define i32 @function_409086(i32 %arg1) local_unnamed_addr {
dec_label_pc_409086:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = icmp eq i32 %1, 0, !insn.addr !3581
  br i1 %2, label %dec_label_pc_40909f, label %dec_label_pc_409090, !insn.addr !3582

dec_label_pc_409090:                              ; preds = %dec_label_pc_409086
  %3 = add i32 %0, 56, !insn.addr !3583
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3583
  %5 = load i32, i32* %4, align 4, !insn.addr !3583
  %6 = or i32 %5, 39680, !insn.addr !3584
  store i32 %6, i32* %4, align 4, !insn.addr !3585
  ret i32 %6, !insn.addr !3586

dec_label_pc_40909f:                              ; preds = %dec_label_pc_409086
  ret i32 %arg1, !insn.addr !3587
}

define i32 @function_4090ce() local_unnamed_addr {
dec_label_pc_4090ce:
  %0 = call i32 @function_409140(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3588
  ret i32 %0, !insn.addr !3588
}

define i32 @function_4090d6(i32 %arg1) local_unnamed_addr {
dec_label_pc_4090d6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-15 = alloca i32, align 4
  %7 = call i32 @__decompiler_undefined_function_0()
  %8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %9 = add i32 %5, 208928772, !insn.addr !3589
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3589
  %11 = load i8, i8* %10, align 1, !insn.addr !3589
  %12 = trunc i32 %5 to i8, !insn.addr !3589
  %13 = add i8 %11, %12, !insn.addr !3589
  %14 = icmp ult i8 %13, %11, !insn.addr !3589
  store i8 %13, i8* %10, align 1, !insn.addr !3589
  %15 = load i32, i32* %stack_var_0, align 4, !insn.addr !3590
  %16 = mul i32 %2, 2, !insn.addr !3591
  %17 = add i32 %1, -1207956286, !insn.addr !3591
  %18 = add i32 %17, %16, !insn.addr !3591
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3591
  %20 = load i32, i32* %19, align 4, !insn.addr !3591
  %21 = zext i1 %14 to i32, !insn.addr !3592
  %22 = add i32 %20, %4, !insn.addr !3592
  %23 = add i32 %22, %21, !insn.addr !3592
  %24 = inttoptr i32 %4 to i32*, !insn.addr !3592
  store i32 %23, i32* %24, align 4, !insn.addr !3592
  %25 = add i32 %3, -983702133, !insn.addr !3593
  %26 = inttoptr i32 %25 to i8*, !insn.addr !3593
  %27 = load i8, i8* %26, align 1, !insn.addr !3593
  %28 = udiv i32 %20, 256, !insn.addr !3593
  %29 = trunc i32 %28 to i8, !insn.addr !3593
  %30 = add i8 %27, %29, !insn.addr !3593
  store i8 %30, i8* %26, align 1, !insn.addr !3593
  %31 = add i32 %20, 1, !insn.addr !3594
  %32 = add i32 %20, 2, !insn.addr !3595
  %33 = trunc i32 %3 to i8
  %34 = trunc i32 %32 to i8, !insn.addr !3596
  %35 = add i8 %34, %33, !insn.addr !3596
  %36 = inttoptr i32 %3 to i8*, !insn.addr !3596
  store i8 %35, i8* %36, align 1, !insn.addr !3596
  %37 = inttoptr i32 %32 to i32*, !insn.addr !3597
  store i32 %32, i32* inttoptr (i32 -570408818 to i32*), align 4, !insn.addr !3598
  %38 = add i32 %20, 3, !insn.addr !3599
  %39 = inttoptr i32 %38 to i8*, !insn.addr !3600
  %40 = load i8, i8* %39, align 1, !insn.addr !3600
  %41 = trunc i32 %38 to i8, !insn.addr !3600
  %42 = add i8 %40, %41, !insn.addr !3600
  store i8 %42, i8* %39, align 1, !insn.addr !3600
  %43 = load i32, i32* %stack_var_0, align 4, !insn.addr !3601
  %44 = call i32 @unknown_3fbc10(i32 %0, i32 %15, i32* nonnull %stack_var_-15, i32 %1, i32 %7, i32* nonnull %stack_var_0, i32 %8, i32 %2, i32 %0, i32 %3, i32 %4, i32 %31, i32 %43), !insn.addr !3601
  ret i32 %6, !insn.addr !3602
}

define i32 @function_409140(i32 %arg1) local_unnamed_addr {
dec_label_pc_409140:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %1, 4, !insn.addr !3603
  %3 = add i32 %2, 4202712, !insn.addr !3603
  %4 = inttoptr i32 %3 to i8*, !insn.addr !3603
  %5 = load i8, i8* %4, align 4, !insn.addr !3603
  %6 = add i32 %0, -1, !insn.addr !3604
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3604
  store i8 %5, i8* %7, align 1, !insn.addr !3604
  %8 = inttoptr i32 %0 to i8*, !insn.addr !3605
  store i8 %5, i8* %8, align 1, !insn.addr !3605
  %9 = call i32 @unknown_8d819301(), !insn.addr !3606
  ret i32 %9, !insn.addr !3607
}

define i32 @function_409188() local_unnamed_addr {
dec_label_pc_409188:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !3608
  %3 = inttoptr i32 %1 to i32*, !insn.addr !3608
  store i32 %2, i32* %3, align 4, !insn.addr !3608
  %4 = call i32 @__asm_iretd(), !insn.addr !3609
  ret i32 %4, !insn.addr !3610
}

define i32 @function_409193() local_unnamed_addr {
dec_label_pc_409193:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = icmp eq i32 %2, -1, !insn.addr !3611
  %9 = add i32 %5, -1, !insn.addr !3612
  %10 = icmp eq i32 %9, 0, !insn.addr !3612
  %11 = or i1 %8, %10, !insn.addr !3612
  br i1 %11, label %dec_label_pc_409198, label %dec_label_pc_4091d9, !insn.addr !3612

dec_label_pc_409198:                              ; preds = %dec_label_pc_409193
  %12 = ashr i32 %6, 31, !insn.addr !3613
  %13 = zext i32 %6 to i64, !insn.addr !3614
  %14 = zext i32 %12 to i64, !insn.addr !3614
  %15 = mul i64 %14, 4294967296, !insn.addr !3614
  %16 = or i64 %15, %13, !insn.addr !3614
  %17 = zext i32 %1 to i64, !insn.addr !3614
  %18 = sdiv i64 %16, %17, !insn.addr !3614
  %19 = inttoptr i32 %5 to i8*, !insn.addr !3615
  store i8 32, i8* %19, align 1, !insn.addr !3615
  %20 = add i32 %5, 1, !insn.addr !3616
  %21 = trunc i64 %18 to i8, !insn.addr !3617
  %22 = add i8 %21, 48, !insn.addr !3617
  %23 = inttoptr i32 %20 to i8*, !insn.addr !3618
  store i8 %22, i8* %23, align 1, !insn.addr !3618
  %24 = select i1 %7, i32 -4, i32 4, !insn.addr !3619
  %25 = add i32 %24, %1, !insn.addr !3619
  %26 = udiv i32 %3, 256, !insn.addr !3620
  %27 = trunc i32 %26 to i8, !insn.addr !3620
  %28 = inttoptr i32 %25 to i8*, !insn.addr !3620
  store i8 %27, i8* %28, align 1, !insn.addr !3620
  %29 = add i32 %5, 2, !insn.addr !3621
  %30 = ashr i32 %1, 31, !insn.addr !3622
  %31 = zext i32 %30 to i64, !insn.addr !3623
  %32 = mul i64 %31, 4294967296, !insn.addr !3623
  %33 = or i64 %32, %17, !insn.addr !3623
  %34 = zext i32 %25 to i64, !insn.addr !3623
  %35 = sdiv i64 %33, %34, !insn.addr !3623
  %36 = trunc i64 %35 to i32, !insn.addr !3623
  %37 = srem i64 %33, %34, !insn.addr !3623
  %38 = inttoptr i32 %29 to i8*, !insn.addr !3624
  store i8 58, i8* %38, align 1, !insn.addr !3624
  %39 = add i32 %5, 3, !insn.addr !3625
  %40 = add i32 %36, 48, !insn.addr !3626
  %41 = and i32 %40, 255, !insn.addr !3626
  %42 = and i32 %36, -256, !insn.addr !3626
  %43 = or i32 %41, %42, !insn.addr !3626
  %44 = trunc i64 %37 to i8, !insn.addr !3627
  %45 = add i8 %44, 48, !insn.addr !3627
  %46 = icmp ugt i8 %44, -49, !insn.addr !3627
  %47 = trunc i32 %40 to i8, !insn.addr !3628
  %48 = inttoptr i32 %39 to i8*, !insn.addr !3628
  store i8 %47, i8* %48, align 1, !insn.addr !3628
  %49 = select i1 %46, i32 -2008950714, i32 -2008950715, !insn.addr !3629
  %50 = sub i32 %43, %49, !insn.addr !3629
  %51 = icmp ult i32 %43, %49, !insn.addr !3629
  %52 = or i1 %46, %51, !insn.addr !3629
  %53 = add i32 %5, -100, !insn.addr !3630
  %54 = inttoptr i32 %53 to i32*, !insn.addr !3630
  %55 = load i32, i32* %54, align 4, !insn.addr !3630
  %56 = zext i1 %52 to i32, !insn.addr !3630
  %57 = add i32 %50, %55, !insn.addr !3630
  %58 = add i32 %57, %56, !insn.addr !3630
  store i32 %58, i32* %54, align 4, !insn.addr !3630
  %59 = udiv i32 %50, 256, !insn.addr !3631
  %60 = trunc i32 %59 to i8, !insn.addr !3631
  %61 = or i8 %45, %60, !insn.addr !3631
  %62 = zext i8 %61 to i32, !insn.addr !3631
  %63 = mul i32 %62, 256, !insn.addr !3631
  %64 = and i32 %50, -65536, !insn.addr !3631
  store i8 58, i8* %48, align 1, !insn.addr !3632
  %65 = add i32 %5, 4, !insn.addr !3633
  %66 = add i32 %50, 48, !insn.addr !3634
  %67 = and i32 %66, 255, !insn.addr !3634
  %68 = or i32 %67, %64, !insn.addr !3631
  %69 = or i32 %68, %63, !insn.addr !3634
  %70 = trunc i32 %66 to i8, !insn.addr !3635
  %71 = inttoptr i32 %65 to i8*, !insn.addr !3635
  store i8 %70, i8* %71, align 1, !insn.addr !3635
  ret i32 %69, !insn.addr !3636

dec_label_pc_4091d9:                              ; preds = %dec_label_pc_409193
  %72 = inttoptr i32 %9 to i8*, !insn.addr !3637
  store i8 32, i8* %72, align 1, !insn.addr !3637
  %73 = trunc i32 %4 to i16, !insn.addr !3638
  %74 = call i8 @__asm_insb(i16 %73), !insn.addr !3638
  %75 = inttoptr i32 %0 to i8*, !insn.addr !3638
  store i8 %74, i8* %75, align 1, !insn.addr !3638
  %76 = load i8, i8* inttoptr (i32 5957823 to i8*), align 1, !insn.addr !3639
  %77 = add i8 %76, -65, !insn.addr !3639
  store i8 %77, i8* inttoptr (i32 5957823 to i8*), align 1, !insn.addr !3639
  %78 = call i32 @function_40924d(), !insn.addr !3640
  ret i32 %78, !insn.addr !3640
}

define i32 @function_4091fc(i16 %arg1) local_unnamed_addr {
dec_label_pc_4091fc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = sext i32 %0 to i64, !insn.addr !3641
  %3 = sext i32 %1 to i64, !insn.addr !3641
  %4 = mul nsw i64 %3, %2, !insn.addr !3641
  %5 = udiv i64 %4, 4294967296, !insn.addr !3641
  %6 = trunc i64 %5 to i32, !insn.addr !3641
  %7 = icmp ne i32 %6, 0, !insn.addr !3641
  %8 = icmp ne i32 %6, -1, !insn.addr !3641
  %9 = icmp eq i1 %7, %8, !insn.addr !3641
  %10 = load i32, i32* inttoptr (i32 -1052654965 to i32*), align 4, !insn.addr !3642
  %11 = zext i1 %9 to i32, !insn.addr !3642
  %12 = udiv i32 %10, 256, !insn.addr !3642
  %13 = mul i32 %10, 33554432, !insn.addr !3642
  %14 = mul i32 %11, 16777216, !insn.addr !3642
  %15 = or i32 %13, %12, !insn.addr !3642
  %16 = or i32 %15, %14, !insn.addr !3642
  store i32 %16, i32* inttoptr (i32 -1052654965 to i32*), align 4, !insn.addr !3642
  %17 = call i32 @function_310312eb(), !insn.addr !3643
  ret i32 %17, !insn.addr !3643
}

define i32 @function_409216() local_unnamed_addr {
dec_label_pc_409216:
  %0 = call i32 @function_2502fac1(), !insn.addr !3644
  ret i32 %0, !insn.addr !3644
}

define i32 @function_409223(i16 %arg1) local_unnamed_addr {
dec_label_pc_409223:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !3645
  ret i32 %2, !insn.addr !3646
}

define i32 @function_40922c() local_unnamed_addr {
dec_label_pc_40922c:
  %ebx = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = inttoptr i32 %2 to i8*, !insn.addr !3647
  %5 = load i8, i8* %4, align 1, !insn.addr !3647
  %6 = add i8 %5, %3, !insn.addr !3647
  store i8 %6, i8* %4, align 1, !insn.addr !3647
  %7 = trunc i32 %0 to i8, !insn.addr !3648
  %8 = inttoptr i32 %1 to i8*, !insn.addr !3648
  store i8 %7, i8* %8, align 1, !insn.addr !3648
  %9 = ashr i32 %2, 31, !insn.addr !3649
  %10 = bitcast i32* %ebx to i8*
  %11 = load i8, i8* %10, align 4, !insn.addr !3650
  %12 = udiv i32 %9, 256, !insn.addr !3650
  %13 = trunc i32 %12 to i8, !insn.addr !3650
  %14 = xor i8 %11, %13, !insn.addr !3650
  %15 = load i32, i32* %ebx, align 4, !insn.addr !3650
  %16 = inttoptr i32 %15 to i8*, !insn.addr !3650
  store i8 %14, i8* %16, align 1, !insn.addr !3650
  ret i32 %2, !insn.addr !3651
}

define i32 @function_40924d() local_unnamed_addr {
dec_label_pc_40924d:
  %esp.0.reg2mem = alloca i32, !insn.addr !3652
  %eax.1.reg2mem = alloca i32, !insn.addr !3652
  %0 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i8, align 1
  %4 = trunc i32 %1 to i8
  store i8 %4, i8* %stack_var_-8, align 1, !insn.addr !3653
  %5 = call i32 @__asm_int1(), !insn.addr !3654
  %6 = add i32 %0, 111, !insn.addr !3655
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3655
  %8 = load i8, i8* %7, align 1, !insn.addr !3655
  %9 = trunc i32 %2 to i8, !insn.addr !3655
  %10 = zext i1 %3 to i8, !insn.addr !3655
  %11 = add i8 %10, %9, !insn.addr !3655
  %12 = add i8 %11, %8, !insn.addr !3655
  store i8 %12, i8* %7, align 1, !insn.addr !3655
  %13 = icmp eq i32 %0, -1, !insn.addr !3656
  store i8 -1, i8* %stack_var_-8, align 1, !insn.addr !3657
  %14 = icmp eq i1 %13, false, !insn.addr !3658
  br i1 %14, label %dec_label_pc_40926b, label %dec_label_pc_409263.preheader, !insn.addr !3658

dec_label_pc_409263.preheader:                    ; preds = %dec_label_pc_40924d
  ret i32 %5, !insn.addr !3659

dec_label_pc_40926b:                              ; preds = %dec_label_pc_40924d
  %sext = mul i32 %1, 16777216
  %15 = sdiv i32 %sext, 16777216, !insn.addr !3660
  %16 = load i32, i32* %ebx, align 4, !insn.addr !3661
  %17 = sub i32 0, %0
  %18 = sub i32 %17, 1
  %19 = ptrtoint i8* %stack_var_-8 to i32, !insn.addr !3657
  %20 = inttoptr i32 %5 to i8*, !insn.addr !3662
  %21 = load i8, i8* %20, align 1, !insn.addr !3662
  %22 = trunc i32 %5 to i8, !insn.addr !3662
  %23 = or i8 %21, %22, !insn.addr !3662
  %24 = icmp eq i8 %23, 0, !insn.addr !3662
  store i8 %23, i8* %20, align 1, !insn.addr !3662
  %25 = add nsw i32 %15, 16, !insn.addr !3663
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3663
  store i32 -1, i32* %26, align 4, !insn.addr !3663
  store i32 %5, i32* %eax.1.reg2mem, !insn.addr !3664
  store i32 %19, i32* %esp.0.reg2mem, !insn.addr !3664
  br i1 %24, label %dec_label_pc_4092dd, label %dec_label_pc_40929f, !insn.addr !3664

dec_label_pc_40929f:                              ; preds = %dec_label_pc_40926b
  %27 = add i32 %16, 987332729, !insn.addr !3665
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3665
  %29 = load i8, i8* %28, align 1, !insn.addr !3665
  %30 = zext i8 %29 to i32, !insn.addr !3665
  %31 = mul i32 %30, 256, !insn.addr !3665
  %32 = and i32 %5, -65536, !insn.addr !3665
  %33 = or i32 %31, %32, !insn.addr !3665
  %34 = bitcast i32* %ebx to i8*
  %35 = load i8, i8* %34, align 4, !insn.addr !3666
  %36 = zext i8 %35 to i32, !insn.addr !3666
  %37 = or i32 %33, %36, !insn.addr !3666
  %38 = icmp eq i8 %35, 92, !insn.addr !3667
  %39 = icmp eq i1 %38, false, !insn.addr !3668
  store i32 %37, i32* %eax.1.reg2mem, !insn.addr !3668
  store i32 %19, i32* %esp.0.reg2mem, !insn.addr !3668
  br i1 %39, label %dec_label_pc_4092dd, label %dec_label_pc_4092a9, !insn.addr !3668

dec_label_pc_4092a9:                              ; preds = %dec_label_pc_40929f
  %40 = icmp ne i8 %9, 47, !insn.addr !3669
  %41 = icmp eq i8 %9, 92, !insn.addr !3670
  %42 = icmp eq i1 %41, false, !insn.addr !3671
  %or.cond = icmp eq i1 %40, %42
  store i32 %37, i32* %eax.1.reg2mem, !insn.addr !3672
  store i32 %19, i32* %esp.0.reg2mem, !insn.addr !3672
  br i1 %or.cond, label %dec_label_pc_4092dd, label %dec_label_pc_4092b3, !insn.addr !3672

dec_label_pc_4092b3:                              ; preds = %dec_label_pc_4092a9
  %43 = load i32, i32* %ebx, align 4
  store i32 -1, i32* %stack_var_-44, align 4, !insn.addr !3673
  %44 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !3673
  %45 = udiv i32 %43, 256, !insn.addr !3674
  %46 = trunc i32 %45 to i8, !insn.addr !3674
  %47 = trunc i32 %43 to i8
  %48 = icmp eq i8 %47, %46, !insn.addr !3674
  store i32 %37, i32* %eax.1.reg2mem, !insn.addr !3675
  store i32 %44, i32* %esp.0.reg2mem, !insn.addr !3675
  br i1 %48, label %dec_label_pc_4092dd, label %dec_label_pc_4092b9, !insn.addr !3675

dec_label_pc_4092b9:                              ; preds = %dec_label_pc_4092b3
  store i32 -1, i32* %26, align 4, !insn.addr !3676
  %49 = load i32, i32* %stack_var_-44, align 4, !insn.addr !3677
  %50 = bitcast i8* %stack_var_-8 to i32*, !insn.addr !3677
  %51 = load i8, i8* %stack_var_-8, align 1, !insn.addr !3677
  %52 = sext i8 %51 to i32, !insn.addr !3677
  %53 = call i32 @unknown_e00000c9(i32 %18, i16* getelementptr inbounds ([9 x i16], [9 x i16]* @global_var_4100cc, i32 0, i32 0), i32 %49, i32 %16, i32 %18, i32 %15, i32* nonnull %50, i32 %43, i32 %2, i32 -1, i32 %37, i32 %52), !insn.addr !3677
  %54 = call i32 @unknown_317d15e2(i32 -1), !insn.addr !3678
  ret i32 %54, !insn.addr !3679

dec_label_pc_4092dd:                              ; preds = %dec_label_pc_4092a9, %dec_label_pc_4092b3, %dec_label_pc_40929f, %dec_label_pc_40926b
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %55 = inttoptr i32 %18 to i8*, !insn.addr !3680
  %56 = load i8, i8* %55, align 1, !insn.addr !3680
  %57 = and i32 %eax.1.reload, -256, !insn.addr !3680
  %58 = or i8 %56, -115, !insn.addr !3681
  %59 = zext i8 %58 to i32, !insn.addr !3681
  %60 = or i32 %57, %59, !insn.addr !3681
  %61 = add i32 %60, 86, !insn.addr !3682
  %62 = inttoptr i32 %61 to i8*, !insn.addr !3682
  %63 = load i8, i8* %62, align 1, !insn.addr !3682
  %64 = add i8 %63, %9, !insn.addr !3682
  store i8 %64, i8* %62, align 1, !insn.addr !3682
  %65 = load i32, i32* %ebx, align 4, !insn.addr !3683
  %66 = add i32 %esp.0.reload, -4, !insn.addr !3683
  %67 = inttoptr i32 %66 to i32*, !insn.addr !3683
  store i32 %65, i32* %67, align 4, !insn.addr !3683
  ret i32 -1, !insn.addr !3683
}

define i32 @function_409422() local_unnamed_addr {
dec_label_pc_409422:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40942b(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40942b:
  %.reg2mem5 = alloca i32, !insn.addr !3684
  %edi.0.reg2mem = alloca i32, !insn.addr !3684
  %ebx.0.reg2mem = alloca i32, !insn.addr !3684
  %.reg2mem = alloca i8, !insn.addr !3684
  %.pre-phi4.reg2mem = alloca i8, !insn.addr !3684
  %ebp = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %3 = add i32 %0, -4, !insn.addr !3685
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3685
  %5 = load i32, i32* %4, align 4, !insn.addr !3685
  %6 = or i32 %5, 1080033338, !insn.addr !3685
  store i32 %6, i32* %4, align 4, !insn.addr !3685
  %7 = and i32 %1, 134217728, !insn.addr !3686
  %8 = icmp eq i32 %7, 0, !insn.addr !3686
  br i1 %8, label %dec_label_pc_40942b.dec_label_pc_409448_crit_edge, label %dec_label_pc_40943f, !insn.addr !3687

dec_label_pc_40942b.dec_label_pc_409448_crit_edge: ; preds = %dec_label_pc_40942b
  %.phi.trans.insert = bitcast i32* %eax to i8*
  %.pre = load i8, i8* %.phi.trans.insert, align 4
  %.pre1 = load i32, i32* %eax, align 4
  %.pre3 = trunc i32 %.pre1 to i8, !insn.addr !3688
  store i8 %.pre3, i8* %.pre-phi4.reg2mem
  store i8 %.pre, i8* %.reg2mem
  br label %dec_label_pc_409448

dec_label_pc_40943f:                              ; preds = %dec_label_pc_40942b
  %9 = add i32 %2, 30179580, !insn.addr !3689
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3689
  %11 = load i32, i32* %10, align 4, !insn.addr !3689
  %12 = load i32, i32* %eax, align 4, !insn.addr !3690
  %13 = call i32 @__asm_in.2(i32 252), !insn.addr !3691
  store i32 %13, i32* %eax, align 4, !insn.addr !3691
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %.pre-phi4.reg2mem, !insn.addr !3691
  store i8 %14, i8* %.reg2mem, !insn.addr !3691
  store i32 %11, i32* %ebx.0.reg2mem, !insn.addr !3691
  store i32 %12, i32* %edi.0.reg2mem, !insn.addr !3691
  br label %dec_label_pc_409448, !insn.addr !3691

dec_label_pc_409448:                              ; preds = %dec_label_pc_40942b.dec_label_pc_409448_crit_edge, %dec_label_pc_40943f
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %.reload = load i8, i8* %.reg2mem, !insn.addr !3688
  %.pre-phi4.reload = load i8, i8* %.pre-phi4.reg2mem
  %15 = load i32, i32* inttoptr (i32 -29292324 to i32*), align 4, !insn.addr !3692
  %16 = xor i8 %.reload, %.pre-phi4.reload, !insn.addr !3688
  %17 = inttoptr i32 %edi.0.reload to i8*, !insn.addr !3688
  store i8 %16, i8* %17, align 1, !insn.addr !3688
  %18 = bitcast i32* %ebp to i8*
  %19 = load i8, i8* %18, align 4, !insn.addr !3693
  %20 = trunc i32 %15 to i8, !insn.addr !3693
  %21 = add i8 %19, %20, !insn.addr !3693
  %22 = load i32, i32* %ebp, align 4, !insn.addr !3693
  %23 = inttoptr i32 %22 to i8*, !insn.addr !3693
  store i8 %21, i8* %23, align 1, !insn.addr !3693
  store i32 %ebx.0.reload, i32* %eax, align 4, !insn.addr !3694
  %24 = and i32 %15, 4, !insn.addr !3695
  %25 = icmp eq i32 %24, 0, !insn.addr !3695
  store i32 %ebx.0.reload, i32* %.reg2mem5, !insn.addr !3696
  br i1 %25, label %26, label %dec_label_pc_409461, !insn.addr !3696

; <label>:26:                                     ; preds = %dec_label_pc_409448
  %27 = call i32 @function_409422(), !insn.addr !3696
  store i32 %27, i32* %eax, align 4, !insn.addr !3696
  store i32 %27, i32* %.reg2mem5, !insn.addr !3696
  br label %dec_label_pc_409461, !insn.addr !3696

dec_label_pc_409461:                              ; preds = %26, %dec_label_pc_409448
  %.reload6 = load i32, i32* %.reg2mem5, !insn.addr !3697
  ret i32 %.reload6, !insn.addr !3697
}

define i32 @function_409463() local_unnamed_addr {
dec_label_pc_409463:
  %merge.reg2mem = alloca i32, !insn.addr !3698
  %esp.2.reg2mem = alloca i32, !insn.addr !3698
  %ebx.2.reg2mem = alloca i32, !insn.addr !3698
  %eax.2.reg2mem = alloca i32, !insn.addr !3698
  %esp.1.reg2mem = alloca i32, !insn.addr !3698
  %ebx.1.reg2mem = alloca i32, !insn.addr !3698
  %ecx.1.reg2mem = alloca i32, !insn.addr !3698
  %eax.1.reg2mem = alloca i32, !insn.addr !3698
  %esp.0.reg2mem = alloca i32, !insn.addr !3698
  %ebx.0.reg2mem = alloca i32, !insn.addr !3698
  %ecx.0.reg2mem = alloca i32, !insn.addr !3698
  %eax.0.reg2mem = alloca i32, !insn.addr !3698
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, 1, !insn.addr !3698
  %5 = icmp eq i32 %4, 0, !insn.addr !3698
  store i32 %4, i32* %eax.1.reg2mem, !insn.addr !3699
  br i1 %5, label %dec_label_pc_40946d, label %dec_label_pc_40948f, !insn.addr !3699

dec_label_pc_40946d:                              ; preds = %dec_label_pc_409463
  %6 = and i32 %2, -256, !insn.addr !3700
  %7 = and i32 %1, -136, !insn.addr !3701
  %8 = trunc i32 %7 to i8, !insn.addr !3702
  %9 = sub i32 0, %7, !insn.addr !3702
  %10 = icmp ne i8 %8, 0, !insn.addr !3702
  %11 = and i32 %9, 248, !insn.addr !3702
  %12 = and i32 %1, -256, !insn.addr !3702
  %13 = or i32 %11, %12, !insn.addr !3702
  %14 = zext i1 %10 to i32, !insn.addr !3703
  %15 = or i32 %13, %14, !insn.addr !3703
  %16 = or i32 %13, 4, !insn.addr !3703
  %17 = sub i32 %16, %15
  %18 = and i32 %17, -2, !insn.addr !3704
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3704
  %20 = load i32, i32* %19, align 4, !insn.addr !3704
  %21 = add i32 %20, -21, !insn.addr !3704
  store i32 %21, i32* %19, align 4, !insn.addr !3704
  %22 = inttoptr i32 %6 to i8*, !insn.addr !3705
  %23 = load i8, i8* %22, align 256, !insn.addr !3705
  %24 = zext i8 %23 to i32, !insn.addr !3705
  %25 = mul i32 %24, 256, !insn.addr !3705
  %26 = and i32 %2, -65536, !insn.addr !3705
  %27 = or i32 %25, %26, !insn.addr !3705
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !3706
  store i32 %27, i32* %ecx.0.reg2mem, !insn.addr !3706
  br label %dec_label_pc_409483, !insn.addr !3706

dec_label_pc_409483:                              ; preds = %dec_label_pc_4094a6, %dec_label_pc_40946d
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !3707
  store i32 %ecx.0.reload, i32* %ecx.1.reg2mem, !insn.addr !3707
  store i32 %ebx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !3707
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !3707
  br label %dec_label_pc_40948f, !insn.addr !3707

dec_label_pc_40948f:                              ; preds = %dec_label_pc_409463, %dec_label_pc_409483
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %28 = load i8, i8* inttoptr (i32 41173187 to i8*), align 1, !insn.addr !3708
  %29 = zext i8 %28 to i32, !insn.addr !3708
  %30 = and i32 %eax.1.reload, -256, !insn.addr !3708
  %31 = or i32 %30, %29, !insn.addr !3708
  %32 = icmp eq i32 %31, 0, !insn.addr !3709
  %33 = icmp eq i1 %32, false, !insn.addr !3710
  store i32 %31, i32* %eax.2.reg2mem, !insn.addr !3710
  store i32 %ebx.1.reload, i32* %ebx.2.reg2mem, !insn.addr !3710
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !3710
  br i1 %33, label %dec_label_pc_4094a6, label %dec_label_pc_409498, !insn.addr !3710

dec_label_pc_409498:                              ; preds = %dec_label_pc_40948f
  %34 = add i32 %esp.1.reload, 8, !insn.addr !3711
  %35 = inttoptr i32 %34 to i32*, !insn.addr !3712
  %36 = load i32, i32* %35, align 4, !insn.addr !3712
  %37 = add i32 %esp.1.reload, 12, !insn.addr !3712
  %38 = and i32 %36, -256, !insn.addr !3713
  %39 = or i32 %38, 194, !insn.addr !3713
  store i32 13, i32* %eax.2.reg2mem, !insn.addr !3714
  store i32 %39, i32* %ebx.2.reg2mem, !insn.addr !3714
  store i32 %37, i32* %esp.2.reg2mem, !insn.addr !3714
  br label %dec_label_pc_4094a6, !insn.addr !3714

dec_label_pc_4094a6:                              ; preds = %dec_label_pc_409498, %dec_label_pc_40948f
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %ebx.2.reload = load i32, i32* %ebx.2.reg2mem
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %40 = add i32 %ebx.2.reload, -9, !insn.addr !3715
  %41 = inttoptr i32 %40 to i32*, !insn.addr !3715
  %42 = load i32, i32* %41, align 4, !insn.addr !3715
  %43 = mul i32 %42, %eax.2.reload, !insn.addr !3715
  %44 = inttoptr i32 %43 to i8*, !insn.addr !3716
  %45 = load i8, i8* %44, align 1, !insn.addr !3716
  %46 = udiv i32 %43, 256, !insn.addr !3716
  %47 = trunc i32 %46 to i8, !insn.addr !3716
  %48 = add i8 %45, %47, !insn.addr !3716
  store i8 %48, i8* %44, align 1, !insn.addr !3716
  %49 = call i32 @__asm_iretd(), !insn.addr !3717
  %50 = inttoptr i32 %49 to i8*, !insn.addr !3718
  %51 = load i8, i8* %50, align 1, !insn.addr !3718
  %52 = trunc i32 %49 to i8, !insn.addr !3718
  %53 = add i8 %51, %52, !insn.addr !3718
  %54 = and i8 %53, %52, !insn.addr !3719
  store i8 %54, i8* %50, align 1, !insn.addr !3719
  %55 = icmp eq i32 %ecx.1.reload, 0, !insn.addr !3720
  store i32 %49, i32* %eax.0.reg2mem, !insn.addr !3720
  store i32 0, i32* %ecx.0.reg2mem, !insn.addr !3720
  store i32 %ebx.2.reload, i32* %ebx.0.reg2mem, !insn.addr !3720
  store i32 %esp.2.reload, i32* %esp.0.reg2mem, !insn.addr !3720
  br i1 %55, label %dec_label_pc_409483, label %dec_label_pc_4094c0, !insn.addr !3720

dec_label_pc_4094c0:                              ; preds = %dec_label_pc_4094a6
  %56 = icmp eq i8 %54, 0, !insn.addr !3719
  %57 = icmp eq i1 %56, false, !insn.addr !3721
  store i32 %49, i32* %merge.reg2mem, !insn.addr !3721
  br i1 %57, label %dec_label_pc_4094cf, label %dec_label_pc_4094c2, !insn.addr !3721

dec_label_pc_4094c2:                              ; preds = %dec_label_pc_4094cf, %63, %dec_label_pc_4094c0
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !3722

dec_label_pc_4094cf:                              ; preds = %dec_label_pc_4094c0
  %58 = add i32 %0, -4, !insn.addr !3723
  %59 = inttoptr i32 %58 to i32*, !insn.addr !3723
  %60 = load i32, i32* %59, align 4, !insn.addr !3723
  %61 = or i32 %60, 131072, !insn.addr !3723
  store i32 %61, i32* %59, align 4, !insn.addr !3723
  %62 = icmp slt i32 %ecx.1.reload, 20, !insn.addr !3724
  store i32 %49, i32* %merge.reg2mem, !insn.addr !3724
  br i1 %62, label %63, label %dec_label_pc_4094c2, !insn.addr !3724

; <label>:63:                                     ; preds = %dec_label_pc_4094cf
  %64 = add i32 %esp.2.reload, -2, !insn.addr !3725
  %65 = inttoptr i32 %64 to i16*, !insn.addr !3725
  %66 = call i32 @function_40953e(), !insn.addr !3724
  store i32 %66, i32* %merge.reg2mem, !insn.addr !3724
  br label %dec_label_pc_4094c2, !insn.addr !3724
}

define i32 @function_4094fc(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32* %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13) local_unnamed_addr {
dec_label_pc_4094fc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = udiv i32 %1, 256, !insn.addr !3726
  %4 = trunc i32 %3 to i8, !insn.addr !3726
  %5 = add i32 %0, 233, !insn.addr !3726
  %6 = inttoptr i32 %5 to i8*, !insn.addr !3726
  %7 = load i8, i8* %6, align 1, !insn.addr !3726
  %8 = sub i8 0, %4
  %9 = sub i8 %8, 1
  %10 = icmp ugt i8 %7, %9, !insn.addr !3726
  %11 = add i32 %0, 12, !insn.addr !3727
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3727
  %13 = load i32, i32* %12, align 4, !insn.addr !3727
  %14 = zext i1 %10 to i32, !insn.addr !3727
  %15 = add i32 %13, %14, !insn.addr !3727
  %16 = sub i32 0, %15
  %17 = sub i32 %16, 1
  %18 = add i32 %2, %17, !insn.addr !3727
  call void @__asm_out.1(i32 0, i32 %18), !insn.addr !3728
  ret i32 %18, !insn.addr !3729
}

define i32 @function_40953e() local_unnamed_addr {
dec_label_pc_40953e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %1, -8, !insn.addr !3730
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3730
  %7 = load i32, i32* %6, align 4, !insn.addr !3730
  %8 = add i32 %7, 25, !insn.addr !3731
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3731
  %10 = load i32, i32* %9, align 4, !insn.addr !3731
  %11 = add i32 %1, -25, !insn.addr !3732
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3732
  %13 = load i32, i32* %12, align 4, !insn.addr !3732
  %14 = add i32 %10, -4, !insn.addr !3733
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3733
  store i32 -5, i32* %15, align 4, !insn.addr !3733
  %16 = add i32 %10, -8, !insn.addr !3734
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3734
  %18 = add i32 %10, -12, !insn.addr !3735
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3735
  %20 = add i32 %10, -16, !insn.addr !3736
  %21 = inttoptr i32 %20 to i32*, !insn.addr !3736
  store i32 0, i32* %21, align 4, !insn.addr !3736
  %22 = add i32 %10, -20, !insn.addr !3737
  %23 = add i32 %10, -24, !insn.addr !3737
  %24 = add i32 %10, -28, !insn.addr !3737
  %25 = add i32 %10, -32, !insn.addr !3737
  %26 = add i32 %10, -36, !insn.addr !3737
  %27 = add i32 %10, -40, !insn.addr !3737
  %28 = add i32 %10, -44, !insn.addr !3737
  %29 = add i32 %10, -48, !insn.addr !3737
  %30 = inttoptr i32 %22 to i32*, !insn.addr !3737
  %31 = inttoptr i32 %23 to i32*, !insn.addr !3737
  store i32 %13, i32* %31, align 4, !insn.addr !3737
  %32 = inttoptr i32 %24 to i32*, !insn.addr !3737
  store i32 %7, i32* %32, align 4, !insn.addr !3737
  %33 = inttoptr i32 %25 to i32*, !insn.addr !3737
  %34 = inttoptr i32 %26 to i32*, !insn.addr !3737
  store i32 %20, i32* %34, align 4, !insn.addr !3737
  %35 = inttoptr i32 %27 to i32*, !insn.addr !3737
  %36 = inttoptr i32 %28 to i32*, !insn.addr !3737
  %37 = inttoptr i32 %29 to i32*, !insn.addr !3737
  %38 = add i32 %10, -52, !insn.addr !3738
  %39 = inttoptr i32 %38 to i32*, !insn.addr !3738
  %40 = add i32 %10, -56, !insn.addr !3739
  %41 = inttoptr i32 %40 to i32*, !insn.addr !3739
  store i32 %13, i32* %41, align 4, !insn.addr !3739
  %42 = add i32 %0, 12894323, !insn.addr !3740
  %43 = inttoptr i32 %42 to i32*, !insn.addr !3740
  %44 = load i32, i32* %43, align 4, !insn.addr !3740
  %45 = add i32 %10, -60, !insn.addr !3740
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3740
  store i32 %44, i32* %46, align 4, !insn.addr !3740
  call void @__asm_into(i32 %4), !insn.addr !3741
  call void @__asm_out.1(i32 239, i32 %3), !insn.addr !3742
  %47 = trunc i32 %7 to i16, !insn.addr !3743
  %48 = call i8 @__asm_in.4(i16 %47), !insn.addr !3743
  %49 = sext i8 %48 to i32, !insn.addr !3743
  %50 = or i32 %3, %49, !insn.addr !3743
  %51 = add i32 %2, 1087260540, !insn.addr !3744
  %52 = inttoptr i32 %51 to i8*, !insn.addr !3744
  %53 = load i8, i8* %52, align 1, !insn.addr !3744
  %54 = trunc i32 %13 to i8, !insn.addr !3744
  %55 = and i8 %53, %54, !insn.addr !3744
  store i8 %55, i8* %52, align 1, !insn.addr !3744
  %56 = udiv i32 %2, 256, !insn.addr !3745
  %57 = trunc i32 %56 to i8, !insn.addr !3745
  %58 = sub i8 0, %57
  %59 = sub i8 %58, 1
  %60 = icmp ult i8 %59, %57, !insn.addr !3745
  %61 = select i1 %60, i32 255, i32 0, !insn.addr !3746
  %62 = and i32 %50, -256, !insn.addr !3746
  %63 = or i32 %62, %61, !insn.addr !3746
  %64 = inttoptr i32 %63 to i8*, !insn.addr !3747
  %65 = load i8, i8* %64, align 1, !insn.addr !3747
  %66 = trunc i32 %61 to i8, !insn.addr !3747
  %67 = add i8 %65, %66, !insn.addr !3747
  store i8 %67, i8* %64, align 1, !insn.addr !3747
  %68 = add i32 %63, 720056, !insn.addr !3748
  ret i32 %68, !insn.addr !3749
}

define i32 @function_4095b0() local_unnamed_addr {
dec_label_pc_4095b0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i32 @unknown_3fd950(), !insn.addr !3750
  %3 = select i1 %1, i32 200, i32 201, !insn.addr !3751
  %4 = sub i32 %2, %3, !insn.addr !3751
  %5 = and i32 %4, 255, !insn.addr !3751
  %6 = and i32 %2, -256, !insn.addr !3751
  %7 = add i32 %0, -1869932454, !insn.addr !3752
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3752
  %9 = load i32, i32* %8, align 4, !insn.addr !3752
  %10 = add i32 %9, -1, !insn.addr !3752
  store i32 %10, i32* %8, align 4, !insn.addr !3752
  %11 = add nsw i32 %5, -1959640695, !insn.addr !3753
  %12 = inttoptr i32 %11 to i8*, !insn.addr !3753
  %13 = load i8, i8* %12, align 1, !insn.addr !3753
  %14 = zext i8 %13 to i32, !insn.addr !3753
  %15 = or i32 %6, %14, !insn.addr !3753
  ret i32 %15, !insn.addr !3754
}

define i32 @function_409638() local_unnamed_addr {
dec_label_pc_409638:
  %eax.0.reg2mem = alloca i32, !insn.addr !3755
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = xor i32 %1, -765, !insn.addr !3755
  %3 = icmp eq i32 %2, 0, !insn.addr !3756
  %4 = icmp eq i1 %3, false, !insn.addr !3757
  store i32 %2, i32* %eax.0.reg2mem, !insn.addr !3757
  br i1 %4, label %dec_label_pc_409652, label %dec_label_pc_409644, !insn.addr !3757

dec_label_pc_409644:                              ; preds = %dec_label_pc_409638
  %5 = trunc i32 %0 to i16, !insn.addr !3758
  call void @__asm_out.3(i16 %5, i32 %2), !insn.addr !3758
  %6 = call i32 @unknown_84e25640(), !insn.addr !3759
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !3759
  br label %dec_label_pc_409652, !insn.addr !3759

dec_label_pc_409652:                              ; preds = %dec_label_pc_409644, %dec_label_pc_409638
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3760
}

define i32 @function_40965e() local_unnamed_addr {
dec_label_pc_40965e:
  %eax.0.reg2mem = alloca i32, !insn.addr !3761
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %1, -85, !insn.addr !3761
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3761
  %7 = load i32, i32* %6, align 4, !insn.addr !3761
  %8 = select i1 %4, i32 9, i32 8, !insn.addr !3761
  %9 = add i32 %7, %8, !insn.addr !3761
  store i32 %9, i32* %6, align 4, !insn.addr !3761
  %10 = add i32 %2, 13, !insn.addr !3762
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3762
  %12 = load i32, i32* %11, align 4, !insn.addr !3762
  %13 = udiv i32 %12, 256
  %14 = trunc i32 %13 to i8, !insn.addr !3763
  %15 = icmp slt i8 %14, 0, !insn.addr !3763
  %16 = icmp eq i1 %15, false, !insn.addr !3764
  br i1 %16, label %dec_label_pc_40967d, label %dec_label_pc_409670, !insn.addr !3764

dec_label_pc_409670:                              ; preds = %dec_label_pc_40965e
  %17 = call i32 @function_4096b8(i32 %2, i16 %3), !insn.addr !3765
  %18 = icmp eq i32 %17, 0, !insn.addr !3766
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !3767
  br i1 %18, label %dec_label_pc_409688, label %dec_label_pc_40967d, !insn.addr !3767

dec_label_pc_40967d:                              ; preds = %dec_label_pc_409670, %dec_label_pc_40965e
  %19 = add i32 %0, 24, !insn.addr !3768
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3768
  %21 = load i32, i32* %20, align 4, !insn.addr !3768
  %22 = and i32 %21, -32769, !insn.addr !3769
  store i32 %22, i32* %20, align 4, !insn.addr !3770
  br label %dec_label_pc_409688, !insn.addr !3770

dec_label_pc_409688:                              ; preds = %dec_label_pc_40967d, %dec_label_pc_409670
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3771
}

define i32 @function_4096b8(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_4096b8:
  %0 = call i32 @__asm_in.2(i32 93), !insn.addr !3772
  ret i32 %0, !insn.addr !3773
}

define i32 @function_4096be() local_unnamed_addr {
dec_label_pc_4096be:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4096c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_4096c0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i32, align 4
  %4 = add i32 %arg1, 4, !insn.addr !3774
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3774
  %6 = load i32, i32* %5, align 4, !insn.addr !3774
  %7 = add i32 %2, -1, !insn.addr !3775
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3775
  %9 = load i32, i32* %8, align 4, !insn.addr !3775
  %10 = zext i32 %9 to i64, !insn.addr !3775
  %11 = zext i32 %3 to i64, !insn.addr !3775
  %12 = mul nuw i64 %10, %11, !insn.addr !3775
  %13 = trunc i64 %12 to i32, !insn.addr !3775
  %14 = udiv i64 %12, 4294967296, !insn.addr !3775
  %15 = trunc i64 %14 to i32, !insn.addr !3775
  %16 = icmp ne i32 %15, 0, !insn.addr !3775
  %17 = zext i1 %16 to i32, !insn.addr !3776
  %18 = add i32 %13, ptrtoint (i32* @global_var_40c0f6 to i32), !insn.addr !3776
  %19 = add i32 %18, %17, !insn.addr !3776
  %20 = icmp eq i32 %19, 0, !insn.addr !3777
  br i1 %20, label %dec_label_pc_40972b, label %dec_label_pc_4096e3, !insn.addr !3778

dec_label_pc_4096e3:                              ; preds = %dec_label_pc_4096c0
  %21 = ptrtoint i32* %stack_var_-64 to i32, !insn.addr !3779
  store i32 %19, i32* inttoptr (i32 1946338550 to i32*), align 4, !insn.addr !3780
  %22 = call i8 @__asm_in.7(i8 51), !insn.addr !3781
  %23 = call i32 @__asm_in.2(i32 93), !insn.addr !3782
  %24 = and i32 %0, 65535, !insn.addr !3783
  %25 = and i32 %21, -65536, !insn.addr !3783
  %26 = or i32 %25, %24, !insn.addr !3783
  %27 = and i32 %23, 122, !insn.addr !3784
  %28 = or i32 %27, 133, !insn.addr !3784
  %29 = and i32 %23, -256, !insn.addr !3784
  %30 = or i32 %28, %29, !insn.addr !3784
  %31 = add i32 %1, -788499395, !insn.addr !3785
  %32 = inttoptr i32 %31 to i8*, !insn.addr !3785
  %33 = load i8, i8* %32, align 1, !insn.addr !3785
  %34 = trunc i32 %6 to i8, !insn.addr !3785
  %35 = or i8 %33, %34, !insn.addr !3785
  store i8 %35, i8* %32, align 1, !insn.addr !3785
  %36 = add i32 %26, -4, !insn.addr !3786
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3786
  store i32 %arg1, i32* %37, align 4, !insn.addr !3786
  %38 = add i32 %15, 11, !insn.addr !3787
  %39 = inttoptr i32 %38 to i32*, !insn.addr !3787
  store i32 2560, i32* %39, align 4, !insn.addr !3787
  %40 = add i32 %arg1, 12, !insn.addr !3788
  %41 = inttoptr i32 %40 to i32*, !insn.addr !3788
  %42 = load i32, i32* %41, align 4, !insn.addr !3788
  %43 = xor i32 %42, %30, !insn.addr !3788
  store i32 %43, i32* %41, align 4, !insn.addr !3788
  %44 = trunc i32 %28 to i8, !insn.addr !3789
  %45 = inttoptr i32 %0 to i8*, !insn.addr !3789
  store i8 %44, i8* %45, align 1, !insn.addr !3789
  %46 = inttoptr i32 %30 to i8*, !insn.addr !3790
  %47 = load i8, i8* %46, align 1, !insn.addr !3790
  %48 = add i8 %47, 4, !insn.addr !3790
  store i8 %48, i8* %46, align 1, !insn.addr !3790
  %49 = add i32 %26, -8, !insn.addr !3791
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3791
  store i32 590020, i32* %50, align 4, !insn.addr !3791
  %51 = add i32 %26, -12, !insn.addr !3792
  %52 = inttoptr i32 %51 to i32*, !insn.addr !3792
  store i32 1778412113, i32* %52, align 4, !insn.addr !3792
  %53 = call i32 @unknown_8b00000b(), !insn.addr !3793
  ret i32 %53, !insn.addr !3793

dec_label_pc_40972b:                              ; preds = %dec_label_pc_4096c0
  %54 = add i32 %1, 8, !insn.addr !3794
  %55 = inttoptr i32 %54 to i8*, !insn.addr !3794
  store i8 -1, i8* %55, align 1, !insn.addr !3794
  %56 = icmp eq i32 %6, 0, !insn.addr !3795
  br i1 %56, label %57, label %dec_label_pc_409733, !insn.addr !3795

; <label>:57:                                     ; preds = %dec_label_pc_40972b
  %58 = call i32 @function_4096be(), !insn.addr !3795
  br label %dec_label_pc_409733, !insn.addr !3795

dec_label_pc_409733:                              ; preds = %57, %dec_label_pc_40972b
  %59 = call i32 @__asm_in.2(i32 93), !insn.addr !3796
  %60 = add i32 %59, 1, !insn.addr !3797
  %61 = and i32 %1, 65280, !insn.addr !3798
  %62 = add i32 %61, %1
  %63 = and i32 %62, 65280, !insn.addr !3798
  %64 = and i32 %1, -65281, !insn.addr !3798
  %65 = or i32 %63, %64, !insn.addr !3798
  %66 = and i32 %60, 255, !insn.addr !3799
  %67 = add i32 %66, %65, !insn.addr !3799
  %68 = inttoptr i32 %67 to i8*, !insn.addr !3799
  %69 = load i8, i8* %68, align 1, !insn.addr !3799
  %70 = zext i8 %69 to i32, !insn.addr !3799
  %71 = and i32 %60, -256, !insn.addr !3799
  %72 = or i32 %71, %70, !insn.addr !3799
  ret i32 %72, !insn.addr !3800
}

define i32 @function_409748(i32 %arg1) local_unnamed_addr {
dec_label_pc_409748:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3801
}

define i32 @function_409749() local_unnamed_addr {
dec_label_pc_409749:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = and i32 %3, 255, !insn.addr !3802
  %5 = add i32 %4, %1, !insn.addr !3802
  %6 = inttoptr i32 %5 to i8*, !insn.addr !3802
  %7 = load i8, i8* %6, align 1, !insn.addr !3802
  %8 = zext i8 %7 to i32, !insn.addr !3802
  %9 = and i32 %3, -256, !insn.addr !3802
  %10 = or i32 %9, %8, !insn.addr !3802
  %11 = add i32 %10, 336264320, !insn.addr !3803
  %12 = call i8 @__readgsbyte(i32 %1), !insn.addr !3804
  %13 = trunc i32 %2 to i8, !insn.addr !3804
  %14 = add i8 %12, %13, !insn.addr !3804
  %15 = xor i8 %14, %12, !insn.addr !3804
  %16 = xor i8 %14, %13, !insn.addr !3804
  %17 = and i8 %15, %16, !insn.addr !3804
  %18 = icmp slt i8 %17, 0, !insn.addr !3804
  call void @__writegsbyte(i32 %1, i8 %14), !insn.addr !3804
  br i1 %18, label %dec_label_pc_409764, label %dec_label_pc_409755, !insn.addr !3805

dec_label_pc_409755:                              ; preds = %dec_label_pc_409749
  ret i32 %11, !insn.addr !3806

dec_label_pc_409764:                              ; preds = %dec_label_pc_409749
  %19 = icmp ult i8 %14, %12, !insn.addr !3804
  %20 = add i32 %0, 2132180169, !insn.addr !3807
  %21 = inttoptr i32 %20 to i8*, !insn.addr !3807
  %22 = load i8, i8* %21, align 1, !insn.addr !3807
  %23 = trunc i32 %11 to i8, !insn.addr !3807
  %24 = zext i1 %19 to i8, !insn.addr !3807
  %25 = add i8 %24, %23, !insn.addr !3807
  %26 = add i8 %25, %22, !insn.addr !3807
  store i8 %26, i8* %21, align 1, !insn.addr !3807
  %27 = bitcast i32* %ecx to i8*
  %28 = load i8, i8* %27, align 4, !insn.addr !3808
  %29 = add i8 %23, -123, !insn.addr !3808
  %30 = add i8 %29, %28, !insn.addr !3808
  %31 = load i32, i32* %ecx, align 4, !insn.addr !3808
  %32 = inttoptr i32 %31 to i8*, !insn.addr !3808
  store i8 %30, i8* %32, align 1, !insn.addr !3808
  %33 = call i32 @unknown_5140977b(), !insn.addr !3809
  %34 = call i32 @function_40978d(), !insn.addr !3810
  ret i32 %34, !insn.addr !3810
}

define i32 @function_409780() local_unnamed_addr {
dec_label_pc_409780:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = and i32 %1, %0, !insn.addr !3811
  %3 = icmp eq i32 %2, -1, !insn.addr !3812
  %4 = icmp eq i1 %3, false, !insn.addr !3813
  br i1 %4, label %dec_label_pc_40978b, label %dec_label_pc_409787, !insn.addr !3813

dec_label_pc_409787:                              ; preds = %dec_label_pc_409780
  %5 = call i32 @function_40978d(), !insn.addr !3814
  ret i32 %5, !insn.addr !3814

dec_label_pc_40978b:                              ; preds = %dec_label_pc_409780
  %6 = trunc i32 %2 to i16, !insn.addr !3815
  %7 = call i16 @__asm_arpl.5(i16 %6), !insn.addr !3815
  %8 = sext i16 %7 to i32, !insn.addr !3815
  %9 = and i32 %2, -65536, !insn.addr !3815
  %10 = or i32 %9, %8, !insn.addr !3815
  ret i32 %10, !insn.addr !3815
}

define i32 @function_40978d() local_unnamed_addr {
dec_label_pc_40978d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = and i32 %0, 255, !insn.addr !3816
  %3 = and i32 %1, -256, !insn.addr !3816
  %4 = or i32 %3, %2, !insn.addr !3816
  ret i32 %4, !insn.addr !3817
}

define i32 @function_40979d() local_unnamed_addr {
dec_label_pc_40979d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3818
}

define i32 @function_4097b2(i32 %arg1) local_unnamed_addr {
dec_label_pc_4097b2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -24, !insn.addr !3819
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3819
  %4 = load i8, i8* %3, align 1, !insn.addr !3819
  %5 = trunc i32 %0 to i8, !insn.addr !3819
  %6 = add i8 %4, %5, !insn.addr !3819
  store i8 %6, i8* %3, align 1, !insn.addr !3819
  ret i32 %1, !insn.addr !3820
}

define i32 @function_4097bc() local_unnamed_addr {
dec_label_pc_4097bc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4097c9() local_unnamed_addr {
dec_label_pc_4097c9:
  %0 = call i32 @function_4097bc(), !insn.addr !3821
  ret i32 %0, !insn.addr !3821
}

define i32 @function_409802() local_unnamed_addr {
dec_label_pc_409802:
  %0 = call i32 @__asm_in.2(i32 93), !insn.addr !3822
  ret i32 %0, !insn.addr !3823
}

define i32 @function_409805() local_unnamed_addr {
dec_label_pc_409805:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_int1(), !insn.addr !3824
  %3 = add i32 %0, -55, !insn.addr !3825
  %4 = inttoptr i32 %3 to i8*, !insn.addr !3825
  %5 = load i8, i8* %4, align 1, !insn.addr !3825
  %6 = udiv i32 %1, 256, !insn.addr !3825
  %7 = trunc i32 %6 to i8, !insn.addr !3825
  %8 = add i8 %5, %7, !insn.addr !3825
  store i8 %8, i8* %4, align 1, !insn.addr !3825
  %9 = call i32 @__asm_in.2(i32 93), !insn.addr !3826
  ret i32 %9, !insn.addr !3827
}

define i32 @function_4098a0() local_unnamed_addr {
dec_label_pc_4098a0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4098d2() local_unnamed_addr {
dec_label_pc_4098d2:
  %0 = call i32 @__asm_in.2(i32 93), !insn.addr !3828
  ret i32 %0, !insn.addr !3829
}

define i32 @function_4098e2(i32 %arg1) local_unnamed_addr {
dec_label_pc_4098e2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = udiv i32 %2, 256, !insn.addr !3830
  %7 = add i32 %5, %6, !insn.addr !3830
  %8 = and i32 %7, 255, !insn.addr !3830
  %9 = and i32 %5, -256, !insn.addr !3830
  %10 = or i32 %8, %9, !insn.addr !3830
  %11 = xor i32 %10, %3, !insn.addr !3831
  %12 = and i32 %4, 873529344, !insn.addr !3832
  %13 = add i32 %1, 51, !insn.addr !3833
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3833
  %15 = load i32, i32* %edx, align 4, !insn.addr !3834
  %16 = add i32 %1, -20, !insn.addr !3834
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3834
  store i32 %15, i32* %17, align 4, !insn.addr !3834
  %18 = add i32 %0, -57, !insn.addr !3835
  %19 = inttoptr i32 %18 to i8*, !insn.addr !3835
  store i8 69, i8* %19, align 1, !insn.addr !3835
  %20 = inttoptr i32 %11 to i32*, !insn.addr !3836
  %21 = load i32, i32* %20, align 4, !insn.addr !3836
  %22 = add i32 %21, %11, !insn.addr !3836
  store i32 %22, i32* %20, align 4, !insn.addr !3836
  %23 = inttoptr i32 %11 to i8*, !insn.addr !3837
  %24 = load i8, i8* %23, align 1, !insn.addr !3837
  %25 = trunc i32 %11 to i8, !insn.addr !3837
  %26 = add i8 %24, %25, !insn.addr !3837
  store i8 %26, i8* %23, align 1, !insn.addr !3837
  %27 = add i32 %11, -10256708, !insn.addr !3838
  %28 = bitcast i32* %edx to i8*
  %29 = load i8, i8* %28, align 4, !insn.addr !3839
  %30 = udiv i32 %27, 256, !insn.addr !3839
  %31 = trunc i32 %30 to i8, !insn.addr !3839
  %32 = add i8 %29, %31, !insn.addr !3839
  %33 = load i32, i32* %edx, align 4, !insn.addr !3839
  %34 = inttoptr i32 %33 to i8*, !insn.addr !3839
  store i8 %32, i8* %34, align 1, !insn.addr !3839
  %35 = add nsw i32 %12, -125, !insn.addr !3840
  %36 = add i32 %35, %27, !insn.addr !3840
  %37 = inttoptr i32 %36 to i8*, !insn.addr !3840
  %38 = load i8, i8* %37, align 1, !insn.addr !3840
  %39 = load i32, i32* %edx, align 4, !insn.addr !3840
  %40 = udiv i32 %39, 256, !insn.addr !3840
  %41 = trunc i32 %40 to i8, !insn.addr !3840
  %42 = add i8 %38, %41, !insn.addr !3840
  store i8 %42, i8* %37, align 1, !insn.addr !3840
  ret i32 %27, !insn.addr !3841
}

define i32 @function_40990c(i32 %arg1) local_unnamed_addr {
dec_label_pc_40990c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %3 to i8, !insn.addr !3842
  %6 = add i32 %3, -518848419, !insn.addr !3842
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3842
  %8 = load i8, i8* %7, align 1, !insn.addr !3842
  %9 = add i8 %8, %5, !insn.addr !3842
  %10 = zext i8 %9 to i32, !insn.addr !3842
  %11 = and i32 %3, 2147483392, !insn.addr !3842
  %12 = or i32 %11, %10, !insn.addr !3842
  %13 = trunc i32 %0 to i8
  %14 = trunc i32 %2 to i8, !insn.addr !3843
  %15 = add i8 %14, %13, !insn.addr !3843
  %16 = inttoptr i32 %0 to i8*, !insn.addr !3843
  store i8 %15, i8* %16, align 1, !insn.addr !3843
  %17 = mul i32 %12, 2, !insn.addr !3844
  %18 = add i32 %1, -2096728856, !insn.addr !3844
  %19 = add i32 %18, %17, !insn.addr !3844
  %20 = inttoptr i32 %19 to i8*, !insn.addr !3844
  %21 = load i8, i8* %20, align 1, !insn.addr !3844
  %22 = add i8 %21, %14, !insn.addr !3844
  store i8 %22, i8* %20, align 1, !insn.addr !3844
  ret i32 %4, !insn.addr !3845
}

define i32 @function_40991d() local_unnamed_addr {
dec_label_pc_40991d:
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = and i32 %3, -256, !insn.addr !3846
  %5 = trunc i32 %2 to i8, !insn.addr !3847
  %6 = add i32 %0, 57733, !insn.addr !3847
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3847
  %8 = load i8, i8* %7, align 1, !insn.addr !3847
  %9 = add i8 %8, %5, !insn.addr !3847
  %10 = add i32 %1, 74517589, !insn.addr !3848
  %11 = inttoptr i32 %10 to i8*, !insn.addr !3848
  %12 = load i8, i8* %11, align 1, !insn.addr !3848
  %13 = add i8 %12, %9, !insn.addr !3848
  store i8 %13, i8* %11, align 1, !insn.addr !3848
  %14 = load i8, i8* inttoptr (i32 68550619 to i8*), align 1, !insn.addr !3849
  %15 = zext i8 %14 to i32, !insn.addr !3849
  %16 = or i32 %4, %15, !insn.addr !3849
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3850
  %18 = load i32, i32* %17, align 4, !insn.addr !3850
  %19 = mul i32 %18, 8, !insn.addr !3850
  %20 = udiv i32 %18, 536870912, !insn.addr !3850
  %21 = or i32 %20, %19, !insn.addr !3850
  store i32 %21, i32* %17, align 4, !insn.addr !3850
  %22 = udiv i32 %3, 256, !insn.addr !3851
  %23 = trunc i32 %22 to i8, !insn.addr !3851
  %24 = mul i8 %23, 12, !insn.addr !3851
  %25 = add i8 %14, %24, !insn.addr !3851
  %26 = zext i8 %25 to i32, !insn.addr !3851
  %.masked = and i32 %3, -65536
  %27 = or i32 %.masked, %26, !insn.addr !3851
  %28 = icmp eq i32 %27, 0, !insn.addr !3852
  %29 = icmp eq i1 %28, false, !insn.addr !3853
  br i1 %29, label %dec_label_pc_409974, label %dec_label_pc_409947, !insn.addr !3853

dec_label_pc_409947:                              ; preds = %dec_label_pc_40991d
  %30 = and i32 %2, -256, !insn.addr !3847
  %31 = zext i8 %9 to i32, !insn.addr !3847
  %32 = or i32 %30, %31, !insn.addr !3847
  %33 = add i32 %0, -48, !insn.addr !3854
  %34 = inttoptr i32 %33 to i32*, !insn.addr !3854
  %35 = load i32, i32* %34, align 4, !insn.addr !3854
  %36 = add i32 %35, -128, !insn.addr !3855
  %37 = inttoptr i32 %36 to i8*, !insn.addr !3855
  %38 = load i8, i8* %37, align 1, !insn.addr !3855
  %39 = udiv i32 %2, 256, !insn.addr !3855
  %40 = trunc i32 %39 to i8, !insn.addr !3855
  %41 = or i8 %38, %40, !insn.addr !3855
  store i8 %41, i8* %37, align 1, !insn.addr !3855
  %42 = inttoptr i32 %32 to i32*, !insn.addr !3856
  %43 = load i32, i32* %42, align 4, !insn.addr !3856
  %44 = add i32 %43, %35, !insn.addr !3856
  store i32 %44, i32* %42, align 4, !insn.addr !3856
  %45 = inttoptr i32 %35 to i16*, !insn.addr !3857
  %46 = call i32 @wcsncmp(i16* %45, i16* inttoptr (i32 35 to i16*), i32 1006572419), !insn.addr !3858
  %47 = load i32, i32* %esi, align 4
  %48 = add i32 %47, -122, !insn.addr !3859
  %49 = inttoptr i32 %48 to i32*, !insn.addr !3859
  %50 = load i32, i32* %49, align 4, !insn.addr !3859
  %51 = and i32 %50, -101, !insn.addr !3859
  store i32 %51, i32* %49, align 4, !insn.addr !3859
  %52 = bitcast i32* %esi to i8*
  %53 = load i8, i8* %52, align 4, !insn.addr !3860
  %54 = trunc i32 %46 to i8, !insn.addr !3860
  %55 = add i8 %53, %54, !insn.addr !3860
  %56 = load i32, i32* %esi, align 4, !insn.addr !3860
  %57 = inttoptr i32 %56 to i8*, !insn.addr !3860
  store i8 %55, i8* %57, align 1, !insn.addr !3860
  %factor = mul i32 %46, 2
  %58 = add i32 %factor, 124, !insn.addr !3861
  %59 = inttoptr i32 %58 to i8*, !insn.addr !3861
  %60 = load i8, i8* %59, align 2, !insn.addr !3861
  %61 = udiv i32 %46, 256, !insn.addr !3861
  %62 = trunc i32 %61 to i8, !insn.addr !3861
  %63 = add i8 %60, %62, !insn.addr !3861
  store i8 %63, i8* %59, align 2, !insn.addr !3861
  ret i32 %46, !insn.addr !3861

dec_label_pc_409974:                              ; preds = %dec_label_pc_40991d
  %64 = add i32 %0, 1343845799, !insn.addr !3862
  %65 = inttoptr i32 %64 to i8*, !insn.addr !3862
  %66 = load i8, i8* %65, align 1, !insn.addr !3862
  %67 = add i8 %66, %25, !insn.addr !3862
  store i8 %67, i8* %65, align 1, !insn.addr !3862
  ret i32 %27, !insn.addr !3863
}

define i32 @function_4099a3(i32 %arg1) local_unnamed_addr {
dec_label_pc_4099a3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = udiv i32 %1, 256, !insn.addr !3864
  %4 = trunc i32 %3 to i8, !insn.addr !3864
  %5 = add i8 %4, %2, !insn.addr !3864
  %6 = inttoptr i32 %0 to i8*, !insn.addr !3864
  store i8 %5, i8* %6, align 1, !insn.addr !3864
  ret i32 %1, !insn.addr !3865
}

define i32 @function_4099ac() local_unnamed_addr {
dec_label_pc_4099ac:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %3 = fptosi x86_fp80 %2 to i16, !insn.addr !3866
  %4 = add i32 %0, -115, !insn.addr !3866
  %5 = inttoptr i32 %4 to i16*, !insn.addr !3866
  store i16 %3, i16* %5, align 2, !insn.addr !3866
  ret i32 %1, !insn.addr !3867
}

define i32 @function_4099b2() local_unnamed_addr {
dec_label_pc_4099b2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3868
}

define i32 @entry_point() local_unnamed_addr {
dec_label_pc_4099bb:
  %0 = call i32 @__asm_wait(), !insn.addr !3869
  %1 = call i32 @__asm_wait(), !insn.addr !3870
  %2 = call i32 @__asm_wait(), !insn.addr !3871
  %3 = call i32 @__asm_wait(), !insn.addr !3872
  %4 = call i32 @__asm_wait(), !insn.addr !3873
  %5 = call i32 @__asm_wait(), !insn.addr !3874
  %6 = call i32 @__asm_wait(), !insn.addr !3875
  %7 = call i32 @__asm_wait(), !insn.addr !3876
  %8 = call i32 @function_406669(), !insn.addr !3877
  ret i32 %8, !insn.addr !3877
}

define i32 @function_409a63() local_unnamed_addr {
dec_label_pc_409a63:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3878
}

define i32 @function_409a6d() local_unnamed_addr {
dec_label_pc_409a6d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = udiv i32 %0, 256, !insn.addr !3879
  %4 = trunc i32 %3 to i8, !insn.addr !3879
  %5 = add i8 %4, %2, !insn.addr !3879
  %6 = inttoptr i32 %0 to i8*, !insn.addr !3879
  store i8 %5, i8* %6, align 1, !insn.addr !3879
  ret i32 %1, !insn.addr !3880
}

define i32 @function_409a7d() local_unnamed_addr {
dec_label_pc_409a7d:
  %stack_var_0 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !3881
  ret i32 %0, !insn.addr !3882
}

define i32 @function_409a87() local_unnamed_addr {
dec_label_pc_409a87:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_409a96() local_unnamed_addr {
dec_label_pc_409a96:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3883
}

define i32 @function_409a9c() local_unnamed_addr {
dec_label_pc_409a9c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3884
}

define i32 @function_409aa1(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_409aa1:
  %eax.0.reg2mem = alloca i32, !insn.addr !3885
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i128 @__decompiler_undefined_function_9()
  %6 = call i128 @__decompiler_undefined_function_9()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %7 = add i32 %0, 3, !insn.addr !3885
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3885
  %9 = load i32, i32* %8, align 4, !insn.addr !3885
  %10 = mul i32 %1, 4, !insn.addr !3886
  %11 = add i32 %3, %10, !insn.addr !3886
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3886
  %13 = load i32, i32* %12, align 4, !insn.addr !3886
  %14 = or i32 %13, %9, !insn.addr !3886
  %15 = icmp slt i32 %14, 0, !insn.addr !3886
  store i32 %14, i32* %12, align 4, !insn.addr !3886
  br i1 %15, label %dec_label_pc_409afc, label %dec_label_pc_409aaf, !insn.addr !3887

dec_label_pc_409aaf:                              ; preds = %dec_label_pc_409aa1
  %16 = call i32 @unknown_fcbfbdb(), !insn.addr !3888
  %17 = add i32 %2, 87, !insn.addr !3889
  %18 = inttoptr i32 %17 to i8*, !insn.addr !3889
  %19 = load i8, i8* %18, align 1, !insn.addr !3889
  %20 = trunc i32 %2 to i8, !insn.addr !3889
  %21 = add i8 %19, %20, !insn.addr !3889
  store i8 %21, i8* %18, align 1, !insn.addr !3889
  %22 = icmp eq i32 %3, 0, !insn.addr !3890
  store i32 %16, i32* %eax.0.reg2mem, !insn.addr !3890
  br i1 %22, label %23, label %dec_label_pc_409ab9, !insn.addr !3890

; <label>:23:                                     ; preds = %dec_label_pc_409aaf
  %24 = call i32 @function_409a87(), !insn.addr !3890
  store i32 %24, i32* %eax.0.reg2mem, !insn.addr !3890
  br label %dec_label_pc_409ab9, !insn.addr !3890

dec_label_pc_409ab9:                              ; preds = %23, %dec_label_pc_409aaf
  %25 = add i32 %0, -8, !insn.addr !3891
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3891
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %27 = add i32 %1, 1391134916, !insn.addr !3892
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3892
  %29 = load i8, i8* %28, align 1, !insn.addr !3892
  %30 = trunc i32 %eax.0.reload to i8
  %31 = add i8 %30, -85, !insn.addr !3892
  %32 = add i8 %31, %29, !insn.addr !3892
  store i8 %32, i8* %28, align 1, !insn.addr !3892
  %33 = load i32, i32* %26, align 4, !insn.addr !3893
  %34 = icmp slt i32 %33, 0, !insn.addr !3894
  br i1 %34, label %dec_label_pc_409ad8, label %dec_label_pc_409aca, !insn.addr !3895

dec_label_pc_409aca:                              ; preds = %dec_label_pc_409ab9
  %35 = add i32 %33, 105, !insn.addr !3896
  %36 = inttoptr i32 %35 to i32*, !insn.addr !3896
  %37 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !3896
  store i32 %37, i32* %36, align 4, !insn.addr !3896
  %38 = add i32 %9, 83143672, !insn.addr !3897
  %39 = inttoptr i32 %38 to i8*, !insn.addr !3897
  %40 = load i8, i8* %39, align 1, !insn.addr !3897
  %41 = udiv i32 %2, 256, !insn.addr !3897
  %42 = trunc i32 %41 to i8, !insn.addr !3897
  %43 = add i8 %40, %42, !insn.addr !3897
  store i8 %43, i8* %39, align 1, !insn.addr !3897
  br label %dec_label_pc_409ad8, !insn.addr !3897

dec_label_pc_409ad8:                              ; preds = %dec_label_pc_409aca, %dec_label_pc_409ab9
  %44 = add i32 %0, -90, !insn.addr !3898
  %45 = inttoptr i32 %44 to i32*, !insn.addr !3898
  %46 = load i32, i32* %45, align 4, !insn.addr !3898
  %47 = icmp eq i32 %46, 0, !insn.addr !3899
  br i1 %47, label %dec_label_pc_409b37, label %dec_label_pc_409adf, !insn.addr !3900

dec_label_pc_409adf:                              ; preds = %dec_label_pc_409ad8
  %48 = add i32 %9, 20, !insn.addr !3901
  %49 = inttoptr i32 %48 to i32*, !insn.addr !3901
  store i32 %46, i32* %49, align 4, !insn.addr !3901
  %50 = add i32 %9, -38, !insn.addr !3902
  %51 = inttoptr i32 %50 to i32*, !insn.addr !3902
  %52 = load i32, i32* %51, align 4, !insn.addr !3902
  ret i32 %52, !insn.addr !3903

dec_label_pc_409afc:                              ; preds = %dec_label_pc_409aa1
  %53 = add i32 %0, -16, !insn.addr !3904
  %54 = inttoptr i32 %53 to i32*, !insn.addr !3904
  %55 = mul i32 %4, 2, !insn.addr !3905
  %56 = inttoptr i32 %55 to i32*, !insn.addr !3905
  %57 = load i32, i32* %56, align 4, !insn.addr !3905
  %58 = add i32 %57, %0, !insn.addr !3905
  store i32 %58, i32* %56, align 4, !insn.addr !3905
  %59 = add i32 %0, -47, !insn.addr !3906
  %60 = inttoptr i32 %59 to i32*, !insn.addr !3906
  %61 = load i32, i32* %60, align 4, !insn.addr !3906
  %62 = call i128 @__asm_andps(i128 %6, i128 %5), !insn.addr !3907
  %63 = inttoptr i32 %61 to i32*, !insn.addr !3908
  %64 = load i32, i32* %63, align 4, !insn.addr !3908
  %65 = add i32 %64, %61, !insn.addr !3908
  store i32 %65, i32* %63, align 4, !insn.addr !3908
  ret i32 %61, !insn.addr !3908

dec_label_pc_409b37:                              ; preds = %dec_label_pc_409ad8
  ret i32 248, !insn.addr !3909
}

define i32 @function_409c45(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_409c45:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, 0, !insn.addr !3910
  %2 = zext i1 %1 to i32, !insn.addr !3911
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3912
  %4 = load i32, i32* %3, align 4, !insn.addr !3912
  %5 = add i32 %4, %2, !insn.addr !3912
  store i32 %5, i32* %3, align 4, !insn.addr !3912
  %6 = call i32 @function_409cb6(), !insn.addr !3913
  ret i32 %6, !insn.addr !3913
}

define i32 @function_409c61(i32 %arg1) local_unnamed_addr {
dec_label_pc_409c61:
  %0 = call i32* @LocalFree(i32* nonnull @0), !insn.addr !3914
  ret i32 0, !insn.addr !3915
}

define i32 @function_409cb6() local_unnamed_addr {
dec_label_pc_409cb6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i64 @__decompiler_undefined_function_8()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i32 @__asm_hlt(), !insn.addr !3916
  call void @__asm_int(i32 1), !insn.addr !3917
  %9 = trunc i32 %3 to i8, !insn.addr !3918
  %10 = add i32 %2, -128, !insn.addr !3918
  %11 = inttoptr i32 %10 to i8*, !insn.addr !3918
  store i8 %9, i8* %11, align 1, !insn.addr !3918
  %12 = add i32 %2, 113, !insn.addr !3919
  %13 = inttoptr i32 %12 to i8*, !insn.addr !3919
  store i8 %9, i8* %13, align 1, !insn.addr !3919
  %14 = udiv i32 %3, 256, !insn.addr !3920
  %15 = trunc i32 %14 to i8, !insn.addr !3920
  %16 = inttoptr i32 %1 to i8*, !insn.addr !3920
  store i8 %15, i8* %16, align 1, !insn.addr !3920
  %17 = add i32 %8, 1, !insn.addr !3921
  %18 = load i32, i32* inttoptr (i32 -1073416193 to i32*), align 4, !insn.addr !3922
  %19 = and i32 %18, 15, !insn.addr !3922
  %20 = and i32 %0, 15, !insn.addr !3922
  %21 = sub nsw i32 %19, %20, !insn.addr !3922
  %22 = icmp ugt i32 %21, 15, !insn.addr !3922
  %23 = select i1 %7, i32 -4, i32 4, !insn.addr !3922
  %24 = add i32 %23, %0, !insn.addr !3922
  %25 = add i32 %8, -402636641, !insn.addr !3923
  %26 = inttoptr i32 %25 to i64*, !insn.addr !3923
  %27 = load i64, i64* %26, align 4, !insn.addr !3923
  %28 = call i64 @__asm_punpckhbw(i64 %6, i64 %27), !insn.addr !3923
  %29 = and i32 %17, 14
  %30 = icmp ugt i32 %29, 9, !insn.addr !3924
  %31 = or i1 %30, %22, !insn.addr !3924
  %32 = add i32 %8, 11, !insn.addr !3924
  %33 = select i1 %31, i32 %32, i32 %17, !insn.addr !3924
  %34 = sext i1 %31 to i32, !insn.addr !3924
  %35 = and i32 %33, 15, !insn.addr !3924
  %36 = and i32 %17, -65536, !insn.addr !3924
  %37 = or i32 %35, %36, !insn.addr !3924
  %38 = mul i32 %34, 256
  %39 = add i32 %38, %17
  %40 = and i32 %39, 65280, !insn.addr !3924
  %41 = or i32 %37, %40, !insn.addr !3924
  %42 = inttoptr i32 %41 to i8*, !insn.addr !3925
  %43 = load i8, i8* %42, align 1, !insn.addr !3925
  %44 = trunc i32 %35 to i8, !insn.addr !3925
  %45 = zext i1 %31 to i8, !insn.addr !3925
  %46 = add nuw nsw i8 %44, %45, !insn.addr !3925
  %47 = sub i8 %43, %46, !insn.addr !3925
  %48 = icmp ult i8 %43, %46, !insn.addr !3925
  %49 = or i1 %31, %48, !insn.addr !3925
  store i8 %47, i8* %42, align 1, !insn.addr !3925
  %50 = zext i1 %49 to i32, !insn.addr !3926
  %51 = add i32 %41, 1795474563, !insn.addr !3926
  %52 = add nsw i32 %51, %50, !insn.addr !3926
  %53 = add i32 %24, 117, !insn.addr !3927
  %54 = inttoptr i32 %53 to i8*, !insn.addr !3927
  %55 = load i8, i8* %54, align 1, !insn.addr !3927
  %56 = udiv i32 %4, 256, !insn.addr !3927
  %57 = trunc i32 %56 to i8, !insn.addr !3927
  %58 = add i8 %55, %57, !insn.addr !3927
  store i8 %58, i8* %54, align 1, !insn.addr !3927
  %59 = load i8, i8* inttoptr (i32 1048632 to i8*), align 8, !insn.addr !3928
  %60 = zext i8 %59 to i32, !insn.addr !3928
  %61 = and i32 %52, 1090946048, !insn.addr !3928
  %62 = or i32 %61, %60, !insn.addr !3928
  %63 = add nsw i32 %23, -1073416189, !insn.addr !3929
  %64 = inttoptr i32 %63 to i32*, !insn.addr !3929
  %65 = load i32, i32* %64, align 4, !insn.addr !3929
  %66 = and i32 %65, 128000, !insn.addr !3929
  %67 = icmp eq i32 %66, 0, !insn.addr !3929
  br i1 %67, label %dec_label_pc_409d72, label %dec_label_pc_409d0c, !insn.addr !3930

dec_label_pc_409d0c:                              ; preds = %dec_label_pc_409cb6
  %68 = and i32 %4, 65280
  %69 = or i32 %68, %3, !insn.addr !3931
  %70 = inttoptr i32 %62 to i16*, !insn.addr !3932
  %71 = load i16, i16* %70, align 2, !insn.addr !3932
  %72 = trunc i32 %62 to i16, !insn.addr !3932
  call void @__asm_arpl(i16 %71, i16 %72), !insn.addr !3932
  %73 = inttoptr i32 %69 to i8*, !insn.addr !3933
  %74 = load i8, i8* %73, align 1, !insn.addr !3933
  %75 = udiv i32 %69, 256, !insn.addr !3933
  %76 = trunc i32 %75 to i8, !insn.addr !3933
  %77 = add i8 %74, %76, !insn.addr !3933
  store i8 %77, i8* %73, align 1, !insn.addr !3933
  ret i32 %62, !insn.addr !3934

dec_label_pc_409d72:                              ; preds = %dec_label_pc_409cb6
  %78 = inttoptr i32 %62 to i8*, !insn.addr !3935
  %79 = load i8, i8* %78, align 1, !insn.addr !3935
  %80 = udiv i32 %61, 256, !insn.addr !3935
  %81 = trunc i32 %80 to i8, !insn.addr !3935
  %82 = add i8 %79, %81, !insn.addr !3935
  store i8 %82, i8* %78, align 1, !insn.addr !3935
  %83 = add i32 %24, 124, !insn.addr !3936
  %84 = inttoptr i32 %83 to i8*, !insn.addr !3936
  %85 = load i8, i8* %84, align 1, !insn.addr !3936
  %86 = trunc i32 %5 to i8, !insn.addr !3936
  %87 = add i8 %85, %86, !insn.addr !3936
  store i8 %87, i8* %84, align 1, !insn.addr !3936
  %88 = call i32 @function_44e431(), !insn.addr !3937
  ret i32 %88, !insn.addr !3937
}

define i32 @function_409d82(i32 %arg1) local_unnamed_addr {
dec_label_pc_409d82:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8
  %4 = trunc i32 %2 to i8, !insn.addr !3938
  %5 = add i8 %4, %3, !insn.addr !3938
  %6 = inttoptr i32 %1 to i8*, !insn.addr !3938
  store i8 %5, i8* %6, align 1, !insn.addr !3938
  %7 = add i32 %0, 340167544, !insn.addr !3939
  %8 = inttoptr i32 %7 to i8*, !insn.addr !3939
  %9 = load i8, i8* %8, align 1, !insn.addr !3939
  %10 = add i8 %9, %3, !insn.addr !3939
  store i8 %10, i8* %8, align 1, !insn.addr !3939
  %11 = add i32 %0, 46, !insn.addr !3940
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3940
  store i32 13314, i32* %12, align 4, !insn.addr !3940
  %13 = add i32 %0, -16, !insn.addr !3941
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3941
  ret i32 %2, !insn.addr !3942
}

define i32 @function_409d97() local_unnamed_addr {
dec_label_pc_409d97:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = udiv i32 %0, 256, !insn.addr !3943
  %4 = trunc i32 %3 to i8, !insn.addr !3943
  %5 = add i8 %4, %2, !insn.addr !3943
  %6 = inttoptr i32 %0 to i8*, !insn.addr !3943
  store i8 %5, i8* %6, align 1, !insn.addr !3943
  ret i32 %1, !insn.addr !3944
}

define i32 @function_409d9b(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_409d9b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = icmp eq i1 %2, false, !insn.addr !3945
  br i1 %3, label %dec_label_pc_409db6, label %dec_label_pc_409d9d, !insn.addr !3945

dec_label_pc_409d9d:                              ; preds = %dec_label_pc_409d9b
  %4 = call i32 @function_40a8cc(i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @global_var_41018c, i32 0, i32 0), i32 %0), !insn.addr !3946
  %5 = add i32 %4, 1, !insn.addr !3947
  ret i32 %5, !insn.addr !3948

dec_label_pc_409db6:                              ; preds = %dec_label_pc_409d9b
  ret i32 %1, !insn.addr !3949
}

define i32 @function_409e72() local_unnamed_addr {
dec_label_pc_409e72:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i32, !insn.addr !3950
  %3 = add i32 %0, -1992245237, !insn.addr !3950
  %4 = add i32 %3, %2, !insn.addr !3950
  ret i32 %4, !insn.addr !3951
}

define i32 @function_409e80() local_unnamed_addr {
dec_label_pc_409e80:
  %0 = load i32, i32* inttoptr (i32 1312884356 to i32*), align 4, !insn.addr !3952
  %1 = icmp eq i32 %0, 0, !insn.addr !3953
  br i1 %1, label %dec_label_pc_409e9a, label %dec_label_pc_409e89, !insn.addr !3954

dec_label_pc_409e89:                              ; preds = %dec_label_pc_409e80
  store i32 42752, i32* @global_var_410684, align 4, !insn.addr !3955
  br label %dec_label_pc_409e9a, !insn.addr !3955

dec_label_pc_409e9a:                              ; preds = %dec_label_pc_409e89, %dec_label_pc_409e80
  ret i32 %0, !insn.addr !3956
}

define i32 @function_409e9b(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_409e9b:
  %.reg2mem = alloca i32, !insn.addr !3957
  %edi = alloca i32, align 4
  %ebx = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, 1234210960, !insn.addr !3957
  %4 = inttoptr i32 %3 to i8*, !insn.addr !3957
  %5 = load i8, i8* %4, align 1, !insn.addr !3957
  %6 = trunc i32 %0 to i8, !insn.addr !3957
  %7 = or i8 %5, %6, !insn.addr !3957
  store i8 %7, i8* %4, align 1, !insn.addr !3957
  %8 = bitcast i32* %ebx to i8*
  %9 = load i8, i8* %8, align 4, !insn.addr !3958
  %10 = udiv i32 %0, 256, !insn.addr !3958
  %11 = trunc i32 %10 to i8, !insn.addr !3958
  %12 = or i8 %9, %11, !insn.addr !3958
  %13 = load i32, i32* %ebx, align 4, !insn.addr !3958
  %14 = inttoptr i32 %13 to i8*, !insn.addr !3958
  store i8 %12, i8* %14, align 1, !insn.addr !3958
  %15 = bitcast i32* %edi to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !3959
  %17 = sdiv i8 %16, 2, !insn.addr !3959
  %18 = load i32, i32* %edi, align 4, !insn.addr !3959
  %19 = inttoptr i32 %18 to i8*, !insn.addr !3959
  store i8 %17, i8* %19, align 1, !insn.addr !3959
  %20 = bitcast i32* %eax to i8*
  %21 = load i8, i8* %20, align 4, !insn.addr !3960
  %22 = load i32, i32* %ebx, align 4, !insn.addr !3960
  %23 = trunc i32 %22 to i8, !insn.addr !3960
  %24 = and i8 %21, %23, !insn.addr !3960
  %25 = load i32, i32* %eax, align 4, !insn.addr !3960
  %26 = inttoptr i32 %25 to i8*, !insn.addr !3960
  store i8 %24, i8* %26, align 1, !insn.addr !3960
  %27 = load i32, i32* %eax, align 4, !insn.addr !3961
  %28 = add i32 %27, 13959608, !insn.addr !3961
  %29 = mul i32 %1, 256
  %30 = add i32 %28, %29
  %31 = and i32 %30, 65280, !insn.addr !3962
  %32 = and i32 %28, -65281, !insn.addr !3962
  %33 = or i32 %31, %32, !insn.addr !3962
  store i32 %33, i32* %eax, align 4, !insn.addr !3962
  %34 = mul i32 %0, 1048576, !insn.addr !3963
  %35 = udiv i32 %0, 4096, !insn.addr !3963
  %36 = or i32 %35, %34, !insn.addr !3963
  %37 = inttoptr i32 %0 to i32*, !insn.addr !3963
  store i32 %36, i32* %37, align 4, !insn.addr !3963
  %38 = and i32 %arg3, 31, !insn.addr !3964
  %39 = icmp eq i32 %38, 0, !insn.addr !3964
  br i1 %39, label %dec_label_pc_409e9b._crit_edge, label %40, !insn.addr !3964

dec_label_pc_409e9b._crit_edge:                   ; preds = %dec_label_pc_409e9b
  %.pre = load i32, i32* %eax, align 4
  store i32 %.pre, i32* %.reg2mem
  br label %42

; <label>:40:                                     ; preds = %dec_label_pc_409e9b
  %41 = shl i32 %33, %38, !insn.addr !3964
  store i32 %41, i32* %eax, align 4, !insn.addr !3964
  store i32 %41, i32* %.reg2mem, !insn.addr !3964
  br label %42, !insn.addr !3964

; <label>:42:                                     ; preds = %dec_label_pc_409e9b._crit_edge, %40
  %.reload = load i32, i32* %.reg2mem, !insn.addr !3965
  %43 = trunc i32 %.reload to i8, !insn.addr !3965
  %44 = load i8, i8* %15, align 4, !insn.addr !3965
  %45 = icmp eq i8 %44, %43, !insn.addr !3965
  %46 = icmp eq i1 %45, false, !insn.addr !3966
  br i1 %46, label %dec_label_pc_409f26, label %dec_label_pc_409ed1, !insn.addr !3966

dec_label_pc_409ed1:                              ; preds = %42
  %47 = trunc i32 %0 to i16, !insn.addr !3967
  call void @__asm_out.3(i16 %47, i32 %.reload), !insn.addr !3967
  %48 = call i8 @__asm_in.4(i16 %47), !insn.addr !3968
  store i32 %arg2, i32* %eax, align 4, !insn.addr !3969
  %49 = and i32 %arg3, 270729429, !insn.addr !3970
  %50 = icmp eq i32 %49, 0, !insn.addr !3970
  br i1 %50, label %dec_label_pc_409f83, label %dec_label_pc_409ee1, !insn.addr !3971

dec_label_pc_409ee1:                              ; preds = %dec_label_pc_409ed1
  %51 = or i32 %arg3, 5, !insn.addr !3972
  %52 = icmp slt i32 %51, 0, !insn.addr !3972
  %53 = icmp eq i1 %52, false, !insn.addr !3973
  %54 = or i32 %arg3, 7
  %spec.select = select i1 %53, i32 %51, i32 %54
  %55 = add i32 %arg2, 8, !insn.addr !3974
  %56 = inttoptr i32 %55 to i32*, !insn.addr !3974
  store i32 %spec.select, i32* %56, align 4, !insn.addr !3974
  %57 = call i32 @__asm_int3(), !insn.addr !3975
  ret i32 %57, !insn.addr !3976

dec_label_pc_409f26:                              ; preds = %42
  %58 = or i32 %.reload, 86, !insn.addr !3977
  ret i32 %58, !insn.addr !3977

dec_label_pc_409f83:                              ; preds = %dec_label_pc_409ed1
  %59 = add i32 %arg3, 14, !insn.addr !3978
  %60 = inttoptr i32 %59 to i32*, !insn.addr !3978
  %61 = load i32, i32* %60, align 4, !insn.addr !3978
  %62 = udiv i32 %61, 2, !insn.addr !3978
  store i32 %62, i32* %60, align 4, !insn.addr !3978
  %63 = load i32, i32* %eax, align 4, !insn.addr !3978
  ret i32 %63, !insn.addr !3978
}

define i32 @function_409f8e() local_unnamed_addr {
dec_label_pc_409f8e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, 1317664086, !insn.addr !3979
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3979
  %6 = load i32, i32* %5, align 4, !insn.addr !3979
  %7 = add i32 %6, -1, !insn.addr !3979
  store i32 %7, i32* %5, align 4, !insn.addr !3979
  %8 = add i32 %2, -1047836594, !insn.addr !3980
  %9 = inttoptr i32 %8 to i8*, !insn.addr !3980
  %10 = load i8, i8* %9, align 1, !insn.addr !3980
  %11 = trunc i32 %2 to i8, !insn.addr !3980
  %12 = or i8 %10, %11, !insn.addr !3980
  store i8 %12, i8* %9, align 1, !insn.addr !3980
  %13 = add i32 %1, 8377, !insn.addr !3981
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3981
  %15 = load i32, i32* %14, align 4, !insn.addr !3981
  %16 = mul i32 %15, 2, !insn.addr !3982
  %17 = add i32 %16, %0, !insn.addr !3982
  %18 = inttoptr i32 %17 to i8*, !insn.addr !3982
  %19 = load i8, i8* %18, align 1, !insn.addr !3982
  %20 = trunc i32 %3 to i8, !insn.addr !3982
  %21 = add i8 %19, %20, !insn.addr !3982
  store i8 %21, i8* %18, align 1, !insn.addr !3982
  ret i32 %3, !insn.addr !3983
}

define i32 @function_409fa8() local_unnamed_addr {
dec_label_pc_409fa8:
  %edx.02.reg2mem = alloca i32, !insn.addr !3984
  %esp.03.reg2mem = alloca i32, !insn.addr !3984
  %esi.04.reg2mem = alloca i32, !insn.addr !3984
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-9 = alloca i32, align 4
  %5 = trunc i32 %4 to i8, !insn.addr !3985
  store i8 %5, i8* inttoptr (i32 205949184 to i8*), align 256, !insn.addr !3985
  %6 = add i32 %4, 70, !insn.addr !3986
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3986
  %8 = load i8, i8* %7, align 1, !insn.addr !3986
  %9 = trunc i32 %2 to i8, !insn.addr !3986
  %10 = add i8 %8, %9, !insn.addr !3986
  %11 = icmp ult i8 %10, %8, !insn.addr !3986
  store i8 %10, i8* %7, align 1, !insn.addr !3986
  %12 = call i32 @__asm_iretd(), !insn.addr !3987
  %13 = add i32 %3, -1957193138, !insn.addr !3988
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3988
  %15 = load i32, i32* %14, align 4, !insn.addr !3988
  %16 = zext i1 %11 to i32, !insn.addr !3988
  %17 = add i32 %15, %3, !insn.addr !3988
  %18 = add i32 %17, %16, !insn.addr !3988
  store i32 %18, i32* %14, align 4, !insn.addr !3988
  %19 = add i32 %4, 174737486, !insn.addr !3989
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3989
  %21 = load i32, i32* %20, align 4, !insn.addr !3989
  %22 = udiv i32 %21, 65536, !insn.addr !3989
  %23 = mul i32 %21, 65536, !insn.addr !3989
  %24 = or i32 %22, %23, !insn.addr !3989
  store i32 %24, i32* %20, align 4, !insn.addr !3989
  %25 = add i32 %0, 1, !insn.addr !3990
  %26 = add i32 %1, -2034499589, !insn.addr !3991
  %27 = icmp ult i32 %1, 2034499589, !insn.addr !3991
  %28 = and i32 %4, -65281, !insn.addr !3992
  %29 = or i32 %28, 35072, !insn.addr !3992
  %30 = ptrtoint i32* %stack_var_-9 to i32, !insn.addr !3993
  %31 = add i32 %0, 73, !insn.addr !3994
  %32 = inttoptr i32 %31 to i32*, !insn.addr !3994
  store i32 %26, i32* %32, align 4, !insn.addr !3994
  %33 = zext i1 %27 to i32, !insn.addr !3995
  %34 = select i1 %27, i32 -3890838, i32 -3890839, !insn.addr !3995
  %35 = add i32 %2, %34, !insn.addr !3995
  %36 = add i32 %35, %33, !insn.addr !3995
  %37 = xor i32 %36, %2, !insn.addr !3995
  %38 = xor i32 %36, -2147483648, !insn.addr !3995
  %39 = and i32 %37, %38, !insn.addr !3995
  %40 = icmp slt i32 %39, 0, !insn.addr !3995
  %41 = add i32 %0, 77, !insn.addr !3996
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3996
  store i32 %35, i32* %42, align 4, !insn.addr !3996
  %43 = add nsw i32 %29, -104, !insn.addr !3997
  %44 = inttoptr i32 %43 to i32*, !insn.addr !3997
  %45 = load i32, i32* %44, align 4, !insn.addr !3997
  %46 = add nsw i32 %29, -80, !insn.addr !3998
  %47 = inttoptr i32 %46 to i32*, !insn.addr !3998
  store i32 -1996488683, i32* %47, align 4, !insn.addr !3998
  %48 = inttoptr i32 %25 to i8*, !insn.addr !3999
  %49 = load i8, i8* %48, align 1, !insn.addr !3999
  call void @__asm_outsb(i16 21, i8 %49), !insn.addr !3999
  %50 = icmp eq i1 %40, false, !insn.addr !4000
  store i32 %25, i32* %esi.04.reg2mem, !insn.addr !4000
  store i32 %30, i32* %esp.03.reg2mem, !insn.addr !4000
  store i32 -1996488683, i32* %edx.02.reg2mem, !insn.addr !4000
  br i1 %50, label %dec_label_pc_40a015.thread, label %dec_label_pc_40a015, !insn.addr !4000

dec_label_pc_40a015:                              ; preds = %dec_label_pc_409fa8
  %51 = inttoptr i32 %45 to i8*, !insn.addr !4001
  %52 = load i8, i8* %51, align 1, !insn.addr !4001
  %53 = trunc i32 %45 to i8, !insn.addr !4001
  %54 = add i8 %52, %53, !insn.addr !4001
  store i8 %54, i8* %51, align 1, !insn.addr !4001
  %55 = add i32 %0, 65, !insn.addr !4002
  %56 = inttoptr i32 %55 to i32*, !insn.addr !4002
  store i32 %45, i32* %56, align 4, !insn.addr !4002
  %57 = add i32 %45, -4, !insn.addr !4003
  %58 = inttoptr i32 %57 to i32*, !insn.addr !4003
  store i32 %25, i32* %58, align 4, !insn.addr !4003
  %59 = inttoptr i32 %29 to i32*, !insn.addr !4004
  %60 = load i32, i32* %59, align 4, !insn.addr !4004
  %61 = add i32 %45, 15726, !insn.addr !4005
  %62 = add i32 %60, -1, !insn.addr !4006
  %63 = call i8 @__asm_in.4(i16 21), !insn.addr !4007
  %64 = add i32 %60, 63, !insn.addr !4008
  %65 = inttoptr i32 %64 to i32*, !insn.addr !4008
  %66 = load i32, i32* %65, align 4, !insn.addr !4008
  %phitmp1 = and i8 %53, 31
  %67 = add i32 %29, 1359637168, !insn.addr !4009
  %68 = inttoptr i32 %67 to i8*, !insn.addr !4009
  %69 = load i8, i8* %68, align 1, !insn.addr !4009
  %70 = icmp eq i8 %phitmp1, 0, !insn.addr !4009
  store i32 %62, i32* %esi.04.reg2mem, !insn.addr !4009
  store i32 %61, i32* %esp.03.reg2mem, !insn.addr !4009
  store i32 %66, i32* %edx.02.reg2mem, !insn.addr !4009
  br i1 %70, label %dec_label_pc_40a015.thread, label %71, !insn.addr !4009

; <label>:71:                                     ; preds = %dec_label_pc_40a015
  %72 = add i32 %45, -7, !insn.addr !4005
  %73 = inttoptr i32 %72 to i32*, !insn.addr !4005
  %74 = lshr i8 %69, %phitmp1, !insn.addr !4009
  %75 = sub nsw i8 8, %phitmp1, !insn.addr !4009
  %76 = shl i8 %69, %75, !insn.addr !4009
  %77 = or i8 %74, %76, !insn.addr !4009
  store i8 %77, i8* %68, align 1, !insn.addr !4009
  store i32 %62, i32* %esi.04.reg2mem, !insn.addr !4009
  store i32 %61, i32* %esp.03.reg2mem, !insn.addr !4009
  store i32 %66, i32* %edx.02.reg2mem, !insn.addr !4009
  br label %dec_label_pc_40a015.thread, !insn.addr !4009

dec_label_pc_40a015.thread:                       ; preds = %dec_label_pc_409fa8, %dec_label_pc_40a015, %71
  %78 = add i32 %0, 7, !insn.addr !4010
  %79 = inttoptr i32 %78 to i32*, !insn.addr !4010
  %edx.02.reload = load i32, i32* %edx.02.reg2mem
  %esp.03.reload = load i32, i32* %esp.03.reg2mem
  %esi.04.reload = load i32, i32* %esi.04.reg2mem
  %80 = add i32 %esp.03.reload, -4, !insn.addr !4011
  %81 = inttoptr i32 %80 to i32*, !insn.addr !4011
  store i32 %edx.02.reload, i32* %81, align 4, !insn.addr !4011
  %82 = add i32 %esp.03.reload, -8, !insn.addr !4012
  %83 = inttoptr i32 %82 to i32*, !insn.addr !4012
  store i32 %edx.02.reload, i32* %83, align 4, !insn.addr !4012
  %84 = call i32 @function_40b590(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4013
  %85 = add i32 %esi.04.reload, -103, !insn.addr !4014
  %86 = inttoptr i32 %85 to i32*, !insn.addr !4014
  store i32 %edx.02.reload, i32* %86, align 4, !insn.addr !4014
  %87 = add i32 %esi.04.reload, 65, !insn.addr !4015
  %88 = inttoptr i32 %87 to i32*, !insn.addr !4015
  store i32 %84, i32* %88, align 4, !insn.addr !4015
  %89 = inttoptr i32 %84 to i32*, !insn.addr !4016
  %90 = load i32, i32* %89, align 4, !insn.addr !4016
  %91 = sub i32 0, %90
  %92 = sub i32 %91, 1
  store i32 %92, i32* %89, align 4, !insn.addr !4016
  ret i32 %84, !insn.addr !4017
}

define i32 @function_40a03b() local_unnamed_addr {
dec_label_pc_40a03b:
  %eax.0.reg2mem = alloca i32, !insn.addr !4018
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call x86_fp80 @__decompiler_undefined_function_4()
  %7 = add i32 %4, -95, !insn.addr !4018
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4018
  %9 = load i32, i32* %8, align 4, !insn.addr !4018
  %10 = udiv i32 %9, 2, !insn.addr !4018
  store i32 %10, i32* %8, align 4, !insn.addr !4018
  %11 = and i32 %9, 1, !insn.addr !4018
  %12 = icmp eq i32 %11, 0, !insn.addr !4018
  %13 = select i1 %12, i32 0, i32 255, !insn.addr !4019
  %14 = and i32 %5, 1073741568, !insn.addr !4019
  %15 = or i32 %13, %14, !insn.addr !4019
  %16 = add i32 %4, 1317617750, !insn.addr !4020
  %17 = inttoptr i32 %16 to i32*, !insn.addr !4020
  %18 = load i32, i32* %17, align 4, !insn.addr !4020
  %19 = add i32 %18, -1, !insn.addr !4020
  store i32 %19, i32* %17, align 4, !insn.addr !4020
  %20 = add i32 %3, 1, !insn.addr !4021
  %21 = icmp slt i32 %20, 0, !insn.addr !4021
  %22 = load i32, i32* %ebx, align 4, !insn.addr !4022
  %23 = mul i32 %15, 4, !insn.addr !4022
  %24 = add i32 %22, 28, !insn.addr !4022
  %25 = add i32 %24, %23, !insn.addr !4022
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4022
  %27 = load i32, i32* %26, align 4, !insn.addr !4022
  %28 = call i32 @__asm_hlt(), !insn.addr !4023
  %29 = icmp eq i1 %21, false, !insn.addr !4024
  br i1 %29, label %dec_label_pc_40a0a6, label %dec_label_pc_40a052, !insn.addr !4024

dec_label_pc_40a052:                              ; preds = %dec_label_pc_40a03b
  %30 = or i32 %28, %4, !insn.addr !4025
  %31 = fptosi x86_fp80 %6 to i32, !insn.addr !4026
  %32 = mul i32 %30, 5, !insn.addr !4026
  %33 = inttoptr i32 %32 to i32*, !insn.addr !4026
  store i32 %31, i32* %33, align 4, !insn.addr !4026
  %34 = load i32, i32* %ebx, align 4
  %35 = call i8 @__readgsbyte(i32 %34), !insn.addr !4027
  %36 = udiv i32 %28, 256, !insn.addr !4027
  %37 = trunc i32 %36 to i8, !insn.addr !4027
  %38 = add i8 %35, %37, !insn.addr !4027
  call void @__writegsbyte(i32 %34, i8 %38), !insn.addr !4027
  %39 = add i32 %1, 40, !insn.addr !4028
  %40 = inttoptr i32 %39 to i32*, !insn.addr !4028
  store i32 %30, i32* %40, align 4, !insn.addr !4028
  %41 = load i32, i32* %ebx, align 4, !insn.addr !4029
  %42 = add i32 %41, 80082617, !insn.addr !4029
  %43 = inttoptr i32 %42 to i8*, !insn.addr !4029
  %44 = load i8, i8* %43, align 1, !insn.addr !4029
  %45 = trunc i32 %30 to i8, !insn.addr !4029
  %46 = add i8 %44, %45, !insn.addr !4029
  %47 = icmp eq i8 %46, 0, !insn.addr !4029
  store i8 %46, i8* %43, align 1, !insn.addr !4029
  br i1 %47, label %dec_label_pc_40a076, label %dec_label_pc_40a06d, !insn.addr !4030

dec_label_pc_40a06d:                              ; preds = %dec_label_pc_40a052
  %48 = call i8 @__asm_in.7(i8 92), !insn.addr !4031
  %49 = sext i8 %48 to i32, !insn.addr !4031
  %50 = and i32 %28, %27, !insn.addr !4032
  %51 = and i32 %50, -256, !insn.addr !4031
  %52 = or i32 %51, %49, !insn.addr !4031
  %53 = inttoptr i32 %52 to i8*, !insn.addr !4033
  store i8 -21, i8* %53, align 1, !insn.addr !4033
  %54 = bitcast i32* %ebx to i8*
  %55 = load i8, i8* %54, align 4, !insn.addr !4034
  %56 = add i8 %55, %45, !insn.addr !4034
  %57 = load i32, i32* %ebx, align 4, !insn.addr !4034
  %58 = inttoptr i32 %57 to i8*, !insn.addr !4034
  store i8 %56, i8* %58, align 1, !insn.addr !4034
  ret i32 %52, !insn.addr !4034

dec_label_pc_40a076:                              ; preds = %dec_label_pc_40a052
  %59 = inttoptr i32 %2 to i32*, !insn.addr !4035
  %60 = and i32 %28, %27, !insn.addr !4036
  %61 = add i32 %28, 70, !insn.addr !4032
  %62 = add i32 %1, 16, !insn.addr !4037
  %63 = inttoptr i32 %62 to i8*, !insn.addr !4037
  %64 = load i8, i8* %63, align 1, !insn.addr !4037
  %65 = zext i8 %64 to i32, !insn.addr !4037
  %66 = and i32 %27, 255, !insn.addr !4032
  %67 = and i32 %66, %61, !insn.addr !4037
  %68 = mul nuw nsw i32 %67, %65, !insn.addr !4037
  %69 = and i32 %60, -65536, !insn.addr !4037
  %70 = or i32 %68, %69, !insn.addr !4037
  store i32 %70, i32* %eax.0.reg2mem
  br label %dec_label_pc_40a0ac

dec_label_pc_40a0a6:                              ; preds = %dec_label_pc_40a03b
  %71 = mul i32 %2, 8, !insn.addr !4038
  %72 = add i32 %71, %0, !insn.addr !4038
  %73 = inttoptr i32 %72 to i64*, !insn.addr !4038
  %74 = load i64, i64* %73, align 4, !insn.addr !4038
  %75 = call i32 @__asm_bound(i64 %74), !insn.addr !4038
  %76 = call i32 @__asm_iretd(), !insn.addr !4039
  %77 = and i32 %76, -65281, !insn.addr !4040
  %78 = or i32 %77, 768, !insn.addr !4040
  store i32 %78, i32* %eax.0.reg2mem, !insn.addr !4040
  br label %dec_label_pc_40a0ac, !insn.addr !4040

dec_label_pc_40a0ac:                              ; preds = %dec_label_pc_40a076, %dec_label_pc_40a0a6
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %79 = bitcast i32* %ebx to i8*
  %80 = load i8, i8* %79, align 4, !insn.addr !4041
  %81 = trunc i32 %27 to i8, !insn.addr !4041
  %82 = and i8 %80, %81, !insn.addr !4041
  %83 = call i8 @llvm.ctpop.i8(i8 %82), !range !405, !insn.addr !4041
  %84 = and i8 %83, 1, !insn.addr !4041
  %85 = icmp eq i8 %84, 0, !insn.addr !4041
  br i1 %85, label %dec_label_pc_40a0bd, label %dec_label_pc_40a0b6, !insn.addr !4042

dec_label_pc_40a0b6:                              ; preds = %dec_label_pc_40a0ac
  %86 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !4043
  %87 = load i8, i8* %86, align 1, !insn.addr !4043
  %88 = trunc i32 %eax.0.reload to i8, !insn.addr !4043
  %89 = or i8 %87, %88, !insn.addr !4043
  %90 = add i8 %89, %88, !insn.addr !4044
  store i8 %90, i8* %86, align 1, !insn.addr !4044
  ret i32 %eax.0.reload, !insn.addr !4044

dec_label_pc_40a0bd:                              ; preds = %dec_label_pc_40a0ac
  %91 = add i32 %1, 207025312, !insn.addr !4045
  %92 = inttoptr i32 %91 to i32*, !insn.addr !4045
  %93 = add i32 %eax.0.reload, 112, !insn.addr !4046
  %94 = and i32 %93, 255, !insn.addr !4046
  %95 = and i32 %eax.0.reload, -256, !insn.addr !4046
  %96 = or i32 %94, %95, !insn.addr !4046
  %97 = inttoptr i32 %96 to i32*, !insn.addr !4047
  %98 = load i32, i32* %97, align 4, !insn.addr !4047
  %99 = add i32 %98, 1959363840, !insn.addr !4047
  store i32 %99, i32* %97, align 4, !insn.addr !4047
  %100 = trunc i32 %93 to i8, !insn.addr !4048
  %101 = add i32 %eax.0.reload, 232, !insn.addr !4048
  %102 = icmp ugt i8 %100, -121, !insn.addr !4048
  %103 = and i32 %101, 255, !insn.addr !4048
  %104 = or i32 %103, %95, !insn.addr !4048
  %105 = select i1 %102, i32 1185089397, i32 1185089396, !insn.addr !4049
  %106 = sub i32 %104, %105, !insn.addr !4049
  %107 = add i32 %106, 113, !insn.addr !4050
  %108 = and i32 %107, 255, !insn.addr !4050
  %109 = and i32 %106, -256, !insn.addr !4050
  %110 = or i32 %108, %109, !insn.addr !4050
  %111 = inttoptr i32 %110 to i32*, !insn.addr !4051
  %112 = load i32, i32* %111, align 4, !insn.addr !4051
  %113 = add i32 %112, 2051362816, !insn.addr !4051
  store i32 %113, i32* %111, align 4, !insn.addr !4051
  %114 = load i32, i32* %ebx, align 4
  %115 = add i32 %114, 93, !insn.addr !4052
  %116 = inttoptr i32 %115 to i8*, !insn.addr !4052
  %117 = load i8, i8* %116, align 1, !insn.addr !4052
  %118 = trunc i32 %114 to i8, !insn.addr !4052
  %119 = sub i8 %117, %118, !insn.addr !4052
  store i8 %119, i8* %116, align 1, !insn.addr !4052
  ret i32 %110, !insn.addr !4053
}

define i32 @function_40a0e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_40a0e0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-7836 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %7 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4054
  %8 = zext i1 %6 to i32, !insn.addr !4055
  %9 = or i32 %7, %8, !insn.addr !4055
  %10 = sub i32 %1, %9, !insn.addr !4055
  %11 = add i32 %10, 16, !insn.addr !4056
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4056
  %13 = load i32, i32* %12, align 4, !insn.addr !4056
  %14 = trunc i32 %4 to i8, !insn.addr !4057
  %15 = add i32 %4, 124, !insn.addr !4057
  %16 = icmp ult i8 %14, -124, !insn.addr !4057
  %17 = and i32 %15, 255, !insn.addr !4057
  %18 = and i32 %4, -256, !insn.addr !4057
  %19 = or i32 %17, %18, !insn.addr !4057
  %20 = inttoptr i32 %13 to i32*, !insn.addr !4058
  store i32 %19, i32* %20, align 4, !insn.addr !4058
  %21 = zext i1 %16 to i32, !insn.addr !4059
  %22 = add i32 %19, -664447218, !insn.addr !4059
  %23 = add i32 %22, %21, !insn.addr !4059
  %24 = icmp ule i32 %23, %19, !insn.addr !4059
  %25 = icmp ugt i32 %19, 664447217, !insn.addr !4059
  %26 = select i1 %16, i1 %24, i1 %25, !insn.addr !4059
  %27 = inttoptr i32 %23 to i32*, !insn.addr !4060
  %28 = load i32, i32* %27, align 4, !insn.addr !4060
  %29 = zext i1 %26 to i32, !insn.addr !4060
  %30 = add i32 %23, %29, !insn.addr !4060
  %31 = add i32 %30, %28, !insn.addr !4060
  store i32 %31, i32* %27, align 4, !insn.addr !4060
  %32 = add i32 %10, -712696384, !insn.addr !4061
  %33 = inttoptr i32 %32 to i8*, !insn.addr !4061
  %34 = load i8, i8* %33, align 1, !insn.addr !4061
  %35 = trunc i32 %23 to i8, !insn.addr !4061
  %36 = add i8 %34, %35, !insn.addr !4061
  store i8 %36, i8* %33, align 1, !insn.addr !4061
  %37 = udiv i32 %3, 256, !insn.addr !4062
  %38 = trunc i32 %37 to i8, !insn.addr !4062
  %39 = udiv i32 %23, 256, !insn.addr !4062
  %40 = trunc i32 %39 to i8, !insn.addr !4062
  %41 = add i8 %40, %38, !insn.addr !4062
  %42 = zext i8 %41 to i32, !insn.addr !4062
  %43 = mul i32 %42, 256, !insn.addr !4062
  %44 = and i32 %3, -65281, !insn.addr !4062
  %45 = or i32 %43, %44, !insn.addr !4062
  %46 = select i1 %5, i32 0, i32 8, !insn.addr !4058
  %47 = add i32 %13, %46, !insn.addr !4063
  %48 = inttoptr i32 %47 to i32*, !insn.addr !4063
  %49 = load i32, i32* %48, align 4, !insn.addr !4063
  %50 = and i32 %49, %45, !insn.addr !4064
  %51 = icmp eq i32 %50, 0, !insn.addr !4064
  %52 = icmp eq i1 %51, false, !insn.addr !4065
  br i1 %52, label %dec_label_pc_40a131, label %dec_label_pc_40a112, !insn.addr !4065

dec_label_pc_40a112:                              ; preds = %dec_label_pc_40a0e0
  %53 = icmp ult i8 %41, %38, !insn.addr !4062
  %54 = zext i1 %53 to i32, !insn.addr !4066
  %55 = add i32 %23, 15999420, !insn.addr !4066
  %56 = add i32 %55, %54, !insn.addr !4066
  %57 = add i32 %56, 67, !insn.addr !4067
  %58 = and i32 %57, 255, !insn.addr !4067
  %59 = and i32 %56, -256, !insn.addr !4067
  %60 = or i32 %58, %59, !insn.addr !4067
  %61 = inttoptr i32 %60 to i8*, !insn.addr !4068
  %62 = load i8, i8* %61, align 1, !insn.addr !4068
  %63 = trunc i32 %57 to i8, !insn.addr !4068
  %64 = add i8 %62, %63, !insn.addr !4068
  store i8 %64, i8* %61, align 1, !insn.addr !4068
  %65 = add i32 %60, 719982, !insn.addr !4069
  ret i32 %65, !insn.addr !4070

dec_label_pc_40a131:                              ; preds = %dec_label_pc_40a0e0
  %66 = add i32 %10, -10071860, !insn.addr !4071
  %67 = add i32 %10, 12, !insn.addr !4072
  %68 = inttoptr i32 %67 to i32*, !insn.addr !4072
  %69 = load i32, i32* %68, align 4, !insn.addr !4072
  %70 = call i32 @__asm_int3(), !insn.addr !4073
  %71 = trunc i32 %70 to i8, !insn.addr !4074
  %72 = inttoptr i32 %49 to i8*, !insn.addr !4074
  %73 = load i8, i8* %72, align 1, !insn.addr !4074
  %74 = add i8 %73, %71, !insn.addr !4074
  %75 = icmp ult i8 %74, %71, !insn.addr !4074
  %76 = zext i8 %74 to i32, !insn.addr !4074
  %77 = and i32 %70, -256, !insn.addr !4074
  %78 = or i32 %77, %76, !insn.addr !4074
  %79 = trunc i32 %69 to i16, !insn.addr !4075
  %80 = call i8 @__asm_insb(i16 %79), !insn.addr !4075
  %81 = inttoptr i32 %66 to i8*, !insn.addr !4075
  store i8 %80, i8* %81, align 1, !insn.addr !4075
  %82 = add i32 %2, -991425466, !insn.addr !4076
  %83 = inttoptr i32 %82 to i32*, !insn.addr !4076
  %84 = load i32, i32* %83, align 4, !insn.addr !4076
  %85 = add i32 %84, -1, !insn.addr !4076
  store i32 %85, i32* %83, align 4, !insn.addr !4076
  %86 = add i32 %78, -8, !insn.addr !4077
  %87 = inttoptr i32 %86 to i8*, !insn.addr !4077
  %88 = load i8, i8* %87, align 1, !insn.addr !4077
  %89 = trunc i32 %69 to i8, !insn.addr !4077
  %90 = zext i1 %75 to i8, !insn.addr !4077
  %91 = add i8 %90, %89, !insn.addr !4077
  %92 = add i8 %91, %88, !insn.addr !4077
  store i8 %92, i8* %87, align 1, !insn.addr !4077
  %93 = add i32 %10, %2, !insn.addr !4078
  %94 = add i32 %2, -11467697, !insn.addr !4079
  %95 = inttoptr i32 %94 to i8*, !insn.addr !4079
  %96 = load i8, i8* %95, align 1, !insn.addr !4079
  %97 = add i8 %96, -127, !insn.addr !4079
  %98 = icmp ult i8 %96, 127, !insn.addr !4079
  store i8 %97, i8* %95, align 1, !insn.addr !4079
  %99 = add i32 %78, 4243528, !insn.addr !4080
  %100 = sext i1 %98 to i32, !insn.addr !4080
  %101 = icmp ne i32 %99, %100, !insn.addr !4081
  %102 = zext i1 %101 to i32
  %spec.select = add i32 %0, %102
  %103 = inttoptr i32 %66 to i32*, !insn.addr !4082
  %104 = load i32, i32* %103, align 4, !insn.addr !4082
  %105 = inttoptr i32 %spec.select to i32*, !insn.addr !4083
  store i32 %104, i32* %105, align 4, !insn.addr !4083
  %106 = add i32 %2, 1183446101, !insn.addr !4084
  %107 = inttoptr i32 %106 to i8*, !insn.addr !4084
  store i8 0, i8* %107, align 1, !insn.addr !4084
  %108 = add i32 %93, -4, !insn.addr !4085
  %109 = inttoptr i32 %108 to i32*, !insn.addr !4085
  %110 = load i32, i32* %109, align 4, !insn.addr !4085
  %111 = add i32 %spec.select, 24, !insn.addr !4086
  %112 = inttoptr i32 %111 to i32*, !insn.addr !4086
  store i32 %110, i32* %112, align 4, !insn.addr !4086
  %113 = call i32 @__asm_int3(), !insn.addr !4087
  %114 = add i32 %spec.select, 32, !insn.addr !4088
  %115 = inttoptr i32 %114 to i32*, !insn.addr !4088
  store i32 %110, i32* %115, align 4, !insn.addr !4088
  %116 = add i32 %93, -1, !insn.addr !4089
  %117 = add i32 %2, 1300891765, !insn.addr !4090
  %118 = inttoptr i32 %117 to i32*, !insn.addr !4090
  %119 = load i32, i32* %118, align 4, !insn.addr !4090
  %120 = add i32 %119, -1, !insn.addr !4090
  store i32 %120, i32* %118, align 4, !insn.addr !4090
  %121 = and i32 %104, -256, !insn.addr !4091
  %122 = or i32 %121, 132, !insn.addr !4091
  store i32 %116, i32* %stack_var_-28, align 4, !insn.addr !4092
  %123 = call i32 @__asm_iretd(), !insn.addr !4093
  %124 = or i32 %121, 133, !insn.addr !4094
  %125 = inttoptr i32 %124 to i8*, !insn.addr !4094
  %126 = load i8, i8* %125, align 1, !insn.addr !4094
  %127 = udiv i32 %110, 256, !insn.addr !4094
  %128 = trunc i32 %127 to i8, !insn.addr !4094
  %129 = add i8 %126, %128, !insn.addr !4094
  %130 = icmp ult i8 %129, %126, !insn.addr !4094
  store i8 %129, i8* %125, align 1, !insn.addr !4094
  %131 = inttoptr i32 %123 to i32*, !insn.addr !4095
  %132 = load i32, i32* %131, align 4, !insn.addr !4095
  %.neg1 = sext i1 %130 to i32
  %.neg2 = sub i32 %123, %132, !insn.addr !4095
  %133 = add i32 %.neg2, %.neg1, !insn.addr !4095
  %134 = add i32 %133, 4, !insn.addr !4096
  %135 = inttoptr i32 %134 to i32*, !insn.addr !4096
  store i32 1, i32* %135, align 4, !insn.addr !4096
  %136 = trunc i32 %133 to i8, !insn.addr !4097
  store i8 %136, i8* inttoptr (i32 -1946294508 to i8*), align 4, !insn.addr !4097
  %137 = add nsw i32 %122, 12, !insn.addr !4098
  store i32 %137, i32* %stack_var_-7836, align 4, !insn.addr !4099
  %138 = icmp eq i32 %110, 0, !insn.addr !4100
  br i1 %138, label %dec_label_pc_40a232, label %dec_label_pc_40a1de, !insn.addr !4100

dec_label_pc_40a1de:                              ; preds = %dec_label_pc_40a131
  %139 = ptrtoint i32* %stack_var_-7836 to i32, !insn.addr !4099
  %140 = add i32 %139, -4, !insn.addr !4101
  %141 = inttoptr i32 %140 to i32*, !insn.addr !4101
  %142 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !4101
  store i32 %142, i32* %141, align 4, !insn.addr !4101
  %143 = add i32 %139, -8, !insn.addr !4102
  %144 = inttoptr i32 %143 to i32*, !insn.addr !4102
  store i32 %spec.select, i32* %144, align 4, !insn.addr !4102
  %145 = add i32 %133, -1, !insn.addr !4103
  %146 = add i32 %139, -12, !insn.addr !4104
  %147 = inttoptr i32 %146 to i32*, !insn.addr !4104
  store i32 36, i32* %147, align 4, !insn.addr !4104
  ret i32 %145, !insn.addr !4104

dec_label_pc_40a232:                              ; preds = %dec_label_pc_40a131
  %148 = load i32, i32* %105, align 4, !insn.addr !4105
  ret i32 %148, !insn.addr !4105
}

define i32 @function_40a239() local_unnamed_addr {
dec_label_pc_40a239:
  %0 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_int(i32 4), !insn.addr !4106
  %1 = udiv i32 %0, 256, !insn.addr !4107
  %2 = add i32 %1, %0, !insn.addr !4107
  %3 = and i32 %2, 255, !insn.addr !4107
  %4 = and i32 %0, -256, !insn.addr !4107
  %5 = or i32 %3, %4, !insn.addr !4107
  %6 = inttoptr i32 %5 to i8*, !insn.addr !4108
  %7 = load i8, i8* %6, align 1, !insn.addr !4108
  %8 = trunc i32 %2 to i8, !insn.addr !4108
  %9 = add i8 %7, %8, !insn.addr !4108
  store i8 %9, i8* %6, align 1, !insn.addr !4108
  %10 = call i32 @function_40a257(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4109
  ret i32 %10, !insn.addr !4109
}

define i32 @function_40a241() local_unnamed_addr {
dec_label_pc_40a241:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 4, !insn.addr !4110
  %4 = inttoptr i32 %3 to i32*, !insn.addr !4110
  %5 = add i32 %0, 68, !insn.addr !4111
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4111
  %7 = load i32, i32* %6, align 4, !insn.addr !4111
  %8 = add i32 %7, 1, !insn.addr !4111
  store i32 %8, i32* %6, align 4, !insn.addr !4111
  %9 = add i32 %1, 12, !insn.addr !4112
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4112
  ret i32 %2, !insn.addr !4112
}

define i32 @function_40a257(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40a257:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i16 @__decompiler_undefined_function_1()
  %3 = add i32 %0, -2141519760, !insn.addr !4113
  %4 = inttoptr i32 %3 to i8*, !insn.addr !4113
  %5 = load i8, i8* %4, align 1, !insn.addr !4113
  %6 = udiv i32 %1, 256, !insn.addr !4113
  %7 = trunc i32 %6 to i8, !insn.addr !4113
  %8 = and i8 %5, %7, !insn.addr !4113
  store i8 %8, i8* %4, align 1, !insn.addr !4113
  %9 = trunc i32 %1 to i8, !insn.addr !4114
  store i8 %9, i8* inttoptr (i32 -1957298112 to i8*), align 64, !insn.addr !4114
  %10 = call i32 @unknown_ff65da00(i16 %2), !insn.addr !4115
  store i32 -148, i32* inttoptr (i32 -1170598985 to i32*), align 4, !insn.addr !4116
  %11 = inttoptr i32 %arg1 to i32*, !insn.addr !4117
  %12 = load i32, i32* %11, align 4, !insn.addr !4117
  %13 = and i32 %12, 12, !insn.addr !4117
  store i32 %13, i32* %11, align 4, !insn.addr !4117
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* inttoptr (i32 -1170598989 to %_RTL_CRITICAL_SECTION*)), !insn.addr !4118
  ret i32 0, !insn.addr !4119
}

define i32 @function_40a2a8() local_unnamed_addr {
dec_label_pc_40a2a8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -638683712, !insn.addr !4120
  %3 = inttoptr i32 %2 to i8*, !insn.addr !4120
  %4 = load i8, i8* %3, align 1, !insn.addr !4120
  %5 = trunc i32 %1 to i8
  %6 = add i8 %5, 1, !insn.addr !4120
  %7 = add i8 %6, %4, !insn.addr !4120
  store i8 %7, i8* %3, align 1, !insn.addr !4120
  %8 = call i32 @GetLastError(), !insn.addr !4121
  ret i32 %8, !insn.addr !4122
}

define i32 @function_40a2c0() local_unnamed_addr {
dec_label_pc_40a2c0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, 54655530, !insn.addr !4123
  %4 = add i32 %0, -111, !insn.addr !4124
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4124
  %6 = load i8, i8* %5, align 1, !insn.addr !4124
  %7 = trunc i32 %1 to i8, !insn.addr !4124
  %8 = add i8 %6, %7, !insn.addr !4124
  store i8 %8, i8* %5, align 1, !insn.addr !4124
  ret i32 %3, !insn.addr !4125
}

define i32 @function_40a2ce(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40a2ce:
  %merge.reg2mem = alloca i32, !insn.addr !4126
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, -1947440299, !insn.addr !4126
  %4 = inttoptr i32 %3 to i32*, !insn.addr !4126
  %5 = load i32, i32* %4, align 4, !insn.addr !4126
  %6 = xor i32 %5, %0, !insn.addr !4126
  %7 = icmp eq i32 %6, 0, !insn.addr !4126
  %8 = icmp eq i32 %1, 1, !insn.addr !4127
  %9 = or i1 %8, %7, !insn.addr !4127
  br i1 %9, label %dec_label_pc_40a2d6, label %dec_label_pc_40a2de, !insn.addr !4127

dec_label_pc_40a2d6:                              ; preds = %dec_label_pc_40a2ce
  %10 = add i32 %2, 4, !insn.addr !4128
  %11 = inttoptr i32 %10 to i32*, !insn.addr !4128
  %12 = load i32, i32* %11, align 4, !insn.addr !4128
  %13 = icmp eq i32 %12, 0, !insn.addr !4129
  %14 = icmp eq i1 %13, false, !insn.addr !4130
  br i1 %14, label %dec_label_pc_40a2ed, label %dec_label_pc_40a2dd, !insn.addr !4130

dec_label_pc_40a2dd:                              ; preds = %dec_label_pc_40a2ed, %dec_label_pc_40a2ed, %dec_label_pc_40a2de, %dec_label_pc_40a2d6
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !4130

dec_label_pc_40a2de:                              ; preds = %dec_label_pc_40a2ce
  %15 = add i32 %2, 9207096, !insn.addr !4131
  store i32 %15, i32* %merge.reg2mem, !insn.addr !4131
  br label %dec_label_pc_40a2dd, !insn.addr !4131

dec_label_pc_40a2ed:                              ; preds = %dec_label_pc_40a2d6
  %16 = call i32 @function_90909090(), !insn.addr !4132
  store i32 %16, i32* %merge.reg2mem
  store i32 %16, i32* %merge.reg2mem
  switch i32 %16, label %dec_label_pc_40a304 [
    i32 0, label %dec_label_pc_40a2dd
    i32 3342435, label %dec_label_pc_40a2dd
  ]

dec_label_pc_40a304:                              ; preds = %dec_label_pc_40a2ed
  %17 = trunc i32 %16 to i8, !insn.addr !4133
  %18 = inttoptr i32 %12 to i8*, !insn.addr !4133
  %19 = load i8, i8* %18, align 1, !insn.addr !4133
  %20 = and i32 %16, -65536, !insn.addr !4133
  %21 = add i8 %17, -80, !insn.addr !4133
  %22 = add i8 %21, %19, !insn.addr !4134
  %23 = zext i8 %22 to i32, !insn.addr !4134
  %24 = and i32 %16, 65280, !insn.addr !4135
  %25 = add i32 %24, %6
  %26 = and i32 %25, 65280, !insn.addr !4135
  %27 = or i32 %26, %20, !insn.addr !4134
  %28 = or i32 %27, %23, !insn.addr !4135
  ret i32 %28, !insn.addr !4136
}

define i32 @function_40a340(i32 %arg1) local_unnamed_addr {
dec_label_pc_40a340:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %0, 256, !insn.addr !4137
  %3 = inttoptr i32 %0 to i32*, !insn.addr !4137
  store i32 %2, i32* %3, align 4, !insn.addr !4137
  %4 = add i32 %1, 5, !insn.addr !4138
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4138
  %6 = load i32, i32* %5, align 4, !insn.addr !4138
  ret i32 %6, !insn.addr !4139
}

define i32 @function_40a358() local_unnamed_addr {
dec_label_pc_40a358:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = load i32, i32* inttoptr (i32 79289979 to i32*), align 4, !insn.addr !4140
  %3 = xor i32 %2, %0, !insn.addr !4140
  %4 = add i32 %3, 209033720, !insn.addr !4141
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4141
  %6 = load i8, i8* %5, align 1, !insn.addr !4141
  %7 = trunc i32 %1 to i8, !insn.addr !4141
  %8 = add i8 %6, %7, !insn.addr !4141
  store i8 %8, i8* %5, align 1, !insn.addr !4141
  ret i32 %1, !insn.addr !4142
}

define i32 @function_40a370() local_unnamed_addr {
dec_label_pc_40a370:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__asm_hlt(), !insn.addr !4143
  %2 = udiv i32 %1, 256, !insn.addr !4144
  %3 = trunc i32 %2 to i8, !insn.addr !4144
  %4 = add i32 %0, 33, !insn.addr !4144
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4144
  %6 = load i8, i8* %5, align 1, !insn.addr !4144
  %7 = add i8 %6, %3, !insn.addr !4144
  %8 = zext i8 %7 to i32, !insn.addr !4144
  %9 = mul i32 %8, 256, !insn.addr !4144
  %10 = and i32 %1, -65281, !insn.addr !4144
  %11 = or i32 %9, %10, !insn.addr !4144
  %12 = add i32 %11, 4243508, !insn.addr !4145
  ret i32 %12, !insn.addr !4145
}

define i32 @function_40a384(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40a384:
  %eax.0.reg2mem = alloca i32, !insn.addr !4146
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = xor i32 %3, ptrtoint ([90 x i8]* @global_var_40d898 to i32), !insn.addr !4146
  %5 = trunc i32 %1 to i16, !insn.addr !4147
  %6 = trunc i32 %4 to i8, !insn.addr !4147
  call void @__asm_out.6(i16 %5, i8 %6), !insn.addr !4147
  %7 = and i32 %4, -256, !insn.addr !4148
  %8 = and i32 %2, %0, !insn.addr !4149
  %9 = icmp eq i32 %8, 0, !insn.addr !4149
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !4150
  br i1 %9, label %10, label %dec_label_pc_40a38f, !insn.addr !4150

; <label>:10:                                     ; preds = %dec_label_pc_40a384
  %11 = call i32 @function_40a358(), !insn.addr !4150
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !4150
  br label %dec_label_pc_40a38f, !insn.addr !4150

dec_label_pc_40a38f:                              ; preds = %10, %dec_label_pc_40a384
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %12 = add i32 %eax.0.reload, 720000, !insn.addr !4151
  ret i32 %12, !insn.addr !4152
}

define i32 @function_40a39c() local_unnamed_addr {
dec_label_pc_40a39c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = select i1 %2, i32 -1, i32 1, !insn.addr !4153
  %4 = add i32 %0, 738739595, !insn.addr !4153
  %5 = add i32 %4, %3, !insn.addr !4154
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4154
  %7 = load i32, i32* %6, align 4, !insn.addr !4154
  %8 = add i32 %7, -1957684672, !insn.addr !4155
  %9 = inttoptr i32 %8 to i8*, !insn.addr !4155
  store i8 0, i8* %9, align 1, !insn.addr !4155
  ret i32 %1, !insn.addr !4156
}

define i32 @function_40a3ba() local_unnamed_addr {
dec_label_pc_40a3ba:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = select i1 %6, i32 -1869573999, i32 -1869574000, !insn.addr !4157
  %8 = sub i32 %5, %7, !insn.addr !4157
  %9 = mul i32 %8, 8, !insn.addr !4158
  %10 = add i32 %3, -1869610783, !insn.addr !4158
  %11 = add i32 %10, %9, !insn.addr !4158
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4158
  %13 = load i32, i32* %12, align 4, !insn.addr !4158
  %14 = trunc i32 %4 to i8, !insn.addr !4159
  %15 = and i8 %14, 31, !insn.addr !4159
  %16 = icmp eq i8 %15, 0, !insn.addr !4159
  br i1 %16, label %dec_label_pc_40a40a, label %17, !insn.addr !4159

; <label>:17:                                     ; preds = %dec_label_pc_40a3ba
  %18 = add i32 %8, -1948087467, !insn.addr !4159
  %19 = inttoptr i32 %18 to i8*, !insn.addr !4159
  %20 = load i8, i8* %19, align 1, !insn.addr !4159
  %21 = shl i8 %20, %15, !insn.addr !4159
  %22 = zext i8 %20 to i16, !insn.addr !4159
  %23 = sub nsw i8 9, %15, !insn.addr !4159
  %24 = zext i8 %23 to i16, !insn.addr !4159
  %25 = lshr i16 %22, %24, !insn.addr !4159
  %26 = trunc i16 %25 to i8
  %27 = or i8 %21, %26
  store i8 %27, i8* %19, align 1, !insn.addr !4159
  br label %dec_label_pc_40a40a, !insn.addr !4159

dec_label_pc_40a40a:                              ; preds = %dec_label_pc_40a3ba, %17
  %28 = xor i32 %13, %1, !insn.addr !4158
  %29 = add i32 %0, -117, !insn.addr !4160
  %30 = add i32 %29, %2, !insn.addr !4160
  %31 = inttoptr i32 %30 to i8*, !insn.addr !4160
  %32 = load i8, i8* %31, align 1, !insn.addr !4160
  %33 = mul i8 %32, 4, !insn.addr !4160
  store i8 %33, i8* %31, align 1, !insn.addr !4160
  %34 = or i32 %8, 81, !insn.addr !4161
  %35 = add i32 %28, -2, !insn.addr !4162
  %36 = inttoptr i32 %35 to i32*, !insn.addr !4162
  store i32 %34, i32* %36, align 4, !insn.addr !4162
  ret i32 0, !insn.addr !4163
}

define i32 @function_40a416() local_unnamed_addr {
dec_label_pc_40a416:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4164
}

define i32 @function_40a420(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_40a420:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4165
}

define i32 @function_40a424(i32 %arg1) local_unnamed_addr {
dec_label_pc_40a424:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4166
}

define i32 @function_40a427(i16 %arg1) local_unnamed_addr {
dec_label_pc_40a427:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = load i8*, i8** @global_var_4108dc, align 4, !insn.addr !4167
  %5 = icmp slt i8* %4, inttoptr (i32 -94 to i8*), !insn.addr !4168
  br i1 %5, label %dec_label_pc_40a45f, label %dec_label_pc_40a43c, !insn.addr !4168

dec_label_pc_40a43c:                              ; preds = %dec_label_pc_40a427
  ret i32 %3, !insn.addr !4169

dec_label_pc_40a45f:                              ; preds = %dec_label_pc_40a427
  %6 = trunc i32 %2 to i16, !insn.addr !4170
  %7 = call i32 @__asm_insd(i16 %6), !insn.addr !4170
  %8 = inttoptr i32 %0 to i32*, !insn.addr !4170
  store i32 %7, i32* %8, align 4, !insn.addr !4170
  %9 = add i32 %1, -10, !insn.addr !4171
  %10 = inttoptr i32 %9 to i8*, !insn.addr !4171
  store i8 -1, i8* %10, align 1, !insn.addr !4171
  %11 = add i32 %3, -1869574000, !insn.addr !4172
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4172
  %13 = load i32, i32* %12, align 4, !insn.addr !4172
  %14 = sub i32 0, %2
  %15 = sub i32 %14, 1
  %16 = icmp ugt i32 %13, %15, !insn.addr !4172
  %17 = trunc i32 %3 to i8, !insn.addr !4173
  %18 = zext i1 %16 to i8, !insn.addr !4173
  %19 = add i8 %17, 40, !insn.addr !4173
  %20 = add i8 %19, %18, !insn.addr !4173
  %21 = icmp ule i8 %20, %17, !insn.addr !4173
  %22 = icmp ugt i8 %17, -41, !insn.addr !4173
  %23 = select i1 %16, i1 %21, i1 %22, !insn.addr !4173
  %24 = zext i8 %20 to i32, !insn.addr !4173
  %25 = and i32 %3, -256, !insn.addr !4173
  %26 = or i32 %25, %24, !insn.addr !4173
  %27 = inttoptr i32 %26 to i32*, !insn.addr !4174
  %28 = load i32, i32* %27, align 4, !insn.addr !4174
  %.neg1 = sext i1 %23 to i32
  %.neg2 = sub i32 %26, %28, !insn.addr !4174
  %29 = add i32 %.neg2, %.neg1, !insn.addr !4174
  ret i32 %29, !insn.addr !4175
}

define i32 @function_40a480(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40a480:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %arg1, -1073741824, !insn.addr !4176
  %2 = add i32 %1, -1073734656, !insn.addr !4177
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4177
  %4 = load i32, i32* %3, align 1024, !insn.addr !4177
  %5 = xor i32 %4, 11098621, !insn.addr !4177
  store i32 %5, i32* %3, align 1024, !insn.addr !4177
  %6 = and i32 %0, 2048
  %7 = icmp ne i32 %6, 0, !insn.addr !4178
  %8 = and i32 %arg1, 14
  %9 = icmp ugt i32 %8, 9, !insn.addr !4179
  %10 = or i1 %9, %7, !insn.addr !4179
  %11 = add i32 %arg1, 10, !insn.addr !4179
  %12 = select i1 %10, i32 %11, i32 %arg1, !insn.addr !4179
  %13 = sext i1 %10 to i32, !insn.addr !4179
  %14 = and i32 %12, 15, !insn.addr !4179
  %15 = and i32 %arg1, -65536, !insn.addr !4179
  %16 = or i32 %14, %15, !insn.addr !4179
  %17 = mul i32 %13, 256
  %18 = add i32 %17, %arg1
  %19 = and i32 %18, 65280, !insn.addr !4179
  %20 = or i32 %16, %19, !insn.addr !4179
  ret i32 %20, !insn.addr !4179
}

define i32 @function_40a49c() local_unnamed_addr {
dec_label_pc_40a49c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_out.1(i32 0, i32 %2), !insn.addr !4180
  %3 = trunc i32 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !4181
  %5 = inttoptr i32 %2 to i8*, !insn.addr !4181
  store i8 %4, i8* %5, align 1, !insn.addr !4181
  %6 = add i32 %0, 440, !insn.addr !4182
  %7 = add i32 %2, -61, !insn.addr !4183
  %8 = inttoptr i32 %7 to i8*, !insn.addr !4183
  %9 = load i8, i8* %8, align 1, !insn.addr !4183
  %10 = trunc i32 %1 to i8, !insn.addr !4183
  %11 = add i8 %9, %10, !insn.addr !4183
  store i8 %11, i8* %8, align 1, !insn.addr !4183
  ret i32 %6, !insn.addr !4184
}

define i32 @function_40a4c3(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_40a4c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @WaitForSingleObject(i32* nonnull @0, i32 ptrtoint (i32* @0 to i32)), !insn.addr !4185
  %6 = icmp eq i32 %5, 0, !insn.addr !4186
  %7 = add i32 %1, -103, !insn.addr !4187
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4187
  store i32 %5, i32* %8, align 4, !insn.addr !4187
  %9 = icmp eq i1 %6, false, !insn.addr !4188
  br i1 %9, label %dec_label_pc_40a51e, label %dec_label_pc_40a4d3, !insn.addr !4188

dec_label_pc_40a4d3:                              ; preds = %dec_label_pc_40a4c3
  %10 = add i32 %5, 141, !insn.addr !4189
  %11 = and i32 %10, 255, !insn.addr !4189
  %12 = and i32 %5, -256, !insn.addr !4189
  %13 = or i32 %11, %12, !insn.addr !4189
  %14 = mul i32 %3, 2, !insn.addr !4190
  %15 = add i32 %4, %14, !insn.addr !4190
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4190
  %17 = load i32, i32* %16, align 4, !insn.addr !4190
  %18 = add i32 %0, 4243493, !insn.addr !4191
  %19 = inttoptr i32 %18 to i32*, !insn.addr !4191
  %20 = load i32, i32* %19, align 4, !insn.addr !4191
  %21 = add i32 %20, -1, !insn.addr !4191
  store i32 %21, i32* %19, align 4, !insn.addr !4191
  %22 = icmp eq i32 %13, 0, !insn.addr !4192
  br i1 %22, label %dec_label_pc_40a52f, label %dec_label_pc_40a4e5, !insn.addr !4193

dec_label_pc_40a4e5:                              ; preds = %dec_label_pc_40a4d3
  %23 = add i32 %0, 1, !insn.addr !4194
  %24 = add i32 %17, 340611084, !insn.addr !4195
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4195
  %26 = load i32, i32* %25, align 4, !insn.addr !4195
  %27 = trunc i32 %4 to i8, !insn.addr !4196
  %28 = inttoptr i32 %23 to i8*, !insn.addr !4196
  %29 = load i8, i8* %28, align 1, !insn.addr !4196
  %30 = add i8 %29, %27, !insn.addr !4196
  %31 = add i32 %26, -763031467, !insn.addr !4197
  %32 = inttoptr i32 %31 to i8*, !insn.addr !4197
  %33 = load i8, i8* %32, align 1, !insn.addr !4197
  %34 = or i8 %33, %30, !insn.addr !4197
  %35 = icmp eq i8 %34, 0, !insn.addr !4197
  store i8 %34, i8* %32, align 1, !insn.addr !4197
  br i1 %35, label %dec_label_pc_40a503, label %dec_label_pc_40a4f8, !insn.addr !4198

dec_label_pc_40a4f8:                              ; preds = %dec_label_pc_40a4e5
  %36 = and i32 %4, -256, !insn.addr !4196
  %37 = zext i8 %30 to i32, !insn.addr !4196
  %38 = or i32 %36, %37, !insn.addr !4196
  %39 = call i32 @function_40a480(i32 %38, i32 %17, i32 %23), !insn.addr !4199
  ret i32 %39, !insn.addr !4200

dec_label_pc_40a503:                              ; preds = %dec_label_pc_40a4e5
  %40 = add i32 %0, 21, !insn.addr !4201
  %41 = inttoptr i32 %40 to i32*, !insn.addr !4201
  %42 = load i32, i32* %41, align 4, !insn.addr !4201
  %43 = inttoptr i32 %42 to i32*, !insn.addr !4202
  %44 = call i1 @CloseHandle(i32* %43), !insn.addr !4202
  %45 = sext i1 %44 to i32, !insn.addr !4202
  ret i32 %45, !insn.addr !4202

dec_label_pc_40a51e:                              ; preds = %dec_label_pc_40a4c3
  %46 = inttoptr i32 %5 to i32*, !insn.addr !4203
  %47 = load i32, i32* %46, align 4, !insn.addr !4203
  %48 = add i32 %47, %5, !insn.addr !4203
  store i32 %48, i32* %46, align 4, !insn.addr !4203
  ret i32 %5, !insn.addr !4204

dec_label_pc_40a52f:                              ; preds = %dec_label_pc_40a4d3
  %49 = add i32 %2, -1, !insn.addr !4205
  %50 = udiv i32 %49, 256, !insn.addr !4206
  %51 = trunc i32 %50 to i8, !insn.addr !4206
  %.tr = trunc i32 %50 to i8
  %52 = mul i8 %.tr, 2, !insn.addr !4206
  %53 = icmp ult i8 %52, %51, !insn.addr !4206
  %54 = mul i32 %50, 512, !insn.addr !4206
  %55 = and i32 %54, 65024, !insn.addr !4206
  %56 = and i32 %49, -65281, !insn.addr !4206
  %57 = or i32 %55, %56, !insn.addr !4206
  %58 = select i1 %53, i32 255, i32 0, !insn.addr !4207
  %59 = or i32 %12, %58, !insn.addr !4207
  %60 = add i32 %0, 94, !insn.addr !4208
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4208
  %62 = load i32, i32* %61, align 4, !insn.addr !4208
  %63 = add i32 %62, %57, !insn.addr !4208
  store i32 %63, i32* %61, align 4, !insn.addr !4208
  ret i32 %59, !insn.addr !4209
}

define i32 @function_40a540(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40a540:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 11730163, !insn.addr !4210
  ret i32 %1, !insn.addr !4211
}

define i32 @function_40a550(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40a550:
  %ebx.1.reg2mem = alloca i32, !insn.addr !4212
  %ebx.0.reg2mem = alloca i32, !insn.addr !4212
  %.reg2mem = alloca i32, !insn.addr !4212
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = icmp eq i32 %3, 0, !insn.addr !4213
  br i1 %5, label %dec_label_pc_40a57a, label %dec_label_pc_40a55e, !insn.addr !4214

dec_label_pc_40a55e:                              ; preds = %dec_label_pc_40a550
  %6 = add i32 %2, 138775312, !insn.addr !4215
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4215
  %8 = load i32, i32* %7, align 4, !insn.addr !4215
  %9 = add i32 %3, -1, !insn.addr !4216
  %10 = add i32 %9, %4, !insn.addr !4216
  %11 = icmp ult i32 %4, %10, !insn.addr !4217
  %12 = icmp eq i1 %11, false, !insn.addr !4218
  br i1 %12, label %dec_label_pc_40a5d8, label %dec_label_pc_40a566, !insn.addr !4218

dec_label_pc_40a566:                              ; preds = %dec_label_pc_40a55e
  %13 = inttoptr i32 %arg3 to i8*, !insn.addr !4219
  %14 = load i8, i8* %13, align 1, !insn.addr !4219
  %15 = udiv i32 %4, 256, !insn.addr !4220
  %16 = and i32 %15, %4
  %17 = trunc i32 %16 to i8, !insn.addr !4220
  %18 = icmp eq i8 %17, 0, !insn.addr !4220
  %19 = inttoptr i32 %4 to i8*, !insn.addr !4221
  store i8 %14, i8* %19, align 1, !insn.addr !4221
  %20 = load i32, i32* %eax, align 4
  br i1 %18, label %dec_label_pc_40a5ad, label %dec_label_pc_40a571, !insn.addr !4222

dec_label_pc_40a571:                              ; preds = %dec_label_pc_40a566
  %21 = add i32 %20, 1, !insn.addr !4223
  store i32 %21, i32* %eax, align 4, !insn.addr !4223
  %22 = inttoptr i32 %21 to i8*, !insn.addr !4224
  store i8 -117, i8* %22, align 1, !insn.addr !4224
  %.pre = load i32, i32* %eax, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !4224
  br label %dec_label_pc_40a57a, !insn.addr !4224

dec_label_pc_40a57a:                              ; preds = %dec_label_pc_40a5b6, %dec_label_pc_40a571, %dec_label_pc_40a550
  %.reload = load i32, i32* %.reg2mem, !insn.addr !4225
  ret i32 %.reload, !insn.addr !4225

dec_label_pc_40a5ad:                              ; preds = %dec_label_pc_40a566
  %23 = icmp eq i32 %20, 0, !insn.addr !4226
  br i1 %23, label %dec_label_pc_40a5c0, label %dec_label_pc_40a5b6, !insn.addr !4227

dec_label_pc_40a5b6:                              ; preds = %dec_label_pc_40a5ad
  %24 = icmp slt i32 %20, 0, !insn.addr !4226
  %25 = add i32 %20, 1, !insn.addr !4228
  store i32 %25, i32* %eax, align 4, !insn.addr !4228
  %26 = icmp eq i1 %24, false, !insn.addr !4229
  store i32 %25, i32* %.reg2mem, !insn.addr !4229
  br i1 %26, label %dec_label_pc_40a619, label %dec_label_pc_40a57a, !insn.addr !4229

dec_label_pc_40a5c0:                              ; preds = %dec_label_pc_40a5ad
  %27 = call i8 @__asm_in.7(i8 91), !insn.addr !4230
  %28 = sext i8 %27 to i32, !insn.addr !4230
  %29 = and i32 %0, -256, !insn.addr !4230
  %30 = or i32 %29, %28, !insn.addr !4230
  ret i32 %30, !insn.addr !4231

dec_label_pc_40a5d8:                              ; preds = %dec_label_pc_40a55e
  %31 = trunc i32 %4 to i8
  %32 = add i32 %1, 1170692059, !insn.addr !4232
  %33 = inttoptr i32 %32 to i8*, !insn.addr !4232
  %34 = load i8, i8* %33, align 1, !insn.addr !4232
  %35 = add i8 %34, %31, !insn.addr !4232
  store i8 %35, i8* %33, align 1, !insn.addr !4232
  %36 = bitcast i32* %eax to i8*
  %37 = load i8, i8* %36, align 4, !insn.addr !4233
  %38 = load i32, i32* %eax, align 4
  %39 = trunc i32 %38 to i8, !insn.addr !4233
  %40 = add i8 %37, %39, !insn.addr !4233
  %41 = inttoptr i32 %38 to i8*, !insn.addr !4233
  store i8 %40, i8* %41, align 1, !insn.addr !4233
  %42 = add i32 %8, 1164972925, !insn.addr !4234
  %43 = inttoptr i32 %42 to i8*, !insn.addr !4234
  %44 = load i8, i8* %43, align 1, !insn.addr !4234
  %45 = trunc i32 %8 to i8, !insn.addr !4234
  %46 = add i8 %44, %45, !insn.addr !4234
  store i8 %46, i8* %43, align 1, !insn.addr !4234
  %47 = load i32, i32* %eax, align 4
  %48 = or i32 %47, 51, !insn.addr !4235
  store i32 %48, i32* %eax, align 4, !insn.addr !4235
  %49 = inttoptr i32 %48 to i32*, !insn.addr !4236
  %50 = load i32, i32* %49, align 4, !insn.addr !4236
  %51 = icmp eq i32 %50, -14, !insn.addr !4236
  store i32 %8, i32* %ebx.1.reg2mem, !insn.addr !4237
  br i1 %51, label %dec_label_pc_40a5f9, label %dec_label_pc_40a5f0.preheader, !insn.addr !4237

dec_label_pc_40a5f0.preheader:                    ; preds = %dec_label_pc_40a5d8
  %52 = add i32 %48, 4, !insn.addr !4238
  store i32 %8, i32* %ebx.0.reg2mem
  br label %dec_label_pc_40a5f0

dec_label_pc_40a5f0:                              ; preds = %dec_label_pc_40a5f0.preheader, %dec_label_pc_40a5f0
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %53 = mul i32 %ebx.0.reload, 4, !insn.addr !4238
  %54 = add i32 %52, %53, !insn.addr !4238
  %55 = inttoptr i32 %54 to i32*, !insn.addr !4238
  %56 = load i32, i32* %55, align 4, !insn.addr !4238
  %57 = add i32 %ebx.0.reload, 1, !insn.addr !4239
  %58 = icmp eq i32 %56, 0, !insn.addr !4240
  %59 = icmp eq i1 %58, false, !insn.addr !4241
  store i32 %57, i32* %ebx.0.reg2mem, !insn.addr !4241
  store i32 %57, i32* %ebx.1.reg2mem, !insn.addr !4241
  br i1 %59, label %dec_label_pc_40a5f0, label %dec_label_pc_40a5f9, !insn.addr !4241

dec_label_pc_40a5f9:                              ; preds = %dec_label_pc_40a5f0, %dec_label_pc_40a5d8
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %60 = mul i32 %ebx.1.reload, 4, !insn.addr !4242
  %61 = add i32 %60, 191, !insn.addr !4242
  %62 = call i32* @malloc(i32 %61), !insn.addr !4243
  %63 = call i32 @__asm_hlt(), !insn.addr !4244
  %64 = add i32 %63, -47543328, !insn.addr !4245
  ret i32 %64, !insn.addr !4246

dec_label_pc_40a619:                              ; preds = %dec_label_pc_40a5b6
  %65 = sub i32 210440258, %0, !insn.addr !4247
  %66 = add i32 %65, %25, !insn.addr !4248
  %67 = inttoptr i32 %66 to i32*, !insn.addr !4248
  %68 = load i32, i32* %67, align 4, !insn.addr !4248
  %69 = mul i32 %0, 8, !insn.addr !4249
  %70 = add i32 %0, 1086393365, !insn.addr !4249
  %71 = add i32 %70, %69, !insn.addr !4249
  %72 = inttoptr i32 %71 to i8*, !insn.addr !4249
  %73 = load i8, i8* %72, align 1, !insn.addr !4249
  %74 = trunc i32 %68 to i8
  %75 = add i8 %14, %74, !insn.addr !4249
  %76 = xor i8 %75, %73, !insn.addr !4249
  store i8 %76, i8* %72, align 1, !insn.addr !4249
  ret i32 %8, !insn.addr !4250
}

define i32 @function_40a671() local_unnamed_addr {
dec_label_pc_40a671:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 16, !insn.addr !4251
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4251
  %4 = add i32 %0, 12, !insn.addr !4252
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4252
  %6 = add i32 %0, -94, !insn.addr !4253
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4253
  %8 = add i32 %0, -20, !insn.addr !4254
  %9 = inttoptr i32 %8 to i64*, !insn.addr !4254
  %10 = load i64, i64* %9, align 4, !insn.addr !4254
  %11 = call i32 @__asm_bound(i64 %10), !insn.addr !4254
  ret i32 %1, !insn.addr !4255
}

define i32 @function_40a6b3(i32 %arg1) local_unnamed_addr {
dec_label_pc_40a6b3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4256
}

define i32 @function_40a6ce(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40a6ce:
  %merge.reg2mem = alloca i32, !insn.addr !4257
  %eax.0.reg2mem = alloca i32, !insn.addr !4257
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = load i8, i8* inttoptr (i32 -1951055679 to i8*), align 1, !insn.addr !4257
  %8 = and i32 %5, -256, !insn.addr !4257
  %9 = or i8 %7, -16, !insn.addr !4258
  %10 = zext i8 %9 to i32, !insn.addr !4258
  %11 = or i32 %8, %10, !insn.addr !4258
  %12 = sub i32 %11, %1, !insn.addr !4259
  %13 = icmp eq i32 %12, 0, !insn.addr !4259
  br i1 %13, label %dec_label_pc_40a70e, label %dec_label_pc_40a6dd, !insn.addr !4260

dec_label_pc_40a6dd:                              ; preds = %dec_label_pc_40a6ce
  %14 = icmp slt i32 %12, 0, !insn.addr !4259
  %15 = xor i32 %5, %1, !insn.addr !4259
  %16 = xor i32 %12, %5, !insn.addr !4259
  %17 = and i32 %16, %15, !insn.addr !4259
  %18 = icmp slt i32 %17, 0, !insn.addr !4259
  %19 = inttoptr i32 %0 to i8*, !insn.addr !4261
  store i8 %9, i8* %19, align 1, !insn.addr !4261
  %20 = select i1 %6, i32 -1, i32 1, !insn.addr !4261
  %21 = add i32 %20, %0, !insn.addr !4261
  %22 = add i32 %3, -2051001400, !insn.addr !4262
  %23 = inttoptr i32 %22 to i32*, !insn.addr !4262
  %24 = load i32, i32* %23, align 4, !insn.addr !4262
  %25 = udiv i32 %24, 131072, !insn.addr !4262
  %26 = mul i32 %24, 32768, !insn.addr !4262
  %27 = or i32 %25, %26, !insn.addr !4262
  store i32 %27, i32* %23, align 4, !insn.addr !4262
  %28 = icmp eq i1 %14, %18, !insn.addr !4263
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !4263
  store i32 %11, i32* %merge.reg2mem, !insn.addr !4263
  br i1 %28, label %dec_label_pc_40a6e7, label %dec_label_pc_40a6f4, !insn.addr !4263

dec_label_pc_40a6e7:                              ; preds = %dec_label_pc_40a6dd, %dec_label_pc_40a6e7
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %29 = mul i32 %eax.0.reload, 4, !insn.addr !4264
  %30 = add i32 %21, %29, !insn.addr !4264
  %31 = inttoptr i32 %30 to i32*, !insn.addr !4264
  %32 = load i32, i32* %31, align 4, !insn.addr !4264
  %33 = add i32 %32, %1, !insn.addr !4265
  store i32 %33, i32* %31, align 4, !insn.addr !4266
  %34 = add i32 %eax.0.reload, 1, !insn.addr !4267
  %35 = icmp slt i32 %34, %3, !insn.addr !4268
  store i32 %34, i32* %eax.0.reg2mem, !insn.addr !4268
  store i32 %34, i32* %merge.reg2mem, !insn.addr !4268
  br i1 %35, label %dec_label_pc_40a6e7, label %dec_label_pc_40a6f4, !insn.addr !4268

dec_label_pc_40a6f4:                              ; preds = %dec_label_pc_40a6e7, %dec_label_pc_40a6dd
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !4269

dec_label_pc_40a70e:                              ; preds = %dec_label_pc_40a6ce
  %36 = add i32 %2, 7, !insn.addr !4270
  %37 = inttoptr i32 %36 to i32*, !insn.addr !4270
  store i32 %arg2, i32* %37, align 4, !insn.addr !4270
  %38 = mul i32 %1, 2, !insn.addr !4271
  %39 = add i32 %4, %38, !insn.addr !4271
  %40 = inttoptr i32 %39 to i32*, !insn.addr !4271
  ret i32 %11, !insn.addr !4272
}

define i32 @function_40a715(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40a715:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4273
}

define i32 @function_40a71b(i8 %arg1) local_unnamed_addr {
dec_label_pc_40a71b:
  %.pre-phi.reg2mem = alloca i8, !insn.addr !4274
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %4 = load i32, i32* inttoptr (i32 2101414064 to i32*), align 16, !insn.addr !4275
  %5 = add i32 %3, %0, !insn.addr !4276
  %6 = inttoptr i32 %3 to i32*, !insn.addr !4276
  store i32 %5, i32* %6, align 4, !insn.addr !4276
  store i32 ptrtoint (i32* @global_var_410753 to i32), i32* %stack_var_-8, align 4, !insn.addr !4277
  store i32 148, i32* @global_var_41075b, align 4, !insn.addr !4278
  %7 = add i32 %4, -97, !insn.addr !4279
  %8 = inttoptr i32 %7 to i8*, !insn.addr !4279
  %9 = load i8, i8* %8, align 1, !insn.addr !4279
  %10 = trunc i32 %2 to i8, !insn.addr !4279
  %11 = or i8 %9, %10, !insn.addr !4279
  store i8 %11, i8* %8, align 1, !insn.addr !4279
  %12 = load i8, i8* @global_var_41080c, align 1, !insn.addr !4280
  %13 = icmp eq i8 %12, 0, !insn.addr !4281
  store i8 0, i8* %.pre-phi.reg2mem, !insn.addr !4282
  br i1 %13, label %dec_label_pc_40a773, label %dec_label_pc_40a76c, !insn.addr !4282

dec_label_pc_40a76c:                              ; preds = %dec_label_pc_40a71b
  %14 = add i8 %12, 1, !insn.addr !4283
  %15 = add i32 %1, 251570232, !insn.addr !4284
  %16 = inttoptr i32 %15 to i8*, !insn.addr !4284
  %17 = load i8, i8* %16, align 1, !insn.addr !4284
  %18 = add i8 %17, %14, !insn.addr !4284
  store i8 %18, i8* %16, align 1, !insn.addr !4284
  store i8 %14, i8* %.pre-phi.reg2mem, !insn.addr !4284
  br label %dec_label_pc_40a773, !insn.addr !4284

dec_label_pc_40a773:                              ; preds = %dec_label_pc_40a71b, %dec_label_pc_40a76c
  %19 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !4277
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %20 = inttoptr i32 %2 to i8*, !insn.addr !4285
  %21 = load i8, i8* %20, align 1, !insn.addr !4285
  %22 = add i8 %21, %.pre-phi.reload, !insn.addr !4285
  store i8 %22, i8* %20, align 1, !insn.addr !4285
  %23 = or i32 %19, 2, !insn.addr !4286
  %24 = inttoptr i32 %23 to i16*, !insn.addr !4286
  %25 = add i32 %19, -2, !insn.addr !4287
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4287
  store i32 0, i32* %26, align 4, !insn.addr !4287
  call void @llvm.trap()
  unreachable
}

define i32 @function_40a878() local_unnamed_addr {
dec_label_pc_40a878:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -1577646360, !insn.addr !4288
  %3 = inttoptr i32 %2 to i8*, !insn.addr !4288
  %4 = load i8, i8* %3, align 1, !insn.addr !4288
  %5 = trunc i32 %1 to i8, !insn.addr !4288
  %6 = add i8 %4, %5, !insn.addr !4288
  store i8 %6, i8* %3, align 1, !insn.addr !4288
  store i8 %5, i8* inttoptr (i32 1858110444 to i8*), align 4, !insn.addr !4289
  %7 = call i32 @function_e740a916(), !insn.addr !4290
  ret i32 %7, !insn.addr !4290
}

define i32 @function_40a89e() local_unnamed_addr {
dec_label_pc_40a89e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40a8ba() local_unnamed_addr {
dec_label_pc_40a8ba:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i32*, !insn.addr !4291
  %2 = call i32 @function_40a89e(), !insn.addr !4292
  ret i32 %2, !insn.addr !4292
}

define i32 @function_40a8cc(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40a8cc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %0, 1969325313, !insn.addr !4293
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4293
  %7 = load i32, i32* %6, align 4, !insn.addr !4293
  %8 = add i32 %7, 8, !insn.addr !4293
  store i32 %8, i32* %6, align 4, !insn.addr !4293
  %9 = add i32 %0, 1, !insn.addr !4294
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4294
  %11 = load i32, i32* %10, align 4, !insn.addr !4294
  %12 = sub i32 %11, %4, !insn.addr !4294
  %13 = xor i32 %11, %4, !insn.addr !4294
  %14 = xor i32 %12, %11, !insn.addr !4294
  %15 = and i32 %14, %13, !insn.addr !4294
  %16 = icmp slt i32 %15, 0, !insn.addr !4294
  br i1 %16, label %17, label %dec_label_pc_40a8d8, !insn.addr !4295

; <label>:17:                                     ; preds = %dec_label_pc_40a8cc
  %18 = call i32 @function_40a878(), !insn.addr !4295
  br label %dec_label_pc_40a8d8, !insn.addr !4295

dec_label_pc_40a8d8:                              ; preds = %17, %dec_label_pc_40a8cc
  %19 = add i32 %3, -53, !insn.addr !4296
  %20 = inttoptr i32 %19 to i8*, !insn.addr !4296
  %21 = load i8, i8* %20, align 1, !insn.addr !4296
  %22 = udiv i8 %21, 2, !insn.addr !4296
  store i8 %22, i8* %20, align 1, !insn.addr !4296
  %23 = udiv i32 %2, 256, !insn.addr !4297
  %24 = trunc i32 %23 to i8, !insn.addr !4297
  %25 = add i32 %1, 16, !insn.addr !4297
  %26 = inttoptr i32 %25 to i8*, !insn.addr !4297
  %27 = load i8, i8* %26, align 1, !insn.addr !4297
  %28 = or i8 %27, %24, !insn.addr !4297
  %29 = trunc i32 %1 to i8
  %30 = and i8 %28, %29, !insn.addr !4298
  %31 = inttoptr i32 %1 to i8*, !insn.addr !4298
  store i8 %30, i8* %31, align 1, !insn.addr !4298
  %32 = call i32 @function_40a916(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4299
  ret i32 %32, !insn.addr !4299
}

define i32 @function_40a8f5() local_unnamed_addr {
dec_label_pc_40a8f5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, -19, !insn.addr !4300
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4300
  %6 = load i32, i32* %5, align 4, !insn.addr !4300
  %7 = add i32 %6, -115, !insn.addr !4300
  %8 = icmp ult i32 %6, 115, !insn.addr !4300
  store i32 %7, i32* %5, align 4, !insn.addr !4300
  %9 = add i32 %1, -2134887656, !insn.addr !4301
  %10 = inttoptr i32 %9 to i8*, !insn.addr !4301
  %11 = load i8, i8* %10, align 1, !insn.addr !4301
  %12 = trunc i32 %2 to i8, !insn.addr !4301
  %13 = zext i1 %8 to i8, !insn.addr !4301
  %14 = add i8 %11, %12, !insn.addr !4301
  %15 = add i8 %14, %13, !insn.addr !4301
  store i8 %15, i8* %10, align 1, !insn.addr !4301
  %16 = add i32 %2, 1, !insn.addr !4302
  %17 = xor i32 %2, -2147483648
  %18 = and i32 %16, %17, !insn.addr !4302
  %19 = icmp slt i32 %18, 0, !insn.addr !4302
  %20 = icmp slt i32 %16, 0, !insn.addr !4302
  %21 = icmp eq i1 %20, %19, !insn.addr !4303
  %22 = zext i1 %21 to i32, !insn.addr !4303
  %23 = and i32 %3, -256, !insn.addr !4303
  %24 = or i32 %23, %22, !insn.addr !4303
  %25 = or i32 %24, 14, !insn.addr !4304
  %26 = add i32 %25, %24, !insn.addr !4304
  %27 = and i32 %26, 22, !insn.addr !4305
  %28 = or i32 %27, 137, !insn.addr !4305
  %29 = and i32 %26, -256, !insn.addr !4305
  %30 = or i32 %28, %29, !insn.addr !4305
  %31 = trunc i32 %28 to i8, !insn.addr !4306
  %32 = inttoptr i32 %30 to i8*, !insn.addr !4306
  %33 = load i8, i8* %32, align 1, !insn.addr !4306
  %34 = add i8 %33, %31, !insn.addr !4306
  %35 = zext i8 %34 to i32, !insn.addr !4306
  %36 = or i32 %29, %35, !insn.addr !4306
  %37 = inttoptr i32 %36 to i8*, !insn.addr !4307
  %38 = load i8, i8* %37, align 1, !insn.addr !4307
  %39 = add i8 %34, %38, !insn.addr !4307
  store i8 %39, i8* %37, align 1, !insn.addr !4307
  %40 = call i32 @function_40a916(i32 %0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4308
  ret i32 %40, !insn.addr !4308
}

define i32 @function_40a916(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_40a916:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = inttoptr i32 %1 to i8*, !insn.addr !4309
  store i8* %2, i8** @global_var_4108dc, align 4, !insn.addr !4309
  %3 = add i32 %0, 8, !insn.addr !4310
  %4 = inttoptr i32 %3 to i32*, !insn.addr !4310
  %5 = load i32, i32* %4, align 4, !insn.addr !4310
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4311
  %7 = inttoptr i32 %arg1 to i32*, !insn.addr !4312
  %8 = add i32 %5, 826812829, !insn.addr !4313
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4313
  %10 = load i32, i32* %9, align 4, !insn.addr !4313
  %11 = add i32 %10, %1, !insn.addr !4313
  store i32 %11, i32* %9, align 4, !insn.addr !4313
  %12 = inttoptr i32 %arg3 to i32*, !insn.addr !4314
  %13 = load i32, i32* %12, align 4, !insn.addr !4314
  %14 = inttoptr i32 %arg2 to i32*, !insn.addr !4314
  store i32 %13, i32* %14, align 4, !insn.addr !4314
  ret i32 %arg8, !insn.addr !4315
}

define i32 @function_40a940(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_40a940:
  %merge.reg2mem = alloca i32, !insn.addr !4316
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i8 @__decompiler_undefined_function_5()
  %5 = add i32 %3, -117, !insn.addr !4317
  %6 = inttoptr i32 %5 to i16*, !insn.addr !4317
  %7 = load i16, i16* %6, align 2, !insn.addr !4317
  %8 = trunc i32 %2 to i16, !insn.addr !4317
  call void @__asm_arpl(i16 %7, i16 %8), !insn.addr !4317
  %9 = call i8 @__asm_in.7(i8 8), !insn.addr !4318
  %10 = sub i8 0, %4
  %11 = sub i8 %10, 1
  %12 = icmp ugt i8 %9, %11, !insn.addr !4319
  %13 = call i32 @__asm_hlt(), !insn.addr !4320
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4321
  %15 = load i32, i32* %14, align 4, !insn.addr !4321
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4322
  %17 = load i32, i32* %16, align 4, !insn.addr !4322
  %18 = add i32 %17, 1, !insn.addr !4322
  store i32 %18, i32* %16, align 4, !insn.addr !4322
  %19 = select i1 %12, i32 255, i32 0, !insn.addr !4323
  %20 = and i32 %15, -256, !insn.addr !4323
  %21 = or i32 %20, %19, !insn.addr !4323
  %22 = add i32 %21, 1, !insn.addr !4324
  %23 = mul i32 %22, 8, !insn.addr !4325
  %24 = add i32 %21, -118, !insn.addr !4325
  %25 = add i32 %24, %23, !insn.addr !4325
  %26 = inttoptr i32 %25 to i8*, !insn.addr !4325
  %27 = load i8, i8* %26, align 1, !insn.addr !4325
  %28 = trunc i32 %1 to i8, !insn.addr !4325
  %29 = add i8 %27, %28, !insn.addr !4325
  %30 = icmp eq i8 %29, 0, !insn.addr !4325
  store i8 %29, i8* %26, align 1, !insn.addr !4325
  %31 = icmp eq i1 %30, false, !insn.addr !4326
  store i32 %22, i32* %merge.reg2mem, !insn.addr !4326
  br i1 %31, label %dec_label_pc_40a970, label %dec_label_pc_40a96d, !insn.addr !4326

dec_label_pc_40a96d:                              ; preds = %dec_label_pc_40a970, %48, %43, %dec_label_pc_40a940
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !4327

dec_label_pc_40a970:                              ; preds = %dec_label_pc_40a940
  %32 = icmp eq i32 %arg1, 0, !insn.addr !4328
  store i32 0, i32* %merge.reg2mem, !insn.addr !4329
  br i1 %32, label %dec_label_pc_40a96d, label %dec_label_pc_40a977, !insn.addr !4329

dec_label_pc_40a977:                              ; preds = %dec_label_pc_40a970
  %33 = add i32 %0, -1, !insn.addr !4330
  %34 = and i32 %0, 15, !insn.addr !4330
  %35 = add nsw i32 %34, -1, !insn.addr !4330
  %36 = icmp ugt i32 %35, 15, !insn.addr !4330
  %37 = inttoptr i32 %0 to i32*, !insn.addr !4330
  store i32 %33, i32* %37, align 4, !insn.addr !4330
  %38 = trunc i32 %arg1 to i8, !insn.addr !4331
  %39 = and i8 %38, 14, !insn.addr !4331
  %40 = icmp ugt i8 %39, 9, !insn.addr !4331
  %41 = or i1 %40, %36, !insn.addr !4331
  %42 = icmp ugt i8 %38, -103
  br i1 %41, label %43, label %48, !insn.addr !4331

; <label>:43:                                     ; preds = %dec_label_pc_40a977
  %.v = select i1 %42, i32 102, i32 6
  %44 = add i32 %.v, %arg1, !insn.addr !4331
  %45 = and i32 %44, 255, !insn.addr !4331
  %46 = and i32 %arg1, -256, !insn.addr !4331
  %47 = or i32 %45, %46, !insn.addr !4331
  store i32 %47, i32* %merge.reg2mem, !insn.addr !4331
  br label %dec_label_pc_40a96d, !insn.addr !4331

; <label>:48:                                     ; preds = %dec_label_pc_40a977
  %49 = add i32 %arg1, 96, !insn.addr !4331
  %50 = select i1 %42, i32 %49, i32 %arg1, !insn.addr !4331
  %51 = and i32 %50, 255, !insn.addr !4331
  %52 = and i32 %arg1, -256, !insn.addr !4331
  %53 = or i32 %51, %52, !insn.addr !4331
  store i32 %53, i32* %merge.reg2mem, !insn.addr !4331
  br label %dec_label_pc_40a96d, !insn.addr !4331
}

define i32 @function_40a9bb() local_unnamed_addr {
dec_label_pc_40a9bb:
  %0 = call i32 @__asm_in.2(i32 93), !insn.addr !4332
  ret i32 %0, !insn.addr !4333
}

define i32 @function_40a9c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40a9c0:
  %eax.0.reg2mem = alloca i32, !insn.addr !4334
  %edx.0.reg2mem = alloca i32, !insn.addr !4334
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %2, -1, !insn.addr !4335
  %6 = add i32 %1, 7, !insn.addr !4336
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4336
  %8 = load i32, i32* %7, align 4, !insn.addr !4336
  %9 = trunc i32 %8 to i8, !insn.addr !4337
  %10 = icmp eq i8 %9, 0, !insn.addr !4337
  %11 = trunc i32 %5 to i16, !insn.addr !4338
  %12 = call i32 @__asm_in(i16 %11), !insn.addr !4338
  %13 = icmp eq i1 %10, false, !insn.addr !4339
  store i32 %5, i32* %edx.0.reg2mem, !insn.addr !4339
  br i1 %13, label %dec_label_pc_40a9e0, label %dec_label_pc_40a9d8, !insn.addr !4339

dec_label_pc_40a9d8:                              ; preds = %dec_label_pc_40a9c0
  %14 = icmp slt i8 %9, 0, !insn.addr !4337
  br i1 %14, label %dec_label_pc_40a9f3, label %dec_label_pc_40a9da, !insn.addr !4340

dec_label_pc_40a9da:                              ; preds = %dec_label_pc_40a9d8
  %15 = select i1 %4, i32 -1, i32 1, !insn.addr !4341
  %16 = add i32 %15, %0, !insn.addr !4341
  %17 = add i32 %2, -2, !insn.addr !4342
  %18 = inttoptr i32 %16 to i32*, !insn.addr !4343
  store i32 %17, i32* %18, align 4, !insn.addr !4343
  %19 = add i32 %3, -1, !insn.addr !4344
  store i32 %19, i32* %edx.0.reg2mem, !insn.addr !4344
  br label %dec_label_pc_40a9e0, !insn.addr !4344

dec_label_pc_40a9e0:                              ; preds = %dec_label_pc_40a9da, %dec_label_pc_40a9c0
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %20 = inttoptr i32 %3 to i32*, !insn.addr !4345
  store i32 %edx.0.reload, i32* %20, align 4, !insn.addr !4345
  %21 = call i32 @function_8342339f(), !insn.addr !4346
  ret i32 %21, !insn.addr !4346

dec_label_pc_40a9f3:                              ; preds = %dec_label_pc_40a9d8
  %22 = call i8 @__asm_in.7(i8 0), !insn.addr !4347
  %23 = sext i8 %22 to i32, !insn.addr !4347
  %24 = and i32 %12, -256, !insn.addr !4347
  %25 = or i32 %24, %23, !insn.addr !4347
  %26 = add i32 %1, -17, !insn.addr !4348
  %27 = inttoptr i32 %26 to i32*, !insn.addr !4348
  store i32 %5, i32* %27, align 4, !insn.addr !4348
  %28 = add i32 %25, 1982907438, !insn.addr !4349
  %29 = icmp eq i32 %28, 0, !insn.addr !4349
  %30 = add i32 %1, -21, !insn.addr !4350
  %31 = inttoptr i32 %30 to i32*, !insn.addr !4350
  store i32 %28, i32* %31, align 4, !insn.addr !4350
  %32 = icmp eq i1 %29, false, !insn.addr !4351
  store i32 %28, i32* %eax.0.reg2mem, !insn.addr !4351
  br i1 %32, label %dec_label_pc_40aa58, label %dec_label_pc_40aa24, !insn.addr !4351

dec_label_pc_40aa24:                              ; preds = %dec_label_pc_40a9f3
  %33 = trunc i32 %28 to i8, !insn.addr !4352
  %34 = add i8 %33, -45, !insn.addr !4352
  %35 = icmp eq i8 %34, 0, !insn.addr !4352
  %36 = zext i8 %34 to i32, !insn.addr !4352
  %37 = and i32 %28, -256, !insn.addr !4352
  %38 = or i32 %37, %36, !insn.addr !4352
  %39 = icmp eq i1 %35, false, !insn.addr !4353
  store i32 %38, i32* %eax.0.reg2mem, !insn.addr !4353
  br i1 %39, label %dec_label_pc_40aa58, label %dec_label_pc_40aa28, !insn.addr !4353

dec_label_pc_40aa28:                              ; preds = %dec_label_pc_40aa24
  %40 = add i32 %1, -1, !insn.addr !4354
  %41 = and i32 %25, 1192987360, !insn.addr !4355
  %42 = call i32 @function_40b810(), !insn.addr !4356
  %43 = or i32 %41, %40, !insn.addr !4357
  %44 = icmp eq i32 %43, 0, !insn.addr !4357
  %45 = load i8, i8* inttoptr (i32 1971913726 to i8*), align 2, !insn.addr !4358
  %46 = mul i8 %45, 2, !insn.addr !4358
  %47 = lshr i8 %45, 7, !insn.addr !4358
  %48 = or i8 %47, %46, !insn.addr !4358
  store i8 %48, i8* inttoptr (i32 1971913726 to i8*), align 2, !insn.addr !4358
  %49 = icmp ne i8 %47, 0, !insn.addr !4358
  %50 = or i1 %44, %49, !insn.addr !4359
  store i32 22, i32* %eax.0.reg2mem, !insn.addr !4359
  br i1 %50, label %dec_label_pc_40aa43, label %dec_label_pc_40aa58, !insn.addr !4359

dec_label_pc_40aa43:                              ; preds = %dec_label_pc_40aa28
  %51 = add i32 %43, -59, !insn.addr !4360
  %52 = inttoptr i32 %51 to i32*, !insn.addr !4360
  %53 = load i32, i32* %52, align 4, !insn.addr !4360
  %54 = select i1 %49, i32 78, i32 77, !insn.addr !4361
  %55 = add i32 %53, %54, !insn.addr !4361
  %56 = and i32 %55, 255, !insn.addr !4361
  %57 = and i32 %53, -256, !insn.addr !4361
  %58 = or i32 %56, %57, !insn.addr !4361
  ret i32 %58, !insn.addr !4361

dec_label_pc_40aa58:                              ; preds = %dec_label_pc_40aa28, %dec_label_pc_40aa24, %dec_label_pc_40a9f3
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4362
}

define i32 @function_40ab09() local_unnamed_addr {
dec_label_pc_40ab09:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i16, !insn.addr !4363
  %4 = call i32 @__asm_insd(i16 %3), !insn.addr !4363
  %5 = inttoptr i32 %0 to i32*, !insn.addr !4363
  store i32 %4, i32* %5, align 4, !insn.addr !4363
  ret i32 %2, !insn.addr !4364
}

define i32 @function_40ab0d(i32 %arg1) local_unnamed_addr {
dec_label_pc_40ab0d:
  %ecx.0.reg2mem = alloca i32, !insn.addr !4365
  %.reg2mem8 = alloca i32, !insn.addr !4365
  %.reg2mem6 = alloca i8, !insn.addr !4365
  %.reg2mem = alloca i32, !insn.addr !4365
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  br i1 %5, label %dec_label_pc_40ab4e, label %dec_label_pc_40ab5e, !insn.addr !4365

dec_label_pc_40ab4e:                              ; preds = %dec_label_pc_40ab0d
  %7 = call i32 @__asm_hlt(), !insn.addr !4366
  %8 = zext i1 %6 to i32, !insn.addr !4367
  %9 = add i32 %2, %8, !insn.addr !4367
  %10 = add i32 %9, %7, !insn.addr !4367
  %11 = and i32 %10, 255, !insn.addr !4367
  %12 = and i32 %7, -256, !insn.addr !4367
  %13 = or i32 %11, %12, !insn.addr !4367
  %14 = add i32 %1, 12, !insn.addr !4368
  %15 = inttoptr i32 %14 to i32*, !insn.addr !4368
  %16 = load i32, i32* %15, align 4, !insn.addr !4368
  %17 = inttoptr i32 %16 to i32*, !insn.addr !4369
  store i32 %13, i32* %17, align 4, !insn.addr !4369
  ret i32 %13, !insn.addr !4369

dec_label_pc_40ab5e:                              ; preds = %dec_label_pc_40ab0d
  %18 = trunc i32 %4 to i8
  %19 = trunc i32 %3 to i8, !insn.addr !4370
  %20 = and i8 %19, 31, !insn.addr !4370
  %21 = icmp eq i8 %20, 0, !insn.addr !4370
  store i8 %18, i8* %.reg2mem6, !insn.addr !4370
  br i1 %21, label %dec_label_pc_40ab5e._crit_edge, label %22, !insn.addr !4370

; <label>:22:                                     ; preds = %dec_label_pc_40ab5e
  %23 = add i32 %1, -127, !insn.addr !4370
  %24 = inttoptr i32 %23 to i8*, !insn.addr !4370
  %25 = load i8, i8* %24, align 1, !insn.addr !4370
  %26 = ashr i8 %25, %20, !insn.addr !4370
  store i8 %26, i8* %24, align 1, !insn.addr !4370
  %.phi.trans.insert = bitcast i32* %eax to i8*
  %.pre = load i8, i8* %.phi.trans.insert, align 4
  %.pre3 = load i32, i32* %eax, align 4
  store i32 %.pre3, i32* %.reg2mem, !insn.addr !4370
  store i8 %.pre, i8* %.reg2mem6, !insn.addr !4370
  br label %dec_label_pc_40ab5e._crit_edge, !insn.addr !4370

dec_label_pc_40ab5e._crit_edge:                   ; preds = %dec_label_pc_40ab5e, %22
  %.reload7 = load i8, i8* %.reg2mem6, !insn.addr !4371
  %.reload = load i32, i32* %.reg2mem, !insn.addr !4371
  %27 = add i8 %.reload7, 1, !insn.addr !4371
  %28 = inttoptr i32 %.reload to i8*, !insn.addr !4371
  store i8 %27, i8* %28, align 1, !insn.addr !4371
  %29 = add i32 %0, 20, !insn.addr !4372
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4372
  %31 = load i32, i32* %30, align 4, !insn.addr !4372
  %32 = load i32, i32* %eax, align 4
  %33 = add i32 %32, -1, !insn.addr !4373
  %34 = inttoptr i32 %32 to i32*, !insn.addr !4374
  store i32 %33, i32* %34, align 4, !insn.addr !4374
  %35 = add i32 %31, 16, !insn.addr !4375
  %36 = inttoptr i32 %35 to i32*, !insn.addr !4375
  %37 = load i32, i32* %36, align 4, !insn.addr !4375
  %38 = inttoptr i32 %37 to i32*, !insn.addr !4376
  %39 = load i32, i32* %38, align 4, !insn.addr !4376
  %40 = icmp ugt i32 %0, 14090208, !insn.addr !4377
  %41 = select i1 %40, i32 103, i32 102, !insn.addr !4378
  %42 = add i32 %3, %41, !insn.addr !4378
  %43 = and i32 %arg1, 1, !insn.addr !4379
  %44 = icmp ne i32 %43, 0, !insn.addr !4379
  %45 = add i32 %39, -1177908386, !insn.addr !4380
  %46 = inttoptr i32 %45 to i8*, !insn.addr !4380
  %47 = load i8, i8* %46, align 1, !insn.addr !4380
  %48 = trunc i32 %42 to i8, !insn.addr !4380
  %.neg = sext i1 %44 to i8
  %.neg2 = sub i8 %.neg, %48, !insn.addr !4380
  %49 = add i8 %.neg2, %47, !insn.addr !4380
  store i8 %49, i8* %46, align 1, !insn.addr !4380
  %50 = trunc i32 %37 to i8, !insn.addr !4381
  %51 = inttoptr i32 %37 to i8*, !insn.addr !4381
  %52 = load i8, i8* %51, align 1, !insn.addr !4381
  %53 = or i8 %52, %50, !insn.addr !4381
  %54 = zext i8 %53 to i32, !insn.addr !4381
  %55 = and i32 %37, -256, !insn.addr !4381
  %56 = or i32 %55, %54, !insn.addr !4381
  store i32 %56, i32* %eax, align 4, !insn.addr !4381
  %57 = and i32 %42, 65280, !insn.addr !4382
  %58 = add i32 %33, %57
  %59 = and i32 %58, 65280, !insn.addr !4382
  %60 = and i32 %42, -65281, !insn.addr !4382
  %61 = or i32 %59, %60, !insn.addr !4382
  %62 = add i32 %0, -14090208, !insn.addr !4383
  %63 = icmp slt i32 %62, 0, !insn.addr !4383
  %64 = icmp eq i1 %63, false, !insn.addr !4384
  store i32 %56, i32* %.reg2mem8, !insn.addr !4384
  store i32 %61, i32* %ecx.0.reg2mem, !insn.addr !4384
  br i1 %64, label %dec_label_pc_40aba1, label %dec_label_pc_40ab95, !insn.addr !4384

dec_label_pc_40ab95:                              ; preds = %dec_label_pc_40ab5e._crit_edge
  %65 = inttoptr i32 %56 to i8*, !insn.addr !4385
  %66 = load i8, i8* %65, align 1, !insn.addr !4385
  %67 = add i8 %66, %53, !insn.addr !4385
  store i8 %67, i8* %65, align 1, !insn.addr !4385
  %68 = load i32, i32* %eax, align 4, !insn.addr !4386
  %69 = and i32 %68, 65535, !insn.addr !4386
  %70 = and i32 %42, -65536, !insn.addr !4386
  %71 = or i32 %69, %70, !insn.addr !4386
  %72 = add i32 %31, 5, !insn.addr !4387
  %73 = inttoptr i32 %72 to i32*, !insn.addr !4387
  %74 = load i32, i32* %73, align 4, !insn.addr !4387
  store i32 %74, i32* %eax, align 4, !insn.addr !4387
  call void @__asm_int(i32 95), !insn.addr !4388
  store i32 %74, i32* %.reg2mem8, !insn.addr !4389
  store i32 %71, i32* %ecx.0.reg2mem, !insn.addr !4389
  br label %dec_label_pc_40aba1, !insn.addr !4389

dec_label_pc_40aba1:                              ; preds = %dec_label_pc_40ab95, %dec_label_pc_40ab5e._crit_edge
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.reload9 = load i32, i32* %.reg2mem8, !insn.addr !4390
  %75 = trunc i32 %.reload9 to i8, !insn.addr !4390
  call void @__asm_out(i32 255, i8 %75), !insn.addr !4390
  %76 = call i32 @__asm_iretd(), !insn.addr !4391
  %77 = add i32 %ecx.0.reload, 46170888, !insn.addr !4392
  %78 = inttoptr i32 %77 to i8*, !insn.addr !4392
  %79 = load i8, i8* %78, align 1, !insn.addr !4392
  %80 = trunc i32 %ecx.0.reload to i8, !insn.addr !4392
  %81 = add i8 %79, %80, !insn.addr !4392
  store i8 %81, i8* %78, align 1, !insn.addr !4392
  %82 = or i32 %62, 2219008, !insn.addr !4393
  %83 = call i32 @__asm_wait(), !insn.addr !4394
  %84 = add nsw i32 %82, -2, !insn.addr !4395
  %85 = inttoptr i32 %83 to i32*, !insn.addr !4395
  store i32 %84, i32* %85, align 4, !insn.addr !4395
  store i32 %83, i32* %36, align 4, !insn.addr !4396
  %86 = or i32 %83, 139, !insn.addr !4397
  ret i32 %86, !insn.addr !4398
}

define i32 @function_40abca() local_unnamed_addr {
dec_label_pc_40abca:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4399
}

define i32 @function_40abcd(i32 %arg1) local_unnamed_addr {
dec_label_pc_40abcd:
  %0 = call i32 @__asm_in.2(i32 93), !insn.addr !4400
  ret i32 %0, !insn.addr !4401
}

define i32 @function_40abd4() local_unnamed_addr {
dec_label_pc_40abd4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = load i8, i8* inttoptr (i32 -1588302199 to i8*), align 1, !insn.addr !4402
  %3 = trunc i32 %1 to i8, !insn.addr !4402
  %4 = add i8 %2, %3, !insn.addr !4402
  store i8 %4, i8* inttoptr (i32 -1588302199 to i8*), align 1, !insn.addr !4402
  %5 = call i32 @function_aecd3a8b(i32 %0, i32 %0), !insn.addr !4403
  ret i32 %5, !insn.addr !4403
}

define i32 @function_40ac02(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40ac02:
  %eax.0.reg2mem = alloca i32, !insn.addr !4404
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = icmp eq i1 %4, false, !insn.addr !4405
  br i1 %6, label %dec_label_pc_40ac13, label %dec_label_pc_40ac05, !insn.addr !4405

dec_label_pc_40ac05:                              ; preds = %dec_label_pc_40ac13, %dec_label_pc_40ac02
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4406

dec_label_pc_40ac13:                              ; preds = %dec_label_pc_40ac02
  %7 = zext i1 %5 to i32, !insn.addr !4407
  %8 = add i32 %3, 131, !insn.addr !4407
  %9 = add i32 %8, %7, !insn.addr !4407
  %10 = and i32 %9, 255, !insn.addr !4407
  %11 = and i32 %3, -256, !insn.addr !4407
  %12 = or i32 %10, %11, !insn.addr !4407
  %13 = inttoptr i32 %12 to i8*, !insn.addr !4408
  %14 = load i8, i8* %13, align 1, !insn.addr !4408
  %15 = trunc i32 %9 to i8, !insn.addr !4408
  %16 = icmp eq i8 %14, %15, !insn.addr !4408
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !4409
  br i1 %16, label %dec_label_pc_40ac05, label %dec_label_pc_40ac1b, !insn.addr !4409

dec_label_pc_40ac1b:                              ; preds = %dec_label_pc_40ac13
  %17 = add i32 %0, 9, !insn.addr !4410
  %18 = inttoptr i32 %17 to i32*, !insn.addr !4410
  %19 = load i32, i32* %18, align 4, !insn.addr !4410
  %20 = inttoptr i32 %19 to i16*, !insn.addr !4411
  %21 = load i16, i16* %20, align 2, !insn.addr !4411
  %22 = add i32 %1, 1326894088, !insn.addr !4412
  %23 = inttoptr i32 %22 to i32*, !insn.addr !4412
  %24 = inttoptr i32 %2 to i32*, !insn.addr !4413
  %25 = add i32 %12, 1160658952, !insn.addr !4414
  %26 = inttoptr i32 %25 to i8*, !insn.addr !4414
  %27 = load i8, i8* %26, align 1, !insn.addr !4414
  %28 = zext i8 %27 to i32, !insn.addr !4414
  %29 = and i16 %21, -256
  %30 = zext i16 %29 to i32, !insn.addr !4414
  %31 = or i32 %28, %30, !insn.addr !4414
  %32 = add i32 %12, 18114, !insn.addr !4415
  %33 = inttoptr i32 %32 to i8*, !insn.addr !4415
  %34 = load i8, i8* %33, align 1, !insn.addr !4415
  %35 = add i8 %27, 1, !insn.addr !4415
  %36 = add i8 %35, %34, !insn.addr !4415
  store i8 %36, i8* %33, align 1, !insn.addr !4415
  %37 = and i32 %31, 64573, !insn.addr !4416
  %38 = inttoptr i32 %37 to i8*, !insn.addr !4417
  %39 = load i8, i8* %38, align 1, !insn.addr !4417
  %40 = trunc i32 %37 to i8, !insn.addr !4417
  %41 = add i8 %39, %40, !insn.addr !4417
  store i8 %41, i8* %38, align 1, !insn.addr !4417
  ret i32 %31, !insn.addr !4418
}

define i32 @function_40acaf() local_unnamed_addr {
dec_label_pc_40acaf:
  %.pre-phi.reg2mem = alloca i8, !insn.addr !4419
  %eax.1.reg2mem = alloca i32, !insn.addr !4419
  %eax.0.reg2mem = alloca i32, !insn.addr !4419
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %4 to i8
  %6 = mul i8 %5, 2, !insn.addr !4420
  %7 = inttoptr i32 %4 to i8*, !insn.addr !4420
  store i8 %6, i8* %7, align 1, !insn.addr !4420
  %8 = udiv i32 %3, 256, !insn.addr !4421
  %9 = add i32 %4, %8, !insn.addr !4421
  %10 = and i32 %9, 255, !insn.addr !4421
  %11 = and i32 %4, -256, !insn.addr !4421
  %12 = or i32 %10, %11, !insn.addr !4421
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4422
  %14 = load i32, i32* %13, align 4, !insn.addr !4422
  %15 = or i32 %14, %12, !insn.addr !4422
  %16 = add i32 %2, 114376, !insn.addr !4423
  %17 = inttoptr i32 %16 to i8*, !insn.addr !4423
  %18 = load i8, i8* %17, align 1, !insn.addr !4423
  %19 = trunc i32 %3 to i8, !insn.addr !4423
  %20 = add i8 %18, %19, !insn.addr !4423
  store i8 %20, i8* %17, align 1, !insn.addr !4423
  %21 = inttoptr i32 %15 to i8*, !insn.addr !4424
  %22 = load i8, i8* %21, align 1, !insn.addr !4424
  %23 = trunc i32 %2 to i8, !insn.addr !4424
  %24 = add i8 %22, %23, !insn.addr !4424
  store i8 %24, i8* %21, align 1, !insn.addr !4424
  %25 = or i32 %3, %0, !insn.addr !4425
  %26 = icmp eq i32 %25, 0, !insn.addr !4425
  store i32 %15, i32* %eax.1.reg2mem, !insn.addr !4426
  store i8 0, i8* %.pre-phi.reg2mem, !insn.addr !4426
  br i1 %26, label %dec_label_pc_40acd7, label %dec_label_pc_40acc6.preheader, !insn.addr !4426

dec_label_pc_40acc6.preheader:                    ; preds = %dec_label_pc_40acaf
  %27 = add i32 %2, -32800824, !insn.addr !4427
  %28 = inttoptr i32 %27 to i8*, !insn.addr !4427
  %29 = trunc i32 %25 to i8
  store i32 %15, i32* %eax.0.reg2mem
  br label %dec_label_pc_40acc6

dec_label_pc_40acc6:                              ; preds = %dec_label_pc_40acc6.preheader, %dec_label_pc_40acc6
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %30 = load i8, i8* inttoptr (i32 -402653184 to i8*), align 134217728, !insn.addr !4428
  %31 = trunc i32 %eax.0.reload to i8, !insn.addr !4428
  %32 = and i8 %30, %31, !insn.addr !4428
  store i8 %32, i8* inttoptr (i32 -402653184 to i8*), align 134217728, !insn.addr !4428
  %33 = add i32 %eax.0.reload, 1, !insn.addr !4429
  %34 = inttoptr i32 %33 to i32*, !insn.addr !4430
  %35 = load i32, i32* %34, align 4, !insn.addr !4430
  %36 = or i32 %35, %33, !insn.addr !4430
  %37 = load i8, i8* %28, align 1, !insn.addr !4427
  %38 = add i8 %37, %29, !insn.addr !4427
  %39 = icmp eq i8 %38, 0, !insn.addr !4427
  store i8 %38, i8* %28, align 1, !insn.addr !4427
  %40 = icmp eq i1 %39, false, !insn.addr !4431
  store i32 %36, i32* %eax.0.reg2mem, !insn.addr !4431
  store i32 %36, i32* %eax.1.reg2mem, !insn.addr !4431
  store i8 %29, i8* %.pre-phi.reg2mem, !insn.addr !4431
  br i1 %40, label %dec_label_pc_40acc6, label %dec_label_pc_40acd7, !insn.addr !4431

dec_label_pc_40acd7:                              ; preds = %dec_label_pc_40acc6, %dec_label_pc_40acaf
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %41 = or i32 %eax.1.reload, %2, !insn.addr !4432
  %42 = trunc i32 %eax.1.reload to i8, !insn.addr !4433
  %43 = add i32 %eax.1.reload, 59, !insn.addr !4433
  %44 = icmp ugt i8 %42, -60, !insn.addr !4433
  %45 = and i32 %43, 255, !insn.addr !4433
  %46 = and i32 %eax.1.reload, -256, !insn.addr !4433
  %47 = or i32 %45, %46, !insn.addr !4433
  %48 = zext i1 %44 to i32, !insn.addr !4434
  %49 = add i32 %25, %0, !insn.addr !4434
  %50 = add i32 %49, %48, !insn.addr !4434
  %51 = inttoptr i32 %0 to i32*, !insn.addr !4434
  store i32 %50, i32* %51, align 4, !insn.addr !4434
  %52 = add i32 %25, -1193204225, !insn.addr !4435
  %53 = inttoptr i32 %52 to i32*, !insn.addr !4435
  %54 = load i32, i32* %53, align 4, !insn.addr !4435
  %55 = xor i32 %54, 2, !insn.addr !4435
  store i32 %55, i32* %53, align 4, !insn.addr !4435
  %56 = inttoptr i32 %47 to i8*, !insn.addr !4436
  %57 = load i8, i8* %56, align 1, !insn.addr !4436
  %58 = trunc i32 %43 to i8, !insn.addr !4436
  %59 = add i8 %57, %58, !insn.addr !4436
  store i8 %59, i8* %56, align 1, !insn.addr !4436
  %60 = add i32 %41, -969208747, !insn.addr !4437
  %61 = inttoptr i32 %60 to i8*, !insn.addr !4437
  %62 = load i8, i8* %61, align 1, !insn.addr !4437
  %63 = add i8 %62, %.pre-phi.reload, !insn.addr !4437
  store i8 %63, i8* %61, align 1, !insn.addr !4437
  %64 = add i32 %25, -4, !insn.addr !4438
  %65 = inttoptr i32 %64 to i32*, !insn.addr !4438
  %66 = load i32, i32* %65, align 4, !insn.addr !4438
  %67 = icmp uge i32 %1, %0, !insn.addr !4439
  %68 = inttoptr i32 %41 to i32*, !insn.addr !4440
  %69 = load i32, i32* %68, align 4, !insn.addr !4440
  %70 = zext i1 %67 to i32
  %71 = add i32 %69, %70, !insn.addr !4440
  store i32 %71, i32* %68, align 4, !insn.addr !4440
  %72 = add i32 %47, -1, !insn.addr !4441
  store i32 %72, i32* inttoptr (i32 -1646659639 to i32*), align 4, !insn.addr !4442
  %73 = add i32 %66, 20, !insn.addr !4443
  %74 = inttoptr i32 %73 to i32*, !insn.addr !4443
  %75 = load i32, i32* %74, align 4, !insn.addr !4443
  %76 = mul i32 %41, 277460995, !insn.addr !4444
  %77 = mul i32 %41, 554921990, !insn.addr !4445
  %78 = and i32 %77, 254, !insn.addr !4445
  %79 = and i32 %76, -256, !insn.addr !4445
  %80 = or i32 %79, %78, !insn.addr !4445
  %81 = add i32 %80, -1, !insn.addr !4446
  %82 = add i32 %66, -4, !insn.addr !4447
  %83 = inttoptr i32 %82 to i32*, !insn.addr !4447
  store i32 %75, i32* %83, align 4, !insn.addr !4447
  %84 = call i32 @__asm_int3(), !insn.addr !4448
  %85 = and i32 %84, 255, !insn.addr !4449
  %86 = add i32 %85, %41, !insn.addr !4449
  %87 = inttoptr i32 %86 to i8*, !insn.addr !4449
  %88 = load i8, i8* %87, align 1, !insn.addr !4449
  %89 = zext i8 %88 to i32, !insn.addr !4449
  %90 = and i32 %84, -256, !insn.addr !4449
  %91 = inttoptr i32 %81 to i8*, !insn.addr !4450
  store i8 %88, i8* %91, align 1, !insn.addr !4450
  %92 = add i32 %41, %89, !insn.addr !4451
  %93 = inttoptr i32 %92 to i8*, !insn.addr !4451
  %94 = load i8, i8* %93, align 1, !insn.addr !4451
  %95 = zext i8 %94 to i32, !insn.addr !4451
  %96 = or i32 %90, %95, !insn.addr !4451
  ret i32 %96, !insn.addr !4452
}

define i32 @function_40ad32(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40ad32:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @unknown_a4b810(), !insn.addr !4453
  %2 = add i32 %0, -4, !insn.addr !4454
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4454
  %4 = load i32, i32* %3, align 4, !insn.addr !4454
  %5 = or i32 %4, %1
  %6 = trunc i32 %5 to i8, !insn.addr !4455
  %7 = icmp slt i8 %6, 0, !insn.addr !4455
  %8 = icmp eq i1 %7, false, !insn.addr !4456
  br i1 %8, label %dec_label_pc_40ada9, label %dec_label_pc_40ad50, !insn.addr !4456

dec_label_pc_40ad50:                              ; preds = %dec_label_pc_40ad32
  %9 = and i32 %4, 255
  %10 = or i32 %9, %1, !insn.addr !4455
  %11 = add i32 %10, 1589675266, !insn.addr !4457
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4457
  %13 = load i32, i32* %12, align 4, !insn.addr !4457
  %14 = add i32 %13, -1, !insn.addr !4457
  store i32 %14, i32* %12, align 4, !insn.addr !4457
  %15 = call i32 @__asm_iretd(), !insn.addr !4458
  %16 = udiv i32 %15, 256, !insn.addr !4459
  %17 = mul nuw nsw i32 %16, 39, !insn.addr !4459
  %18 = add i32 %17, %15, !insn.addr !4459
  %19 = and i32 %18, 255, !insn.addr !4459
  %20 = and i32 %15, -65536, !insn.addr !4459
  %21 = or i32 %19, %20, !insn.addr !4459
  ret i32 %21, !insn.addr !4460

dec_label_pc_40ada9:                              ; preds = %dec_label_pc_40ad32
  ret i32 %4, !insn.addr !4461
}

define i32 @function_40adab() local_unnamed_addr {
dec_label_pc_40adab:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call x86_fp80 @__decompiler_undefined_function_4()
  %4 = add i32 %0, 273505646, !insn.addr !4462
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4462
  %6 = load i32, i32* %5, align 4, !insn.addr !4462
  %7 = fptosi x86_fp80 %3 to i32, !insn.addr !4463
  %8 = mul i32 %1, 2, !insn.addr !4463
  %9 = add i32 %2, %8, !insn.addr !4463
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4463
  store i32 %7, i32* %10, align 4, !insn.addr !4463
  %11 = inttoptr i32 %6 to i32*, !insn.addr !4464
  %12 = add i32 %6, -4, !insn.addr !4465
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4465
  %14 = call i32 @unknown_3340add0(), !insn.addr !4466
  ret i32 %14, !insn.addr !4467
}

define i32 @function_40adec(i32 %arg1) local_unnamed_addr {
dec_label_pc_40adec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4468
}

define i32 @function_40adf9() local_unnamed_addr {
dec_label_pc_40adf9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40ae14() local_unnamed_addr {
dec_label_pc_40ae14:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -1199042475, !insn.addr !4469
  %3 = inttoptr i32 %2 to i8*, !insn.addr !4469
  %4 = load i8, i8* %3, align 1, !insn.addr !4469
  %5 = trunc i32 %0 to i8, !insn.addr !4469
  %6 = xor i8 %4, %5, !insn.addr !4469
  store i8 %6, i8* %3, align 1, !insn.addr !4469
  %7 = call i32 @function_40ae21(), !insn.addr !4470
  ret i32 %7, !insn.addr !4470
}

define i32 @function_40ae1d() local_unnamed_addr {
dec_label_pc_40ae1d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4471
}

define i32 @function_40ae21() local_unnamed_addr {
dec_label_pc_40ae21:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 16, !insn.addr !4472
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4472
  %4 = load i32, i32* %3, align 4, !insn.addr !4472
  %.lhs.trunc = trunc i32 %4 to i8
  %5 = udiv i8 %.lhs.trunc, 10
  %6 = urem i8 %.lhs.trunc, 10
  %7 = add nuw nsw i8 %5, 48, !insn.addr !4473
  %8 = inttoptr i32 %1 to i8*, !insn.addr !4473
  store i8 %7, i8* %8, align 1, !insn.addr !4473
  %9 = add i32 %1, 1, !insn.addr !4474
  %10 = or i8 %6, 48
  %11 = zext i8 %10 to i32, !insn.addr !4475
  %12 = inttoptr i32 %9 to i8*, !insn.addr !4476
  store i8 %10, i8* %12, align 1, !insn.addr !4476
  ret i32 %11, !insn.addr !4477
}

define i32 @function_40ae3e(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40ae3e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = icmp eq i32 %1, -1, !insn.addr !4478
  %3 = icmp eq i1 %2, false, !insn.addr !4479
  br i1 %3, label %4, label %dec_label_pc_40ae44, !insn.addr !4479

; <label>:4:                                      ; preds = %dec_label_pc_40ae3e
  %5 = call i32 @function_40adf9(), !insn.addr !4479
  br label %dec_label_pc_40ae44, !insn.addr !4479

dec_label_pc_40ae44:                              ; preds = %4, %dec_label_pc_40ae3e
  %6 = add i32 %0, 94, !insn.addr !4480
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4480
  %8 = load i32, i32* %7, align 4, !insn.addr !4480
  %9 = inttoptr i32 %1 to i8*, !insn.addr !4481
  store i8 22, i8* %9, align 1, !insn.addr !4481
  %10 = trunc i32 %8 to i8, !insn.addr !4482
  %11 = inttoptr i32 %8 to i8*, !insn.addr !4482
  %12 = load i8, i8* %11, align 1, !insn.addr !4482
  %13 = or i8 %12, %10, !insn.addr !4482
  %14 = zext i8 %13 to i32, !insn.addr !4482
  %15 = and i32 %8, -256, !insn.addr !4482
  %16 = or i32 %15, %14, !insn.addr !4482
  ret i32 %16, !insn.addr !4483
}

define i32 @function_40aee7() local_unnamed_addr {
dec_label_pc_40aee7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40aee8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40aee8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 12, !insn.addr !4484
  %4 = inttoptr i32 %3 to i32*, !insn.addr !4484
  %5 = load i32, i32* %4, align 4, !insn.addr !4484
  %6 = add i32 %1, 48, !insn.addr !4485
  %7 = inttoptr i32 %6 to i8*, !insn.addr !4485
  %8 = load i8, i8* %7, align 1, !insn.addr !4485
  %9 = zext i8 %8 to i32, !insn.addr !4485
  %10 = and i32 %2, -256, !insn.addr !4485
  %11 = or i32 %10, %9, !insn.addr !4485
  %12 = inttoptr i32 %5 to i8*, !insn.addr !4486
  store i8 %8, i8* %12, align 1, !insn.addr !4486
  %13 = add i32 %5, 1, !insn.addr !4487
  %14 = add i32 %11, 813402390, !insn.addr !4488
  %15 = inttoptr i32 %14 to i32*, !insn.addr !4488
  %16 = load i32, i32* %15, align 4, !insn.addr !4488
  %17 = sub i32 %16, %11, !insn.addr !4488
  store i32 %17, i32* %15, align 4, !insn.addr !4488
  store i32 %13, i32* %4, align 4, !insn.addr !4489
  %18 = udiv i32 %13, 256, !insn.addr !4490
  %19 = mul nuw i32 %18, 151, !insn.addr !4490
  %20 = add i32 %19, %13, !insn.addr !4490
  %21 = and i32 %20, 255, !insn.addr !4490
  %22 = and i32 %13, -65536, !insn.addr !4490
  %23 = or i32 %21, %22, !insn.addr !4490
  %24 = add i32 %1, %0, !insn.addr !4491
  %25 = inttoptr i32 %1 to i32*, !insn.addr !4491
  store i32 %24, i32* %25, align 4, !insn.addr !4491
  %26 = inttoptr i32 %23 to i8*, !insn.addr !4492
  %27 = load i8, i8* %26, align 1, !insn.addr !4492
  %28 = trunc i32 %20 to i8, !insn.addr !4492
  %29 = add i8 %27, %28, !insn.addr !4492
  store i8 %29, i8* %26, align 1, !insn.addr !4492
  ret i32 0, !insn.addr !4493
}

define i32 @function_40af17(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40af17:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = icmp eq i32 %0, 1, !insn.addr !4494
  br i1 %5, label %dec_label_pc_40b03f, label %dec_label_pc_40af22, !insn.addr !4495

dec_label_pc_40af22:                              ; preds = %dec_label_pc_40af17
  %6 = add i32 %1, 4, !insn.addr !4496
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4497
  %8 = load i32, i32* %7, align 4, !insn.addr !4497
  %9 = add i32 %1, 14, !insn.addr !4498
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4498
  store i32 %8, i32* %10, align 4, !insn.addr !4498
  %11 = call i32 @unknown_9040a2d0(), !insn.addr !4499
  %12 = add i32 %1, 72, !insn.addr !4500
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4500
  %14 = load i32, i32* %13, align 4, !insn.addr !4500
  %15 = select i1 %4, i32 2, i32 1, !insn.addr !4500
  %16 = sub i32 %14, %15, !insn.addr !4500
  %17 = icmp eq i32 %16, 0, !insn.addr !4500
  store i32 %16, i32* %13, align 4, !insn.addr !4500
  %18 = icmp eq i1 %17, false, !insn.addr !4501
  br i1 %18, label %19, label %dec_label_pc_40af39, !insn.addr !4501

; <label>:19:                                     ; preds = %dec_label_pc_40af22
  %20 = inttoptr i32 %1 to i32*, !insn.addr !4502
  %21 = call i32 @function_40aee7(), !insn.addr !4501
  br label %dec_label_pc_40af39, !insn.addr !4501

dec_label_pc_40af39:                              ; preds = %19, %dec_label_pc_40af22
  %22 = call i32 @function_40b2d0(), !insn.addr !4503
  %23 = add i32 %22, 1, !insn.addr !4504
  %24 = xor i32 %23, 359973179, !insn.addr !4505
  ret i32 %24, !insn.addr !4506

dec_label_pc_40b03f:                              ; preds = %dec_label_pc_40af17
  %25 = add i32 %3, -115, !insn.addr !4507
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4507
  %27 = load i32, i32* %26, align 4, !insn.addr !4507
  %28 = or i32 %3, 81, !insn.addr !4508
  %29 = add i32 %27, -4, !insn.addr !4509
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4509
  %31 = add i32 %27, -8, !insn.addr !4510
  %32 = inttoptr i32 %31 to i32*, !insn.addr !4510
  store i32 %28, i32* %32, align 4, !insn.addr !4510
  %33 = add i32 %27, -12, !insn.addr !4511
  %34 = inttoptr i32 %33 to i32*, !insn.addr !4511
  %35 = call i32 @function_40b080(), !insn.addr !4512
  %36 = trunc i32 %2 to i16, !insn.addr !4513
  %37 = call i32 @__asm_in(i16 %36), !insn.addr !4513
  call void @llvm.trap()
  unreachable
}

define i32 @function_40b080() local_unnamed_addr {
dec_label_pc_40b080:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4514
}

define i32 @function_40b08d(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b08d:
  %edi.1.reg2mem = alloca i32, !insn.addr !4515
  %esi.0.reg2mem = alloca i32, !insn.addr !4515
  %ebp.1.reg2mem = alloca i32, !insn.addr !4515
  %ecx.1.reg2mem = alloca i32, !insn.addr !4515
  %eax.1.reg2mem = alloca i32, !insn.addr !4515
  %edi.0.reg2mem = alloca i32, !insn.addr !4515
  %ebp.0.reg2mem = alloca i32, !insn.addr !4515
  %esp.0.reg2mem = alloca i32, !insn.addr !4515
  %ecx.0.reg2mem = alloca i32, !insn.addr !4515
  %eax.0.reg2mem = alloca i32, !insn.addr !4515
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call x86_fp80 @__decompiler_undefined_function_4()
  %8 = call i1 @__decompiler_undefined_function_2()
  %stack_var_4 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %9 = add i32 %1, 78, !insn.addr !4515
  %10 = inttoptr i32 %9 to i8*, !insn.addr !4515
  %11 = load i8, i8* %10, align 1, !insn.addr !4515
  %12 = trunc i32 %3 to i8, !insn.addr !4515
  %13 = zext i1 %8 to i8, !insn.addr !4515
  %14 = add i8 %11, %12, !insn.addr !4515
  %15 = add i8 %14, %13, !insn.addr !4515
  %16 = icmp ule i8 %15, %11, !insn.addr !4515
  %17 = icmp ult i8 %14, %11, !insn.addr !4515
  %18 = select i1 %8, i1 %16, i1 %17, !insn.addr !4515
  store i8 %15, i8* %10, align 1, !insn.addr !4515
  %19 = zext i1 %18 to i32, !insn.addr !4516
  %20 = add i32 %6, 11, !insn.addr !4516
  %21 = add i32 %20, %19, !insn.addr !4516
  %22 = and i32 %21, 255, !insn.addr !4516
  %23 = and i32 %6, -256, !insn.addr !4516
  %24 = or i32 %22, %23, !insn.addr !4516
  %25 = mul i32 %0, 8388608, !insn.addr !4517
  %26 = udiv i32 %0, 512, !insn.addr !4517
  %27 = or i32 %26, %25, !insn.addr !4517
  %28 = call i8 @__readgsbyte(i32 %24), !insn.addr !4518
  %29 = trunc i32 %21 to i8, !insn.addr !4518
  %30 = add i8 %28, %29, !insn.addr !4518
  call void @__writegsbyte(i32 %24, i8 %30), !insn.addr !4518
  %31 = inttoptr i32 %24 to i8*, !insn.addr !4519
  %32 = load i8, i8* %31, align 1, !insn.addr !4519
  %33 = add i8 %32, %29, !insn.addr !4519
  %34 = icmp eq i8 %33, 0, !insn.addr !4519
  store i8 %33, i8* %31, align 1, !insn.addr !4519
  %35 = icmp eq i1 %34, false, !insn.addr !4520
  store i32 %27, i32* %edi.1.reg2mem, !insn.addr !4520
  br i1 %35, label %dec_label_pc_40b10d, label %dec_label_pc_40b09c, !insn.addr !4520

dec_label_pc_40b09c:                              ; preds = %dec_label_pc_40b08d
  %36 = add i32 %2, -1, !insn.addr !4521
  %37 = udiv i32 %4, 256, !insn.addr !4522
  %38 = or i32 %37, %4
  %39 = trunc i32 %38 to i8, !insn.addr !4522
  %40 = inttoptr i32 %4 to i8*, !insn.addr !4522
  store i8 %39, i8* %40, align 1, !insn.addr !4522
  store i32 0, i32* %stack_var_-12, align 4, !insn.addr !4523
  %41 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !4523
  %42 = call i32 @__asm_in.2(i32 255), !insn.addr !4524
  %43 = fptosi x86_fp80 %7 to i16, !insn.addr !4525
  %44 = add i32 %36, %41, !insn.addr !4525
  %45 = inttoptr i32 %44 to i16*, !insn.addr !4525
  store i16 %43, i16* %45, align 2, !insn.addr !4525
  %46 = xor i32 %42, -1065929394, !insn.addr !4526
  %47 = add i32 %46, 1, !insn.addr !4527
  %48 = udiv i32 %3, 256, !insn.addr !4528
  %49 = trunc i32 %48 to i8, !insn.addr !4528
  %.tr = trunc i32 %48 to i8
  %50 = mul i8 %.tr, 2, !insn.addr !4528
  %51 = icmp ult i8 %50, %49, !insn.addr !4528
  %52 = select i1 %51, i32 255, i32 0, !insn.addr !4529
  %53 = and i32 %47, -256, !insn.addr !4529
  %54 = or i32 %53, %52, !insn.addr !4529
  %55 = icmp eq i32 %54, 0, !insn.addr !4530
  %56 = icmp eq i1 %55, false, !insn.addr !4531
  store i32 %54, i32* %eax.0.reg2mem, !insn.addr !4531
  store i32 1975551232, i32* %ecx.0.reg2mem, !insn.addr !4531
  store i32 %41, i32* %esp.0.reg2mem, !insn.addr !4531
  store i32 %36, i32* %ebp.0.reg2mem, !insn.addr !4531
  store i32 %27, i32* %edi.0.reg2mem, !insn.addr !4531
  br i1 %56, label %dec_label_pc_40b0d2, label %dec_label_pc_40b0c9, !insn.addr !4531

dec_label_pc_40b0c9:                              ; preds = %dec_label_pc_40b09c
  %57 = and i32 %5, -65281, !insn.addr !4532
  %58 = and i32 %4, 65280, !insn.addr !4532
  %59 = or i32 %57, %58, !insn.addr !4532
  %60 = add i32 %2, 19, !insn.addr !4533
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4533
  %62 = load i32, i32* %61, align 4, !insn.addr !4533
  %63 = load i32, i32* %stack_var_-12, align 4, !insn.addr !4534
  %64 = inttoptr i32 %62 to i32*, !insn.addr !4535
  store i32 %54, i32* %64, align 4, !insn.addr !4535
  %65 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !4536
  store i32 %arg1, i32* %eax.0.reg2mem, !insn.addr !4536
  store i32 %62, i32* %ecx.0.reg2mem, !insn.addr !4536
  store i32 %65, i32* %esp.0.reg2mem, !insn.addr !4536
  store i32 %59, i32* %ebp.0.reg2mem, !insn.addr !4536
  store i32 %63, i32* %edi.0.reg2mem, !insn.addr !4536
  br label %dec_label_pc_40b0d2, !insn.addr !4536

dec_label_pc_40b0d2:                              ; preds = %dec_label_pc_40b0c9, %dec_label_pc_40b09c
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %66 = load i8, i8* inttoptr (i32 720109 to i8*), align 1, !insn.addr !4537
  %67 = add i8 %66, %50, !insn.addr !4537
  %68 = icmp eq i8 %67, 0, !insn.addr !4537
  store i8 %67, i8* inttoptr (i32 720109 to i8*), align 1, !insn.addr !4537
  %69 = icmp eq i1 %68, false, !insn.addr !4538
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !4538
  br i1 %69, label %dec_label_pc_40b0e5, label %dec_label_pc_40b0e0, !insn.addr !4538

dec_label_pc_40b0e0:                              ; preds = %dec_label_pc_40b0d2
  %70 = call i8 @llvm.ctpop.i8(i8 %67), !range !405, !insn.addr !4537
  %71 = and i8 %70, 1, !insn.addr !4537
  %72 = icmp eq i8 %71, 0, !insn.addr !4537
  %73 = icmp slt i8 %67, 0, !insn.addr !4537
  %74 = icmp ult i8 %67, %66, !insn.addr !4537
  %75 = and i8 %66, 15, !insn.addr !4537
  %76 = and i8 %50, 14, !insn.addr !4537
  %77 = add nuw nsw i8 %75, %76, !insn.addr !4537
  %78 = icmp ugt i8 %77, 15, !insn.addr !4537
  %79 = zext i1 %74 to i32, !insn.addr !4539
  %80 = zext i1 %72 to i32, !insn.addr !4539
  %81 = zext i1 %78 to i32, !insn.addr !4539
  %82 = zext i1 %68 to i32, !insn.addr !4539
  %83 = zext i1 %73 to i32, !insn.addr !4539
  %84 = mul i32 %80, 4, !insn.addr !4539
  %85 = mul i32 %81, 16, !insn.addr !4539
  %86 = mul i32 %82, 64, !insn.addr !4539
  %87 = mul i32 %83, 128, !insn.addr !4539
  %88 = or i32 %86, %79, !insn.addr !4539
  %89 = or i32 %88, %87, !insn.addr !4539
  %90 = or i32 %89, %85, !insn.addr !4539
  %91 = or i32 %90, %84, !insn.addr !4539
  %92 = mul i32 %91, 256, !insn.addr !4539
  %93 = and i32 %eax.0.reload, -65281, !insn.addr !4539
  %94 = or i32 %93, %92, !insn.addr !4539
  %95 = or i32 %94, 512, !insn.addr !4539
  %96 = inttoptr i32 %95 to i32*, !insn.addr !4540
  %97 = load i32, i32* %96, align 4, !insn.addr !4540
  %98 = add i32 %97, %95, !insn.addr !4540
  store i32 %98, i32* %96, align 4, !insn.addr !4540
  store i32 %95, i32* %eax.1.reg2mem, !insn.addr !4540
  br label %dec_label_pc_40b0e5, !insn.addr !4540

dec_label_pc_40b0e5:                              ; preds = %dec_label_pc_40b0e0, %dec_label_pc_40b0d2
  %99 = sub i32 0, %ebp.0.reload
  %100 = and i32 %ebp.0.reload, %99, !insn.addr !4541
  %101 = icmp slt i32 %100, 0, !insn.addr !4541
  br i1 %101, label %dec_label_pc_40b148, label %dec_label_pc_40b0e9, !insn.addr !4542

dec_label_pc_40b0e9:                              ; preds = %dec_label_pc_40b0e5
  %102 = add i32 %ebp.0.reload, -1, !insn.addr !4541
  %103 = inttoptr i32 %esp.0.reload to i32*, !insn.addr !4543
  %104 = load i32, i32* %103, align 4, !insn.addr !4543
  %105 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !4544
  %106 = add i32 %ebp.0.reload, 125, !insn.addr !4545
  %107 = inttoptr i32 %106 to i32*, !insn.addr !4545
  br label %dec_label_pc_40b0ea, !insn.addr !4543

dec_label_pc_40b0ea:                              ; preds = %dec_label_pc_40b107, %dec_label_pc_40b0e9
  store i32 10240, i32* %105, align 4, !insn.addr !4544
  %108 = load i32, i32* %107, align 4, !insn.addr !4545
  %109 = icmp eq i32 %108, 0, !insn.addr !4546
  %110 = icmp eq i1 %109, false, !insn.addr !4547
  br i1 %110, label %dec_label_pc_40b107, label %dec_label_pc_40b0f9, !insn.addr !4547

dec_label_pc_40b0f9:                              ; preds = %dec_label_pc_40b0ea
  %111 = add i32 %ebp.0.reload, 19, !insn.addr !4548
  %112 = inttoptr i32 %111 to i32*, !insn.addr !4548
  %113 = load i32, i32* %112, align 4, !insn.addr !4548
  %114 = inttoptr i32 %113 to i32*, !insn.addr !4549
  store i32 %108, i32* %114, align 4, !insn.addr !4549
  ret i32 922746976, !insn.addr !4550

dec_label_pc_40b107:                              ; preds = %dec_label_pc_40b0ea
  %115 = icmp ugt i32 %edi.0.reload, %108
  store i32 %ecx.0.reload, i32* %ecx.1.reg2mem, !insn.addr !4551
  store i32 %102, i32* %ebp.1.reg2mem, !insn.addr !4551
  store i32 %104, i32* %esi.0.reg2mem, !insn.addr !4551
  store i32 %108, i32* %edi.1.reg2mem, !insn.addr !4551
  br i1 %115, label %dec_label_pc_40b10d, label %dec_label_pc_40b0ea, !insn.addr !4551

dec_label_pc_40b10d:                              ; preds = %dec_label_pc_40b107, %dec_label_pc_40b08d
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %116 = add i32 %ecx.1.reload, 116, !insn.addr !4552
  %117 = inttoptr i32 %116 to i32*, !insn.addr !4552
  %118 = load i32, i32* %117, align 4, !insn.addr !4552
  %119 = and i32 %118, %esi.0.reload, !insn.addr !4552
  %120 = icmp eq i32 %119, 0, !insn.addr !4552
  %121 = icmp eq i1 %120, false, !insn.addr !4553
  br i1 %121, label %dec_label_pc_40b137, label %dec_label_pc_40b11b, !insn.addr !4553

dec_label_pc_40b11b:                              ; preds = %dec_label_pc_40b10d
  %122 = add i32 %esi.0.reload, 12, !insn.addr !4554
  %123 = inttoptr i32 %122 to i32*, !insn.addr !4554
  %124 = load i32, i32* %123, align 4, !insn.addr !4554
  %125 = add i32 %esi.0.reload, -6, !insn.addr !4555
  %126 = inttoptr i32 %125 to i32*, !insn.addr !4555
  %127 = load i32, i32* %126, align 4, !insn.addr !4555
  %128 = add i32 %124, 13, !insn.addr !4556
  %129 = inttoptr i32 %128 to i32*, !insn.addr !4556
  store i32 %127, i32* %129, align 4, !insn.addr !4556
  %130 = call i32 @unknown_41a510(), !insn.addr !4557
  %131 = or i32 %130, 137, !insn.addr !4558
  ret i32 %131, !insn.addr !4559

dec_label_pc_40b137:                              ; preds = %dec_label_pc_40b10d
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %132 = inttoptr i32 %ebp.1.reload to i32*, !insn.addr !4560
  %133 = add i32 %esi.0.reload, 12, !insn.addr !4561
  %134 = inttoptr i32 %133 to i32*, !insn.addr !4561
  %135 = load i32, i32* %134, align 4, !insn.addr !4561
  %136 = add i32 %135, 81, !insn.addr !4562
  %137 = and i32 %136, 255, !insn.addr !4562
  %138 = and i32 %135, -256, !insn.addr !4562
  %139 = or i32 %137, %138, !insn.addr !4562
  store i32 %edi.1.reload, i32* %132, align 4, !insn.addr !4563
  ret i32 %139, !insn.addr !4563

dec_label_pc_40b148:                              ; preds = %dec_label_pc_40b0e5
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %140 = add i32 %esp.0.reload, -4, !insn.addr !4564
  %141 = inttoptr i32 %140 to i32*, !insn.addr !4564
  store i32 %eax.1.reload, i32* %141, align 4, !insn.addr !4564
  %142 = icmp eq i32 %eax.1.reload, 0, !insn.addr !4565
  br i1 %142, label %dec_label_pc_40b15a, label %dec_label_pc_40b153, !insn.addr !4566

dec_label_pc_40b153:                              ; preds = %dec_label_pc_40b148
  call void @llvm.trap()
  unreachable

dec_label_pc_40b15a:                              ; preds = %dec_label_pc_40b148
  ret i32 0, !insn.addr !4567
}

define i32 @function_40b161() local_unnamed_addr {
dec_label_pc_40b161:
  %eax.2.reg2mem = alloca i32, !insn.addr !4568
  %esp.2.reg2mem = alloca i32, !insn.addr !4568
  %eax.1.reg2mem = alloca i32, !insn.addr !4568
  %esp.1.reg2mem = alloca i32, !insn.addr !4568
  %eax.0.reg2mem = alloca i32, !insn.addr !4568
  %edi.0.reg2mem = alloca i32, !insn.addr !4568
  %esp.0.reg2mem = alloca i32, !insn.addr !4568
  %edx.0.reg2mem = alloca i32, !insn.addr !4568
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = icmp eq i1 %5, %4, !insn.addr !4568
  %8 = icmp eq i1 %6, false, !insn.addr !4568
  %9 = icmp eq i1 %7, %8, !insn.addr !4568
  br i1 %9, label %dec_label_pc_40b1a9, label %dec_label_pc_40b163, !insn.addr !4568

dec_label_pc_40b163:                              ; preds = %dec_label_pc_40b161
  %10 = mul i32 %3, 2, !insn.addr !4569
  %11 = inttoptr i32 %3 to i32*, !insn.addr !4569
  store i32 %10, i32* %11, align 4, !insn.addr !4569
  %12 = and i32 %2, 65280, !insn.addr !4570
  %13 = add i32 %12, %2
  %14 = and i32 %13, 65280, !insn.addr !4570
  %15 = and i32 %2, -65281, !insn.addr !4570
  %16 = or i32 %14, %15, !insn.addr !4570
  %17 = and i32 %3, 255, !insn.addr !4571
  %18 = add i32 %16, %17, !insn.addr !4571
  %19 = inttoptr i32 %18 to i8*, !insn.addr !4571
  %20 = load i8, i8* %19, align 1, !insn.addr !4571
  %21 = zext i8 %20 to i32, !insn.addr !4571
  %22 = and i32 %3, -256, !insn.addr !4571
  %23 = or i32 %22, %21, !insn.addr !4571
  %24 = icmp eq i32 %23, 997, !insn.addr !4572
  %25 = icmp eq i1 %24, false, !insn.addr !4573
  br i1 %25, label %26, label %dec_label_pc_40b182, !insn.addr !4573

; <label>:26:                                     ; preds = %dec_label_pc_40b163
  %27 = call i32 @function_113b24f(), !insn.addr !4573
  br label %dec_label_pc_40b182, !insn.addr !4573

dec_label_pc_40b182:                              ; preds = %dec_label_pc_40b163, %26, %dec_label_pc_40b1af
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %28 = add i32 %0, 20, !insn.addr !4574
  %29 = inttoptr i32 %28 to i32*, !insn.addr !4574
  %30 = load i32, i32* %29, align 4, !insn.addr !4574
  %31 = add i32 %0, 16, !insn.addr !4575
  %32 = inttoptr i32 %31 to i32*, !insn.addr !4575
  %33 = load i32, i32* %32, align 4, !insn.addr !4575
  %34 = icmp slt i32 %30, 0, !insn.addr !4576
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !4577
  br i1 %34, label %dec_label_pc_40b1a2, label %dec_label_pc_40b18c, !insn.addr !4577

dec_label_pc_40b18c:                              ; preds = %dec_label_pc_40b182
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %35 = trunc i32 %edx.0.reload to i16, !insn.addr !4578
  %36 = call i8 @__asm_insb(i16 %35), !insn.addr !4578
  %37 = inttoptr i32 %edi.0.reload to i8*, !insn.addr !4578
  store i8 %36, i8* %37, align 1, !insn.addr !4578
  %38 = trunc i32 %33 to i8, !insn.addr !4579
  %39 = add i8 %38, -123, !insn.addr !4579
  %40 = icmp ugt i8 %38, 122, !insn.addr !4579
  %41 = icmp eq i8 %39, 0, !insn.addr !4579
  %42 = zext i8 %39 to i32, !insn.addr !4579
  %43 = and i32 %33, -256, !insn.addr !4579
  %44 = or i32 %43, %42, !insn.addr !4579
  call void @__asm_out.6(i16 %35, i8 %39), !insn.addr !4580
  %45 = or i1 %40, %41, !insn.addr !4581
  store i32 %44, i32* %eax.0.reg2mem, !insn.addr !4581
  br i1 %45, label %dec_label_pc_40b1a2, label %dec_label_pc_40b192, !insn.addr !4581

dec_label_pc_40b192:                              ; preds = %dec_label_pc_40b18c
  store i32 %44, i32* inttoptr (i32 65370624 to i32*), align 512, !insn.addr !4582
  %46 = inttoptr i32 %44 to i8*, !insn.addr !4583
  %47 = load i8, i8* %46, align 1, !insn.addr !4583
  %48 = add i8 %47, %39, !insn.addr !4583
  store i8 %48, i8* %46, align 1, !insn.addr !4583
  %49 = add i32 %esp.0.reload, -4, !insn.addr !4584
  %50 = inttoptr i32 %49 to i32*, !insn.addr !4584
  store i32 %30, i32* %50, align 4, !insn.addr !4584
  %51 = add i32 %esp.0.reload, -8, !insn.addr !4585
  %52 = inttoptr i32 %51 to i32*, !insn.addr !4585
  store i32 %44, i32* %52, align 4, !insn.addr !4585
  %53 = call i32 @function_40b4c7(), !insn.addr !4586
  store i32 %51, i32* %esp.2.reg2mem, !insn.addr !4587
  store i32 %53, i32* %eax.2.reg2mem, !insn.addr !4587
  br label %dec_label_pc_40b1af, !insn.addr !4587

dec_label_pc_40b1a2:                              ; preds = %dec_label_pc_40b18c, %dec_label_pc_40b182
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %54 = and i32 %eax.0.reload, %30, !insn.addr !4588
  %55 = icmp eq i32 %54, -1, !insn.addr !4589
  %56 = icmp eq i1 %55, false, !insn.addr !4590
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !4590
  store i32 %54, i32* %eax.1.reg2mem, !insn.addr !4590
  br i1 %56, label %dec_label_pc_40b1e4, label %dec_label_pc_40b1a9, !insn.addr !4590

dec_label_pc_40b1a9:                              ; preds = %dec_label_pc_40b1a2, %dec_label_pc_40b161
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !4591
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !4591
  br label %dec_label_pc_40b1af, !insn.addr !4591

dec_label_pc_40b1af:                              ; preds = %dec_label_pc_40b1a9, %dec_label_pc_40b192
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %57 = add i32 %0, 12, !insn.addr !4592
  %58 = inttoptr i32 %57 to i32*, !insn.addr !4592
  %59 = load i32, i32* %58, align 4, !insn.addr !4592
  %60 = add i32 %esp.2.reload, -4, !insn.addr !4593
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4593
  store i32 %eax.2.reload, i32* %61, align 4, !insn.addr !4593
  %62 = add i32 %59, 16, !insn.addr !4594
  %63 = inttoptr i32 %62 to i32*, !insn.addr !4594
  %64 = load i32, i32* %63, align 4, !insn.addr !4594
  %65 = add i32 %esp.2.reload, -8, !insn.addr !4595
  %66 = inttoptr i32 %65 to i32*, !insn.addr !4595
  store i32 %64, i32* %66, align 4, !insn.addr !4595
  %67 = call i32 @WaitForSingleObject(i32* nonnull @0, i32 ptrtoint (i32* @0 to i32)), !insn.addr !4596
  %68 = icmp eq i32 %67, 1711276160, !insn.addr !4597
  store i32 %64, i32* %edx.0.reg2mem, !insn.addr !4598
  store i32 %65, i32* %esp.0.reg2mem, !insn.addr !4598
  store i32 1711276160, i32* %edi.0.reg2mem, !insn.addr !4598
  br i1 %68, label %dec_label_pc_40b182, label %dec_label_pc_40b1db, !insn.addr !4598

dec_label_pc_40b1db:                              ; preds = %dec_label_pc_40b1af
  %69 = add i32 %59, ptrtoint (i32* @global_var_410960 to i32), !insn.addr !4599
  %70 = inttoptr i32 %69 to i32*, !insn.addr !4599
  %71 = load i32, i32* %70, align 4, !insn.addr !4599
  %72 = xor i32 %71, %60, !insn.addr !4599
  store i32 %72, i32* %70, align 4, !insn.addr !4599
  %73 = call i32 @__asm_hlt(), !insn.addr !4600
  store i32 ptrtoint ([9 x i8]* @global_var_4100ec to i32), i32* %66, align 4, !insn.addr !4601
  %74 = add i32 %esp.2.reload, 12, !insn.addr !4602
  %75 = add i32 %esp.2.reload, 20, !insn.addr !4602
  %76 = inttoptr i32 %74 to i32*, !insn.addr !4602
  %77 = load i32, i32* %76, align 4, !insn.addr !4602
  %78 = inttoptr i32 %75 to i32*, !insn.addr !4602
  %79 = load i32, i32* %78, align 4, !insn.addr !4602
  %80 = zext i32 %79 to i64, !insn.addr !4603
  %81 = zext i32 %77 to i64, !insn.addr !4603
  %82 = mul i64 %81, 4294967296, !insn.addr !4603
  %83 = or i64 %82, %80, !insn.addr !4603
  %84 = sdiv i64 %83, zext (i32 ptrtoint ([9 x i8]* @global_var_4100ec to i32) to i64), !insn.addr !4603
  %85 = trunc i64 %84 to i32, !insn.addr !4603
  ret i32 %85, !insn.addr !4604

dec_label_pc_40b1e4:                              ; preds = %dec_label_pc_40b1a2
  %86 = or i32 %edi.0.reload, %0, !insn.addr !4605
  %87 = inttoptr i32 %0 to i32*, !insn.addr !4605
  store i32 %86, i32* %87, align 4, !insn.addr !4605
  %88 = add i32 %1, 1392869056, !insn.addr !4606
  %89 = inttoptr i32 %88 to i8*, !insn.addr !4606
  %90 = load i8, i8* %89, align 1, !insn.addr !4606
  %91 = trunc i32 %54 to i8, !insn.addr !4606
  %92 = add i8 %90, %91, !insn.addr !4606
  store i8 %92, i8* %89, align 1, !insn.addr !4606
  %93 = call i32 @function_40b248(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4607
  ret i32 %93, !insn.addr !4607
}

define i32 @function_40b246() local_unnamed_addr {
dec_label_pc_40b246:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4608
}

define i32 @function_40b248(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40b248:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %1, 2, !insn.addr !4609
  %3 = inttoptr i32 %1 to i32*, !insn.addr !4609
  store i32 %2, i32* %3, align 4, !insn.addr !4609
  %4 = inttoptr i32 %0 to i32*, !insn.addr !4610
  ret i32 %1, !insn.addr !4611
}

define i32 @function_40b259(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_40b259:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %3 = add i32 %0, -99, !insn.addr !4612
  %4 = fptrunc x86_fp80 %2 to double, !insn.addr !4612
  %5 = inttoptr i32 %3 to double*, !insn.addr !4612
  store double %4, double* %5, align 4, !insn.addr !4612
  %6 = inttoptr i32 %1 to i32*, !insn.addr !4613
  ret i32 70014, !insn.addr !4614
}

define i32 @function_40b268(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40b268:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, 134937766, !insn.addr !4615
  %2 = icmp eq i1 %1, false, !insn.addr !4616
  br i1 %2, label %dec_label_pc_40b281, label %dec_label_pc_40b26f, !insn.addr !4616

dec_label_pc_40b26f:                              ; preds = %dec_label_pc_40b268
  %3 = mul i32 %0, 2, !insn.addr !4617
  %4 = inttoptr i32 %0 to i32*, !insn.addr !4617
  store i32 %3, i32* %4, align 4, !insn.addr !4617
  ret i32 %0, !insn.addr !4618

dec_label_pc_40b281:                              ; preds = %dec_label_pc_40b268
  ret i32 %0, !insn.addr !4619
}

define i32 @function_40b284(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40b284:
  %cf.0.reg2mem = alloca i1, !insn.addr !4620
  %edx.0.reg2mem = alloca i32, !insn.addr !4620
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !4620
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, -909307839, !insn.addr !4620
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4620
  %6 = load i8, i8* %5, align 1, !insn.addr !4620
  %7 = trunc i32 %3 to i8, !insn.addr !4620
  %8 = icmp ult i8 %6, %7, !insn.addr !4620
  %9 = add i32 %2, 1435178061, !insn.addr !4621
  %10 = inttoptr i32 %9 to i8*, !insn.addr !4621
  %11 = load i8, i8* %10, align 1, !insn.addr !4621
  %12 = zext i1 %8 to i8, !insn.addr !4621
  %13 = add i8 %11, %7, !insn.addr !4621
  %14 = add i8 %13, %12, !insn.addr !4621
  %15 = icmp ule i8 %14, %7, !insn.addr !4621
  %16 = icmp ult i8 %13, %7, !insn.addr !4621
  %17 = select i1 %8, i1 %15, i1 %16, !insn.addr !4621
  %18 = zext i8 %14 to i32, !insn.addr !4621
  %19 = and i32 %3, -256, !insn.addr !4621
  %20 = or i32 %19, %18, !insn.addr !4621
  %21 = add i32 %2, 95, !insn.addr !4622
  %22 = inttoptr i32 %21 to i8*, !insn.addr !4622
  %23 = load i8, i8* %22, align 1, !insn.addr !4622
  %24 = trunc i32 %2 to i8, !insn.addr !4622
  %25 = zext i1 %17 to i8, !insn.addr !4622
  %26 = add i8 %23, %24, !insn.addr !4622
  %27 = add i8 %26, %25, !insn.addr !4622
  store i8 %27, i8* %22, align 1, !insn.addr !4622
  %28 = inttoptr i32 %20 to i32*
  %29 = add i32 %1, -61, !insn.addr !4623
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4623
  %31 = load i32, i32* %30, align 4, !insn.addr !4623
  %32 = sub i32 0, %31, !insn.addr !4623
  store i32 %32, i32* %30, align 4, !insn.addr !4623
  %33 = add i32 %0, 12, !insn.addr !4624
  %34 = inttoptr i32 %33 to i32*, !insn.addr !4624
  %35 = load i32, i32* %34, align 4, !insn.addr !4624
  %36 = add i32 %35, -1585182634, !insn.addr !4625
  %37 = inttoptr i32 %36 to i8*, !insn.addr !4625
  %38 = load i8, i8* %37, align 1, !insn.addr !4625
  %39 = sub i8 %38, %14, !insn.addr !4625
  %40 = icmp ult i8 %38, %14, !insn.addr !4625
  %41 = icmp eq i8 %39, 0, !insn.addr !4625
  store i8 %39, i8* %37, align 1, !insn.addr !4625
  %42 = icmp eq i1 %41, false, !insn.addr !4626
  store i32* %28, i32** %.pre-phi.reg2mem, !insn.addr !4626
  store i32 %35, i32* %edx.0.reg2mem, !insn.addr !4626
  store i1 %40, i1* %cf.0.reg2mem, !insn.addr !4626
  br i1 %42, label %dec_label_pc_40b2bd, label %dec_label_pc_40b2ac, !insn.addr !4626

dec_label_pc_40b2ac:                              ; preds = %dec_label_pc_40b284
  %43 = add i32 %0, 80, !insn.addr !4627
  %44 = inttoptr i32 %43 to i32*, !insn.addr !4627
  %45 = load i32, i32* %44, align 4, !insn.addr !4627
  %46 = sub i32 0, %45
  %47 = sub i32 %46, 1
  %48 = icmp ugt i32 %20, %47, !insn.addr !4628
  %49 = zext i1 %48 to i32, !insn.addr !4629
  %50 = add i32 %20, %49, !insn.addr !4629
  %51 = icmp ule i32 %50, %20, !insn.addr !4629
  %52 = icmp eq i1 %48, %51, !insn.addr !4629
  %53 = add i32 %0, 84, !insn.addr !4630
  %54 = inttoptr i32 %53 to i32*, !insn.addr !4630
  store i32 %50, i32* %54, align 4, !insn.addr !4630
  %.pre = inttoptr i32 %50 to i32*, !insn.addr !4631
  store i32* %.pre, i32** %.pre-phi.reg2mem, !insn.addr !4630
  store i1 %52, i1* %cf.0.reg2mem, !insn.addr !4630
  br label %dec_label_pc_40b2bd, !insn.addr !4630

dec_label_pc_40b2bd:                              ; preds = %dec_label_pc_40b2ac, %dec_label_pc_40b284
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %55 = select i1 %cf.0.reload, i32 77009, i32 77008, !insn.addr !4632
  store i32 %edx.0.reload, i32* %.pre-phi.reload, align 4, !insn.addr !4631
  ret i32 %55, !insn.addr !4633
}

define i32 @function_40b2d0() local_unnamed_addr {
dec_label_pc_40b2d0:
  %edi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, -103, !insn.addr !4634
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4634
  %6 = load i32, i32* %5, align 4, !insn.addr !4634
  %7 = or i32 %6, %2, !insn.addr !4634
  store i32 %7, i32* %5, align 4, !insn.addr !4634
  %8 = call i32 @__asm_int1(), !insn.addr !4635
  %9 = mul i32 %8, 2, !insn.addr !4636
  %10 = add i32 %0, 38, !insn.addr !4636
  %11 = add i32 %10, %9, !insn.addr !4636
  %12 = inttoptr i32 %11 to i8*, !insn.addr !4636
  %13 = load i8, i8* %12, align 1, !insn.addr !4636
  %14 = udiv i32 %8, 256, !insn.addr !4636
  %15 = trunc i32 %14 to i8, !insn.addr !4636
  %16 = or i8 %13, %15, !insn.addr !4636
  store i8 %16, i8* %12, align 1, !insn.addr !4636
  %17 = add i32 %0, -1962934272, !insn.addr !4637
  %18 = inttoptr i32 %17 to i8*, !insn.addr !4637
  %19 = load i8, i8* %18, align 1, !insn.addr !4637
  call void @__asm_invlpg(i8 %19), !insn.addr !4637
  %20 = udiv i32 %1, 256, !insn.addr !4638
  %21 = and i32 %3, %20
  %22 = and i32 %21, 255, !insn.addr !4638
  %23 = and i32 %3, -256, !insn.addr !4638
  %24 = or i32 %22, %23, !insn.addr !4638
  %25 = load i32, i32* %edi, align 4
  %26 = add i32 %25, -119, !insn.addr !4639
  %27 = inttoptr i32 %26 to i32*, !insn.addr !4639
  %28 = load i32, i32* %27, align 4, !insn.addr !4639
  %29 = add i32 %28, %2, !insn.addr !4639
  store i32 %29, i32* %27, align 4, !insn.addr !4639
  %30 = bitcast i32* %edi to i8*
  %31 = load i8, i8* %30, align 4, !insn.addr !4640
  %32 = trunc i32 %21 to i8, !insn.addr !4640
  %33 = or i8 %31, %32, !insn.addr !4640
  %34 = load i32, i32* %edi, align 4, !insn.addr !4640
  %35 = inttoptr i32 %34 to i8*, !insn.addr !4640
  store i8 %33, i8* %35, align 1, !insn.addr !4640
  %36 = call i32 @function_40b284(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4641
  %37 = add i32 %24, 1, !insn.addr !4642
  %38 = inttoptr i32 %37 to i8*, !insn.addr !4643
  %39 = load i8, i8* %38, align 1, !insn.addr !4643
  %40 = trunc i32 %37 to i8, !insn.addr !4643
  %41 = add i8 %39, %40, !insn.addr !4643
  store i8 %41, i8* %38, align 1, !insn.addr !4643
  %42 = add i32 %24, -335558511, !insn.addr !4644
  ret i32 %42, !insn.addr !4645
}

define i32 @function_40b313() local_unnamed_addr {
dec_label_pc_40b313:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -4, !insn.addr !4646
  %2 = call i32 @function_16401374(i32 %1, i32 0), !insn.addr !4647
  ret i32 %2, !insn.addr !4647
}

define i32 @function_40b321() local_unnamed_addr {
dec_label_pc_40b321:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1166749556, !insn.addr !4648
  %3 = inttoptr i32 %2 to i8*, !insn.addr !4648
  %4 = load i8, i8* %3, align 1, !insn.addr !4648
  %5 = udiv i32 %1, 256, !insn.addr !4648
  %6 = trunc i32 %5 to i8, !insn.addr !4648
  %7 = add i8 %4, %6, !insn.addr !4648
  store i8 %7, i8* %3, align 1, !insn.addr !4648
  %8 = add i32 %1, -1982331912, !insn.addr !4649
  ret i32 %8, !insn.addr !4650
}

define i32 @function_40b347(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b347:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = add i32 %0, -57, !insn.addr !4651
  %3 = inttoptr i32 %2 to i8*, !insn.addr !4651
  %4 = load i8, i8* %3, align 1, !insn.addr !4651
  %5 = trunc i32 %1 to i8, !insn.addr !4651
  %6 = or i8 %4, %5, !insn.addr !4651
  store i8 %6, i8* %3, align 1, !insn.addr !4651
  %7 = bitcast i32* %eax to i8*
  %8 = load i8, i8* %7, align 4, !insn.addr !4652
  %9 = load i32, i32* %eax, align 4
  %10 = trunc i32 %9 to i8, !insn.addr !4652
  %11 = add i8 %8, %10, !insn.addr !4652
  %12 = inttoptr i32 %9 to i8*, !insn.addr !4652
  store i8 %11, i8* %12, align 1, !insn.addr !4652
  %13 = add i32 %1, -59, !insn.addr !4653
  %14 = inttoptr i32 %13 to i8*, !insn.addr !4653
  %15 = load i8, i8* %14, align 1, !insn.addr !4653
  %16 = add i8 %15, %5, !insn.addr !4653
  store i8 %16, i8* %14, align 1, !insn.addr !4653
  %17 = load i32, i32* %eax, align 4, !insn.addr !4654
  ret i32 %17, !insn.addr !4654
}

define i32 @function_40b392(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b392:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %2, -65536, !insn.addr !4655
  %4 = add i32 %0, 1375995973, !insn.addr !4656
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4656
  %6 = load i8, i8* %5, align 1, !insn.addr !4656
  %7 = trunc i32 %1 to i8, !insn.addr !4656
  %8 = add i8 %6, %7, !insn.addr !4656
  store i8 %8, i8* %5, align 1, !insn.addr !4656
  ret i32 %3, !insn.addr !4657
}

define i32 @function_40b3a1(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b3a1:
  %0 = call i32 @__asm_in.2(i32 93), !insn.addr !4658
  ret i32 %0, !insn.addr !4659
}

define i32 @function_40b3ad() local_unnamed_addr {
dec_label_pc_40b3ad:
  %eax.0.reg2mem = alloca i32, !insn.addr !4660
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %2, -1953461419, !insn.addr !4661
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4661
  %6 = load i8, i8* %5, align 1, !insn.addr !4661
  %7 = zext i1 %3 to i8, !insn.addr !4661
  %8 = mul i8 %6, 32, !insn.addr !4661
  %9 = udiv i8 %6, 16
  %10 = mul i8 %7, 16, !insn.addr !4661
  %11 = or i8 %8, %10
  %12 = or i8 %11, %9, !insn.addr !4661
  store i8 %12, i8* %5, align 1, !insn.addr !4661
  %13 = add i32 %0, 1, !insn.addr !4662
  %14 = sext i32 %1 to i64, !insn.addr !4663
  %15 = sext i32 %2 to i64, !insn.addr !4663
  %16 = mul nsw i64 %15, %14, !insn.addr !4663
  %17 = trunc i64 %16 to i32, !insn.addr !4663
  %18 = icmp slt i32 %13, 1, !insn.addr !4664
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !4664
  br i1 %18, label %19, label %dec_label_pc_40b3c4, !insn.addr !4664

; <label>:19:                                     ; preds = %dec_label_pc_40b3ad
  %20 = call i32 @function_40b3ad(), !insn.addr !4664
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !4664
  br label %dec_label_pc_40b3c4, !insn.addr !4664

dec_label_pc_40b3c4:                              ; preds = %19, %dec_label_pc_40b3ad
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %21 = udiv i32 %13, 256, !insn.addr !4665
  %22 = trunc i32 %21 to i8, !insn.addr !4665
  %23 = udiv i64 %16, 1073741824
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, 103684
  %26 = and i32 %25, -4, !insn.addr !4665
  %27 = inttoptr i32 %26 to i8*, !insn.addr !4665
  store i8 %22, i8* %27, align 4, !insn.addr !4665
  %28 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !4666
  %29 = load i8, i8* %28, align 1, !insn.addr !4666
  %30 = trunc i32 %eax.0.reload to i8, !insn.addr !4666
  %31 = add i8 %29, %30, !insn.addr !4666
  store i8 %31, i8* %28, align 1, !insn.addr !4666
  ret i32 %eax.0.reload, !insn.addr !4667
}

define i32 @function_40b3ed() local_unnamed_addr {
dec_label_pc_40b3ed:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_13cb400(i32 %0, i32 %1), !insn.addr !4668
  ret i32 %2, !insn.addr !4669
}

define i32 @function_40b419() local_unnamed_addr {
dec_label_pc_40b419:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_4()
  %2 = fptosi x86_fp80 %1 to i32, !insn.addr !4670
  %3 = add i32 %0, -960809196, !insn.addr !4670
  %4 = inttoptr i32 %3 to i32*, !insn.addr !4670
  store i32 %2, i32* %4, align 4, !insn.addr !4670
  %5 = call i32 @function_928a2502(), !insn.addr !4671
  ret i32 %5, !insn.addr !4671
}

define i32 @function_40b43c() local_unnamed_addr {
dec_label_pc_40b43c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 193, !insn.addr !4672
  %2 = and i32 %1, 255, !insn.addr !4672
  %3 = and i32 %0, -256, !insn.addr !4672
  %4 = or i32 %2, %3, !insn.addr !4672
  ret i32 %4, !insn.addr !4673
}

define i32 @function_40b440() local_unnamed_addr {
dec_label_pc_40b440:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40b443(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b443:
  %eax.0.reg2mem = alloca i32, !insn.addr !4674
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %4, 6932474, !insn.addr !4675
  %8 = inttoptr i32 %7 to i8*, !insn.addr !4675
  %9 = load i8, i8* %8, align 1, !insn.addr !4675
  %10 = zext i8 %9 to i32, !insn.addr !4675
  %11 = and i32 %4, -256, !insn.addr !4675
  %12 = or i32 %11, %10, !insn.addr !4675
  call void @__asm_int(i32 138), !insn.addr !4676
  %13 = and i32 %arg1, 14
  %14 = icmp ugt i32 %13, 9, !insn.addr !4677
  %15 = or i1 %14, %6, !insn.addr !4677
  %16 = add i32 %arg1, 6, !insn.addr !4677
  %17 = select i1 %15, i32 %16, i32 %arg1, !insn.addr !4677
  %18 = zext i1 %15 to i32, !insn.addr !4677
  %19 = and i32 %17, 15, !insn.addr !4677
  %20 = and i32 %arg1, -65536, !insn.addr !4677
  %21 = mul i32 %18, 256
  %22 = add i32 %21, %arg1
  %23 = and i32 %22, 65280, !insn.addr !4677
  %24 = add i32 %12, -2080426148, !insn.addr !4678
  %25 = inttoptr i32 %24 to i8*, !insn.addr !4678
  %26 = load i8, i8* %25, align 1, !insn.addr !4678
  %27 = add i8 %26, -1, !insn.addr !4678
  store i8 %27, i8* %25, align 1, !insn.addr !4678
  %28 = icmp eq i32 %5, 1, !insn.addr !4679
  br i1 %28, label %dec_label_pc_40b459, label %dec_label_pc_40b468, !insn.addr !4679

dec_label_pc_40b459:                              ; preds = %dec_label_pc_40b443
  %29 = trunc i32 %19 to i8, !insn.addr !4680
  %30 = add i32 %12, -1339076117, !insn.addr !4680
  %31 = inttoptr i32 %30 to i8*, !insn.addr !4680
  %32 = load i8, i8* %31, align 1, !insn.addr !4680
  %33 = add i8 %32, %29, !insn.addr !4680
  %34 = zext i8 %33 to i32, !insn.addr !4680
  %35 = or i32 %23, %20, !insn.addr !4680
  %36 = or i32 %35, %34, !insn.addr !4680
  ret i32 %36, !insn.addr !4681

dec_label_pc_40b468:                              ; preds = %dec_label_pc_40b443
  %37 = or i32 %23, %20, !insn.addr !4677
  %38 = or i32 %37, %19, !insn.addr !4677
  %39 = add i32 %38, -1, !insn.addr !4682
  %40 = inttoptr i32 %39 to i8*, !insn.addr !4682
  store i8 %9, i8* %40, align 1, !insn.addr !4682
  %41 = add i32 %0, -55, !insn.addr !4683
  %42 = add i32 %41, %1, !insn.addr !4683
  %43 = inttoptr i32 %42 to i8*, !insn.addr !4683
  %44 = load i8, i8* %43, align 1, !insn.addr !4683
  %45 = and i8 %44, 63
  %46 = zext i8 %45 to i32, !insn.addr !4684
  %47 = call i32 @__asm_wait(), !insn.addr !4685
  %48 = add i32 %46, ptrtoint ([64 x i8]* @B64EncodeTable_at_40c718 to i32), !insn.addr !4686
  %49 = inttoptr i32 %48 to i8*, !insn.addr !4686
  %50 = load i8, i8* %49, align 1, !insn.addr !4686
  %51 = add i32 %47, -1, !insn.addr !4687
  %52 = inttoptr i32 %51 to i8*, !insn.addr !4687
  store i8 %50, i8* %52, align 1, !insn.addr !4687
  %53 = icmp sgt i32 %2, %46, !insn.addr !4688
  br i1 %53, label %dec_label_pc_40b499, label %dec_label_pc_40b480, !insn.addr !4688

dec_label_pc_40b480:                              ; preds = %dec_label_pc_40b468
  %54 = add i32 %2, 16, !insn.addr !4689
  %55 = inttoptr i32 %54 to i8*, !insn.addr !4689
  store i8 0, i8* %55, align 1, !insn.addr !4689
  %56 = call i32 @function_f4335f7d(), !insn.addr !4690
  ret i32 %56, !insn.addr !4690

dec_label_pc_40b499:                              ; preds = %dec_label_pc_40b468
  %57 = icmp ugt i32 %2, %46, !insn.addr !4691
  %58 = add i32 %5, -2, !insn.addr !4692
  %59 = inttoptr i32 %58 to i8*, !insn.addr !4692
  store i8 0, i8* %59, align 1, !insn.addr !4692
  %60 = icmp ne i1 %57, true, !insn.addr !4693
  %61 = trunc i32 %47 to i8, !insn.addr !4694
  %62 = zext i1 %60 to i8, !insn.addr !4694
  %63 = add i8 %61, 62, !insn.addr !4694
  %64 = add i8 %63, %62, !insn.addr !4694
  %65 = icmp eq i8 %64, 0, !insn.addr !4694
  %66 = zext i8 %64 to i32, !insn.addr !4694
  %67 = and i32 %47, -256, !insn.addr !4694
  %68 = icmp eq i1 %65, false, !insn.addr !4695
  br i1 %68, label %dec_label_pc_40b4b6, label %dec_label_pc_40b4a1, !insn.addr !4695

dec_label_pc_40b4a1:                              ; preds = %dec_label_pc_40b499
  %69 = or i32 %67, %66, !insn.addr !4694
  %70 = add i32 %69, 1, !insn.addr !4696
  %71 = inttoptr i32 %70 to i32*, !insn.addr !4697
  store i32 1660881032, i32* %71, align 4, !insn.addr !4697
  ret i32 %70, !insn.addr !4697

dec_label_pc_40b4b6:                              ; preds = %dec_label_pc_40b499
  %72 = icmp ule i8 %64, %61, !insn.addr !4694
  %73 = icmp ugt i8 %61, -63, !insn.addr !4694
  %74 = select i1 %60, i1 %72, i1 %73, !insn.addr !4694
  %75 = and i8 %61, 15, !insn.addr !4694
  %76 = add nuw nsw i8 %75, 14, !insn.addr !4694
  %77 = add nuw nsw i8 %76, %62, !insn.addr !4694
  %78 = icmp ugt i8 %77, 15, !insn.addr !4694
  %79 = and i8 %64, 14, !insn.addr !4698
  %80 = icmp ugt i8 %79, 9, !insn.addr !4698
  %81 = or i1 %78, %80, !insn.addr !4698
  %82 = icmp ugt i8 %64, -103
  %83 = or i1 %82, %74
  %.v = select i1 %83, i32 154, i32 250
  %84 = add nuw nsw i32 %.v, %66
  %85 = add nuw nsw i32 %66, 160
  %86 = select i1 %83, i32 %85, i32 %66
  %.pn.in = select i1 %81, i32 %84, i32 %86
  %.pn = and i32 %.pn.in, 255
  %storemerge = or i32 %.pn, %67
  %87 = add i32 %3, %1, !insn.addr !4699
  %88 = xor i32 %87, %3, !insn.addr !4699
  %89 = xor i32 %87, %1, !insn.addr !4699
  %90 = and i32 %88, %89, !insn.addr !4699
  %91 = icmp slt i32 %90, 0, !insn.addr !4699
  %92 = icmp slt i32 %87, 0, !insn.addr !4699
  %93 = inttoptr i32 %3 to i32*, !insn.addr !4699
  store i32 %87, i32* %93, align 4, !insn.addr !4699
  %94 = icmp eq i1 %92, %91, !insn.addr !4700
  store i32 %storemerge, i32* %eax.0.reg2mem, !insn.addr !4700
  br i1 %94, label %95, label %dec_label_pc_40b4bd, !insn.addr !4700

; <label>:95:                                     ; preds = %dec_label_pc_40b4b6
  %96 = call i32 @function_40b440(), !insn.addr !4700
  store i32 %96, i32* %eax.0.reg2mem, !insn.addr !4700
  br label %dec_label_pc_40b4bd, !insn.addr !4700

dec_label_pc_40b4bd:                              ; preds = %95, %dec_label_pc_40b4b6
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4701
}

define i32 @function_40b4c7() local_unnamed_addr {
dec_label_pc_40b4c7:
  %edi = alloca i32, align 4
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, 1, !insn.addr !4702
  %4 = add i32 %0, 24, !insn.addr !4703
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4703
  %6 = load i8, i8* %5, align 1, !insn.addr !4703
  %7 = zext i8 %6 to i32, !insn.addr !4703
  %8 = mul i32 %7, 256, !insn.addr !4703
  %9 = and i32 %3, -65281, !insn.addr !4703
  %10 = or i32 %8, %9, !insn.addr !4703
  %11 = inttoptr i32 %10 to i32*, !insn.addr !4704
  store i32 -1962979192, i32* %11, align 4, !insn.addr !4704
  %12 = load i32, i32* %edi, align 4
  %13 = add i32 %12, 1669992192, !insn.addr !4705
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4705
  %15 = load i32, i32* %14, align 4, !insn.addr !4705
  %16 = or i32 %15, %1, !insn.addr !4705
  store i32 %16, i32* %14, align 4, !insn.addr !4705
  %17 = bitcast i32* %esi to i8*
  %18 = load i8, i8* %17, align 4, !insn.addr !4706
  %19 = bitcast i32* %edi to i8*
  %20 = load i8, i8* %19, align 4, !insn.addr !4706
  %21 = icmp ult i8 %18, %20, !insn.addr !4706
  %22 = zext i1 %21 to i32, !insn.addr !4707
  %23 = add i32 %3, %22, !insn.addr !4707
  %24 = mul i32 %23, 256
  %25 = sub i32 %0, %24
  %26 = and i32 %25, 65280, !insn.addr !4707
  %27 = and i32 %0, -65281, !insn.addr !4707
  %28 = or i32 %26, %27, !insn.addr !4707
  %29 = add i32 %10, 1, !insn.addr !4708
  %30 = add i32 %10, -624541679, !insn.addr !4709
  %31 = inttoptr i32 %30 to i8*, !insn.addr !4709
  %32 = load i8, i8* %31, align 1, !insn.addr !4709
  %33 = trunc i32 %1 to i8, !insn.addr !4709
  %34 = add i8 %32, %33, !insn.addr !4709
  store i8 %34, i8* %31, align 1, !insn.addr !4709
  %35 = inttoptr i32 %28 to i8*, !insn.addr !4710
  %36 = load i8, i8* %35, align 1, !insn.addr !4710
  %37 = udiv i32 %1, 256, !insn.addr !4710
  %38 = trunc i32 %37 to i8, !insn.addr !4710
  %39 = add i8 %36, %38, !insn.addr !4710
  store i8 %39, i8* %35, align 1, !insn.addr !4710
  ret i32 %29, !insn.addr !4711
}

define i32 @function_40b4f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_40b4f0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i16, !insn.addr !4712
  %3 = call i32 @__asm_in(i16 %2), !insn.addr !4712
  %4 = and i32 %arg1, 1024, !insn.addr !4713
  %5 = icmp eq i32 %4, 0, !insn.addr !4713
  %6 = or i32 %3, 12, !insn.addr !4714
  %7 = add i32 %6, -1869574000, !insn.addr !4715
  %8 = inttoptr i32 %7 to i8*, !insn.addr !4715
  %9 = load i8, i8* %8, align 1, !insn.addr !4715
  %10 = trunc i32 %1 to i8, !insn.addr !4715
  %11 = add i8 %9, %10, !insn.addr !4715
  store i8 %11, i8* %8, align 1, !insn.addr !4715
  %12 = select i1 %5, i32 4, i32 -4, !insn.addr !4716
  %13 = add i32 %0, %12, !insn.addr !4716
  %14 = call i32 @unknown_cc8600(), !insn.addr !4717
  %15 = inttoptr i32 %13 to i32*, !insn.addr !4718
  %16 = load i32, i32* %15, align 4, !insn.addr !4718
  call void @__asm_out.1(i32 64, i32 %16), !insn.addr !4719
  %17 = add nsw i32 %12, -59, !insn.addr !4718
  %18 = add i32 %17, %13, !insn.addr !4720
  %19 = inttoptr i32 %18 to i8*, !insn.addr !4720
  %20 = load i8, i8* %19, align 1, !insn.addr !4720
  %21 = trunc i32 %arg2 to i8
  %22 = add i8 %21, 2, !insn.addr !4720
  %23 = add i8 %22, %20, !insn.addr !4720
  store i8 %23, i8* %19, align 1, !insn.addr !4720
  %24 = add i32 %arg9, -9, !insn.addr !4721
  %25 = inttoptr i32 %24 to i8*, !insn.addr !4721
  store i8 -1, i8* %25, align 1, !insn.addr !4721
  %26 = add i32 %arg10, -1, !insn.addr !4722
  ret i32 %26, !insn.addr !4723
}

define i32 @function_40b540(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_40b540:
  %cf.0.reg2mem = alloca i1, !insn.addr !4724
  %ebx = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %1, -4, !insn.addr !4725
  %5 = bitcast i32* %ebx to i8*
  %6 = load i8, i8* %5, align 4, !insn.addr !4726
  %7 = trunc i32 %1 to i8, !insn.addr !4726
  %8 = zext i1 %3 to i8, !insn.addr !4726
  %9 = add i8 %8, %7, !insn.addr !4726
  %10 = add i8 %9, %6, !insn.addr !4726
  %11 = load i32, i32* %ebx, align 4, !insn.addr !4726
  %12 = inttoptr i32 %11 to i8*, !insn.addr !4726
  store i8 %10, i8* %12, align 1, !insn.addr !4726
  %13 = add i32 %1, -4108, !insn.addr !4727
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4727
  store i32 %4, i32* %14, align 4, !insn.addr !4727
  %15 = and i32 %2, 138, !insn.addr !4728
  %16 = or i32 %15, 117, !insn.addr !4728
  %17 = and i32 %2, -256, !insn.addr !4728
  %18 = or i32 %16, %17, !insn.addr !4728
  %19 = load i32, i32* %ebx, align 4
  %20 = add i32 %19, -150693308, !insn.addr !4729
  %21 = inttoptr i32 %20 to i32*, !insn.addr !4729
  %22 = load i32, i32* %21, align 4, !insn.addr !4729
  %23 = or i32 %22, %1, !insn.addr !4729
  store i32 %23, i32* %21, align 4, !insn.addr !4729
  %24 = trunc i32 %0 to i8, !insn.addr !4730
  %25 = trunc i32 %16 to i8, !insn.addr !4730
  %26 = and i8 %24, 15, !insn.addr !4730
  %27 = and i8 %25, 15, !insn.addr !4730
  %28 = sub nsw i8 %26, %27, !insn.addr !4730
  %29 = icmp ugt i8 %28, 15, !insn.addr !4730
  %30 = inttoptr i32 %18 to i8*, !insn.addr !4731
  store i8 %25, i8* %30, align 1, !insn.addr !4731
  %31 = zext i32 %1 to i64, !insn.addr !4732
  %32 = zext i32 %18 to i64, !insn.addr !4732
  %33 = mul nuw i64 %32, %31, !insn.addr !4732
  %34 = trunc i64 %33 to i32, !insn.addr !4732
  %35 = and i64 %33, -4294967296, !insn.addr !4732
  store i32 %34, i32* %ebx, align 4, !insn.addr !4733
  %36 = add i32 %1, -4096, !insn.addr !4734
  %37 = inttoptr i32 %36 to i32*, !insn.addr !4734
  %38 = load i32, i32* %37, align 4, !insn.addr !4734
  %39 = add i32 %1, 1834152716, !insn.addr !4735
  %40 = inttoptr i32 %39 to i32*, !insn.addr !4735
  %41 = load i32, i32* %40, align 4, !insn.addr !4735
  %42 = zext i32 %38 to i64, !insn.addr !4735
  %43 = or i64 %35, %42, !insn.addr !4735
  %44 = zext i32 %41 to i64, !insn.addr !4735
  %45 = sdiv i64 %43, %44, !insn.addr !4735
  %46 = trunc i64 %45 to i32, !insn.addr !4735
  %47 = inttoptr i32 %46 to i32*, !insn.addr !4736
  %48 = load i32, i32* %47, align 4, !insn.addr !4736
  %49 = trunc i64 %45 to i8, !insn.addr !4737
  %50 = and i8 %49, 14, !insn.addr !4737
  %51 = icmp ugt i8 %50, 9, !insn.addr !4737
  %52 = or i1 %29, %51, !insn.addr !4737
  %53 = add i8 %49, 10, !insn.addr !4737
  %54 = select i1 %52, i8 %53, i8 %49, !insn.addr !4737
  %55 = and i8 %54, 15, !insn.addr !4737
  %56 = inttoptr i32 %34 to i8*, !insn.addr !4738
  %57 = load i8, i8* %56, align 1, !insn.addr !4738
  %58 = zext i1 %52 to i8, !insn.addr !4738
  %59 = add nuw nsw i8 %55, %58, !insn.addr !4738
  %60 = sub i8 %57, %59, !insn.addr !4738
  %61 = icmp ult i8 %57, %59, !insn.addr !4738
  %62 = or i1 %52, %61, !insn.addr !4738
  store i8 %60, i8* %56, align 1, !insn.addr !4738
  %63 = and i32 %48, 31, !insn.addr !4739
  %64 = icmp eq i32 %63, 0, !insn.addr !4739
  store i1 %62, i1* %cf.0.reg2mem, !insn.addr !4739
  br i1 %64, label %87, label %65, !insn.addr !4739

; <label>:65:                                     ; preds = %dec_label_pc_40b540
  %66 = add i32 %34, 108, !insn.addr !4739
  %67 = inttoptr i32 %66 to i32*, !insn.addr !4739
  %68 = load i32, i32* %67, align 4, !insn.addr !4739
  %69 = zext i1 %62 to i32, !insn.addr !4739
  %70 = lshr i32 %68, %63, !insn.addr !4739
  %71 = zext i32 %68 to i64, !insn.addr !4739
  %72 = sub nsw i32 33, %63, !insn.addr !4739
  %73 = zext i32 %72 to i64, !insn.addr !4739
  %74 = shl i64 %71, %73, !insn.addr !4739
  %75 = sub nsw i32 32, %63, !insn.addr !4739
  %76 = shl i32 %69, %75, !insn.addr !4739
  %77 = trunc i64 %74 to i32
  %78 = or i32 %70, %77
  %79 = or i32 %78, %76, !insn.addr !4739
  %80 = load i32, i32* %ebx, align 4, !insn.addr !4739
  %81 = add i32 %80, 108, !insn.addr !4739
  %82 = inttoptr i32 %81 to i32*, !insn.addr !4739
  store i32 %79, i32* %82, align 4, !insn.addr !4739
  %83 = add nsw i32 %63, -1, !insn.addr !4739
  %84 = shl i32 1, %83, !insn.addr !4739
  %85 = and i32 %84, %68, !insn.addr !4739
  %86 = icmp ne i32 %85, 0, !insn.addr !4739
  store i1 %86, i1* %cf.0.reg2mem, !insn.addr !4739
  br label %87, !insn.addr !4739

; <label>:87:                                     ; preds = %dec_label_pc_40b540, %65
  %88 = inttoptr i32 %4 to i32*, !insn.addr !4725
  %89 = sext i1 %52 to i32, !insn.addr !4737
  %90 = zext i8 %55 to i32, !insn.addr !4737
  %91 = and i32 %46, -65536, !insn.addr !4737
  %92 = or i32 %91, %90, !insn.addr !4737
  %93 = mul i32 %89, 256
  %94 = add i32 %93, %46
  %95 = and i32 %94, 65280, !insn.addr !4737
  %96 = or i32 %92, %95, !insn.addr !4737
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %97 = inttoptr i32 %96 to i8*, !insn.addr !4740
  %98 = load i8, i8* %97, align 1, !insn.addr !4740
  %99 = zext i1 %cf.0.reload to i8, !insn.addr !4740
  %100 = add i8 %98, %55, !insn.addr !4740
  %101 = add i8 %100, %99, !insn.addr !4740
  store i8 %101, i8* %97, align 1, !insn.addr !4740
  %102 = call i32 @__asm_int3(), !insn.addr !4741
  %103 = call i32 @__asm_int3(), !insn.addr !4742
  %104 = call i32 @__asm_int3(), !insn.addr !4743
  %105 = call i32 @__asm_int3(), !insn.addr !4744
  %106 = call i32 @__asm_int3(), !insn.addr !4745
  %107 = call i32 @__asm_int3(), !insn.addr !4746
  %108 = call i32 @__asm_int3(), !insn.addr !4747
  %109 = call i32 @__asm_int3(), !insn.addr !4748
  %110 = call i32 @__asm_int3(), !insn.addr !4749
  %111 = call i32 @__asm_int3(), !insn.addr !4750
  %112 = call i32 @__asm_int3(), !insn.addr !4751
  %113 = call i32 @__asm_int3(), !insn.addr !4752
  %114 = call i32 @__asm_int3(), !insn.addr !4753
  %115 = call i32 @__asm_int3(), !insn.addr !4754
  %116 = call i32 @__asm_int3(), !insn.addr !4755
  %117 = call i32 @__asm_int3(), !insn.addr !4756
  %118 = call i32 @__asm_int3(), !insn.addr !4757
  %119 = call i32 @__asm_int3(), !insn.addr !4758
  ret i32 %119, !insn.addr !4758
}

define i32 @function_40b590(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b590:
  %edi.0.reg2mem = alloca i32, !insn.addr !4759
  %ebx.0.reg2mem = alloca i32, !insn.addr !4759
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = add i32 %1, -117, !insn.addr !4760
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4760
  %9 = load i32, i32* %8, align 4, !insn.addr !4760
  %10 = xor i32 %9, %1, !insn.addr !4760
  %11 = and i32 %5, -236, !insn.addr !4761
  %12 = icmp slt i32 %11, 0, !insn.addr !4762
  %13 = icmp eq i1 %12, false, !insn.addr !4763
  br i1 %13, label %dec_label_pc_40b5b1, label %dec_label_pc_40b59d, !insn.addr !4763

dec_label_pc_40b59d:                              ; preds = %dec_label_pc_40b590
  %14 = add i32 %0, 1, !insn.addr !4764
  %15 = and i32 %3, -65281, !insn.addr !4765
  %16 = add i32 %10, -116, !insn.addr !4766
  %17 = inttoptr i32 %16 to i8*, !insn.addr !4766
  %18 = load i8, i8* %17, align 1, !insn.addr !4766
  %19 = trunc i32 %4 to i8, !insn.addr !4766
  %20 = add i8 %18, %19, !insn.addr !4766
  store i8 %20, i8* %17, align 1, !insn.addr !4766
  store i32 %15, i32* %ebx.0.reg2mem, !insn.addr !4767
  store i32 %14, i32* %edi.0.reg2mem, !insn.addr !4767
  br label %dec_label_pc_40b5b1, !insn.addr !4767

dec_label_pc_40b5b1:                              ; preds = %dec_label_pc_40b59d, %dec_label_pc_40b590
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %21 = add nsw i32 %11, 44, !insn.addr !4768
  %22 = and i32 %5, -256, !insn.addr !4768
  %23 = and i32 %21, 36, !insn.addr !4769
  %24 = or i32 %22, %23, !insn.addr !4769
  %25 = or i32 %24, 216, !insn.addr !4769
  %26 = icmp ne i32 %arg1, 0, !insn.addr !4770
  %.neg = sext i1 %26 to i32
  %27 = add nsw i32 %.neg, 36, !insn.addr !4771
  %28 = add i32 %27, %25, !insn.addr !4772
  %29 = inttoptr i32 %28 to i32*, !insn.addr !4772
  store i32 %10, i32* %29, align 4, !insn.addr !4772
  %30 = add i32 %edi.0.reload, 20, !insn.addr !4773
  %31 = inttoptr i32 %30 to i32*, !insn.addr !4773
  %32 = load i32, i32* %31, align 4, !insn.addr !4773
  %33 = add i32 %32, 1411662987, !insn.addr !4774
  %34 = inttoptr i32 %33 to i32*, !insn.addr !4774
  %35 = load i32, i32* %34, align 4, !insn.addr !4774
  %36 = trunc i32 %35 to i8, !insn.addr !4775
  %37 = add i8 %36, -21, !insn.addr !4775
  %38 = call i8 @llvm.ctpop.i8(i8 %37), !range !405, !insn.addr !4775
  %39 = and i8 %38, 1, !insn.addr !4775
  %40 = icmp eq i8 %39, 0, !insn.addr !4775
  %41 = zext i8 %37 to i32, !insn.addr !4775
  %42 = and i32 %35, -256, !insn.addr !4775
  %43 = icmp eq i1 %40, false, !insn.addr !4776
  %44 = or i32 %42, %41
  br i1 %43, label %dec_label_pc_40b61a, label %dec_label_pc_40b5ea, !insn.addr !4776

dec_label_pc_40b5ea:                              ; preds = %dec_label_pc_40b5b1
  %45 = xor i32 %44, 608471828, !insn.addr !4777
  ret i32 %45, !insn.addr !4778

dec_label_pc_40b61a:                              ; preds = %dec_label_pc_40b5b1
  %46 = or i32 %44, 8, !insn.addr !4779
  %47 = icmp ugt i32 %46, %6
  br i1 %47, label %dec_label_pc_40b626, label %dec_label_pc_40b655, !insn.addr !4780

dec_label_pc_40b626:                              ; preds = %dec_label_pc_40b61a
  %48 = and i32 %44, -136644857, !insn.addr !4781
  %49 = add i32 %48, 1526782595, !insn.addr !4782
  ret i32 %49, !insn.addr !4783

dec_label_pc_40b655:                              ; preds = %dec_label_pc_40b61a
  %50 = add i32 %10, 1399778435, !insn.addr !4784
  %51 = inttoptr i32 %50 to i8*, !insn.addr !4784
  %52 = load i8, i8* %51, align 1, !insn.addr !4784
  %53 = trunc i32 %ebx.0.reload to i8, !insn.addr !4784
  %54 = add i8 %52, %53, !insn.addr !4784
  store i8 %54, i8* %51, align 1, !insn.addr !4784
  store i32 %edi.0.reload, i32* %stack_var_-24, align 4, !insn.addr !4785
  %55 = add i32 %2, -23, !insn.addr !4786
  %56 = inttoptr i32 %55 to i32*, !insn.addr !4786
  %57 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !4786
  store i32 %57, i32* %56, align 4, !insn.addr !4786
  %58 = add i32 %2, -115, !insn.addr !4787
  %59 = inttoptr i32 %58 to i32*, !insn.addr !4787
  store i32 0, i32* %59, align 4, !insn.addr !4787
  call void @__set_app_type(i32 1), !insn.addr !4788
  store i32 -1, i32* @global_var_414054, align 4, !insn.addr !4789
  store i32 -1, i32* @global_var_414058, align 4, !insn.addr !4790
  ret i32 ptrtoint (i32* @0 to i32), !insn.addr !4791
}

define i32 @function_40b683() local_unnamed_addr {
dec_label_pc_40b683:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i32 @__decompiler_undefined_function_0()
  %sext = mul i32 %4, 65536
  %7 = sdiv i32 %sext, 65536, !insn.addr !4792
  %8 = add i32 %3, 1, !insn.addr !4793
  %9 = zext i1 %5 to i32, !insn.addr !4794
  %10 = add i32 %7, -1740603944, !insn.addr !4794
  %11 = add i32 %10, %9, !insn.addr !4794
  %12 = trunc i32 %11 to i8, !insn.addr !4795
  store i8 %12, i8* inttoptr (i32 -1059282674 to i8*), align 2, !insn.addr !4795
  %13 = add i32 %11, 1, !insn.addr !4796
  %14 = inttoptr i32 %8 to i8*, !insn.addr !4797
  %15 = load i8, i8* %14, align 1, !insn.addr !4797
  %16 = udiv i32 %2, 256, !insn.addr !4797
  %17 = trunc i32 %16 to i8, !insn.addr !4797
  %18 = add i8 %15, %17, !insn.addr !4797
  store i8 %18, i8* %14, align 1, !insn.addr !4797
  %19 = add i32 %2, ptrtoint (i8** @global_var_411a50 to i32), !insn.addr !4798
  %20 = inttoptr i32 %19 to i8*, !insn.addr !4798
  %21 = load i8, i8* %20, align 1, !insn.addr !4798
  %22 = udiv i32 %13, 256, !insn.addr !4798
  %23 = trunc i32 %22 to i8, !insn.addr !4798
  %24 = add i8 %21, %23, !insn.addr !4798
  store i8 %24, i8* %20, align 1, !insn.addr !4798
  %25 = call i32 @function_40b947(i32 %1), !insn.addr !4799
  %26 = trunc i32 %25 to i8, !insn.addr !4800
  %27 = inttoptr i32 %0 to i8*, !insn.addr !4800
  store i8 %26, i8* %27, align 1, !insn.addr !4800
  %28 = call i32 @function_40b932(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4801
  %29 = call i32 @unknown_e0b92c(i32* nonnull @global_var_40d023, i32* nonnull @global_var_40d00c), !insn.addr !4802
  %30 = load i32, i32* inttoptr (i32 -129955029 to i32*), align 4, !insn.addr !4803
  %31 = add i32 %6, -40, !insn.addr !4804
  %32 = inttoptr i32 %31 to i32*, !insn.addr !4804
  store i32 %30, i32* %32, align 4, !insn.addr !4804
  %33 = load i32, i32* inttoptr (i32 15653772 to i32*), align 4, !insn.addr !4805
  %34 = add i32 %6, -32, !insn.addr !4806
  %35 = inttoptr i32 %34 to i8***, !insn.addr !4807
  %36 = add i32 %6, -44, !insn.addr !4808
  %37 = inttoptr i32 %36 to i8***, !insn.addr !4809
  %38 = add i32 %6, -28, !insn.addr !4810
  %39 = inttoptr i32 %38 to i32*, !insn.addr !4811
  %40 = call i32 @__getmainargs(i32* %39, i8*** %37, i8*** %35, i32 %33, i32* %32), !insn.addr !4811
  %41 = call i32 @function_40b92c(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @global_var_40d0a4, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_40d0cf, i32 0, i32 0)), !insn.addr !4812
  %42 = call i32 @__p___initenv(), !insn.addr !4813
  %43 = inttoptr i32 %34 to i32*, !insn.addr !4814
  %44 = load i32, i32* %43, align 4, !insn.addr !4814
  %45 = inttoptr i32 %42 to i32*, !insn.addr !4815
  store i32 %44, i32* %45, align 4, !insn.addr !4815
  ret i32 %42, !insn.addr !4816
}

define i32 @function_40b715() local_unnamed_addr {
dec_label_pc_40b715:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = icmp ugt i32 %1, 14, !insn.addr !4817
  %5 = inttoptr i32 %2 to i32*, !insn.addr !4818
  store i32 -829213, i32* %5, align 4, !insn.addr !4818
  %6 = zext i1 %4 to i32, !insn.addr !4819
  %7 = add i32 %3, -1360871056, !insn.addr !4819
  %8 = add i32 %7, %6, !insn.addr !4819
  %9 = icmp ule i32 %8, %3, !insn.addr !4819
  %10 = icmp ugt i32 %3, 1360871055, !insn.addr !4819
  %11 = select i1 %4, i1 %9, i1 %10, !insn.addr !4819
  %12 = add i32 %0, -20, !insn.addr !4820
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4820
  %14 = load i32, i32* %13, align 4, !insn.addr !4820
  %15 = add i32 %14, 81, !insn.addr !4821
  %16 = inttoptr i32 %15 to i8*, !insn.addr !4821
  %17 = load i8, i8* %16, align 1, !insn.addr !4821
  %18 = mul i8 %17, 2, !insn.addr !4821
  %19 = zext i1 %11 to i8, !insn.addr !4821
  %20 = or i8 %18, %19, !insn.addr !4821
  store i8 %20, i8* %16, align 1, !insn.addr !4821
  %21 = call i32 @unknown_a040b870(), !insn.addr !4822
  ret i32 %21, !insn.addr !4823
}

define i32 @function_40b73f() local_unnamed_addr {
dec_label_pc_40b73f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define x86_fp80 @function_40b750(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40b750:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_4()
  %3 = trunc i32 %1 to i8, !insn.addr !4824
  %4 = and i8 %3, 31, !insn.addr !4824
  %5 = icmp eq i8 %4, 0, !insn.addr !4824
  br i1 %5, label %18, label %6, !insn.addr !4824

; <label>:6:                                      ; preds = %dec_label_pc_40b750
  %7 = mul i32 %arg2, 2, !insn.addr !4824
  %8 = add i32 %0, %7, !insn.addr !4824
  %9 = inttoptr i32 %8 to i8*, !insn.addr !4824
  %10 = load i8, i8* %9, align 1, !insn.addr !4824
  %11 = shl i8 %10, %4, !insn.addr !4824
  %12 = zext i8 %10 to i16, !insn.addr !4824
  %13 = sub nsw i8 9, %4, !insn.addr !4824
  %14 = zext i8 %13 to i16, !insn.addr !4824
  %15 = lshr i16 %12, %14, !insn.addr !4824
  %16 = trunc i16 %15 to i8
  %17 = or i8 %11, %16
  store i8 %17, i8* %9, align 1, !insn.addr !4824
  br label %18, !insn.addr !4824

; <label>:18:                                     ; preds = %dec_label_pc_40b750, %6
  %19 = fdiv x86_fp80 %2, %2, !insn.addr !4825
  ret x86_fp80 %19, !insn.addr !4825
}

define i32 @function_40b765(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_40b765:
  %eax.0.reg2mem = alloca i32, !insn.addr !4826
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-3 = alloca i32, align 4
  %5 = add i32 %3, -1, !insn.addr !4826
  %6 = icmp ne i32 %5, 0, !insn.addr !4826
  %7 = icmp eq i1 %6, %4, !insn.addr !4826
  br i1 %7, label %8, label %dec_label_pc_40b767, !insn.addr !4826

; <label>:8:                                      ; preds = %dec_label_pc_40b765
  %9 = call i32 @function_40b73f(), !insn.addr !4826
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !4826
  br label %dec_label_pc_40b767, !insn.addr !4826

dec_label_pc_40b767:                              ; preds = %8, %dec_label_pc_40b765
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %10 = add i32 %3, -1995420861, !insn.addr !4827
  %11 = inttoptr i32 %10 to i8*, !insn.addr !4827
  %12 = load i8, i8* %11, align 1, !insn.addr !4827
  %13 = trunc i32 %5 to i8, !insn.addr !4827
  %14 = add i8 %12, %13, !insn.addr !4827
  store i8 %14, i8* %11, align 1, !insn.addr !4827
  %15 = mul i32 %5, 4, !insn.addr !4828
  %16 = add i32 %2, 186131524, !insn.addr !4828
  %17 = add i32 %16, %15, !insn.addr !4828
  %18 = inttoptr i32 %17 to i32*, !insn.addr !4828
  %19 = load i32, i32* %18, align 4, !insn.addr !4828
  %20 = inttoptr i32 %19 to i8*, !insn.addr !4829
  store i8 -1, i8* %20, align 1, !insn.addr !4829
  %21 = sub i32 0, %eax.0.reload, !insn.addr !4830
  %22 = sub i32 0, %arg5, !insn.addr !4831
  %23 = add i32 %0, 119, !insn.addr !4832
  %24 = inttoptr i32 %0 to i32*, !insn.addr !4832
  store i32 %23, i32* %24, align 4, !insn.addr !4832
  %25 = ptrtoint i32* %stack_var_-3 to i32, !insn.addr !4833
  %26 = and i32 %21, -232, !insn.addr !4834
  %27 = mul i32 %26, 8, !insn.addr !4835
  %28 = add i32 %25, 20, !insn.addr !4835
  %29 = add i32 %28, %27, !insn.addr !4835
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4835
  store i32 %22, i32* %30, align 4, !insn.addr !4835
  %31 = icmp eq i32 %26, 0, !insn.addr !4836
  %32 = icmp eq i1 %31, false, !insn.addr !4837
  br i1 %32, label %dec_label_pc_40b7aa, label %dec_label_pc_40b78f, !insn.addr !4837

dec_label_pc_40b78f:                              ; preds = %dec_label_pc_40b767
  %33 = trunc i32 %arg6 to i8, !insn.addr !4838
  %34 = and i8 %33, 31, !insn.addr !4838
  %35 = icmp eq i8 %34, 0, !insn.addr !4838
  br i1 %35, label %dec_label_pc_40b7a8, label %36, !insn.addr !4838

; <label>:36:                                     ; preds = %dec_label_pc_40b78f
  %37 = add i32 %1, 608471953, !insn.addr !4838
  %38 = inttoptr i32 %37 to i8*, !insn.addr !4838
  %39 = load i8, i8* %38, align 1, !insn.addr !4838
  %40 = shl i8 %39, %34, !insn.addr !4838
  store i8 %40, i8* %38, align 1, !insn.addr !4838
  br label %dec_label_pc_40b7a8, !insn.addr !4838

dec_label_pc_40b7a8:                              ; preds = %dec_label_pc_40b78f, %36
  %41 = or i32 %arg4, 247, !insn.addr !4839
  %42 = add i32 %2, 1339173570, !insn.addr !4840
  %43 = inttoptr i32 %42 to i32*, !insn.addr !4840
  store i32 %arg6, i32* %43, align 4, !insn.addr !4840
  ret i32 %41, !insn.addr !4841

dec_label_pc_40b7aa:                              ; preds = %dec_label_pc_40b767
  ret i32 %26, !insn.addr !4842
}

define i32 @function_40b804() local_unnamed_addr {
dec_label_pc_40b804:
  %0 = call i32 @__asm_int3(), !insn.addr !4843
  %1 = call i32 @__asm_int3(), !insn.addr !4844
  %2 = call i32 @__asm_int3(), !insn.addr !4845
  %3 = call i32 @__asm_int3(), !insn.addr !4846
  %4 = call i32 @__asm_int3(), !insn.addr !4847
  %5 = call i32 @__asm_int3(), !insn.addr !4848
  %6 = call i32 @__asm_int3(), !insn.addr !4849
  %7 = call i32 @__asm_int3(), !insn.addr !4850
  %8 = call i32 @__asm_int3(), !insn.addr !4851
  %9 = call i32 @__asm_int3(), !insn.addr !4852
  %10 = call i32 @__asm_int3(), !insn.addr !4853
  %11 = call i32 @__asm_int3(), !insn.addr !4854
  ret i32 %11, !insn.addr !4854
}

define i32 @function_40b810() local_unnamed_addr {
dec_label_pc_40b810:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8, !insn.addr !4855
  %4 = icmp ult i8 %3, 64, !insn.addr !4855
  %5 = icmp eq i1 %4, false, !insn.addr !4856
  br i1 %5, label %dec_label_pc_40b82b, label %dec_label_pc_40b815, !insn.addr !4856

dec_label_pc_40b815:                              ; preds = %dec_label_pc_40b810
  %6 = icmp ult i8 %3, 32, !insn.addr !4857
  %7 = icmp eq i1 %6, false, !insn.addr !4858
  br i1 %7, label %dec_label_pc_40b820, label %dec_label_pc_40b81a, !insn.addr !4858

dec_label_pc_40b81a:                              ; preds = %dec_label_pc_40b815
  %8 = and i32 %1, 31, !insn.addr !4859
  %9 = icmp eq i32 %8, 0, !insn.addr !4859
  br i1 %9, label %16, label %10, !insn.addr !4859

; <label>:10:                                     ; preds = %dec_label_pc_40b81a
  %11 = shl i32 %0, %8, !insn.addr !4859
  %12 = sub nsw i32 32, %8, !insn.addr !4859
  %13 = lshr i32 %0, %12, !insn.addr !4859
  %14 = or i32 %13, %11, !insn.addr !4859
  %15 = inttoptr i32 %0 to i32*, !insn.addr !4859
  store i32 %14, i32* %15, align 4, !insn.addr !4859
  br label %16, !insn.addr !4859

; <label>:16:                                     ; preds = %dec_label_pc_40b81a, %10
  %17 = icmp ult i8 %3, 33
  %18 = icmp ne i1 %17, true, !insn.addr !4860
  %19 = zext i1 %18 to i32, !insn.addr !4860
  %20 = and i32 %2, -256, !insn.addr !4860
  %21 = or i32 %20, %19, !insn.addr !4860
  ret i32 %21, !insn.addr !4861

dec_label_pc_40b820:                              ; preds = %dec_label_pc_40b815
  %22 = call i32 @__asm_int1(), !insn.addr !4862
  ret i32 %22, !insn.addr !4863

dec_label_pc_40b82b:                              ; preds = %dec_label_pc_40b810
  %23 = call i32 @__asm_int3(), !insn.addr !4864
  %24 = call i32 @__asm_int3(), !insn.addr !4865
  %25 = call i32 @function_40b804(), !insn.addr !4866
  ret i32 %25, !insn.addr !4866
}

define i32 @function_40b83b(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b83b:
  %stack_var_196 = alloca i32, align 4
  %0 = call i32 @__asm_int3(), !insn.addr !4867
  %1 = call i32 @__asm_int3(), !insn.addr !4868
  %2 = ptrtoint i32* %stack_var_196 to i32, !insn.addr !4869
  ret i32 %2, !insn.addr !4870
}

define i32 @function_40b870() local_unnamed_addr {
dec_label_pc_40b870:
  %eax.1.reg2mem = alloca i32, !insn.addr !4871
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = icmp eq i1 %3, false, !insn.addr !4872
  br i1 %4, label %dec_label_pc_40b88a, label %dec_label_pc_40b875, !insn.addr !4872

dec_label_pc_40b875:                              ; preds = %dec_label_pc_40b870
  %5 = add i32 %2, 1, !insn.addr !4873
  %6 = trunc i32 %1 to i8, !insn.addr !4874
  %7 = icmp ult i8 %6, 32, !insn.addr !4874
  %8 = icmp eq i1 %7, false, !insn.addr !4875
  br i1 %8, label %dec_label_pc_40b880, label %dec_label_pc_40b87a, !insn.addr !4875

dec_label_pc_40b87a:                              ; preds = %dec_label_pc_40b875
  %9 = and i32 %1, 31, !insn.addr !4876
  %10 = shl i32 %5, %9
  ret i32 %10

dec_label_pc_40b88a:                              ; preds = %dec_label_pc_40b870
  ret i32 0, !insn.addr !4877

dec_label_pc_40b880:                              ; preds = %dec_label_pc_40b875
  %11 = trunc i32 %5 to i8
  %12 = icmp sgt i8 %11, -1, !insn.addr !4878
  %13 = icmp ne i32 %1, 1, !insn.addr !4879
  %14 = icmp eq i1 %13, %12, !insn.addr !4879
  store i32 %5, i32* %eax.1.reg2mem, !insn.addr !4879
  br i1 %14, label %15, label %dec_label_pc_40b887, !insn.addr !4879

; <label>:15:                                     ; preds = %dec_label_pc_40b880
  %16 = call i32 @function_40b8ec(), !insn.addr !4879
  store i32 %16, i32* %eax.1.reg2mem, !insn.addr !4879
  br label %dec_label_pc_40b887, !insn.addr !4879

dec_label_pc_40b887:                              ; preds = %15, %dec_label_pc_40b880
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %17 = inttoptr i32 %0 to i32*, !insn.addr !4880
  store i32 %eax.1.reload, i32* %17, align 4, !insn.addr !4880
  ret i32 %eax.1.reload, !insn.addr !4881
}

define i32 @function_40b890() local_unnamed_addr {
dec_label_pc_40b890:
  %0 = call i32 @__asm_int1(), !insn.addr !4882
  %1 = trunc i32 %0 to i8, !insn.addr !4883
  store i8 %1, i8* inttoptr (i32 -137220848 to i8*), align 16, !insn.addr !4883
  %2 = call i32 @__asm_int1(), !insn.addr !4884
  %3 = call i32 @function_40b8f3(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4885
  ret i32 %3, !insn.addr !4885
}

define i32 @function_40b8b2(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b8b2:
  br label %dec_label_pc_40b8c4, !insn.addr !4886

dec_label_pc_40b8c4:                              ; preds = %dec_label_pc_40b8c4, %dec_label_pc_40b8b2
  br label %dec_label_pc_40b8c4, !insn.addr !4887
}

define i32 @function_40b8ec() local_unnamed_addr {
dec_label_pc_40b8ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4888
}

define i32 @function_40b8f3(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40b8f3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4889
}

define i32 @function_40b8f8() local_unnamed_addr {
dec_label_pc_40b8f8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_int3(), !insn.addr !4890
  %3 = call i32 @__asm_int3(), !insn.addr !4891
  %4 = call i32 @__asm_int3(), !insn.addr !4892
  %5 = trunc i32 %1 to i8, !insn.addr !4893
  %6 = icmp ult i8 %5, 64, !insn.addr !4893
  %7 = icmp eq i1 %6, false, !insn.addr !4894
  br i1 %7, label %dec_label_pc_40b91a, label %dec_label_pc_40b910, !insn.addr !4894

dec_label_pc_40b910:                              ; preds = %dec_label_pc_40b8f8
  %8 = trunc i32 %0 to i16, !insn.addr !4895
  %9 = trunc i32 %0 to i8, !insn.addr !4895
  call void @__asm_out.6(i16 %8, i8 %9), !insn.addr !4895
  %10 = add i32 %0, -388817010, !insn.addr !4896
  %11 = inttoptr i32 %10 to i32*, !insn.addr !4896
  %12 = load i32, i32* %11, align 4, !insn.addr !4896
  %13 = or i32 %12, %0, !insn.addr !4896
  ret i32 %13, !insn.addr !4897

dec_label_pc_40b91a:                              ; preds = %dec_label_pc_40b8f8
  call void @llvm.trap()
  unreachable
}

define i32 @function_40b92c(i8* %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_40b92c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i8 @__asm_in.7(i8 -64), !insn.addr !4898
  %2 = sext i8 %1 to i32, !insn.addr !4898
  %3 = and i32 %0, -256, !insn.addr !4898
  %4 = or i32 %3, %2, !insn.addr !4898
  %5 = add i32 %4, 1, !insn.addr !4899
  ret i32 %5, !insn.addr !4899
}

define i32 @function_40b932(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_40b932:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 26624, !insn.addr !4900
  %4 = inttoptr i32 %3 to i8*, !insn.addr !4900
  %5 = load i8, i8* %4, align 1, !insn.addr !4900
  %6 = trunc i32 %0 to i8, !insn.addr !4900
  %7 = add i8 %5, %6, !insn.addr !4900
  store i8 %7, i8* %4, align 1, !insn.addr !4900
  %8 = mul i32 %2, 2, !insn.addr !4901
  %9 = inttoptr i32 %2 to i32*, !insn.addr !4901
  store i32 %8, i32* %9, align 4, !insn.addr !4901
  %10 = call i32 @function_40b94e(), !insn.addr !4902
  ret i32 %10, !insn.addr !4903
}

define i32 @function_40b946() local_unnamed_addr {
dec_label_pc_40b946:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4904
}

define i32 @function_40b947(i32 %arg1) local_unnamed_addr {
dec_label_pc_40b947:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4905
}

define i32 @function_40b948() local_unnamed_addr {
dec_label_pc_40b948:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4906
}

define i32 @function_40b94e() local_unnamed_addr {
dec_label_pc_40b94e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4907
}

define i32 @function_40b960() local_unnamed_addr {
dec_label_pc_40b960:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40c2ea() local_unnamed_addr {
dec_label_pc_40c2ea:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_40d413(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14) local_unnamed_addr {
dec_label_pc_40d413:
  %esp.5.reg2mem = alloca i32, !insn.addr !4908
  %of.3.reg2mem = alloca i1, !insn.addr !4908
  %zf.5.reg2mem = alloca i1, !insn.addr !4908
  %eax.1.reg2mem = alloca i32, !insn.addr !4908
  %edi.2.reg2mem = alloca i32, !insn.addr !4908
  %esi.3.reg2mem = alloca i32, !insn.addr !4908
  %ebp.2.reg2mem = alloca i32, !insn.addr !4908
  %ebx.2.reg2mem = alloca i32, !insn.addr !4908
  %eax.0.reg2mem = alloca i32, !insn.addr !4908
  %esi.1.reg2mem = alloca i32, !insn.addr !4908
  %ebp.1.reg2mem = alloca i32, !insn.addr !4908
  %esp.0.reg2mem = alloca i32, !insn.addr !4908
  %.reg2mem = alloca i32, !insn.addr !4908
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !4908
  %merge.reg2mem = alloca i32, !insn.addr !4908
  %storemerge.reg2mem = alloca i32, !insn.addr !4908
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i8*, align 4
  %6 = trunc i32 %5 to i8
  %7 = inttoptr i32 %5 to i8*, !insn.addr !4909
  %8 = load i8, i8* %7, align 1, !insn.addr !4909
  %9 = add i8 %8, %6, !insn.addr !4909
  store i8 %9, i8* %7, align 1, !insn.addr !4909
  %10 = add i32 %4, 99, !insn.addr !4910
  %11 = inttoptr i32 %10 to i8*, !insn.addr !4910
  %12 = load i8, i8* %11, align 1, !insn.addr !4910
  %13 = add i8 %12, %6, !insn.addr !4910
  %14 = icmp eq i8 %13, 0, !insn.addr !4910
  store i8 %13, i8* %11, align 1, !insn.addr !4910
  %15 = add i32 %1, 112, !insn.addr !4911
  %16 = inttoptr i32 %15 to i16*, !insn.addr !4911
  %17 = load i16, i16* %16, align 2, !insn.addr !4911
  %18 = trunc i32 %2 to i16, !insn.addr !4911
  call void @__asm_arpl(i16 %17, i16 %18), !insn.addr !4911
  br i1 %14, label %dec_label_pc_40d459, label %dec_label_pc_40d41f, !insn.addr !4912

dec_label_pc_40d41f:                              ; preds = %dec_label_pc_40d413
  %19 = bitcast i32* %edx to i8*
  %20 = load i8, i8* %19, align 4, !insn.addr !4913
  %21 = udiv i32 %4, 256, !insn.addr !4913
  %22 = trunc i32 %21 to i8, !insn.addr !4913
  %23 = and i8 %20, %22, !insn.addr !4913
  %24 = load i32, i32* %edx, align 4, !insn.addr !4913
  %25 = inttoptr i32 %24 to i8*, !insn.addr !4913
  store i8 %23, i8* %25, align 1, !insn.addr !4913
  %26 = and i8 %6, 14, !insn.addr !4914
  %27 = icmp ugt i8 %26, 9, !insn.addr !4914
  %28 = icmp ugt i8 %6, -103
  br i1 %27, label %29, label %34, !insn.addr !4914

; <label>:29:                                     ; preds = %dec_label_pc_40d41f
  %.v = select i1 %28, i32 154, i32 250
  %30 = add i32 %.v, %5, !insn.addr !4914
  %31 = and i32 %30, 255, !insn.addr !4914
  %32 = and i32 %5, -256, !insn.addr !4914
  %33 = or i32 %31, %32, !insn.addr !4914
  store i32 %33, i32* %storemerge.reg2mem, !insn.addr !4914
  br label %40, !insn.addr !4914

; <label>:34:                                     ; preds = %dec_label_pc_40d41f
  %35 = add i32 %5, 160, !insn.addr !4914
  %36 = select i1 %28, i32 %35, i32 %5, !insn.addr !4914
  %37 = and i32 %36, 255, !insn.addr !4914
  %38 = and i32 %5, -256, !insn.addr !4914
  %39 = or i32 %37, %38, !insn.addr !4914
  store i32 %39, i32* %storemerge.reg2mem, !insn.addr !4914
  br label %40, !insn.addr !4914

; <label>:40:                                     ; preds = %29, %34
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %41 = trunc i32 %4 to i8, !insn.addr !4915
  %42 = load i8, i8* inttoptr (i32 10 to i8*), align 2, !insn.addr !4915
  %43 = icmp ugt i8 %42, %41, !insn.addr !4915
  %44 = inttoptr i32 %1 to i8*, !insn.addr !4916
  store i8* %44, i8** %stack_var_-4, align 4, !insn.addr !4916
  %45 = icmp eq i1 %43, false, !insn.addr !4917
  br i1 %45, label %.dec_label_pc_40d490_crit_edge, label %dec_label_pc_40d45a, !insn.addr !4917

.dec_label_pc_40d490_crit_edge:                   ; preds = %40
  %46 = ptrtoint i8** %stack_var_-4 to i32, !insn.addr !4916
  %.pre5 = bitcast i8** %stack_var_-4 to i32*, !insn.addr !4918
  store i32* %.pre5, i32** %.pre-phi.reg2mem
  store i32 %storemerge.reload, i32* %.reg2mem
  store i32 %46, i32* %esp.0.reg2mem
  br label %dec_label_pc_40d490

dec_label_pc_40d459:                              ; preds = %dec_label_pc_40d677, %dec_label_pc_40d5fd, %dec_label_pc_40d413
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !4919

dec_label_pc_40d45a:                              ; preds = %40
  %47 = icmp eq i8 %42, %41, !insn.addr !4915
  br i1 %47, label %dec_label_pc_40d4bb, label %dec_label_pc_40d46d, !insn.addr !4920

dec_label_pc_40d46d:                              ; preds = %dec_label_pc_40d45a
  %48 = load i32, i32* %edx, align 4, !insn.addr !4921
  %49 = add i32 %48, 101, !insn.addr !4921
  %50 = inttoptr i32 %49 to i16*, !insn.addr !4921
  %51 = load i16, i16* %50, align 2, !insn.addr !4921
  %52 = trunc i32 %0 to i16, !insn.addr !4921
  call void @__asm_arpl(i16 %51, i16 %52), !insn.addr !4921
  %53 = load i8*, i8** %stack_var_-4, align 4, !insn.addr !4922
  %54 = ptrtoint i8* %53 to i32, !insn.addr !4922
  store i32 %arg4, i32* %edx, align 4, !insn.addr !4922
  %55 = add i32 %arg1, 97, !insn.addr !4923
  %56 = inttoptr i32 %55 to i8*, !insn.addr !4923
  %57 = load i8, i8* %56, align 1, !insn.addr !4923
  %58 = udiv i32 %arg6, 256, !insn.addr !4923
  %59 = trunc i32 %58 to i8, !insn.addr !4923
  %60 = and i8 %57, %59, !insn.addr !4923
  store i8 %60, i8* %56, align 1, !insn.addr !4923
  %61 = add i32 %arg2, 100, !insn.addr !4924
  %62 = inttoptr i32 %61 to i32*, !insn.addr !4924
  %63 = load i32, i32* %62, align 4, !insn.addr !4924
  %64 = sext i32 %63 to i64, !insn.addr !4924
  %65 = mul nsw i64 %64, 671088640, !insn.addr !4924
  %66 = trunc i64 %65 to i32, !insn.addr !4924
  %67 = mul i64 %64, 2882303761517117440
  %68 = sdiv i64 %67, 4294967296, !insn.addr !4924
  %69 = icmp eq i64 %65, %68, !insn.addr !4924
  %70 = or i32 %66, 32, !insn.addr !4925
  %71 = inttoptr i32 %70 to i64*, !insn.addr !4925
  %72 = load i64, i64* %71, align 32, !insn.addr !4925
  %73 = call i32 @__asm_bound(i64 %72), !insn.addr !4925
  store i32 %arg6, i32* %eax.0.reg2mem, !insn.addr !4926
  store i32 %arg3, i32* %ebx.2.reg2mem, !insn.addr !4926
  store i32 %66, i32* %ebp.2.reg2mem, !insn.addr !4926
  store i32 %arg1, i32* %esi.3.reg2mem, !insn.addr !4926
  store i32 %54, i32* %edi.2.reg2mem, !insn.addr !4926
  br i1 %69, label %dec_label_pc_40d472, label %dec_label_pc_40d552, !insn.addr !4926

dec_label_pc_40d472:                              ; preds = %dec_label_pc_40d46d
  %74 = icmp eq i8 %60, 0, !insn.addr !4923
  %75 = load i32, i32* %edx, align 4
  %76 = trunc i32 %75 to i16
  br i1 %74, label %dec_label_pc_40d554, label %dec_label_pc_40d474, !insn.addr !4927

dec_label_pc_40d474:                              ; preds = %dec_label_pc_40d472
  %77 = call i8 @__readgsbyte(i32 %arg1), !insn.addr !4928
  call void @__asm_outsb(i16 %76, i8 %77), !insn.addr !4928
  %78 = and i32 %arg6, 771752051, !insn.addr !4929
  %79 = load i32, i32* %edx, align 4
  %80 = inttoptr i32 %79 to i8*, !insn.addr !4930
  %81 = load i8, i8* %80, align 1, !insn.addr !4930
  %82 = trunc i32 %arg5 to i8, !insn.addr !4930
  %83 = add i8 %81, %82, !insn.addr !4930
  store i8 %83, i8* %80, align 1, !insn.addr !4930
  %84 = inttoptr i32 %78 to i8*, !insn.addr !4931
  %85 = load i8, i8* %84, align 1, !insn.addr !4931
  %86 = trunc i32 %78 to i8, !insn.addr !4931
  %87 = add i8 %85, %86, !insn.addr !4931
  store i8 %87, i8* %84, align 1, !insn.addr !4931
  %88 = add i32 %arg3, 116, !insn.addr !4932
  %89 = inttoptr i32 %88 to i8*, !insn.addr !4932
  %90 = load i8, i8* %89, align 1, !insn.addr !4932
  %91 = trunc i32 %arg3 to i8, !insn.addr !4932
  %92 = add i8 %90, %91, !insn.addr !4932
  store i8 %92, i8* %89, align 1, !insn.addr !4932
  %93 = add i32 %73, -4, !insn.addr !4933
  %94 = inttoptr i32 %93 to i32*, !insn.addr !4933
  store i32 1735749490, i32* %94, align 4, !insn.addr !4933
  %95 = add i32 %73, -8, !insn.addr !4934
  %96 = inttoptr i32 %95 to i32*
  store i32 980624672, i32* %96, align 4, !insn.addr !4934
  store i32* %96, i32** %.pre-phi.reg2mem, !insn.addr !4934
  store i32 %78, i32* %.reg2mem, !insn.addr !4934
  store i32 %95, i32* %esp.0.reg2mem, !insn.addr !4934
  store i32 %66, i32* %ebp.1.reg2mem, !insn.addr !4934
  store i32 %arg1, i32* %esi.1.reg2mem, !insn.addr !4934
  br label %dec_label_pc_40d490, !insn.addr !4934

dec_label_pc_40d490:                              ; preds = %.dec_label_pc_40d490_crit_edge, %dec_label_pc_40d474
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !4935
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %97 = and i32 %.reload, 2121060, !insn.addr !4935
  %98 = inttoptr i32 %97 to i8*, !insn.addr !4936
  %99 = load i8, i8* %98, align 4, !insn.addr !4936
  %100 = trunc i32 %97 to i8, !insn.addr !4936
  %101 = add i8 %99, %100, !insn.addr !4936
  store i8 %101, i8* %98, align 4, !insn.addr !4936
  %102 = load i32, i32* %edx, align 4, !insn.addr !4937
  %103 = add i32 %102, 101, !insn.addr !4937
  %104 = inttoptr i32 %103 to i8*, !insn.addr !4937
  %105 = load i8, i8* %104, align 1, !insn.addr !4937
  %106 = add i8 %105, %100, !insn.addr !4937
  %107 = icmp ult i8 %106, %105, !insn.addr !4937
  store i8 %106, i8* %104, align 1, !insn.addr !4937
  %108 = load i32, i32* %edx, align 4, !insn.addr !4938
  %109 = trunc i32 %108 to i16, !insn.addr !4938
  %110 = inttoptr i32 %esi.1.reload to i8*, !insn.addr !4938
  %111 = load i8, i8* %110, align 1, !insn.addr !4938
  call void @__asm_outsb(i16 %109, i8 %111), !insn.addr !4938
  %112 = add nuw nsw i32 %97, 109, !insn.addr !4939
  %113 = inttoptr i32 %112 to i16*, !insn.addr !4939
  %114 = load i16, i16* %113, align 2, !insn.addr !4939
  %115 = trunc i32 %ebp.1.reload to i16, !insn.addr !4939
  call void @__asm_arpl(i16 %114, i16 %115), !insn.addr !4939
  %116 = add i32 %esp.0.reload, 4, !insn.addr !4918
  %117 = add i32 %esp.0.reload, 16, !insn.addr !4918
  %118 = add i32 %esp.0.reload, 20, !insn.addr !4918
  %119 = add i32 %esp.0.reload, 28, !insn.addr !4918
  %120 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !4918
  %121 = inttoptr i32 %116 to i32*, !insn.addr !4918
  %122 = load i32, i32* %121, align 4, !insn.addr !4918
  %123 = inttoptr i32 %117 to i32*, !insn.addr !4918
  %124 = load i32, i32* %123, align 4, !insn.addr !4918
  %125 = inttoptr i32 %118 to i32*, !insn.addr !4918
  %126 = load i32, i32* %125, align 4, !insn.addr !4918
  %127 = inttoptr i32 %119 to i32*, !insn.addr !4918
  %128 = load i32, i32* %127, align 4, !insn.addr !4918
  store i32 %126, i32* %edx, align 4, !insn.addr !4918
  br i1 %107, label %dec_label_pc_40d50c, label %dec_label_pc_40d4a1, !insn.addr !4940

dec_label_pc_40d4a1:                              ; preds = %dec_label_pc_40d490
  %129 = add i32 %122, 103, !insn.addr !4941
  %130 = inttoptr i32 %129 to i32*, !insn.addr !4941
  %131 = load i32, i32* %130, align 4, !insn.addr !4941
  %132 = mul i32 %131, 544417056, !insn.addr !4941
  %133 = inttoptr i32 %128 to i8*, !insn.addr !4942
  %134 = load i8, i8* %133, align 1, !insn.addr !4942
  %135 = trunc i32 %128 to i8, !insn.addr !4942
  %factor = mul i8 %135, 2
  %136 = add i8 %134, %factor, !insn.addr !4943
  store i8 %136, i8* %133, align 1, !insn.addr !4943
  %137 = and i32 %128, 622869107, !insn.addr !4944
  store i32 %137, i32* %eax.0.reg2mem
  store i32 %124, i32* %ebx.2.reg2mem
  store i32 %132, i32* %ebp.2.reg2mem
  store i32 %122, i32* %esi.3.reg2mem
  store i32 %120, i32* %edi.2.reg2mem
  br label %dec_label_pc_40d552

dec_label_pc_40d4bb:                              ; preds = %dec_label_pc_40d45a
  %138 = add i32 %3, 101, !insn.addr !4945
  %139 = inttoptr i32 %138 to i8*, !insn.addr !4945
  %140 = load i8, i8* %139, align 1, !insn.addr !4945
  %141 = load i32, i32* %edx, align 4, !insn.addr !4945
  %142 = trunc i32 %141 to i8, !insn.addr !4945
  %143 = add i8 %140, %142, !insn.addr !4945
  store i8 %143, i8* %139, align 1, !insn.addr !4945
  %144 = load i32, i32* %edx, align 4, !insn.addr !4946
  %145 = trunc i32 %144 to i16, !insn.addr !4946
  %146 = inttoptr i32 %0 to i8*, !insn.addr !4946
  %147 = load i8, i8* %146, align 1, !insn.addr !4946
  call void @__asm_outsb(i16 %145, i8 %147), !insn.addr !4946
  ret i32 %storemerge.reload, !insn.addr !4946

dec_label_pc_40d50c:                              ; preds = %dec_label_pc_40d490
  %148 = xor i32 %128, 100, !insn.addr !4947
  %149 = trunc i32 %148 to i8, !insn.addr !4948
  %150 = inttoptr i32 %148 to i8*, !insn.addr !4948
  %151 = load i8, i8* %150, align 1, !insn.addr !4948
  %152 = or i8 %151, %149, !insn.addr !4948
  %153 = zext i8 %152 to i32, !insn.addr !4948
  %154 = and i32 %128, -256, !insn.addr !4948
  %155 = or i32 %154, %153, !insn.addr !4948
  %156 = inttoptr i32 %155 to i8*, !insn.addr !4949
  %157 = load i8, i8* %156, align 1, !insn.addr !4949
  %158 = add i8 %157, %152, !insn.addr !4949
  %159 = icmp ult i8 %158, %157, !insn.addr !4949
  store i8 %158, i8* %156, align 1, !insn.addr !4949
  %160 = icmp eq i1 %159, false, !insn.addr !4950
  br i1 %160, label %dec_label_pc_40d58a, label %dec_label_pc_40d516, !insn.addr !4950

dec_label_pc_40d516:                              ; preds = %dec_label_pc_40d50c
  %161 = icmp eq i8 %158, 0, !insn.addr !4949
  %162 = xor i8 %158, %157, !insn.addr !4949
  %163 = xor i8 %158, %152, !insn.addr !4949
  %164 = and i8 %162, %163, !insn.addr !4949
  %165 = icmp slt i8 %164, 0, !insn.addr !4949
  %166 = add i32 %esp.0.reload, 52, !insn.addr !4951
  %167 = add i32 %esp.0.reload, 64, !insn.addr !4951
  %168 = inttoptr i32 %166 to i32*, !insn.addr !4951
  %169 = load i32, i32* %168, align 4, !insn.addr !4951
  store i32 %169, i32* %edx, align 4, !insn.addr !4951
  store i1 %161, i1* %zf.5.reg2mem
  store i1 %165, i1* %of.3.reg2mem
  store i32 %167, i32* %esp.5.reg2mem
  br label %dec_label_pc_40d58d

dec_label_pc_40d552:                              ; preds = %dec_label_pc_40d46d, %dec_label_pc_40d4a1
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %esi.3.reload = load i32, i32* %esi.3.reg2mem
  %ebp.2.reload = load i32, i32* %ebp.2.reg2mem
  %ebx.2.reload = load i32, i32* %ebx.2.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %170 = add i32 %ebx.2.reload, 101, !insn.addr !4952
  %171 = inttoptr i32 %170 to i8*, !insn.addr !4952
  %172 = load i8, i8* %171, align 1, !insn.addr !4952
  %173 = load i32, i32* %edx, align 4, !insn.addr !4952
  %174 = trunc i32 %173 to i8, !insn.addr !4952
  %175 = add i8 %172, %174, !insn.addr !4952
  store i8 %175, i8* %171, align 1, !insn.addr !4952
  %176 = load i32, i32* %edx, align 4, !insn.addr !4953
  %177 = trunc i32 %176 to i16, !insn.addr !4953
  %178 = inttoptr i32 %esi.3.reload to i8*, !insn.addr !4953
  %179 = load i8, i8* %178, align 1, !insn.addr !4953
  call void @__asm_outsb(i16 %177, i8 %179), !insn.addr !4953
  %180 = load i32, i32* %edx, align 4, !insn.addr !4954
  %181 = add i32 %180, 101, !insn.addr !4954
  %182 = call i8 @__readfsbyte(i32 %181), !insn.addr !4954
  %183 = load i32, i32* %edx, align 4
  %184 = udiv i32 %183, 256, !insn.addr !4954
  %185 = trunc i32 %184 to i8, !insn.addr !4954
  %186 = and i8 %182, %185, !insn.addr !4954
  %187 = icmp eq i8 %186, 0, !insn.addr !4954
  %188 = add i32 %183, 101, !insn.addr !4954
  call void @__writefsbyte(i32 %188, i8 %186), !insn.addr !4954
  br i1 %187, label %dec_label_pc_40d574, label %dec_label_pc_40d5cb.critedge, !insn.addr !4955

dec_label_pc_40d554:                              ; preds = %dec_label_pc_40d472
  %189 = inttoptr i32 %arg1 to i32*, !insn.addr !4956
  %190 = load i32, i32* %189, align 4, !insn.addr !4956
  call void @__asm_outsd(i16 %76, i32 %190), !insn.addr !4956
  store i32 %arg6, i32* %eax.1.reg2mem
  br label %dec_label_pc_40d57b

dec_label_pc_40d574:                              ; preds = %dec_label_pc_40d552
  %191 = add i32 %ebp.2.reload, 101, !insn.addr !4957
  %192 = add i32 %191, %edi.2.reload, !insn.addr !4957
  %sext = mul i32 %192, 65536
  %193 = sdiv i32 %sext, 65536, !insn.addr !4957
  %194 = call i8 @__readgsbyte(i32 %193), !insn.addr !4957
  %195 = load i32, i32* %edx, align 4, !insn.addr !4957
  %196 = udiv i32 %195, 256, !insn.addr !4957
  %197 = trunc i32 %196 to i8, !insn.addr !4957
  %198 = and i8 %194, %197, !insn.addr !4957
  call void @__writegsbyte(i32 %193, i8 %198), !insn.addr !4957
  store i32 %eax.0.reload, i32* %eax.1.reg2mem
  br label %dec_label_pc_40d57b

dec_label_pc_40d57b:                              ; preds = %dec_label_pc_40d554, %dec_label_pc_40d574
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %199 = add i32 %eax.1.reload, 172, !insn.addr !4958
  %200 = and i32 %199, 255, !insn.addr !4958
  %201 = and i32 %eax.1.reload, -256, !insn.addr !4958
  %202 = or i32 %200, %201, !insn.addr !4958
  ret i32 %202, !insn.addr !4958

dec_label_pc_40d58a:                              ; preds = %dec_label_pc_40d50c
  %203 = add i32 %esp.0.reload, 32, !insn.addr !4918
  %204 = add i8 %158, %152, !insn.addr !4959
  store i8 %204, i8* %156, align 1, !insn.addr !4959
  %205 = add i32 %124, 1, !insn.addr !4960
  %206 = xor i32 %124, -2147483648
  %207 = and i32 %205, %206, !insn.addr !4960
  %208 = icmp slt i32 %207, 0, !insn.addr !4960
  %209 = icmp eq i32 %205, 0, !insn.addr !4960
  store i1 %209, i1* %zf.5.reg2mem, !insn.addr !4960
  store i1 %208, i1* %of.3.reg2mem, !insn.addr !4960
  store i32 %203, i32* %esp.5.reg2mem, !insn.addr !4960
  br label %dec_label_pc_40d58d, !insn.addr !4960

dec_label_pc_40d58d:                              ; preds = %dec_label_pc_40d516, %dec_label_pc_40d58a
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %zf.5.reload = load i1, i1* %zf.5.reg2mem
  %210 = add i32 %esp.5.reload, 4, !insn.addr !4961
  %211 = add i32 %esp.5.reload, 8, !insn.addr !4961
  %212 = add i32 %esp.5.reload, 16, !insn.addr !4961
  %213 = add i32 %esp.5.reload, 20, !insn.addr !4961
  %214 = add i32 %esp.5.reload, 24, !insn.addr !4961
  %215 = add i32 %esp.5.reload, 28, !insn.addr !4961
  %216 = inttoptr i32 %esp.5.reload to i32*, !insn.addr !4961
  %217 = load i32, i32* %216, align 4, !insn.addr !4961
  %218 = inttoptr i32 %210 to i32*, !insn.addr !4961
  %219 = load i32, i32* %218, align 4, !insn.addr !4961
  %220 = inttoptr i32 %211 to i32*, !insn.addr !4961
  %221 = load i32, i32* %220, align 4, !insn.addr !4961
  %222 = inttoptr i32 %212 to i32*, !insn.addr !4961
  %223 = load i32, i32* %222, align 4, !insn.addr !4961
  %224 = inttoptr i32 %213 to i32*, !insn.addr !4961
  %225 = load i32, i32* %224, align 4, !insn.addr !4961
  %226 = inttoptr i32 %214 to i32*, !insn.addr !4961
  %227 = load i32, i32* %226, align 4, !insn.addr !4961
  %228 = inttoptr i32 %215 to i32*, !insn.addr !4961
  %229 = load i32, i32* %228, align 4, !insn.addr !4961
  store i32 %225, i32* %edx, align 4, !insn.addr !4961
  %230 = trunc i32 %225 to i16, !insn.addr !4962
  %231 = inttoptr i32 %219 to i8*, !insn.addr !4962
  %232 = load i8, i8* %231, align 1, !insn.addr !4962
  call void @__asm_outsb(i16 %230, i8 %232), !insn.addr !4962
  %233 = load i8, i8* %231, align 1, !insn.addr !4963
  call void @__asm_outsb(i16 %230, i8 %233), !insn.addr !4963
  %234 = inttoptr i32 %219 to i32*, !insn.addr !4964
  %235 = load i32, i32* %234, align 4, !insn.addr !4964
  call void @__asm_outsd(i16 %230, i32 %235), !insn.addr !4964
  br i1 %zf.5.reload, label %dec_label_pc_40d5c0, label %dec_label_pc_40d593, !insn.addr !4965

dec_label_pc_40d593:                              ; preds = %dec_label_pc_40d58d
  %of.3.reload = load i1, i1* %of.3.reg2mem
  %236 = load i32, i32* %edx, align 4, !insn.addr !4966
  %237 = trunc i32 %236 to i16, !insn.addr !4966
  %238 = load i32, i32* %234, align 4, !insn.addr !4966
  call void @__asm_outsd(i16 %237, i32 %238), !insn.addr !4966
  br i1 %of.3.reload, label %dec_label_pc_40d5fd, label %dec_label_pc_40d596, !insn.addr !4967

dec_label_pc_40d596:                              ; preds = %dec_label_pc_40d593
  %239 = load i32, i32* %edx, align 4, !insn.addr !4968
  %240 = trunc i32 %239 to i16, !insn.addr !4968
  %241 = load i8, i8* %231, align 1, !insn.addr !4968
  call void @__asm_outsb(i16 %240, i8 %241), !insn.addr !4968
  %242 = add i32 %223, 83, !insn.addr !4969
  %243 = inttoptr i32 %242 to i8*, !insn.addr !4969
  %244 = load i8, i8* %243, align 1, !insn.addr !4969
  %245 = trunc i32 %229 to i8, !insn.addr !4969
  %246 = and i8 %244, %245, !insn.addr !4969
  store i8 %246, i8* %243, align 1, !insn.addr !4969
  store i32 %219, i32* %228, align 4, !insn.addr !4970
  %247 = add i32 %217, 117, !insn.addr !4971
  %248 = inttoptr i32 %247 to i8*, !insn.addr !4971
  %249 = load i8, i8* %248, align 1, !insn.addr !4971
  %250 = udiv i32 %227, 256, !insn.addr !4971
  %251 = trunc i32 %250 to i8, !insn.addr !4971
  %252 = and i8 %249, %251, !insn.addr !4971
  %253 = icmp eq i8 %252, 0, !insn.addr !4971
  store i8 %252, i8* %248, align 1, !insn.addr !4971
  br i1 %253, label %dec_label_pc_40d677, label %dec_label_pc_40d616, !insn.addr !4972

dec_label_pc_40d5c0:                              ; preds = %dec_label_pc_40d58d
  %254 = load i8, i8* inttoptr (i32 875972917 to i8*), align 1, !insn.addr !4973
  %255 = udiv i32 %229, 256, !insn.addr !4973
  %256 = trunc i32 %255 to i8, !insn.addr !4973
  %257 = and i8 %254, %256, !insn.addr !4973
  store i8 %257, i8* inttoptr (i32 875972917 to i8*), align 1, !insn.addr !4973
  %258 = trunc i32 %229 to i8, !insn.addr !4974
  %259 = call i8 @__readfsbyte(i32 %229), !insn.addr !4974
  %260 = or i8 %259, %258, !insn.addr !4974
  %261 = zext i8 %260 to i32, !insn.addr !4974
  %262 = and i32 %229, -256, !insn.addr !4974
  %263 = or i32 %262, %261, !insn.addr !4974
  %264 = inttoptr i32 %227 to i8*, !insn.addr !4975
  %265 = load i8, i8* %264, align 1, !insn.addr !4975
  %266 = load i32, i32* %edx, align 4, !insn.addr !4975
  %267 = udiv i32 %266, 256, !insn.addr !4975
  %268 = trunc i32 %267 to i8, !insn.addr !4975
  %269 = and i8 %265, %268, !insn.addr !4975
  store i8 %269, i8* %264, align 1, !insn.addr !4975
  %270 = inttoptr i32 %263 to i8*, !insn.addr !4976
  %271 = load i8, i8* %270, align 1, !insn.addr !4976
  %272 = load i32, i32* %edx, align 4, !insn.addr !4976
  %273 = udiv i32 %272, 256, !insn.addr !4976
  %274 = trunc i32 %273 to i8, !insn.addr !4976
  %275 = xor i8 %271, %274, !insn.addr !4976
  store i8 %275, i8* %270, align 1, !insn.addr !4976
  %276 = and i32 %263, 622862373, !insn.addr !4977
  %277 = xor i32 %276, 1681143369, !insn.addr !4978
  ret i32 %277, !insn.addr !4978

dec_label_pc_40d5cb.critedge:                     ; preds = %dec_label_pc_40d552
  %278 = load i32, i32* %edx, align 4, !insn.addr !4956
  %279 = trunc i32 %278 to i16, !insn.addr !4956
  %280 = inttoptr i32 %esi.3.reload to i32*, !insn.addr !4956
  %281 = load i32, i32* %280, align 4, !insn.addr !4956
  call void @__asm_outsd(i16 %279, i32 %281), !insn.addr !4956
  ret i32 %eax.0.reload, !insn.addr !4978

dec_label_pc_40d5fd:                              ; preds = %dec_label_pc_40d593
  %282 = mul i32 %223, 65536, !insn.addr !4979
  %sext3 = add i32 %282, 6684672
  %283 = sdiv i32 %sext3, 65536, !insn.addr !4979
  %284 = call i8 @__readgsbyte(i32 %283), !insn.addr !4979
  %285 = udiv i32 %227, 256, !insn.addr !4979
  %286 = trunc i32 %285 to i8, !insn.addr !4979
  %287 = and i8 %284, %286, !insn.addr !4979
  call void @__writegsbyte(i32 %283, i8 %287), !insn.addr !4979
  %288 = mul i32 %221, 2, !insn.addr !4980
  %289 = add i32 %288, 101, !insn.addr !4980
  %290 = add i32 %289, %229, !insn.addr !4980
  %291 = inttoptr i32 %290 to i8*, !insn.addr !4980
  %292 = load i8, i8* %291, align 1, !insn.addr !4980
  %293 = load i32, i32* %edx, align 4, !insn.addr !4980
  %294 = udiv i32 %293, 256, !insn.addr !4980
  %295 = trunc i32 %294 to i8, !insn.addr !4980
  %296 = and i8 %292, %295, !insn.addr !4980
  store i8 %296, i8* %291, align 1, !insn.addr !4980
  %297 = load i32, i32* %edx, align 4
  %298 = add i32 %297, 101, !insn.addr !4981
  %299 = inttoptr i32 %298 to i8*, !insn.addr !4981
  %300 = load i8, i8* %299, align 1, !insn.addr !4981
  %301 = udiv i32 %297, 256, !insn.addr !4981
  %302 = trunc i32 %301 to i8, !insn.addr !4981
  %303 = and i8 %300, %302, !insn.addr !4981
  store i8 %303, i8* %299, align 1, !insn.addr !4981
  store i32 %229, i32* %merge.reg2mem
  br label %dec_label_pc_40d459

dec_label_pc_40d616:                              ; preds = %dec_label_pc_40d596
  %304 = add i32 %217, 105, !insn.addr !4982
  %305 = inttoptr i32 %304 to i8*, !insn.addr !4982
  %306 = load i8, i8* %305, align 1, !insn.addr !4982
  %307 = load i32, i32* %edx, align 4, !insn.addr !4982
  %308 = udiv i32 %307, 256, !insn.addr !4982
  %309 = trunc i32 %308 to i8, !insn.addr !4982
  %310 = and i8 %306, %309, !insn.addr !4982
  store i8 %310, i8* %305, align 1, !insn.addr !4982
  ret i32 %229, !insn.addr !4982

dec_label_pc_40d677:                              ; preds = %dec_label_pc_40d596
  %311 = inttoptr i32 %229 to i8*, !insn.addr !4983
  %312 = load i8, i8* %311, align 1, !insn.addr !4983
  %313 = or i8 %312, %245, !insn.addr !4983
  %314 = zext i8 %313 to i32, !insn.addr !4983
  %315 = and i32 %229, -256, !insn.addr !4983
  %316 = or i32 %315, %314, !insn.addr !4983
  %317 = inttoptr i32 %316 to i8*, !insn.addr !4984
  %318 = load i8, i8* %317, align 1, !insn.addr !4984
  %319 = add i8 %318, %313, !insn.addr !4984
  store i8 %319, i8* %317, align 1, !insn.addr !4984
  %320 = add i32 %223, 111, !insn.addr !4985
  %321 = inttoptr i32 %320 to i8*, !insn.addr !4985
  %322 = load i8, i8* %321, align 1, !insn.addr !4985
  %323 = add i8 %322, %313, !insn.addr !4985
  store i8 %323, i8* %321, align 1, !insn.addr !4985
  %324 = load i32, i32* %edx, align 4, !insn.addr !4986
  %325 = trunc i32 %324 to i16, !insn.addr !4986
  %326 = load i8, i8* %231, align 1, !insn.addr !4986
  call void @__asm_outsb(i16 %325, i8 %326), !insn.addr !4986
  %327 = load i32, i32* %edx, align 4, !insn.addr !4987
  %328 = trunc i32 %327 to i16, !insn.addr !4987
  %329 = load i8, i8* %231, align 1, !insn.addr !4987
  call void @__asm_outsb(i16 %328, i8 %329), !insn.addr !4987
  store i32 %316, i32* %merge.reg2mem, !insn.addr !4987
  br label %dec_label_pc_40d459, !insn.addr !4987
}

define i32 @function_410ab8() local_unnamed_addr {
dec_label_pc_410ab8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_411306() local_unnamed_addr {
dec_label_pc_411306:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_411615() local_unnamed_addr {
dec_label_pc_411615:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_41a510() local_unnamed_addr

define i32 @function_431513(i32 %arg1) local_unnamed_addr {
dec_label_pc_431513:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4365d3() local_unnamed_addr {
dec_label_pc_4365d3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_44e431() local_unnamed_addr {
dec_label_pc_44e431:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_463654() local_unnamed_addr {
dec_label_pc_463654:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_464099() local_unnamed_addr {
dec_label_pc_464099:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4ac180() local_unnamed_addr

define i32 @function_4f5a95() local_unnamed_addr {
dec_label_pc_4f5a95:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_6951c2() local_unnamed_addr {
dec_label_pc_6951c2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_6b4297() local_unnamed_addr {
dec_label_pc_6b4297:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_97707d() local_unnamed_addr {
dec_label_pc_97707d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_aaa59f() local_unnamed_addr {
dec_label_pc_aaa59f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_a4b810() local_unnamed_addr

define i32 @function_b5f5a5() local_unnamed_addr {
dec_label_pc_b5f5a5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_cc26ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_cc26ac:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_cc8600() local_unnamed_addr

define i32 @function_10e1167() local_unnamed_addr {
dec_label_pc_10e1167:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_d3abf0() local_unnamed_addr

define i32 @function_1101516() local_unnamed_addr {
dec_label_pc_1101516:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_113b24f() local_unnamed_addr {
dec_label_pc_113b24f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_12f45d0(i32, i16) local_unnamed_addr

declare i32 @unknown_130a2d0(i32, i16) local_unnamed_addr

define i32 @function_1353a16() local_unnamed_addr {
dec_label_pc_1353a16:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_13cb400(i32, i32) local_unnamed_addr

define i32 @function_1405a97() local_unnamed_addr {
dec_label_pc_1405a97:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1fa290d(i32, i32) local_unnamed_addr

declare i32 @unknown_5a1750(i32) local_unnamed_addr

declare i32 @unknown_6d6a00() local_unnamed_addr

declare i32 @unknown_6da4b0() local_unnamed_addr

declare i32 @unknown_8fa9b0() local_unnamed_addr

declare i32 @unknown_c2a6d1() local_unnamed_addr

declare i32 @unknown_c889d0(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_cace00(i32) local_unnamed_addr

define i32 @function_34010a0() local_unnamed_addr {
dec_label_pc_34010a0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4289008() local_unnamed_addr {
dec_label_pc_4289008:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4c07be9(i8 %arg1) local_unnamed_addr {
dec_label_pc_4c07be9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4568b00(i16) local_unnamed_addr

define i32 @function_8451b14() local_unnamed_addr {
dec_label_pc_8451b14:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_a4056f0(i32) local_unnamed_addr

define i32 @function_b4030c5() local_unnamed_addr {
dec_label_pc_b4030c5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b63eea1() local_unnamed_addr {
dec_label_pc_b63eea1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d8b0041() local_unnamed_addr {
dec_label_pc_d8b0041:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_fcbfbdb() local_unnamed_addr

define i32 @function_124077c3() local_unnamed_addr {
dec_label_pc_124077c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_16260077() local_unnamed_addr {
dec_label_pc_16260077:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_16401374(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16401374:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1724606e() local_unnamed_addr {
dec_label_pc_1724606e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1e40cbfc() local_unnamed_addr {
dec_label_pc_1e40cbfc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_154123f0(i8*) local_unnamed_addr

declare i32 @unknown_158b0846(i16) local_unnamed_addr

define i32 @function_1e40fffc() local_unnamed_addr {
dec_label_pc_1e40fffc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1e757cf8(i32) local_unnamed_addr

declare i32 @unknown_2240b590() local_unnamed_addr

declare i32 @unknown_15af163a() local_unnamed_addr

declare i32 @unknown_162933a6() local_unnamed_addr

declare i32 @unknown_7403860(i32, i32, i32, i32*, i32, i32, i32, i32, i32) local_unnamed_addr

define i32 @function_2502fac1() local_unnamed_addr {
dec_label_pc_2502fac1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_2e47448a(i32 %arg1) local_unnamed_addr {
dec_label_pc_2e47448a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_2f408fdb() local_unnamed_addr {
dec_label_pc_2f408fdb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_310312eb() local_unnamed_addr {
dec_label_pc_310312eb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_30ec69ee() local_unnamed_addr

declare i32 @unknown_317d15e2(i32) local_unnamed_addr

declare i32 @unknown_2b1cb590() local_unnamed_addr

declare i32 @unknown_2ee09400(i32, i32, i32, i32) local_unnamed_addr

define i32 @function_332afd2a() local_unnamed_addr {
dec_label_pc_332afd2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_3340add0() local_unnamed_addr

define i32 @function_3b4077df() local_unnamed_addr {
dec_label_pc_3b4077df:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_3840e000() local_unnamed_addr

declare i32 @unknown_3bc98d47(i32, i32, i8*) local_unnamed_addr

define i32 @function_3c402e7b() local_unnamed_addr {
dec_label_pc_3c402e7b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_3f5d00c0(i16) local_unnamed_addr

define i32 @function_408b1871(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_408b1871:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_41805c89() local_unnamed_addr {
dec_label_pc_41805c89:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_51020dad() local_unnamed_addr {
dec_label_pc_51020dad:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_5140977b() local_unnamed_addr

define i32 @function_521723e8() local_unnamed_addr {
dec_label_pc_521723e8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_52126674() local_unnamed_addr

define i32 @function_566800f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_566800f0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_5bc1f55e() local_unnamed_addr {
dec_label_pc_5bc1f55e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_5c404702() local_unnamed_addr {
dec_label_pc_5c404702:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_5ec599d9() local_unnamed_addr

define i32 @function_6ba108c4(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_6ba108c4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_72818406() local_unnamed_addr

declare i32 @unknown_73411480(i32) local_unnamed_addr

define i32 @function_74865650() local_unnamed_addr {
dec_label_pc_74865650:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_7587ffff() local_unnamed_addr {
dec_label_pc_7587ffff:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_7caa8780(i32, i32) local_unnamed_addr

define i32 @function_7e11baa4() local_unnamed_addr {
dec_label_pc_7e11baa4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8032292a() local_unnamed_addr {
dec_label_pc_8032292a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_80391070(i32, i32) local_unnamed_addr

define i32 @function_805e7805() local_unnamed_addr {
dec_label_pc_805e7805:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8342339f() local_unnamed_addr {
dec_label_pc_8342339f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8440b83b() local_unnamed_addr {
dec_label_pc_8440b83b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_87408d9d() local_unnamed_addr {
dec_label_pc_87408d9d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8a4090ef() local_unnamed_addr {
dec_label_pc_8a4090ef:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8bbb77b7() local_unnamed_addr {
dec_label_pc_8bbb77b7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8be56683() local_unnamed_addr {
dec_label_pc_8be56683:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_7d40b032(i32, i32) local_unnamed_addr

define i32 @function_8be63ae8() local_unnamed_addr {
dec_label_pc_8be63ae8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8be650fe() local_unnamed_addr {
dec_label_pc_8be650fe:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8be6778c() local_unnamed_addr {
dec_label_pc_8be6778c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8bec73b1() local_unnamed_addr {
dec_label_pc_8bec73b1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_83403684() local_unnamed_addr

declare i32 @unknown_840137a6() local_unnamed_addr

declare i32 @unknown_8440393d() local_unnamed_addr

declare i32 @unknown_84e25640() local_unnamed_addr

declare i32 @unknown_864086b4(i32) local_unnamed_addr

declare i32 @unknown_8a40a340(i32) local_unnamed_addr

declare i32 @unknown_8b00000b() local_unnamed_addr

declare i32 @unknown_8b0040c0(i16) local_unnamed_addr

declare i32 @unknown_8b58cbd8(i32) local_unnamed_addr

declare i32 @unknown_42a1593b() local_unnamed_addr

define i32 @function_8c141095() local_unnamed_addr {
dec_label_pc_8c141095:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_8d819301() local_unnamed_addr

define i32 @function_90000cc2(i32 %arg1) local_unnamed_addr {
dec_label_pc_90000cc2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_902e905d() local_unnamed_addr {
dec_label_pc_902e905d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_9040a2d0() local_unnamed_addr

define i32 @function_90909090() local_unnamed_addr {
dec_label_pc_90909090:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_928a2502() local_unnamed_addr {
dec_label_pc_928a2502:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_9a4077df() local_unnamed_addr {
dec_label_pc_9a4077df:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a06c1b31(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_a06c1b31:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a10040c1() local_unnamed_addr {
dec_label_pc_a10040c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a9401513(i32 %arg1) local_unnamed_addr {
dec_label_pc_a9401513:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_aa618db0() local_unnamed_addr

define i32 @function_ab42ba2d() local_unnamed_addr {
dec_label_pc_ab42ba2d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_aecd3a8b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_aecd3a8b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_aee24374() local_unnamed_addr {
dec_label_pc_aee24374:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b815ff7d() local_unnamed_addr {
dec_label_pc_b815ff7d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_baf31e19() local_unnamed_addr {
dec_label_pc_baf31e19:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c0c65f3e() local_unnamed_addr {
dec_label_pc_c0c65f3e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_b450b590() local_unnamed_addr

declare i32 @unknown_b45eaee3() local_unnamed_addr

declare i32 @unknown_be9955d0(i32, i8*, i32) local_unnamed_addr

define i32 @function_c2704218() local_unnamed_addr {
dec_label_pc_c2704218:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c270421f() local_unnamed_addr {
dec_label_pc_c270421f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c270e8b8() local_unnamed_addr {
dec_label_pc_c270e8b8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c386b2ad() local_unnamed_addr {
dec_label_pc_c386b2ad:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c6fc452c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c6fc452c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c7410bdf() local_unnamed_addr {
dec_label_pc_c7410bdf:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c7ea758d() local_unnamed_addr {
dec_label_pc_c7ea758d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_c540e040(i32) local_unnamed_addr

declare i32 @unknown_cb000000(i8*, i32) local_unnamed_addr

define i32 @function_cb49d1f7() local_unnamed_addr {
dec_label_pc_cb49d1f7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d31fcc79(i32 %arg1) local_unnamed_addr {
dec_label_pc_d31fcc79:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_cc40a340() local_unnamed_addr

define i32 @function_d6580034() local_unnamed_addr {
dec_label_pc_d6580034:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d6ff0040() local_unnamed_addr {
dec_label_pc_d6ff0040:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d73f432e() local_unnamed_addr {
dec_label_pc_d73f432e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d73f4335() local_unnamed_addr {
dec_label_pc_d73f4335:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d73f4343() local_unnamed_addr {
dec_label_pc_d73f4343:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d73f50fd() local_unnamed_addr {
dec_label_pc_d73f50fd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_dc4b94a7() local_unnamed_addr {
dec_label_pc_dc4b94a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_e740a916() local_unnamed_addr {
dec_label_pc_e740a916:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_e00000c9(i32, i16*, i32, i32, i32, i32, i32*, i32, i32, i32, i32, i32) local_unnamed_addr

define i32 @function_ebac8268() local_unnamed_addr {
dec_label_pc_ebac8268:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_e83ffa60() local_unnamed_addr

define i32 @function_ec940505() local_unnamed_addr {
dec_label_pc_ec940505:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_43207475(i32) local_unnamed_addr

declare i32 @unknown_481d3780(i32, i32, i32) local_unnamed_addr

define i32 @function_ecc6d278() local_unnamed_addr {
dec_label_pc_ecc6d278:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f4335f7d() local_unnamed_addr {
dec_label_pc_f4335f7d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_ef40c9a4() local_unnamed_addr

declare i32 @unknown_f740acc3(i32, i32, i32) local_unnamed_addr

define i32 @function_f8403c25() local_unnamed_addr {
dec_label_pc_f8403c25:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f868ef72() local_unnamed_addr {
dec_label_pc_f868ef72:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fb408e31() local_unnamed_addr {
dec_label_pc_fb408e31:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ff46f9df() local_unnamed_addr {
dec_label_pc_ff46f9df:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_ff65da00(i16) local_unnamed_addr

define i32 @function_ff92506d() local_unnamed_addr {
dec_label_pc_ff92506d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffff84a8() local_unnamed_addr {
dec_label_pc_ffff84a8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_ff98faf0(i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_ffa117eb(i32, i32) local_unnamed_addr

declare i32 @unknown_ffae400e() local_unnamed_addr

declare i32 @unknown_ffb04900(i32, i32) local_unnamed_addr

declare i32 @unknown_fffb8cf0(i32) local_unnamed_addr

define i32 @function_ffffe812() local_unnamed_addr {
dec_label_pc_ffffe812:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffffe827() local_unnamed_addr {
dec_label_pc_ffffe827:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffffe83b() local_unnamed_addr {
dec_label_pc_ffffe83b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffffe9bc() local_unnamed_addr {
dec_label_pc_ffffe9bc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffffeab3() local_unnamed_addr {
dec_label_pc_ffffeab3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffffee76() local_unnamed_addr {
dec_label_pc_ffffee76:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fffff673() local_unnamed_addr {
dec_label_pc_fffff673:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fffff690() local_unnamed_addr {
dec_label_pc_fffff690:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fffff6c2() local_unnamed_addr {
dec_label_pc_fffff6c2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fffff74c() local_unnamed_addr {
dec_label_pc_fffff74c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fffffa2a() local_unnamed_addr {
dec_label_pc_fffffa2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4f40a4b0(i32, i32) local_unnamed_addr

declare i32 @unknown_52352b68(i32) local_unnamed_addr

declare i32 @unknown_577521cf(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_5b401ea0() local_unnamed_addr

declare i32 @unknown_5b407119(i32, i16, i32, i32, i32, i32, i32*, i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_5c341750(i32) local_unnamed_addr

declare i32 @unknown_644061d3(i32, i32) local_unnamed_addr

declare i32 @unknown_690b8680() local_unnamed_addr

declare i32 @unknown_69ff5850(i32, i32) local_unnamed_addr

declare i32 @unknown_91401750(i8*) local_unnamed_addr

declare i32 @unknown_92ae6d60() local_unnamed_addr

declare i32 @unknown_9cf8a2d0(i32) local_unnamed_addr

declare i32 @unknown_a0408b50(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_a040b870() local_unnamed_addr

declare i32 @unknown_c1803600(i32) local_unnamed_addr

declare void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare i32* @GlobalFree(i32*) local_unnamed_addr

declare i1 @CloseHandle(i32*) local_unnamed_addr

declare i32 @GetLastError() local_unnamed_addr

declare i32 @WaitForSingleObject(i32*, i32) local_unnamed_addr

declare i32* @LocalFree(i32*) local_unnamed_addr

declare void @__set_app_type(i32) local_unnamed_addr

declare i32 @__getmainargs(i32*, i8***, i8***, i32, i32*) local_unnamed_addr

declare i32 @__p___initenv() local_unnamed_addr

declare i32 @wcsncmp(i16*, i16*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @printf(i8*, ...) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fprintf(%_IO_FILE*, i8*, ...) local_unnamed_addr

declare i32 @WSASend(i32, %_WSABUF*, i32, i32*, i32, %_OVERLAPPED*, void (i32, i32, %_OVERLAPPED*, i32)*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i8*, i32) local_unnamed_addr

declare i32 @WSAGetLastError() local_unnamed_addr

declare i32 @unknown_da5d23(i16) local_unnamed_addr

declare i32 @unknown_dd5850(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_e0b92c(i32*, i32*) local_unnamed_addr

declare i32 @__asm_wait() local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.ctpop.i8(i8) #0

declare i32 @__asm_insd(i16) local_unnamed_addr

declare i32 @__asm_sti() local_unnamed_addr

declare i32 @__asm_int1() local_unnamed_addr

declare i32 @__asm_in(i16) local_unnamed_addr

declare void @__asm_out(i32, i8) local_unnamed_addr

declare void @__asm_arpl(i16, i16) local_unnamed_addr

declare void @__asm_outsb(i16, i8) local_unnamed_addr

declare void @__asm_outsd(i16, i32) local_unnamed_addr

declare i8 @__asm_insb(i16) local_unnamed_addr

declare i32 @__asm_bound(i64) local_unnamed_addr

declare void @__asm_out.1(i32, i32) local_unnamed_addr

declare void @__asm_int(i32) local_unnamed_addr

declare i32 @__asm_in.2(i32) local_unnamed_addr

declare void @__asm_out.3(i16, i32) local_unnamed_addr

declare i32 @__asm_iretd() local_unnamed_addr

declare i8 @__asm_in.4(i16) local_unnamed_addr

declare i16 @__asm_arpl.5(i16) local_unnamed_addr

declare void @__asm_out.6(i16, i8) local_unnamed_addr

declare i8 @__asm_in.7(i8) local_unnamed_addr

declare i32 @__asm_int3() local_unnamed_addr

declare i32 @__asm_hlt() local_unnamed_addr

declare void @__asm_rep_movsd_memcpy(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.round.f80(x86_fp80) #0

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.exp2.f80(x86_fp80) #0

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.sqrt.f80(x86_fp80) #0

declare i64 @__asm_psubb(i64, i64) local_unnamed_addr

declare i32 @__asm_ffreep(i32) local_unnamed_addr

declare i64 @__asm_psrlw(i64, i64) local_unnamed_addr

declare void @__asm_into(i32) local_unnamed_addr

declare i128 @__asm_maxps(i128, i128) local_unnamed_addr

declare i64 @__asm_paddsb(i64, i64) local_unnamed_addr

declare i128 @__asm_minps(i128, i128) local_unnamed_addr

declare void @__asm_rep_movsb_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i64 @__asm_paddd(i64, i64) local_unnamed_addr

declare i128 @__asm_andnps(i128, i128) local_unnamed_addr

declare x86_fp80 @__asm_fbstp(x86_fp80) local_unnamed_addr

declare i32 @__asm_fnsave() local_unnamed_addr

declare i128 @__asm_andps(i128, i128) local_unnamed_addr

declare i64 @__asm_punpckhbw(i64, i64) local_unnamed_addr

declare void @__asm_invlpg(i8) local_unnamed_addr

declare i32 @__readfsdword(i32) local_unnamed_addr

declare void @__writefsdword(i32, i32) local_unnamed_addr

declare i16 @__readfsword(i32) local_unnamed_addr

declare void @__writegsdword(i32, i32) local_unnamed_addr

declare i8 @__readfsbyte(i32) local_unnamed_addr

declare i32 @__readgsdword(i32) local_unnamed_addr

declare i8 @__readgsbyte(i32) local_unnamed_addr

declare void @__writegsbyte(i32, i8) local_unnamed_addr

declare void @__writefsbyte(i32, i8) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i1 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_4() local_unnamed_addr

declare i8 @__decompiler_undefined_function_5() local_unnamed_addr

declare i64 @__decompiler_undefined_function_8() local_unnamed_addr

declare i128 @__decompiler_undefined_function_9() local_unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { cold noreturn nounwind }

!0 = !{i64 4198416}
!1 = !{i64 4198421}
!2 = !{i64 4198426}
!3 = !{i64 4198431}
!4 = !{i64 4198438}
!5 = !{i64 4198444}
!6 = !{i64 4198448}
!7 = !{i64 4198450}
!8 = !{i64 4198453}
!9 = !{i64 4198460}
!10 = !{i64 4198454}
!11 = !{i64 4198469}
!12 = !{i64 4198482}
!13 = !{i64 4198506}
!14 = !{i64 4198599}
!15 = !{i64 4198602}
!16 = !{i64 4198605}
!17 = !{i64 4198606}
!18 = !{i64 4198611}
!19 = !{i64 4198617}
!20 = !{i64 4198619}
!21 = !{i64 4198621}
!22 = !{i64 4198623}
!23 = !{i64 4198625}
!24 = !{i64 4198627}
!25 = !{i64 4198639}
!26 = !{i64 4198645}
!27 = !{i64 4198653}
!28 = !{i64 4198663}
!29 = !{i64 4198673}
!30 = !{i64 4198681}
!31 = !{i64 4198683}
!32 = !{i64 4198688}
!33 = !{i64 4198693}
!34 = !{i64 4198698}
!35 = !{i64 4198704}
!36 = !{i64 4198711}
!37 = !{i64 4198716}
!38 = !{i64 4198719}
!39 = !{i64 4198729}
!40 = !{i64 4198744}
!41 = !{i64 4198749}
!42 = !{i64 4198760}
!43 = !{i64 4198765}
!44 = !{i64 4198769}
!45 = !{i64 4198775}
!46 = !{i64 4198780}
!47 = !{i64 4198791}
!48 = !{i64 4198809}
!49 = !{i64 4198825}
!50 = !{i64 4198831}
!51 = !{i64 4198833}
!52 = !{i64 4198843}
!53 = !{i64 4198873}
!54 = !{i64 4198881}
!55 = !{i64 4198888}
!56 = !{i64 4198895}
!57 = !{i64 4198900}
!58 = !{i64 4198902}
!59 = !{i64 4198904}
!60 = !{i64 4198914}
!61 = !{i64 4198936}
!62 = !{i64 4198939}
!63 = !{i64 4198949}
!64 = !{i64 4198952}
!65 = !{i64 4198962}
!66 = !{i64 4198968}
!67 = !{i64 4198973}
!68 = !{i64 4198988}
!69 = !{i64 4198998}
!70 = !{i64 4199003}
!71 = !{i64 4199016}
!72 = !{i64 4199018}
!73 = !{i64 4199020}
!74 = !{i64 4199023}
!75 = !{i64 4199028}
!76 = !{i64 4199031}
!77 = !{i64 4199043}
!78 = !{i64 4199067}
!79 = !{i64 4199075}
!80 = !{i64 4199048}
!81 = !{i64 4199052}
!82 = !{i64 4199054}
!83 = !{i64 4199056}
!84 = !{i64 4199059}
!85 = !{i64 4199070}
!86 = !{i64 4199073}
!87 = !{i64 4199083}
!88 = !{i64 4199085}
!89 = !{i64 4199087}
!90 = !{i64 4199109}
!91 = !{i64 4199115}
!92 = !{i64 4199117}
!93 = !{i64 4199118}
!94 = !{i64 4199120}
!95 = !{i64 4199121}
!96 = !{i64 4199172}
!97 = !{i64 4199126}
!98 = !{i64 4199130}
!99 = !{i64 4199137}
!100 = !{i64 4199147}
!101 = !{i64 4199154}
!102 = !{i64 4199165}
!103 = !{i64 4199282}
!104 = !{i64 4199283}
!105 = !{i64 4199286}
!106 = !{i64 4199292}
!107 = !{i64 4199298}
!108 = !{i64 4199301}
!109 = !{i64 4199306}
!110 = !{i64 4199319}
!111 = !{i64 4199322}
!112 = !{i64 4199327}
!113 = !{i64 4199328}
!114 = !{i64 4199329}
!115 = !{i64 4199576}
!116 = !{i64 4199592}
!117 = !{i64 4199594}
!118 = !{i64 4199638}
!119 = !{i64 4199641}
!120 = !{i64 4199645}
!121 = !{i64 4199654}
!122 = !{i64 4199655}
!123 = !{i64 4199657}
!124 = !{i64 4199659}
!125 = !{i64 4199663}
!126 = !{i64 4199665}
!127 = !{i64 4199667}
!128 = !{i64 4199670}
!129 = !{i64 4199680}
!130 = !{i64 4199686}
!131 = !{i64 4199699}
!132 = !{i64 4199702}
!133 = !{i64 4199710}
!134 = !{i64 4199711}
!135 = !{i64 4199717}
!136 = !{i64 4199722}
!137 = !{i64 4199725}
!138 = !{i64 4199726}
!139 = !{i64 4199735}
!140 = !{i64 4199738}
!141 = !{i64 4199748}
!142 = !{i64 4199749}
!143 = !{i64 4199762}
!144 = !{i64 4199764}
!145 = !{i64 4199768}
!146 = !{i64 4199769}
!147 = !{i64 4199775}
!148 = !{i64 4199782}
!149 = !{i64 4199784}
!150 = !{i64 4199790}
!151 = !{i64 4199799}
!152 = !{i64 4199810}
!153 = !{i64 4199815}
!154 = !{i64 4199818}
!155 = !{i64 4199819}
!156 = !{i64 4199829}
!157 = !{i64 4199830}
!158 = !{i64 4199834}
!159 = !{i64 4199835}
!160 = !{i64 4199850}
!161 = !{i64 4199856}
!162 = !{i64 4199863}
!163 = !{i64 4199870}
!164 = !{i64 4199895}
!165 = !{i64 4199912}
!166 = !{i64 4199915}
!167 = !{i64 4199921}
!168 = !{i64 4199927}
!169 = !{i64 4199940}
!170 = !{i64 4199941}
!171 = !{i64 4199946}
!172 = !{i64 4199953}
!173 = !{i64 4199971}
!174 = !{i64 4199976}
!175 = !{i64 4199982}
!176 = !{i64 4199986}
!177 = !{i64 4199965}
!178 = !{i64 4200112}
!179 = !{i64 4200114}
!180 = !{i64 4200274}
!181 = !{i64 4200278}
!182 = !{i64 4200294}
!183 = !{i64 4200327}
!184 = !{i64 4200339}
!185 = !{i64 4200345}
!186 = !{i64 4200350}
!187 = !{i64 4200352}
!188 = !{i64 4200357}
!189 = !{i64 4200365}
!190 = !{i64 4200370}
!191 = !{i64 4200376}
!192 = !{i64 4200378}
!193 = !{i64 4200383}
!194 = !{i64 4200384}
!195 = !{i64 4200285}
!196 = !{i64 4200387}
!197 = !{i64 4200392}
!198 = !{i64 4200399}
!199 = !{i64 4200404}
!200 = !{i64 4200411}
!201 = !{i64 4200417}
!202 = !{i64 4200424}
!203 = !{i64 4200427}
!204 = !{i64 4200429}
!205 = !{i64 4200430}
!206 = !{i64 4200443}
!207 = !{i64 4200448}
!208 = !{i64 4200457}
!209 = !{i64 4200461}
!210 = !{i64 4200494}
!211 = !{i64 4200507}
!212 = !{i64 4200510}
!213 = !{i64 4200497}
!214 = !{i64 4200514}
!215 = !{i64 4200518}
!216 = !{i64 4200522}
!217 = !{i64 4200528}
!218 = !{i64 4200539}
!219 = !{i64 4200540}
!220 = !{i64 4200542}
!221 = !{i64 4200547}
!222 = !{i64 4200554}
!223 = !{i64 4200555}
!224 = !{i64 4200557}
!225 = !{i64 4200658}
!226 = !{i64 4200659}
!227 = !{i64 4200664}
!228 = !{i64 4200669}
!229 = !{i64 4200671}
!230 = !{i64 4200682}
!231 = !{i64 4200699}
!232 = !{i64 4200709}
!233 = !{i64 4200711}
!234 = !{i64 4200716}
!235 = !{i64 4200822}
!236 = !{i64 4200827}
!237 = !{i64 4200830}
!238 = !{i64 4200833}
!239 = !{i64 4200838}
!240 = !{i64 4200839}
!241 = !{i64 4200849}
!242 = !{i64 4200852}
!243 = !{i64 4200836}
!244 = !{i64 4200855}
!245 = !{i64 4200860}
!246 = !{i64 4200869}
!247 = !{i64 4200912}
!248 = !{i64 4200957}
!249 = !{i64 4200959}
!250 = !{i64 4200996}
!251 = !{i64 4201001}
!252 = !{i64 4201003}
!253 = !{i64 4201008}
!254 = !{i64 4201010}
!255 = !{i64 4201018}
!256 = !{i64 4201028}
!257 = !{i64 4201035}
!258 = !{i64 4201036}
!259 = !{i64 4201073}
!260 = !{i64 4201086}
!261 = !{i64 4201090}
!262 = !{i64 4201094}
!263 = !{i64 4201106}
!264 = !{i64 4201266}
!265 = !{i64 4201368}
!266 = !{i64 4201377}
!267 = !{i64 4201384}
!268 = !{i64 4201390}
!269 = !{i64 4201396}
!270 = !{i64 4201401}
!271 = !{i64 4201405}
!272 = !{i64 4201411}
!273 = !{i64 4201417}
!274 = !{i64 4201425}
!275 = !{i64 4201431}
!276 = !{i64 4201435}
!277 = !{i64 4201445}
!278 = !{i64 4201446}
!279 = !{i64 4201449}
!280 = !{i64 4201594}
!281 = !{i64 4201605}
!282 = !{i64 4201608}
!283 = !{i64 4201752}
!284 = !{i64 4201754}
!285 = !{i64 4201755}
!286 = !{i64 4201757}
!287 = !{i64 4201758}
!288 = !{i64 4201760}
!289 = !{i64 4201766}
!290 = !{i64 4201768}
!291 = !{i64 4201770}
!292 = !{i64 4201772}
!293 = !{i64 4201774}
!294 = !{i64 4201775}
!295 = !{i64 4201777}
!296 = !{i64 4201780}
!297 = !{i64 4201787}
!298 = !{i64 4201793}
!299 = !{i64 4201794}
!300 = !{i64 4201808}
!301 = !{i64 4201814}
!302 = !{i64 4201816}
!303 = !{i64 4201819}
!304 = !{i64 4201823}
!305 = !{i64 4201826}
!306 = !{i64 4201828}
!307 = !{i64 4201831}
!308 = !{i64 4201832}
!309 = !{i64 4201838}
!310 = !{i64 4201843}
!311 = !{i64 4201845}
!312 = !{i64 4201851}
!313 = !{i64 4201858}
!314 = !{i64 4201860}
!315 = !{i64 4201866}
!316 = !{i64 4201869}
!317 = !{i64 4201872}
!318 = !{i64 4201874}
!319 = !{i64 4201892}
!320 = !{i64 4201952}
!321 = !{i64 4201958}
!322 = !{i64 4201961}
!323 = !{i64 4201960}
!324 = !{i64 4201963}
!325 = !{i64 4201969}
!326 = !{i64 4201971}
!327 = !{i64 4201972}
!328 = !{i64 4201977}
!329 = !{i64 4201987}
!330 = !{i64 4201989}
!331 = !{i64 4201992}
!332 = !{i64 4201997}
!333 = !{i64 4202000}
!334 = !{i64 4202003}
!335 = !{i64 4202008}
!336 = !{i64 4202024}
!337 = !{i64 4202037}
!338 = !{i64 4202051}
!339 = !{i64 4202143}
!340 = !{i64 4202144}
!341 = !{i64 4202148}
!342 = !{i64 4202149}
!343 = !{i64 4202152}
!344 = !{i64 4202155}
!345 = !{i64 4202156}
!346 = !{i64 4202157}
!347 = !{i64 4202164}
!348 = !{i64 4202165}
!349 = !{i64 4202172}
!350 = !{i64 4202179}
!351 = !{i64 4202187}
!352 = !{i64 4202191}
!353 = !{i64 4202197}
!354 = !{i64 4202202}
!355 = !{i64 4202214}
!356 = !{i64 4202227}
!357 = !{i64 4202230}
!358 = !{i64 4202235}
!359 = !{i64 4202237}
!360 = !{i64 4202239}
!361 = !{i64 4202246}
!362 = !{i64 4202248}
!363 = !{i64 4202251}
!364 = !{i64 4202253}
!365 = !{i64 4202307}
!366 = !{i64 4202314}
!367 = !{i64 4202208}
!368 = !{i64 4202321}
!369 = !{i64 4202325}
!370 = !{i64 4202330}
!371 = !{i64 4202591}
!372 = !{i64 4202595}
!373 = !{i64 4202603}
!374 = !{i64 4202612}
!375 = !{i64 4202618}
!376 = !{i64 4202624}
!377 = !{i64 4202632}
!378 = !{i64 4202645}
!379 = !{i64 4202651}
!380 = !{i64 4202653}
!381 = !{i64 4202679}
!382 = !{i64 4202688}
!383 = !{i64 4202691}
!384 = !{i64 4202699}
!385 = !{i64 4202709}
!386 = !{i64 4202714}
!387 = !{i64 4202721}
!388 = !{i64 4202722}
!389 = !{i64 4202727}
!390 = !{i64 4202729}
!391 = !{i64 4202742}
!392 = !{i64 4202743}
!393 = !{i64 4202748}
!394 = !{i64 4202753}
!395 = !{i64 4202763}
!396 = !{i64 4202765}
!397 = !{i64 4202767}
!398 = !{i64 4202769}
!399 = !{i64 4202770}
!400 = !{i64 4202773}
!401 = !{i64 4202776}
!402 = !{i64 4202784}
!403 = !{i64 4202787}
!404 = !{i64 4202796}
!405 = !{i8 0, i8 9}
!406 = !{i64 4202802}
!407 = !{i64 4202804}
!408 = !{i64 4202816}
!409 = !{i64 4202822}
!410 = !{i64 4202823}
!411 = !{i64 4202830}
!412 = !{i64 4202837}
!413 = !{i64 4202843}
!414 = !{i64 4202846}
!415 = !{i64 4202852}
!416 = !{i64 4202858}
!417 = !{i64 4202862}
!418 = !{i64 4202865}
!419 = !{i64 4202866}
!420 = !{i64 4202867}
!421 = !{i64 4202869}
!422 = !{i64 4202878}
!423 = !{i64 4202892}
!424 = !{i64 4202915}
!425 = !{i64 4202897}
!426 = !{i64 4202926}
!427 = !{i64 4202929}
!428 = !{i64 4202932}
!429 = !{i64 4202938}
!430 = !{i64 4202966}
!431 = !{i64 4202969}
!432 = !{i64 4202972}
!433 = !{i64 4202980}
!434 = !{i64 4203006}
!435 = !{i64 4203014}
!436 = !{i64 4203019}
!437 = !{i64 4203033}
!438 = !{i64 4203034}
!439 = !{i64 4203043}
!440 = !{i64 4203047}
!441 = !{i64 4203049}
!442 = !{i64 4203056}
!443 = !{i64 4203059}
!444 = !{i64 4203073}
!445 = !{i64 4203078}
!446 = !{i64 4203080}
!447 = !{i64 4203086}
!448 = !{i64 4203088}
!449 = !{i64 4203090}
!450 = !{i64 4203091}
!451 = !{i64 4203098}
!452 = !{i64 4203104}
!453 = !{i64 4203106}
!454 = !{i64 4203109}
!455 = !{i64 4203113}
!456 = !{i64 4203116}
!457 = !{i64 4203117}
!458 = !{i64 4203119}
!459 = !{i64 4203120}
!460 = !{i64 4203128}
!461 = !{i64 4203131}
!462 = !{i64 4203137}
!463 = !{i64 4203144}
!464 = !{i64 4203154}
!465 = !{i64 4203160}
!466 = !{i64 4203162}
!467 = !{i64 4203166}
!468 = !{i64 4203172}
!469 = !{i64 4203179}
!470 = !{i64 4203191}
!471 = !{i64 4203194}
!472 = !{i64 4203200}
!473 = !{i64 4203203}
!474 = !{i64 4203210}
!475 = !{i64 4203212}
!476 = !{i64 4203217}
!477 = !{i64 4203228}
!478 = !{i64 4203235}
!479 = !{i64 4203237}
!480 = !{i64 4203223}
!481 = !{i64 4203240}
!482 = !{i64 4203243}
!483 = !{i64 4203251}
!484 = !{i64 4203256}
!485 = !{i64 4203262}
!486 = !{i64 4203267}
!487 = !{i64 4203270}
!488 = !{i64 4203272}
!489 = !{i64 4203274}
!490 = !{i64 4203286}
!491 = !{i64 4203287}
!492 = !{i64 4203291}
!493 = !{i64 4203295}
!494 = !{i64 4203516}
!495 = !{i64 4203522}
!496 = !{i64 4203527}
!497 = !{i64 4203517}
!498 = !{i64 4203529}
!499 = !{i64 4203531}
!500 = !{i64 4203577}
!501 = !{i64 4203579}
!502 = !{i64 4203630}
!503 = !{i64 4203632}
!504 = !{i64 4203637}
!505 = !{i64 4203639}
!506 = !{i64 4203641}
!507 = !{i64 4203644}
!508 = !{i64 4203647}
!509 = !{i64 4203652}
!510 = !{i64 4203654}
!511 = !{i64 4203664}
!512 = !{i64 4203667}
!513 = !{i64 4203669}
!514 = !{i64 4203672}
!515 = !{i64 4203675}
!516 = !{i64 4203678}
!517 = !{i64 4203681}
!518 = !{i64 4203684}
!519 = !{i64 4203688}
!520 = !{i64 4203689}
!521 = !{i64 4203791}
!522 = !{i64 4203797}
!523 = !{i64 4203801}
!524 = !{i64 4203804}
!525 = !{i64 4203807}
!526 = !{i64 4203808}
!527 = !{i64 4203814}
!528 = !{i64 4203817}
!529 = !{i64 4203822}
!530 = !{i64 4203825}
!531 = !{i64 4203828}
!532 = !{i64 4203829}
!533 = !{i64 4203840}
!534 = !{i64 4203865}
!535 = !{i64 4203870}
!536 = !{i64 4203877}
!537 = !{i64 4203882}
!538 = !{i64 4203901}
!539 = !{i64 4203903}
!540 = !{i64 4203909}
!541 = !{i64 4203915}
!542 = !{i64 4203921}
!543 = !{i64 4203923}
!544 = !{i64 4203927}
!545 = !{i64 4203930}
!546 = !{i64 4203936}
!547 = !{i64 4203941}
!548 = !{i64 4203942}
!549 = !{i64 4203944}
!550 = !{i64 4203950}
!551 = !{i64 4203955}
!552 = !{i64 4203958}
!553 = !{i64 4203964}
!554 = !{i64 4203973}
!555 = !{i64 4203977}
!556 = !{i64 4203979}
!557 = !{i64 4203982}
!558 = !{i64 4203988}
!559 = !{i64 4203991}
!560 = !{i64 4203994}
!561 = !{i64 4203997}
!562 = !{i64 4204000}
!563 = !{i64 4204009}
!564 = !{i64 4204013}
!565 = !{i64 4204021}
!566 = !{i64 4203811}
!567 = !{i64 4203885}
!568 = !{i64 4204038}
!569 = !{i64 4204041}
!570 = !{i64 4204044}
!571 = !{i64 4204046}
!572 = !{i64 4204048}
!573 = !{i64 4204050}
!574 = !{i64 4204056}
!575 = !{i64 4204081}
!576 = !{i64 4204083}
!577 = !{i64 4204092}
!578 = !{i64 4204095}
!579 = !{i64 4204111}
!580 = !{i64 4204118}
!581 = !{i64 4204122}
!582 = !{i64 4204125}
!583 = !{i64 4204127}
!584 = !{i64 4204129}
!585 = !{i64 4204135}
!586 = !{i64 4204137}
!587 = !{i64 4204147}
!588 = !{i64 4204163}
!589 = !{i64 4204170}
!590 = !{i64 4204176}
!591 = !{i64 4204178}
!592 = !{i64 4204181}
!593 = !{i64 4204183}
!594 = !{i64 4204190}
!595 = !{i64 4204200}
!596 = !{i64 4204204}
!597 = !{i64 4204230}
!598 = !{i64 4204232}
!599 = !{i64 4204237}
!600 = !{i64 4204240}
!601 = !{i64 4204262}
!602 = !{i64 4204264}
!603 = !{i64 4204273}
!604 = !{i64 4204286}
!605 = !{i64 4204334}
!606 = !{i64 4204341}
!607 = !{i64 4204342}
!608 = !{i64 4204352}
!609 = !{i64 4204353}
!610 = !{i64 4204370}
!611 = !{i64 4204377}
!612 = !{i64 4204379}
!613 = !{i64 4204388}
!614 = !{i64 4204392}
!615 = !{i64 4204406}
!616 = !{i64 4204410}
!617 = !{i64 4204417}
!618 = !{i64 4204422}
!619 = !{i64 4204429}
!620 = !{i64 4204449}
!621 = !{i64 4204455}
!622 = !{i64 4204456}
!623 = !{i64 4204462}
!624 = !{i64 4204465}
!625 = !{i64 4204477}
!626 = !{i64 4204513}
!627 = !{i64 4204518}
!628 = !{i64 4204519}
!629 = !{i64 4204521}
!630 = !{i64 4204523}
!631 = !{i64 4204531}
!632 = !{i64 4204546}
!633 = !{i64 4204549}
!634 = !{i64 4204550}
!635 = !{i64 4204560}
!636 = !{i64 4204562}
!637 = !{i64 4204574}
!638 = !{i64 4204577}
!639 = !{i64 4204579}
!640 = !{i64 4204585}
!641 = !{i64 4204593}
!642 = !{i64 4204597}
!643 = !{i64 4204610}
!644 = !{i64 4204624}
!645 = !{i64 4204630}
!646 = !{i64 4204633}
!647 = !{i64 4204640}
!648 = !{i64 4204646}
!649 = !{i64 4204651}
!650 = !{i64 4204653}
!651 = !{i64 4204656}
!652 = !{i64 4204659}
!653 = !{i64 4204663}
!654 = !{i64 4204666}
!655 = !{i64 4204674}
!656 = !{i64 4204679}
!657 = !{i64 4204682}
!658 = !{i64 4204688}
!659 = !{i64 4204696}
!660 = !{i64 4204706}
!661 = !{i64 4204715}
!662 = !{i64 4204721}
!663 = !{i64 4204729}
!664 = !{i64 4204732}
!665 = !{i64 4204736}
!666 = !{i64 4204737}
!667 = !{i64 4204743}
!668 = !{i64 4204749}
!669 = !{i64 4204751}
!670 = !{i64 4205146}
!671 = !{i64 4205151}
!672 = !{i64 4205158}
!673 = !{i64 4205168}
!674 = !{i64 4205174}
!675 = !{i64 4205194}
!676 = !{i64 4205197}
!677 = !{i64 4205217}
!678 = !{i64 4205223}
!679 = !{i64 4205226}
!680 = !{i64 4205232}
!681 = !{i64 4205235}
!682 = !{i64 4205238}
!683 = !{i64 4205241}
!684 = !{i64 4205243}
!685 = !{i64 4205246}
!686 = !{i64 4205256}
!687 = !{i64 4205259}
!688 = !{i64 4205285}
!689 = !{i64 4205313}
!690 = !{i64 4205354}
!691 = !{i64 4205359}
!692 = !{i64 4205362}
!693 = !{i64 4205363}
!694 = !{i64 4205376}
!695 = !{i64 4205378}
!696 = !{i64 4205379}
!697 = !{i64 4205382}
!698 = !{i64 4205389}
!699 = !{i64 4205390}
!700 = !{i64 4205289}
!701 = !{i64 4205311}
!702 = !{i64 4205392}
!703 = !{i64 4205396}
!704 = !{i64 4205408}
!705 = !{i64 4205415}
!706 = !{i64 4205543}
!707 = !{i64 4205549}
!708 = !{i64 4205557}
!709 = !{i64 4205558}
!710 = !{i64 4205560}
!711 = !{i64 4205561}
!712 = !{i64 4205564}
!713 = !{i64 4205569}
!714 = !{i64 4205570}
!715 = !{i64 4205575}
!716 = !{i64 4205581}
!717 = !{i64 4205585}
!718 = !{i64 4205591}
!719 = !{i64 4205593}
!720 = !{i64 4205595}
!721 = !{i64 4205601}
!722 = !{i64 4205604}
!723 = !{i64 4205606}
!724 = !{i64 4205612}
!725 = !{i64 4205617}
!726 = !{i64 4205621}
!727 = !{i64 4205626}
!728 = !{i64 4205631}
!729 = !{i64 4205637}
!730 = !{i64 4205653}
!731 = !{i64 4205655}
!732 = !{i64 4205662}
!733 = !{i64 4205665}
!734 = !{i64 4205590}
!735 = !{i64 4205685}
!736 = !{i64 4205698}
!737 = !{i64 4205703}
!738 = !{i64 4205706}
!739 = !{i64 4205709}
!740 = !{i64 4205712}
!741 = !{i64 4205729}
!742 = !{i64 4205748}
!743 = !{i64 4205798}
!744 = !{i64 4205801}
!745 = !{i64 4205834}
!746 = !{i64 4205836}
!747 = !{i64 4205850}
!748 = !{i64 4205861}
!749 = !{i64 4205884}
!750 = !{i64 4205922}
!751 = !{i64 4205934}
!752 = !{i64 4205935}
!753 = !{i64 4205936}
!754 = !{i64 4205941}
!755 = !{i64 4205942}
!756 = !{i64 4205945}
!757 = !{i64 4205947}
!758 = !{i64 4205950}
!759 = !{i64 4205954}
!760 = !{i64 4205955}
!761 = !{i64 4205958}
!762 = !{i64 4205962}
!763 = !{i64 4205966}
!764 = !{i64 4205968}
!765 = !{i64 4205970}
!766 = !{i64 4205975}
!767 = !{i64 4205978}
!768 = !{i64 4205984}
!769 = !{i64 4205985}
!770 = !{i64 4205986}
!771 = !{i64 4205987}
!772 = !{i64 4205991}
!773 = !{i64 4205992}
!774 = !{i64 4205993}
!775 = !{i64 4206005}
!776 = !{i64 4206015}
!777 = !{i64 4206017}
!778 = !{i64 4206023}
!779 = !{i64 4206025}
!780 = !{i64 4206031}
!781 = !{i64 4206043}
!782 = !{i64 4206049}
!783 = !{i64 4206051}
!784 = !{i64 4206053}
!785 = !{i64 4206063}
!786 = !{i64 4206068}
!787 = !{i64 4206072}
!788 = !{i64 4206086}
!789 = !{i64 4206094}
!790 = !{i64 4206095}
!791 = !{i64 4206096}
!792 = !{i64 4206100}
!793 = !{i64 4206102}
!794 = !{i64 4206036}
!795 = !{i64 4206104}
!796 = !{i64 4206108}
!797 = !{i64 4206111}
!798 = !{i64 4206112}
!799 = !{i64 4206113}
!800 = !{i64 4206118}
!801 = !{i64 4206119}
!802 = !{i64 4206120}
!803 = !{i64 4206130}
!804 = !{i64 4206132}
!805 = !{i64 4206139}
!806 = !{i64 4206146}
!807 = !{i64 4206158}
!808 = !{i64 4206161}
!809 = !{i64 4206170}
!810 = !{i64 4206171}
!811 = !{i64 4206177}
!812 = !{i64 4206178}
!813 = !{i64 4206181}
!814 = !{i64 4206183}
!815 = !{i64 4206184}
!816 = !{i64 4206185}
!817 = !{i64 4206190}
!818 = !{i64 4206191}
!819 = !{i64 4206192}
!820 = !{i64 4206193}
!821 = !{i64 4206199}
!822 = !{i64 4206200}
!823 = !{i64 4206209}
!824 = !{i64 4206214}
!825 = !{i64 4206227}
!826 = !{i64 4206230}
!827 = !{i64 4206231}
!828 = !{i64 4206236}
!829 = !{i64 4206237}
!830 = !{i64 4206263}
!831 = !{i64 4206264}
!832 = !{i64 4206266}
!833 = !{i64 4206282}
!834 = !{i64 4206303}
!835 = !{i64 4206485}
!836 = !{i64 4206487}
!837 = !{i64 4206488}
!838 = !{i64 4206490}
!839 = !{i64 4206491}
!840 = !{i64 4206502}
!841 = !{i64 4206507}
!842 = !{i64 4206522}
!843 = !{i64 4206528}
!844 = !{i64 4206529}
!845 = !{i64 4206530}
!846 = !{i64 4206536}
!847 = !{i64 4206537}
!848 = !{i64 4206539}
!849 = !{i64 4206540}
!850 = !{i64 4206541}
!851 = !{i64 4206543}
!852 = !{i64 4206549}
!853 = !{i64 4206551}
!854 = !{i64 4206556}
!855 = !{i64 4206560}
!856 = !{i64 4206566}
!857 = !{i64 4206577}
!858 = !{i64 4206586}
!859 = !{i64 4206587}
!860 = !{i64 4206592}
!861 = !{i64 4206598}
!862 = !{i64 4206603}
!863 = !{i64 4206606}
!864 = !{i64 4206612}
!865 = !{i64 4206617}
!866 = !{i64 4206619}
!867 = !{i64 4206625}
!868 = !{i64 4206629}
!869 = !{i64 4206634}
!870 = !{i64 4206638}
!871 = !{i64 4206641}
!872 = !{i64 4206643}
!873 = !{i64 4206650}
!874 = !{i64 4206775}
!875 = !{i64 4206783}
!876 = !{i64 4206793}
!877 = !{i64 4206798}
!878 = !{i64 4206810}
!879 = !{i64 4206812}
!880 = !{i64 4206818}
!881 = !{i64 4206821}
!882 = !{i64 4206829}
!883 = !{i64 4206832}
!884 = !{i64 4206834}
!885 = !{i64 4206837}
!886 = !{i64 4206839}
!887 = !{i64 4206843}
!888 = !{i64 4206845}
!889 = !{i64 4206846}
!890 = !{i64 4206848}
!891 = !{i64 4206853}
!892 = !{i64 4206854}
!893 = !{i64 4206856}
!894 = !{i64 4206858}
!895 = !{i64 4206862}
!896 = !{i64 4206871}
!897 = !{i64 4206926}
!898 = !{i64 4206929}
!899 = !{i64 4206931}
!900 = !{i64 4206935}
!901 = !{i64 4207006}
!902 = !{i64 4207008}
!903 = !{i64 4207010}
!904 = !{i64 4207012}
!905 = !{i64 4207029}
!906 = !{i64 4207042}
!907 = !{i64 4207043}
!908 = !{i64 4207046}
!909 = !{i64 4207056}
!910 = !{i64 4207059}
!911 = !{i64 4207063}
!912 = !{i64 4207067}
!913 = !{i64 4207070}
!914 = !{i64 4207069}
!915 = !{i64 4207080}
!916 = !{i64 4207090}
!917 = !{i64 4207092}
!918 = !{i64 4207095}
!919 = !{i64 4207053}
!920 = !{i64 4207135}
!921 = !{i64 4207141}
!922 = !{i64 4207149}
!923 = !{i64 4207173}
!924 = !{i64 4207341}
!925 = !{i64 4207505}
!926 = !{i64 4207507}
!927 = !{i64 4207508}
!928 = !{i64 4207522}
!929 = !{i64 4207533}
!930 = !{i64 4207536}
!931 = !{i64 4207580}
!932 = !{i64 4207587}
!933 = !{i64 4207635}
!934 = !{i64 4207662}
!935 = !{i64 4207731}
!936 = !{i64 4207735}
!937 = !{i64 4207751}
!938 = !{i64 4207786}
!939 = !{i64 4207812}
!940 = !{i64 4207837}
!941 = !{i64 4207963}
!942 = !{i64 4207965}
!943 = !{i64 4207967}
!944 = !{i64 4207969}
!945 = !{i64 4207994}
!946 = !{i64 4207997}
!947 = !{i64 4208004}
!948 = !{i64 4208007}
!949 = !{i64 4207970}
!950 = !{i64 4207973}
!951 = !{i64 4208013}
!952 = !{i64 4208203}
!953 = !{i64 4208034}
!954 = !{i64 4208037}
!955 = !{i64 4208040}
!956 = !{i64 4208045}
!957 = !{i64 4208076}
!958 = !{i64 4208051}
!959 = !{i64 4208055}
!960 = !{i64 4208059}
!961 = !{i64 4208069}
!962 = !{i64 4208062}
!963 = !{i64 4208064}
!964 = !{i64 4208065}
!965 = !{i64 4208078}
!966 = !{i64 4208085}
!967 = !{i64 4208075}
!968 = !{i64 4208092}
!969 = !{i64 4208087}
!970 = !{i64 4208090}
!971 = !{i64 4208095}
!972 = !{i64 4208104}
!973 = !{i64 4208106}
!974 = !{i64 4208110}
!975 = !{i64 4208112}
!976 = !{i64 4208114}
!977 = !{i64 4208117}
!978 = !{i64 4208120}
!979 = !{i64 4208125}
!980 = !{i64 4208128}
!981 = !{i64 4208131}
!982 = !{i64 4208134}
!983 = !{i64 4208137}
!984 = !{i64 4208140}
!985 = !{i64 4208149}
!986 = !{i64 4208152}
!987 = !{i64 4208156}
!988 = !{i64 4208157}
!989 = !{i64 4208161}
!990 = !{i64 4208162}
!991 = !{i64 4208167}
!992 = !{i64 4208169}
!993 = !{i64 4208175}
!994 = !{i64 4208107}
!995 = !{i64 4208177}
!996 = !{i64 4208178}
!997 = !{i64 4208183}
!998 = !{i64 4208189}
!999 = !{i64 4208192}
!1000 = !{i64 4208198}
!1001 = !{i64 4208206}
!1002 = !{i64 4208200}
!1003 = !{i64 4208212}
!1004 = !{i64 4208222}
!1005 = !{i64 4208225}
!1006 = !{i64 4208227}
!1007 = !{i64 4208230}
!1008 = !{i64 4208235}
!1009 = !{i64 4208238}
!1010 = !{i64 4208249}
!1011 = !{i64 4208252}
!1012 = !{i64 4208257}
!1013 = !{i64 4208262}
!1014 = !{i64 4208263}
!1015 = !{i64 4208264}
!1016 = !{i64 4208269}
!1017 = !{i64 4208275}
!1018 = !{i64 4208278}
!1019 = !{i64 4208280}
!1020 = !{i64 4208285}
!1021 = !{i64 4208290}
!1022 = !{i64 4208298}
!1023 = !{i64 4208303}
!1024 = !{i64 4208293}
!1025 = !{i64 4208305}
!1026 = !{i64 4208306}
!1027 = !{i64 4208309}
!1028 = !{i64 4208312}
!1029 = !{i64 4208314}
!1030 = !{i64 4208319}
!1031 = !{i64 4208324}
!1032 = !{i64 4208325}
!1033 = !{i64 4208327}
!1034 = !{i64 4208333}
!1035 = !{i64 4208382}
!1036 = !{i64 4208387}
!1037 = !{i64 4208390}
!1038 = !{i64 4208391}
!1039 = !{i64 4208392}
!1040 = !{i64 4208393}
!1041 = !{i64 4208394}
!1042 = !{i64 4208404}
!1043 = !{i64 4208403}
!1044 = !{i64 4208407}
!1045 = !{i64 4208412}
!1046 = !{i64 4208409}
!1047 = !{i64 4208424}
!1048 = !{i64 4208429}
!1049 = !{i64 4208430}
!1050 = !{i64 4208438}
!1051 = !{i64 4208449}
!1052 = !{i64 4208450}
!1053 = !{i64 4208259}
!1054 = !{i64 4208472}
!1055 = !{i64 4208478}
!1056 = !{i64 4208479}
!1057 = !{i64 4208480}
!1058 = !{i64 4208481}
!1059 = !{i64 4208486}
!1060 = !{i64 4208487}
!1061 = !{i64 4208488}
!1062 = !{i64 4208496}
!1063 = !{i64 4208498}
!1064 = !{i64 4208503}
!1065 = !{i64 4208504}
!1066 = !{i64 4208507}
!1067 = !{i64 4208508}
!1068 = !{i64 4208511}
!1069 = !{i64 4208513}
!1070 = !{i64 4208514}
!1071 = !{i64 4208516}
!1072 = !{i64 4208517}
!1073 = !{i64 4208524}
!1074 = !{i64 4208529}
!1075 = !{i64 4208849}
!1076 = !{i64 4208851}
!1077 = !{i64 4208853}
!1078 = !{i64 4208854}
!1079 = !{i64 4208859}
!1080 = !{i64 4208867}
!1081 = !{i64 4208870}
!1082 = !{i64 4208874}
!1083 = !{i64 4208879}
!1084 = !{i64 4208881}
!1085 = !{i64 4208886}
!1086 = !{i64 4208891}
!1087 = !{i64 4208897}
!1088 = !{i64 4208905}
!1089 = !{i64 4208906}
!1090 = !{i64 4208907}
!1091 = !{i64 4208909}
!1092 = !{i64 4208911}
!1093 = !{i64 4208912}
!1094 = !{i64 4208917}
!1095 = !{i64 4208919}
!1096 = !{i64 4208873}
!1097 = !{i64 4208931}
!1098 = !{i64 4208936}
!1099 = !{i64 4208938}
!1100 = !{i64 4208944}
!1101 = !{i64 4208945}
!1102 = !{i64 4208947}
!1103 = !{i64 4208956}
!1104 = !{i64 4208957}
!1105 = !{i64 4208962}
!1106 = !{i64 4208963}
!1107 = !{i64 4208967}
!1108 = !{i64 4208969}
!1109 = !{i64 4208980}
!1110 = !{i64 4208988}
!1111 = !{i64 4208993}
!1112 = !{i64 4208998}
!1113 = !{i64 4208999}
!1114 = !{i64 4209000}
!1115 = !{i64 4209003}
!1116 = !{i64 4209005}
!1117 = !{i64 4209011}
!1118 = !{i64 4209017}
!1119 = !{i64 4209020}
!1120 = !{i64 4209039}
!1121 = !{i64 4209051}
!1122 = !{i64 4209057}
!1123 = !{i64 4209083}
!1124 = !{i64 4209084}
!1125 = !{i64 4209087}
!1126 = !{i64 4209144}
!1127 = !{i64 4209149}
!1128 = !{i64 4209152}
!1129 = !{i64 4209155}
!1130 = !{i64 4209156}
!1131 = !{i64 4209158}
!1132 = !{i64 4209168}
!1133 = !{i64 4209175}
!1134 = !{i64 4209179}
!1135 = !{i64 4209189}
!1136 = !{i64 4209196}
!1137 = !{i64 4209202}
!1138 = !{i64 4209214}
!1139 = !{i64 4209224}
!1140 = !{i64 4209225}
!1141 = !{i64 4209227}
!1142 = !{i64 4209230}
!1143 = !{i64 4209244}
!1144 = !{i64 4209245}
!1145 = !{i64 4209255}
!1146 = !{i64 4209258}
!1147 = !{i64 4209260}
!1148 = !{i64 4209266}
!1149 = !{i64 4209268}
!1150 = !{i64 4209270}
!1151 = !{i64 4209280}
!1152 = !{i64 4209325}
!1153 = !{i64 4209328}
!1154 = !{i64 4209334}
!1155 = !{i64 4209338}
!1156 = !{i64 4209343}
!1157 = !{i64 4209348}
!1158 = !{i64 4209355}
!1159 = !{i64 4209357}
!1160 = !{i64 4209360}
!1161 = !{i64 4209365}
!1162 = !{i64 4209370}
!1163 = !{i64 4209375}
!1164 = !{i64 4209377}
!1165 = !{i64 4209379}
!1166 = !{i64 4209385}
!1167 = !{i64 4209387}
!1168 = !{i64 4209391}
!1169 = !{i64 4209392}
!1170 = !{i64 4209398}
!1171 = !{i64 4209403}
!1172 = !{i64 4209416}
!1173 = !{i64 4209420}
!1174 = !{i64 4209430}
!1175 = !{i64 4209432}
!1176 = !{i64 4209437}
!1177 = !{i64 4209438}
!1178 = !{i64 4209444}
!1179 = !{i64 4209447}
!1180 = !{i64 4209452}
!1181 = !{i64 4209453}
!1182 = !{i64 4209454}
!1183 = !{i64 4209458}
!1184 = !{i64 4209461}
!1185 = !{i64 4209465}
!1186 = !{i64 4209469}
!1187 = !{i64 4209472}
!1188 = !{i64 4209474}
!1189 = !{i64 4209480}
!1190 = !{i64 4209483}
!1191 = !{i64 4209489}
!1192 = !{i64 4209496}
!1193 = !{i64 4209498}
!1194 = !{i64 4209504}
!1195 = !{i64 4209510}
!1196 = !{i64 4209512}
!1197 = !{i64 4209518}
!1198 = !{i64 4209522}
!1199 = !{i64 4209524}
!1200 = !{i64 4209709}
!1201 = !{i64 4209717}
!1202 = !{i64 4209724}
!1203 = !{i64 4209729}
!1204 = !{i64 4209738}
!1205 = !{i64 4209739}
!1206 = !{i64 4209759}
!1207 = !{i64 4209833}
!1208 = !{i64 4209840}
!1209 = !{i64 4209853}
!1210 = !{i64 4209861}
!1211 = !{i64 4209868}
!1212 = !{i64 4209873}
!1213 = !{i64 4209875}
!1214 = !{i64 4209881}
!1215 = !{i64 4209883}
!1216 = !{i64 4209890}
!1217 = !{i64 4209892}
!1218 = !{i64 4209898}
!1219 = !{i64 4209900}
!1220 = !{i64 4209905}
!1221 = !{i64 4209908}
!1222 = !{i64 4209914}
!1223 = !{i64 4209919}
!1224 = !{i64 4209924}
!1225 = !{i64 4209929}
!1226 = !{i64 4209931}
!1227 = !{i64 4209933}
!1228 = !{i64 4209939}
!1229 = !{i64 4209944}
!1230 = !{i64 4209945}
!1231 = !{i64 4209947}
!1232 = !{i64 4209953}
!1233 = !{i64 4209955}
!1234 = !{i64 4209963}
!1235 = !{i64 4209969}
!1236 = !{i64 4209974}
!1237 = !{i64 4209982}
!1238 = !{i64 4209984}
!1239 = !{i64 4209989}
!1240 = !{i64 4209995}
!1241 = !{i64 4210017}
!1242 = !{i64 4210023}
!1243 = !{i64 4210026}
!1244 = !{i64 4210027}
!1245 = !{i64 4210037}
!1246 = !{i64 4210044}
!1247 = !{i64 4210055}
!1248 = !{i64 4210058}
!1249 = !{i64 4210060}
!1250 = !{i64 4210066}
!1251 = !{i64 4210072}
!1252 = !{i64 4210074}
!1253 = !{i64 4210076}
!1254 = !{i64 4210082}
!1255 = !{i64 4210088}
!1256 = !{i64 4210091}
!1257 = !{i64 4210093}
!1258 = !{i64 4210095}
!1259 = !{i64 4210100}
!1260 = !{i64 4210103}
!1261 = !{i64 4210109}
!1262 = !{i64 4210126}
!1263 = !{i64 4210115}
!1264 = !{i64 4210118}
!1265 = !{i64 4210124}
!1266 = !{i64 4210128}
!1267 = !{i64 4210131}
!1268 = !{i64 4210137}
!1269 = !{i64 4210148}
!1270 = !{i64 4210150}
!1271 = !{i64 4210159}
!1272 = !{i64 4210164}
!1273 = !{i64 4210169}
!1274 = !{i64 4210171}
!1275 = !{i64 4210175}
!1276 = !{i64 4210180}
!1277 = !{i64 4210186}
!1278 = !{i64 4210189}
!1279 = !{i64 4210193}
!1280 = !{i64 4210199}
!1281 = !{i64 4210201}
!1282 = !{i64 4210209}
!1283 = !{i64 4210212}
!1284 = !{i64 4210216}
!1285 = !{i64 4210222}
!1286 = !{i64 4210227}
!1287 = !{i64 4210234}
!1288 = !{i64 4210261}
!1289 = !{i64 4210270}
!1290 = !{i64 4210275}
!1291 = !{i64 4210285}
!1292 = !{i64 4210297}
!1293 = !{i64 4210300}
!1294 = !{i64 4210302}
!1295 = !{i64 4210309}
!1296 = !{i64 4210176}
!1297 = !{i64 4210313}
!1298 = !{i64 4210314}
!1299 = !{i64 4210315}
!1300 = !{i64 4210318}
!1301 = !{i64 4210326}
!1302 = !{i64 4210334}
!1303 = !{i64 4210335}
!1304 = !{i64 4210329}
!1305 = !{i64 4210338}
!1306 = !{i64 4210342}
!1307 = !{i64 4210350}
!1308 = !{i64 4210369}
!1309 = !{i64 4210373}
!1310 = !{i64 4210376}
!1311 = !{i64 4210408}
!1312 = !{i64 4210414}
!1313 = !{i64 4210419}
!1314 = !{i64 4210424}
!1315 = !{i64 4210427}
!1316 = !{i64 4210434}
!1317 = !{i64 4210438}
!1318 = !{i64 4210444}
!1319 = !{i64 4210446}
!1320 = !{i64 4210448}
!1321 = !{i64 4210451}
!1322 = !{i64 4210456}
!1323 = !{i64 4210458}
!1324 = !{i64 4210460}
!1325 = !{i64 4210468}
!1326 = !{i64 4210469}
!1327 = !{i64 4210471}
!1328 = !{i64 4210487}
!1329 = !{i64 4210489}
!1330 = !{i64 4210498}
!1331 = !{i64 4210501}
!1332 = !{i64 4210625}
!1333 = !{i64 4210631}
!1334 = !{i64 4210634}
!1335 = !{i64 4210639}
!1336 = !{i64 4210645}
!1337 = !{i64 4210647}
!1338 = !{i64 4210649}
!1339 = !{i64 4210654}
!1340 = !{i64 4210661}
!1341 = !{i64 4210665}
!1342 = !{i64 4210666}
!1343 = !{i64 4210669}
!1344 = !{i64 4210670}
!1345 = !{i64 4210676}
!1346 = !{i64 4210679}
!1347 = !{i64 4210684}
!1348 = !{i64 4210690}
!1349 = !{i64 4210692}
!1350 = !{i64 4210545}
!1351 = !{i64 4210546}
!1352 = !{i64 4210555}
!1353 = !{i64 4210557}
!1354 = !{i64 4210558}
!1355 = !{i64 4210561}
!1356 = !{i64 4210605}
!1357 = !{i64 4210575}
!1358 = !{i64 4210579}
!1359 = !{i64 4210582}
!1360 = !{i64 4210584}
!1361 = !{i64 4210609}
!1362 = !{i64 4210615}
!1363 = !{i64 4210619}
!1364 = !{i64 4210694}
!1365 = !{i64 4210699}
!1366 = !{i64 4210700}
!1367 = !{i64 4210704}
!1368 = !{i64 4210705}
!1369 = !{i64 4210715}
!1370 = !{i64 4210722}
!1371 = !{i64 4210724}
!1372 = !{i64 4210732}
!1373 = !{i64 4210733}
!1374 = !{i64 4210747}
!1375 = !{i64 4210749}
!1376 = !{i64 4210753}
!1377 = !{i64 4210760}
!1378 = !{i64 4210763}
!1379 = !{i64 4210765}
!1380 = !{i64 4210769}
!1381 = !{i64 4210770}
!1382 = !{i64 4210772}
!1383 = !{i64 4210774}
!1384 = !{i64 4210781}
!1385 = !{i64 4210784}
!1386 = !{i64 4210787}
!1387 = !{i64 4210789}
!1388 = !{i64 4210808}
!1389 = !{i64 4210814}
!1390 = !{i64 4210825}
!1391 = !{i64 4210828}
!1392 = !{i64 4210831}
!1393 = !{i64 4210839}
!1394 = !{i64 4210875}
!1395 = !{i64 4210881}
!1396 = !{i64 4210887}
!1397 = !{i64 4210890}
!1398 = !{i64 4210899}
!1399 = !{i64 4210907}
!1400 = !{i64 4210914}
!1401 = !{i64 4210917}
!1402 = !{i64 4210918}
!1403 = !{i64 4210919}
!1404 = !{i64 4210925}
!1405 = !{i64 4210935}
!1406 = !{i64 4210938}
!1407 = !{i64 4210946}
!1408 = !{i64 4210952}
!1409 = !{i64 4210953}
!1410 = !{i64 4210956}
!1411 = !{i64 4210959}
!1412 = !{i64 4210931}
!1413 = !{i64 4210964}
!1414 = !{i64 4210969}
!1415 = !{i64 4210977}
!1416 = !{i64 4210975}
!1417 = !{i64 4210989}
!1418 = !{i64 4210991}
!1419 = !{i64 4210994}
!1420 = !{i64 4210996}
!1421 = !{i64 4211002}
!1422 = !{i64 4211003}
!1423 = !{i64 4211004}
!1424 = !{i64 4211009}
!1425 = !{i64 4211015}
!1426 = !{i64 4211020}
!1427 = !{i64 4211026}
!1428 = !{i64 4211032}
!1429 = !{i64 4211034}
!1430 = !{i64 4211037}
!1431 = !{i64 4211043}
!1432 = !{i64 4211046}
!1433 = !{i64 4211049}
!1434 = !{i64 4211055}
!1435 = !{i64 4211063}
!1436 = !{i64 4211065}
!1437 = !{i64 4211072}
!1438 = !{i64 4211074}
!1439 = !{i64 4211076}
!1440 = !{i64 4211258}
!1441 = !{i64 4211285}
!1442 = !{i64 4211290}
!1443 = !{i64 4211297}
!1444 = !{i64 4211298}
!1445 = !{i64 4211307}
!1446 = !{i64 4211313}
!1447 = !{i64 4211319}
!1448 = !{i64 4211321}
!1449 = !{i64 4211328}
!1450 = !{i64 4211330}
!1451 = !{i64 4211336}
!1452 = !{i64 4211337}
!1453 = !{i64 4211343}
!1454 = !{i64 4211355}
!1455 = !{i64 4211357}
!1456 = !{i64 4211359}
!1457 = !{i64 4211378}
!1458 = !{i64 4211385}
!1459 = !{i64 4211392}
!1460 = !{i64 4211394}
!1461 = !{i64 4211407}
!1462 = !{i64 4211413}
!1463 = !{i64 4211416}
!1464 = !{i64 4211423}
!1465 = !{i64 4211433}
!1466 = !{i64 4211440}
!1467 = !{i64 4211447}
!1468 = !{i64 4211454}
!1469 = !{i64 4211461}
!1470 = !{i64 4211463}
!1471 = !{i64 4211522}
!1472 = !{i64 4211528}
!1473 = !{i64 4211529}
!1474 = !{i64 4211535}
!1475 = !{i64 4211565}
!1476 = !{i64 4211596}
!1477 = !{i64 4211620}
!1478 = !{i64 4211645}
!1479 = !{i64 4211649}
!1480 = !{i64 4211673}
!1481 = !{i64 4211733}
!1482 = !{i64 4211750}
!1483 = !{i64 4211755}
!1484 = !{i64 4211756}
!1485 = !{i64 4211765}
!1486 = !{i64 4211768}
!1487 = !{i64 4211770}
!1488 = !{i64 4211772}
!1489 = !{i64 4211792}
!1490 = !{i64 4211806}
!1491 = !{i64 4211809}
!1492 = !{i64 4211820}
!1493 = !{i64 4211824}
!1494 = !{i64 4211842}
!1495 = !{i64 4211844}
!1496 = !{i64 4211853}
!1497 = !{i64 4211859}
!1498 = !{i64 4211870}
!1499 = !{i64 4211876}
!1500 = !{i64 4211886}
!1501 = !{i64 4211889}
!1502 = !{i64 4211890}
!1503 = !{i64 4211901}
!1504 = !{i64 4211906}
!1505 = !{i64 4211907}
!1506 = !{i64 4211908}
!1507 = !{i64 4211911}
!1508 = !{i64 4211912}
!1509 = !{i64 4211923}
!1510 = !{i64 4211929}
!1511 = !{i64 4211934}
!1512 = !{i64 4211936}
!1513 = !{i64 4211937}
!1514 = !{i64 4211938}
!1515 = !{i64 4211944}
!1516 = !{i64 4211945}
!1517 = !{i64 4211956}
!1518 = !{i64 4211960}
!1519 = !{i64 4211967}
!1520 = !{i64 4211970}
!1521 = !{i64 4211972}
!1522 = !{i64 4211978}
!1523 = !{i64 4211979}
!1524 = !{i64 4211982}
!1525 = !{i64 4211983}
!1526 = !{i64 4211986}
!1527 = !{i64 4212000}
!1528 = !{i64 4212003}
!1529 = !{i64 4212016}
!1530 = !{i64 4212017}
!1531 = !{i64 4212020}
!1532 = !{i64 4212024}
!1533 = !{i64 4212036}
!1534 = !{i64 4212037}
!1535 = !{i64 4212044}
!1536 = !{i64 4212053}
!1537 = !{i64 4212071}
!1538 = !{i64 4212070}
!1539 = !{i64 4212074}
!1540 = !{i64 4212090}
!1541 = !{i64 4212092}
!1542 = !{i64 4212108}
!1543 = !{i64 4212111}
!1544 = !{i64 4212113}
!1545 = !{i64 4212115}
!1546 = !{i64 4212117}
!1547 = !{i64 4212127}
!1548 = !{i64 4212135}
!1549 = !{i64 4212140}
!1550 = !{i64 4212193}
!1551 = !{i64 4212198}
!1552 = !{i64 4212206}
!1553 = !{i64 4212212}
!1554 = !{i64 4212213}
!1555 = !{i64 4212215}
!1556 = !{i64 4212222}
!1557 = !{i64 4212229}
!1558 = !{i64 4212230}
!1559 = !{i64 4212233}
!1560 = !{i64 4212236}
!1561 = !{i64 4212242}
!1562 = !{i64 4212244}
!1563 = !{i64 4212247}
!1564 = !{i64 4212249}
!1565 = !{i64 4212257}
!1566 = !{i64 4212260}
!1567 = !{i64 4212262}
!1568 = !{i64 4212268}
!1569 = !{i64 4212274}
!1570 = !{i64 4212282}
!1571 = !{i64 4212288}
!1572 = !{i64 4212290}
!1573 = !{i64 4212295}
!1574 = !{i64 4212300}
!1575 = !{i64 4212306}
!1576 = !{i64 4212318}
!1577 = !{i64 4212323}
!1578 = !{i64 4212335}
!1579 = !{i64 4212337}
!1580 = !{i64 4212353}
!1581 = !{i64 4212390}
!1582 = !{i64 4212396}
!1583 = !{i64 4212419}
!1584 = !{i64 4212425}
!1585 = !{i64 4212428}
!1586 = !{i64 4212431}
!1587 = !{i64 4212441}
!1588 = !{i64 4212457}
!1589 = !{i64 4212463}
!1590 = !{i64 4212465}
!1591 = !{i64 4212330}
!1592 = !{i64 4212468}
!1593 = !{i64 4212471}
!1594 = !{i64 4212473}
!1595 = !{i64 4212477}
!1596 = !{i64 4212479}
!1597 = !{i64 4212482}
!1598 = !{i64 4212485}
!1599 = !{i64 4212491}
!1600 = !{i64 4212493}
!1601 = !{i64 4212495}
!1602 = !{i64 4212502}
!1603 = !{i64 4212540}
!1604 = !{i64 4212544}
!1605 = !{i64 4212547}
!1606 = !{i64 4212555}
!1607 = !{i64 4212557}
!1608 = !{i64 4212560}
!1609 = !{i64 4212567}
!1610 = !{i64 4212569}
!1611 = !{i64 4212571}
!1612 = !{i64 4212572}
!1613 = !{i64 4212578}
!1614 = !{i64 4212590}
!1615 = !{i64 4212632}
!1616 = !{i64 4212642}
!1617 = !{i64 4212648}
!1618 = !{i64 4212649}
!1619 = !{i64 4212651}
!1620 = !{i64 4212653}
!1621 = !{i8 1, i8 8}
!1622 = !{i64 4212654}
!1623 = !{i64 4212655}
!1624 = !{i64 4212664}
!1625 = !{i64 4212677}
!1626 = !{i64 4212683}
!1627 = !{i64 4212687}
!1628 = !{i64 4212703}
!1629 = !{i64 4212711}
!1630 = !{i64 4212714}
!1631 = !{i64 4212732}
!1632 = !{i64 4212734}
!1633 = !{i64 4212735}
!1634 = !{i64 4212740}
!1635 = !{i64 4212742}
!1636 = !{i64 4212753}
!1637 = !{i64 4212754}
!1638 = !{i64 4212770}
!1639 = !{i64 4212772}
!1640 = !{i64 4212778}
!1641 = !{i64 4212783}
!1642 = !{i64 4212786}
!1643 = !{i64 4212798}
!1644 = !{i64 4212806}
!1645 = !{i64 4212807}
!1646 = !{i64 4212823}
!1647 = !{i64 4212866}
!1648 = !{i64 4212870}
!1649 = !{i64 4212888}
!1650 = !{i64 4212895}
!1651 = !{i64 4212902}
!1652 = !{i64 4212908}
!1653 = !{i64 4212913}
!1654 = !{i64 4212918}
!1655 = !{i64 4212921}
!1656 = !{i64 4212927}
!1657 = !{i64 4212933}
!1658 = !{i64 4212935}
!1659 = !{i64 4212937}
!1660 = !{i64 4212939}
!1661 = !{i64 4212943}
!1662 = !{i64 4212944}
!1663 = !{i64 4212952}
!1664 = !{i64 4212954}
!1665 = !{i64 4212958}
!1666 = !{i64 4212962}
!1667 = !{i64 4212964}
!1668 = !{i64 4212965}
!1669 = !{i64 4212966}
!1670 = !{i64 4212969}
!1671 = !{i64 4212975}
!1672 = !{i64 4213012}
!1673 = !{i64 4213013}
!1674 = !{i64 4213022}
!1675 = !{i64 4213024}
!1676 = !{i64 4213025}
!1677 = !{i64 4213029}
!1678 = !{i64 4213035}
!1679 = !{i64 4213038}
!1680 = !{i64 4213040}
!1681 = !{i64 4213043}
!1682 = !{i64 4213048}
!1683 = !{i64 4213050}
!1684 = !{i64 4213063}
!1685 = !{i64 4213064}
!1686 = !{i64 4213072}
!1687 = !{i64 4213077}
!1688 = !{i64 4213088}
!1689 = !{i64 4213108}
!1690 = !{i64 4213118}
!1691 = !{i64 4213169}
!1692 = !{i64 4213170}
!1693 = !{i64 4213257}
!1694 = !{i64 4213263}
!1695 = !{i64 4213265}
!1696 = !{i64 4213316}
!1697 = !{i64 4213319}
!1698 = !{i64 4213329}
!1699 = !{i64 4213353}
!1700 = !{i64 4213359}
!1701 = !{i64 4213364}
!1702 = !{i64 4213373}
!1703 = !{i64 4213374}
!1704 = !{i64 4213367}
!1705 = !{i64 4213376}
!1706 = !{i64 4213381}
!1707 = !{i64 4213412}
!1708 = !{i64 4213415}
!1709 = !{i64 4213417}
!1710 = !{i64 4213420}
!1711 = !{i64 4213421}
!1712 = !{i64 4214030}
!1713 = !{i64 4214032}
!1714 = !{i64 4214139}
!1715 = !{i64 4214145}
!1716 = !{i64 4214181}
!1717 = !{i64 4214197}
!1718 = !{i64 4214247}
!1719 = !{i64 4214249}
!1720 = !{i64 4214251}
!1721 = !{i64 4214259}
!1722 = !{i64 4214253}
!1723 = !{i64 4214263}
!1724 = !{i64 4214256}
!1725 = !{i64 4214265}
!1726 = !{i64 4214267}
!1727 = !{i64 4214293}
!1728 = !{i64 4214296}
!1729 = !{i64 4214297}
!1730 = !{i64 4214298}
!1731 = !{i64 4214300}
!1732 = !{i64 4214303}
!1733 = !{i64 4214305}
!1734 = !{i64 4214307}
!1735 = !{i64 4214314}
!1736 = !{i64 4214317}
!1737 = !{i64 4214322}
!1738 = !{i64 4214325}
!1739 = !{i64 4214329}
!1740 = !{i64 4214333}
!1741 = !{i64 4214343}
!1742 = !{i64 4214345}
!1743 = !{i64 4214347}
!1744 = !{i64 4214354}
!1745 = !{i64 4214358}
!1746 = !{i64 4214363}
!1747 = !{i64 4214361}
!1748 = !{i64 4214364}
!1749 = !{i64 4214375}
!1750 = !{i64 4214385}
!1751 = !{i64 4214395}
!1752 = !{i64 4214401}
!1753 = !{i64 4214383}
!1754 = !{i64 4214405}
!1755 = !{i64 4214407}
!1756 = !{i64 4214411}
!1757 = !{i64 4214418}
!1758 = !{i64 4214422}
!1759 = !{i64 4214431}
!1760 = !{i64 4214432}
!1761 = !{i64 4214437}
!1762 = !{i64 4214442}
!1763 = !{i64 4214443}
!1764 = !{i64 4214444}
!1765 = !{i64 4214446}
!1766 = !{i64 4214452}
!1767 = !{i64 4214457}
!1768 = !{i64 4214460}
!1769 = !{i64 4214462}
!1770 = !{i64 4214468}
!1771 = !{i64 4214471}
!1772 = !{i64 4214481}
!1773 = !{i64 4214480}
!1774 = !{i64 4214490}
!1775 = !{i64 4214494}
!1776 = !{i64 4214523}
!1777 = !{i64 4214528}
!1778 = !{i64 4214530}
!1779 = !{i64 4214536}
!1780 = !{i64 4214553}
!1781 = !{i64 4214556}
!1782 = !{i64 4214567}
!1783 = !{i64 4214574}
!1784 = !{i64 4214578}
!1785 = !{i64 4214582}
!1786 = !{i64 4214616}
!1787 = !{i64 4214618}
!1788 = !{i64 4214637}
!1789 = !{i64 4214656}
!1790 = !{i64 4214664}
!1791 = !{i64 4214670}
!1792 = !{i64 4214677}
!1793 = !{i64 4214679}
!1794 = !{i64 4214662}
!1795 = !{i64 4214674}
!1796 = !{i64 4214681}
!1797 = !{i64 4214708}
!1798 = !{i64 4214711}
!1799 = !{i64 4214713}
!1800 = !{i64 4214718}
!1801 = !{i64 4214720}
!1802 = !{i64 4214724}
!1803 = !{i64 4214728}
!1804 = !{i64 4214730}
!1805 = !{i64 4214732}
!1806 = !{i64 4214649}
!1807 = !{i64 4214746}
!1808 = !{i64 4214752}
!1809 = !{i64 4214758}
!1810 = !{i64 4214767}
!1811 = !{i64 4214778}
!1812 = !{i64 4214780}
!1813 = !{i64 4214782}
!1814 = !{i64 4214784}
!1815 = !{i64 4214786}
!1816 = !{i64 4214790}
!1817 = !{i64 4214792}
!1818 = !{i64 4214800}
!1819 = !{i64 4214805}
!1820 = !{i64 4214808}
!1821 = !{i64 4214844}
!1822 = !{i64 4214855}
!1823 = !{i64 4214857}
!1824 = !{i64 4214863}
!1825 = !{i64 4214872}
!1826 = !{i64 4214879}
!1827 = !{i64 4214881}
!1828 = !{i64 4214884}
!1829 = !{i64 4214887}
!1830 = !{i64 4214891}
!1831 = !{i64 4214893}
!1832 = !{i64 4214896}
!1833 = !{i64 4214899}
!1834 = !{i64 4214916}
!1835 = !{i64 4214919}
!1836 = !{i64 4214924}
!1837 = !{i64 4214934}
!1838 = !{i64 4214936}
!1839 = !{i64 4214941}
!1840 = !{i64 4214902}
!1841 = !{i64 4214931}
!1842 = !{i64 4214943}
!1843 = !{i64 4214951}
!1844 = !{i64 4214954}
!1845 = !{i64 4214955}
!1846 = !{i64 4214958}
!1847 = !{i64 4214963}
!1848 = !{i64 4214969}
!1849 = !{i64 4214971}
!1850 = !{i64 4214962}
!1851 = !{i64 4214977}
!1852 = !{i64 4214986}
!1853 = !{i64 4214989}
!1854 = !{i64 4214996}
!1855 = !{i64 4214994}
!1856 = !{i64 4215026}
!1857 = !{i64 4215035}
!1858 = !{i64 4215037}
!1859 = !{i64 4214975}
!1860 = !{i64 4215044}
!1861 = !{i64 4215048}
!1862 = !{i64 4215055}
!1863 = !{i64 4215058}
!1864 = !{i64 4214910}
!1865 = !{i64 4214938}
!1866 = !{i64 4215069}
!1867 = !{i64 4215077}
!1868 = !{i64 4215283}
!1869 = !{i64 4215286}
!1870 = !{i64 4215289}
!1871 = !{i64 4215295}
!1872 = !{i64 4215300}
!1873 = !{i64 4215303}
!1874 = !{i64 4215305}
!1875 = !{i64 4215307}
!1876 = !{i64 4215310}
!1877 = !{i64 4215319}
!1878 = !{i64 4215323}
!1879 = !{i64 4215326}
!1880 = !{i64 4215333}
!1881 = !{i64 4215335}
!1882 = !{i64 4215337}
!1883 = !{i64 4215342}
!1884 = !{i64 4215345}
!1885 = !{i64 4215352}
!1886 = !{i64 4215353}
!1887 = !{i64 4215356}
!1888 = !{i64 4215350}
!1889 = !{i64 4215358}
!1890 = !{i64 4215364}
!1891 = !{i64 4215366}
!1892 = !{i64 4215368}
!1893 = !{i64 4215370}
!1894 = !{i64 4215371}
!1895 = !{i64 4215374}
!1896 = !{i64 4215297}
!1897 = !{i64 4215384}
!1898 = !{i64 4215387}
!1899 = !{i64 4215391}
!1900 = !{i64 4215430}
!1901 = !{i64 4215433}
!1902 = !{i64 4215436}
!1903 = !{i64 4215438}
!1904 = !{i64 4215441}
!1905 = !{i64 4215443}
!1906 = !{i64 4215464}
!1907 = !{i64 4215445}
!1908 = !{i64 4215446}
!1909 = !{i64 4215457}
!1910 = !{i64 4215459}
!1911 = !{i64 4215460}
!1912 = !{i64 4215462}
!1913 = !{i64 4215465}
!1914 = !{i64 4215478}
!1915 = !{i64 4215481}
!1916 = !{i64 4215484}
!1917 = !{i64 4215486}
!1918 = !{i64 4215496}
!1919 = !{i64 4215506}
!1920 = !{i64 4215509}
!1921 = !{i64 4215511}
!1922 = !{i64 4215519}
!1923 = !{i64 4215527}
!1924 = !{i64 4215529}
!1925 = !{i64 4215530}
!1926 = !{i64 4215532}
!1927 = !{i64 4215533}
!1928 = !{i64 4215539}
!1929 = !{i64 4215547}
!1930 = !{i64 4215548}
!1931 = !{i64 4215550}
!1932 = !{i64 4215592}
!1933 = !{i64 4215593}
!1934 = !{i64 4215599}
!1935 = !{i64 4215603}
!1936 = !{i64 4215606}
!1937 = !{i64 4215609}
!1938 = !{i64 4215614}
!1939 = !{i64 4215608}
!1940 = !{i64 4215624}
!1941 = !{i64 4215630}
!1942 = !{i64 4215636}
!1943 = !{i64 4215638}
!1944 = !{i64 4215644}
!1945 = !{i64 4215648}
!1946 = !{i64 4215655}
!1947 = !{i64 4215657}
!1948 = !{i64 4215663}
!1949 = !{i64 4215666}
!1950 = !{i64 4215671}
!1951 = !{i64 4215676}
!1952 = !{i64 4215677}
!1953 = !{i64 4215679}
!1954 = !{i64 4215680}
!1955 = !{i64 4215682}
!1956 = !{i64 4215685}
!1957 = !{i64 4215688}
!1958 = !{i64 4215692}
!1959 = !{i64 4215693}
!1960 = !{i64 4215695}
!1961 = !{i64 4215701}
!1962 = !{i64 4215708}
!1963 = !{i64 4215711}
!1964 = !{i64 4215727}
!1965 = !{i64 4215733}
!1966 = !{i64 4215734}
!1967 = !{i64 4215736}
!1968 = !{i64 4215739}
!1969 = !{i64 4215745}
!1970 = !{i64 4215617}
!1971 = !{i64 4215786}
!1972 = !{i64 4215789}
!1973 = !{i64 4215795}
!1974 = !{i64 4215800}
!1975 = !{i64 4215802}
!1976 = !{i64 4215808}
!1977 = !{i64 4215810}
!1978 = !{i64 4215812}
!1979 = !{i64 4215854}
!1980 = !{i64 4215862}
!1981 = !{i64 4215867}
!1982 = !{i64 4215877}
!1983 = !{i64 4215880}
!1984 = !{i64 4215991}
!1985 = !{i64 4215992}
!1986 = !{i64 4216000}
!1987 = !{i64 4216002}
!1988 = !{i64 4216009}
!1989 = !{i64 4216011}
!1990 = !{i64 4216017}
!1991 = !{i64 4216019}
!1992 = !{i64 4216024}
!1993 = !{i64 4216026}
!1994 = !{i64 4215874}
!1995 = !{i64 4216001}
!1996 = !{i64 4216030}
!1997 = !{i64 4216033}
!1998 = !{i64 4216037}
!1999 = !{i64 4216040}
!2000 = !{i64 4216042}
!2001 = !{i64 4216045}
!2002 = !{i64 4216051}
!2003 = !{i64 4216054}
!2004 = !{i64 4216060}
!2005 = !{i64 4216061}
!2006 = !{i64 4216069}
!2007 = !{i64 4216136}
!2008 = !{i64 4216138}
!2009 = !{i64 4216142}
!2010 = !{i64 4216144}
!2011 = !{i64 4216145}
!2012 = !{i64 4216146}
!2013 = !{i64 4216148}
!2014 = !{i64 4216150}
!2015 = !{i64 4216153}
!2016 = !{i64 4216154}
!2017 = !{i64 4216155}
!2018 = !{i64 4216157}
!2019 = !{i64 4216163}
!2020 = !{i64 4216176}
!2021 = !{i64 4216178}
!2022 = !{i64 4216180}
!2023 = !{i64 4216185}
!2024 = !{i64 4216194}
!2025 = !{i64 4216196}
!2026 = !{i64 4216199}
!2027 = !{i64 4216205}
!2028 = !{i64 4216207}
!2029 = !{i64 4216211}
!2030 = !{i64 4216213}
!2031 = !{i64 4216216}
!2032 = !{i64 4216220}
!2033 = !{i64 4216226}
!2034 = !{i64 4216219}
!2035 = !{i64 4216228}
!2036 = !{i64 4216229}
!2037 = !{i64 4216234}
!2038 = !{i64 4216237}
!2039 = !{i64 4216240}
!2040 = !{i64 4216246}
!2041 = !{i64 4216251}
!2042 = !{i64 4216265}
!2043 = !{i64 4216307}
!2044 = !{i64 4216310}
!2045 = !{i64 4216313}
!2046 = !{i64 4216316}
!2047 = !{i64 4216317}
!2048 = !{i64 4216326}
!2049 = !{i64 4216332}
!2050 = !{i64 4216335}
!2051 = !{i64 4216348}
!2052 = !{i64 4216353}
!2053 = !{i64 4216356}
!2054 = !{i64 4216359}
!2055 = !{i64 4216365}
!2056 = !{i64 4216368}
!2057 = !{i64 4216371}
!2058 = !{i64 4216374}
!2059 = !{i64 4216376}
!2060 = !{i64 4216381}
!2061 = !{i64 4216384}
!2062 = !{i64 4216385}
!2063 = !{i64 4216387}
!2064 = !{i64 4216406}
!2065 = !{i64 4216409}
!2066 = !{i64 4216411}
!2067 = !{i64 4216413}
!2068 = !{i64 4216415}
!2069 = !{i64 4216417}
!2070 = !{i64 4216422}
!2071 = !{i64 4216434}
!2072 = !{i64 4216440}
!2073 = !{i64 4216441}
!2074 = !{i64 4216444}
!2075 = !{i64 4216448}
!2076 = !{i64 4216449}
!2077 = !{i64 4216451}
!2078 = !{i64 4216453}
!2079 = !{i64 4216455}
!2080 = !{i64 4216457}
!2081 = !{i64 4216459}
!2082 = !{i64 4216464}
!2083 = !{i64 4216467}
!2084 = !{i64 4216469}
!2085 = !{i64 4216471}
!2086 = !{i64 4216475}
!2087 = !{i64 4216477}
!2088 = !{i64 4216515}
!2089 = !{i64 4216518}
!2090 = !{i64 4216522}
!2091 = !{i64 4216526}
!2092 = !{i64 4216527}
!2093 = !{i64 4216529}
!2094 = !{i64 4216530}
!2095 = !{i64 4216577}
!2096 = !{i64 4216580}
!2097 = !{i64 4216596}
!2098 = !{i64 4216597}
!2099 = !{i64 4216602}
!2100 = !{i64 4216624}
!2101 = !{i64 4216625}
!2102 = !{i64 4216634}
!2103 = !{i64 4216635}
!2104 = !{i64 4216645}
!2105 = !{i64 4216646}
!2106 = !{i64 4216648}
!2107 = !{i64 4216650}
!2108 = !{i64 4216652}
!2109 = !{i64 4216654}
!2110 = !{i64 4216656}
!2111 = !{i64 4216657}
!2112 = !{i64 4216662}
!2113 = !{i64 4216667}
!2114 = !{i64 4216669}
!2115 = !{i64 4216671}
!2116 = !{i64 4216676}
!2117 = !{i64 4216679}
!2118 = !{i64 4216681}
!2119 = !{i64 4216683}
!2120 = !{i64 4216710}
!2121 = !{i64 4216715}
!2122 = !{i64 4216718}
!2123 = !{i64 4216731}
!2124 = !{i64 4216736}
!2125 = !{i64 4216740}
!2126 = !{i64 4216746}
!2127 = !{i64 4216755}
!2128 = !{i64 4216760}
!2129 = !{i64 4216766}
!2130 = !{i64 4216768}
!2131 = !{i64 4216771}
!2132 = !{i64 4216782}
!2133 = !{i64 4216785}
!2134 = !{i64 4216787}
!2135 = !{i64 4216773}
!2136 = !{i64 4216789}
!2137 = !{i64 4216791}
!2138 = !{i64 4216803}
!2139 = !{i64 4216808}
!2140 = !{i64 4216793}
!2141 = !{i64 4216813}
!2142 = !{i64 4216823}
!2143 = !{i64 4216828}
!2144 = !{i64 4216835}
!2145 = !{i64 4216840}
!2146 = !{i64 4216844}
!2147 = !{i64 4216846}
!2148 = !{i64 4216850}
!2149 = !{i64 4216856}
!2150 = !{i64 4216863}
!2151 = !{i64 4216865}
!2152 = !{i64 4216868}
!2153 = !{i64 4216875}
!2154 = !{i64 4216881}
!2155 = !{i64 4216886}
!2156 = !{i64 4216889}
!2157 = !{i64 4216891}
!2158 = !{i64 4216905}
!2159 = !{i64 4216906}
!2160 = !{i64 4216912}
!2161 = !{i64 4216919}
!2162 = !{i64 4216923}
!2163 = !{i64 4216916}
!2164 = !{i64 4216925}
!2165 = !{i64 4216931}
!2166 = !{i64 4216942}
!2167 = !{i64 4216944}
!2168 = !{i64 4216943}
!2169 = !{i64 4216946}
!2170 = !{i64 4216915}
!2171 = !{i64 4216970}
!2172 = !{i64 4216976}
!2173 = !{i64 4216977}
!2174 = !{i64 4216985}
!2175 = !{i64 4216992}
!2176 = !{i64 4216994}
!2177 = !{i64 4217004}
!2178 = !{i64 4217008}
!2179 = !{i64 4217014}
!2180 = !{i64 4217016}
!2181 = !{i64 4217031}
!2182 = !{i64 4217035}
!2183 = !{i64 4217036}
!2184 = !{i64 4217041}
!2185 = !{i64 4217057}
!2186 = !{i64 4217059}
!2187 = !{i64 4217062}
!2188 = !{i64 4217065}
!2189 = !{i64 4217107}
!2190 = !{i64 4217125}
!2191 = !{i64 4217130}
!2192 = !{i64 4217067}
!2193 = !{i64 4217069}
!2194 = !{i64 4217073}
!2195 = !{i64 4217075}
!2196 = !{i64 4217079}
!2197 = !{i64 4217080}
!2198 = !{i64 4217083}
!2199 = !{i64 4217070}
!2200 = !{i64 4217072}
!2201 = !{i64 4217087}
!2202 = !{i64 4217094}
!2203 = !{i64 4217096}
!2204 = !{i64 4217103}
!2205 = !{i64 4217112}
!2206 = !{i64 4217118}
!2207 = !{i64 4217120}
!2208 = !{i64 4217115}
!2209 = !{i64 4217123}
!2210 = !{i64 4217132}
!2211 = !{i64 4217134}
!2212 = !{i64 4217141}
!2213 = !{i64 4217144}
!2214 = !{i64 4217146}
!2215 = !{i64 4217172}
!2216 = !{i64 4217187}
!2217 = !{i64 4217197}
!2218 = !{i64 4217200}
!2219 = !{i64 4217202}
!2220 = !{i64 4217203}
!2221 = !{i64 4217205}
!2222 = !{i64 4217206}
!2223 = !{i64 4217208}
!2224 = !{i64 4217212}
!2225 = !{i64 4217222}
!2226 = !{i64 4217224}
!2227 = !{i64 4217230}
!2228 = !{i64 4217236}
!2229 = !{i64 4217288}
!2230 = !{i64 4217306}
!2231 = !{i64 4217309}
!2232 = !{i64 4217320}
!2233 = !{i64 4217327}
!2234 = !{i64 4217331}
!2235 = !{i64 4217333}
!2236 = !{i64 4217335}
!2237 = !{i64 4217342}
!2238 = !{i64 4217346}
!2239 = !{i64 4217355}
!2240 = !{i64 4217357}
!2241 = !{i64 4217370}
!2242 = !{i64 4217372}
!2243 = !{i64 4217379}
!2244 = !{i64 4217380}
!2245 = !{i64 4217381}
!2246 = !{i64 4217386}
!2247 = !{i64 4217388}
!2248 = !{i64 4217389}
!2249 = !{i64 4217400}
!2250 = !{i64 4217401}
!2251 = !{i64 4217409}
!2252 = !{i64 4217410}
!2253 = !{i64 4217419}
!2254 = !{i64 4217430}
!2255 = !{i64 4217437}
!2256 = !{i64 4217438}
!2257 = !{i64 4217444}
!2258 = !{i64 4217452}
!2259 = !{i64 4217487}
!2260 = !{i64 4217489}
!2261 = !{i64 4217493}
!2262 = !{i64 4217494}
!2263 = !{i64 4217505}
!2264 = !{i64 4217512}
!2265 = !{i64 4217513}
!2266 = !{i64 4217514}
!2267 = !{i64 4217517}
!2268 = !{i64 4217521}
!2269 = !{i64 4217535}
!2270 = !{i64 4217536}
!2271 = !{i64 4217545}
!2272 = !{i64 4217547}
!2273 = !{i64 4217548}
!2274 = !{i64 4217553}
!2275 = !{i64 4217560}
!2276 = !{i64 4217561}
!2277 = !{i64 4217567}
!2278 = !{i64 4217569}
!2279 = !{i64 4217583}
!2280 = !{i64 4217590}
!2281 = !{i64 4217593}
!2282 = !{i64 4217596}
!2283 = !{i64 4217598}
!2284 = !{i64 4217605}
!2285 = !{i64 4217612}
!2286 = !{i64 4217615}
!2287 = !{i64 4217617}
!2288 = !{i64 4217619}
!2289 = !{i64 4217621}
!2290 = !{i64 4217622}
!2291 = !{i64 4217643}
!2292 = !{i64 4217645}
!2293 = !{i64 4217648}
!2294 = !{i64 4217667}
!2295 = !{i64 4217671}
!2296 = !{i64 4217682}
!2297 = !{i64 4217689}
!2298 = !{i64 4217691}
!2299 = !{i64 4217706}
!2300 = !{i64 4217710}
!2301 = !{i64 4217717}
!2302 = !{i64 4217722}
!2303 = !{i64 4217739}
!2304 = !{i64 4217740}
!2305 = !{i64 4217746}
!2306 = !{i64 4217749}
!2307 = !{i64 4217758}
!2308 = !{i64 4217727}
!2309 = !{i64 4217737}
!2310 = !{i64 4217852}
!2311 = !{i64 4217858}
!2312 = !{i64 4217860}
!2313 = !{i64 4217862}
!2314 = !{i64 4217867}
!2315 = !{i64 4217875}
!2316 = !{i64 4217882}
!2317 = !{i64 4217885}
!2318 = !{i64 4217890}
!2319 = !{i64 4217893}
!2320 = !{i64 4217898}
!2321 = !{i64 4217900}
!2322 = !{i64 4217902}
!2323 = !{i64 4217904}
!2324 = !{i64 4217907}
!2325 = !{i64 4217910}
!2326 = !{i64 4217913}
!2327 = !{i64 4217733}
!2328 = !{i64 4217980}
!2329 = !{i64 4217988}
!2330 = !{i64 4217993}
!2331 = !{i64 4217999}
!2332 = !{i64 4218008}
!2333 = !{i64 4218010}
!2334 = !{i64 4218013}
!2335 = !{i64 4218016}
!2336 = !{i64 4218019}
!2337 = !{i64 4218022}
!2338 = !{i64 4218023}
!2339 = !{i64 4218025}
!2340 = !{i64 4218028}
!2341 = !{i64 4218033}
!2342 = !{i64 4218039}
!2343 = !{i64 4218040}
!2344 = !{i64 4218044}
!2345 = !{i64 4218047}
!2346 = !{i64 4218051}
!2347 = !{i64 4218059}
!2348 = !{i64 4218065}
!2349 = !{i64 4218070}
!2350 = !{i64 4218076}
!2351 = !{i64 4218078}
!2352 = !{i64 4218080}
!2353 = !{i64 4218083}
!2354 = !{i64 4218087}
!2355 = !{i64 4218090}
!2356 = !{i64 4218095}
!2357 = !{i64 4218107}
!2358 = !{i64 4218111}
!2359 = !{i64 4218114}
!2360 = !{i64 4218123}
!2361 = !{i64 4218127}
!2362 = !{i64 4218201}
!2363 = !{i64 4218208}
!2364 = !{i64 4218211}
!2365 = !{i64 4218216}
!2366 = !{i64 4218218}
!2367 = !{i64 4218219}
!2368 = !{i64 4218228}
!2369 = !{i64 4218233}
!2370 = !{i64 4218236}
!2371 = !{i64 4218241}
!2372 = !{i64 4218246}
!2373 = !{i64 4218248}
!2374 = !{i64 4218262}
!2375 = !{i64 4218265}
!2376 = !{i64 4218271}
!2377 = !{i64 4218276}
!2378 = !{i64 4218283}
!2379 = !{i64 4218285}
!2380 = !{i64 4218291}
!2381 = !{i64 4218292}
!2382 = !{i64 4218304}
!2383 = !{i64 4218310}
!2384 = !{i64 4218316}
!2385 = !{i64 4218315}
!2386 = !{i64 4218332}
!2387 = !{i64 4218342}
!2388 = !{i64 4218359}
!2389 = !{i64 4218364}
!2390 = !{i64 4218367}
!2391 = !{i64 4218369}
!2392 = !{i64 4218372}
!2393 = !{i64 4218390}
!2394 = !{i64 4218394}
!2395 = !{i64 4218398}
!2396 = !{i64 4218411}
!2397 = !{i64 4218421}
!2398 = !{i64 4218430}
!2399 = !{i64 4218433}
!2400 = !{i64 4218446}
!2401 = !{i64 4218452}
!2402 = !{i64 4218456}
!2403 = !{i64 4218459}
!2404 = !{i64 4218464}
!2405 = !{i64 4218470}
!2406 = !{i64 4218479}
!2407 = !{i64 4218484}
!2408 = !{i64 4218481}
!2409 = !{i64 4218489}
!2410 = !{i64 4218492}
!2411 = !{i64 4218455}
!2412 = !{i64 4218494}
!2413 = !{i64 4218495}
!2414 = !{i64 4218496}
!2415 = !{i64 4218497}
!2416 = !{i64 4218501}
!2417 = !{i64 4218507}
!2418 = !{i64 4218508}
!2419 = !{i64 4218519}
!2420 = !{i64 4218524}
!2421 = !{i64 4218527}
!2422 = !{i64 4218530}
!2423 = !{i64 4218536}
!2424 = !{i64 4218539}
!2425 = !{i64 4218545}
!2426 = !{i64 4218550}
!2427 = !{i64 4218556}
!2428 = !{i64 4218561}
!2429 = !{i64 4218568}
!2430 = !{i64 4218573}
!2431 = !{i64 4218575}
!2432 = !{i64 4218581}
!2433 = !{i64 4218583}
!2434 = !{i64 4218585}
!2435 = !{i64 4218588}
!2436 = !{i64 4218591}
!2437 = !{i64 4218610}
!2438 = !{i64 4218623}
!2439 = !{i64 4218629}
!2440 = !{i64 4218636}
!2441 = !{i64 4218646}
!2442 = !{i64 4218660}
!2443 = !{i64 4218661}
!2444 = !{i64 4218663}
!2445 = !{i64 4218675}
!2446 = !{i64 4218682}
!2447 = !{i64 4218688}
!2448 = !{i64 4218689}
!2449 = !{i64 4218692}
!2450 = !{i64 4218702}
!2451 = !{i64 4218707}
!2452 = !{i64 4218709}
!2453 = !{i64 4218714}
!2454 = !{i64 4218721}
!2455 = !{i64 4218726}
!2456 = !{i64 4218731}
!2457 = !{i64 4218735}
!2458 = !{i64 4218740}
!2459 = !{i64 4218742}
!2460 = !{i64 4218752}
!2461 = !{i64 4218801}
!2462 = !{i64 4218803}
!2463 = !{i64 4218753}
!2464 = !{i64 4218805}
!2465 = !{i64 4218808}
!2466 = !{i64 4218809}
!2467 = !{i64 4218818}
!2468 = !{i64 4218831}
!2469 = !{i64 4218854}
!2470 = !{i64 4218890}
!2471 = !{i64 4218897}
!2472 = !{i64 4218903}
!2473 = !{i64 4218909}
!2474 = !{i64 4218912}
!2475 = !{i64 4218914}
!2476 = !{i64 4218916}
!2477 = !{i64 4218921}
!2478 = !{i64 4218924}
!2479 = !{i64 4218926}
!2480 = !{i64 4218933}
!2481 = !{i64 4218946}
!2482 = !{i64 4218951}
!2483 = !{i64 4218955}
!2484 = !{i64 4218959}
!2485 = !{i64 4218969}
!2486 = !{i64 4219024}
!2487 = !{i64 4219026}
!2488 = !{i64 4219032}
!2489 = !{i64 4219038}
!2490 = !{i64 4219045}
!2491 = !{i64 4219072}
!2492 = !{i64 4219081}
!2493 = !{i64 4219084}
!2494 = !{i64 4219087}
!2495 = !{i64 4219089}
!2496 = !{i64 4219091}
!2497 = !{i64 4219098}
!2498 = !{i64 4219077}
!2499 = !{i64 4219103}
!2500 = !{i64 4219106}
!2501 = !{i64 4219108}
!2502 = !{i64 4219114}
!2503 = !{i64 4219117}
!2504 = !{i64 4219125}
!2505 = !{i64 4219127}
!2506 = !{i64 4219129}
!2507 = !{i64 4219131}
!2508 = !{i64 4219133}
!2509 = !{i64 4219137}
!2510 = !{i64 4219145}
!2511 = !{i8 4, i8 9}
!2512 = !{i64 4219147}
!2513 = !{i64 4219149}
!2514 = !{i64 4219135}
!2515 = !{i64 4219153}
!2516 = !{i64 4219158}
!2517 = !{i64 4219160}
!2518 = !{i64 4219161}
!2519 = !{i64 4219163}
!2520 = !{i64 4219165}
!2521 = !{i64 4219172}
!2522 = !{i64 4219173}
!2523 = !{i64 4219178}
!2524 = !{i64 4219180}
!2525 = !{i64 4219182}
!2526 = !{i64 4219184}
!2527 = !{i64 4219189}
!2528 = !{i64 4219190}
!2529 = !{i64 4219192}
!2530 = !{i64 4219196}
!2531 = !{i64 4219199}
!2532 = !{i64 4219200}
!2533 = !{i64 4219208}
!2534 = !{i64 4219217}
!2535 = !{i64 4219219}
!2536 = !{i64 4219225}
!2537 = !{i64 4219239}
!2538 = !{i64 4219240}
!2539 = !{i64 4219333}
!2540 = !{i64 4219341}
!2541 = !{i64 4219343}
!2542 = !{i64 4219345}
!2543 = !{i64 4219349}
!2544 = !{i64 4219895}
!2545 = !{i64 4219898}
!2546 = !{i64 4219899}
!2547 = !{i64 4219900}
!2548 = !{i64 4219905}
!2549 = !{i64 4219908}
!2550 = !{i64 4219910}
!2551 = !{i64 4219919}
!2552 = !{i64 4219942}
!2553 = !{i64 4219996}
!2554 = !{i64 4219998}
!2555 = !{i64 4220020}
!2556 = !{i64 4220022}
!2557 = !{i64 4220042}
!2558 = !{i64 4220043}
!2559 = !{i64 4220045}
!2560 = !{i64 4220057}
!2561 = !{i64 4220114}
!2562 = !{i64 4220132}
!2563 = !{i64 4220140}
!2564 = !{i64 4220143}
!2565 = !{i64 4220151}
!2566 = !{i64 4220152}
!2567 = !{i64 4220157}
!2568 = !{i64 4220158}
!2569 = !{i64 4220161}
!2570 = !{i64 4220162}
!2571 = !{i64 4220164}
!2572 = !{i64 4220170}
!2573 = !{i64 4220172}
!2574 = !{i64 4220173}
!2575 = !{i64 4220181}
!2576 = !{i64 4220189}
!2577 = !{i64 4220191}
!2578 = !{i64 4220197}
!2579 = !{i64 4220199}
!2580 = !{i64 4220200}
!2581 = !{i64 4220213}
!2582 = !{i64 4220214}
!2583 = !{i64 4220215}
!2584 = !{i64 4220220}
!2585 = !{i64 4220223}
!2586 = !{i64 4220225}
!2587 = !{i64 4220229}
!2588 = !{i64 4220231}
!2589 = !{i64 4220233}
!2590 = !{i64 4220240}
!2591 = !{i64 4220242}
!2592 = !{i64 4220248}
!2593 = !{i64 4220251}
!2594 = !{i64 4220255}
!2595 = !{i64 4220257}
!2596 = !{i64 4220259}
!2597 = !{i64 4220265}
!2598 = !{i64 4220269}
!2599 = !{i64 4220271}
!2600 = !{i64 4220272}
!2601 = !{i64 4220249}
!2602 = !{i64 4220280}
!2603 = !{i64 4220281}
!2604 = !{i64 4220287}
!2605 = !{i64 4220293}
!2606 = !{i64 4220295}
!2607 = !{i64 4220318}
!2608 = !{i64 4220321}
!2609 = !{i64 4220332}
!2610 = !{i64 4220347}
!2611 = !{i64 4220377}
!2612 = !{i64 4220379}
!2613 = !{i64 4220393}
!2614 = !{i64 4220401}
!2615 = !{i64 4220416}
!2616 = !{i64 4220420}
!2617 = !{i64 4220426}
!2618 = !{i64 4220433}
!2619 = !{i64 4220436}
!2620 = !{i64 4220449}
!2621 = !{i64 4220459}
!2622 = !{i64 4220484}
!2623 = !{i64 4220491}
!2624 = !{i64 4220494}
!2625 = !{i64 4220497}
!2626 = !{i64 4220500}
!2627 = !{i64 4220503}
!2628 = !{i64 4220514}
!2629 = !{i64 4219794}
!2630 = !{i64 4219800}
!2631 = !{i64 4219805}
!2632 = !{i64 4219808}
!2633 = !{i64 4219809}
!2634 = !{i64 4219816}
!2635 = !{i64 4219829}
!2636 = !{i64 4219839}
!2637 = !{i64 4219850}
!2638 = !{i64 4219852}
!2639 = !{i64 4219854}
!2640 = !{i64 4219856}
!2641 = !{i64 4219858}
!2642 = !{i64 4219826}
!2643 = !{i64 4219860}
!2644 = !{i64 4219862}
!2645 = !{i64 4219864}
!2646 = !{i64 4219866}
!2647 = !{i64 4219872}
!2648 = !{i64 4219874}
!2649 = !{i64 4219876}
!2650 = !{i64 4219878}
!2651 = !{i64 4219884}
!2652 = !{i64 4219889}
!2653 = !{i64 4219892}
!2654 = !{i64 4220523}
!2655 = !{i64 4220528}
!2656 = !{i64 4220540}
!2657 = !{i64 4220542}
!2658 = !{i64 4220545}
!2659 = !{i64 4220550}
!2660 = !{i64 4220558}
!2661 = !{i64 4220562}
!2662 = !{i64 4220572}
!2663 = !{i64 4220573}
!2664 = !{i64 4220580}
!2665 = !{i64 4220585}
!2666 = !{i64 4220587}
!2667 = !{i64 4220604}
!2668 = !{i64 4220606}
!2669 = !{i64 4220607}
!2670 = !{i64 4220617}
!2671 = !{i64 4220619}
!2672 = !{i64 4220620}
!2673 = !{i64 4220624}
!2674 = !{i64 4220629}
!2675 = !{i64 4220703}
!2676 = !{i64 4220705}
!2677 = !{i64 4220729}
!2678 = !{i64 4220732}
!2679 = !{i64 4220735}
!2680 = !{i64 4220749}
!2681 = !{i64 4220752}
!2682 = !{i64 4220755}
!2683 = !{i64 4220635}
!2684 = !{i64 4220778}
!2685 = !{i64 4220782}
!2686 = !{i64 4220795}
!2687 = !{i64 4220810}
!2688 = !{i64 4220813}
!2689 = !{i64 4220829}
!2690 = !{i64 4220831}
!2691 = !{i64 4220838}
!2692 = !{i64 4220840}
!2693 = !{i64 4220844}
!2694 = !{i64 4220849}
!2695 = !{i64 4220889}
!2696 = !{i64 4220906}
!2697 = !{i64 4220909}
!2698 = !{i64 4220912}
!2699 = !{i64 4220925}
!2700 = !{i64 4220944}
!2701 = !{i64 4220965}
!2702 = !{i64 4220968}
!2703 = !{i64 4220992}
!2704 = !{i64 4221028}
!2705 = !{i64 4221013}
!2706 = !{i64 4221048}
!2707 = !{i64 4221065}
!2708 = !{i64 4221085}
!2709 = !{i64 4221098}
!2710 = !{i64 4221164}
!2711 = !{i64 4221200}
!2712 = !{i64 4221205}
!2713 = !{i64 4221216}
!2714 = !{i64 4221218}
!2715 = !{i64 4221224}
!2716 = !{i64 4221234}
!2717 = !{i64 4221239}
!2718 = !{i64 4221249}
!2719 = !{i64 4221255}
!2720 = !{i64 4221256}
!2721 = !{i64 4221257}
!2722 = !{i64 4221258}
!2723 = !{i64 4221266}
!2724 = !{i64 4221274}
!2725 = !{i64 4221280}
!2726 = !{i64 4221289}
!2727 = !{i64 4221294}
!2728 = !{i64 4221301}
!2729 = !{i64 4221306}
!2730 = !{i64 4221322}
!2731 = !{i64 4221327}
!2732 = !{i64 4221331}
!2733 = !{i64 4221340}
!2734 = !{i64 4221348}
!2735 = !{i64 4221350}
!2736 = !{i64 4221357}
!2737 = !{i64 4221366}
!2738 = !{i64 4221376}
!2739 = !{i64 4221381}
!2740 = !{i64 4221387}
!2741 = !{i64 4221388}
!2742 = !{i64 4221389}
!2743 = !{i64 4221394}
!2744 = !{i64 4221399}
!2745 = !{i64 4221404}
!2746 = !{i64 4221411}
!2747 = !{i64 4221415}
!2748 = !{i64 4221421}
!2749 = !{i64 4221427}
!2750 = !{i64 4221434}
!2751 = !{i64 4221437}
!2752 = !{i64 4221444}
!2753 = !{i64 4221446}
!2754 = !{i64 4221454}
!2755 = !{i64 4221461}
!2756 = !{i64 4221472}
!2757 = !{i64 4221474}
!2758 = !{i64 4221504}
!2759 = !{i64 4221515}
!2760 = !{i64 4221587}
!2761 = !{i64 4221592}
!2762 = !{i64 4221595}
!2763 = !{i64 4221600}
!2764 = !{i64 4221602}
!2765 = !{i64 4221603}
!2766 = !{i64 4221605}
!2767 = !{i64 4221610}
!2768 = !{i64 4221611}
!2769 = !{i64 4221615}
!2770 = !{i64 4221623}
!2771 = !{i64 4221631}
!2772 = !{i64 4221643}
!2773 = !{i64 4221645}
!2774 = !{i64 4221650}
!2775 = !{i64 4221656}
!2776 = !{i64 4221661}
!2777 = !{i64 4221666}
!2778 = !{i64 4221670}
!2779 = !{i64 4221673}
!2780 = !{i64 4221700}
!2781 = !{i64 4221676}
!2782 = !{i64 4221679}
!2783 = !{i64 4221683}
!2784 = !{i64 4221685}
!2785 = !{i64 4221688}
!2786 = !{i64 4221692}
!2787 = !{i64 4221695}
!2788 = !{i64 4221697}
!2789 = !{i64 4221699}
!2790 = !{i64 4221701}
!2791 = !{i64 4221704}
!2792 = !{i64 4221707}
!2793 = !{i64 4221711}
!2794 = !{i64 4221713}
!2795 = !{i64 4221715}
!2796 = !{i64 4221716}
!2797 = !{i64 4221719}
!2798 = !{i64 4221721}
!2799 = !{i64 4221724}
!2800 = !{i64 4221726}
!2801 = !{i64 4221727}
!2802 = !{i64 4221730}
!2803 = !{i64 4221732}
!2804 = !{i64 4221734}
!2805 = !{i64 4221735}
!2806 = !{i64 4221738}
!2807 = !{i64 4221740}
!2808 = !{i64 4221742}
!2809 = !{i64 4221744}
!2810 = !{i64 4221747}
!2811 = !{i64 4221750}
!2812 = !{i64 4221753}
!2813 = !{i64 4221758}
!2814 = !{i64 4221756}
!2815 = !{i64 4221762}
!2816 = !{i64 4221765}
!2817 = !{i64 4221767}
!2818 = !{i64 4221770}
!2819 = !{i64 4221772}
!2820 = !{i64 4221778}
!2821 = !{i64 4221779}
!2822 = !{i64 4221781}
!2823 = !{i64 4221782}
!2824 = !{i64 4221786}
!2825 = !{i64 4221789}
!2826 = !{i64 4221791}
!2827 = !{i64 4221833}
!2828 = !{i64 4221848}
!2829 = !{i64 4221867}
!2830 = !{i64 4221855}
!2831 = !{i64 4221856}
!2832 = !{i64 4221858}
!2833 = !{i64 4221859}
!2834 = !{i64 4221860}
!2835 = !{i64 4221869}
!2836 = !{i64 4221871}
!2837 = !{i64 4221874}
!2838 = !{i64 4221876}
!2839 = !{i64 4221881}
!2840 = !{i64 4221883}
!2841 = !{i64 4221885}
!2842 = !{i64 4221887}
!2843 = !{i64 4221888}
!2844 = !{i64 4221889}
!2845 = !{i64 4221896}
!2846 = !{i64 4221898}
!2847 = !{i64 4221900}
!2848 = !{i64 4221905}
!2849 = !{i64 4221906}
!2850 = !{i64 4221908}
!2851 = !{i64 4221916}
!2852 = !{i64 4221917}
!2853 = !{i64 4221919}
!2854 = !{i64 4221920}
!2855 = !{i64 4221921}
!2856 = !{i64 4221922}
!2857 = !{i64 4221929}
!2858 = !{i64 4221931}
!2859 = !{i64 4221933}
!2860 = !{i64 4221935}
!2861 = !{i64 4221937}
!2862 = !{i64 4221943}
!2863 = !{i64 4221946}
!2864 = !{i64 4221951}
!2865 = !{i64 4221954}
!2866 = !{i64 4221967}
!2867 = !{i64 4221979}
!2868 = !{i64 4221981}
!2869 = !{i64 4221983}
!2870 = !{i64 4221993}
!2871 = !{i64 4221995}
!2872 = !{i64 4222006}
!2873 = !{i64 4222052}
!2874 = !{i64 4222063}
!2875 = !{i64 4222066}
!2876 = !{i64 4222077}
!2877 = !{i64 4222088}
!2878 = !{i64 4222089}
!2879 = !{i64 4222091}
!2880 = !{i64 4222092}
!2881 = !{i64 4222206}
!2882 = !{i64 4222208}
!2883 = !{i64 4222217}
!2884 = !{i64 4222223}
!2885 = !{i64 4222072}
!2886 = !{i64 4222094}
!2887 = !{i64 4222108}
!2888 = !{i64 4222112}
!2889 = !{i64 4222115}
!2890 = !{i64 4222118}
!2891 = !{i64 4222121}
!2892 = !{i64 4222125}
!2893 = !{i64 4222129}
!2894 = !{i64 4222131}
!2895 = !{i64 4222136}
!2896 = !{i64 4222139}
!2897 = !{i64 4222145}
!2898 = !{i64 4222151}
!2899 = !{i64 4222153}
!2900 = !{i64 4222162}
!2901 = !{i64 4222169}
!2902 = !{i64 4222175}
!2903 = !{i64 4222190}
!2904 = !{i64 4222199}
!2905 = !{i64 4222200}
!2906 = !{i64 4222203}
!2907 = !{i64 4222227}
!2908 = !{i64 4222232}
!2909 = !{i64 4222234}
!2910 = !{i64 4222236}
!2911 = !{i64 4222247}
!2912 = !{i64 4222252}
!2913 = !{i64 4222258}
!2914 = !{i64 4222265}
!2915 = !{i64 4222271}
!2916 = !{i64 4222277}
!2917 = !{i64 4222310}
!2918 = !{i64 4222313}
!2919 = !{i64 4222314}
!2920 = !{i64 4222317}
!2921 = !{i64 4222322}
!2922 = !{i64 4222323}
!2923 = !{i64 4222326}
!2924 = !{i64 4222329}
!2925 = !{i64 4222335}
!2926 = !{i64 4222350}
!2927 = !{i64 4222357}
!2928 = !{i64 4222360}
!2929 = !{i64 4222366}
!2930 = !{i64 4222371}
!2931 = !{i64 4222376}
!2932 = !{i64 4222384}
!2933 = !{i64 4222386}
!2934 = !{i64 4222396}
!2935 = !{i64 4222401}
!2936 = !{i64 4222402}
!2937 = !{i64 4222405}
!2938 = !{i64 4222407}
!2939 = !{i64 4222409}
!2940 = !{i64 4222486}
!2941 = !{i64 4222491}
!2942 = !{i64 4222574}
!2943 = !{i64 4222598}
!2944 = !{i64 4222600}
!2945 = !{i64 4222674}
!2946 = !{i64 4222585}
!2947 = !{i64 4222587}
!2948 = !{i64 4222673}
!2949 = !{i64 4222593}
!2950 = !{i64 4222595}
!2951 = !{i64 4222603}
!2952 = !{i64 4222620}
!2953 = !{i64 4222663}
!2954 = !{i64 4222664}
!2955 = !{i64 4222670}
!2956 = !{i64 4222671}
!2957 = !{i64 4222672}
!2958 = !{i64 4222692}
!2959 = !{i64 4222834}
!2960 = !{i64 4222835}
!2961 = !{i64 4222874}
!2962 = !{i64 4222888}
!2963 = !{i64 4222893}
!2964 = !{i64 4222896}
!2965 = !{i64 4222899}
!2966 = !{i64 4222878}
!2967 = !{i64 4222906}
!2968 = !{i64 4222910}
!2969 = !{i64 4222918}
!2970 = !{i64 4222927}
!2971 = !{i64 4222938}
!2972 = !{i64 4222951}
!2973 = !{i64 4222954}
!2974 = !{i64 4222963}
!2975 = !{i64 4222968}
!2976 = !{i64 4222982}
!2977 = !{i64 4222983}
!2978 = !{i64 4222995}
!2979 = !{i64 4222998}
!2980 = !{i64 4223000}
!2981 = !{i64 4222971}
!2982 = !{i64 4223006}
!2983 = !{i64 4223012}
!2984 = !{i64 4223014}
!2985 = !{i64 4223016}
!2986 = !{i64 4222989}
!2987 = !{i64 4223178}
!2988 = !{i64 4223182}
!2989 = !{i64 4223318}
!2990 = !{i64 4223320}
!2991 = !{i64 4223322}
!2992 = !{i64 4223325}
!2993 = !{i64 4223331}
!2994 = !{i64 4223344}
!2995 = !{i64 4223350}
!2996 = !{i64 4223367}
!2997 = !{i64 4223373}
!2998 = !{i64 4223338}
!2999 = !{i64 4223375}
!3000 = !{i64 4223382}
!3001 = !{i64 4223390}
!3002 = !{i64 4223408}
!3003 = !{i64 4223411}
!3004 = !{i64 4223418}
!3005 = !{i64 4223422}
!3006 = !{i64 4223424}
!3007 = !{i64 4223426}
!3008 = !{i64 4223444}
!3009 = !{i64 4223446}
!3010 = !{i64 4223452}
!3011 = !{i64 4223516}
!3012 = !{i64 4223518}
!3013 = !{i64 4223523}
!3014 = !{i64 4223529}
!3015 = !{i64 4223532}
!3016 = !{i64 4223535}
!3017 = !{i64 4223538}
!3018 = !{i64 4223539}
!3019 = !{i64 4223548}
!3020 = !{i64 4223552}
!3021 = !{i64 4223592}
!3022 = !{i64 4223595}
!3023 = !{i64 4223597}
!3024 = !{i64 4223599}
!3025 = !{i64 4223601}
!3026 = !{i64 4223602}
!3027 = !{i64 4223604}
!3028 = !{i64 4223606}
!3029 = !{i64 4223609}
!3030 = !{i64 4223625}
!3031 = !{i64 4223642}
!3032 = !{i64 4223670}
!3033 = !{i64 4223673}
!3034 = !{i64 4223675}
!3035 = !{i64 4223676}
!3036 = !{i64 4223679}
!3037 = !{i64 4223687}
!3038 = !{i64 4223697}
!3039 = !{i64 4223701}
!3040 = !{i64 4223790}
!3041 = !{i64 4223797}
!3042 = !{i64 4226399}
!3043 = !{i64 4226432}
!3044 = !{i64 4226483}
!3045 = !{i64 4226493}
!3046 = !{i64 4226547}
!3047 = !{i64 4226550}
!3048 = !{i64 4226556}
!3049 = !{i64 4226594}
!3050 = !{i64 4226608}
!3051 = !{i64 4226610}
!3052 = !{i64 4226629}
!3053 = !{i64 4226673}
!3054 = !{i64 4226683}
!3055 = !{i64 4226690}
!3056 = !{i64 4226691}
!3057 = !{i64 4226697}
!3058 = !{i64 4226698}
!3059 = !{i64 4226701}
!3060 = !{i64 4226708}
!3061 = !{i64 4226716}
!3062 = !{i64 4226721}
!3063 = !{i64 4226723}
!3064 = !{i64 4226726}
!3065 = !{i64 4226728}
!3066 = !{i64 4226729}
!3067 = !{i64 4226730}
!3068 = !{i64 4226734}
!3069 = !{i64 4226739}
!3070 = !{i64 4226740}
!3071 = !{i64 4226743}
!3072 = !{i64 4226749}
!3073 = !{i64 4226758}
!3074 = !{i64 4226784}
!3075 = !{i64 4226790}
!3076 = !{i64 4226814}
!3077 = !{i64 4226821}
!3078 = !{i64 4226825}
!3079 = !{i64 4226888}
!3080 = !{i64 4226894}
!3081 = !{i64 4226920}
!3082 = !{i64 4226937}
!3083 = !{i64 4226938}
!3084 = !{i64 4226950}
!3085 = !{i64 4226955}
!3086 = !{i64 4226958}
!3087 = !{i64 4226962}
!3088 = !{i64 4226964}
!3089 = !{i64 4226974}
!3090 = !{i64 4227014}
!3091 = !{i64 4227015}
!3092 = !{i64 4227017}
!3093 = !{i64 4227019}
!3094 = !{i64 4227021}
!3095 = !{i64 4227025}
!3096 = !{i64 4227031}
!3097 = !{i64 4227035}
!3098 = !{i64 4227037}
!3099 = !{i64 4227039}
!3100 = !{i64 4227042}
!3101 = !{i64 4227045}
!3102 = !{i64 4227056}
!3103 = !{i64 4227072}
!3104 = !{i64 4227081}
!3105 = !{i64 4227093}
!3106 = !{i64 4227094}
!3107 = !{i64 4227097}
!3108 = !{i64 4227099}
!3109 = !{i64 4227101}
!3110 = !{i64 4227113}
!3111 = !{i64 4227115}
!3112 = !{i64 4227110}
!3113 = !{i64 4227119}
!3114 = !{i64 4227124}
!3115 = !{i64 4227129}
!3116 = !{i64 4227142}
!3117 = !{i64 4227150}
!3118 = !{i64 4227155}
!3119 = !{i64 4227208}
!3120 = !{i64 4227213}
!3121 = !{i64 4227143}
!3122 = !{i64 4227215}
!3123 = !{i64 4227217}
!3124 = !{i64 4227220}
!3125 = !{i64 4227229}
!3126 = !{i64 4227231}
!3127 = !{i64 4227236}
!3128 = !{i64 4227244}
!3129 = !{i64 4227246}
!3130 = !{i64 4227253}
!3131 = !{i64 4227256}
!3132 = !{i64 4227257}
!3133 = !{i64 4227259}
!3134 = !{i64 4227286}
!3135 = !{i64 4227293}
!3136 = !{i64 4227295}
!3137 = !{i64 4227304}
!3138 = !{i64 4227308}
!3139 = !{i64 4227312}
!3140 = !{i64 4227314}
!3141 = !{i64 4227318}
!3142 = !{i64 4227320}
!3143 = !{i64 4227324}
!3144 = !{i64 4227328}
!3145 = !{i64 4227331}
!3146 = !{i64 4227333}
!3147 = !{i64 4227337}
!3148 = !{i64 4227339}
!3149 = !{i64 4227340}
!3150 = !{i64 4227342}
!3151 = !{i64 4227347}
!3152 = !{i64 4227344}
!3153 = !{i64 4227351}
!3154 = !{i64 4227356}
!3155 = !{i64 4227358}
!3156 = !{i64 4227369}
!3157 = !{i64 4227371}
!3158 = !{i64 4227374}
!3159 = !{i64 4227376}
!3160 = !{i64 4227377}
!3161 = !{i64 4227379}
!3162 = !{i64 4227382}
!3163 = !{i64 4227385}
!3164 = !{i64 4227388}
!3165 = !{i64 4227390}
!3166 = !{i64 4227392}
!3167 = !{i64 4227395}
!3168 = !{i64 4227397}
!3169 = !{i64 4227405}
!3170 = !{i64 4227485}
!3171 = !{i64 4227488}
!3172 = !{i64 4227495}
!3173 = !{i64 4227505}
!3174 = !{i64 4227553}
!3175 = !{i64 4227560}
!3176 = !{i64 4227567}
!3177 = !{i64 4227578}
!3178 = !{i64 4227580}
!3179 = !{i64 4227582}
!3180 = !{i64 4227590}
!3181 = !{i64 4227593}
!3182 = !{i64 4227600}
!3183 = !{i64 4227606}
!3184 = !{i64 4227647}
!3185 = !{i64 4227730}
!3186 = !{i64 4227737}
!3187 = !{i64 4227745}
!3188 = !{i64 4227746}
!3189 = !{i64 4227750}
!3190 = !{i64 4227755}
!3191 = !{i64 4227757}
!3192 = !{i64 4227784}
!3193 = !{i64 4227793}
!3194 = !{i64 4227819}
!3195 = !{i64 4227821}
!3196 = !{i64 4227825}
!3197 = !{i64 4227838}
!3198 = !{i64 4227839}
!3199 = !{i64 4227842}
!3200 = !{i64 4227844}
!3201 = !{i64 4227850}
!3202 = !{i64 4227867}
!3203 = !{i64 4227863}
!3204 = !{i64 4227884}
!3205 = !{i64 4227904}
!3206 = !{i64 4227907}
!3207 = !{i64 4227916}
!3208 = !{i64 4227919}
!3209 = !{i64 4227924}
!3210 = !{i64 4227926}
!3211 = !{i64 4227930}
!3212 = !{i64 4227933}
!3213 = !{i64 4227941}
!3214 = !{i64 4227944}
!3215 = !{i64 4227946}
!3216 = !{i64 4227958}
!3217 = !{i64 4227963}
!3218 = !{i64 4227966}
!3219 = !{i64 4227967}
!3220 = !{i64 4227970}
!3221 = !{i64 4227972}
!3222 = !{i64 4227978}
!3223 = !{i64 4227979}
!3224 = !{i64 4227981}
!3225 = !{i64 4227984}
!3226 = !{i64 4227988}
!3227 = !{i64 4227994}
!3228 = !{i64 4227995}
!3229 = !{i64 4228000}
!3230 = !{i64 4228001}
!3231 = !{i64 4228008}
!3232 = !{i64 4228014}
!3233 = !{i64 4228015}
!3234 = !{i64 4228016}
!3235 = !{i64 4228019}
!3236 = !{i64 4228020}
!3237 = !{i64 4228023}
!3238 = !{i64 4228024}
!3239 = !{i64 4228025}
!3240 = !{i64 4228026}
!3241 = !{i64 4228031}
!3242 = !{i64 4228039}
!3243 = !{i64 4228043}
!3244 = !{i64 4228044}
!3245 = !{i64 4228047}
!3246 = !{i64 4228052}
!3247 = !{i64 4228056}
!3248 = !{i64 4228057}
!3249 = !{i64 4228062}
!3250 = !{i64 4228068}
!3251 = !{i64 4228076}
!3252 = !{i64 4228078}
!3253 = !{i64 4228080}
!3254 = !{i64 4228089}
!3255 = !{i64 4228091}
!3256 = !{i64 4228093}
!3257 = !{i64 4228097}
!3258 = !{i64 4228107}
!3259 = !{i64 4228113}
!3260 = !{i64 4228115}
!3261 = !{i64 4228121}
!3262 = !{i64 4228126}
!3263 = !{i64 4228129}
!3264 = !{i64 4228131}
!3265 = !{i64 4228136}
!3266 = !{i64 4228140}
!3267 = !{i64 4228142}
!3268 = !{i64 4228153}
!3269 = !{i64 4228156}
!3270 = !{i64 4228159}
!3271 = !{i64 4228161}
!3272 = !{i64 4228170}
!3273 = !{i64 4228286}
!3274 = !{i64 4228287}
!3275 = !{i64 4228228}
!3276 = !{i64 4228230}
!3277 = !{i64 4228233}
!3278 = !{i64 4228240}
!3279 = !{i64 4228245}
!3280 = !{i64 4228290}
!3281 = !{i64 4228299}
!3282 = !{i64 4228304}
!3283 = !{i64 4228306}
!3284 = !{i64 4228308}
!3285 = !{i64 4228309}
!3286 = !{i64 4228312}
!3287 = !{i64 4228320}
!3288 = !{i64 4228339}
!3289 = !{i64 4228302}
!3290 = !{i64 4228405}
!3291 = !{i64 4228409}
!3292 = !{i64 4228412}
!3293 = !{i64 4228413}
!3294 = !{i64 4228423}
!3295 = !{i64 4228425}
!3296 = !{i64 4228431}
!3297 = !{i64 4228433}
!3298 = !{i64 4228441}
!3299 = !{i64 4228450}
!3300 = !{i64 4228455}
!3301 = !{i64 4228461}
!3302 = !{i64 4228473}
!3303 = !{i64 4228477}
!3304 = !{i64 4228486}
!3305 = !{i64 4228492}
!3306 = !{i64 4228499}
!3307 = !{i64 4228503}
!3308 = !{i64 4228515}
!3309 = !{i64 4228517}
!3310 = !{i64 4228520}
!3311 = !{i64 4228533}
!3312 = !{i64 4228542}
!3313 = !{i64 4228562}
!3314 = !{i64 4228568}
!3315 = !{i64 4228569}
!3316 = !{i64 4228571}
!3317 = !{i64 4228590}
!3318 = !{i64 4228592}
!3319 = !{i64 4228598}
!3320 = !{i64 4228607}
!3321 = !{i64 4228612}
!3322 = !{i64 4228632}
!3323 = !{i64 4228634}
!3324 = !{i64 4228642}
!3325 = !{i64 4228645}
!3326 = !{i64 4228656}
!3327 = !{i64 4228664}
!3328 = !{i64 4228670}
!3329 = !{i64 4228680}
!3330 = !{i64 4228688}
!3331 = !{i64 4228690}
!3332 = !{i64 4228714}
!3333 = !{i64 4228717}
!3334 = !{i64 4228720}
!3335 = !{i64 4228728}
!3336 = !{i64 4228741}
!3337 = !{i64 4228744}
!3338 = !{i64 4228746}
!3339 = !{i64 4228748}
!3340 = !{i64 4228750}
!3341 = !{i64 4228753}
!3342 = !{i64 4228756}
!3343 = !{i64 4228788}
!3344 = !{i64 4228803}
!3345 = !{i64 4228806}
!3346 = !{i64 4228809}
!3347 = !{i64 4228811}
!3348 = !{i64 4228813}
!3349 = !{i64 4228815}
!3350 = !{i64 4228826}
!3351 = !{i64 4228831}
!3352 = !{i64 4228739}
!3353 = !{i64 4228837}
!3354 = !{i64 4228854}
!3355 = !{i64 4228861}
!3356 = !{i64 4228863}
!3357 = !{i64 4228920}
!3358 = !{i64 4228925}
!3359 = !{i64 4228929}
!3360 = !{i64 4228937}
!3361 = !{i64 4228948}
!3362 = !{i64 4228964}
!3363 = !{i64 4228967}
!3364 = !{i64 4228973}
!3365 = !{i64 4228978}
!3366 = !{i64 4228984}
!3367 = !{i64 4228985}
!3368 = !{i64 4228987}
!3369 = !{i64 4229011}
!3370 = !{i64 4229013}
!3371 = !{i64 4229017}
!3372 = !{i64 4229027}
!3373 = !{i64 4229033}
!3374 = !{i64 4229037}
!3375 = !{i64 4229043}
!3376 = !{i64 4229045}
!3377 = !{i64 4229047}
!3378 = !{i64 4229052}
!3379 = !{i64 4229055}
!3380 = !{i64 4229061}
!3381 = !{i64 4229064}
!3382 = !{i64 4229066}
!3383 = !{i64 4229067}
!3384 = !{i64 4229074}
!3385 = !{i64 4229081}
!3386 = !{i64 4229088}
!3387 = !{i64 4229094}
!3388 = !{i64 4229100}
!3389 = !{i64 4229116}
!3390 = !{i64 4229123}
!3391 = !{i64 4229130}
!3392 = !{i64 4229135}
!3393 = !{i64 4229144}
!3394 = !{i64 4229158}
!3395 = !{i64 4229163}
!3396 = !{i64 4229172}
!3397 = !{i64 4229186}
!3398 = !{i64 4229193}
!3399 = !{i64 4229200}
!3400 = !{i64 4229207}
!3401 = !{i64 4229212}
!3402 = !{i64 4229221}
!3403 = !{i64 4229228}
!3404 = !{i64 4229235}
!3405 = !{i64 4229240}
!3406 = !{i64 4229246}
!3407 = !{i64 4229255}
!3408 = !{i64 4229266}
!3409 = !{i64 4229278}
!3410 = !{i64 4229287}
!3411 = !{i64 4229301}
!3412 = !{i64 4229307}
!3413 = !{i64 4229310}
!3414 = !{i64 4229313}
!3415 = !{i64 4229334}
!3416 = !{i64 4229341}
!3417 = !{i64 4229348}
!3418 = !{i64 4229355}
!3419 = !{i64 4229364}
!3420 = !{i64 4229371}
!3421 = !{i64 4229378}
!3422 = !{i64 4229381}
!3423 = !{i64 4229385}
!3424 = !{i64 4229388}
!3425 = !{i64 4229394}
!3426 = !{i64 4229395}
!3427 = !{i64 4229397}
!3428 = !{i64 4229399}
!3429 = !{i64 4229405}
!3430 = !{i64 4229415}
!3431 = !{i64 4229418}
!3432 = !{i64 4229419}
!3433 = !{i64 4229426}
!3434 = !{i64 4229427}
!3435 = !{i64 4229430}
!3436 = !{i64 4229432}
!3437 = !{i64 4229435}
!3438 = !{i64 4229536}
!3439 = !{i64 4229629}
!3440 = !{i64 4229640}
!3441 = !{i64 4229643}
!3442 = !{i64 4229647}
!3443 = !{i64 4229649}
!3444 = !{i64 4229659}
!3445 = !{i64 4229674}
!3446 = !{i64 4229683}
!3447 = !{i64 4229684}
!3448 = !{i64 4229703}
!3449 = !{i64 4229711}
!3450 = !{i64 4229715}
!3451 = !{i64 4229723}
!3452 = !{i64 4229724}
!3453 = !{i64 4229734}
!3454 = !{i64 4229735}
!3455 = !{i64 4229740}
!3456 = !{i64 4229746}
!3457 = !{i64 4229763}
!3458 = !{i64 4229769}
!3459 = !{i64 4229771}
!3460 = !{i64 4229789}
!3461 = !{i64 4229805}
!3462 = !{i64 4229812}
!3463 = !{i64 4229819}
!3464 = !{i64 4229821}
!3465 = !{i64 4229822}
!3466 = !{i64 4229830}
!3467 = !{i64 4229840}
!3468 = !{i64 4229854}
!3469 = !{i64 4229856}
!3470 = !{i64 4229863}
!3471 = !{i64 4229866}
!3472 = !{i64 4229875}
!3473 = !{i64 4229881}
!3474 = !{i64 4229884}
!3475 = !{i64 4229895}
!3476 = !{i64 4229897}
!3477 = !{i64 4229899}
!3478 = !{i64 4229903}
!3479 = !{i64 4229904}
!3480 = !{i64 4229906}
!3481 = !{i64 4229907}
!3482 = !{i64 4229911}
!3483 = !{i64 4229922}
!3484 = !{i64 4229925}
!3485 = !{i64 4229927}
!3486 = !{i64 4229933}
!3487 = !{i64 4229940}
!3488 = !{i64 4230043}
!3489 = !{i64 4230084}
!3490 = !{i64 4230090}
!3491 = !{i64 4230094}
!3492 = !{i64 4230112}
!3493 = !{i64 4230114}
!3494 = !{i64 4230119}
!3495 = !{i64 4230121}
!3496 = !{i64 4230126}
!3497 = !{i64 4230130}
!3498 = !{i64 4230132}
!3499 = !{i64 4230134}
!3500 = !{i64 4230140}
!3501 = !{i64 4230142}
!3502 = !{i64 4230144}
!3503 = !{i64 4230146}
!3504 = !{i64 4230148}
!3505 = !{i64 4230149}
!3506 = !{i64 4230166}
!3507 = !{i64 4230193}
!3508 = !{i64 4230200}
!3509 = !{i64 4230206}
!3510 = !{i64 4230209}
!3511 = !{i64 4230218}
!3512 = !{i64 4230227}
!3513 = !{i64 4230229}
!3514 = !{i64 4230231}
!3515 = !{i64 4230240}
!3516 = !{i64 4230255}
!3517 = !{i64 4230267}
!3518 = !{i64 4230269}
!3519 = !{i64 4230273}
!3520 = !{i64 4230275}
!3521 = !{i64 4230277}
!3522 = !{i64 4230279}
!3523 = !{i64 4230289}
!3524 = !{i64 4230296}
!3525 = !{i64 4230346}
!3526 = !{i64 4230350}
!3527 = !{i64 4230351}
!3528 = !{i64 4230576}
!3529 = !{i64 4230580}
!3530 = !{i64 4230583}
!3531 = !{i64 4230587}
!3532 = !{i64 4230588}
!3533 = !{i64 4230589}
!3534 = !{i64 4230600}
!3535 = !{i64 4230596}
!3536 = !{i64 4230606}
!3537 = !{i64 4230612}
!3538 = !{i64 4230618}
!3539 = !{i64 4230620}
!3540 = !{i64 4230623}
!3541 = !{i64 4230629}
!3542 = !{i64 4230636}
!3543 = !{i64 4230648}
!3544 = !{i64 4230650}
!3545 = !{i64 4230651}
!3546 = !{i64 4230654}
!3547 = !{i64 4230656}
!3548 = !{i64 4230658}
!3549 = !{i64 4230664}
!3550 = !{i64 4230666}
!3551 = !{i64 4230667}
!3552 = !{i64 4230669}
!3553 = !{i64 4230711}
!3554 = !{i64 4231171}
!3555 = !{i64 4231173}
!3556 = !{i64 4231176}
!3557 = !{i64 4231182}
!3558 = !{i64 4231206}
!3559 = !{i64 4231215}
!3560 = !{i64 4231217}
!3561 = !{i64 4231219}
!3562 = !{i64 4231226}
!3563 = !{i64 4231232}
!3564 = !{i64 4231235}
!3565 = !{i64 4231241}
!3566 = !{i64 4231243}
!3567 = !{i64 4231249}
!3568 = !{i64 4231252}
!3569 = !{i64 4231257}
!3570 = !{i64 4231258}
!3571 = !{i64 4231267}
!3572 = !{i64 4231275}
!3573 = !{i64 4231277}
!3574 = !{i64 4231279}
!3575 = !{i64 4231285}
!3576 = !{i64 4231288}
!3577 = !{i64 4231290}
!3578 = !{i64 4231294}
!3579 = !{i64 4231297}
!3580 = !{i64 4231299}
!3581 = !{i64 4231305}
!3582 = !{i64 4231310}
!3583 = !{i64 4231307}
!3584 = !{i64 4231312}
!3585 = !{i64 4231315}
!3586 = !{i64 4231324}
!3587 = !{i64 4231339}
!3588 = !{i64 4231380}
!3589 = !{i64 4231384}
!3590 = !{i64 4231395}
!3591 = !{i64 4231396}
!3592 = !{i64 4231404}
!3593 = !{i64 4231406}
!3594 = !{i64 4231418}
!3595 = !{i64 4231426}
!3596 = !{i64 4231427}
!3597 = !{i64 4231429}
!3598 = !{i64 4231432}
!3599 = !{i64 4231438}
!3600 = !{i64 4231439}
!3601 = !{i64 4231476}
!3602 = !{i64 4231487}
!3603 = !{i64 4231493}
!3604 = !{i64 4231507}
!3605 = !{i64 4231514}
!3606 = !{i64 4231522}
!3607 = !{i64 4231527}
!3608 = !{i64 4231562}
!3609 = !{i64 4231567}
!3610 = !{i64 4231568}
!3611 = !{i64 4231573}
!3612 = !{i64 4231574}
!3613 = !{i64 4231579}
!3614 = !{i64 4231580}
!3615 = !{i64 4231582}
!3616 = !{i64 4231585}
!3617 = !{i64 4231586}
!3618 = !{i64 4231591}
!3619 = !{i64 4231596}
!3620 = !{i64 4231597}
!3621 = !{i64 4231599}
!3622 = !{i64 4231600}
!3623 = !{i64 4231601}
!3624 = !{i64 4231603}
!3625 = !{i64 4231606}
!3626 = !{i64 4231607}
!3627 = !{i64 4231609}
!3628 = !{i64 4231612}
!3629 = !{i64 4231614}
!3630 = !{i64 4231619}
!3631 = !{i64 4231622}
!3632 = !{i64 4231624}
!3633 = !{i64 4231627}
!3634 = !{i64 4231628}
!3635 = !{i64 4231633}
!3636 = !{i64 4231638}
!3637 = !{i64 4231647}
!3638 = !{i64 4231653}
!3639 = !{i64 4231655}
!3640 = !{i64 4231674}
!3641 = !{i64 4231676}
!3642 = !{i64 4231678}
!3643 = !{i64 4231689}
!3644 = !{i64 4231707}
!3645 = !{i64 4231716}
!3646 = !{i64 4231721}
!3647 = !{i64 4231726}
!3648 = !{i64 4231728}
!3649 = !{i64 4231731}
!3650 = !{i64 4231737}
!3651 = !{i64 4231749}
!3652 = !{i64 4231757}
!3653 = !{i64 4231763}
!3654 = !{i64 4231764}
!3655 = !{i64 4231766}
!3656 = !{i64 4231774}
!3657 = !{i64 4231776}
!3658 = !{i64 4231777}
!3659 = !{i64 4231781}
!3660 = !{i64 4231765}
!3661 = !{i64 4231769}
!3662 = !{i64 4231787}
!3663 = !{i64 4231789}
!3664 = !{i64 4231792}
!3665 = !{i64 4231794}
!3666 = !{i64 4231839}
!3667 = !{i64 4231845}
!3668 = !{i64 4231847}
!3669 = !{i64 4231849}
!3670 = !{i64 4231854}
!3671 = !{i64 4231857}
!3672 = !{i64 4231852}
!3673 = !{i64 4231860}
!3674 = !{i64 4231861}
!3675 = !{i64 4231863}
!3676 = !{i64 4231877}
!3677 = !{i64 4231880}
!3678 = !{i64 4231893}
!3679 = !{i64 4231898}
!3680 = !{i64 4231901}
!3681 = !{i64 4231903}
!3682 = !{i64 4231906}
!3683 = !{i64 4231910}
!3684 = !{i64 4232235}
!3685 = !{i64 4232240}
!3686 = !{i64 4232247}
!3687 = !{i64 4232253}
!3688 = !{i64 4232277}
!3689 = !{i64 4232255}
!3690 = !{i64 4232261}
!3691 = !{i64 4232262}
!3692 = !{i64 4232264}
!3693 = !{i64 4232279}
!3694 = !{i64 4232282}
!3695 = !{i64 4232284}
!3696 = !{i64 4232287}
!3697 = !{i64 4232290}
!3698 = !{i64 4232291}
!3699 = !{i64 4232292}
!3700 = !{i64 4232301}
!3701 = !{i64 4232303}
!3702 = !{i64 4232306}
!3703 = !{i64 4232308}
!3704 = !{i64 4232313}
!3705 = !{i64 4232317}
!3706 = !{i64 4232320}
!3707 = !{i64 4232333}
!3708 = !{i64 4232335}
!3709 = !{i64 4232340}
!3710 = !{i64 4232342}
!3711 = !{i64 4232345}
!3712 = !{i64 4232351}
!3713 = !{i64 4232354}
!3714 = !{i64 4232356}
!3715 = !{i64 4232368}
!3716 = !{i64 4232371}
!3717 = !{i64 4232377}
!3718 = !{i64 4232378}
!3719 = !{i64 4232380}
!3720 = !{i64 4232382}
!3721 = !{i64 4232384}
!3722 = !{i64 4232388}
!3723 = !{i64 4232414}
!3724 = !{i64 4232435}
!3725 = !{i64 4232399}
!3726 = !{i64 4232444}
!3727 = !{i64 4232451}
!3728 = !{i64 4232467}
!3729 = !{i64 4232469}
!3730 = !{i64 4232510}
!3731 = !{i64 4232513}
!3732 = !{i64 4232516}
!3733 = !{i64 4232519}
!3734 = !{i64 4232521}
!3735 = !{i64 4232522}
!3736 = !{i64 4232523}
!3737 = !{i64 4232525}
!3738 = !{i64 4232526}
!3739 = !{i64 4232527}
!3740 = !{i64 4232528}
!3741 = !{i64 4232534}
!3742 = !{i64 4232535}
!3743 = !{i64 4232540}
!3744 = !{i64 4232544}
!3745 = !{i64 4232550}
!3746 = !{i64 4232552}
!3747 = !{i64 4232559}
!3748 = !{i64 4232565}
!3749 = !{i64 4232574}
!3750 = !{i64 4232624}
!3751 = !{i64 4232636}
!3752 = !{i64 4232638}
!3753 = !{i64 4232644}
!3754 = !{i64 4232645}
!3755 = !{i64 4232760}
!3756 = !{i64 4232768}
!3757 = !{i64 4232770}
!3758 = !{i64 4232780}
!3759 = !{i64 4232781}
!3760 = !{i64 4232795}
!3761 = !{i64 4232798}
!3762 = !{i64 4232809}
!3763 = !{i64 4232812}
!3764 = !{i64 4232814}
!3765 = !{i64 4232817}
!3766 = !{i64 4232825}
!3767 = !{i64 4232827}
!3768 = !{i64 4232831}
!3769 = !{i64 4232834}
!3770 = !{i64 4232837}
!3771 = !{i64 4232846}
!3772 = !{i64 4232888}
!3773 = !{i64 4232890}
!3774 = !{i64 4232916}
!3775 = !{i64 4232919}
!3776 = !{i64 4232922}
!3777 = !{i64 4232927}
!3778 = !{i64 4232929}
!3779 = !{i64 4232902}
!3780 = !{i64 4232933}
!3781 = !{i64 4232938}
!3782 = !{i64 4232943}
!3783 = !{i64 4232945}
!3784 = !{i64 4232948}
!3785 = !{i64 4232955}
!3786 = !{i64 4232961}
!3787 = !{i64 4232962}
!3788 = !{i64 4232970}
!3789 = !{i64 4232979}
!3790 = !{i64 4232985}
!3791 = !{i64 4232990}
!3792 = !{i64 4232995}
!3793 = !{i64 4232996}
!3794 = !{i64 4233003}
!3795 = !{i64 4233009}
!3796 = !{i64 4233011}
!3797 = !{i64 4233018}
!3798 = !{i64 4233019}
!3799 = !{i64 4233021}
!3800 = !{i64 4233031}
!3801 = !{i64 4233032}
!3802 = !{i64 4233033}
!3803 = !{i64 4233034}
!3804 = !{i64 4233040}
!3805 = !{i64 4233043}
!3806 = !{i64 4233056}
!3807 = !{i64 4233061}
!3808 = !{i64 4233073}
!3809 = !{i64 4233075}
!3810 = !{i64 4233086}
!3811 = !{i64 4233088}
!3812 = !{i64 4233090}
!3813 = !{i64 4233093}
!3814 = !{i64 4233097}
!3815 = !{i64 4233099}
!3816 = !{i64 4233102}
!3817 = !{i64 4233103}
!3818 = !{i64 4233117}
!3819 = !{i64 4233139}
!3820 = !{i64 4233142}
!3821 = !{i64 4233161}
!3822 = !{i64 4233218}
!3823 = !{i64 4233220}
!3824 = !{i64 4233223}
!3825 = !{i64 4233227}
!3826 = !{i64 4233231}
!3827 = !{i64 4233233}
!3828 = !{i64 4233426}
!3829 = !{i64 4233428}
!3830 = !{i64 4233442}
!3831 = !{i64 4233446}
!3832 = !{i64 4233448}
!3833 = !{i64 4233454}
!3834 = !{i64 4233457}
!3835 = !{i64 4233460}
!3836 = !{i64 4233465}
!3837 = !{i64 4233467}
!3838 = !{i64 4233472}
!3839 = !{i64 4233477}
!3840 = !{i64 4233479}
!3841 = !{i64 4233483}
!3842 = !{i64 4233484}
!3843 = !{i64 4233490}
!3844 = !{i64 4233493}
!3845 = !{i64 4233500}
!3846 = !{i64 4233507}
!3847 = !{i64 4233510}
!3848 = !{i64 4233516}
!3849 = !{i64 4233528}
!3850 = !{i64 4233533}
!3851 = !{i64 4233537}
!3852 = !{i64 4233539}
!3853 = !{i64 4233541}
!3854 = !{i64 4233543}
!3855 = !{i64 4233554}
!3856 = !{i64 4233557}
!3857 = !{i64 4233560}
!3858 = !{i64 4233561}
!3859 = !{i64 4233567}
!3860 = !{i64 4233577}
!3861 = !{i64 4233579}
!3862 = !{i64 4233592}
!3863 = !{i64 4233598}
!3864 = !{i64 4233637}
!3865 = !{i64 4233639}
!3866 = !{i64 4233644}
!3867 = !{i64 4233647}
!3868 = !{i64 4233650}
!3869 = !{i64 4233659}
!3870 = !{i64 4233660}
!3871 = !{i64 4233700}
!3872 = !{i64 4233705}
!3873 = !{i64 4233727}
!3874 = !{i64 4233738}
!3875 = !{i64 4233766}
!3876 = !{i64 4233773}
!3877 = !{i64 4233795}
!3878 = !{i64 4233829}
!3879 = !{i64 4233846}
!3880 = !{i64 4233848}
!3881 = !{i64 4233854}
!3882 = !{i64 4233856}
!3883 = !{i64 4233878}
!3884 = !{i64 4233884}
!3885 = !{i64 4233889}
!3886 = !{i64 4233895}
!3887 = !{i64 4233901}
!3888 = !{i64 4233903}
!3889 = !{i64 4233908}
!3890 = !{i64 4233911}
!3891 = !{i64 4233898}
!3892 = !{i64 4233915}
!3893 = !{i64 4233921}
!3894 = !{i64 4233926}
!3895 = !{i64 4233928}
!3896 = !{i64 4233930}
!3897 = !{i64 4233938}
!3898 = !{i64 4233944}
!3899 = !{i64 4233947}
!3900 = !{i64 4233949}
!3901 = !{i64 4233951}
!3902 = !{i64 4233954}
!3903 = !{i64 4233977}
!3904 = !{i64 4233892}
!3905 = !{i64 4233980}
!3906 = !{i64 4234016}
!3907 = !{i64 4234026}
!3908 = !{i64 4234029}
!3909 = !{i64 4234037}
!3910 = !{i64 4234310}
!3911 = !{i64 4234315}
!3912 = !{i64 4234318}
!3913 = !{i64 4234335}
!3914 = !{i64 4234343}
!3915 = !{i64 4234352}
!3916 = !{i64 4234434}
!3917 = !{i64 4234435}
!3918 = !{i64 4234438}
!3919 = !{i64 4234441}
!3920 = !{i64 4234444}
!3921 = !{i64 4234461}
!3922 = !{i64 4234465}
!3923 = !{i64 4234466}
!3924 = !{i64 4234473}
!3925 = !{i64 4234474}
!3926 = !{i64 4234476}
!3927 = !{i64 4234487}
!3928 = !{i64 4234492}
!3929 = !{i64 4234499}
!3930 = !{i64 4234506}
!3931 = !{i64 4234490}
!3932 = !{i64 4234511}
!3933 = !{i64 4234515}
!3934 = !{i64 4234517}
!3935 = !{i64 4234613}
!3936 = !{i64 4234615}
!3937 = !{i64 4234621}
!3938 = !{i64 4234626}
!3939 = !{i64 4234628}
!3940 = !{i64 4234634}
!3941 = !{i64 4234641}
!3942 = !{i64 4234644}
!3943 = !{i64 4234648}
!3944 = !{i64 4234650}
!3945 = !{i64 4234651}
!3946 = !{i64 4234661}
!3947 = !{i64 4234666}
!3948 = !{i64 4234670}
!3949 = !{i64 4234715}
!3950 = !{i64 4234869}
!3951 = !{i64 4234874}
!3952 = !{i64 4234880}
!3953 = !{i64 4234885}
!3954 = !{i64 4234887}
!3955 = !{i64 4234896}
!3956 = !{i64 4234906}
!3957 = !{i64 4234907}
!3958 = !{i64 4234917}
!3959 = !{i64 4234919}
!3960 = !{i64 4234922}
!3961 = !{i64 4234924}
!3962 = !{i64 4234929}
!3963 = !{i64 4234931}
!3964 = !{i64 4234947}
!3965 = !{i64 4234954}
!3966 = !{i64 4234959}
!3967 = !{i64 4234961}
!3968 = !{i64 4234962}
!3969 = !{i64 4234963}
!3970 = !{i64 4234969}
!3971 = !{i64 4234975}
!3972 = !{i64 4234977}
!3973 = !{i64 4234980}
!3974 = !{i64 4234987}
!3975 = !{i64 4234990}
!3976 = !{i64 4234991}
!3977 = !{i64 4235046}
!3978 = !{i64 4235146}
!3979 = !{i64 4235150}
!3980 = !{i64 4235159}
!3981 = !{i64 4235165}
!3982 = !{i64 4235171}
!3983 = !{i64 4235174}
!3984 = !{i64 4235176}
!3985 = !{i64 4235178}
!3986 = !{i64 4235186}
!3987 = !{i64 4235195}
!3988 = !{i64 4235198}
!3989 = !{i64 4235204}
!3990 = !{i64 4235218}
!3991 = !{i64 4235219}
!3992 = !{i64 4235224}
!3993 = !{i64 4235227}
!3994 = !{i64 4235228}
!3995 = !{i64 4235231}
!3996 = !{i64 4235242}
!3997 = !{i64 4235245}
!3998 = !{i64 4235255}
!3999 = !{i64 4235258}
!4000 = !{i64 4235259}
!4001 = !{i64 4235261}
!4002 = !{i64 4235263}
!4003 = !{i64 4235270}
!4004 = !{i64 4235272}
!4005 = !{i64 4235276}
!4006 = !{i64 4235280}
!4007 = !{i64 4235281}
!4008 = !{i64 4235282}
!4009 = !{i64 4235287}
!4010 = !{i64 4235183}
!4011 = !{i64 4235293}
!4012 = !{i64 4235294}
!4013 = !{i64 4235297}
!4014 = !{i64 4235302}
!4015 = !{i64 4235310}
!4016 = !{i64 4235314}
!4017 = !{i64 4235322}
!4018 = !{i64 4235323}
!4019 = !{i64 4235326}
!4020 = !{i64 4235327}
!4021 = !{i64 4235333}
!4022 = !{i64 4235334}
!4023 = !{i64 4235342}
!4024 = !{i64 4235344}
!4025 = !{i64 4235346}
!4026 = !{i64 4235348}
!4027 = !{i64 4235355}
!4028 = !{i64 4235359}
!4029 = !{i64 4235364}
!4030 = !{i64 4235371}
!4031 = !{i64 4235374}
!4032 = !{i64 4235353}
!4033 = !{i64 4235376}
!4034 = !{i64 4235379}
!4035 = !{i64 4235352}
!4036 = !{i64 4235362}
!4037 = !{i64 4235384}
!4038 = !{i64 4235430}
!4039 = !{i64 4235433}
!4040 = !{i64 4235434}
!4041 = !{i64 4235442}
!4042 = !{i64 4235444}
!4043 = !{i64 4235448}
!4044 = !{i64 4235450}
!4045 = !{i64 4235436}
!4046 = !{i64 4235458}
!4047 = !{i64 4235460}
!4048 = !{i64 4235466}
!4049 = !{i64 4235468}
!4050 = !{i64 4235473}
!4051 = !{i64 4235475}
!4052 = !{i64 4235482}
!4053 = !{i64 4235485}
!4054 = !{i64 4235488}
!4055 = !{i64 4235489}
!4056 = !{i64 4235496}
!4057 = !{i64 4235501}
!4058 = !{i64 4235503}
!4059 = !{i64 4235504}
!4060 = !{i64 4235509}
!4061 = !{i64 4235511}
!4062 = !{i64 4235518}
!4063 = !{i64 4235520}
!4064 = !{i64 4235534}
!4065 = !{i64 4235536}
!4066 = !{i64 4235529}
!4067 = !{i64 4235550}
!4068 = !{i64 4235552}
!4069 = !{i64 4235557}
!4070 = !{i64 4235566}
!4071 = !{i64 4235523}
!4072 = !{i64 4235569}
!4073 = !{i64 4235578}
!4074 = !{i64 4235579}
!4075 = !{i64 4235581}
!4076 = !{i64 4235587}
!4077 = !{i64 4235593}
!4078 = !{i64 4235596}
!4079 = !{i64 4235598}
!4080 = !{i64 4235604}
!4081 = !{i64 4235609}
!4082 = !{i64 4235639}
!4083 = !{i64 4235643}
!4084 = !{i64 4235647}
!4085 = !{i64 4235654}
!4086 = !{i64 4235663}
!4087 = !{i64 4235670}
!4088 = !{i64 4235674}
!4089 = !{i64 4235667}
!4090 = !{i64 4235759}
!4091 = !{i64 4235774}
!4092 = !{i64 4235776}
!4093 = !{i64 4235781}
!4094 = !{i64 4235782}
!4095 = !{i64 4235787}
!4096 = !{i64 4235789}
!4097 = !{i64 4235814}
!4098 = !{i64 4235820}
!4099 = !{i64 4235823}
!4100 = !{i64 4235824}
!4101 = !{i64 4235744}
!4102 = !{i64 4235747}
!4103 = !{i64 4235748}
!4104 = !{i64 4235752}
!4105 = !{i64 4235830}
!4106 = !{i64 4235833}
!4107 = !{i64 4235835}
!4108 = !{i64 4235837}
!4109 = !{i64 4235839}
!4110 = !{i64 4235849}
!4111 = !{i64 4235852}
!4112 = !{i64 4235860}
!4113 = !{i64 4235866}
!4114 = !{i64 4235872}
!4115 = !{i64 4235879}
!4116 = !{i64 4235917}
!4117 = !{i64 4235924}
!4118 = !{i64 4235928}
!4119 = !{i64 4235937}
!4120 = !{i64 4235947}
!4121 = !{i64 4235959}
!4122 = !{i64 4235967}
!4123 = !{i64 4235968}
!4124 = !{i64 4235974}
!4125 = !{i64 4235977}
!4126 = !{i64 4235982}
!4127 = !{i64 4235988}
!4128 = !{i64 4235990}
!4129 = !{i64 4235993}
!4130 = !{i64 4235995}
!4131 = !{i64 4236002}
!4132 = !{i64 4236019}
!4133 = !{i64 4236037}
!4134 = !{i64 4236051}
!4135 = !{i64 4236053}
!4136 = !{i64 4236055}
!4137 = !{i64 4236099}
!4138 = !{i64 4236103}
!4139 = !{i64 4236106}
!4140 = !{i64 4236120}
!4141 = !{i64 4236126}
!4142 = !{i64 4236142}
!4143 = !{i64 4236144}
!4144 = !{i64 4236146}
!4145 = !{i64 4236154}
!4146 = !{i64 4236164}
!4147 = !{i64 4236169}
!4148 = !{i64 4236170}
!4149 = !{i64 4236171}
!4150 = !{i64 4236173}
!4151 = !{i64 4236177}
!4152 = !{i64 4236184}
!4153 = !{i64 4236188}
!4154 = !{i64 4236193}
!4155 = !{i64 4236199}
!4156 = !{i64 4236213}
!4157 = !{i64 4236218}
!4158 = !{i64 4236224}
!4159 = !{i64 4236238}
!4160 = !{i64 4236250}
!4161 = !{i64 4236255}
!4162 = !{i64 4236257}
!4163 = !{i64 4236301}
!4164 = !{i64 4236310}
!4165 = !{i64 4236320}
!4166 = !{i64 4236324}
!4167 = !{i64 4236339}
!4168 = !{i64 4236346}
!4169 = !{i64 4236353}
!4170 = !{i64 4236383}
!4171 = !{i64 4236384}
!4172 = !{i64 4236394}
!4173 = !{i64 4236400}
!4174 = !{i64 4236403}
!4175 = !{i64 4236412}
!4176 = !{i64 4236424}
!4177 = !{i64 4236430}
!4178 = !{i64 4236440}
!4179 = !{i64 4236442}
!4180 = !{i64 4236444}
!4181 = !{i64 4236446}
!4182 = !{i64 4236449}
!4183 = !{i64 4236454}
!4184 = !{i64 4236462}
!4185 = !{i64 4236486}
!4186 = !{i64 4236492}
!4187 = !{i64 4236494}
!4188 = !{i64 4236497}
!4189 = !{i64 4236501}
!4190 = !{i64 4236503}
!4191 = !{i64 4236507}
!4192 = !{i64 4236513}
!4193 = !{i64 4236515}
!4194 = !{i64 4236483}
!4195 = !{i64 4236517}
!4196 = !{i64 4236526}
!4197 = !{i64 4236528}
!4198 = !{i64 4236534}
!4199 = !{i64 4236537}
!4200 = !{i64 4236542}
!4201 = !{i64 4236547}
!4202 = !{i64 4236551}
!4203 = !{i64 4236584}
!4204 = !{i64 4236588}
!4205 = !{i64 4236499}
!4206 = !{i64 4236596}
!4207 = !{i64 4236598}
!4208 = !{i64 4236602}
!4209 = !{i64 4236605}
!4210 = !{i64 4236610}
!4211 = !{i64 4236617}
!4212 = !{i64 4236624}
!4213 = !{i64 4236633}
!4214 = !{i64 4236636}
!4215 = !{i64 4236627}
!4216 = !{i64 4236638}
!4217 = !{i64 4236642}
!4218 = !{i64 4236644}
!4219 = !{i64 4236649}
!4220 = !{i64 4236651}
!4221 = !{i64 4236653}
!4222 = !{i64 4236655}
!4223 = !{i64 4236657}
!4224 = !{i64 4236663}
!4225 = !{i64 4236668}
!4226 = !{i64 4236722}
!4227 = !{i64 4236724}
!4228 = !{i64 4236726}
!4229 = !{i64 4236729}
!4230 = !{i64 4236739}
!4231 = !{i64 4236742}
!4232 = !{i64 4236761}
!4233 = !{i64 4236768}
!4234 = !{i64 4236770}
!4235 = !{i64 4236776}
!4236 = !{i64 4236779}
!4237 = !{i64 4236782}
!4238 = !{i64 4236784}
!4239 = !{i64 4236788}
!4240 = !{i64 4236789}
!4241 = !{i64 4236791}
!4242 = !{i64 4236793}
!4243 = !{i64 4236802}
!4244 = !{i64 4236817}
!4245 = !{i64 4236818}
!4246 = !{i64 4236823}
!4247 = !{i64 4236825}
!4248 = !{i64 4236834}
!4249 = !{i64 4236840}
!4250 = !{i64 4236853}
!4251 = !{i64 4236916}
!4252 = !{i64 4236919}
!4253 = !{i64 4236922}
!4254 = !{i64 4236932}
!4255 = !{i64 4236938}
!4256 = !{i64 4236979}
!4257 = !{i64 4237006}
!4258 = !{i64 4237012}
!4259 = !{i64 4237016}
!4260 = !{i64 4237019}
!4261 = !{i64 4237021}
!4262 = !{i64 4237022}
!4263 = !{i64 4237029}
!4264 = !{i64 4237031}
!4265 = !{i64 4237034}
!4266 = !{i64 4237036}
!4267 = !{i64 4237039}
!4268 = !{i64 4237042}
!4269 = !{i64 4237056}
!4270 = !{i64 4237070}
!4271 = !{i64 4237073}
!4272 = !{i64 4237076}
!4273 = !{i64 4237082}
!4274 = !{i64 4237083}
!4275 = !{i64 4237091}
!4276 = !{i64 4237103}
!4277 = !{i64 4237106}
!4278 = !{i64 4237111}
!4279 = !{i64 4237129}
!4280 = !{i64 4237141}
!4281 = !{i64 4237151}
!4282 = !{i64 4237162}
!4283 = !{i64 4237164}
!4284 = !{i64 4237165}
!4285 = !{i64 4237173}
!4286 = !{i64 4237176}
!4287 = !{i64 4237177}
!4288 = !{i64 4237435}
!4289 = !{i64 4237443}
!4290 = !{i64 4237448}
!4291 = !{i64 4237498}
!4292 = !{i64 4237500}
!4293 = !{i64 4237516}
!4294 = !{i64 4237523}
!4295 = !{i64 4237526}
!4296 = !{i64 4237528}
!4297 = !{i64 4237538}
!4298 = !{i64 4237542}
!4299 = !{i64 4237555}
!4300 = !{i64 4237557}
!4301 = !{i64 4237561}
!4302 = !{i64 4237568}
!4303 = !{i64 4237569}
!4304 = !{i64 4237572}
!4305 = !{i64 4237577}
!4306 = !{i64 4237579}
!4307 = !{i64 4237581}
!4308 = !{i64 4237583}
!4309 = !{i64 4237590}
!4310 = !{i64 4237595}
!4311 = !{i64 4237599}
!4312 = !{i64 4237607}
!4313 = !{i64 4237611}
!4314 = !{i64 4237627}
!4315 = !{i64 4237631}
!4316 = !{i64 4237632}
!4317 = !{i64 4237637}
!4318 = !{i64 4237642}
!4319 = !{i64 4237652}
!4320 = !{i64 4237660}
!4321 = !{i64 4237661}
!4322 = !{i64 4237665}
!4323 = !{i64 4237667}
!4324 = !{i64 4237669}
!4325 = !{i64 4237670}
!4326 = !{i64 4237675}
!4327 = !{i64 4237678}
!4328 = !{i64 4237683}
!4329 = !{i64 4237685}
!4330 = !{i64 4237691}
!4331 = !{i64 4237693}
!4332 = !{i64 4237755}
!4333 = !{i64 4237757}
!4334 = !{i64 4237760}
!4335 = !{i64 4237763}
!4336 = !{i64 4237771}
!4337 = !{i64 4237779}
!4338 = !{i64 4237781}
!4339 = !{i64 4237782}
!4340 = !{i64 4237784}
!4341 = !{i64 4237776}
!4342 = !{i64 4237786}
!4343 = !{i64 4237787}
!4344 = !{i64 4237791}
!4345 = !{i64 4237792}
!4346 = !{i64 4237796}
!4347 = !{i64 4237817}
!4348 = !{i64 4237836}
!4349 = !{i64 4237848}
!4350 = !{i64 4237855}
!4351 = !{i64 4237858}
!4352 = !{i64 4237860}
!4353 = !{i64 4237862}
!4354 = !{i64 4237764}
!4355 = !{i64 4237839}
!4356 = !{i64 4237873}
!4357 = !{i64 4237880}
!4358 = !{i64 4237882}
!4359 = !{i64 4237889}
!4360 = !{i64 4237891}
!4361 = !{i64 4237894}
!4362 = !{i64 4237912}
!4363 = !{i64 4238089}
!4364 = !{i64 4238090}
!4365 = !{i64 4238093}
!4366 = !{i64 4238163}
!4367 = !{i64 4238164}
!4368 = !{i64 4238166}
!4369 = !{i64 4238171}
!4370 = !{i64 4238174}
!4371 = !{i64 4238178}
!4372 = !{i64 4238185}
!4373 = !{i64 4238190}
!4374 = !{i64 4238191}
!4375 = !{i64 4238193}
!4376 = !{i64 4238201}
!4377 = !{i64 4238206}
!4378 = !{i64 4238212}
!4379 = !{i64 4238215}
!4380 = !{i64 4238216}
!4381 = !{i64 4238222}
!4382 = !{i64 4238224}
!4383 = !{i64 4238226}
!4384 = !{i64 4238227}
!4385 = !{i64 4238229}
!4386 = !{i64 4238231}
!4387 = !{i64 4238234}
!4388 = !{i64 4238238}
!4389 = !{i64 4238240}
!4390 = !{i64 4238241}
!4391 = !{i64 4238245}
!4392 = !{i64 4238246}
!4393 = !{i64 4238252}
!4394 = !{i64 4238258}
!4395 = !{i64 4238261}
!4396 = !{i64 4238264}
!4397 = !{i64 4238269}
!4398 = !{i64 4238280}
!4399 = !{i64 4238282}
!4400 = !{i64 4238287}
!4401 = !{i64 4238289}
!4402 = !{i64 4238305}
!4403 = !{i64 4238331}
!4404 = !{i64 4238338}
!4405 = !{i64 4238339}
!4406 = !{i64 4238349}
!4407 = !{i64 4238357}
!4408 = !{i64 4238359}
!4409 = !{i64 4238361}
!4410 = !{i64 4238363}
!4411 = !{i64 4238368}
!4412 = !{i64 4238380}
!4413 = !{i64 4238386}
!4414 = !{i64 4238395}
!4415 = !{i64 4238401}
!4416 = !{i64 4238409}
!4417 = !{i64 4238423}
!4418 = !{i64 4238510}
!4419 = !{i64 4238511}
!4420 = !{i64 4238515}
!4421 = !{i64 4238517}
!4422 = !{i64 4238520}
!4423 = !{i64 4238522}
!4424 = !{i64 4238528}
!4425 = !{i64 4238530}
!4426 = !{i64 4238532}
!4427 = !{i64 4238543}
!4428 = !{i64 4238534}
!4429 = !{i64 4238540}
!4430 = !{i64 4238541}
!4431 = !{i64 4238549}
!4432 = !{i64 4238551}
!4433 = !{i64 4238553}
!4434 = !{i64 4238555}
!4435 = !{i64 4238557}
!4436 = !{i64 4238564}
!4437 = !{i64 4238566}
!4438 = !{i64 4238572}
!4439 = !{i64 4238580}
!4440 = !{i64 4238581}
!4441 = !{i64 4238584}
!4442 = !{i64 4238587}
!4443 = !{i64 4238589}
!4444 = !{i64 4238592}
!4445 = !{i64 4238618}
!4446 = !{i64 4238623}
!4447 = !{i64 4238624}
!4448 = !{i64 4238636}
!4449 = !{i64 4238637}
!4450 = !{i64 4238638}
!4451 = !{i64 4238640}
!4452 = !{i64 4238641}
!4453 = !{i64 4238647}
!4454 = !{i64 4238657}
!4455 = !{i64 4238668}
!4456 = !{i64 4238670}
!4457 = !{i64 4238672}
!4458 = !{i64 4238686}
!4459 = !{i64 4238687}
!4460 = !{i64 4238692}
!4461 = !{i64 4238762}
!4462 = !{i64 4238763}
!4463 = !{i64 4238770}
!4464 = !{i64 4238773}
!4465 = !{i64 4238774}
!4466 = !{i64 4238775}
!4467 = !{i64 4238784}
!4468 = !{i64 4238829}
!4469 = !{i64 4238868}
!4470 = !{i64 4238875}
!4471 = !{i64 4238879}
!4472 = !{i64 4238881}
!4473 = !{i64 4238899}
!4474 = !{i64 4238901}
!4475 = !{i64 4238904}
!4476 = !{i64 4238906}
!4477 = !{i64 4238908}
!4478 = !{i64 4238910}
!4479 = !{i64 4238914}
!4480 = !{i64 4238916}
!4481 = !{i64 4238921}
!4482 = !{i64 4239065}
!4483 = !{i64 4239071}
!4484 = !{i64 4239082}
!4485 = !{i64 4239087}
!4486 = !{i64 4239090}
!4487 = !{i64 4239094}
!4488 = !{i64 4239095}
!4489 = !{i64 4239103}
!4490 = !{i64 4239106}
!4491 = !{i64 4239112}
!4492 = !{i64 4239114}
!4493 = !{i64 4239124}
!4494 = !{i64 4239130}
!4495 = !{i64 4239132}
!4496 = !{i64 4239131}
!4497 = !{i64 4239140}
!4498 = !{i64 4239144}
!4499 = !{i64 4239150}
!4500 = !{i64 4239155}
!4501 = !{i64 4239159}
!4502 = !{i64 4239147}
!4503 = !{i64 4239162}
!4504 = !{i64 4239167}
!4505 = !{i64 4239171}
!4506 = !{i64 4239178}
!4507 = !{i64 4239423}
!4508 = !{i64 4239427}
!4509 = !{i64 4239429}
!4510 = !{i64 4239430}
!4511 = !{i64 4239431}
!4512 = !{i64 4239432}
!4513 = !{i64 4239445}
!4514 = !{i64 4239496}
!4515 = !{i64 4239501}
!4516 = !{i64 4239504}
!4517 = !{i64 4239506}
!4518 = !{i64 4239509}
!4519 = !{i64 4239512}
!4520 = !{i64 4239514}
!4521 = !{i64 4239527}
!4522 = !{i64 4239528}
!4523 = !{i64 4239536}
!4524 = !{i64 4239538}
!4525 = !{i64 4239540}
!4526 = !{i64 4239548}
!4527 = !{i64 4239553}
!4528 = !{i64 4239554}
!4529 = !{i64 4239556}
!4530 = !{i64 4239557}
!4531 = !{i64 4239559}
!4532 = !{i64 4239516}
!4533 = !{i64 4239561}
!4534 = !{i64 4239564}
!4535 = !{i64 4239566}
!4536 = !{i64 4239569}
!4537 = !{i64 4239576}
!4538 = !{i64 4239582}
!4539 = !{i64 4239584}
!4540 = !{i64 4239587}
!4541 = !{i64 4239589}
!4542 = !{i64 4239591}
!4543 = !{i64 4239593}
!4544 = !{i64 4239594}
!4545 = !{i64 4239602}
!4546 = !{i64 4239605}
!4547 = !{i64 4239607}
!4548 = !{i64 4239609}
!4549 = !{i64 4239614}
!4550 = !{i64 4239621}
!4551 = !{i64 4239625}
!4552 = !{i64 4239632}
!4553 = !{i64 4239641}
!4554 = !{i64 4239629}
!4555 = !{i64 4239643}
!4556 = !{i64 4239646}
!4557 = !{i64 4239660}
!4558 = !{i64 4239667}
!4559 = !{i64 4239669}
!4560 = !{i64 4239640}
!4561 = !{i64 4239671}
!4562 = !{i64 4239684}
!4563 = !{i64 4239686}
!4564 = !{i64 4239688}
!4565 = !{i64 4239695}
!4566 = !{i64 4239697}
!4567 = !{i64 4239706}
!4568 = !{i64 4239713}
!4569 = !{i64 4239719}
!4570 = !{i64 4239721}
!4571 = !{i64 4239723}
!4572 = !{i64 4239729}
!4573 = !{i64 4239734}
!4574 = !{i64 4239746}
!4575 = !{i64 4239749}
!4576 = !{i64 4239752}
!4577 = !{i64 4239754}
!4578 = !{i64 4239756}
!4579 = !{i64 4239757}
!4580 = !{i64 4239759}
!4581 = !{i64 4239760}
!4582 = !{i64 4239762}
!4583 = !{i64 4239767}
!4584 = !{i64 4239769}
!4585 = !{i64 4239770}
!4586 = !{i64 4239771}
!4587 = !{i64 4239776}
!4588 = !{i64 4239778}
!4589 = !{i64 4239780}
!4590 = !{i64 4239783}
!4591 = !{i64 4239787}
!4592 = !{i64 4239791}
!4593 = !{i64 4239794}
!4594 = !{i64 4239795}
!4595 = !{i64 4239798}
!4596 = !{i64 4239799}
!4597 = !{i64 4239803}
!4598 = !{i64 4239809}
!4599 = !{i64 4239814}
!4600 = !{i64 4239823}
!4601 = !{i64 4239828}
!4602 = !{i64 4239835}
!4603 = !{i64 4239836}
!4604 = !{i64 4239838}
!4605 = !{i64 4239844}
!4606 = !{i64 4239846}
!4607 = !{i64 4239864}
!4608 = !{i64 4239942}
!4609 = !{i64 4239944}
!4610 = !{i64 4239946}
!4611 = !{i64 4239950}
!4612 = !{i64 4239961}
!4613 = !{i64 4239971}
!4614 = !{i64 4239975}
!4615 = !{i64 4239976}
!4616 = !{i64 4239981}
!4617 = !{i64 4239994}
!4618 = !{i64 4240000}
!4619 = !{i64 4240001}
!4620 = !{i64 4240004}
!4621 = !{i64 4240011}
!4622 = !{i64 4240017}
!4623 = !{i64 4240027}
!4624 = !{i64 4240030}
!4625 = !{i64 4240036}
!4626 = !{i64 4240042}
!4627 = !{i64 4240044}
!4628 = !{i64 4240047}
!4629 = !{i64 4240052}
!4630 = !{i64 4240058}
!4631 = !{i64 4240069}
!4632 = !{i64 4240063}
!4633 = !{i64 4240073}
!4634 = !{i64 4240083}
!4635 = !{i64 4240086}
!4636 = !{i64 4240087}
!4637 = !{i64 4240093}
!4638 = !{i64 4240105}
!4639 = !{i64 4240107}
!4640 = !{i64 4240114}
!4641 = !{i64 4240126}
!4642 = !{i64 4240129}
!4643 = !{i64 4240130}
!4644 = !{i64 4240139}
!4645 = !{i64 4240144}
!4646 = !{i64 4240150}
!4647 = !{i64 4240156}
!4648 = !{i64 4240164}
!4649 = !{i64 4240183}
!4650 = !{i64 4240196}
!4651 = !{i64 4240199}
!4652 = !{i64 4240205}
!4653 = !{i64 4240207}
!4654 = !{i64 4240213}
!4655 = !{i64 4240274}
!4656 = !{i64 4240276}
!4657 = !{i64 4240286}
!4658 = !{i64 4240293}
!4659 = !{i64 4240295}
!4660 = !{i64 4240301}
!4661 = !{i64 4240302}
!4662 = !{i64 4240317}
!4663 = !{i64 4240318}
!4664 = !{i64 4240322}
!4665 = !{i64 4240325}
!4666 = !{i64 4240332}
!4667 = !{i64 4240335}
!4668 = !{i64 4240367}
!4669 = !{i64 4240373}
!4670 = !{i64 4240411}
!4671 = !{i64 4240419}
!4672 = !{i64 4240444}
!4673 = !{i64 4240446}
!4674 = !{i64 4240451}
!4675 = !{i64 4240453}
!4676 = !{i64 4240461}
!4677 = !{i64 4240464}
!4678 = !{i64 4240465}
!4679 = !{i64 4240471}
!4680 = !{i64 4240475}
!4681 = !{i64 4240481}
!4682 = !{i64 4240488}
!4683 = !{i64 4240491}
!4684 = !{i64 4240495}
!4685 = !{i64 4240498}
!4686 = !{i64 4240501}
!4687 = !{i64 4240507}
!4688 = !{i64 4240510}
!4689 = !{i64 4240512}
!4690 = !{i64 4240516}
!4691 = !{i64 4240499}
!4692 = !{i64 4240537}
!4693 = !{i64 4240540}
!4694 = !{i64 4240541}
!4695 = !{i64 4240543}
!4696 = !{i64 4240551}
!4697 = !{i64 4240555}
!4698 = !{i64 4240566}
!4699 = !{i64 4240568}
!4700 = !{i64 4240571}
!4701 = !{i64 4240575}
!4702 = !{i64 4240585}
!4703 = !{i64 4240586}
!4704 = !{i64 4240589}
!4705 = !{i64 4240596}
!4706 = !{i64 4240602}
!4707 = !{i64 4240603}
!4708 = !{i64 4240605}
!4709 = !{i64 4240606}
!4710 = !{i64 4240619}
!4711 = !{i64 4240621}
!4712 = !{i64 4240625}
!4713 = !{i64 4240626}
!4714 = !{i64 4240627}
!4715 = !{i64 4240629}
!4716 = !{i64 4240650}
!4717 = !{i64 4240653}
!4718 = !{i64 4240660}
!4719 = !{i64 4240662}
!4720 = !{i64 4240679}
!4721 = !{i64 4240696}
!4722 = !{i64 4240700}
!4723 = !{i64 4240701}
!4724 = !{i64 4240704}
!4725 = !{i64 4240706}
!4726 = !{i64 4240711}
!4727 = !{i64 4240713}
!4728 = !{i64 4240717}
!4729 = !{i64 4240719}
!4730 = !{i64 4240725}
!4731 = !{i64 4240727}
!4732 = !{i64 4240730}
!4733 = !{i64 4240732}
!4734 = !{i64 4240734}
!4735 = !{i64 4240738}
!4736 = !{i64 4240746}
!4737 = !{i64 4240748}
!4738 = !{i64 4240749}
!4739 = !{i64 4240751}
!4740 = !{i64 4240754}
!4741 = !{i64 4240756}
!4742 = !{i64 4240757}
!4743 = !{i64 4240759}
!4744 = !{i64 4240761}
!4745 = !{i64 4240762}
!4746 = !{i64 4240764}
!4747 = !{i64 4240765}
!4748 = !{i64 4240766}
!4749 = !{i64 4240774}
!4750 = !{i64 4240775}
!4751 = !{i64 4240776}
!4752 = !{i64 4240777}
!4753 = !{i64 4240778}
!4754 = !{i64 4240779}
!4755 = !{i64 4240780}
!4756 = !{i64 4240781}
!4757 = !{i64 4240782}
!4758 = !{i64 4240783}
!4759 = !{i64 4240784}
!4760 = !{i64 4240787}
!4761 = !{i64 4240791}
!4762 = !{i64 4240793}
!4763 = !{i64 4240795}
!4764 = !{i64 4240797}
!4765 = !{i64 4240801}
!4766 = !{i64 4240808}
!4767 = !{i64 4240813}
!4768 = !{i64 4240820}
!4769 = !{i64 4240830}
!4770 = !{i64 4240832}
!4771 = !{i64 4240834}
!4772 = !{i64 4240837}
!4773 = !{i64 4240853}
!4774 = !{i64 4240861}
!4775 = !{i64 4240870}
!4776 = !{i64 4240872}
!4777 = !{i64 4240881}
!4778 = !{i64 4240886}
!4779 = !{i64 4240923}
!4780 = !{i64 4240931}
!4781 = !{i64 4240939}
!4782 = !{i64 4240944}
!4783 = !{i64 4240951}
!4784 = !{i64 4240981}
!4785 = !{i64 4240988}
!4786 = !{i64 4240989}
!4787 = !{i64 4240992}
!4788 = !{i64 4240998}
!4789 = !{i64 4241005}
!4790 = !{i64 4241012}
!4791 = !{i64 4241019}
!4792 = !{i64 4241027}
!4793 = !{i64 4241028}
!4794 = !{i64 4241034}
!4795 = !{i64 4241045}
!4796 = !{i64 4241050}
!4797 = !{i64 4241051}
!4798 = !{i64 4241053}
!4799 = !{i64 4241059}
!4800 = !{i64 4241071}
!4801 = !{i64 4241085}
!4802 = !{i64 4241100}
!4803 = !{i64 4241105}
!4804 = !{i64 4241110}
!4805 = !{i64 4241117}
!4806 = !{i64 4241123}
!4807 = !{i64 4241126}
!4808 = !{i64 4241127}
!4809 = !{i64 4241130}
!4810 = !{i64 4241131}
!4811 = !{i64 4241135}
!4812 = !{i64 4241151}
!4813 = !{i64 4241156}
!4814 = !{i64 4241162}
!4815 = !{i64 4241165}
!4816 = !{i64 4241170}
!4817 = !{i64 4241181}
!4818 = !{i64 4241184}
!4819 = !{i64 4241189}
!4820 = !{i64 4241194}
!4821 = !{i64 4241203}
!4822 = !{i64 4241206}
!4823 = !{i64 4241213}
!4824 = !{i64 4241242}
!4825 = !{i64 4241250}
!4826 = !{i64 4241253}
!4827 = !{i64 4241255}
!4828 = !{i64 4241262}
!4829 = !{i64 4241269}
!4830 = !{i64 4241276}
!4831 = !{i64 4241278}
!4832 = !{i64 4241280}
!4833 = !{i64 4241284}
!4834 = !{i64 4241285}
!4835 = !{i64 4241287}
!4836 = !{i64 4241291}
!4837 = !{i64 4241293}
!4838 = !{i64 4241304}
!4839 = !{i64 4241310}
!4840 = !{i64 4241312}
!4841 = !{i64 4241407}
!4842 = !{i64 4241322}
!4843 = !{i64 4241412}
!4844 = !{i64 4241413}
!4845 = !{i64 4241414}
!4846 = !{i64 4241415}
!4847 = !{i64 4241416}
!4848 = !{i64 4241417}
!4849 = !{i64 4241418}
!4850 = !{i64 4241419}
!4851 = !{i64 4241420}
!4852 = !{i64 4241421}
!4853 = !{i64 4241422}
!4854 = !{i64 4241423}
!4855 = !{i64 4241424}
!4856 = !{i64 4241427}
!4857 = !{i64 4241429}
!4858 = !{i64 4241432}
!4859 = !{i64 4241437}
!4860 = !{i64 4241434}
!4861 = !{i64 4241439}
!4862 = !{i64 4241440}
!4863 = !{i64 4241441}
!4864 = !{i64 4241460}
!4865 = !{i64 4241461}
!4866 = !{i64 4241462}
!4867 = !{i64 4241469}
!4868 = !{i64 4241470}
!4869 = !{i64 4241516}
!4870 = !{i64 4241518}
!4871 = !{i64 4241520}
!4872 = !{i64 4241523}
!4873 = !{i64 4241522}
!4874 = !{i64 4241525}
!4875 = !{i64 4241528}
!4876 = !{i64 4241530}
!4877 = !{i64 4241533}
!4878 = !{i64 4241538}
!4879 = !{i64 4241541}
!4880 = !{i64 4241543}
!4881 = !{i64 4241545}
!4882 = !{i64 4241562}
!4883 = !{i64 4241568}
!4884 = !{i64 4241581}
!4885 = !{i64 4241584}
!4886 = !{i64 4241602}
!4887 = !{i64 4241611}
!4888 = !{i64 4241649}
!4889 = !{i64 4241653}
!4890 = !{i64 4241661}
!4891 = !{i64 4241662}
!4892 = !{i64 4241663}
!4893 = !{i64 4241664}
!4894 = !{i64 4241667}
!4895 = !{i64 4241682}
!4896 = !{i64 4241683}
!4897 = !{i64 4241689}
!4898 = !{i64 4241710}
!4899 = !{i64 4241712}
!4900 = !{i64 4241716}
!4901 = !{i64 4241722}
!4902 = !{i64 4241724}
!4903 = !{i64 4241731}
!4904 = !{i64 4241734}
!4905 = !{i64 4241735}
!4906 = !{i64 4241736}
!4907 = !{i64 4241742}
!4908 = !{i64 4248595}
!4909 = !{i64 4248597}
!4910 = !{i64 4248599}
!4911 = !{i64 4248602}
!4912 = !{i64 4248605}
!4913 = !{i64 4248607}
!4914 = !{i64 4248609}
!4915 = !{i64 4248610}
!4916 = !{i64 4248616}
!4917 = !{i64 4248617}
!4918 = !{i64 4248734}
!4919 = !{i64 4248663}
!4920 = !{i64 4248666}
!4921 = !{i64 4248668}
!4922 = !{i64 4248671}
!4923 = !{i64 4248674}
!4924 = !{i64 4248677}
!4925 = !{i64 4248685}
!4926 = !{i64 4248688}
!4927 = !{i64 4248690}
!4928 = !{i64 4248692}
!4929 = !{i64 4248696}
!4930 = !{i64 4248701}
!4931 = !{i64 4248705}
!4932 = !{i64 4248707}
!4933 = !{i64 4248710}
!4934 = !{i64 4248715}
!4935 = !{i64 4248720}
!4936 = !{i64 4248725}
!4937 = !{i64 4248727}
!4938 = !{i64 4248730}
!4939 = !{i64 4248731}
!4940 = !{i64 4248735}
!4941 = !{i64 4248737}
!4942 = !{i64 4248744}
!4943 = !{i64 4248746}
!4944 = !{i64 4248748}
!4945 = !{i64 4248763}
!4946 = !{i64 4248766}
!4947 = !{i64 4248845}
!4948 = !{i64 4248848}
!4949 = !{i64 4248850}
!4950 = !{i64 4248852}
!4951 = !{i64 4248854}
!4952 = !{i64 4248787}
!4953 = !{i64 4248790}
!4954 = !{i64 4248791}
!4955 = !{i64 4248914}
!4956 = !{i64 4248916}
!4957 = !{i64 4248948}
!4958 = !{i64 4248955}
!4959 = !{i64 4248970}
!4960 = !{i64 4248972}
!4961 = !{i64 4248973}
!4962 = !{i64 4248974}
!4963 = !{i64 4248975}
!4964 = !{i64 4248976}
!4965 = !{i64 4248977}
!4966 = !{i64 4248979}
!4967 = !{i64 4248980}
!4968 = !{i64 4248982}
!4969 = !{i64 4248983}
!4970 = !{i64 4248986}
!4971 = !{i64 4248987}
!4972 = !{i64 4248990}
!4973 = !{i64 4249011}
!4974 = !{i64 4249017}
!4975 = !{i64 4249020}
!4976 = !{i64 4249022}
!4977 = !{i64 4249024}
!4978 = !{i64 4249029}
!4979 = !{i64 4249085}
!4980 = !{i64 4249090}
!4981 = !{i64 4249094}
!4982 = !{i64 4249110}
!4983 = !{i64 4249207}
!4984 = !{i64 4249209}
!4985 = !{i64 4249211}
!4986 = !{i64 4249214}
!4987 = !{i64 4249215}
