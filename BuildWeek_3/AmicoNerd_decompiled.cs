using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.Runtime.Versioning;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using AutoPico;
using AutoPico.Activador;
using AutoPico.Activador.Keys;
using AutoPico.Activador.WMI;
using AutoPico.FakeClient;
using AutoPico.KMS;
using AutoPico.KMSEmulator;
using AutoPico.Logging;
using AutoPico.My;
using AutoPico.Network;
using AutoPico.Patcher;
using AutoPico.RPC;
using AutoPico.RPC.Request;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.VisualBasic.FileIO;
using Microsoft.VisualBasic.MyServices;
using Microsoft.Win32;
using Microsoft.Win32.SafeHandles;
using NetFwTypeLib;
using Vestris.ResourceLib;

[assembly: AssemblyCopyright("")]
[assembly: ComVisible(false)]
[assembly: AssemblyCompany("@ByELDI")]
[assembly: AssemblyTrademark("")]
[assembly: Guid("892d5768-497e-4232-a15c-fa9f29e06a03")]
[assembly: AssemblyFileVersion("15.0.0.7")]
[assembly: TargetFramework(".NETFramework,Version=v4.0,Profile=Client", FrameworkDisplayName = ".NET Framework 4 Client Profile")]
[assembly: AssemblyProduct("AutoPico")]
[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: AssemblyTitle("AutoPico")]
[assembly: AssemblyDescription("Portable")]
[assembly: AssemblyVersion("15.0.0.7")]
namespace AutoPico.Activador
{
	public class Activador
	{
		[CompilerGenerated]
		internal sealed class Class0
		{
			public Variables variables_0;

			internal void method_0()
			{
				smethod_2(ref variables_0);
			}

			internal void method_1()
			{
				smethod_3(ref variables_0);
			}

			internal void method_2()
			{
				smethod_4(ref variables_0);
			}

			internal void method_3()
			{
				smethod_5(ref variables_0);
			}
		}

		internal static void smethod_0(ref Variables variables_0)
		{
			if (variables_0.IsWindowsChecked.Value && variables_0.IsOffice2016Checked.Value && variables_0.IsOffice2013Checked.Value && variables_0.IsOffice2010Checked.Value && !variables_0.ActivadorIniciado && !variables_0.IsPaused)
			{
				variables_0.IsGui = false;
				variables_0.ActivadorIniciado = true;
				smethod_1(ref variables_0);
			}
		}

		private static void smethod_1(ref Variables variables_0)
		{
			Variables variables_ = variables_0;
			new Thread((ThreadStart)delegate
			{
				smethod_2(ref variables_);
			}).Start();
			new Thread((ThreadStart)delegate
			{
				smethod_3(ref variables_);
			}).Start();
			new Thread((ThreadStart)delegate
			{
				smethod_4(ref variables_);
			}).Start();
			new Thread((ThreadStart)delegate
			{
				smethod_5(ref variables_);
			}).Start();
		}

		internal static void smethod_2(ref Variables variables_0)
		{
			if (variables_0.IsWindowsActivable.Value && !variables_0.IsWindowsListo.Value)
			{
				FileLogger logger = variables_0.Logger;
				string message = "Activating Windows";
				logger.LogMessage(ref message);
				new Class17().method_0(ref variables_0, ref variables_0.ColeccionWindowsActivable);
			}
		}

		internal static void smethod_3(ref Variables variables_0)
		{
			if (!variables_0.IsOffice2016Activable.Value || variables_0.IsOffice2016Listo.Value)
			{
				return;
			}
			FileLogger logger = variables_0.Logger;
			string message = "Activating Office 2016";
			logger.LogMessage(ref message);
			Class17 @class = new Class17();
			if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
				{
					List<OfficeSoftwareProtectionProduct> list_ = variables_0.ColeccionOffice2016W7;
					@class.method_1(ref variables_0, ref list_);
				}
			}
			else
			{
				List<SoftwareLicensingProduct> list_2 = variables_0.ColeccionOffice2016W8;
				@class.method_0(ref variables_0, ref list_2);
			}
		}

		internal static void smethod_4(ref Variables variables_0)
		{
			if (!variables_0.IsOffice2013Activable.Value || variables_0.IsOffice2013Listo.Value)
			{
				return;
			}
			FileLogger logger = variables_0.Logger;
			string message = "Activating Office 2013";
			logger.LogMessage(ref message);
			Class17 @class = new Class17();
			if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
				{
					List<OfficeSoftwareProtectionProduct> list_ = variables_0.ColeccionOffice2013W7;
					@class.method_1(ref variables_0, ref list_);
				}
			}
			else
			{
				List<SoftwareLicensingProduct> list_2 = variables_0.ColeccionOffice2013W8;
				@class.method_0(ref variables_0, ref list_2);
			}
		}

		internal static void smethod_5(ref Variables variables_0)
		{
			if (variables_0.IsOffice2010Activable.Value && !variables_0.IsOffice2010Listo.Value)
			{
				FileLogger logger = variables_0.Logger;
				string message = "Activating Office 2010";
				logger.LogMessage(ref message);
				new Class17().method_1(ref variables_0, ref variables_0.ColeccionOffice2010);
			}
		}
	}
}
internal class Class1
{
	[Serializable]
	[CompilerGenerated]
	internal sealed class _Closure$__3<$CLS0>
	{
		public static readonly _Closure$__3<$CLS0> $I;

		public static Func<$CLS0[], int> $I3-0;

		static _Closure$__3()
		{
			$I = new _Closure$__3<$CLS0>();
		}

		internal int method_0($CLS0[] gparam_0)
		{
			return gparam_0.Length;
		}
	}

	public static T[] smethod_0<T>(T[] gparam_0, T[] gparam_1)
	{
		T[] array = new T[checked(gparam_0.Length + (gparam_1.Length - 1) + 1)];
		Buffer.BlockCopy(gparam_0, 0, array, 0, gparam_0.Length);
		Buffer.BlockCopy(gparam_1, 0, array, gparam_0.Length, gparam_1.Length);
		return array;
	}

	public static T[] smethod_1<T>(T[] gparam_0, T[] gparam_1, T[] gparam_2)
	{
		checked
		{
			T[] array = new T[gparam_0.Length + gparam_1.Length + (gparam_2.Length - 1) + 1];
			Buffer.BlockCopy(gparam_0, 0, array, 0, gparam_0.Length);
			Buffer.BlockCopy(gparam_1, 0, array, gparam_0.Length, gparam_1.Length);
			Buffer.BlockCopy(gparam_2, 0, array, gparam_0.Length + gparam_1.Length, gparam_2.Length);
			return array;
		}
	}

	public static T[] smethod_2<T>(params T[][] gparam_0)
	{
		checked
		{
			T[] array = new T[Enumerable.Sum<T[]>((IEnumerable<T[]>)gparam_0, (_Closure$__3<T>.$I3-0 != null) ? _Closure$__3<T>.$I3-0 : (_Closure$__3<T>.$I3-0 = (T[] gparam_0) => gparam_0.Length)) - 1 + 1];
			int num = 0;
			foreach (T[] array2 in gparam_0)
			{
				Buffer.BlockCopy(array2, 0, array, num, array2.Length);
				num += array2.Length;
			}
			return array;
		}
	}

	public static bool smethod_3(byte[] byte_0, byte[] byte_1)
	{
		if (byte_0 == byte_1)
		{
			return true;
		}
		checked
		{
			if (byte_0 != null && byte_1 != null)
			{
				if (byte_0.Length != byte_1.Length)
				{
					return false;
				}
				int num = byte_0.Length - 1;
				int num2 = 0;
				while (true)
				{
					if (num2 <= num)
					{
						if (byte_0[num2] != byte_1[num2])
						{
							break;
						}
						num2++;
						continue;
					}
					return true;
				}
				return false;
			}
			return false;
		}
	}
}
internal class Class2
{
	private static Random random_0;

	private static StaticLocalInitFlag staticLocalInitFlag_0;

	internal static string[] smethod_0(ref Variables variables_0, ref string string_0, string string_1 = null)
	{
		string[] array = new string[2];
		ArrayList arrayList = new ArrayList();
		ArrayList arrayList2 = arrayList;
		if (string_1 != null)
		{
			arrayList2.Add(string_1);
		}
		else
		{
			arrayList2.Add(variables_0.DirectorioActual);
			arrayList2.Add(((ServerComputer)Class79.smethod_0()).get_FileSystem().get_CurrentDirectory());
			if (variables_0.IsServer)
			{
				arrayList2.Add(variables_0.SystemRoot + "\\Sysnative");
			}
			arrayList2.Add(variables_0.SystemRoot + "\\System32");
			arrayList2.Add(variables_0.SystemRoot);
			arrayList2.Add(Environment.GetEnvironmentVariable("ProgramFiles") + "\\KMSpico");
			arrayList2.Add(Environment.GetEnvironmentVariable("ProgramFiles") + "\\KMSpico\\driver");
			arrayList2.Add(variables_0.SystemRoot + "\\SysWOW64");
		}
		arrayList2 = null;
		IEnumerator enumerator = default(IEnumerator);
		try
		{
			enumerator = arrayList.GetEnumerator();
			while (enumerator.MoveNext())
			{
				string text = Conversions.ToString(enumerator.Current);
				string text2 = ((!text.EndsWith("\\")) ? (text + "\\" + string_0) : (text + string_0));
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text2))
				{
					array[0] = text;
					array[1] = string_0;
					return array;
				}
			}
			return array;
		}
		finally
		{
			if (enumerator is IDisposable)
			{
				(enumerator as IDisposable).Dispose();
			}
		}
	}

	internal static bool smethod_1(ref string string_0, ref bool bool_0, ref Variables variables_0, ref bool bool_1 = true)
	{
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		checked
		{
			try
			{
				ServiceController val = null;
				ServiceController[] services = ServiceController.GetServices();
				for (int i = 0; i < services.Length; i++)
				{
					val = services[i];
					if (string.Equals(val.get_ServiceName(), string_0))
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					ServiceController[] devices = ServiceController.GetDevices();
					for (int j = 0; j < devices.Length; j++)
					{
						val = devices[j];
						if (string.Equals(val.get_ServiceName(), string_0))
						{
							flag = true;
							break;
						}
					}
				}
				if (flag)
				{
					if (val != null)
					{
						ServiceControllerStatus status;
						if (bool_0)
						{
							status = val.get_Status();
							if (!((Enum)(ServiceControllerStatus)(ref status)).Equals((object)(ServiceControllerStatus)1))
							{
								status = val.get_Status();
								if (!((Enum)(ServiceControllerStatus)(ref status)).Equals((object)(ServiceControllerStatus)3))
								{
									return flag;
								}
							}
							val.Start();
							if (bool_1)
							{
								val.WaitForStatus((ServiceControllerStatus)4);
								return flag;
							}
							return flag;
						}
						status = val.get_Status();
						if (!((Enum)(ServiceControllerStatus)(ref status)).Equals((object)(ServiceControllerStatus)1))
						{
							status = val.get_Status();
							if (!((Enum)(ServiceControllerStatus)(ref status)).Equals((object)(ServiceControllerStatus)3))
							{
								if (val.get_CanStop())
								{
									val.Stop();
									if (bool_1)
									{
										val.WaitForStatus((ServiceControllerStatus)1);
										return flag;
									}
									return flag;
								}
								return flag;
							}
							return flag;
						}
						return flag;
					}
					return flag;
				}
				return flag;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return flag;
			}
		}
	}

	internal static int smethod_2(int int_0, int int_1)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Expected O, but got Unknown
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		if (staticLocalInitFlag_0 == null)
		{
			Interlocked.CompareExchange(ref staticLocalInitFlag_0, new StaticLocalInitFlag(), null);
		}
		bool lockTaken = false;
		try
		{
			Monitor.Enter(staticLocalInitFlag_0, ref lockTaken);
			if (staticLocalInitFlag_0.State == 0)
			{
				staticLocalInitFlag_0.State = 2;
				random_0 = new Random(DateTime.Now.Millisecond);
			}
			else if (staticLocalInitFlag_0.State == 2)
			{
				throw new IncompleteInitialization();
			}
		}
		finally
		{
			staticLocalInitFlag_0.State = 1;
			if (lockTaken)
			{
				Monitor.Exit(staticLocalInitFlag_0);
			}
		}
		return random_0.Next(int_0, int_1);
	}

	internal static int smethod_3(ref Variables variables_0)
	{
		FileLogger logger = variables_0.Logger;
		string message = "Looking Office 2013 Missing keys...";
		logger.LogMessage(ref message);
		int num = 0;
		checked
		{
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"WINWORD.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"POWERPNT.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"OUTLOOK.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"INFOPATH.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"GROOVE.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"EXCEL.EXE"))))
			{
				num++;
			}
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"VISIO.EXE"))))
			{
				num++;
			}
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"WINPROJ.EXE"))))
			{
				num++;
			}
			return num;
		}
	}

	internal static string smethod_4(ref Exception exception_0)
	{
		string result = "Unknown";
		StackTrace stackTrace = new StackTrace(exception_0);
		checked
		{
			int num = stackTrace.FrameCount - 1;
			for (int i = 0; i <= num; i++)
			{
				MethodBase method = stackTrace.GetFrame(i)!.GetMethod();
				if (method.DeclaringType!.Assembly == Assembly.GetExecutingAssembly())
				{
					result = method.Name;
					break;
				}
			}
			return result;
		}
	}

	internal static string smethod_5(string string_0)
	{
		string result = string.Empty;
		int length = string_0.Length;
		if (length > 6)
		{
			result = string_0.Substring(checked(length - 6));
		}
		return result;
	}

	internal static string smethod_6()
	{
		string location = Assembly.GetEntryAssembly()!.Location;
		return location.Substring(0, location.LastIndexOf('\\'));
	}

	internal static byte[] smethod_7(ref string string_0, ref ILogger ilogger_0)
	{
		byte[] result = null;
		try
		{
			result = SoapHexBinary.Parse(string_0).get_Value();
			return result;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + smethod_4(ref exception_);
			ILogger obj = ilogger_0;
			string message = "Error: " + str;
			obj.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	internal static string smethod_8(ref byte[] byte_0, ref ILogger ilogger_0)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		string result = string.Empty;
		try
		{
			result = new SoapHexBinary(byte_0).ToString();
			return result;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + smethod_4(ref exception_);
			ILogger obj = ilogger_0;
			string message = "Error: " + str;
			obj.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return result;
		}
	}
}
internal class Class3
{
	[CompilerGenerated]
	internal sealed class Class4
	{
		public Variables variables_0;

		internal void method_0()
		{
			smethod_11(ref variables_0);
		}
	}

	[CompilerGenerated]
	internal sealed class Class5
	{
		public Variables variables_0;

		internal void method_0()
		{
			Class15.smethod_0(ref variables_0);
		}

		internal void method_1()
		{
			Class15.smethod_0(ref variables_0);
		}
	}

	[CompilerGenerated]
	internal sealed class Class6
	{
		public Variables variables_0;

		internal void method_0()
		{
			Class56.smethod_1(ref variables_0);
		}

		internal void method_1()
		{
			Class56.smethod_1(ref variables_0);
		}
	}

	[CompilerGenerated]
	internal sealed class Class7
	{
		public Variables variables_0;

		internal void method_0()
		{
			smethod_23(ref variables_0);
		}
	}

	internal static void smethod_0(ref Variables variables_0)
	{
		TCP.smethod_2(ref variables_0);
		smethod_25(ref variables_0);
		smethod_24(ref variables_0, ref variables_0.AudioBegin);
		Class10.smethod_11(ref variables_0);
		if (variables_0.IsPreview && !variables_0.IsGui)
		{
			if (variables_0.IsWaterMarkRemove)
			{
				Class12.smethod_0(ref variables_0);
			}
			else if (variables_0.IsWaterMarkRestore)
			{
				Class12.smethod_1(ref variables_0);
			}
			else
			{
				variables_0.WaterMarkBasebrd = true;
				variables_0.WaterMarkShell32 = true;
			}
		}
		smethod_7(ref variables_0);
		Check.smethod_0(ref variables_0);
		if (variables_0.IsBackup)
		{
			bool bool_ = false;
			Backup.smethod_0(ref bool_, ref variables_0);
		}
		Check.smethod_1(ref variables_0);
	}

	internal static void smethod_1(ref string[] string_0, ref ArrayList arrayList_0, ref Variables variables_0, ref bool bool_0 = false)
	{
		Class9 @class = new Class9(string_0, arrayList_0);
		Process val = @class.method_3();
		if (string.IsNullOrEmpty(@class.method_5()))
		{
			return;
		}
		val.Start();
		if (!bool_0)
		{
			return;
		}
		while (!val.get_StandardOutput().EndOfStream)
		{
			string message = val.get_StandardOutput().ReadLine();
			if (!string.IsNullOrEmpty(message))
			{
				variables_0.Logger.LogMessage(ref message);
			}
		}
		val.WaitForExit();
	}

	internal static void smethod_2(ref int int_0, ref string[] string_0, ref Variables variables_0)
	{
		if (!TCP.smethod_1(ref int_0, ref variables_0))
		{
			return;
		}
		ArrayList arrayList = new ArrayList();
		arrayList.Add("-ano");
		Process val = new Class9(string_0, arrayList).method_3();
		val.set_EnableRaisingEvents(true);
		string empty = string.Empty;
		try
		{
			val.Start();
			string[] array = null;
			while (!val.get_StandardOutput().EndOfStream)
			{
				empty = val.get_StandardOutput().ReadLine();
				if (!string.IsNullOrEmpty(empty) && empty.Contains(":" + Conversions.ToString(int_0) + " "))
				{
					array = Regex.Split(empty, "LISTENING");
					break;
				}
			}
			if (array != null && Enumerable.Count<string>((IEnumerable<string>)array) == 2)
			{
				Process processById = Process.GetProcessById(Conversions.ToInteger(array[1].Trim()));
				if (!processById.get_ProcessName().ToLower().Contains("spp"))
				{
					processById.Kill();
					Thread.Sleep(Class2.smethod_2(50, 600));
					variables_0.IsSecohQad.Value = true;
				}
				else
				{
					variables_0.IsWinDivert.Value = true;
					variables_0.IsSecohQad.Value = false;
				}
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_3(ref string string_0, ref Variables variables_0)
	{
		try
		{
			Process.GetProcessById(Conversions.ToInteger(string_0)).Kill();
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_4(ref string string_0, ref Variables variables_0)
	{
		try
		{
			Process[] processesByName = Process.GetProcessesByName(string_0);
			foreach (Process val in processesByName)
			{
				FileLogger logger = variables_0.Logger;
				string message = "Killing: " + val.get_ProcessName();
				logger.LogMessage(ref message);
				val.Kill();
				val.WaitForExit();
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_5(ref string string_0, ref Variables variables_0)
	{
		if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_0))
		{
			return;
		}
		checked
		{
			try
			{
				ReadOnlyCollection<string> directories = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetDirectories(string_0, (SearchOption)2, new string[0]);
				if (directories.Count > 0)
				{
					int num = directories.Count - 1;
					for (int i = 0; i <= num; i++)
					{
						try
						{
							((ServerComputer)Class79.smethod_0()).get_FileSystem().DeleteDirectory(directories[i], (UIOption)5, (RecycleOption)2, (UICancelOption)2);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception exception_ = ex;
							string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
							FileLogger logger = variables_0.Logger;
							string message = "Error: " + str;
							logger.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
					}
				}
				directories = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
				{
					"*.*"
				});
				if (directories.Count <= 0)
				{
					return;
				}
				int num2 = directories.Count - 1;
				for (int j = 0; j <= num2; j++)
				{
					try
					{
						((ServerComputer)Class79.smethod_0()).get_FileSystem().DeleteFile(directories[j], (UIOption)2, (RecycleOption)2, (UICancelOption)2);
					}
					catch (Exception ex2)
					{
						ProjectData.SetProjectError(ex2);
						Exception exception_2 = ex2;
						string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
						FileLogger logger2 = variables_0.Logger;
						string message = "Error: " + str2;
						logger2.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
				}
			}
			catch (Exception projectError)
			{
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
			}
		}
	}

	[MethodImpl(MethodImplOptions.NoOptimization)]
	internal static void smethod_6(ref Variables variables_0)
	{
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			if (variables_0.IsPreview && (!variables_0.WaterMarkBasebrd || !variables_0.WaterMarkShell32))
			{
				FileLogger logger = variables_0.Logger;
				string message = "WaterMark function working...";
				logger.LogMessage(ref message);
			}
			else
			{
				if (variables_0.IsWindowsListo.Value && variables_0.IsOffice2010Listo.Value && variables_0.IsOffice2013Listo.Value && variables_0.IsOffice2016Listo.Value)
				{
					if (variables_0.Closing)
					{
						return;
					}
					variables_0.Closing = true;
					bool bool_ = false;
					string message = ((ApplicationBase)Class79.smethod_1()).get_Info().get_AssemblyName() + ".exe";
					string[] string_ = Class2.smethod_0(ref variables_0, ref message);
					Firewall.smethod_0(ref variables_0, ref bool_, ref string_);
					Class10.smethod_10(ref variables_0);
					smethod_24(ref variables_0, ref variables_0.AudioComplete);
					smethod_12(ref variables_0);
					if (variables_0.IsWindows10 || variables_0.IsWindows81)
					{
						try
						{
							if (variables_0.IsSecohQadLoaded)
							{
								Class11.smethod_1(bool_0: false, ref variables_0);
								message = "SECOH-QAD";
								smethod_4(ref message, ref variables_0);
							}
							if (variables_0.IsWinDivertLoaded)
							{
								Class15.smethod_1(ref variables_0);
							}
						}
						catch (Exception projectError)
						{
							ProjectData.SetProjectError(projectError);
							ProjectData.ClearProjectError();
						}
					}
					DateTime tiempo = variables_0.Tiempo;
					variables_0.Tiempo = DateAndTime.get_Now();
					FileLogger logger2 = variables_0.Logger;
					message = "Time Finish: " + variables_0.Tiempo;
					logger2.LogMessage(ref message);
					FileLogger logger3 = variables_0.Logger;
					message = "Total Time: " + Conversions.ToString(DateAndTime.DateDiff((DateInterval)9, tiempo, variables_0.Tiempo, (FirstDayOfWeek)1, (FirstWeekOfYear)1)) + " seconds";
					logger3.LogMessage(ref message);
					if (!variables_0.IsGui)
					{
						if (variables_0.RunAsService)
						{
							return;
						}
						if (Path.GetFileName(Application.get_ExecutablePath())!.Contains("KMSELDI"))
						{
							if (!variables_0.IsWindowsActivable.Value && !variables_0.IsOffice2016Activable.Value && !variables_0.IsOffice2013Activable.Value && !variables_0.IsOffice2010Activable.Value)
							{
								variables_0.ShowMessage.Show("There is nothing to do here", "I am leaving", IFrmShowMessage.enumMessageIcon.Information, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
							}
							variables_0.iactivateMetroForm_0.CloseFormSegura();
						}
						ProjectData.EndApp();
					}
					else if (Path.GetFileName(Application.get_ExecutablePath())!.Contains("KMSELDI") && !variables_0.IsWindowsActivable.Value && !variables_0.IsOffice2016Activable.Value && !variables_0.IsOffice2013Activable.Value && !variables_0.IsOffice2010Activable.Value)
					{
						variables_0.ShowMessage.Show("There is nothing to do here", "I am leaving", IFrmShowMessage.enumMessageIcon.Information, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
						variables_0.iactivateMetroForm_0.CloseFormSegura();
					}
					return;
				}
				Activador.smethod_0(ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger4 = variables_0.Logger;
			string message = "Error: " + str;
			logger4.LogMessage(ref message);
			Process.GetCurrentProcess().Kill();
			ProjectData.EndApp();
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_7(ref Variables variables_0)
	{
		variables_0.ServersOnline = new HostServer[5]
		{
			new HostServer("kms.digiboy.ir", 1688u),
			new HostServer("zh.us.to", 1688u),
			new HostServer("skms.ddns.net", 1688u),
			new HostServer("110.noip.me", 1688u),
			new HostServer("3rss.vicp.net", 20439u)
		};
		checked
		{
			string message;
			while (true)
			{
				HostServer kmsHostForward;
				int int_ = (int)(kmsHostForward = variables_0.KmsHostForward).Port;
				bool num = TCP.smethod_1(ref int_, ref variables_0);
				kmsHostForward.Port = (uint)int_;
				if (!num)
				{
					break;
				}
				FileLogger logger = variables_0.Logger;
				message = "Port: " + Conversions.ToString(variables_0.KmsHostForward.Port) + " is used, changing...";
				logger.LogMessage(ref message);
				variables_0.KmsHostForward.Port = (uint)(unchecked((long)variables_0.KmsHostForward.Port) + 1L);
			}
			variables_0.KmsHostLocal.Port = variables_0.KmsHostForward.Port;
			variables_0.KmsHostForward.ResetIpForward();
			variables_0.KmsHostLocal.ResetIpLocal();
			bool bool_ = true;
			message = ((ApplicationBase)Class79.smethod_1()).get_Info().get_AssemblyName() + ".exe";
			string[] string_ = Class2.smethod_0(ref variables_0, ref message);
			Firewall.smethod_0(ref variables_0, ref bool_, ref string_);
			smethod_10(ref variables_0);
		}
	}

	internal static void smethod_8(ref Variables variables_0)
	{
		checked
		{
			int num = Enumerable.Count<string>((IEnumerable<string>)variables_0.ArgumentosConsola) - 1;
			for (int i = 0; i <= num; i++)
			{
				if (string.Equals(variables_0.ArgumentosConsola[i].ToLower(), "/silent"))
				{
					variables_0.IsSilent = true;
				}
				if (string.Equals(variables_0.ArgumentosConsola[i].ToLower(), "/backup"))
				{
					variables_0.IsBackup = true;
				}
				if (string.Equals(variables_0.ArgumentosConsola[i].ToLower(), "/status"))
				{
					variables_0.IsCheckStatus = true;
				}
				if (string.Equals(variables_0.ArgumentosConsola[i].ToLower(), "/removewatermark"))
				{
					variables_0.IsWaterMarkRemove = true;
				}
				if (string.Equals(variables_0.ArgumentosConsola[i].ToLower(), "/restorewatermark"))
				{
					variables_0.IsWaterMarkRestore = true;
				}
				if (string.Equals(variables_0.ArgumentosConsola[i].ToLower(), "/?"))
				{
					FileLogger logger = variables_0.Logger;
					string message = "/silent : Run in Silent Mode\r/backup : Make a tokens backup\r/status : Check current activation status\r/removewatermark : Remove watermark in previews editions\r/restorewatermark : Remove watermark in previews editions\r/? This Help";
					logger.LogMessage(ref message);
				}
			}
		}
	}

	internal static void smethod_9(ref Variables variables_0)
	{
		if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(variables_0.DirectorioActual + "\\sounds"))
		{
			variables_0.PlaySound = true;
			string text = variables_0.DirectorioActual + "\\sounds\\verified.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioVerified = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\complete.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioComplete = new AudioFile(text);
				variables_0.AudioComplete.Wait = true;
			}
			text = variables_0.DirectorioActual + "\\sounds\\transfer.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioTransfer = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\begin.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioBegin = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\diagnostic.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioDiagnostic = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\warning.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioWarning = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\affirmative.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioAffirmative = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\incomingtransmission.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioIncomingTransmission = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\enterauthorizationcode.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioEnterAuthorizationCode = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\inputok.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioInputOk = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\inputfailed.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioInputFailed = new AudioFile(text);
			}
			text = variables_0.DirectorioActual + "\\sounds\\processing.mp3";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(text))
			{
				variables_0.AudioProcessing = new AudioFile(text);
			}
		}
	}

	internal static void smethod_10(ref Variables variables_0)
	{
		Variables variables_ = variables_0;
		new Thread((ThreadStart)delegate
		{
			smethod_11(ref variables_);
		}).Start();
	}

	private static void smethod_11(ref Variables variables_0)
	{
		try
		{
			FileLogger logger = variables_0.Logger;
			string message = "KMSEmulator Port: " + variables_0.KmsHostForward.Port;
			logger.LogMessage(ref message);
			KMSServerSettings settings = new KMSServerSettings
			{
				CurrentClientCount = 50u,
				DefaultKMSPID = "05426-00206-152-252649-03-1049-9200.0000-3192012",
				GenerateRandomKMSPID = true,
				Port = checked((int)variables_0.KmsHostForward.Port),
				VLActivationInterval = 43200u,
				VLRenewalInterval = 43200u,
				KillProcessOnPort = false
			};
			KMSServer.Start(ref variables_0, settings);
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_12(ref Variables variables_0)
	{
		try
		{
			KMSServer.Stop(ref variables_0);
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_13(ref bool bool_0, ref bool bool_1, ref bool bool_2, ref Variables variables_0)
	{
		string empty = string.Empty;
		FileLogger logger = variables_0.Logger;
		string message = "One o more Office 2013 keys are not found...";
		logger.LogMessage(ref message);
		if (!bool_0 && (((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"WINWORD.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"POWERPNT.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"OUTLOOK.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"INFOPATH.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"GROOVE.EXE"))) || ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"EXCEL.EXE")))))
		{
			empty = "OfficeProPlus";
			FileLogger logger2 = variables_0.Logger;
			message = "Please reinstall: " + empty;
			logger2.LogMessage(ref message);
		}
		if (!bool_1 && ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"VISIO.EXE"))))
		{
			empty = "OfficeVisioPro";
			FileLogger logger3 = variables_0.Logger;
			message = "Please reinstall: " + empty;
			logger3.LogMessage(ref message);
		}
		if (!bool_2 && ((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(Conversions.ToString(Operators.ConcatenateObject(variables_0.RutaOffice2013, (object)"WINPROJ.EXE"))))
		{
			empty = "OfficeProjectPro";
			FileLogger logger4 = variables_0.Logger;
			message = "Please reinstall: " + empty;
			logger4.LogMessage(ref message);
		}
	}

	internal static void smethod_14(ref Variables variables_0, ref int int_0)
	{
		if (variables_0.iactivateMetroForm_0 != null)
		{
			variables_0.iactivateMetroForm_0.SetCircularProgressSegura(value: true, 33, reset: false);
		}
	}

	internal static void smethod_15(ref Variables variables_0, ref string string_0)
	{
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		smethod_24(ref variables_0, ref variables_0.AudioWarning);
		if (variables_0.IsGui)
		{
			variables_0.ShowMessage.Show("This product: " + string_0 + " .It is not supported for this KMS activation", "No lucky", IFrmShowMessage.enumMessageIcon.Warning, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
		}
	}

	private static void smethod_16(ref Variables variables_0, ref HostServer hostServer_0 = null)
	{
		if (variables_0.KmsHostForward.IpAddress.StartsWith("127") && hostServer_0 == null)
		{
			variables_0.KmsHostForward.IpAddress = WMINetWorkAdapter.smethod_13();
		}
		Class15.smethod_1(ref variables_0);
		Class11.smethod_0(ref variables_0);
		if (File.Exists(variables_0.SystemRoot + "\\SECOH-QAD.dll") && File.Exists(variables_0.SystemRoot + "\\SECOH-QAD.exe"))
		{
			if (variables_0.IntentosActivacion <= 1)
			{
				if (!variables_0.IsSecohQadLoaded)
				{
					FileLogger logger = variables_0.Logger;
					string message = "Loading SECOH-QAD...";
					logger.LogMessage(ref message);
					Class11.smethod_1(bool_0: true, ref variables_0);
				}
			}
			else
			{
				FileLogger logger2 = variables_0.Logger;
				string message = "Loading SECOH-QAD...";
				logger2.LogMessage(ref message);
				Class11.smethod_1(bool_0: true, ref variables_0);
			}
		}
		else
		{
			Class11.smethod_0(ref variables_0);
			Thread.Sleep(Class2.smethod_2(50, 600));
			HostServer hostServer_ = null;
			smethod_19(ref variables_0, ref hostServer_);
		}
	}

	private static void smethod_17(ref Variables variables_0, ref HostServer hostServer_0 = null)
	{
		if (variables_0.KmsHostForward.IpAddress.StartsWith("127") && hostServer_0 == null)
		{
			variables_0.KmsHostForward.IpAddress = WMINetWorkAdapter.smethod_13();
		}
		variables_0.IsSecohQad.Value = false;
		Class11.smethod_1(bool_0: false, ref variables_0);
		checked
		{
			variables_0.IntentosWinDivert++;
			Class15.smethod_2(ref variables_0);
			if (File.Exists(variables_0.DirectorioActual + "\\WinDivert.dll") && File.Exists(variables_0.DirectorioActual + "\\WinDivert.sys"))
			{
				Variables variables_ = variables_0;
				if (variables_0.IntentosActivacion <= 1)
				{
					if (!variables_0.IsWinDivertLoaded)
					{
						FileLogger logger = variables_0.Logger;
						string message = "Loading WinDivert...";
						logger.LogMessage(ref message);
						message = "WinDivert1.1";
						string string_ = "WinDivert1.1";
						string string_2 = variables_0.DirectorioActual + "\\WinDivert.sys";
						Class15.smethod_4(ref message, ref string_, ref string_2, ref variables_0);
						new Thread((ThreadStart)delegate
						{
							Class15.smethod_0(ref variables_);
						}).Start();
						variables_0.IsWinDivertLoaded = true;
					}
				}
				else
				{
					FileLogger logger2 = variables_0.Logger;
					string string_2 = "Loading WinDivert...";
					logger2.LogMessage(ref string_2);
					string_2 = "WinDivert1.1";
					string string_ = "WinDivert1.1";
					string message = variables_0.DirectorioActual + "\\WinDivert.sys";
					Class15.smethod_4(ref string_2, ref string_, ref message, ref variables_0);
					new Thread((ThreadStart)delegate
					{
						Class15.smethod_0(ref variables_);
					}).Start();
					variables_0.IsWinDivertLoaded = true;
				}
			}
			else
			{
				Class15.smethod_2(ref variables_0);
				Thread.Sleep(Class2.smethod_2(50, 600));
				HostServer hostServer_ = null;
				smethod_19(ref variables_0, ref hostServer_);
			}
		}
	}

	private static void smethod_18(ref Variables variables_0, ref HostServer hostServer_0 = null)
	{
		variables_0.IsSecohQad.Value = false;
		Class11.smethod_1(bool_0: false, ref variables_0);
		variables_0.IsWinDivert.Value = false;
		Class15.smethod_1(ref variables_0);
		if (variables_0.KmsHostForward.IpAddress.StartsWith("127") && hostServer_0 == null)
		{
			variables_0.KmsHostForward.IpAddress = WMINetWorkAdapter.smethod_13();
		}
		checked
		{
			variables_0.IntentosTunTap++;
			if (variables_0.IntentosActivacion > 1)
			{
				return;
			}
			Variables variables_ = variables_0;
			if (!variables_0.IsTapDriverLoaded)
			{
				new Thread((ThreadStart)delegate
				{
					Class56.smethod_1(ref variables_);
				}).Start();
			}
			else
			{
				new Thread((ThreadStart)delegate
				{
					Class56.smethod_1(ref variables_);
				}).Start();
			}
		}
	}

	internal static void smethod_19(ref Variables variables_0, ref HostServer hostServer_0 = null)
	{
		if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
		{
			variables_0.IsSecohQad.Value = false;
			variables_0.IsWinDivert.Value = false;
			variables_0.IsTapDriver.Value = false;
			if (!variables_0.IsOnline.Value)
			{
				if (!variables_0.KmsHostLocal.IpAddress.StartsWith("127"))
				{
					variables_0.KmsHostLocal.ResetIpLocal();
				}
			}
			else if (hostServer_0 == null)
			{
				Variables obj = variables_0;
				obj.KmsHostLocal = obj.ServersOnline[Class2.smethod_2(0, variables_0.ServersOnline.Length)];
			}
			else if (variables_0.IntentosActivacion > 6)
			{
				Variables obj2 = variables_0;
				obj2.KmsHostLocal = obj2.ServersOnline[Class2.smethod_2(0, variables_0.ServersOnline.Length)];
			}
			else
			{
				variables_0.KmsHostLocal = hostServer_0;
			}
			FileLogger logger = variables_0.Logger;
			string message = "Using host: " + variables_0.KmsHostLocal.IpAddress + ":" + Conversions.ToString(variables_0.KmsHostLocal.Port);
			logger.LogMessage(ref message);
			return;
		}
		if (hostServer_0 != null)
		{
			variables_0.KmsHostForward = hostServer_0;
		}
		checked
		{
			if (variables_0.IsSecohQad.Value)
			{
				variables_0.IntentosSecoh++;
				if (variables_0.IntentosSecoh < 8)
				{
					smethod_16(ref variables_0, ref hostServer_0);
				}
				else
				{
					variables_0.IsSecohQad.Value = false;
					if (variables_0.IsSecohQadLoaded)
					{
						Class11.smethod_1(bool_0: false, ref variables_0);
					}
					variables_0.IsWinDivert.Value = true;
					Thread.Sleep(Class2.smethod_2(50, 600));
					HostServer hostServer_ = null;
					smethod_19(ref variables_0, ref hostServer_);
				}
			}
			else if (variables_0.IsWinDivert.Value)
			{
				if (variables_0.IntentosWinDivert < 8)
				{
					smethod_17(ref variables_0, ref hostServer_0);
				}
				else
				{
					variables_0.IsWinDivert.Value = false;
					Class15.smethod_1(ref variables_0);
					variables_0.IsTapDriver.Value = true;
					Thread.Sleep(Class2.smethod_2(50, 600));
					HostServer hostServer_ = null;
					smethod_19(ref variables_0, ref hostServer_);
				}
			}
			else if (variables_0.IsTapDriver.Value)
			{
				if (variables_0.IntentosTunTap < 8)
				{
					smethod_18(ref variables_0, ref hostServer_0);
				}
			}
			else if (variables_0.IsOnline.Value)
			{
				variables_0.IsSecohQad.Value = false;
				Class11.smethod_1(bool_0: false, ref variables_0);
				variables_0.IsWinDivert.Value = false;
				Class15.smethod_1(ref variables_0);
				if (hostServer_0 == null)
				{
					Variables obj3 = variables_0;
					obj3.KmsHostForward = obj3.ServersOnline[Class2.smethod_2(0, variables_0.ServersOnline.Length)];
				}
				else if (variables_0.IntentosActivacion > 6)
				{
					Variables obj4 = variables_0;
					obj4.KmsHostLocal = obj4.ServersOnline[Class2.smethod_2(0, variables_0.ServersOnline.Length)];
				}
				else
				{
					variables_0.KmsHostLocal = hostServer_0;
				}
			}
			FileLogger logger2 = variables_0.Logger;
			string message = "Using host: " + variables_0.KmsHostForward.IpAddress + ":" + Conversions.ToString(variables_0.KmsHostForward.Port);
			logger2.LogMessage(ref message);
			string str = "Online";
			if (variables_0.IsSecohQad.Value)
			{
				str = "SECOH-QAD";
			}
			else if (variables_0.IsWinDivert.Value)
			{
				str = "WinDivert";
			}
			else if (variables_0.IsTapDriver.Value)
			{
				str = "TapDriver";
			}
			FileLogger logger3 = variables_0.Logger;
			message = "Using method: " + str;
			logger3.LogMessage(ref message);
		}
	}

	internal static void smethod_20(ref Variables variables_0)
	{
		checked
		{
			try
			{
				if (variables_0.IsWindows10)
				{
					variables_0.ClientSettings.IPAddress = variables_0.KmsHostForward.IpAddress;
					variables_0.ClientSettings.Port = (int)variables_0.KmsHostForward.Port;
					variables_0.ClientSettings.KMSClientProduct = KMSClientProduct.Windows10;
				}
				else if (variables_0.IsWindows81)
				{
					variables_0.ClientSettings.IPAddress = variables_0.KmsHostForward.IpAddress;
					variables_0.ClientSettings.Port = (int)variables_0.KmsHostForward.Port;
					variables_0.ClientSettings.KMSClientProduct = KMSClientProduct.Windows81;
				}
				else if (variables_0.IsWindows8)
				{
					variables_0.ClientSettings.IPAddress = variables_0.KmsHostLocal.IpAddress;
					variables_0.ClientSettings.Port = (int)variables_0.KmsHostLocal.Port;
					variables_0.ClientSettings.KMSClientProduct = KMSClientProduct.Windows8;
				}
				else if (variables_0.IsWindows7)
				{
					variables_0.ClientSettings.IPAddress = variables_0.KmsHostLocal.IpAddress;
					variables_0.ClientSettings.Port = (int)variables_0.KmsHostLocal.Port;
					variables_0.ClientSettings.KMSClientProduct = KMSClientProduct.Windows7;
				}
				else
				{
					variables_0.ClientSettings.IPAddress = variables_0.KmsHostLocal.IpAddress;
					variables_0.ClientSettings.Port = (int)variables_0.KmsHostLocal.Port;
					variables_0.ClientSettings.KMSClientProduct = KMSClientProduct.Windows;
				}
				new Cliente(variables_0.ClientSettings, variables_0.Logger).Start();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
	}

	internal static void smethod_21(ref Variables variables_0, ref bool bool_0)
	{
		checked
		{
			try
			{
				HostServer hostServer = new HostServer();
				hostServer.ResetIpLocal();
				hostServer = ((variables_0.IsWindows10 || variables_0.IsWindows81) ? variables_0.KmsHostForward : variables_0.KmsHostLocal);
				FileLogger logger = variables_0.Logger;
				string message = "Testing Server: " + hostServer.IpAddress + ":" + Conversions.ToString(hostServer.Port) + "...";
				logger.LogMessage(ref message);
				Class24 @class = new Class24(hostServer.IpAddress, (int)hostServer.Port, KMSClientProduct.Windows81);
				int num = 0;
				while (true)
				{
					Class24 class2;
					message = (class2 = @class).AutoPico.KMSEmulator.IKMSClientSettings.IPAddress;
					Class24 class3;
					int int_ = (class3 = @class).AutoPico.KMSEmulator.IKMSClientSettings.Port;
					bool num2 = TCP.smethod_0(ref message, ref int_, ref variables_0);
					class3.AutoPico.KMSEmulator.IKMSClientSettings.Port = int_;
					class2.AutoPico.KMSEmulator.IKMSClientSettings.IPAddress = message;
					if (num2 || num >= 5)
					{
						break;
					}
					Thread.Sleep(Class2.smethod_2(50, 600));
					num++;
				}
				if (num > 4)
				{
					FileLogger logger2 = variables_0.Logger;
					message = "Testing Server Failed: " + hostServer.IpAddress + ":" + Conversions.ToString(hostServer.Port) + "...";
					logger2.LogMessage(ref message);
				}
				else
				{
					new Cliente(@class, variables_0.Logger).Start();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger3 = variables_0.Logger;
				string message = "Error: " + str;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
	}

	internal static void smethod_22(ref Variables variables_0, ref KMSClientProduct kmsclientProduct_0)
	{
		checked
		{
			try
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						variables_0.ClientSettings.IPAddress = variables_0.KmsHostLocal.IpAddress;
						variables_0.ClientSettings.Port = (int)variables_0.KmsHostLocal.Port;
						variables_0.ClientSettings.KMSClientProduct = kmsclientProduct_0;
					}
					else if (variables_0.IsWindows7)
					{
						variables_0.ClientSettings.IPAddress = variables_0.KmsHostLocal.IpAddress;
						variables_0.ClientSettings.Port = (int)variables_0.KmsHostLocal.Port;
						variables_0.ClientSettings.KMSClientProduct = kmsclientProduct_0;
					}
				}
				else
				{
					variables_0.ClientSettings.IPAddress = variables_0.KmsHostForward.IpAddress;
					variables_0.ClientSettings.Port = (int)variables_0.KmsHostForward.Port;
					variables_0.ClientSettings.KMSClientProduct = kmsclientProduct_0;
				}
				Variables variables_ = variables_0;
				new Thread((ThreadStart)delegate
				{
					smethod_23(ref variables_);
				}).Start();
				Thread.Sleep(Class2.smethod_2(50, 600));
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
	}

	internal static void smethod_23(ref Variables variables_0)
	{
		new Cliente(variables_0.ClientSettings, variables_0.Logger).Start();
	}

	internal static void smethod_24(ref Variables variables_0, ref AudioFile audioFile_0)
	{
		if (variables_0.PlaySound)
		{
			if (variables_0.Sonidos.get_Count() > 1)
			{
				variables_0.Sonidos.Peek().Close();
			}
			variables_0.Sonidos.Push(audioFile_0);
			variables_0.Sonidos.Peek().Play();
		}
	}

	internal static void smethod_25(ref Variables variables_0)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		try
		{
			variables_0.GObjWmiService = new ManagementScope("\\\\.\\root\\cimv2");
			variables_0.GObjWmiService.Connect();
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_26(ref Variables variables_0, ref string string_0)
	{
		bool bool_ = false;
		bool bool_2 = true;
		Class2.smethod_1(ref string_0, ref bool_, ref variables_0, ref bool_2);
		ArrayList arrayList_ = new ArrayList();
		arrayList_.Add("delete \"" + string_0 + "\"");
		string string_ = "sc.exe";
		string[] string_2 = Class2.smethod_0(ref variables_0, ref string_);
		bool_2 = false;
		smethod_1(ref string_2, ref arrayList_, ref variables_0, ref bool_2);
	}

	internal static void smethod_27(ref List<SoftwareLicensingProduct> list_0, ref SoftwareLicensingProduct softwareLicensingProduct_0)
	{
		if (list_0 == null)
		{
			list_0 = new List<SoftwareLicensingProduct>();
		}
		if (!list_0.Contains(softwareLicensingProduct_0))
		{
			list_0.Add(softwareLicensingProduct_0);
		}
	}

	internal static void smethod_28(ref List<OfficeSoftwareProtectionProduct> list_0, ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0)
	{
		if (list_0 == null)
		{
			list_0 = new List<OfficeSoftwareProtectionProduct>();
		}
		if (!list_0.Contains(officeSoftwareProtectionProduct_0))
		{
			list_0.Add(officeSoftwareProtectionProduct_0);
		}
	}
}
internal class Class8
{
	[DllImport("kernel32")]
	private static extern uint EnumSystemFirmwareTables(uint uint_0, IntPtr intptr_0, uint uint_1);

	[DllImport("kernel32")]
	private static extern uint GetSystemFirmwareTable(uint uint_0, uint uint_1, IntPtr intptr_0, uint uint_2);

	public bool method_0(ref Variables variables_0)
	{
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Expected O, but got Unknown
		string text = variables_0.DirectorioActual + "\\DM.bin";
		try
		{
			if (!File.Exists(text))
			{
				byte[] byte_ = new byte[86];
				string string_ = string.Empty;
				if (method_1(ref byte_, ref variables_0))
				{
					try
					{
						string_ = Encoding.GetEncoding(1252).GetString(count: BitConverter.ToInt32(byte_, 52), bytes: byte_, index: 56);
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger = variables_0.Logger;
						string message = "Error: " + str;
						logger.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
					Regex val = new Regex("^([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})$");
					if (!string.IsNullOrEmpty(string_) & val.IsMatch(string_))
					{
						FileLogger logger2 = variables_0.Logger;
						string text2 = string_;
						string message = "Key found on MSDM: " + text2.Substring(text2.LastIndexOf("-"));
						logger2.LogMessage(ref message);
						bool bool_ = true;
						bool bool_2 = false;
						bool bool_3 = false;
						bool bool_4 = false;
						return Key.smethod_13(ref string_, ref bool_, ref bool_2, ref bool_3, ref bool_4, ref variables_0);
					}
					string_ = Encoding.ASCII.GetString(byte_);
					string_ = string_.Substring(checked(byte_.Length - 29));
					if (!string.IsNullOrEmpty(string_) & val.IsMatch(string_))
					{
						FileLogger logger3 = variables_0.Logger;
						string text3 = string_;
						string message = "Key found on MSDM:: " + text3.Substring(text3.LastIndexOf("-"));
						logger3.LogMessage(ref message);
						bool bool_4 = true;
						bool bool_3 = false;
						bool bool_2 = false;
						bool bool_ = false;
						return Key.smethod_13(ref string_, ref bool_4, ref bool_3, ref bool_2, ref bool_, ref variables_0);
					}
				}
				File.WriteAllText(text, string_);
			}
		}
		catch (Exception ex2)
		{
			ProjectData.SetProjectError(ex2);
			Exception exception_2 = ex2;
			string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
			FileLogger logger4 = variables_0.Logger;
			string message = "Error: " + str2;
			logger4.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		return false;
	}

	private bool method_1(ref byte[] byte_0, ref Variables variables_0)
	{
		uint uint_ = 1094930505u;
		uint uint_2 = 1296323405u;
		FileLogger logger = variables_0.Logger;
		string message = "Loading OEM Key Dumper...";
		logger.LogMessage(ref message);
		checked
		{
			try
			{
				uint num = EnumSystemFirmwareTables(uint_, IntPtr.Zero, 0u);
				IntPtr intPtr = Marshal.AllocHGlobal((int)num);
				byte_0 = new byte[(int)(unchecked((long)num) - 1L) + 1];
				EnumSystemFirmwareTables(uint_, intPtr, num);
				Marshal.Copy(intPtr, byte_0, 0, byte_0.Length);
				Marshal.FreeHGlobal(intPtr);
				if (Encoding.ASCII.GetString(byte_0).Contains("MSDM"))
				{
					num = GetSystemFirmwareTable(uint_, uint_2, IntPtr.Zero, 0u);
					byte_0 = new byte[(int)(unchecked((long)num) - 1L) + 1];
					intPtr = Marshal.AllocHGlobal((int)num);
					GetSystemFirmwareTable(uint_, uint_2, intPtr, num);
					Marshal.Copy(intPtr, byte_0, 0, byte_0.Length);
					Marshal.FreeHGlobal(intPtr);
					return true;
				}
				FileLogger logger2 = variables_0.Logger;
				message = "None MSDM table found";
				logger2.LogMessage(ref message);
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger3 = variables_0.Logger;
				message = "Error: " + str;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			return false;
		}
	}
}
internal class Class9
{
	private ProcessStartInfo processStartInfo_0;

	private Process process_0;

	private ArrayList arrayList_0;

	private bool bool_0;

	public Class9(string[] string_0, ArrayList arrayList_1, bool bool_1 = false)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Expected O, but got Unknown
		processStartInfo_0 = new ProcessStartInfo();
		process_0 = new Process();
		arrayList_0 = new ArrayList();
		method_2(string_0, ref arrayList_1);
		process_0.set_StartInfo(processStartInfo_0);
		if (arrayList_1 != null)
		{
			arrayList_0 = arrayList_1;
		}
		else
		{
			arrayList_0.Add(string.Empty);
		}
		bool_0 = bool_1;
	}

	public bool method_0()
	{
		return bool_0;
	}

	public void method_1(bool bool_1)
	{
		bool_0 = bool_1;
	}

	private void method_2(string[] string_0, ref ArrayList arrayList_1)
	{
		StringBuilder stringBuilder = new StringBuilder();
		checked
		{
			if (string_0[1] != null)
			{
				ProcessStartInfo val = processStartInfo_0;
				val.set_WorkingDirectory(string_0[0]);
				val.set_FileName(val.get_WorkingDirectory() + "\\" + string_0[1]);
				val = null;
				int num = arrayList_1.Count - 1;
				for (int i = 0; i <= num; i++)
				{
					stringBuilder.Append(Conversions.ToString(arrayList_1[i]));
					stringBuilder.Append(" ");
				}
				ProcessStartInfo obj = processStartInfo_0;
				obj.set_Arguments(stringBuilder.ToString());
				obj.set_UseShellExecute(false);
				obj.set_RedirectStandardOutput(true);
				obj.set_WindowStyle((ProcessWindowStyle)1);
				obj.set_CreateNoWindow(true);
			}
		}
	}

	public Process method_3()
	{
		return process_0;
	}

	public object method_4(bool bool_1)
	{
		if (bool_1)
		{
			return arrayList_0;
		}
		return processStartInfo_0.get_Arguments();
	}

	public string method_5()
	{
		return processStartInfo_0.get_FileName();
	}

	public string method_6()
	{
		return processStartInfo_0.get_Arguments();
	}
}
internal class Class10
{
	internal static void smethod_0(ref string string_0, ref bool bool_0, ref Variables variables_0)
	{
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			if (bool_0)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows7 || variables_0.IsWindows8 || variables_0.IsWindowsVista)
					{
						string string_ = "KeyManagementServiceName";
						HostServer kmsHostLocal;
						object object_ = (kmsHostLocal = variables_0.KmsHostLocal).IpAddress;
						RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
						smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
						kmsHostLocal.IpAddress = Conversions.ToString(object_);
						string_ = "KeyManagementServicePort";
						object_ = (kmsHostLocal = variables_0.KmsHostLocal).Port;
						registryValueKind_ = (RegistryValueKind)1;
						smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
						kmsHostLocal.Port = Conversions.ToUInteger(object_);
					}
				}
				else
				{
					string string_ = "KeyManagementServiceName";
					HostServer kmsHostLocal;
					object object_ = (kmsHostLocal = variables_0.KmsHostForward).IpAddress;
					RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
					kmsHostLocal.IpAddress = Conversions.ToString(object_);
					string_ = "KeyManagementServicePort";
					object_ = (kmsHostLocal = variables_0.KmsHostForward).Port;
					registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
					kmsHostLocal.Port = Conversions.ToUInteger(object_);
				}
			}
			else
			{
				string string_ = "KeyManagementServiceName";
				object object_ = string.Empty;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
				string_ = "KeyManagementServicePort";
				object_ = string.Empty;
				registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string string_ = "Error: " + str;
			logger.LogMessage(ref string_);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_1(ref string string_0, ref bool bool_0, ref Variables variables_0)
	{
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			if (bool_0)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows7 || variables_0.IsWindows8 || variables_0.IsWindowsVista)
					{
						string string_ = "KeyManagementServiceName";
						HostServer kmsHostLocal;
						object object_ = (kmsHostLocal = variables_0.KmsHostLocal).IpAddress;
						RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
						smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
						kmsHostLocal.IpAddress = Conversions.ToString(object_);
						string_ = "KeyManagementServicePort";
						object_ = (kmsHostLocal = variables_0.KmsHostLocal).Port;
						registryValueKind_ = (RegistryValueKind)1;
						smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
						kmsHostLocal.Port = Conversions.ToUInteger(object_);
					}
				}
				else
				{
					string string_ = "KeyManagementServiceName";
					HostServer kmsHostLocal;
					object object_ = (kmsHostLocal = variables_0.KmsHostForward).IpAddress;
					RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
					kmsHostLocal.IpAddress = Conversions.ToString(object_);
					string_ = "KeyManagementServicePort";
					object_ = (kmsHostLocal = variables_0.KmsHostForward).Port;
					registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
					kmsHostLocal.Port = Conversions.ToUInteger(object_);
				}
			}
			else
			{
				string string_ = "KeyManagementServiceName";
				object object_ = string.Empty;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
				string_ = "KeyManagementServicePort";
				object_ = string.Empty;
				registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_0, ref string_, ref object_, ref registryValueKind_, ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string string_ = "Error: " + str;
			logger.LogMessage(ref string_);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_2(ref string string_0, ref string string_1, ref object object_0, ref RegistryValueKind registryValueKind_0, ref Variables variables_0)
	{
		try
		{
			if (!string.IsNullOrEmpty(string_0))
			{
				((ServerComputer)Class79.smethod_0()).get_Registry().SetValue(string_0, string_1, RuntimeHelpers.GetObjectValue(object_0), registryValueKind_0);
				string text = string_0.Replace("HKEY_LOCAL_MACHINE\\", string.Empty);
				text = text.Replace("SOFTWARE\\Microsoft\\", string.Empty);
				text = text.Replace("Windows NT\\CurrentVersion\\", string.Empty);
				FileLogger logger = variables_0.Logger;
				string message = "Set Registry : " + text + ":" + string_1;
				logger.LogMessage(ref message);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_3(ref string string_0, ref string string_1, ref Variables variables_0)
	{
		try
		{
			if (string.IsNullOrEmpty(string_0))
			{
				return;
			}
			string_0 = string_0.Replace("HKEY_LOCAL_MACHINE\\", string.Empty);
			if (((ServerComputer)Class79.smethod_0()).get_Registry().get_LocalMachine().OpenSubKey(string_0, false) != null)
			{
				if (string_1 != null)
				{
					((ServerComputer)Class79.smethod_0()).get_Registry().get_LocalMachine().OpenSubKey(string_0, true)
						.DeleteValue(string_1, false);
				}
				else
				{
					((ServerComputer)Class79.smethod_0()).get_Registry().get_LocalMachine().DeleteSubKeyTree(string_0, false);
				}
				FileLogger logger = variables_0.Logger;
				string message = "Del Registry : " + string_0 + ":" + string_1;
				logger.LogMessage(ref message);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
	}

	internal static object smethod_4(string string_0, ref string string_1, ref Variables variables_0)
	{
		object result = null;
		try
		{
			if (!string.IsNullOrEmpty(string_0))
			{
				if (string_0.StartsWith("HKEY_LOCAL_MACHINE"))
				{
					string_0 = string_0.Replace("HKEY_LOCAL_MACHINE\\", string.Empty);
				}
				if (string_1 != null)
				{
					if (((ServerComputer)Class79.smethod_0()).get_Registry().get_LocalMachine().OpenSubKey(string_0, false) != null)
					{
						result = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().get_LocalMachine().OpenSubKey(string_0, false)
							.GetValue(string_1, (object)null));
						FileLogger logger = variables_0.Logger;
						string message = "Get Registry : " + string_0 + ":" + string_1;
						logger.LogMessage(ref message);
						return result;
					}
					return result;
				}
				return result;
			}
			return result;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	internal static void smethod_5(ref string string_0, ref Variables variables_0)
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		object obj = null;
		string string_ = string_0;
		string string_2 = "Start";
		obj = RuntimeHelpers.GetObjectValue(smethod_4(string_, ref string_2, ref variables_0));
		try
		{
			if (obj == null)
			{
				return;
			}
			int result = 0;
			int.TryParse(Conversions.ToString(obj), out result);
			if (result != 2)
			{
				string_2 = "Start";
				object object_ = 2;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)4;
				smethod_2(ref string_0, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				string message = "The Software Protection Service was Fixed, reboot your PC now and try again.";
				variables_0.Logger.LogMessage(ref message);
				if (variables_0.IsGui)
				{
					variables_0.ShowMessage.Show(message, "Software Protection Service", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
				}
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string_2 = "Error: " + str;
			logger.LogMessage(ref string_2);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_6(ref bool bool_0, ref Variables variables_0)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		string string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform";
		try
		{
			if (bool_0)
			{
				string string_2 = "KeyManagementServiceName";
				HostServer kmsHostLocal;
				object object_ = (kmsHostLocal = variables_0.KmsHostLocal).IpAddress;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				kmsHostLocal.IpAddress = Conversions.ToString(object_);
				string_2 = "KeyManagementServicePort";
				object_ = (kmsHostLocal = variables_0.KmsHostLocal).Port;
				registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				kmsHostLocal.Port = Conversions.ToUInteger(object_);
			}
			else
			{
				string string_2 = "KeyManagementServiceName";
				object object_ = string.Empty;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				string_2 = "KeyManagementServicePort";
				object_ = string.Empty;
				registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string string_2 = "Error: " + str;
			logger.LogMessage(ref string_2);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_7(ref bool bool_0, ref Variables variables_0)
	{
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		string string_ = string.Empty;
		if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8 && !variables_0.IsWindows7)
		{
			if (variables_0.IsWindowsVista)
			{
				string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SL";
			}
		}
		else
		{
			if (bool_0)
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				bool bool_ = true;
				Class17.smethod_47(ref softwareLicensingService_, ref bool_, ref variables_0);
			}
			string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform";
		}
		try
		{
			if (bool_0)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (!variables_0.IsWindows7 && !variables_0.IsWindows8)
					{
						if (variables_0.IsWindowsVista)
						{
							string string_2 = "KeyManagementServiceName";
							HostServer kmsHostLocal;
							object object_ = (kmsHostLocal = variables_0.KmsHostLocal).IpAddress;
							RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
							smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
							kmsHostLocal.IpAddress = Conversions.ToString(object_);
							string_2 = "KeyManagementServicePort";
							object_ = (kmsHostLocal = variables_0.KmsHostLocal).Port;
							registryValueKind_ = (RegistryValueKind)1;
							smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
							kmsHostLocal.Port = Conversions.ToUInteger(object_);
						}
					}
					else
					{
						string string_2 = "KeyManagementServiceName";
						HostServer kmsHostLocal;
						object object_ = (kmsHostLocal = variables_0.KmsHostLocal).IpAddress;
						RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
						smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
						kmsHostLocal.IpAddress = Conversions.ToString(object_);
						string_2 = "KeyManagementServicePort";
						object_ = (kmsHostLocal = variables_0.KmsHostLocal).Port;
						registryValueKind_ = (RegistryValueKind)1;
						smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
						kmsHostLocal.Port = Conversions.ToUInteger(object_);
					}
				}
				else
				{
					string string_2 = "KeyManagementServiceName";
					HostServer kmsHostLocal;
					object object_ = (kmsHostLocal = variables_0.KmsHostForward).IpAddress;
					RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
					kmsHostLocal.IpAddress = Conversions.ToString(object_);
					string_2 = "KeyManagementServicePort";
					object_ = (kmsHostLocal = variables_0.KmsHostForward).Port;
					registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
					kmsHostLocal.Port = Conversions.ToUInteger(object_);
				}
			}
			else
			{
				string string_2 = "KeyManagementServiceName";
				object object_ = string.Empty;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				string_2 = "KeyManagementServicePort";
				object_ = string.Empty;
				registryValueKind_ = (RegistryValueKind)1;
				smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				if (variables_0.IsWindowsVista)
				{
					string_2 = "KeyManagementServiceName";
					object_ = string.Empty;
					registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
					string_2 = "KeyManagementServicePort";
					object_ = string.Empty;
					registryValueKind_ = (RegistryValueKind)1;
					smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				}
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string string_2 = "Error: " + str;
			logger.LogMessage(ref string_2);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_8(ref bool bool_0, ref Variables variables_0)
	{
		if (variables_0.IsWindows7 && bool_0)
		{
			Class17.smethod_48(Class17.smethod_50(ref variables_0), bool_0: true, ref variables_0);
		}
		if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
		{
			string string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\4f414197-0fc2-4c01-b68a-86cbb9ac254c";
			smethod_0(ref string_, ref bool_0, ref variables_0);
			string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\6bf301c1-b94a-43e9-ba31-d494598c47fb";
			smethod_0(ref string_, ref bool_0, ref variables_0);
			string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\b322da9c-a2e2-4058-9e4e-f59a6970bd69";
			smethod_0(ref string_, ref bool_0, ref variables_0);
			string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\d450596f-894d-49e0-966a-fd39ed4c4c64";
			smethod_0(ref string_, ref bool_0, ref variables_0);
			return;
		}
		if (bool_0)
		{
			SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
			bool bool_ = true;
			Class17.smethod_47(ref softwareLicensingService_, ref bool_, ref variables_0);
		}
		string string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\4f414197-0fc2-4c01-b68a-86cbb9ac254c";
		smethod_0(ref string_2, ref bool_0, ref variables_0);
		string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\6bf301c1-b94a-43e9-ba31-d494598c47fb";
		smethod_0(ref string_2, ref bool_0, ref variables_0);
		string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\b322da9c-a2e2-4058-9e4e-f59a6970bd69";
		smethod_0(ref string_2, ref bool_0, ref variables_0);
		string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\d450596f-894d-49e0-966a-fd39ed4c4c64";
		smethod_0(ref string_2, ref bool_0, ref variables_0);
	}

	internal static void smethod_9(ref bool bool_0, ref Variables variables_0)
	{
		if (variables_0.IsWindows7 && bool_0)
		{
			Class17.smethod_48(Class17.smethod_50(ref variables_0), bool_0: true, ref variables_0);
		}
		if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
		{
			string string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\4a5d124a-e620-44ba-b6ff-658961b33b9a";
			smethod_1(ref string_, ref bool_0, ref variables_0);
			string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\b322da9c-a2e2-4058-9e4e-f59a6970bd69";
			smethod_1(ref string_, ref bool_0, ref variables_0);
			string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OfficeSoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\e13ac10e-75d0-4aff-a0cd-764982cf541c";
			smethod_1(ref string_, ref bool_0, ref variables_0);
			return;
		}
		if (bool_0)
		{
			SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
			bool bool_ = true;
			Class17.smethod_47(ref softwareLicensingService_, ref bool_, ref variables_0);
		}
		string string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\4a5d124a-e620-44ba-b6ff-658961b33b9a";
		smethod_1(ref string_2, ref bool_0, ref variables_0);
		string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\b322da9c-a2e2-4058-9e4e-f59a6970bd69";
		smethod_1(ref string_2, ref bool_0, ref variables_0);
		string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\\0ff1ce15-a989-479d-af46-f275c6370663\\e13ac10e-75d0-4aff-a0cd-764982cf541c";
		smethod_1(ref string_2, ref bool_0, ref variables_0);
	}

	internal static void smethod_10(ref Variables variables_0)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		string string_ = "HKEY_CURRENT_USER\\Control Panel\\Desktop";
		string string_2 = "PaintDesktopVersion";
		object object_ = "0";
		RegistryValueKind registryValueKind_ = (RegistryValueKind)4;
		smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
	}

	internal static void smethod_11(ref Variables variables_0)
	{
		string text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
		variables_0.EditionID = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "EditionID", (object)null));
		variables_0.ProductName = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "ProductName", (object)null));
		variables_0.CurrentVersion = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "CurrentVersion", (object)null));
		variables_0.CurrentBuild = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "CurrentBuild", (object)null));
		string text2 = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "BuildLabEx", (object)null));
		string[] array = text2.Split(new char[1]
		{
			'.'
		});
		text2 = Enumerable.ElementAt<string>((IEnumerable<string>)array, 0) + "." + Enumerable.ElementAt<string>((IEnumerable<string>)array, 1);
		FileLogger logger = variables_0.Logger;
		string message = "Windows Detected: " + variables_0.ProductName + " : " + variables_0.EditionID + " : " + variables_0.CurrentVersion + " : " + text2;
		logger.LogMessage(ref message);
		Variables obj = variables_0;
		obj.IsServer = obj.ProductName.Contains("Windows Server");
		Variables obj2 = variables_0;
		obj2.IsPreview = obj2.ProductName.Contains("Preview");
		int num = 0;
		num = int.Parse(variables_0.CurrentBuild, NumberStyles.None);
		if (!variables_0.IsServer)
		{
			Variables obj3 = variables_0;
			obj3.IsWindows10 = obj3.CurrentVersion.StartsWith("6.4");
			if (num > 9800)
			{
				variables_0.IsWindows10 = true;
			}
			if (!variables_0.IsWindows10)
			{
				Variables obj4 = variables_0;
				obj4.IsWindows81 = obj4.CurrentVersion.StartsWith("6.3");
				if (!variables_0.IsWindows81)
				{
					Variables obj5 = variables_0;
					obj5.IsWindows8 = obj5.CurrentVersion.StartsWith("6.2");
					if (!variables_0.IsWindows8)
					{
						Variables obj6 = variables_0;
						obj6.IsWindows7 = obj6.CurrentVersion.StartsWith("6.1");
						if (!variables_0.IsWindows7)
						{
							Variables obj7 = variables_0;
							obj7.IsWindowsVista = obj7.CurrentVersion.StartsWith("6.0");
							if (!variables_0.IsWindowsVista)
							{
								Variables obj8 = variables_0;
								obj8.IsWindowsXP = obj8.CurrentVersion.StartsWith("5.");
								if (!variables_0.IsWindowsXP)
								{
									FileLogger logger2 = variables_0.Logger;
									message = "Unknow Windows Version";
									logger2.LogMessage(ref message);
								}
							}
						}
					}
				}
			}
		}
		else
		{
			Variables obj9 = variables_0;
			obj9.IsWindows10 = obj9.CurrentVersion.StartsWith("6.4");
			if (num > 10000)
			{
				variables_0.IsWindows10 = true;
			}
			if (!variables_0.IsWindows10)
			{
				Variables obj10 = variables_0;
				obj10.IsWindows81 = obj10.CurrentVersion.StartsWith("6.3");
				if (!variables_0.IsWindows81)
				{
					Variables obj11 = variables_0;
					obj11.IsWindows8 = obj11.CurrentVersion.StartsWith("6.2");
					if (!variables_0.IsWindows8)
					{
						Variables obj12 = variables_0;
						obj12.IsWindows7 = obj12.CurrentVersion.StartsWith("6.1");
						if (!variables_0.IsWindows7)
						{
							Variables obj13 = variables_0;
							obj13.IsWindowsVista = obj13.CurrentVersion.StartsWith("6.0");
							if (!variables_0.IsWindowsVista)
							{
								Variables obj14 = variables_0;
								obj14.IsWindowsXP = obj14.CurrentVersion.StartsWith("5.");
							}
						}
					}
				}
			}
		}
		HostServer hostServer_ = null;
		Class3.smethod_19(ref variables_0, ref hostServer_);
	}

	internal static ArrayList smethod_12(ref bool bool_0, ref bool bool_1, ref Variables variables_0)
	{
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Expected O, but got Unknown
		ArrayList arrayList = new ArrayList();
		object obj = null;
		string empty = string.Empty;
		if (bool_0)
		{
			string string_ = "DigitalProductId";
			obj = RuntimeHelpers.GetObjectValue(smethod_4("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", ref string_, ref variables_0));
			if (obj != null)
			{
				empty = Key.smethod_17((IList<byte>)obj);
				arrayList.Add("Microsoft Windows: " + empty);
			}
		}
		else
		{
			object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WindowsInstaller.Installer", ""));
			StringCollection val = new StringCollection();
			IEnumerator enumerator = default(IEnumerator);
			try
			{
				enumerator = ((IEnumerable)NewLateBinding.LateGet(objectValue, (Type)null, "Products", new object[0], (string[])null, (Type[])null, (bool[])null)).GetEnumerator();
				while (enumerator.MoveNext())
				{
					object objectValue2 = RuntimeHelpers.GetObjectValue(enumerator.Current);
					object[] array;
					bool[] array2;
					object obj2 = NewLateBinding.LateGet(objectValue, (Type)null, "ProductInfo", array = new object[2]
					{
						objectValue2,
						"ProductName"
					}, (string[])null, (Type[])null, array2 = new bool[2]
					{
						true,
						false
					});
					if (array2[0])
					{
						objectValue2 = RuntimeHelpers.GetObjectValue(array[0]);
					}
					string str = obj2.ToString();
					string text = objectValue2.ToString()!.Substring(10, 9);
					if (Operators.CompareString(Strings.UCase(Strings.Right(Conversions.ToString(objectValue2), 7)), "0FF1CE}", false) == 0)
					{
						if (Operators.CompareString(text, "0011-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0012-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0013-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0014-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0015-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0016-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0017-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0018-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0019-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "001A-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "001B-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "001C-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "002F-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "003A-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "003B-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0044-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0051-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0052-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0053-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0057-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00A1-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00A3-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00BA-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "110B-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "110D-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "110F-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "012B-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "007A-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "008B-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00AF-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0026-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0020-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "002E-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0030-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0031-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0033-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "0035-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00A7-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00A9-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00BA-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
						if (Operators.CompareString(text, "00CA-0000", false) == 0)
						{
							val.Add(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)(str + ","), objectValue2), (object)","), (object)objectValue2.ToString()!.Substring(3, 2))));
						}
					}
				}
			}
			finally
			{
				if (enumerator is IDisposable)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			string str2 = null;
			StringEnumerator enumerator2 = val.GetEnumerator();
			while (enumerator2.MoveNext())
			{
				string[] array3 = enumerator2.get_Current().Split(new char[1]
				{
					','
				});
				if (Operators.CompareString(array3[2], "12", false) == 0)
				{
					str2 = "\\Microsoft\\Office\\12.0\\Registration\\" + array3[1];
				}
				if (Operators.CompareString(array3[2], "14", false) == 0)
				{
					str2 = "\\Microsoft\\Office\\14.0\\Registration\\" + array3[1];
				}
				if (Operators.CompareString(array3[2], "15", false) == 0)
				{
					str2 = "\\Microsoft\\Office\\15.0\\Registration\\" + array3[1];
				}
				string string_2 = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node" + str2;
				string string_ = "DigitalProductId";
				obj = RuntimeHelpers.GetObjectValue(smethod_4(string_2, ref string_, ref variables_0));
				if (obj != null)
				{
					empty = Conversions.ToString(Class20.smethod_0(RuntimeHelpers.GetObjectValue(obj)));
					arrayList.Add(array3[0] + ": " + empty);
				}
				string string_3 = "HKEY_LOCAL_MACHINE\\SOFTWARE" + str2;
				string_ = "DigitalProductId";
				obj = RuntimeHelpers.GetObjectValue(smethod_4(string_3, ref string_, ref variables_0));
				if (obj != null)
				{
					empty = Conversions.ToString(Class20.smethod_0(RuntimeHelpers.GetObjectValue(obj)));
					arrayList.Add(array3[0] + ": " + empty);
				}
			}
		}
		if (arrayList.Count > 1)
		{
			smethod_13(arrayList);
		}
		return arrayList;
	}

	internal static ArrayList smethod_13(ArrayList arrayList_0)
	{
		ArrayList arrayList = new ArrayList();
		string text = string.Empty;
		IEnumerator enumerator = default(IEnumerator);
		try
		{
			enumerator = arrayList_0.GetEnumerator();
			IEnumerator enumerator2 = default(IEnumerator);
			while (enumerator.MoveNext())
			{
				string text2 = Conversions.ToString(enumerator.Current);
				bool flag = false;
				try
				{
					enumerator2 = arrayList.GetEnumerator();
					while (enumerator2.MoveNext())
					{
						string value = Conversions.ToString(enumerator2.Current);
						if (text2.Contains(value))
						{
							flag = true;
							break;
						}
					}
				}
				finally
				{
					if (enumerator2 is IDisposable)
					{
						(enumerator2 as IDisposable).Dispose();
					}
				}
				if (!text.Contains(text2) && !flag)
				{
					arrayList.Add(text2);
					text = text2;
				}
			}
			return arrayList;
		}
		finally
		{
			if (enumerator is IDisposable)
			{
				(enumerator as IDisposable).Dispose();
			}
		}
	}
}
internal class Class11
{
	internal static void smethod_0(ref Variables variables_0)
	{
		try
		{
			if (Environment.Is64BitOperatingSystem)
			{
				string string_ = "SECOH-QAD.x64.dll";
				string string_2 = variables_0.SystemRoot + "\\SECOH-QAD.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "SECOH-QAD.x64.exe";
				string_ = variables_0.SystemRoot + "\\SECOH-QAD.exe";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
			else
			{
				string string_ = "SECOH-QAD.x86.dll";
				string string_2 = variables_0.SystemRoot + "\\SECOH-QAD.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "SECOH-QAD.x86.exe";
				string_ = variables_0.SystemRoot + "\\SECOH-QAD.exe";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string string_ = "Error: " + str;
			logger.LogMessage(ref string_);
			ProjectData.ClearProjectError();
		}
		if (File.Exists(variables_0.SystemRoot + "\\SECOH-QAD.dll") && File.Exists(variables_0.SystemRoot + "\\SECOH-QAD.exe"))
		{
			return;
		}
		try
		{
			if (Environment.Is64BitOperatingSystem)
			{
				string string_ = "SECOH-QAD.x64.dll";
				string string_2 = Environment.GetEnvironmentVariable("TEMP") + "\\SECOH-QAD.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "SECOH-QAD.x64.exe";
				string_ = Environment.GetEnvironmentVariable("TEMP") + "\\SECOH-QAD.exe";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
			else
			{
				string string_ = "SECOH-QAD.x86.dll";
				string string_2 = Environment.GetEnvironmentVariable("TEMP") + "\\SECOH-QAD.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "SECOH-QAD.x86.exe";
				string_ = Environment.GetEnvironmentVariable("TEMP") + "\\SECOH-QAD.exe";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
		}
		catch (Exception ex2)
		{
			ProjectData.SetProjectError(ex2);
			Exception exception_2 = ex2;
			string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
			FileLogger logger2 = variables_0.Logger;
			string string_ = "Error: " + str2;
			logger2.LogMessage(ref string_);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_1(bool bool_0, ref Variables variables_0)
	{
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		string string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\SppExtComObj.exe";
		try
		{
			if (bool_0)
			{
				while (true)
				{
					HostServer kmsHostForward;
					string string_2 = (kmsHostForward = variables_0.KmsHostForward).IpAddress;
					bool num = WMINetWorkAdapter.smethod_12(ref string_2);
					kmsHostForward.IpAddress = string_2;
					if (!num)
					{
						break;
					}
					variables_0.KmsHostForward.IpAddress = WMINetWorkAdapter.smethod_13();
				}
				if (File.Exists(variables_0.SystemRoot + "\\SECOH-QAD.exe"))
				{
					string string_2 = "Debugger";
					object object_ = variables_0.SystemRoot + "\\SECOH-QAD.exe";
					RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
					Class10.smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				}
				else if (File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\SECOH-QAD.exe"))
				{
					string string_2 = "Debugger";
					object object_ = Environment.GetEnvironmentVariable("TEMP") + "\\SECOH-QAD.exe";
					RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
					Class10.smethod_2(ref string_, ref string_2, ref object_, ref registryValueKind_, ref variables_0);
				}
				variables_0.IsSecohQadLoaded = true;
			}
			else
			{
				FileLogger logger = variables_0.Logger;
				string string_2 = "Unloading SECOH-QAD...";
				logger.LogMessage(ref string_2);
				string_2 = null;
				Class10.smethod_3(ref string_, ref string_2, ref variables_0);
				variables_0.IsSecohQadLoaded = false;
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger2 = variables_0.Logger;
			string string_2 = "Error: " + str;
			logger2.LogMessage(ref string_2);
			ProjectData.ClearProjectError();
		}
	}
}
internal class Class12
{
	[CompilerGenerated]
	internal sealed class Class13
	{
		public CultureInfo cultureInfo_0;

		public Variables variables_0;

		internal void method_0()
		{
			string string_ = cultureInfo_0.Name;
			smethod_2(ref string_, ref variables_0);
		}

		internal void method_1()
		{
			string string_ = cultureInfo_0.Name;
			smethod_3(ref string_, ref variables_0);
		}
	}

	[CompilerGenerated]
	internal sealed class Class14
	{
		public CultureInfo cultureInfo_0;

		public Variables variables_0;

		internal void method_0()
		{
			string string_ = cultureInfo_0.Name;
			smethod_6(ref string_, ref variables_0);
		}

		internal void method_1()
		{
			string string_ = cultureInfo_0.Name;
			smethod_7(ref string_, ref variables_0);
		}
	}

	internal static void smethod_0(ref Variables variables_0)
	{
		CultureInfo cultureInfo_0 = Thread.CurrentThread.CurrentCulture;
		Variables variables_ = variables_0;
		new Thread((ThreadStart)delegate
		{
			string string_2 = cultureInfo_0.Name;
			smethod_2(ref string_2, ref variables_);
		}).Start();
		new Thread((ThreadStart)delegate
		{
			string string_ = cultureInfo_0.Name;
			smethod_3(ref string_, ref variables_);
		}).Start();
	}

	internal static void smethod_1(ref Variables variables_0)
	{
		CultureInfo cultureInfo_0 = Thread.CurrentThread.CurrentCulture;
		Variables variables_ = variables_0;
		new Thread((ThreadStart)delegate
		{
			string string_2 = cultureInfo_0.Name;
			smethod_6(ref string_2, ref variables_);
		}).Start();
		new Thread((ThreadStart)delegate
		{
			string string_ = cultureInfo_0.Name;
			smethod_7(ref string_, ref variables_);
		}).Start();
	}

	private static void smethod_2(ref string string_0, ref Variables variables_0)
	{
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Expected O, but got Unknown
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Expected O, but got Unknown
		FileNodo fileNodo_ = new FileNodo();
		string string_ = "basebrd.dll.mui";
		fileNodo_.RutaFile = Class2.smethod_0(ref variables_0, ref string_, Environment.GetEnvironmentVariable("windir") + "\\Branding\\Basebrd\\" + string_0);
		string string_2 = fileNodo_.RutaFile[0] + "\\" + fileNodo_.RutaFile[1];
		if (!File.Exists(string_2))
		{
			fileNodo_.RutaFile = Class2.smethod_0(ref variables_0, ref string_, Environment.GetEnvironmentVariable("windir") + "\\Branding\\Basebrd\\en-US");
			string_2 = fileNodo_.RutaFile[0] + "\\" + fileNodo_.RutaFile[1];
		}
		if (File.Exists(string_2))
		{
			string empty = string.Empty;
			StringResource val = new StringResource();
			try
			{
				((Resource)val).set_Name(new ResourceId((uint)StringResource.GetBlockId(12)));
				((Resource)val).LoadFrom(string_2);
				empty = val.get_Item((ushort)12);
				if (!empty.Contains(Convert.ToChar(0).ToString()) && empty.StartsWith("Windows"))
				{
					string string_3 = "SearchIndexer";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "SearchProtocolHost";
					Class3.smethod_4(ref string_3, ref variables_0);
					FileLogger logger = variables_0.Logger;
					string_3 = "Removing Watermark: " + empty;
					logger.LogMessage(ref string_3);
					int int_ = checked((empty.Length - 1) * 2);
					fileNodo_.Hex = smethod_5(ref int_);
					PatchFile.smethod_3(string_2, ref variables_0);
					FileNodo fileNodo = fileNodo_;
					bool bool_ = false;
					fileNodo.Offset = PatchFile.smethod_5(ref empty, ref string_2, ref variables_0, ref bool_);
					if (fileNodo_.Offset > -1)
					{
						bool_ = false;
						PatchFile.smethod_0(ref fileNodo_, ref bool_, ref variables_0);
					}
					else
					{
						FileLogger logger2 = variables_0.Logger;
						string_3 = "Offset Not Found: " + string_2 + " : " + empty;
						logger2.LogMessage(ref string_3);
					}
					FileNodo fileNodo2 = fileNodo_;
					bool_ = false;
					fileNodo2.Offset = PatchFile.smethod_5(ref empty, ref string_2, ref variables_0, ref bool_);
					if (fileNodo_.Offset > -1)
					{
						bool_ = false;
						PatchFile.smethod_0(ref fileNodo_, ref bool_, ref variables_0);
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger3 = variables_0.Logger;
				string string_3 = "Error: " + str;
				logger3.LogMessage(ref string_3);
				ProjectData.ClearProjectError();
			}
		}
		variables_0.WaterMarkBasebrd = true;
		Class3.smethod_6(ref variables_0);
	}

	private static void smethod_3(ref string string_0, ref Variables variables_0)
	{
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Expected O, but got Unknown
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Expected O, but got Unknown
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Expected O, but got Unknown
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		variables_0.WaterMarkShell32 = false;
		FileNodo fileNodo_ = new FileNodo();
		string string_ = "shell32.dll.mui";
		fileNodo_.RutaFile = Class2.smethod_0(ref variables_0, ref string_, Environment.GetEnvironmentVariable("windir") + "\\System32\\" + string_0);
		string string_2 = fileNodo_.RutaFile[0] + "\\" + fileNodo_.RutaFile[1];
		if (!File.Exists(string_2))
		{
			fileNodo_.RutaFile = Class2.smethod_0(ref variables_0, ref string_, Environment.GetEnvironmentVariable("windir") + "\\System32\\en-US");
			string_2 = fileNodo_.RutaFile[0] + "\\" + fileNodo_.RutaFile[1];
		}
		bool flag = false;
		if (File.Exists(string_2))
		{
			string empty = string.Empty;
			StringResource val = new StringResource();
			try
			{
				((Resource)val).set_Name(new ResourceId((uint)StringResource.GetBlockId(33108)));
				((Resource)val).LoadFrom(string_2);
				empty = val.get_Item((ushort)33108);
				if (!empty.Contains(Convert.ToChar(0).ToString()) && empty.Contains("ws"))
				{
					string string_3 = "SearchProtocolHost";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "explorer";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "SearchIndexer";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "SearchProtocolHost";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "explorer";
					Class3.smethod_4(ref string_3, ref variables_0);
					FileLogger logger = variables_0.Logger;
					string_3 = "Removing Watermark: " + empty;
					logger.LogMessage(ref string_3);
					int int_ = checked((empty.Length - 1) * 2);
					fileNodo_.Hex = smethod_5(ref int_);
					PatchFile.smethod_3(string_2, ref variables_0);
					FileNodo fileNodo = fileNodo_;
					bool bool_ = false;
					fileNodo.Offset = PatchFile.smethod_5(ref empty, ref string_2, ref variables_0, ref bool_);
					if (fileNodo_.Offset > -1)
					{
						bool_ = false;
						if (PatchFile.smethod_0(ref fileNodo_, ref bool_, ref variables_0))
						{
							flag = true;
						}
					}
					else
					{
						FileLogger logger2 = variables_0.Logger;
						string_3 = "Offset Not Found: " + string_2 + " : " + empty;
						logger2.LogMessage(ref string_3);
					}
					((Resource)val).set_Name(new ResourceId((uint)StringResource.GetBlockId(33109)));
					empty = val.get_Item((ushort)33109);
					string_3 = "SearchProtocolHost";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "explorer";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "SearchIndexer";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "SearchProtocolHost";
					Class3.smethod_4(ref string_3, ref variables_0);
					string_3 = "explorer";
					Class3.smethod_4(ref string_3, ref variables_0);
					FileLogger logger3 = variables_0.Logger;
					string_3 = "Removing Watermark: " + empty;
					logger3.LogMessage(ref string_3);
					int_ = checked((empty.Length - 1) * 2);
					fileNodo_.Hex = smethod_5(ref int_);
					FileNodo fileNodo2 = fileNodo_;
					bool_ = false;
					fileNodo2.Offset = PatchFile.smethod_5(ref empty, ref string_2, ref variables_0, ref bool_);
					if (fileNodo_.Offset > -1)
					{
						bool_ = false;
						if (PatchFile.smethod_0(ref fileNodo_, ref bool_, ref variables_0))
						{
							flag = true;
						}
					}
					else
					{
						FileLogger logger4 = variables_0.Logger;
						string_3 = "Offset Not Found: " + string_2 + " : " + empty;
						logger4.LogMessage(ref string_3);
					}
				}
				if (flag)
				{
					FileLogger logger5 = variables_0.Logger;
					string string_3 = "WaterMark had been removed, restart later to update desktop watermark";
					logger5.LogMessage(ref string_3);
					ArrayList arrayList_ = new ArrayList();
					string_3 = "mcbuilder.exe";
					string[] string_4 = Class2.smethod_0(ref variables_0, ref string_3);
					bool bool_ = true;
					Class3.smethod_1(ref string_4, ref arrayList_, ref variables_0, ref bool_);
					if (variables_0.IsGui)
					{
						variables_0.ShowMessage.Show("WaterMark had been removed, restart later to update desktop watermark", "Removed WaterMark", IFrmShowMessage.enumMessageIcon.Information, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
					}
					string_3 = "explorer.exe";
					string_4 = Class2.smethod_0(ref variables_0, ref string_3, Environment.GetEnvironmentVariable("windir"));
					bool_ = false;
					Class3.smethod_1(ref string_4, ref arrayList_, ref variables_0, ref bool_);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger6 = variables_0.Logger;
				string string_3 = "Error: " + str;
				logger6.LogMessage(ref string_3);
				ProjectData.ClearProjectError();
			}
		}
		variables_0.WaterMarkShell32 = true;
		Class3.smethod_6(ref variables_0);
	}

	public static ushort smethod_4(int int_0)
	{
		return checked((ushort)Math.Round((double)int_0 / 16.0 + 1.0));
	}

	public static string smethod_5(ref int int_0)
	{
		StringBuilder stringBuilder = new StringBuilder();
		int num = int_0;
		for (int i = 0; i <= num; i = checked(i + 1))
		{
			stringBuilder.Append("00");
			if (i < int_0)
			{
				stringBuilder.Append("-");
			}
		}
		return stringBuilder.ToString();
	}

	private static void smethod_6(ref string string_0, ref Variables variables_0)
	{
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Expected O, but got Unknown
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Expected O, but got Unknown
		FileNodo fileNodo = new FileNodo();
		string string_ = "basebrd.dll.old.mui";
		fileNodo.RutaFile = Class2.smethod_0(ref variables_0, ref string_, Environment.GetEnvironmentVariable("windir") + "\\Branding\\Basebrd\\" + string_0);
		string text = fileNodo.RutaFile[0] + "\\" + fileNodo.RutaFile[1];
		string string_2 = fileNodo.RutaFile[0] + "\\basebrd.dll.mui";
		string text2 = fileNodo.RutaFile[0] + "\\basebrd.dll.old2.mui";
		if (File.Exists(text))
		{
			StringResource val = new StringResource();
			try
			{
				if (File.Exists(string_2))
				{
					((Resource)val).set_Name(new ResourceId((uint)StringResource.GetBlockId(12)));
					((Resource)val).LoadFrom(string_2);
					if (val.get_Item((ushort)12).Contains(Convert.ToChar(0).ToString()))
					{
						string string_3 = "SearchIndexer";
						Class3.smethod_4(ref string_3, ref variables_0);
						string_3 = "SearchProtocolHost";
						Class3.smethod_4(ref string_3, ref variables_0);
						FileLogger logger = variables_0.Logger;
						string_3 = "Restoring Watermark: " + string_2;
						logger.LogMessage(ref string_3);
						try
						{
							TakeOwner.smethod_1(ref string_2, ref variables_0);
							if (File.Exists(text2))
							{
								File.Delete(text2);
							}
							File.Move(string_2, text2);
							File.Copy(text, string_2);
							File.Delete(text);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception exception_ = ex;
							string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
							FileLogger logger2 = variables_0.Logger;
							string_3 = "Error: " + str;
							logger2.LogMessage(ref string_3);
							ProjectData.ClearProjectError();
						}
					}
				}
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger3 = variables_0.Logger;
				string string_3 = "Error: " + str2;
				logger3.LogMessage(ref string_3);
				ProjectData.ClearProjectError();
			}
		}
		variables_0.WaterMarkBasebrd = true;
		Class3.smethod_6(ref variables_0);
	}

	private static void smethod_7(ref string string_0, ref Variables variables_0)
	{
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Expected O, but got Unknown
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Expected O, but got Unknown
		variables_0.WaterMarkShell32 = false;
		FileNodo fileNodo = new FileNodo();
		string string_ = "shell32.dll.old.mui";
		fileNodo.RutaFile = Class2.smethod_0(ref variables_0, ref string_, Environment.GetEnvironmentVariable("windir") + "\\System32\\" + string_0);
		string text = fileNodo.RutaFile[0] + "\\" + fileNodo.RutaFile[1];
		string string_2 = fileNodo.RutaFile[0] + "\\shell32.dll.mui";
		string text2 = fileNodo.RutaFile[0] + "\\shell32.dll.old2.mui";
		if (File.Exists(text))
		{
			StringResource val = new StringResource();
			try
			{
				if (File.Exists(string_2))
				{
					((Resource)val).set_Name(new ResourceId((uint)StringResource.GetBlockId(33108)));
					((Resource)val).LoadFrom(string_2);
					if (val.get_Item((ushort)33108).Contains(Convert.ToChar(0).ToString()))
					{
						string string_3 = "explorer";
						Class3.smethod_4(ref string_3, ref variables_0);
						string_3 = "SearchIndexer";
						Class3.smethod_4(ref string_3, ref variables_0);
						string_3 = "SearchProtocolHost";
						Class3.smethod_4(ref string_3, ref variables_0);
						FileLogger logger = variables_0.Logger;
						string_3 = "Restoring Watermark: " + string_2;
						logger.LogMessage(ref string_3);
						try
						{
							TakeOwner.smethod_1(ref string_2, ref variables_0);
							if (File.Exists(text2))
							{
								File.Delete(text2);
							}
							File.Move(string_2, text2);
							File.Copy(text, string_2);
							File.Delete(text);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception exception_ = ex;
							string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
							FileLogger logger2 = variables_0.Logger;
							string_3 = "Error: " + str;
							logger2.LogMessage(ref string_3);
							ProjectData.ClearProjectError();
						}
						FileLogger logger3 = variables_0.Logger;
						string_3 = "WaterMark had been restored, restart later to update desktop watermark";
						logger3.LogMessage(ref string_3);
						ArrayList arrayList_ = new ArrayList();
						string_3 = "explorer.exe";
						string[] string_4 = Class2.smethod_0(ref variables_0, ref string_3, Environment.GetEnvironmentVariable("windir"));
						bool bool_ = false;
						Class3.smethod_1(ref string_4, ref arrayList_, ref variables_0, ref bool_);
					}
				}
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger4 = variables_0.Logger;
				string string_3 = "Error: " + str2;
				logger4.LogMessage(ref string_3);
				ProjectData.ClearProjectError();
			}
		}
		variables_0.WaterMarkShell32 = true;
		Class3.smethod_6(ref variables_0);
	}
}
internal class Class15
{
	[CompilerGenerated]
	internal sealed class Class16
	{
		public Variables variables_0;

		internal void method_0()
		{
			smethod_0(ref variables_0);
		}
	}

	internal static void smethod_0(ref Variables variables_0)
	{
		while (true)
		{
			HostServer kmsHostForward;
			string string_ = (kmsHostForward = variables_0.KmsHostForward).IpAddress;
			bool num = WMINetWorkAdapter.smethod_12(ref string_);
			kmsHostForward.IpAddress = string_;
			if (!num)
			{
				break;
			}
			variables_0.KmsHostForward.IpAddress = WMINetWorkAdapter.smethod_13();
		}
		Thread.Sleep(Class2.smethod_2(50, 600));
		if (!variables_0.InternetConnection)
		{
			Thread.Sleep(Class2.smethod_2(50, 600));
			if (!variables_0.InternetConnection)
			{
				bool bool_ = true;
				HostServer kmsHostForward;
				string string_ = (kmsHostForward = variables_0.KmsHostForward).IpAddress;
				smethod_3(ref bool_, ref string_, ref variables_0);
				kmsHostForward.IpAddress = string_;
			}
		}
		variables_0.IsWinDivertLoaded = true;
		new FakeClient().Run(ref variables_0);
	}

	internal static void smethod_1(ref Variables variables_0)
	{
		if (variables_0.IsWinDivertLoaded)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Unloading WinDivert...";
			logger.LogMessage(ref message);
			bool bool_ = false;
			HostServer kmsHostForward;
			message = (kmsHostForward = variables_0.KmsHostForward).IpAddress;
			smethod_3(ref bool_, ref message, ref variables_0);
			kmsHostForward.IpAddress = message;
			message = "WinDivert1.1";
			bool_ = false;
			bool bool_2 = false;
			Class2.smethod_1(ref message, ref bool_, ref variables_0, ref bool_2);
			message = "WinDivert1.1";
			Class3.smethod_26(ref variables_0, ref message);
			variables_0.IsWinDivertLoaded = false;
		}
	}

	internal static void smethod_2(ref Variables variables_0)
	{
		try
		{
			if (Environment.Is64BitOperatingSystem)
			{
				string string_ = "WinDivert.x64.dll";
				string string_2 = variables_0.DirectorioActual + "\\WinDivert.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "WinDivert.x64.sys";
				string_ = variables_0.DirectorioActual + "\\WinDivert.sys";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
			else
			{
				string string_ = "WinDivert.x86.dll";
				string string_2 = variables_0.DirectorioActual + "\\WinDivert.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "WinDivert.x86.sys";
				string_ = variables_0.DirectorioActual + "\\WinDivert.sys";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string string_ = "Error: " + str;
			logger.LogMessage(ref string_);
			ProjectData.ClearProjectError();
		}
		if (File.Exists(variables_0.DirectorioActual + "\\WinDivert.dll") && File.Exists(variables_0.DirectorioActual + "\\WinDivert.sys"))
		{
			return;
		}
		try
		{
			if (Environment.Is64BitOperatingSystem)
			{
				string string_ = "WinDivert.x64.dll";
				string string_2 = Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "WinDivert.x64.sys";
				string_ = Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.sys";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
			else
			{
				string string_ = "WinDivert.x86.dll";
				string string_2 = Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.dll";
				EmbeddedAssembly.smethod_0(ref string_, ref string_2, ref variables_0);
				string_2 = "WinDivert.x86.sys";
				string_ = Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.sys";
				EmbeddedAssembly.smethod_0(ref string_2, ref string_, ref variables_0);
			}
		}
		catch (Exception ex2)
		{
			ProjectData.SetProjectError(ex2);
			Exception exception_2 = ex2;
			string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
			FileLogger logger2 = variables_0.Logger;
			string string_ = "Error: " + str2;
			logger2.LogMessage(ref string_);
			ProjectData.ClearProjectError();
		}
	}

	internal static void smethod_3(ref bool bool_0, ref string string_0, ref Variables variables_0)
	{
		ArrayList arrayList_ = new ArrayList();
		if (bool_0)
		{
			arrayList_.Add("add");
		}
		else
		{
			arrayList_.Add("delete");
		}
		arrayList_.Add("-4");
		arrayList_.Add(string_0);
		arrayList_.Add("0.0.0.0");
		arrayList_.Add("IF 1");
		string string_ = "route.exe";
		string[] string_2 = Class2.smethod_0(ref variables_0, ref string_);
		bool bool_ = true;
		Class3.smethod_1(ref string_2, ref arrayList_, ref variables_0, ref bool_);
	}

	internal static void smethod_4(ref string string_0, ref string string_1, ref string string_2, ref Variables variables_0)
	{
		ArrayList arrayList_ = new ArrayList();
		arrayList_.Add("create \"" + string_0 + "\"");
		arrayList_.Add("type= kernel");
		arrayList_.Add("DisplayName= \"" + string_1 + "\"");
		arrayList_.Add("binPath= \"" + string_2 + "\"");
		string string_3 = "sc.exe";
		string[] string_4 = Class2.smethod_0(ref variables_0, ref string_3);
		bool bool_ = true;
		Class3.smethod_1(ref string_4, ref arrayList_, ref variables_0, ref bool_);
	}

	internal static void smethod_5(ref Variables variables_0)
	{
		if (variables_0.IsSecohQadLoaded)
		{
			variables_0.IsSecohQad.Value = false;
			Class11.smethod_1(bool_0: false, ref variables_0);
		}
		Variables variables_ = variables_0;
		variables_0.IsWinDivert.Value = true;
		smethod_2(ref variables_0);
		bool flag = false;
		if (File.Exists(variables_0.DirectorioActual + "\\WinDivert.dll") && File.Exists(variables_0.DirectorioActual + "\\WinDivert.sys"))
		{
			string string_ = "WinDivert1.1";
			string string_2 = "WinDivert1.1";
			string string_3 = variables_0.DirectorioActual + "\\WinDivert.sys";
			smethod_4(ref string_, ref string_2, ref string_3, ref variables_0);
			flag = true;
		}
		else if (File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.dll") && File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.sys"))
		{
			string string_3 = "WinDivert1.1";
			string string_2 = "WinDivert1.1";
			string string_ = Environment.GetEnvironmentVariable("TEMP") + "\\WinDivert.sys";
			smethod_4(ref string_3, ref string_2, ref string_, ref variables_0);
			flag = true;
		}
		if (flag)
		{
			new Thread((ThreadStart)delegate
			{
				smethod_0(ref variables_);
			}).Start();
		}
	}
}
internal class Class17
{
	[CompilerGenerated]
	internal sealed class Class18
	{
		public Variables variables_0;

		internal void method_0()
		{
			ref Variables reference = ref variables_0;
			bool bool_ = true;
			Class3.smethod_21(ref reference, ref bool_);
		}
	}

	[CompilerGenerated]
	internal sealed class Class19
	{
		public Variables variables_0;

		internal void method_0()
		{
			ref Variables reference = ref variables_0;
			bool bool_ = true;
			Class3.smethod_21(ref reference, ref bool_);
		}
	}

	private const string string_0 = "SoftwareLicensingProduct";

	private const string string_1 = "SoftwareLicensingService";

	private const string string_2 = "OfficeSoftwareProtectionProduct";

	private const string string_3 = "OfficeSoftwareProtectionService";

	private const string string_4 = "Activating %PRODUCTNAME% (%PRODUCTID%)";

	private const string string_5 = "Genuine Status: ";

	private static ManagementObjectCollection smethod_0(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, VLActivationTypeEnabled, KeyManagementServiceMachine, KeyManagementServicePort, OfflineInstallationId", "SoftwareLicensingProduct", ref variables_0);
	}

	private static SoftwareLicensingProduct smethod_1(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		return smethod_15("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, VLActivationTypeEnabled, KeyManagementServiceMachine, KeyManagementServicePort, OfflineInstallationId", "SoftwareLicensingProduct", ref softwareLicensingProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_2(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, VLActivationTypeEnabled, KeyManagementServiceMachine, KeyManagementServicePort, ProductKeyChannel, OfflineInstallationId", "SoftwareLicensingProduct", ref variables_0);
	}

	private static SoftwareLicensingProduct smethod_3(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		return smethod_15("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, VLActivationTypeEnabled, KeyManagementServiceMachine, KeyManagementServicePort, ProductKeyChannel, OfflineInstallationId", "SoftwareLicensingProduct", ref softwareLicensingProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_4(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, VLActivationTypeEnabled, KeyManagementServiceMachine, KeyManagementServicePort, ProductKeyChannel, OfflineInstallationId", "SoftwareLicensingProduct", ref variables_0);
	}

	private static SoftwareLicensingProduct smethod_5(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		return smethod_15("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, VLActivationTypeEnabled, KeyManagementServiceMachine, KeyManagementServicePort, ProductKeyChannel, OfflineInstallationId", "SoftwareLicensingProduct", ref softwareLicensingProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_6(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, KeyManagementServiceMachine, KeyManagementServicePort", "OfficeSoftwareProtectionProduct", ref variables_0);
	}

	private static OfficeSoftwareProtectionProduct smethod_7(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
	{
		return smethod_16("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, GenuineStatus, KeyManagementServiceMachine, KeyManagementServicePort", "OfficeSoftwareProtectionProduct", ref officeSoftwareProtectionProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_8(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, Description, Name,LicenseStatus, LicenseStatusReason, ProductKeyID, GracePeriodRemaining, KeyManagementServiceMachine, KeyManagementServicePort", "OfficeSoftwareProtectionProduct", ref variables_0);
	}

	private static OfficeSoftwareProtectionProduct smethod_9(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
	{
		return smethod_16("ID, ApplicationId, PartialProductKey, Description, Name,LicenseStatus, LicenseStatusReason, ProductKeyID, GracePeriodRemaining, KeyManagementServiceMachine, KeyManagementServicePort", "OfficeSoftwareProtectionProduct", ref officeSoftwareProtectionProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_10(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, KeyManagementServiceMachine, KeyManagementServicePort", "SoftwareLicensingProduct", ref variables_0);
	}

	private static SoftwareLicensingProduct smethod_11(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		return smethod_15("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate, KeyManagementServiceMachine, KeyManagementServicePort", "SoftwareLicensingProduct", ref softwareLicensingProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_12(ref Variables variables_0)
	{
		return smethod_14("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate", "SoftwareLicensingProduct", ref variables_0);
	}

	private static SoftwareLicensingProduct smethod_13(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		return smethod_15("ID, ApplicationId, PartialProductKey, LicenseIsAddon, Description, Name, ProductKeyID, GracePeriodRemaining, LicenseStatus, LicenseStatusReason, EvaluationEndDate", "SoftwareLicensingProduct", ref softwareLicensingProduct_0, ref variables_0);
	}

	private static ManagementObjectCollection smethod_14(string string_6, string string_7, ref Variables variables_0, bool bool_0 = false)
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Expected O, but got Unknown
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Expected O, but got Unknown
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		ManagementObjectCollection val = null;
		try
		{
			ObjectQuery val2 = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7 + " WHERE PartialProductKey IS NOT NULL");
			if (bool_0)
			{
				val2 = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7);
			}
			val = new ManagementObjectSearcher(variables_0.GObjWmiService, val2).Get();
			try
			{
				if (val.get_Count() > 0)
				{
					return val;
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: Tokens/WMI may be corrupted or Protection Service is Disable, restart and try again or try Tweaking.com - Windows Repair";
				logger2.LogMessage(ref message);
				ManagementObjectCollection result = null;
				ProjectData.ClearProjectError();
				return result;
			}
		}
		catch (Exception ex2)
		{
			ProjectData.SetProjectError(ex2);
			Exception exception_2 = ex2;
			string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
			FileLogger logger3 = variables_0.Logger;
			string message = "Error: " + str2;
			logger3.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		return val;
	}

	private static SoftwareLicensingProduct smethod_15(string string_6, string string_7, ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0, bool bool_0 = false)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Expected O, but got Unknown
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Expected O, but got Unknown
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Expected O, but got Unknown
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Expected O, but got Unknown
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Expected O, but got Unknown
		SoftwareLicensingProduct result = null;
		try
		{
			ObjectQuery val = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7 + " WHERE PartialProductKey = '" + softwareLicensingProduct_0.PartialProductKey + "'");
			if (bool_0)
			{
				val = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7);
			}
			ManagementObject val2 = (ManagementObject)Enumerable.ElementAtOrDefault<object>(Enumerable.Cast<object>((IEnumerable)new ManagementObjectSearcher(variables_0.GObjWmiService, val).Get()), 0);
			if (val2 == null && !bool_0)
			{
				val = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7 + " WHERE Name = '" + softwareLicensingProduct_0.Name + "' AND ApplicationID = '" + softwareLicensingProduct_0.ApplicationID + "' AND OfflineInstallationId IS NOT NULL");
				val2 = (ManagementObject)Enumerable.ElementAtOrDefault<object>(Enumerable.Cast<object>((IEnumerable)new ManagementObjectSearcher(variables_0.GObjWmiService, val).Get()), 0);
			}
			result = new SoftwareLicensingProduct(val2);
			return result;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	private static OfficeSoftwareProtectionProduct smethod_16(string string_6, string string_7, ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0, bool bool_0 = false)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Expected O, but got Unknown
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Expected O, but got Unknown
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Expected O, but got Unknown
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Expected O, but got Unknown
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Expected O, but got Unknown
		OfficeSoftwareProtectionProduct result = null;
		try
		{
			ObjectQuery val = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7 + " WHERE PartialProductKey = '" + officeSoftwareProtectionProduct_0.PartialProductKey + "'");
			if (bool_0)
			{
				val = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7);
			}
			ManagementObject val2 = (ManagementObject)Enumerable.ElementAtOrDefault<object>(Enumerable.Cast<object>((IEnumerable)new ManagementObjectSearcher(variables_0.GObjWmiService, val).Get()), 0);
			if (val2 == null && !bool_0)
			{
				val = new ObjectQuery("SELECT " + string_6 + " FROM " + string_7 + " WHERE Name = '" + officeSoftwareProtectionProduct_0.Name + "' AND ApplicationID = '" + officeSoftwareProtectionProduct_0.ApplicationID + "' AND OfflineInstallationId IS NOT NULL");
				val2 = (ManagementObject)Enumerable.ElementAtOrDefault<object>(Enumerable.Cast<object>((IEnumerable)new ManagementObjectSearcher(variables_0.GObjWmiService, val).Get()), 0);
			}
			result = new OfficeSoftwareProtectionProduct(val2);
			return result;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	public static List<SoftwareLicensingProduct> smethod_17(ref Variables variables_0)
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Expected O, but got Unknown
		List<SoftwareLicensingProduct> list = new List<SoftwareLicensingProduct>();
		try
		{
			ManagementObjectCollection val = null;
			if (variables_0.IsWindows10)
			{
				val = smethod_2(ref variables_0);
			}
			else if (variables_0.IsWindows81)
			{
				val = smethod_4(ref variables_0);
			}
			else if (variables_0.IsWindows8)
			{
				val = smethod_0(ref variables_0);
			}
			else if (variables_0.IsWindows7)
			{
				val = smethod_10(ref variables_0);
			}
			else if (variables_0.IsWindowsVista)
			{
				val = smethod_12(ref variables_0);
			}
			if (val != null)
			{
				if (val.get_Count() > 0)
				{
					list = new List<SoftwareLicensingProduct>();
					ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
					try
					{
						enumerator = val.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ManagementObject theObject = (ManagementObject)enumerator.get_Current();
							list.Add(new SoftwareLicensingProduct(theObject));
						}
						return list;
					}
					finally
					{
						((IDisposable)enumerator)?.Dispose();
					}
				}
				return list;
			}
			return list;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return list;
		}
	}

	internal static SoftwareLicensingProduct smethod_18(SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		try
		{
			if (variables_0.IsWindows10)
			{
				softwareLicensingProduct_0 = smethod_3(ref softwareLicensingProduct_0, ref variables_0);
				return softwareLicensingProduct_0;
			}
			if (variables_0.IsWindows81)
			{
				softwareLicensingProduct_0 = smethod_5(ref softwareLicensingProduct_0, ref variables_0);
				return softwareLicensingProduct_0;
			}
			if (variables_0.IsWindows8)
			{
				softwareLicensingProduct_0 = smethod_1(ref softwareLicensingProduct_0, ref variables_0);
				return softwareLicensingProduct_0;
			}
			if (variables_0.IsWindows7)
			{
				softwareLicensingProduct_0 = smethod_11(ref softwareLicensingProduct_0, ref variables_0);
				return softwareLicensingProduct_0;
			}
			if (variables_0.IsWindowsVista)
			{
				softwareLicensingProduct_0 = smethod_13(ref softwareLicensingProduct_0, ref variables_0);
				return softwareLicensingProduct_0;
			}
			return softwareLicensingProduct_0;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return softwareLicensingProduct_0;
		}
	}

	internal static List<OfficeSoftwareProtectionProduct> smethod_19(ref Variables variables_0, ref bool bool_0)
	{
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Expected O, but got Unknown
		List<OfficeSoftwareProtectionProduct> list = new List<OfficeSoftwareProtectionProduct>();
		try
		{
			ManagementObjectCollection val = null;
			val = (bool_0 ? smethod_8(ref variables_0) : smethod_6(ref variables_0));
			if (val != null)
			{
				if (val.get_Count() > 0)
				{
					list = new List<OfficeSoftwareProtectionProduct>();
					ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
					try
					{
						enumerator = val.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ManagementObject theObject = (ManagementObject)enumerator.get_Current();
							list.Add(new OfficeSoftwareProtectionProduct(theObject));
						}
						return list;
					}
					finally
					{
						((IDisposable)enumerator)?.Dispose();
					}
				}
				return list;
			}
			return list;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return list;
		}
	}

	internal static OfficeSoftwareProtectionProduct smethod_20(OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, Variables variables_0, ref bool bool_0)
	{
		try
		{
			if (!bool_0)
			{
				officeSoftwareProtectionProduct_0 = smethod_7(ref officeSoftwareProtectionProduct_0, ref variables_0);
				return officeSoftwareProtectionProduct_0;
			}
			officeSoftwareProtectionProduct_0 = smethod_9(ref officeSoftwareProtectionProduct_0, ref variables_0);
			return officeSoftwareProtectionProduct_0;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return officeSoftwareProtectionProduct_0;
		}
	}

	internal static List<SoftwareLicensingService> smethod_21(ref Variables variables_0)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Expected O, but got Unknown
		List<SoftwareLicensingService> list = new List<SoftwareLicensingService>();
		try
		{
			ManagementObjectCollection val = smethod_23(ref variables_0);
			if (val != null)
			{
				if (val.get_Count() > 0)
				{
					list = new List<SoftwareLicensingService>();
					ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
					try
					{
						enumerator = val.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ManagementObject theObject = (ManagementObject)enumerator.get_Current();
							list.Add(new SoftwareLicensingService(theObject));
						}
						return list;
					}
					finally
					{
						((IDisposable)enumerator)?.Dispose();
					}
				}
				return list;
			}
			return list;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return list;
		}
	}

	internal static List<OfficeSoftwareProtectionService> smethod_22(ref Variables variables_0)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Expected O, but got Unknown
		List<OfficeSoftwareProtectionService> list = new List<OfficeSoftwareProtectionService>();
		try
		{
			ManagementObjectCollection val = smethod_24(ref variables_0);
			if (val != null)
			{
				if (val.get_Count() > 0)
				{
					list = new List<OfficeSoftwareProtectionService>();
					ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
					try
					{
						enumerator = val.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ManagementObject theObject = (ManagementObject)enumerator.get_Current();
							list.Add(new OfficeSoftwareProtectionService(theObject));
						}
						return list;
					}
					finally
					{
						((IDisposable)enumerator)?.Dispose();
					}
				}
				return list;
			}
			return list;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return list;
		}
	}

	private static ManagementObjectCollection smethod_23(ref Variables variables_0)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		try
		{
			variables_0.GObjWmiService = new ManagementScope("\\\\.\\root\\cimv2");
			variables_0.GObjWmiService.Connect();
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		return smethod_14("Version", "SoftwareLicensingService", ref variables_0, bool_0: true);
	}

	private static ManagementObjectCollection smethod_24(ref Variables variables_0)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		try
		{
			variables_0.GObjWmiService = new ManagementScope("\\\\.\\root\\cimv2");
			variables_0.GObjWmiService.Connect();
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger = variables_0.Logger;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		return smethod_14("Version", "OfficeSoftwareProtectionService", ref variables_0, bool_0: true);
	}

	internal static List<SoftwareLicensingProduct> smethod_25(ref List<SoftwareLicensingProduct> list_0, ref bool bool_0, ref bool bool_1, ref bool bool_2, ref Variables variables_0)
	{
		List<SoftwareLicensingProduct> list = new List<SoftwareLicensingProduct>();
		if (list_0 != null)
		{
			try
			{
				foreach (SoftwareLicensingProduct item in list_0)
				{
					SoftwareLicensingProduct softwareLicensingProduct_ = item;
					if (smethod_32(ref softwareLicensingProduct_, ref bool_0, ref bool_1, ref bool_2))
					{
						try
						{
							list.Add(softwareLicensingProduct_);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception exception_ = ex;
							string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
							FileLogger logger = variables_0.Logger;
							string message = "Error: " + str;
							logger.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
					}
				}
				return list;
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger2 = variables_0.Logger;
				string message = "Error: " + str2;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return list;
			}
		}
		return list;
	}

	internal static List<OfficeSoftwareProtectionProduct> smethod_26(ref List<OfficeSoftwareProtectionProduct> list_0, ref bool bool_0, ref bool bool_1, ref bool bool_2, ref Variables variables_0)
	{
		List<OfficeSoftwareProtectionProduct> list = new List<OfficeSoftwareProtectionProduct>();
		if (list_0 != null)
		{
			try
			{
				foreach (OfficeSoftwareProtectionProduct item in list_0)
				{
					OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = item;
					if (smethod_33(ref officeSoftwareProtectionProduct_, ref bool_0, ref bool_1, ref bool_2))
					{
						try
						{
							list.Add(officeSoftwareProtectionProduct_);
						}
						catch (Exception ex)
						{
							ProjectData.SetProjectError(ex);
							Exception exception_ = ex;
							string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
							FileLogger logger = variables_0.Logger;
							string message = "Error: " + str;
							logger.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
					}
				}
				return list;
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger2 = variables_0.Logger;
				string message = "Error: " + str2;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return list;
			}
		}
		return list;
	}

	internal static bool smethod_27(string string_6)
	{
		if (string_6.Contains("KMSCLIENT"))
		{
			return true;
		}
		if (string_6.Contains("KMS_Client"))
		{
			return true;
		}
		return false;
	}

	internal static bool smethod_28(string string_6)
	{
		if (string_6.Contains("OEM"))
		{
			return true;
		}
		return false;
	}

	internal static bool smethod_29(string string_6)
	{
		if (string_6.Contains("RETAIL"))
		{
			return true;
		}
		return false;
	}

	internal static bool smethod_30(string string_6)
	{
		if (string_6.Contains("MAK"))
		{
			return true;
		}
		return false;
	}

	internal static bool smethod_31(object object_0)
	{
		if (Strings.InStr(Conversions.ToString(object_0), "TIMEBASED", (CompareMethod)0) > 0)
		{
			return true;
		}
		return false;
	}

	private static bool smethod_32(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref bool bool_0, ref bool bool_1, ref bool bool_2)
	{
		string applicationID = softwareLicensingProduct_0.ApplicationID;
		string partialProductKey = softwareLicensingProduct_0.PartialProductKey;
		if (bool_0)
		{
			if (applicationID.ToLower().Contains("55c92734-d682-4d71-983e-d6ec3f16059f") && !string.IsNullOrEmpty(partialProductKey))
			{
				return !softwareLicensingProduct_0.LicenseIsAddon;
			}
		}
		else if (applicationID.ToLower().Contains("0ff1ce15-a989-479d-af46-f275c6370663") && !string.IsNullOrEmpty(partialProductKey))
		{
			if (bool_2 && softwareLicensingProduct_0.Description.Contains("Office 16"))
			{
				return !softwareLicensingProduct_0.LicenseIsAddon;
			}
			if (bool_1 && softwareLicensingProduct_0.Description.Contains("Office 15"))
			{
				return !softwareLicensingProduct_0.LicenseIsAddon;
			}
		}
		return false;
	}

	private static bool smethod_33(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref bool bool_0, ref bool bool_1, ref bool bool_2)
	{
		string applicationID = officeSoftwareProtectionProduct_0.ApplicationID;
		string partialProductKey = officeSoftwareProtectionProduct_0.PartialProductKey;
		if (!bool_2 && !bool_1)
		{
			if (bool_0 && applicationID.ToLower().Contains("59a52881-a989-479d-af46-f275c6370663") && !string.IsNullOrEmpty(partialProductKey))
			{
				return true;
			}
		}
		else if (applicationID.ToLower().Contains("0ff1ce15-a989-479d-af46-f275c6370663") && !string.IsNullOrEmpty(partialProductKey))
		{
			if (bool_2 && officeSoftwareProtectionProduct_0.Description.Contains("Office 16"))
			{
				return !officeSoftwareProtectionProduct_0.LicenseIsAddon;
			}
			if (bool_1 && officeSoftwareProtectionProduct_0.Description.Contains("Office 15"))
			{
				return !officeSoftwareProtectionProduct_0.LicenseIsAddon;
			}
		}
		return false;
	}

	public void method_0(ref Variables variables_0, ref List<SoftwareLicensingProduct> list_0)
	{
		bool bool_ = false;
		bool bool_2 = false;
		bool bool_3 = false;
		uint num = 0u;
		bool flag = false;
		Thread.Sleep(Class2.smethod_2(50, 400));
		SoftwareLicensingProduct softwareLicensingProduct_;
		while (true)
		{
			if (list_0.Count <= 0)
			{
				return;
			}
			softwareLicensingProduct_ = Enumerable.ElementAt<SoftwareLicensingProduct>((IEnumerable<SoftwareLicensingProduct>)list_0, 0);
			Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			if (softwareLicensingProduct_.Name.Contains("Windows"))
			{
				bool_ = true;
			}
			else if (softwareLicensingProduct_.Name.Contains("Office 16"))
			{
				bool_3 = true;
			}
			else if (softwareLicensingProduct_.Name.Contains("Office 15"))
			{
				bool_2 = true;
			}
			if (smethod_27(softwareLicensingProduct_.Description))
			{
				if (softwareLicensingProduct_.GracePeriodRemaining != 259200)
				{
					if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8 || variables_0.IsWindows7)
					{
						try
						{
							if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
							{
								if (!softwareLicensingProduct_.KeyManagementServiceMachine.Contains(variables_0.KmsHostLocal.IpAddress))
								{
									num = softwareLicensingProduct_.SetKeyManagementServiceMachine(variables_0.KmsHostLocal.IpAddress);
									flag = true;
									FileLogger logger = variables_0.Logger;
									string message = "SetKeyManagementServiceMachine: " + Conversions.ToString(num) + ": " + variables_0.KmsHostLocal.IpAddress;
									logger.LogMessage(ref message);
								}
							}
							else if (!softwareLicensingProduct_.KeyManagementServiceMachine.Contains(variables_0.KmsHostForward.IpAddress))
							{
								num = softwareLicensingProduct_.SetKeyManagementServiceMachine(variables_0.KmsHostForward.IpAddress);
								flag = true;
								FileLogger logger2 = variables_0.Logger;
								string message = "SetKeyManagementServiceMachine: " + Conversions.ToString(num) + ": " + variables_0.KmsHostForward.IpAddress;
								logger2.LogMessage(ref message);
							}
						}
						catch (COMException ex)
						{
							ProjectData.SetProjectError((Exception)ex);
							COMException ex2 = ex;
							string message2 = ex2.Message;
							Exception exception_ = ex2;
							string str = Class2.smethod_4(ref exception_);
							ex2 = (COMException)exception_;
							string text = message2 + " " + str;
							FileLogger logger3 = variables_0.Logger;
							string message = "Error: " + text + " " + ex2.ErrorCode.ToString("X") + " " + softwareLicensingProduct_.Name;
							logger3.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
						try
						{
							if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
							{
								if (softwareLicensingProduct_.KeyManagementServicePort != variables_0.KmsHostLocal.Port)
								{
									num = softwareLicensingProduct_.SetKeyManagementServicePort(variables_0.KmsHostLocal.Port);
									flag = true;
									FileLogger logger4 = variables_0.Logger;
									string message = "SetKeyManagementServicePort: " + Conversions.ToString(num) + ": " + Conversions.ToString(variables_0.KmsHostLocal.Port);
									logger4.LogMessage(ref message);
								}
							}
							else if (softwareLicensingProduct_.KeyManagementServicePort != variables_0.KmsHostForward.Port)
							{
								num = softwareLicensingProduct_.SetKeyManagementServicePort(variables_0.KmsHostForward.Port);
								flag = true;
								FileLogger logger5 = variables_0.Logger;
								string message = "SetKeyManagementServicePort: " + Conversions.ToString(num) + ": " + Conversions.ToString(variables_0.KmsHostForward.Port);
								logger5.LogMessage(ref message);
							}
						}
						catch (COMException ex3)
						{
							ProjectData.SetProjectError((Exception)ex3);
							COMException ex4 = ex3;
							string message3 = ex4.Message;
							Exception exception_ = ex4;
							string str2 = Class2.smethod_4(ref exception_);
							ex4 = (COMException)exception_;
							string text2 = message3 + " " + str2;
							FileLogger logger6 = variables_0.Logger;
							string message = "Error: " + text2 + " " + ex4.ErrorCode.ToString("X") + " " + softwareLicensingProduct_.Name;
							logger6.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
						try
						{
							if ((variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8) && softwareLicensingProduct_.VLActivationTypeEnabled != 2)
							{
								num = softwareLicensingProduct_.SetVLActivationTypeEnabled(2u);
								flag = true;
								FileLogger logger7 = variables_0.Logger;
								string message = "SetVLActivationTypeEnabled " + Conversions.ToString(num);
								logger7.LogMessage(ref message);
							}
						}
						catch (COMException ex5)
						{
							ProjectData.SetProjectError((Exception)ex5);
							COMException ex6 = ex5;
							string message4 = ex6.Message;
							Exception exception_ = ex6;
							string str3 = Class2.smethod_4(ref exception_);
							ex6 = (COMException)exception_;
							string text3 = message4 + " " + str3;
							FileLogger logger8 = variables_0.Logger;
							string message = "Error: " + text3 + " " + ex6.ErrorCode.ToString("X") + " " + softwareLicensingProduct_.Name;
							logger8.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
					}
					try
					{
						if (flag)
						{
							SoftwareLicensingProduct softwareLicensingProduct = smethod_18(softwareLicensingProduct_, ref variables_0);
							list_0.Remove(softwareLicensingProduct_);
							list_0.Add(softwareLicensingProduct);
							softwareLicensingProduct_ = softwareLicensingProduct;
						}
					}
					catch (Exception ex7)
					{
						ProjectData.SetProjectError(ex7);
						Exception exception_2 = ex7;
						string str4 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
						FileLogger logger9 = variables_0.Logger;
						string message = "Error: " + str4 + " " + softwareLicensingProduct_.Name;
						logger9.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
					try
					{
						num = softwareLicensingProduct_.Activate();
						FileLogger logger10 = variables_0.Logger;
						string message = softwareLicensingProduct_.Name + " Activated " + Conversions.ToString(num);
						logger10.LogMessage(ref message);
					}
					catch (COMException ex8)
					{
						ProjectData.SetProjectError((Exception)ex8);
						COMException ex9 = ex8;
						string message5 = ex9.Message;
						Exception exception_ = ex9;
						string str5 = Class2.smethod_4(ref exception_);
						ex9 = (COMException)exception_;
						string text4 = message5 + " " + str5;
						FileLogger logger11 = variables_0.Logger;
						string message = "Error: " + text4 + " " + ex9.ErrorCode.ToString("X") + " " + softwareLicensingProduct_.Name;
						logger11.LogMessage(ref message);
						message = ex9.ErrorCode.ToString("X");
						method_2(ref variables_0, ref softwareLicensingProduct_, ref message, ref bool_, ref bool_3, ref bool_2, ref list_0);
						ProjectData.ClearProjectError();
					}
				}
				else
				{
					FileLogger logger12 = variables_0.Logger;
					string message = softwareLicensingProduct_.Name + " was already Activated";
					logger12.LogMessage(ref message);
				}
			}
			else if (variables_0.IsPreview)
			{
				try
				{
					num = softwareLicensingProduct_.Activate();
					FileLogger logger13 = variables_0.Logger;
					string message = softwareLicensingProduct_.Name + " Activated " + Conversions.ToString(num);
					logger13.LogMessage(ref message);
				}
				catch (COMException ex10)
				{
					ProjectData.SetProjectError((Exception)ex10);
					COMException ex11 = ex10;
					string message6 = ex11.Message;
					Exception exception_ = ex11;
					string str6 = Class2.smethod_4(ref exception_);
					ex11 = (COMException)exception_;
					string text5 = message6 + " " + str6;
					FileLogger logger14 = variables_0.Logger;
					string message = "Error: " + text5 + " " + ex11.ErrorCode.ToString("X") + " " + softwareLicensingProduct_.Name;
					logger14.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
			}
			list_0.Remove(softwareLicensingProduct_);
			if (list_0.Count != 0)
			{
				Thread.Sleep(Class2.smethod_2(50, 400));
				continue;
			}
			break;
		}
		Class3.smethod_24(ref variables_0, ref variables_0.AudioAffirmative);
		if (bool_)
		{
			variables_0.IsWindowsListo.Value = bool_;
		}
		if (bool_3)
		{
			variables_0.IsOffice2016Listo.Value = bool_3;
		}
		if (bool_2)
		{
			variables_0.IsOffice2013Listo.Value = bool_2;
		}
		if (variables_0.IsWindowsListo.Value && variables_0.IsOffice2013Listo.Value && variables_0.IsOffice2016Listo.Value)
		{
			bool bool_4 = false;
			Class10.smethod_7(ref bool_4, ref variables_0);
			bool_4 = false;
			Class10.smethod_8(ref bool_4, ref variables_0);
			bool_4 = false;
			Class10.smethod_9(ref bool_4, ref variables_0);
		}
		if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8 || variables_0.IsWindows7)
		{
			try
			{
				num = softwareLicensingProduct_.ClearKeyManagementServiceMachine();
				FileLogger logger15 = variables_0.Logger;
				string message = "ClearKeyManagementServiceMachine " + Conversions.ToString(num);
				logger15.LogMessage(ref message);
				num = softwareLicensingProduct_.ClearKeyManagementServicePort();
				FileLogger logger16 = variables_0.Logger;
				message = "ClearKeyManagementServicePort " + Conversions.ToString(num);
				logger16.LogMessage(ref message);
			}
			catch (COMException ex12)
			{
				ProjectData.SetProjectError((Exception)ex12);
				COMException ex13 = ex12;
				string message7 = ex13.Message;
				Exception exception_ = ex13;
				string str7 = Class2.smethod_4(ref exception_);
				ex13 = (COMException)exception_;
				string text6 = message7 + " " + str7;
				FileLogger logger17 = variables_0.Logger;
				string message = "Error: " + text6 + " " + ex13.ErrorCode.ToString("X") + " " + softwareLicensingProduct_.Name;
				logger17.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
		Class3.smethod_6(ref variables_0);
	}

	public void method_1(ref Variables variables_0, ref List<OfficeSoftwareProtectionProduct> list_0)
	{
		bool flag = false;
		bool flag2 = false;
		bool bool_ = false;
		uint num = 0u;
		bool flag3 = false;
		Thread.Sleep(Class2.smethod_2(50, 400));
		OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct;
		while (true)
		{
			if (list_0.Count <= 0)
			{
				return;
			}
			officeSoftwareProtectionProduct = Enumerable.ElementAt<OfficeSoftwareProtectionProduct>((IEnumerable<OfficeSoftwareProtectionProduct>)list_0, 0);
			Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			if (officeSoftwareProtectionProduct.Name.Contains("Office 16"))
			{
				flag = true;
			}
			else if (officeSoftwareProtectionProduct.Name.Contains("Office 15"))
			{
				flag2 = true;
			}
			else if (officeSoftwareProtectionProduct.Name.Contains("Office 14"))
			{
				bool_ = true;
			}
			if (smethod_27(officeSoftwareProtectionProduct.Description))
			{
				if (officeSoftwareProtectionProduct.GracePeriodRemaining != 259200)
				{
					if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8 || variables_0.IsWindows7)
					{
						try
						{
							if ((!flag2 && !flag) || (!variables_0.IsWindows10 && !variables_0.IsWindows81))
							{
								if (!officeSoftwareProtectionProduct.KeyManagementServiceMachine.Contains(variables_0.KmsHostLocal.IpAddress))
								{
									num = officeSoftwareProtectionProduct.SetKeyManagementServiceMachine(variables_0.KmsHostLocal.IpAddress);
									flag3 = true;
									FileLogger logger = variables_0.Logger;
									string message = "SetKeyManagementServiceMachine: " + Conversions.ToString(num) + ": " + variables_0.KmsHostLocal.IpAddress;
									logger.LogMessage(ref message);
								}
							}
							else if (!officeSoftwareProtectionProduct.KeyManagementServiceMachine.Contains(variables_0.KmsHostForward.IpAddress))
							{
								num = officeSoftwareProtectionProduct.SetKeyManagementServiceMachine(variables_0.KmsHostForward.IpAddress);
								flag3 = true;
								FileLogger logger2 = variables_0.Logger;
								string message = "SetKeyManagementServiceMachine: " + Conversions.ToString(num) + ": " + variables_0.KmsHostForward.IpAddress;
								logger2.LogMessage(ref message);
							}
						}
						catch (COMException ex)
						{
							ProjectData.SetProjectError((Exception)ex);
							COMException ex2 = ex;
							string message2 = ex2.Message;
							Exception exception_ = ex2;
							string str = Class2.smethod_4(ref exception_);
							ex2 = (COMException)exception_;
							string text = message2 + " " + str;
							FileLogger logger3 = variables_0.Logger;
							string message = "Error: " + text + " " + ex2.ErrorCode.ToString("X") + " " + officeSoftwareProtectionProduct.Name;
							logger3.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
						try
						{
							if ((!flag2 && !flag) || (!variables_0.IsWindows10 && !variables_0.IsWindows81))
							{
								if (officeSoftwareProtectionProduct.KeyManagementServicePort != variables_0.KmsHostLocal.Port)
								{
									num = officeSoftwareProtectionProduct.SetKeyManagementServicePort(variables_0.KmsHostLocal.Port);
									flag3 = true;
									FileLogger logger4 = variables_0.Logger;
									string message = "SetKeyManagementServicePort: " + Conversions.ToString(num) + ": " + Conversions.ToString(variables_0.KmsHostLocal.Port);
									logger4.LogMessage(ref message);
								}
							}
							else if (officeSoftwareProtectionProduct.KeyManagementServicePort != variables_0.KmsHostForward.Port)
							{
								num = officeSoftwareProtectionProduct.SetKeyManagementServicePort(variables_0.KmsHostForward.Port);
								flag3 = true;
								FileLogger logger5 = variables_0.Logger;
								string message = "SetKeyManagementServicePort: " + Conversions.ToString(num) + ": " + Conversions.ToString(variables_0.KmsHostForward.Port);
								logger5.LogMessage(ref message);
							}
						}
						catch (COMException ex3)
						{
							ProjectData.SetProjectError((Exception)ex3);
							COMException ex4 = ex3;
							string message3 = ex4.Message;
							Exception exception_ = ex4;
							string str2 = Class2.smethod_4(ref exception_);
							ex4 = (COMException)exception_;
							string text2 = message3 + " " + str2;
							FileLogger logger6 = variables_0.Logger;
							string message = "Error: " + text2 + " " + ex4.ErrorCode.ToString("X") + " " + officeSoftwareProtectionProduct.Name;
							logger6.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
					}
					try
					{
						if (flag3)
						{
							OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct2 = smethod_20(officeSoftwareProtectionProduct, variables_0, ref bool_);
							list_0.Remove(officeSoftwareProtectionProduct);
							list_0.Add(officeSoftwareProtectionProduct2);
							officeSoftwareProtectionProduct = officeSoftwareProtectionProduct2;
						}
					}
					catch (Exception ex5)
					{
						ProjectData.SetProjectError(ex5);
						Exception exception_2 = ex5;
						string str3 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
						FileLogger logger7 = variables_0.Logger;
						string message = "Error: " + str3 + " " + officeSoftwareProtectionProduct.Name;
						logger7.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
					try
					{
						num = officeSoftwareProtectionProduct.Activate();
						FileLogger logger8 = variables_0.Logger;
						string message = officeSoftwareProtectionProduct.Name + " Activated " + Conversions.ToString(num);
						logger8.LogMessage(ref message);
					}
					catch (COMException ex6)
					{
						ProjectData.SetProjectError((Exception)ex6);
						COMException ex7 = ex6;
						string message4 = ex7.Message;
						Exception exception_ = ex7;
						string str4 = Class2.smethod_4(ref exception_);
						ex7 = (COMException)exception_;
						string text3 = message4 + " " + str4;
						FileLogger logger9 = variables_0.Logger;
						string message = "Error: " + text3 + " " + ex7.ErrorCode.ToString("X") + " " + officeSoftwareProtectionProduct.Name;
						logger9.LogMessage(ref message);
						method_3(ref variables_0, officeSoftwareProtectionProduct, ex7.ErrorCode.ToString("X"), bool_, flag2, flag, ref list_0);
						ProjectData.ClearProjectError();
					}
				}
				else
				{
					FileLogger logger10 = variables_0.Logger;
					string message = officeSoftwareProtectionProduct.Name + " was already Activated";
					logger10.LogMessage(ref message);
				}
			}
			list_0.Remove(officeSoftwareProtectionProduct);
			if (list_0.Count == 0)
			{
				break;
			}
			Thread.Sleep(Class2.smethod_2(50, 600));
		}
		Class3.smethod_24(ref variables_0, ref variables_0.AudioAffirmative);
		if (flag)
		{
			variables_0.IsOffice2016Listo.Value = flag;
		}
		if (flag2)
		{
			variables_0.IsOffice2013Listo.Value = flag2;
		}
		if (bool_)
		{
			variables_0.IsOffice2010Listo.Value = bool_;
		}
		if (variables_0.IsOffice2010Listo.Value && variables_0.IsOffice2013Listo.Value && variables_0.IsOffice2016Listo.Value)
		{
			bool bool_2 = false;
			Class10.smethod_8(ref bool_2, ref variables_0);
			bool_2 = false;
			Class10.smethod_9(ref bool_2, ref variables_0);
			bool_2 = false;
			Class10.smethod_6(ref bool_2, ref variables_0);
		}
		if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8 || variables_0.IsWindows7)
		{
			try
			{
				num = officeSoftwareProtectionProduct.ClearKeyManagementServiceMachine();
				FileLogger logger11 = variables_0.Logger;
				string message = "ClearKeyManagementServiceMachine " + Conversions.ToString(num);
				logger11.LogMessage(ref message);
				num = officeSoftwareProtectionProduct.ClearKeyManagementServicePort();
				FileLogger logger12 = variables_0.Logger;
				message = "ClearKeyManagementServicePort " + Conversions.ToString(num);
				logger12.LogMessage(ref message);
			}
			catch (COMException ex8)
			{
				ProjectData.SetProjectError((Exception)ex8);
				COMException ex9 = ex8;
				string message5 = ex9.Message;
				Exception exception_ = ex9;
				string str5 = Class2.smethod_4(ref exception_);
				ex9 = (COMException)exception_;
				string text4 = message5 + " " + str5;
				FileLogger logger13 = variables_0.Logger;
				string message = "Error: " + text4 + " " + ex9.ErrorCode.ToString("X") + " " + officeSoftwareProtectionProduct.Name;
				logger13.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
		Class3.smethod_6(ref variables_0);
	}

	private void method_2(ref Variables variables_0, ref SoftwareLicensingProduct softwareLicensingProduct_0, ref string string_6, ref bool bool_0, ref bool bool_1, ref bool bool_2, ref List<SoftwareLicensingProduct> list_0)
	{
		checked
		{
			variables_0.IntentosActivacion++;
		}
		if (variables_0.IntentosActivacion <= 20)
		{
			Class3.smethod_24(ref variables_0, ref variables_0.AudioInputFailed);
			if (variables_0.IntentosActivacion % 2 != 0)
			{
				Variables variables_ = variables_0;
				new Thread((ThreadStart)delegate
				{
					ref Variables variables_2 = ref variables_;
					bool bool_4 = true;
					Class3.smethod_21(ref variables_2, ref bool_4);
				}).Start();
			}
			if (bool_0)
			{
				variables_0.IsWindowsListo.Value = false;
			}
			else if (bool_1)
			{
				variables_0.IsOffice2016Listo.Value = false;
			}
			else if (bool_2)
			{
				variables_0.IsOffice2013Listo.Value = false;
			}
			if (bool_0)
			{
				Class3.smethod_20(ref variables_0);
			}
			else if (bool_1)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2016V5;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
					else
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2016V4;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
				}
				else
				{
					KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2016V6;
					Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
				}
			}
			else if (bool_2)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2013V5;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
					else
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2013V4;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
				}
				else
				{
					KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2013V6;
					Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
				}
			}
			if (!string_6.Contains("80070005") && !string_6.Contains("8007000D") && !string_6.Contains("C004F038") && !string_6.Contains("C004F039") && !string_6.Contains("C004F074"))
			{
				if (!string_6.Contains("C004C001") && !string_6.Contains("C004C003") && !string_6.Contains("C004C017") && !string_6.Contains("C004C008") && !string_6.Contains("C004F014") && !string_6.Contains("C004F050") && !string_6.Contains("8007007B") && !string_6.Contains("C004D302") && !string_6.Contains("C004F069") && !string_6.Contains("80072EE7") && !string_6.Contains("8007267C") && !string_6.Contains("8007232B") && !string_6.Contains("8007267C"))
				{
					if (!string_6.Contains("C004F009") && !string_6.Contains("C004F200"))
					{
						if (string_6.Contains("C004F065"))
						{
							if (variables_0.IntentosActivacion < 19)
							{
								Thread.Sleep(Class2.smethod_2(50, 600));
								if (bool_0)
								{
									UndoGenuine.smethod_0(ref variables_0);
									Activador.smethod_2(ref variables_0);
								}
							}
						}
						else if (string_6.Contains("C004F017"))
						{
							Key.smethod_11(ref softwareLicensingProduct_0, bool_0, ref variables_0);
							SoftwareLicensingProduct softwareLicensingProduct = smethod_18(softwareLicensingProduct_0, ref variables_0);
							list_0.Add(softwareLicensingProduct);
							softwareLicensingProduct_0 = softwareLicensingProduct;
							if (variables_0.IntentosActivacion < 19)
							{
								Thread.Sleep(Class2.smethod_2(50, 600));
								if (bool_0)
								{
									Activador.smethod_2(ref variables_0);
								}
								else if (bool_2)
								{
									if (variables_0.IntentosActivacion > 7)
									{
										if (variables_0.ColeccionOffice2013W8.Count > 0)
										{
											variables_0.ColeccionOffice2013W8.Remove(softwareLicensingProduct_0);
										}
									}
									else
									{
										RT2VL.smethod_20(ref softwareLicensingProduct_0, ref variables_0);
									}
									Activador.smethod_4(ref variables_0);
								}
							}
						}
						else if (string_6.Contains("C004E015") || string_6.Contains("C004F069"))
						{
							if (bool_0)
							{
								RT2VL.smethod_1(ref variables_0);
							}
							else if (bool_1)
							{
								string empty = string.Empty;
								string name = softwareLicensingProduct_0.Name;
								RT2VL.smethod_3(ref empty, ref variables_0, ref name);
							}
							else if (bool_2)
							{
								string name = string.Empty;
								RT2VL.smethod_4(ref name, ref variables_0);
							}
							Key.smethod_11(ref softwareLicensingProduct_0, bool_0, ref variables_0);
							SoftwareLicensingProduct softwareLicensingProduct2 = smethod_18(softwareLicensingProduct_0, ref variables_0);
							list_0.Remove(softwareLicensingProduct_0);
							list_0.Add(softwareLicensingProduct2);
							softwareLicensingProduct_0 = softwareLicensingProduct2;
							if (variables_0.IntentosActivacion < 19)
							{
								Thread.Sleep(Class2.smethod_2(50, 600));
								if (bool_0)
								{
									Activador.smethod_2(ref variables_0);
								}
								else if (bool_1)
								{
									if (variables_0.IntentosActivacion > 7)
									{
										if (variables_0.ColeccionOffice2016W8.Count > 0)
										{
											variables_0.ColeccionOffice2016W8.Remove(softwareLicensingProduct_0);
										}
									}
									else
									{
										RT2VL.smethod_13(ref softwareLicensingProduct_0, ref variables_0);
									}
									Activador.smethod_3(ref variables_0);
								}
								else if (bool_2)
								{
									if (variables_0.IntentosActivacion > 7)
									{
										if (variables_0.ColeccionOffice2013W8.Count > 0)
										{
											variables_0.ColeccionOffice2013W8.Remove(softwareLicensingProduct_0);
										}
									}
									else
									{
										RT2VL.smethod_20(ref softwareLicensingProduct_0, ref variables_0);
									}
									Activador.smethod_4(ref variables_0);
								}
							}
						}
					}
					else
					{
						smethod_42(ref softwareLicensingProduct_0, ref variables_0);
						Key.smethod_11(ref softwareLicensingProduct_0, bool_0, ref variables_0);
						SoftwareLicensingProduct softwareLicensingProduct3 = smethod_18(softwareLicensingProduct_0, ref variables_0);
						list_0.Add(softwareLicensingProduct3);
						softwareLicensingProduct_0 = softwareLicensingProduct3;
						if (variables_0.IntentosActivacion < 19)
						{
							Thread.Sleep(Class2.smethod_2(50, 600));
							if (bool_0)
							{
								Activador.smethod_2(ref variables_0);
							}
							else if (bool_1)
							{
								Activador.smethod_3(ref variables_0);
							}
							else if (bool_2)
							{
								Activador.smethod_4(ref variables_0);
							}
						}
					}
				}
				else
				{
					Key.smethod_11(ref softwareLicensingProduct_0, bool_0, ref variables_0);
					SoftwareLicensingProduct softwareLicensingProduct4 = smethod_18(softwareLicensingProduct_0, ref variables_0);
					list_0.Remove(softwareLicensingProduct_0);
					list_0.Add(softwareLicensingProduct4);
					softwareLicensingProduct_0 = softwareLicensingProduct4;
					if (variables_0.IntentosActivacion < 19)
					{
						Thread.Sleep(Class2.smethod_2(50, 600));
						if (bool_0)
						{
							Activador.smethod_2(ref variables_0);
						}
						else if (bool_1)
						{
							Activador.smethod_3(ref variables_0);
						}
						else if (bool_2)
						{
							Activador.smethod_4(ref variables_0);
						}
					}
				}
			}
			else
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.InternetConnection && variables_0.ServersOnline.Length > 0 && variables_0.IntentosActivacion >= 7 && variables_0.IntentosActivacion < 18)
					{
						FileLogger logger = variables_0.Logger;
						string empty = "Using Plan B...";
						logger.LogMessage(ref empty);
						variables_0.IsSecohQad.Value = false;
						variables_0.IsWinDivert.Value = false;
						variables_0.IsTapDriver.Value = false;
						variables_0.IsOnline.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables_0, ref hostServer_);
					}
				}
				else if (variables_0.IntentosActivacion < 5)
				{
					HostServer hostServer_ = null;
					Class3.smethod_19(ref variables_0, ref hostServer_);
				}
				else if (variables_0.IntentosActivacion >= 6 && variables_0.IntentosActivacion < 10)
				{
					if (variables_0.IsSecohQad.Value)
					{
						FileLogger logger2 = variables_0.Logger;
						string empty = "Using Plan B...";
						logger2.LogMessage(ref empty);
						variables_0.IsSecohQad.Value = false;
						variables_0.IsWinDivert.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables_0, ref hostServer_);
					}
				}
				else if (variables_0.IntentosActivacion >= 10 && variables_0.IntentosActivacion < 14)
				{
					if (variables_0.IsWinDivert.Value)
					{
						FileLogger logger3 = variables_0.Logger;
						string empty = "Using Plan C...";
						logger3.LogMessage(ref empty);
						variables_0.IsWinDivert.Value = false;
						variables_0.IsTapDriver.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables_0, ref hostServer_);
					}
				}
				else if (variables_0.IntentosActivacion >= 14 && variables_0.IntentosActivacion < 18 && variables_0.InternetConnection && variables_0.ServersOnline.Length > 0)
				{
					FileLogger logger4 = variables_0.Logger;
					string empty = "Using Plan D...";
					logger4.LogMessage(ref empty);
					variables_0.IsSecohQad.Value = false;
					variables_0.IsWinDivert.Value = false;
					variables_0.IsTapDriver.Value = false;
					variables_0.IsOnline.Value = true;
					HostServer hostServer_ = null;
					Class3.smethod_19(ref variables_0, ref hostServer_);
				}
				if (variables_0.IntentosActivacion < 19)
				{
					Thread.Sleep(Class2.smethod_2(50, 600));
					if (bool_0)
					{
						Activador.smethod_2(ref variables_0);
					}
					else if (bool_1)
					{
						Activador.smethod_3(ref variables_0);
					}
					else if (bool_2)
					{
						Activador.smethod_4(ref variables_0);
					}
				}
			}
		}
		if (bool_0)
		{
			bool bool_3 = false;
			Class10.smethod_7(ref bool_3, ref variables_0);
			variables_0.IsWindowsListo.Value = bool_0;
		}
		if (bool_1)
		{
			bool bool_3 = false;
			Class10.smethod_8(ref bool_3, ref variables_0);
			variables_0.IsOffice2016Listo.Value = bool_1;
		}
		if (bool_2)
		{
			bool bool_3 = false;
			Class10.smethod_9(ref bool_3, ref variables_0);
			variables_0.IsOffice2013Listo.Value = bool_2;
		}
		if (variables_0.IntentosActivacion > 20)
		{
			variables_0.IsWindowsListo.Value = true;
			variables_0.IsOffice2016Listo.Value = true;
			variables_0.IsOffice2013Listo.Value = true;
			variables_0.IsOffice2010Listo.Value = true;
		}
		Class3.smethod_6(ref variables_0);
	}

	private void method_3(ref Variables variables_0, OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, string string_6, bool bool_0, bool bool_1, bool bool_2, ref List<OfficeSoftwareProtectionProduct> list_0)
	{
		checked
		{
			variables_0.IntentosActivacion++;
		}
		if (variables_0.IntentosActivacion <= 20)
		{
			Class3.smethod_24(ref variables_0, ref variables_0.AudioInputFailed);
			if (variables_0.IntentosActivacion % 2 != 0 && variables_0.IsWindowsListo.Value)
			{
				Variables variables_ = variables_0;
				new Thread((ThreadStart)delegate
				{
					ref Variables variables_2 = ref variables_;
					bool bool_4 = true;
					Class3.smethod_21(ref variables_2, ref bool_4);
				}).Start();
			}
			if (bool_2)
			{
				variables_0.IsOffice2016Listo.Value = false;
			}
			else if (bool_1)
			{
				variables_0.IsOffice2013Listo.Value = false;
			}
			else if (bool_0)
			{
				variables_0.IsOffice2010Listo.Value = false;
			}
			if (bool_2)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2016V5;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
					else
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2016V4;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
				}
				else
				{
					KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2016V6;
					Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
				}
			}
			else if (bool_1)
			{
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2013V5;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
					else
					{
						KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2013V4;
						Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
					}
				}
				else
				{
					KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2013V6;
					Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
				}
			}
			else if (bool_0)
			{
				KMSClientProduct kmsclientProduct_ = KMSClientProduct.Office2010;
				Class3.smethod_22(ref variables_0, ref kmsclientProduct_);
			}
			if (!string_6.Contains("80070005") && !string_6.Contains("8007000D") && !string_6.Contains("C004F038") && !string_6.Contains("C004F039") && !string_6.Contains("C004F074"))
			{
				if (!string_6.Contains("C004C001") && !string_6.Contains("C004C003") && !string_6.Contains("C004C017") && !string_6.Contains("C004C008") && !string_6.Contains("C004F014") && !string_6.Contains("C004F050") && !string_6.Contains("8007007B") && !string_6.Contains("C004D302") && !string_6.Contains("C004F069") && !string_6.Contains("80072EE7") && !string_6.Contains("8007267C") && !string_6.Contains("8007232B") && !string_6.Contains("8007267C"))
				{
					if (!string_6.Contains("C004F009") && !string_6.Contains("C004F200"))
					{
						if (!string_6.Contains("C004F065"))
						{
							if (string_6.Contains("C004F017"))
							{
								Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
								OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct = smethod_20(officeSoftwareProtectionProduct_0, variables_0, ref bool_0);
								list_0.Remove(officeSoftwareProtectionProduct_0);
								list_0.Add(officeSoftwareProtectionProduct);
								officeSoftwareProtectionProduct_0 = officeSoftwareProtectionProduct;
								if (variables_0.IntentosActivacion < 19)
								{
									Thread.Sleep(Class2.smethod_2(50, 600));
									if (bool_2)
									{
										if (variables_0.IntentosActivacion > 7)
										{
											if (variables_0.ColeccionOffice2016W7.Count > 0)
											{
												variables_0.ColeccionOffice2016W7.Remove(officeSoftwareProtectionProduct_0);
											}
										}
										else
										{
											RT2VL.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
										}
										Activador.smethod_3(ref variables_0);
									}
									else if (bool_1)
									{
										if (variables_0.IntentosActivacion > 7)
										{
											if (variables_0.ColeccionOffice2013W7.Count > 0)
											{
												variables_0.ColeccionOffice2013W7.Remove(officeSoftwareProtectionProduct_0);
											}
										}
										else
										{
											RT2VL.smethod_21(ref officeSoftwareProtectionProduct_0, ref variables_0);
										}
										Activador.smethod_4(ref variables_0);
									}
									else if (bool_0)
									{
										if (variables_0.IntentosActivacion > 7)
										{
											if (variables_0.ColeccionOffice2010.Count > 0)
											{
												variables_0.ColeccionOffice2010.Remove(officeSoftwareProtectionProduct_0);
											}
										}
										else
										{
											RT2VL.smethod_24(ref officeSoftwareProtectionProduct_0, ref variables_0);
										}
										Activador.smethod_5(ref variables_0);
									}
								}
							}
							else if (string_6.Contains("C004E015") || string_6.Contains("C004F069"))
							{
								if (bool_2)
								{
									string empty = string.Empty;
									string name = officeSoftwareProtectionProduct_0.Name;
									RT2VL.smethod_3(ref empty, ref variables_0, ref name);
								}
								else if (bool_1)
								{
									string name = string.Empty;
									RT2VL.smethod_4(ref name, ref variables_0);
								}
								Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
								OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct2 = smethod_20(officeSoftwareProtectionProduct_0, variables_0, ref bool_0);
								list_0.Remove(officeSoftwareProtectionProduct_0);
								list_0.Add(officeSoftwareProtectionProduct2);
								officeSoftwareProtectionProduct_0 = officeSoftwareProtectionProduct2;
								if (variables_0.IntentosActivacion < 19)
								{
									Thread.Sleep(Class2.smethod_2(50, 600));
									if (bool_2)
									{
										if (variables_0.IntentosActivacion > 7)
										{
											if (variables_0.ColeccionOffice2016W7.Count > 0)
											{
												variables_0.ColeccionOffice2016W7.Remove(officeSoftwareProtectionProduct_0);
											}
										}
										else
										{
											RT2VL.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
										}
										Activador.smethod_3(ref variables_0);
									}
									else if (bool_1)
									{
										if (variables_0.IntentosActivacion > 7)
										{
											if (variables_0.ColeccionOffice2013W7.Count > 0)
											{
												variables_0.ColeccionOffice2013W7.Remove(officeSoftwareProtectionProduct_0);
											}
										}
										else
										{
											RT2VL.smethod_21(ref officeSoftwareProtectionProduct_0, ref variables_0);
										}
										Activador.smethod_4(ref variables_0);
									}
									else if (bool_0)
									{
										if (variables_0.IntentosActivacion > 7)
										{
											if (variables_0.ColeccionOffice2010.Count > 0)
											{
												variables_0.ColeccionOffice2010.Remove(officeSoftwareProtectionProduct_0);
											}
										}
										else
										{
											RT2VL.smethod_24(ref officeSoftwareProtectionProduct_0, ref variables_0);
										}
										Activador.smethod_5(ref variables_0);
									}
								}
							}
						}
					}
					else
					{
						smethod_41(ref officeSoftwareProtectionProduct_0, ref variables_0);
						Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
						OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct3 = smethod_20(officeSoftwareProtectionProduct_0, variables_0, ref bool_0);
						list_0.Remove(officeSoftwareProtectionProduct_0);
						list_0.Add(officeSoftwareProtectionProduct3);
						officeSoftwareProtectionProduct_0 = officeSoftwareProtectionProduct3;
					}
				}
				else
				{
					Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
					OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct4 = smethod_20(officeSoftwareProtectionProduct_0, variables_0, ref bool_0);
					list_0.Remove(officeSoftwareProtectionProduct_0);
					list_0.Add(officeSoftwareProtectionProduct4);
					officeSoftwareProtectionProduct_0 = officeSoftwareProtectionProduct4;
					if (variables_0.IntentosActivacion < 19)
					{
						Thread.Sleep(Class2.smethod_2(50, 600));
						if (bool_2)
						{
							Activador.smethod_3(ref variables_0);
						}
						else if (bool_1)
						{
							Activador.smethod_4(ref variables_0);
						}
						else if (bool_0)
						{
							Activador.smethod_5(ref variables_0);
						}
					}
				}
			}
			else
			{
				if ((!bool_1 && !bool_2) || (!variables_0.IsWindows10 && !variables_0.IsWindows81))
				{
					if (variables_0.InternetConnection && variables_0.ServersOnline.Length > 0 && variables_0.IntentosActivacion >= 6 && variables_0.IntentosActivacion < 18)
					{
						FileLogger logger = variables_0.Logger;
						string empty = "Using Plan B...";
						logger.LogMessage(ref empty);
						variables_0.IsSecohQad.Value = false;
						variables_0.IsWinDivert.Value = false;
						variables_0.IsTapDriver.Value = false;
						variables_0.IsOnline.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables_0, ref hostServer_);
					}
				}
				else if (variables_0.IntentosActivacion < 5)
				{
					HostServer hostServer_ = null;
					Class3.smethod_19(ref variables_0, ref hostServer_);
				}
				else if (variables_0.IntentosActivacion >= 6 && variables_0.IntentosActivacion < 10)
				{
					if (variables_0.IsSecohQad.Value)
					{
						FileLogger logger2 = variables_0.Logger;
						string empty = "Using Plan B...";
						logger2.LogMessage(ref empty);
						variables_0.IsSecohQad.Value = false;
						variables_0.IsWinDivert.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables_0, ref hostServer_);
					}
				}
				else if (variables_0.IntentosActivacion >= 10 && variables_0.IntentosActivacion < 14)
				{
					if (variables_0.IsWinDivert.Value)
					{
						FileLogger logger3 = variables_0.Logger;
						string empty = "Using Plan C...";
						logger3.LogMessage(ref empty);
						variables_0.IsWinDivert.Value = false;
						variables_0.IsTapDriver.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables_0, ref hostServer_);
					}
				}
				else if (variables_0.IntentosActivacion >= 14 && variables_0.IntentosActivacion < 18 && variables_0.InternetConnection && variables_0.ServersOnline.Length > 0)
				{
					FileLogger logger4 = variables_0.Logger;
					string empty = "Using Plan D...";
					logger4.LogMessage(ref empty);
					variables_0.IsSecohQad.Value = false;
					variables_0.IsWinDivert.Value = false;
					variables_0.IsTapDriver.Value = false;
					variables_0.IsOnline.Value = true;
					HostServer hostServer_ = null;
					Class3.smethod_19(ref variables_0, ref hostServer_);
				}
				if (variables_0.IntentosActivacion < 19)
				{
					Thread.Sleep(Class2.smethod_2(50, 600));
				}
			}
		}
		if (bool_2)
		{
			bool bool_3 = false;
			Class10.smethod_8(ref bool_3, ref variables_0);
			variables_0.IsOffice2016Listo.Value = bool_2;
		}
		if (bool_1)
		{
			bool bool_3 = false;
			Class10.smethod_9(ref bool_3, ref variables_0);
			variables_0.IsOffice2013Listo.Value = bool_1;
		}
		if (bool_0)
		{
			bool bool_3 = false;
			Class10.smethod_6(ref bool_3, ref variables_0);
			variables_0.IsOffice2010Listo.Value = bool_0;
		}
		if (variables_0.IntentosActivacion > 20)
		{
			variables_0.IsWindowsListo.Value = true;
			variables_0.IsOffice2016Listo.Value = true;
			variables_0.IsOffice2013Listo.Value = true;
			variables_0.IsOffice2010Listo.Value = true;
		}
		Class3.smethod_6(ref variables_0);
	}

	internal static uint smethod_34(ref SoftwareLicensingService softwareLicensingService_0, ref string string_6, ref Variables variables_0, ref string string_7)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		uint result = 1u;
		if (softwareLicensingService_0 != null)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Installing Key: " + string_6.Substring(23);
			logger.LogMessage(ref message);
			try
			{
				if (!string_6.StartsWith("BBBBB"))
				{
					if (new Regex("^([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})$").IsMatch(string_6))
					{
						result = softwareLicensingService_0.InstallProductKey(string_6);
						FileLogger logger2 = variables_0.Logger;
						message = "InstallProductKey " + string_6.Substring(23) + " " + Conversions.ToString(result);
						logger2.LogMessage(ref message);
						try
						{
							result = softwareLicensingService_0.RefreshLicenseStatus();
							FileLogger logger3 = variables_0.Logger;
							message = "RefreshLicenseStatus " + Conversions.ToString(result);
							logger3.LogMessage(ref message);
						}
						catch (COMException ex)
						{
							ProjectData.SetProjectError((Exception)ex);
							COMException ex2 = ex;
							string str = ex2.ErrorCode.ToString("X");
							Exception exception_ = ex2;
							string str2 = Class2.smethod_4(ref exception_);
							ex2 = (COMException)exception_;
							string_7 = str + " " + str2;
							FileLogger logger4 = variables_0.Logger;
							message = "Error: " + string_7;
							logger4.LogMessage(ref message);
							ProjectData.ClearProjectError();
						}
						Class3.smethod_24(ref variables_0, ref variables_0.AudioInputOk);
						return result;
					}
					return result;
				}
				return result;
			}
			catch (COMException ex3)
			{
				ProjectData.SetProjectError((Exception)ex3);
				COMException ex4 = ex3;
				string str3 = ex4.ErrorCode.ToString("X");
				Exception exception_ = ex4;
				string str4 = Class2.smethod_4(ref exception_);
				ex4 = (COMException)exception_;
				string_7 = str3 + " " + str4;
				FileLogger logger5 = variables_0.Logger;
				message = "Error: " + string_7;
				logger5.LogMessage(ref message);
				result = 1u;
				ProjectData.ClearProjectError();
				return result;
			}
		}
		return result;
	}

	internal static uint smethod_35(ref OfficeSoftwareProtectionService officeSoftwareProtectionService_0, ref string string_6, ref Variables variables_0, ref string string_7)
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		uint result = 1u;
		if (officeSoftwareProtectionService_0 != null)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Installing Key: " + string_6.Substring(23);
			logger.LogMessage(ref message);
			try
			{
				if (!string_6.StartsWith("BBBBB"))
				{
					if (new Regex("^([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})$").IsMatch(string_6))
					{
						result = officeSoftwareProtectionService_0.InstallProductKey(string_6);
						FileLogger logger2 = variables_0.Logger;
						message = "InstallProductKey " + string_6.Substring(23) + " " + Conversions.ToString(result);
						logger2.LogMessage(ref message);
						Class3.smethod_24(ref variables_0, ref variables_0.AudioInputOk);
						return result;
					}
					return result;
				}
				return result;
			}
			catch (COMException ex)
			{
				ProjectData.SetProjectError((Exception)ex);
				COMException ex2 = ex;
				string str = ex2.ErrorCode.ToString("X");
				Exception exception_ = ex2;
				string str2 = Class2.smethod_4(ref exception_);
				ex2 = (COMException)exception_;
				string_7 = str + " " + str2;
				FileLogger logger3 = variables_0.Logger;
				message = "Error: " + string_7;
				logger3.LogMessage(ref message);
				result = 1u;
				ProjectData.ClearProjectError();
				return result;
			}
		}
		return result;
	}

	internal static uint smethod_36(ref SoftwareLicensingService softwareLicensingService_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = softwareLicensingService_0.RefreshLicenseStatus();
			FileLogger logger = variables_0.Logger;
			string message = "RefreshLicenseStatus " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static uint smethod_37(ref SoftwareLicensingService softwareLicensingService_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = softwareLicensingService_0.ClearProductKeyFromRegistry();
			FileLogger logger = variables_0.Logger;
			string message = "ClearProductKeyFromRegistry " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static uint smethod_38(ref OfficeSoftwareProtectionService officeSoftwareProtectionService_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = officeSoftwareProtectionService_0.ClearProductKeyFromRegistry();
			FileLogger logger = variables_0.Logger;
			string message = "ClearProductKeyFromRegistry " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static uint smethod_39(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = softwareLicensingProduct_0.UninstallProductKey();
			FileLogger logger = variables_0.Logger;
			string message = softwareLicensingProduct_0.PartialProductKey + " UninstallProductKey " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static uint smethod_40(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = officeSoftwareProtectionProduct_0.UninstallProductKey();
			FileLogger logger = variables_0.Logger;
			string message = officeSoftwareProtectionProduct_0.PartialProductKey + " UninstallProductKey " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	private static void smethod_41(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
	{
		if (officeSoftwareProtectionProduct_0.Description.Contains("Office 16"))
		{
			string text = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\Microsoft Office\\Office16";
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(text))
			{
				text = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + "\\Microsoft Office\\Office16";
			}
			string text2 = "OSPPREARM.EXE";
			string[] array = Class2.smethod_0(ref variables_0, ref text2, text);
			ArrayList arrayList_ = null;
			bool bool_ = true;
			Class3.smethod_1(ref array, ref arrayList_, ref variables_0, ref bool_);
		}
		else if (officeSoftwareProtectionProduct_0.Description.Contains("Office 15"))
		{
			string text2 = "OSPPREARM.EXE";
			string[] array = Class2.smethod_0(ref variables_0, ref text2, Conversions.ToString(variables_0.RutaOffice2013));
			ArrayList arrayList_ = null;
			bool bool_ = true;
			Class3.smethod_1(ref array, ref arrayList_, ref variables_0, ref bool_);
		}
		else if (officeSoftwareProtectionProduct_0.Description.Contains("Office 14"))
		{
			string text2 = "OSPPREARM.EXE";
			string[] array = Class2.smethod_0(ref variables_0, ref text2, Conversions.ToString(variables_0.RutaOffice2010));
			ArrayList arrayList_ = null;
			bool bool_ = true;
			Class3.smethod_1(ref array, ref arrayList_, ref variables_0, ref bool_);
		}
	}

	private static void smethod_42(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
	{
		if (softwareLicensingProduct_0.Description.Contains("Office 16"))
		{
			string text = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\Microsoft Office\\Office16";
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(text))
			{
				text = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + "\\Microsoft Office\\Office16";
			}
			string text2 = "OSPPREARM.EXE";
			string[] array = Class2.smethod_0(ref variables_0, ref text2, text);
			ArrayList arrayList_ = null;
			bool bool_ = true;
			Class3.smethod_1(ref array, ref arrayList_, ref variables_0, ref bool_);
		}
		else if (softwareLicensingProduct_0.Description.Contains("Office 15"))
		{
			string text2 = "OSPPREARM.EXE";
			string[] array = Class2.smethod_0(ref variables_0, ref text2, Conversions.ToString(variables_0.RutaOffice2013));
			ArrayList arrayList_ = null;
			bool bool_ = true;
			Class3.smethod_1(ref array, ref arrayList_, ref variables_0, ref bool_);
		}
		else if (softwareLicensingProduct_0.Description.Contains("Windows"))
		{
			smethod_43(ref variables_0);
		}
	}

	internal static uint smethod_43(ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = smethod_49(ref variables_0).ReArmWindows();
			FileLogger logger = variables_0.Logger;
			string message = "ReArmWindows " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static object smethod_44(ref SoftwareLicensingService softwareLicensingService_0, ref string string_6, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = softwareLicensingService_0.InstallLicense(string_6);
			FileLogger logger = variables_0.Logger;
			string message = "InstallLicense " + Conversions.ToString(num);
			logger.LogMessage(ref message);
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		return num;
	}

	internal static object smethod_45(ref OfficeSoftwareProtectionService officeSoftwareProtectionService_0, ref string string_6, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = officeSoftwareProtectionService_0.InstallLicense(string_6);
			FileLogger logger = variables_0.Logger;
			string message = "InstallLicense " + Conversions.ToString(num);
			logger.LogMessage(ref message);
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		return num;
	}

	internal static void smethod_46(ref Variables variables_0, ref bool bool_0, ref bool bool_1, ref bool bool_2, ref bool bool_3)
	{
		if (bool_0)
		{
			List<SoftwareLicensingProduct> list_ = smethod_17(ref variables_0);
			variables_0.ColeccionWindows = smethod_25(ref list_, ref bool_0, ref bool_2, ref bool_3, ref variables_0);
		}
		else if (bool_3)
		{
			if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
				{
					bool bool_4 = false;
					List<OfficeSoftwareProtectionProduct> list_2 = smethod_19(ref variables_0, ref bool_4);
					variables_0.ColeccionOffice2016W7 = smethod_26(ref list_2, ref bool_0, ref bool_2, ref bool_3, ref variables_0);
				}
			}
			else
			{
				List<SoftwareLicensingProduct> list_3 = smethod_17(ref variables_0);
				variables_0.ColeccionOffice2016W8 = smethod_25(ref list_3, ref bool_0, ref bool_2, ref bool_3, ref variables_0);
			}
		}
		else if (bool_2)
		{
			if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
				{
					bool bool_4 = false;
					List<OfficeSoftwareProtectionProduct> list_4 = smethod_19(ref variables_0, ref bool_4);
					variables_0.ColeccionOffice2013W7 = smethod_26(ref list_4, ref bool_0, ref bool_2, ref bool_3, ref variables_0);
				}
			}
			else
			{
				List<SoftwareLicensingProduct> list_5 = smethod_17(ref variables_0);
				variables_0.ColeccionOffice2013W8 = smethod_25(ref list_5, ref bool_0, ref bool_2, ref bool_3, ref variables_0);
			}
		}
		else if (bool_1)
		{
			bool bool_4 = true;
			List<OfficeSoftwareProtectionProduct> list_6 = smethod_19(ref variables_0, ref bool_4);
			variables_0.ColeccionOffice2010 = smethod_26(ref list_6, ref bool_1, ref bool_2, ref bool_3, ref variables_0);
		}
	}

	internal static uint smethod_47(ref SoftwareLicensingService softwareLicensingService_0, ref bool bool_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = softwareLicensingService_0.DisableKeyManagementServiceHostCaching(bool_0);
			FileLogger logger = variables_0.Logger;
			string message = "DisableKeyManagementServiceHostCaching " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static uint smethod_48(OfficeSoftwareProtectionService officeSoftwareProtectionService_0, bool bool_0, ref Variables variables_0)
	{
		uint num = 1u;
		try
		{
			num = officeSoftwareProtectionService_0.DisableKeyManagementServiceHostCaching(bool_0);
			FileLogger logger = variables_0.Logger;
			string message = "DisableKeyManagementServiceHostCaching " + Conversions.ToString(num);
			logger.LogMessage(ref message);
			return num;
		}
		catch (COMException ex)
		{
			ProjectData.SetProjectError((Exception)ex);
			COMException ex2 = ex;
			string str = ex2.ErrorCode.ToString("X");
			Exception exception_ = ex2;
			string str2 = Class2.smethod_4(ref exception_);
			ex2 = (COMException)exception_;
			string str3 = str + " " + str2;
			FileLogger logger2 = variables_0.Logger;
			string message = "Error: " + str3;
			logger2.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return num;
		}
	}

	internal static SoftwareLicensingService smethod_49(ref Variables variables_0)
	{
		List<SoftwareLicensingService> list = smethod_21(ref variables_0);
		if (list.Count > 0)
		{
			return Enumerable.ElementAt<SoftwareLicensingService>((IEnumerable<SoftwareLicensingService>)list, 0);
		}
		return null;
	}

	internal static OfficeSoftwareProtectionService smethod_50(ref Variables variables_0)
	{
		List<OfficeSoftwareProtectionService> list = smethod_22(ref variables_0);
		if (list.Count > 0)
		{
			return Enumerable.ElementAt<OfficeSoftwareProtectionService>((IEnumerable<OfficeSoftwareProtectionService>)list, 0);
		}
		return null;
	}
}
[StandardModule]
internal sealed class Class20
{
	public static object smethod_0(object object_0)
	{
		object obj = null;
		object obj2 = Operators.AndObject(Operators.IntDivideObject(NewLateBinding.LateIndexGet(object_0, new object[1]
		{
			822
		}, (string[])null), (object)6), (object)1);
		NewLateBinding.LateIndexSet(object_0, new object[2]
		{
			822,
			Operators.OrObject(Operators.AndObject(NewLateBinding.LateIndexGet(object_0, new object[1]
			{
				822
			}, (string[])null), (object)247), Operators.MultiplyObject(Operators.AndObject(obj2, (object)2), (object)4))
		}, (string[])null);
		object obj3 = 24;
		object obj4 = "BCDFGHJKMPQRTVWXY2346789";
		object objectValue;
		do
		{
			object obj5 = 0;
			object obj6 = 14;
			do
			{
				obj5 = Operators.MultiplyObject(obj5, (object)256);
				obj5 = Operators.AddObject(NewLateBinding.LateIndexGet(object_0, new object[1]
				{
					Operators.AddObject(obj6, (object)808)
				}, (string[])null), obj5);
				NewLateBinding.LateIndexSet(object_0, new object[2]
				{
					Operators.AddObject(obj6, (object)808),
					Operators.IntDivideObject(obj5, (object)24)
				}, (string[])null);
				obj5 = Operators.ModObject(obj5, (object)24);
				obj6 = Operators.SubtractObject(obj6, (object)1);
			}
			while (Operators.ConditionalCompareObjectGreaterEqual(obj6, (object)0, false));
			obj3 = Operators.SubtractObject(obj3, (object)1);
			obj = Operators.ConcatenateObject((object)Strings.Mid(Conversions.ToString(obj4), Conversions.ToInteger(Operators.AddObject(obj5, (object)1)), 1), obj);
			objectValue = RuntimeHelpers.GetObjectValue(obj5);
		}
		while (Operators.ConditionalCompareObjectGreaterEqual(obj3, (object)0, false));
		if (Operators.ConditionalCompareObjectEqual(obj2, (object)1, false))
		{
			object obj7 = Strings.Mid(Conversions.ToString(obj), 2, Conversions.ToInteger(objectValue));
			object obj8 = "N";
			obj = Strings.Replace(Conversions.ToString(obj), Conversions.ToString(obj7), Conversions.ToString(Operators.ConcatenateObject(obj7, obj8)), 2, 1, (CompareMethod)0);
			if (Operators.ConditionalCompareObjectEqual(objectValue, (object)0, false))
			{
				obj = Operators.ConcatenateObject(obj8, obj);
			}
		}
		string text = Strings.Mid(Conversions.ToString(obj), 1, 5);
		object obj9 = Strings.Mid(Conversions.ToString(obj), 6, 5);
		object obj10 = Strings.Mid(Conversions.ToString(obj), 11, 5);
		object obj11 = Strings.Mid(Conversions.ToString(obj), 16, 5);
		object obj12 = Strings.Mid(Conversions.ToString(obj), 21, 5);
		return Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object)text, (object)"-"), obj9), (object)"-"), obj10), (object)"-"), obj11), (object)"-"), obj12);
	}
}
internal class Class21
{
	[DllImport("WinDivert.dll")]
	public static extern uint DivertHelperCalcChecksums(IntPtr intptr_0, int int_0, ulong ulong_0);

	[DllImport("WinDivert.dll")]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool DivertHelperParsePacket([In] IntPtr intptr_0, int int_0, ref IntPtr intptr_1, IntPtr intptr_2, IntPtr intptr_3, IntPtr intptr_4, IntPtr intptr_5, IntPtr intptr_6, IntPtr intptr_7, IntPtr intptr_8);

	[DllImport("WinDivert.dll")]
	public static extern IntPtr DivertOpen([In][MarshalAs(UnmanagedType.LPStr)] string string_0, DivertLayer divertLayer_0, short short_0, ulong ulong_0);

	[DllImport("WinDivert.dll")]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool DivertRecv([In] IntPtr intptr_0, IntPtr intptr_1, int int_0, [Out] IntPtr intptr_2, ref int int_1);

	[DllImport("WinDivert.dll")]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool DivertSend([In] IntPtr intptr_0, [In] IntPtr intptr_1, int int_0, [In] IntPtr intptr_2, IntPtr intptr_3);

	[DllImport("WinDivert.dll")]
	public static extern void DivertClose(IntPtr intptr_0);
}
internal class Class22
{
	private uint uint_0;

	private uint uint_1;

	private Guid guid_0;

	private Guid guid_1;

	private Guid guid_2;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_2)
	{
		uint_0 = uint_2;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_2)
	{
		uint_1 = uint_2;
	}

	public Guid method_4()
	{
		return guid_0;
	}

	public void method_5(Guid guid_3)
	{
		guid_0 = guid_3;
	}

	public Guid method_6()
	{
		return guid_1;
	}

	public void method_7(Guid guid_3)
	{
		guid_1 = guid_3;
	}

	public Guid method_8()
	{
		return guid_2;
	}

	public void method_9(Guid guid_3)
	{
		guid_2 = guid_3;
	}
}
internal class Class23
{
	public Class22 method_0(KMSClientProduct kmsclientProduct_0)
	{
		Class22 @class = new Class22();
		switch (kmsclientProduct_0)
		{
		case KMSClientProduct.Windows7:
			@class.method_1(25u);
			@class.method_3(262144u);
			@class.method_5(new Guid("55c92734-d682-4d71-983e-d6ec3f16059f"));
			@class.method_7(new Guid("ae2ee509-1b34-41c0-acb7-6d4650168915"));
			@class.method_9(new Guid("7fde5219-fbfa-484a-82c9-34d1ad53e856"));
			break;
		case KMSClientProduct.Windows8:
			@class.method_1(25u);
			@class.method_3(327680u);
			@class.method_5(new Guid("55c92734-d682-4d71-983e-d6ec3f16059f"));
			@class.method_7(new Guid("458e1bec-837a-45f6-b9d5-925ed5d299de"));
			@class.method_9(new Guid("3c40b358-5948-45af-923b-53d21fcc7e79"));
			break;
		case KMSClientProduct.Office2010:
			@class.method_1(5u);
			@class.method_3(262144u);
			@class.method_5(new Guid("59a52881-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("6f327760-8c5c-417c-9b61-836a98287e0c"));
			@class.method_9(new Guid("e85af946-2e25-47b7-83e1-bebcebeac611"));
			break;
		case KMSClientProduct.Office2013V5:
			@class.method_1(5u);
			@class.method_3(327680u);
			@class.method_5(new Guid("0ff1ce15-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("b322da9c-a2e2-4058-9e4e-f59a6970bd69"));
			@class.method_9(new Guid("e6a6f1bf-9d40-40c3-aa9f-c77ba21578c0"));
			break;
		case KMSClientProduct.Office2013V6:
			@class.method_1(5u);
			@class.method_3(393216u);
			@class.method_5(new Guid("0ff1ce15-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("b322da9c-a2e2-4058-9e4e-f59a6970bd69"));
			@class.method_9(new Guid("e6a6f1bf-9d40-40c3-aa9f-c77ba21578c0"));
			break;
		case KMSClientProduct.Office2016V5:
			@class.method_1(5u);
			@class.method_3(327680u);
			@class.method_5(new Guid("0ff1ce15-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("d450596f-894d-49e0-966a-fd39ed4c4c64"));
			@class.method_9(new Guid("85b5f61b-320b-4be3-814a-b76b2bfafc82"));
			break;
		case KMSClientProduct.Office2016V6:
			@class.method_1(5u);
			@class.method_3(393216u);
			@class.method_5(new Guid("0ff1ce15-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("d450596f-894d-49e0-966a-fd39ed4c4c64"));
			@class.method_9(new Guid("85b5f61b-320b-4be3-814a-b76b2bfafc82"));
			break;
		case KMSClientProduct.Windows81:
			@class.method_1(25u);
			@class.method_3(393216u);
			@class.method_5(new Guid("55c92734-d682-4d71-983e-d6ec3f16059f"));
			@class.method_7(new Guid("81671aaf-79d1-4eb1-b004-8cbbe173afea"));
			@class.method_9(new Guid("cb8fc780-2c05-495a-9710-85afffc904d7"));
			break;
		case KMSClientProduct.Windows10:
			@class.method_1(25u);
			@class.method_3(393216u);
			@class.method_5(new Guid("55c92734-d682-4d71-983e-d6ec3f16059f"));
			@class.method_7(new Guid("73111121-5638-40f6-bc11-f1d7b0d64300"));
			@class.method_9(new Guid("58e2134f-8e11-4d17-9cb2-91069c151148"));
			break;
		default:
			throw new ArgumentException(Conversions.ToString(Conversions.ToDouble("mode is invalid") + (double)kmsclientProduct_0));
		case KMSClientProduct.Office2016:
		case KMSClientProduct.Office2016V4:
			@class.method_1(5u);
			@class.method_3(262144u);
			@class.method_5(new Guid("0ff1ce15-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("d450596f-894d-49e0-966a-fd39ed4c4c64"));
			@class.method_9(new Guid("85b5f61b-320b-4be3-814a-b76b2bfafc82"));
			break;
		case KMSClientProduct.Office2013:
		case KMSClientProduct.Office2013V4:
			@class.method_1(5u);
			@class.method_3(262144u);
			@class.method_5(new Guid("0ff1ce15-a989-479d-af46-f275c6370663"));
			@class.method_7(new Guid("b322da9c-a2e2-4058-9e4e-f59a6970bd69"));
			@class.method_9(new Guid("e6a6f1bf-9d40-40c3-aa9f-c77ba21578c0"));
			break;
		case KMSClientProduct.Windows:
		case KMSClientProduct.WindowsVista:
			@class.method_1(25u);
			@class.method_3(262144u);
			@class.method_5(new Guid("55c92734-d682-4d71-983e-d6ec3f16059f"));
			@class.method_7(new Guid("cfd8ff08-c0d7-452b-9f60-ef5c70c32094"));
			@class.method_9(new Guid("212a64dc-43b1-4d3d-a30c-2fc69d2095c6"));
			break;
		}
		return @class;
	}
}
internal class Class24 : IKMSClientSettings
{
	private string string_0;

	private int int_0;

	private KMSClientProduct kmsclientProduct_0;

	private string string_1;

	private bool bool_0;

	private Guid guid_0;

	private bool bool_1;

	private LicenseStatus licenseStatus_0;

	string IKMSClientSettings.IPAddress
	{
		get
		{
			return string_0;
		}
		set
		{
			string_0 = value;
		}
	}

	int IKMSClientSettings.Port
	{
		get
		{
			return int_0;
		}
		set
		{
			int_0 = value;
		}
	}

	KMSClientProduct IKMSClientSettings.KMSClientProduct
	{
		get
		{
			return kmsclientProduct_0;
		}
		set
		{
			kmsclientProduct_0 = value;
		}
	}

	string IKMSClientSettings.ClientName
	{
		get
		{
			return string_1;
		}
		set
		{
			string_1 = value;
		}
	}

	bool IKMSClientSettings.GenerateRandomClientName
	{
		get
		{
			return bool_0;
		}
		set
		{
			bool_0 = value;
		}
	}

	Guid IKMSClientSettings.ClientMachineId
	{
		get
		{
			return guid_0;
		}
		set
		{
			guid_0 = value;
		}
	}

	bool IKMSClientSettings.GenerateRandomClientMachineId
	{
		get
		{
			return bool_1;
		}
		set
		{
			bool_1 = value;
		}
	}

	LicenseStatus IKMSClientSettings.LicenseStatus
	{
		get
		{
			return licenseStatus_0;
		}
		set
		{
			licenseStatus_0 = value;
		}
	}

	public Class24(string string_2, int int_1, KMSClientProduct kmsclientProduct_1)
	{
		AutoPico.KMSEmulator.IKMSClientSettings.IPAddress = string_2;
		AutoPico.KMSEmulator.IKMSClientSettings.Port = int_1;
		AutoPico.KMSEmulator.IKMSClientSettings.KMSClientProduct = kmsclientProduct_1;
		AutoPico.KMSEmulator.IKMSClientSettings.GenerateRandomClientMachineId = true;
		AutoPico.KMSEmulator.IKMSClientSettings.GenerateRandomClientName = true;
		AutoPico.KMSEmulator.IKMSClientSettings.ClientName = "testkmsclient.testdomain.com";
	}
}
namespace AutoPico.KMSEmulator
{
	public interface IKMSClientSettings
	{
		string IPAddress
		{
			get;
			set;
		}

		int Port
		{
			get;
			set;
		}

		KMSClientProduct KMSClientProduct
		{
			get;
			set;
		}

		string ClientName
		{
			get;
			set;
		}

		bool GenerateRandomClientName
		{
			get;
			set;
		}

		Guid ClientMachineId
		{
			get;
			set;
		}

		bool GenerateRandomClientMachineId
		{
			get;
			set;
		}

		LicenseStatus LicenseStatus
		{
			get;
			set;
		}
	}
}
internal class Class25 : IMessageHandler
{
	private Stream stream_0;

	public Class25(Stream stream_1)
	{
		stream_0 = stream_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		stream_0.Write(request, 0, request.Length);
		byte[] array = new byte[1024];
		int num = stream_0.Read(array, 0, array.Length);
		return Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array, num));
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
namespace AutoPico.KMSEmulator
{
	public interface IMessageHandler
	{
		byte[] HandleRequest(ref byte[] request);

		KMSResponse HandleRequest(ref KMSRequest request);
	}
}
internal interface Interface0
{
	KMSResponse imethod_0(ref KMSRequest kmsrequest_0);
}
internal class Class26 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	public Class26(ref IMessageHandler imessageHandler_1)
	{
		imessageHandler_0 = imessageHandler_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		byte[] request2 = method_0(ref request);
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return method_1(ref byte_);
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}

	private byte[] method_0(ref byte[] byte_0)
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		int value = byte_0.Length;
		binaryWriter.Write(value);
		binaryWriter.Write(value);
		binaryWriter.Write(byte_0);
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	private byte[] method_1(ref byte[] byte_0)
	{
		if (byte_0.Length == 12)
		{
			return byte_0;
		}
		MemoryStream input = new MemoryStream(byte_0);
		BinaryReader binaryReader = new BinaryReader(input);
		uint num = binaryReader.ReadUInt32();
		binaryReader.ReadUInt32();
		binaryReader.ReadUInt32();
		return binaryReader.ReadBytes(checked((int)num));
	}
}
internal class Class27
{
	private static readonly byte[][] byte_0 = new byte[3][]
	{
		new byte[8]
		{
			4,
			17,
			115,
			128,
			56,
			221,
			119,
			252
		},
		new byte[8]
		{
			54,
			79,
			70,
			58,
			136,
			99,
			211,
			95
		},
		new byte[8]
		{
			58,
			28,
			4,
			150,
			0,
			182,
			0,
			118
		}
	};

	private static readonly char[] char_0 = new char[16]
	{
		'0',
		'1',
		'2',
		'3',
		'4',
		'5',
		'6',
		'7',
		'8',
		'9',
		'A',
		'B',
		'C',
		'D',
		'E',
		'F'
	};

	internal static byte[] smethod_0(ref ILogger ilogger_0)
	{
		StringBuilder stringBuilder = new StringBuilder();
		int num = 0;
		do
		{
			stringBuilder.Append(Enumerable.ElementAt<char>((IEnumerable<char>)char_0, Class2.smethod_2(0, char_0.Length)));
			stringBuilder.Append(Enumerable.ElementAt<char>((IEnumerable<char>)char_0, Class2.smethod_2(0, char_0.Length)));
			num = checked(num + 1);
		}
		while (num <= 7);
		string string_ = stringBuilder.ToString();
		byte[] array = Class2.smethod_7(ref string_, ref ilogger_0);
		if (array == null)
		{
			array = Enumerable.ElementAt<byte[]>((IEnumerable<byte[]>)byte_0, Class2.smethod_2(0, byte_0.Length));
		}
		return array;
	}
}
internal class Class28 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	private readonly ILogger ilogger_0;

	public Class28(ref IMessageHandler imessageHandler_1, ref ILogger ilogger_1)
	{
		imessageHandler_0 = new Class26(ref imessageHandler_1);
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		byte byte_ = request[2];
		byte byte_2 = request[0];
		try
		{
			return method_1(ref byte_, ref byte_2).HandleRequest(ref request);
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			byte[] result = new byte[0];
			ProjectData.ClearProjectError();
			return result;
		}
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		KMSResponse result = new KMSResponse();
		try
		{
			uint uint_ = request.MajorVersion;
			result = method_0(ref uint_).HandleRequest(ref request);
			return result;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			ILogger logger = ilogger_0;
			string message = "Error: " + str;
			logger.LogMessage(ref message);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	private IMessageHandler method_0(ref uint uint_0)
	{
		IMessageHandler messageHandler = null;
		switch (uint_0)
		{
		default:
			return new Class53();
		case 4u:
		{
			ref IMessageHandler imessageHandler_3 = ref imessageHandler_0;
			ILogger ilogger_ = ilogger_0;
			return new Class39(ref imessageHandler_3, ref ilogger_);
		}
		case 5u:
		{
			ref IMessageHandler imessageHandler_2 = ref imessageHandler_0;
			ILogger ilogger_ = ilogger_0;
			return new Class44(ref imessageHandler_2, ref ilogger_);
		}
		case 6u:
		{
			ref IMessageHandler imessageHandler_ = ref imessageHandler_0;
			ILogger ilogger_ = ilogger_0;
			return new Class49(ref imessageHandler_, ref ilogger_);
		}
		}
	}

	private IMessageHandler method_1(ref byte byte_0, ref byte byte_1)
	{
		IMessageHandler messageHandler = null;
		if (byte_0 == 4 && byte_1 == 0)
		{
			ref IMessageHandler imessageHandler_ = ref imessageHandler_0;
			ILogger ilogger_ = ilogger_0;
			return new Class39(ref imessageHandler_, ref ilogger_);
		}
		if (byte_0 == 5 && byte_1 == 0)
		{
			ref IMessageHandler imessageHandler_2 = ref imessageHandler_0;
			ILogger ilogger_ = ilogger_0;
			return new Class44(ref imessageHandler_2, ref ilogger_);
		}
		if (byte_0 == 6 && byte_1 == 0)
		{
			ref IMessageHandler imessageHandler_3 = ref imessageHandler_0;
			ILogger ilogger_ = ilogger_0;
			return new Class49(ref imessageHandler_3, ref ilogger_);
		}
		return new Class53();
	}
}
internal class Class29
{
	private struct Struct0
	{
		public int int_0;

		public int int_1;

		public int int_2;

		public int int_3;

		public int int_4;

		public int int_5;

		public int int_6;
	}

	public string method_0(ref KMSRequest kmsrequest_0)
	{
		int[] array = new int[2];
		int[] array2 = new int[2];
		string[] array3 = new string[4]
		{
			"3612",
			"6401",
			"5426",
			"55041"
		};
		string[] array4 = new string[4]
		{
			"10240",
			"9600",
			"9200",
			"7601"
		};
		ArrayList arrayList = new ArrayList();
		ArrayList arrayList2 = new ArrayList();
		if ((long)kmsrequest_0.MajorVersion == 6L)
		{
			array = new int[2]
			{
				213,
				283
			};
			array2 = new int[2]
			{
				2015,
				2013
			};
		}
		else if ((long)kmsrequest_0.MajorVersion == 5L)
		{
			array = new int[1]
			{
				248
			};
			array2 = new int[1]
			{
				2012
			};
		}
		else
		{
			array = new int[1]
			{
				40
			};
			array2 = new int[1]
			{
				2011
			};
		}
		if (kmsrequest_0.ApplicationId.ToString().ToLower().Contains("59a52881-a989-479d-af46-f275c6370663"))
		{
			arrayList2.Add("96");
			arrayList.Add("199");
		}
		else if (kmsrequest_0.ApplicationId.ToString().ToLower().Contains("0ff1ce15-a989-479d-af46-f275c6370663"))
		{
			arrayList2.Add("206");
			arrayList.Add("234");
			array = new int[1]
			{
				285
			};
			array2 = new int[1]
			{
				2012
			};
		}
		else
		{
			arrayList2.Add("206");
			arrayList2.Add("168");
			arrayList2.Add("152");
			arrayList2.Add("142");
			arrayList2.Add("3308");
			arrayList.Add("26");
			arrayList.Add("152");
			arrayList.Add("199");
			arrayList.Add("234");
			arrayList.Add("305");
			arrayList.Add("312");
			arrayList.Add("313");
			arrayList.Add("314");
			arrayList.Add("339");
			arrayList.Add("381");
			arrayList.Add("271");
			arrayList.Add("311");
			arrayList.Add("310");
			arrayList.Add("330");
			arrayList.Add("109");
		}
		Struct0 @struct = default(Struct0);
		int num = Class2.smethod_2(0, array3.Length);
		@struct.int_0 = Conversions.ToInteger(array3[num]);
		if (arrayList2.Count > 1)
		{
			@struct.int_1 = Conversions.ToInteger(arrayList2[Class2.smethod_2(0, arrayList2.Count)]);
		}
		else
		{
			@struct.int_1 = Conversions.ToInteger(arrayList2[0]);
		}
		if (arrayList.Count > 1)
		{
			@struct.int_2 = Conversions.ToInteger(arrayList[Class2.smethod_2(0, arrayList.Count)]);
		}
		else
		{
			@struct.int_2 = Conversions.ToInteger(arrayList[0]);
		}
		@struct.int_3 = Class2.smethod_2(1, 1000000);
		@struct.int_4 = 3;
		@struct.int_5 = CultureInfo.InstalledUICulture.LCID;
		@struct.int_6 = Conversions.ToInteger(array4[num]);
		int year = DateTime.Now.Year;
		int dayOfYear = DateTime.Now.DayOfYear;
		int num2 = Class2.smethod_2(0, array2.Length);
		checked
		{
			int num3 = Class2.smethod_2(1, year - (array2[num2] - 1)) + array2[num2];
			if (num3 > year)
			{
				num3 = year;
			}
			int num4 = Class2.smethod_2(1, 365);
			if (num3 == year && num4 > dayOfYear)
			{
				num4 = dayOfYear;
			}
			else if (num3 == array2[num2] && num4 < array[num2])
			{
				num4 = array[num2] + 1;
			}
			return $"{@struct.int_0:D5}-{@struct.int_1:D5}-{@struct.int_2:D3}-{@struct.int_3:D6}-{@struct.int_4:D2}-{@struct.int_5}-{@struct.int_6:D4}.0000-{num4:D3}{num3:D4}";
		}
	}
}
internal abstract class Class30
{
	public abstract uint vmethod_0();

	public byte[] method_0()
	{
		return new byte[4]
		{
			0,
			0,
			2,
			0
		};
	}

	public uint method_1()
	{
		return vmethod_0();
	}

	public byte[] method_2()
	{
		long num = (long)vmethod_0() % 8L;
		if (num != 0L)
		{
			return new byte[checked((int)(8L - num - 1L) + 1)];
		}
		return new byte[0];
	}
}
internal class Class37 : Interface0
{
	private readonly IKMSServerSettings ikmsserverSettings_0;

	private readonly ILogger ilogger_0;

	public Class37(ref IKMSServerSettings ikmsserverSettings_1, ref ILogger ilogger_1)
	{
		ikmsserverSettings_0 = ikmsserverSettings_1;
		ilogger_0 = ilogger_1;
	}

	public KMSResponse imethod_0(ref KMSRequest kmsrequest_0)
	{
		return KMSResponse.Parse(kmsrequest_0, ikmsserverSettings_0);
	}
}
internal class Class38
{
	private uint uint_0;

	private uint uint_1;

	private KMSRequest kmsrequest_0;

	private byte[] byte_0;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_2)
	{
		uint_0 = uint_2;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_2)
	{
		uint_1 = uint_2;
	}

	public KMSRequest method_4()
	{
		return kmsrequest_0;
	}

	public void method_5(KMSRequest kmsrequest_1)
	{
		kmsrequest_0 = kmsrequest_1;
	}

	public byte[] method_6()
	{
		return byte_0;
	}

	public void method_7(byte[] byte_1)
	{
		byte_0 = byte_1;
	}

	public uint method_8()
	{
		checked
		{
			return (uint)(unchecked((long)method_4().BodyLength) + unchecked((long)method_6().Length));
		}
	}

	public static Class38 smethod_0(ref byte[] byte_1)
	{
		Class38 @class = new Class38();
		MemoryStream input = new MemoryStream(byte_1);
		BinaryReader binaryReader = new BinaryReader(input);
		@class.method_1(binaryReader.ReadUInt32());
		@class.method_3(binaryReader.ReadUInt32());
		byte[] decrypted = binaryReader.ReadBytes(checked(byte_1.Length - 8 - 16));
		@class.method_5(KMSRequest.Parse(ref decrypted));
		@class.method_7(binaryReader.ReadBytes(16));
		return @class;
	}

	public byte[] method_9()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_4().GetByteArray());
		binaryWriter.Write(method_6());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class31 : Class30
{
	private KMSResponse kmsresponse_0;

	private byte[] byte_0;

	public KMSResponse method_3()
	{
		return kmsresponse_0;
	}

	public void method_4(KMSResponse kmsresponse_1)
	{
		kmsresponse_0 = kmsresponse_1;
	}

	public byte[] method_5()
	{
		return byte_0;
	}

	public void method_6(byte[] byte_1)
	{
		byte_0 = byte_1;
	}

	public override uint vmethod_0()
	{
		checked
		{
			return (uint)(unchecked((long)method_3().BodyLength) + unchecked((long)method_5().Length));
		}
	}

	public static Class31 smethod_0(ref byte[] byte_1)
	{
		Class31 @class = new Class31();
		MemoryStream input = new MemoryStream(byte_1);
		BinaryReader binaryReader = new BinaryReader(input);
		@class.method_4(KMSResponse.Parse(binaryReader.ReadBytes(checked(byte_1.Length - 16))));
		@class.method_6(binaryReader.ReadBytes(16));
		return @class;
	}

	public byte[] method_7()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(vmethod_0());
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_1());
		binaryWriter.Write(method_3().GetByteArray());
		binaryWriter.Write(method_5());
		binaryWriter.Write(method_2());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class39 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	private static ILogger ilogger_0;

	public Class39(ref IMessageHandler imessageHandler_1, ref ILogger ilogger_1)
	{
		imessageHandler_0 = imessageHandler_1;
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		KMSRequest kmsrequest_ = KMSRequest.Parse(ref request);
		byte[] request2 = smethod_1(ref kmsrequest_).method_9();
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return smethod_0(ref byte_).GetByteArray();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		byte[] request2 = smethod_1(ref request).method_9();
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return smethod_0(ref byte_);
	}

	private static KMSResponse smethod_0(ref byte[] byte_0)
	{
		KMSResponse kMSResponse = new KMSResponse();
		if (byte_0.Length == 12)
		{
			kMSResponse = KMSResponse.ParseError(byte_0);
		}
		else
		{
			kMSResponse = Class31.smethod_0(ref byte_0).method_3();
			ILogger logger = ilogger_0;
			string message = string.Format("Test: Received response: v{0}, PID: {1}", kMSResponse.MajorVersion, kMSResponse.KMSPIDString.Replace("\0", string.Empty));
			logger.LogMessage(ref message);
		}
		return kMSResponse;
	}

	private static Class38 smethod_1(ref KMSRequest kmsrequest_0)
	{
		Class38 @class = new Class38();
		@class.method_5(kmsrequest_0);
		Class41 class2 = Class41.smethod_0();
		byte[] byte_ = @class.method_4().GetByteArray();
		@class.method_7(class2.method_0(ref byte_));
		ILogger logger = ilogger_0;
		string message = $"Test: Sending request: v{kmsrequest_0.MajorVersion}, AppID: {kmsrequest_0.ApplicationId}, Machine: {kmsrequest_0.MachineNameString}";
		logger.LogMessage(ref message);
		return @class;
	}
}
internal class Class40 : IMessageHandler
{
	private Interface0 interface0_0;

	private readonly ILogger ilogger_0;

	private Interface0 method_0()
	{
		return interface0_0;
	}

	private void method_1(Interface0 interface0_1)
	{
		interface0_0 = interface0_1;
	}

	public Class40(ref Interface0 interface0_1, ref ILogger ilogger_1)
	{
		method_1(interface0_1);
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		Class38 @class = Class38.smethod_0(ref request);
		ILogger logger = ilogger_0;
		string message = $"Received request: v{@class.method_4().MajorVersion}, AppID: {@class.method_4().ApplicationId}, Machine: {@class.method_4().MachineNameString}";
		logger.LogMessage(ref message);
		Interface0 @interface = method_0();
		Class38 class2;
		KMSRequest kmsrequest_ = (class2 = @class).method_4();
		KMSResponse kMSResponse = @interface.imethod_0(ref kmsrequest_);
		class2.method_5(kmsrequest_);
		KMSResponse kMSResponse2 = kMSResponse;
		Class41 class3 = Class41.smethod_0();
		byte[] byte_ = kMSResponse2.GetByteArray();
		byte[] byte_2 = class3.method_0(ref byte_);
		Class31 class4 = new Class31();
		class4.method_4(kMSResponse2);
		class4.method_6(byte_2);
		ILogger logger2 = ilogger_0;
		message = $"Sending response: v{kMSResponse2.MajorVersion}, PID: {kMSResponse2.KMSPIDString}";
		logger2.LogMessage(ref message);
		return class4.method_7();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
internal class Class41
{
	private static Class41 class41_0 = new Class41();

	private static byte[] byte_0 = new byte[256]
	{
		99,
		124,
		119,
		123,
		242,
		107,
		111,
		197,
		48,
		1,
		103,
		43,
		254,
		215,
		171,
		118,
		202,
		130,
		201,
		125,
		250,
		89,
		71,
		240,
		173,
		212,
		162,
		175,
		156,
		164,
		114,
		192,
		183,
		253,
		147,
		38,
		54,
		63,
		247,
		204,
		52,
		165,
		229,
		241,
		113,
		216,
		49,
		21,
		4,
		199,
		35,
		195,
		24,
		150,
		5,
		154,
		7,
		18,
		128,
		226,
		235,
		39,
		178,
		117,
		9,
		131,
		44,
		26,
		27,
		110,
		90,
		160,
		82,
		59,
		214,
		179,
		41,
		227,
		47,
		132,
		83,
		209,
		0,
		237,
		32,
		252,
		177,
		91,
		106,
		203,
		190,
		57,
		74,
		76,
		88,
		207,
		208,
		239,
		170,
		251,
		67,
		77,
		51,
		133,
		69,
		249,
		2,
		127,
		80,
		60,
		159,
		168,
		81,
		163,
		64,
		143,
		146,
		157,
		56,
		245,
		188,
		182,
		218,
		33,
		16,
		255,
		243,
		210,
		205,
		12,
		19,
		236,
		95,
		151,
		68,
		23,
		196,
		167,
		126,
		61,
		100,
		93,
		25,
		115,
		96,
		129,
		79,
		220,
		34,
		42,
		144,
		136,
		70,
		238,
		184,
		20,
		222,
		94,
		11,
		219,
		224,
		50,
		58,
		10,
		73,
		6,
		36,
		92,
		194,
		211,
		172,
		98,
		145,
		149,
		228,
		121,
		231,
		200,
		55,
		109,
		141,
		213,
		78,
		169,
		108,
		86,
		244,
		234,
		101,
		122,
		174,
		8,
		186,
		120,
		37,
		46,
		28,
		166,
		180,
		198,
		232,
		221,
		116,
		31,
		75,
		189,
		139,
		138,
		112,
		62,
		181,
		102,
		72,
		3,
		246,
		14,
		97,
		53,
		87,
		185,
		134,
		193,
		29,
		158,
		225,
		248,
		152,
		17,
		105,
		217,
		142,
		148,
		155,
		30,
		135,
		233,
		206,
		85,
		40,
		223,
		140,
		161,
		137,
		13,
		191,
		230,
		66,
		104,
		65,
		153,
		45,
		15,
		176,
		84,
		187,
		22
	};

	private static byte[] byte_1 = new byte[24576]
	{
		54,
		175,
		152,
		50,
		33,
		62,
		38,
		42,
		138,
		163,
		43,
		246,
		92,
		109,
		118,
		58,
		4,
		167,
		173,
		26,
		223,
		151,
		32,
		148,
		249,
		193,
		157,
		47,
		137,
		240,
		242,
		255,
		98,
		107,
		145,
		170,
		160,
		234,
		123,
		206,
		133,
		44,
		72,
		108,
		248,
		105,
		172,
		184,
		203,
		69,
		199,
		88,
		154,
		89,
		158,
		126,
		122,
		182,
		40,
		239,
		79,
		90,
		191,
		221,
		51,
		70,
		253,
		7,
		222,
		84,
		71,
		113,
		190,
		116,
		217,
		114,
		102,
		15,
		238,
		139,
		161,
		125,
		6,
		236,
		140,
		14,
		176,
		93,
		17,
		23,
		146,
		5,
		150,
		55,
		100,
		227,
		16,
		30,
		216,
		110,
		178,
		141,
		166,
		247,
		97,
		13,
		245,
		194,
		164,
		24,
		34,
		95,
		192,
		207,
		168,
		101,
		254,
		12,
		210,
		29,
		162,
		77,
		143,
		174,
		235,
		225,
		124,
		135,
		202,
		2,
		74,
		25,
		81,
		144,
		177,
		78,
		0,
		57,
		46,
		68,
		250,
		153,
		96,
		35,
		119,
		127,
		213,
		205,
		220,
		61,
		129,
		18,
		3,
		131,
		134,
		86,
		179,
		27,
		73,
		229,
		91,
		20,
		1,
		121,
		111,
		189,
		87,
		103,
		200,
		204,
		36,
		185,
		142,
		159,
		63,
		241,
		136,
		208,
		244,
		19,
		149,
		186,
		48,
		106,
		39,
		56,
		85,
		243,
		11,
		49,
		183,
		169,
		251,
		65,
		155,
		233,
		37,
		231,
		115,
		120,
		224,
		22,
		215,
		214,
		128,
		181,
		66,
		41,
		94,
		21,
		83,
		171,
		99,
		45,
		59,
		232,
		156,
		219,
		195,
		64,
		104,
		60,
		228,
		10,
		132,
		52,
		201,
		211,
		165,
		188,
		76,
		197,
		8,
		147,
		130,
		117,
		67,
		198,
		180,
		218,
		187,
		226,
		53,
		31,
		252,
		209,
		80,
		212,
		9,
		237,
		75,
		230,
		196,
		28,
		82,
		112,
		47,
		227,
		125,
		186,
		26,
		15,
		234,
		136,
		158,
		16,
		146,
		13,
		207,
		12,
		203,
		43,
		208,
		121,
		29,
		57,
		173,
		60,
		249,
		237,
		55,
		62,
		196,
		255,
		245,
		191,
		46,
		155,
		172,
		148,
		200,
		122,
		220,
		165,
		167,
		170,
		81,
		242,
		248,
		79,
		138,
		194,
		117,
		193,
		223,
		246,
		126,
		163,
		9,
		56,
		35,
		111,
		99,
		250,
		205,
		103,
		116,
		107,
		115,
		127,
		247,
		24,
		218,
		251,
		190,
		180,
		41,
		210,
		149,
		154,
		253,
		48,
		171,
		89,
		135,
		72,
		52,
		88,
		160,
		151,
		241,
		77,
		119,
		10,
		69,
		75,
		141,
		59,
		231,
		216,
		243,
		162,
		68,
		66,
		199,
		80,
		195,
		98,
		49,
		182,
		244,
		40,
		83,
		185,
		217,
		91,
		229,
		8,
		235,
		33,
		140,
		39,
		51,
		90,
		187,
		222,
		102,
		19,
		168,
		82,
		139,
		1,
		18,
		36,
		114,
		109,
		0,
		166,
		94,
		100,
		226,
		252,
		221,
		133,
		161,
		70,
		192,
		239,
		101,
		63,
		157,
		153,
		113,
		236,
		219,
		202,
		106,
		164,
		14,
		65,
		84,
		44,
		58,
		232,
		2,
		50,
		86,
		214,
		211,
		3,
		230,
		78,
		28,
		176,
		34,
		42,
		128,
		152,
		137,
		104,
		212,
		71,
		85,
		108,
		123,
		17,
		175,
		204,
		53,
		118,
		159,
		87,
		31,
		76,
		4,
		197,
		228,
		27,
		92,
		184,
		30,
		179,
		145,
		73,
		7,
		37,
		238,
		183,
		96,
		74,
		169,
		132,
		5,
		129,
		93,
		198,
		215,
		32,
		22,
		147,
		225,
		143,
		209,
		97,
		156,
		134,
		240,
		233,
		25,
		144,
		201,
		142,
		150,
		21,
		61,
		105,
		177,
		95,
		11,
		64,
		6,
		254,
		54,
		120,
		110,
		189,
		181,
		67,
		130,
		131,
		213,
		224,
		23,
		124,
		174,
		20,
		206,
		188,
		112,
		178,
		38,
		45,
		82,
		173,
		178,
		115,
		169,
		250,
		41,
		225,
		131,
		192,
		25,
		122,
		205,
		167,
		227,
		218,
		98,
		241,
		63,
		222,
		54,
		46,
		148,
		156,
		170,
		6,
		80,
		248,
		101,
		181,
		224,
		96,
		180,
		132,
		140,
		94,
		226,
		154,
		184,
		247,
		220,
		18,
		109,
		124,
		199,
		90,
		43,
		47,
		211,
		137,
		118,
		89,
		23,
		240,
		107,
		51,
		84,
		74,
		232,
		210,
		182,
		16,
		196,
		219,
		144,
		155,
		198,
		4,
		120,
		10,
		24,
		162,
		161,
		202,
		99,
		86,
		52,
		53,
		3,
		245,
		216,
		11,
		128,
		206,
		176,
		72,
		189,
		246,
		7,
		233,
		139,
		223,
		32,
		163,
		127,
		56,
		175,
		38,
		70,
		95,
		42,
		48,
		103,
		215,
		87,
		57,
		160,
		37,
		97,
		150,
		235,
		112,
		179,
		55,
		31,
		50,
		214,
		252,
		88,
		1,
		177,
		147,
		39,
		255,
		168,
		5,
		234,
		14,
		197,
		201,
		194,
		221,
		123,
		209,
		213,
		76,
		149,
		217,
		191,
		142,
		200,
		21,
		105,
		64,
		195,
		119,
		60,
		116,
		78,
		249,
		231,
		68,
		17,
		28,
		106,
		19,
		126,
		204,
		26,
		34,
		152,
		45,
		67,
		9,
		114,
		73,
		129,
		136,
		79,
		91,
		27,
		138,
		171,
		143,
		102,
		207,
		125,
		157,
		121,
		186,
		36,
		187,
		40,
		166,
		92,
		62,
		172,
		185,
		203,
		12,
		153,
		85,
		164,
		146,
		61,
		183,
		30,
		228,
		208,
		165,
		13,
		104,
		133,
		236,
		58,
		145,
		93,
		151,
		83,
		190,
		111,
		237,
		229,
		15,
		66,
		158,
		135,
		0,
		117,
		212,
		113,
		230,
		242,
		244,
		69,
		20,
		81,
		110,
		59,
		141,
		243,
		253,
		193,
		188,
		71,
		251,
		22,
		33,
		130,
		238,
		49,
		254,
		29,
		239,
		75,
		134,
		35,
		44,
		159,
		100,
		8,
		2,
		108,
		77,
		65,
		174,
		81,
		251,
		255,
		102,
		239,
		227,
		232,
		247,
		226,
		63,
		67,
		106,
		191,
		243,
		149,
		164,
		100,
		211,
		205,
		110,
		233,
		93,
		22,
		94,
		84,
		230,
		48,
		8,
		59,
		54,
		64,
		57,
		88,
		99,
		171,
		162,
		178,
		7,
		105,
		35,
		129,
		165,
		76,
		229,
		101,
		113,
		49,
		160,
		14,
		145,
		2,
		140,
		87,
		183,
		83,
		144,
		225,
		38,
		179,
		127,
		118,
		20,
		134,
		147,
		52,
		206,
		250,
		143,
		142,
		184,
		23,
		157,
		16,
		187,
		119,
		189,
		39,
		66,
		175,
		198,
		207,
		37,
		104,
		180,
		121,
		148,
		69,
		199,
		91,
		204,
		216,
		222,
		173,
		42,
		95,
		254,
		17,
		167,
		217,
		215,
		111,
		62,
		123,
		68,
		60,
		11,
		168,
		196,
		235,
		150,
		109,
		209,
		97,
		172,
		9,
		6,
		27,
		212,
		55,
		197,
		70,
		103,
		107,
		132,
		181,
		78,
		34,
		40,
		131,
		208,
		3,
		203,
		120,
		135,
		152,
		89,
		231,
		141,
		201,
		240,
		169,
		234,
		51,
		80,
		28,
		4,
		190,
		182,
		72,
		219,
		21,
		244,
		79,
		159,
		202,
		74,
		128,
		44,
		122,
		210,
		200,
		176,
		146,
		221,
		158,
		174,
		166,
		116,
		237,
		112,
		1,
		5,
		246,
		56,
		71,
		86,
		61,
		218,
		65,
		25,
		249,
		163,
		92,
		115,
		156,
		58,
		238,
		241,
		126,
		96,
		194,
		248,
		82,
		32,
		50,
		136,
		186,
		177,
		236,
		46,
		30,
		31,
		41,
		223,
		139,
		224,
		73,
		124,
		154,
		98,
		151,
		220,
		242,
		33,
		170,
		228,
		10,
		137,
		85,
		18,
		45,
		195,
		161,
		245,
		0,
		26,
		77,
		253,
		133,
		12,
		108,
		117,
		75,
		188,
		193,
		90,
		125,
		19,
		138,
		15,
		252,
		214,
		114,
		43,
		153,
		29,
		53,
		24,
		130,
		47,
		192,
		36,
		155,
		185,
		13,
		213,
		84,
		140,
		194,
		224,
		153,
		125,
		219,
		118,
		108,
		65,
		192,
		68,
		43,
		114,
		165,
		143,
		211,
		86,
		36,
		74,
		152,
		3,
		18,
		229,
		53,
		44,
		220,
		85,
		20,
		164,
		89,
		67,
		248,
		172,
		116,
		154,
		12,
		75,
		83,
		208,
		243,
		189,
		171,
		120,
		206,
		133,
		195,
		59,
		16,
		37,
		210,
		185,
		112,
		134,
		71,
		70,
		181,
		119,
		227,
		232,
		107,
		209,
		11,
		121,
		155,
		161,
		39,
		57,
		183,
		168,
		197,
		99,
		5,
		42,
		160,
		250,
		24,
		64,
		100,
		131,
		30,
		15,
		175,
		97,
		88,
		92,
		180,
		41,
		255,
		45,
		199,
		247,
		203,
		132,
		145,
		233,
		35,
		139,
		217,
		117,
		147,
		19,
		22,
		198,
		76,
		173,
		17,
		130,
		231,
		239,
		69,
		93,
		106,
		9,
		240,
		179,
		144,
		169,
		190,
		212,
		193,
		0,
		33,
		222,
		90,
		146,
		218,
		137,
		123,
		113,
		236,
		23,
		50,
		221,
		31,
		62,
		110,
		156,
		66,
		141,
		80,
		95,
		56,
		245,
		52,
		136,
		178,
		207,
		241,
		157,
		101,
		82,
		34,
		29,
		54,
		103,
		128,
		142,
		72,
		254,
		6,
		167,
		244,
		115,
		129,
		135,
		2,
		149,
		28,
		158,
		32,
		205,
		49,
		237,
		150,
		124,
		246,
		159,
		126,
		27,
		46,
		228,
		73,
		226,
		78,
		196,
		215,
		225,
		163,
		214,
		109,
		151,
		223,
		202,
		47,
		77,
		234,
		38,
		184,
		127,
		10,
		201,
		14,
		238,
		91,
		213,
		87,
		200,
		104,
		249,
		60,
		40,
		21,
		188,
		216,
		252,
		48,
		122,
		235,
		94,
		242,
		251,
		1,
		58,
		25,
		96,
		98,
		111,
		105,
		81,
		13,
		191,
		79,
		7,
		176,
		4,
		148,
		55,
		61,
		138,
		204,
		253,
		230,
		170,
		26,
		51,
		187,
		102,
		177,
		174,
		182,
		186,
		166,
		63,
		8,
		162,
		223,
		111,
		146,
		136,
		254,
		231,
		23,
		158,
		83,
		200,
		217,
		46,
		24,
		157,
		239,
		129,
		224,
		185,
		110,
		68,
		167,
		138,
		11,
		143,
		82,
		182,
		16,
		189,
		159,
		71,
		9,
		43,
		160,
		26,
		192,
		178,
		126,
		188,
		40,
		35,
		187,
		77,
		140,
		141,
		219,
		238,
		25,
		114,
		5,
		78,
		8,
		240,
		56,
		118,
		96,
		179,
		199,
		128,
		152,
		27,
		51,
		103,
		191,
		81,
		0,
		79,
		90,
		34,
		52,
		230,
		12,
		60,
		147,
		151,
		127,
		226,
		213,
		196,
		100,
		170,
		211,
		139,
		175,
		72,
		206,
		225,
		107,
		49,
		124,
		99,
		14,
		168,
		80,
		106,
		236,
		242,
		145,
		89,
		17,
		66,
		10,
		203,
		234,
		21,
		91,
		98,
		117,
		31,
		161,
		194,
		59,
		120,
		44,
		36,
		142,
		150,
		135,
		102,
		218,
		73,
		88,
		216,
		221,
		13,
		232,
		64,
		18,
		190,
		75,
		69,
		131,
		53,
		233,
		214,
		253,
		172,
		58,
		86,
		174,
		153,
		255,
		67,
		121,
		4,
		155,
		148,
		243,
		62,
		165,
		87,
		137,
		70,
		249,
		22,
		212,
		245,
		176,
		186,
		39,
		220,
		104,
		29,
		166,
		92,
		133,
		15,
		28,
		42,
		229,
		47,
		130,
		41,
		61,
		84,
		181,
		208,
		250,
		38,
		93,
		183,
		215,
		85,
		235,
		6,
		74,
		76,
		201,
		94,
		205,
		108,
		63,
		184,
		57,
		48,
		202,
		241,
		251,
		177,
		32,
		149,
		222,
		119,
		19,
		55,
		163,
		50,
		247,
		227,
		144,
		30,
		156,
		3,
		193,
		2,
		197,
		37,
		33,
		237,
		115,
		180,
		20,
		1,
		228,
		134,
		109,
		244,
		195,
		105,
		122,
		101,
		125,
		113,
		209,
		248,
		112,
		173,
		7,
		54,
		45,
		97,
		95,
		252,
		246,
		65,
		132,
		204,
		123,
		207,
		162,
		154,
		198,
		116,
		210,
		171,
		169,
		164,
		178,
		159,
		183,
		51,
		129,
		216,
		124,
		86,
		127,
		167,
		19,
		49,
		142,
		106,
		133,
		40,
		223,
		198,
		166,
		47,
		87,
		231,
		176,
		170,
		165,
		32,
		185,
		215,
		240,
		107,
		22,
		225,
		78,
		0,
		139,
		88,
		118,
		61,
		200,
		48,
		95,
		11,
		105,
		135,
		184,
		255,
		35,
		160,
		132,
		70,
		27,
		16,
		34,
		152,
		138,
		248,
		214,
		227,
		74,
		33,
		117,
		131,
		181,
		180,
		217,
		246,
		9,
		83,
		179,
		235,
		112,
		151,
		82,
		104,
		202,
		212,
		91,
		68,
		144,
		54,
		222,
		12,
		4,
		52,
		119,
		56,
		26,
		98,
		252,
		237,
		146,
		92,
		175,
		171,
		218,
		71,
		94,
		191,
		113,
		226,
		28,
		20,
		174,
		182,
		120,
		208,
		134,
		42,
		224,
		96,
		53,
		229,
		243,
		50,
		45,
		210,
		97,
		169,
		122,
		41,
		250,
		153,
		64,
		3,
		90,
		99,
		39,
		77,
		111,
		157,
		126,
		177,
		172,
		163,
		6,
		203,
		130,
		136,
		228,
		31,
		46,
		193,
		205,
		236,
		238,
		209,
		148,
		197,
		125,
		115,
		13,
		187,
		123,
		199,
		60,
		65,
		110,
		2,
		161,
		150,
		109,
		239,
		62,
		211,
		30,
		194,
		143,
		101,
		84,
		245,
		128,
		7,
		116,
		114,
		102,
		241,
		55,
		189,
		18,
		36,
		37,
		80,
		100,
		158,
		108,
		5,
		232,
		141,
		23,
		221,
		17,
		186,
		58,
		249,
		29,
		253,
		38,
		168,
		59,
		164,
		57,
		44,
		190,
		220,
		213,
		25,
		140,
		75,
		137,
		195,
		173,
		24,
		8,
		1,
		201,
		242,
		10,
		155,
		219,
		207,
		79,
		230,
		15,
		43,
		244,
		188,
		247,
		67,
		196,
		103,
		121,
		206,
		147,
		234,
		156,
		145,
		162,
		154,
		76,
		254,
		93,
		66,
		73,
		69,
		204,
		85,
		81,
		251,
		14,
		63,
		89,
		21,
		192,
		233,
		149,
		72,
		252,
		159,
		70,
		5,
		92,
		101,
		33,
		75,
		245,
		52,
		43,
		212,
		103,
		175,
		124,
		47,
		126,
		214,
		128,
		44,
		230,
		102,
		51,
		227,
		88,
		185,
		119,
		228,
		26,
		18,
		168,
		176,
		250,
		235,
		148,
		90,
		169,
		173,
		220,
		65,
		216,
		10,
		2,
		50,
		113,
		62,
		28,
		100,
		84,
		110,
		204,
		210,
		93,
		66,
		150,
		48,
		223,
		240,
		15,
		85,
		181,
		237,
		118,
		145,
		208,
		229,
		76,
		39,
		115,
		133,
		179,
		178,
		130,
		64,
		29,
		22,
		36,
		158,
		140,
		254,
		89,
		13,
		111,
		129,
		190,
		249,
		37,
		166,
		72,
		6,
		141,
		94,
		112,
		59,
		206,
		54,
		163,
		38,
		191,
		209,
		246,
		109,
		16,
		231,
		217,
		192,
		160,
		41,
		81,
		225,
		182,
		172,
		121,
		161,
		21,
		55,
		136,
		108,
		131,
		46,
		180,
		153,
		177,
		53,
		135,
		222,
		122,
		80,
		8,
		57,
		95,
		19,
		198,
		239,
		147,
		78,
		91,
		68,
		79,
		67,
		202,
		83,
		87,
		253,
		149,
		236,
		154,
		151,
		164,
		156,
		74,
		248,
		242,
		186,
		241,
		69,
		194,
		97,
		127,
		200,
		12,
		157,
		221,
		201,
		73,
		224,
		9,
		45,
		143,
		197,
		171,
		30,
		14,
		7,
		207,
		244,
		63,
		42,
		184,
		218,
		211,
		31,
		138,
		77,
		60,
		255,
		27,
		251,
		32,
		174,
		61,
		162,
		106,
		3,
		238,
		139,
		17,
		219,
		23,
		188,
		49,
		187,
		20,
		34,
		35,
		86,
		98,
		152,
		82,
		243,
		134,
		1,
		114,
		116,
		96,
		247,
		107,
		233,
		56,
		213,
		24,
		196,
		137,
		99,
		125,
		193,
		58,
		71,
		104,
		4,
		167,
		144,
		232,
		215,
		146,
		195,
		123,
		117,
		11,
		189,
		132,
		142,
		226,
		25,
		40,
		199,
		203,
		234,
		105,
		155,
		120,
		183,
		170,
		165,
		0,
		205,
		168,
		198,
		95,
		218,
		158,
		105,
		20,
		143,
		80,
		217,
		185,
		160,
		213,
		207,
		152,
		40,
		78,
		108,
		216,
		0,
		87,
		250,
		21,
		241,
		76,
		200,
		224,
		205,
		41,
		3,
		167,
		254,
		94,
		53,
		156,
		169,
		203,
		202,
		252,
		10,
		111,
		100,
		57,
		251,
		135,
		245,
		231,
		93,
		248,
		22,
		116,
		32,
		223,
		92,
		128,
		199,
		39,
		244,
		127,
		49,
		79,
		183,
		66,
		9,
		35,
		237,
		146,
		131,
		56,
		165,
		212,
		208,
		75,
		123,
		115,
		161,
		29,
		101,
		71,
		8,
		171,
		181,
		23,
		45,
		73,
		239,
		59,
		36,
		44,
		118,
		137,
		166,
		232,
		15,
		148,
		204,
		124,
		63,
		230,
		133,
		50,
		88,
		28,
		37,
		173,
		82,
		77,
		140,
		86,
		5,
		214,
		30,
		85,
		249,
		175,
		7,
		154,
		74,
		31,
		159,
		157,
		14,
		192,
		33,
		201,
		209,
		107,
		99,
		62,
		67,
		184,
		4,
		233,
		222,
		125,
		17,
		186,
		235,
		174,
		145,
		196,
		114,
		12,
		2,
		96,
		155,
		247,
		253,
		147,
		178,
		190,
		81,
		206,
		1,
		226,
		16,
		180,
		121,
		220,
		211,
		242,
		151,
		122,
		19,
		197,
		110,
		162,
		104,
		91,
		109,
		194,
		72,
		225,
		27,
		47,
		90,
		120,
		255,
		138,
		43,
		142,
		25,
		13,
		11,
		172,
		65,
		144,
		18,
		26,
		240,
		189,
		97,
		176,
		164,
		228,
		117,
		84,
		112,
		153,
		48,
		103,
		210,
		188,
		246,
		141,
		182,
		126,
		119,
		163,
		193,
		83,
		70,
		52,
		243,
		102,
		170,
		130,
		98,
		134,
		69,
		219,
		68,
		215,
		89,
		106,
		38,
		64,
		113,
		55,
		234,
		150,
		191,
		58,
		54,
		61,
		34,
		132,
		46,
		42,
		179,
		238,
		227,
		149,
		236,
		129,
		51,
		229,
		221,
		60,
		136,
		195,
		139,
		177,
		6,
		24,
		187,
		186,
		45,
		168,
		174,
		92,
		219,
		136,
		41,
		83,
		185,
		194,
		30,
		226,
		15,
		177,
		51,
		205,
		102,
		203,
		1,
		52,
		81,
		176,
		217,
		184,
		66,
		249,
		140,
		206,
		248,
		235,
		97,
		17,
		48,
		242,
		29,
		56,
		195,
		94,
		84,
		218,
		23,
		112,
		127,
		162,
		109,
		179,
		65,
		125,
		74,
		178,
		222,
		224,
		157,
		167,
		27,
		209,
		103,
		161,
		175,
		72,
		25,
		50,
		13,
		144,
		34,
		126,
		70,
		64,
		77,
		79,
		54,
		165,
		18,
		24,
		187,
		43,
		159,
		40,
		96,
		73,
		148,
		28,
		53,
		133,
		201,
		210,
		227,
		141,
		39,
		16,
		137,
		149,
		153,
		129,
		158,
		80,
		151,
		9,
		197,
		98,
		0,
		229,
		240,
		231,
		120,
		250,
		116,
		193,
		33,
		230,
		37,
		211,
		247,
		147,
		58,
		7,
		19,
		214,
		71,
		21,
		46,
		212,
		221,
		113,
		196,
		85,
		31,
		255,
		124,
		100,
		35,
		181,
		91,
		131,
		215,
		20,
		236,
		170,
		225,
		87,
		132,
		146,
		220,
		105,
		104,
		169,
		95,
		150,
		253,
		10,
		63,
		86,
		36,
		254,
		68,
		199,
		204,
		88,
		154,
		89,
		244,
		82,
		182,
		207,
		237,
		163,
		123,
		160,
		138,
		93,
		4,
		107,
		239,
		110,
		67,
		202,
		61,
		44,
		183,
		101,
		11,
		121,
		252,
		108,
		118,
		139,
		59,
		122,
		243,
		3,
		26,
		233,
		57,
		60,
		188,
		90,
		246,
		164,
		12,
		114,
		106,
		192,
		200,
		173,
		62,
		130,
		99,
		251,
		145,
		134,
		191,
		156,
		223,
		38,
		69,
		166,
		245,
		189,
		117,
		241,
		14,
		47,
		238,
		76,
		234,
		135,
		152,
		22,
		8,
		142,
		180,
		172,
		75,
		111,
		55,
		213,
		143,
		5,
		42,
		6,
		155,
		115,
		119,
		78,
		128,
		32,
		49,
		198,
		190,
		171,
		228,
		216,
		232,
		2,
		208,
		81,
		41,
		60,
		115,
		79,
		127,
		149,
		71,
		145,
		12,
		228,
		224,
		217,
		23,
		183,
		166,
		59,
		220,
		248,
		160,
		66,
		24,
		146,
		189,
		219,
		125,
		16,
		15,
		129,
		159,
		25,
		35,
		49,
		98,
		42,
		226,
		102,
		153,
		184,
		121,
		108,
		6,
		17,
		40,
		11,
		72,
		177,
		210,
		229,
		253,
		87,
		95,
		58,
		169,
		21,
		244,
		126,
		174,
		171,
		43,
		205,
		97,
		51,
		155,
		251,
		225,
		28,
		172,
		237,
		100,
		148,
		141,
		93,
		170,
		187,
		32,
		242,
		156,
		238,
		107,
		55,
		29,
		202,
		147,
		252,
		120,
		249,
		212,
		206,
		99,
		197,
		33,
		88,
		122,
		52,
		236,
		193,
		179,
		105,
		211,
		80,
		91,
		207,
		13,
		254,
		255,
		62,
		200,
		1,
		106,
		157,
		168,
		131,
		123,
		61,
		118,
		192,
		19,
		5,
		75,
		104,
		235,
		243,
		180,
		34,
		204,
		20,
		64,
		130,
		185,
		67,
		74,
		230,
		83,
		194,
		136,
		68,
		96,
		4,
		173,
		144,
		132,
		65,
		208,
		112,
		239,
		109,
		227,
		86,
		182,
		113,
		178,
		199,
		0,
		158,
		82,
		245,
		151,
		114,
		103,
		26,
		176,
		135,
		30,
		2,
		14,
		22,
		9,
		222,
		3,
		139,
		162,
		18,
		94,
		69,
		116,
		50,
		133,
		143,
		44,
		188,
		8,
		191,
		247,
		7,
		181,
		233,
		209,
		215,
		218,
		216,
		161,
		70,
		240,
		54,
		56,
		223,
		142,
		165,
		154,
		234,
		221,
		37,
		73,
		119,
		10,
		48,
		140,
		77,
		128,
		231,
		232,
		53,
		250,
		36,
		214,
		134,
		167,
		101,
		138,
		175,
		84,
		201,
		195,
		47,
		213,
		110,
		27,
		89,
		111,
		124,
		246,
		90,
		241,
		92,
		150,
		163,
		198,
		39,
		78,
		196,
		46,
		85,
		137,
		117,
		152,
		38,
		164,
		45,
		186,
		63,
		57,
		203,
		76,
		31,
		190,
		94,
		226,
		25,
		100,
		75,
		39,
		132,
		179,
		203,
		244,
		177,
		224,
		88,
		86,
		40,
		158,
		167,
		173,
		193,
		58,
		11,
		228,
		232,
		201,
		74,
		184,
		91,
		148,
		137,
		134,
		35,
		238,
		73,
		32,
		205,
		168,
		50,
		248,
		52,
		159,
		18,
		152,
		55,
		1,
		0,
		117,
		65,
		187,
		113,
		208,
		165,
		34,
		81,
		87,
		67,
		212,
		72,
		202,
		27,
		246,
		59,
		231,
		170,
		64,
		47,
		190,
		254,
		234,
		106,
		195,
		42,
		14,
		172,
		230,
		136,
		61,
		45,
		36,
		236,
		215,
		28,
		9,
		155,
		249,
		240,
		60,
		169,
		110,
		31,
		220,
		56,
		216,
		3,
		141,
		30,
		129,
		43,
		26,
		124,
		48,
		229,
		204,
		176,
		109,
		120,
		103,
		108,
		96,
		233,
		112,
		116,
		222,
		182,
		207,
		185,
		180,
		135,
		191,
		105,
		219,
		209,
		153,
		210,
		102,
		225,
		66,
		92,
		235,
		128,
		5,
		156,
		242,
		213,
		78,
		51,
		196,
		250,
		227,
		131,
		10,
		114,
		194,
		149,
		143,
		90,
		130,
		54,
		20,
		171,
		79,
		160,
		13,
		151,
		186,
		146,
		22,
		164,
		253,
		89,
		115,
		243,
		198,
		111,
		4,
		80,
		166,
		144,
		145,
		161,
		99,
		62,
		53,
		7,
		189,
		175,
		221,
		122,
		46,
		76,
		162,
		157,
		218,
		6,
		133,
		107,
		37,
		174,
		125,
		83,
		24,
		237,
		21,
		217,
		200,
		183,
		121,
		138,
		142,
		255,
		98,
		251,
		41,
		33,
		17,
		82,
		29,
		63,
		71,
		119,
		77,
		239,
		241,
		126,
		97,
		181,
		19,
		252,
		211,
		44,
		118,
		150,
		206,
		85,
		178,
		223,
		188,
		101,
		38,
		127,
		70,
		2,
		104,
		214,
		23,
		8,
		247,
		68,
		140,
		95,
		12,
		93,
		245,
		163,
		15,
		197,
		69,
		16,
		192,
		123,
		154,
		84,
		199,
		57,
		49,
		139,
		147,
		42,
		70,
		229,
		210,
		63,
		131,
		120,
		5,
		57,
		55,
		73,
		255,
		170,
		149,
		208,
		129,
		106,
		133,
		137,
		168,
		198,
		204,
		160,
		91,
		232,
		231,
		66,
		143,
		43,
		217,
		58,
		245,
		83,
		153,
		85,
		254,
		40,
		65,
		172,
		201,
		97,
		20,
		32,
		218,
		115,
		249,
		86,
		96,
		48,
		54,
		34,
		181,
		16,
		177,
		196,
		67,
		90,
		134,
		203,
		33,
		41,
		171,
		122,
		151,
		11,
		162,
		75,
		111,
		78,
		223,
		159,
		139,
		76,
		69,
		141,
		182,
		205,
		135,
		233,
		92,
		145,
		93,
		200,
		15,
		125,
		104,
		250,
		152,
		98,
		236,
		127,
		224,
		126,
		189,
		89,
		185,
		132,
		173,
		209,
		12,
		74,
		123,
		29,
		81,
		136,
		17,
		21,
		191,
		25,
		6,
		13,
		1,
		230,
		222,
		8,
		186,
		215,
		174,
		216,
		213,
		128,
		35,
		61,
		138,
		176,
		248,
		179,
		7,
		180,
		47,
		82,
		165,
		225,
		100,
		253,
		147,
		19,
		163,
		244,
		238,
		155,
		130,
		226,
		107,
		202,
		46,
		193,
		108,
		59,
		227,
		87,
		117,
		197,
		156,
		56,
		18,
		246,
		219,
		243,
		119,
		49,
		199,
		241,
		240,
		146,
		167,
		14,
		101,
		102,
		220,
		206,
		188,
		192,
		2,
		95,
		84,
		252,
		187,
		103,
		228,
		27,
		79,
		45,
		195,
		50,
		121,
		140,
		116,
		10,
		68,
		207,
		28,
		235,
		239,
		158,
		3,
		184,
		169,
		214,
		24,
		51,
		124,
		94,
		38,
		154,
		72,
		64,
		112,
		31,
		0,
		212,
		114,
		22,
		44,
		142,
		144,
		247,
		175,
		52,
		211,
		157,
		178,
		77,
		23,
		30,
		39,
		99,
		9,
		190,
		221,
		4,
		71,
		37,
		237,
		62,
		109,
		183,
		118,
		105,
		150,
		164,
		36,
		113,
		161,
		60,
		148,
		194,
		110,
		88,
		80,
		234,
		242,
		26,
		251,
		53,
		166,
		103,
		74,
		98,
		230,
		84,
		13,
		169,
		131,
		170,
		114,
		198,
		228,
		91,
		191,
		80,
		253,
		10,
		19,
		115,
		250,
		130,
		50,
		101,
		127,
		112,
		245,
		108,
		2,
		37,
		190,
		195,
		52,
		155,
		213,
		94,
		141,
		163,
		232,
		29,
		229,
		138,
		222,
		188,
		82,
		109,
		42,
		246,
		117,
		81,
		147,
		206,
		197,
		247,
		77,
		95,
		45,
		3,
		54,
		159,
		244,
		160,
		86,
		96,
		97,
		12,
		35,
		220,
		134,
		102,
		62,
		165,
		66,
		135,
		189,
		31,
		1,
		142,
		145,
		69,
		227,
		11,
		217,
		209,
		225,
		162,
		237,
		207,
		183,
		41,
		56,
		71,
		137,
		122,
		126,
		15,
		146,
		139,
		106,
		164,
		55,
		201,
		193,
		123,
		99,
		173,
		5,
		83,
		255,
		53,
		181,
		224,
		48,
		38,
		231,
		248,
		7,
		180,
		124,
		175,
		252,
		47,
		76,
		149,
		214,
		143,
		182,
		242,
		152,
		186,
		72,
		171,
		100,
		121,
		118,
		211,
		30,
		87,
		93,
		49,
		202,
		251,
		20,
		24,
		57,
		59,
		4,
		65,
		16,
		168,
		166,
		216,
		110,
		174,
		18,
		233,
		148,
		187,
		215,
		116,
		67,
		184,
		58,
		235,
		6,
		203,
		23,
		90,
		176,
		129,
		32,
		85,
		210,
		161,
		167,
		179,
		36,
		226,
		104,
		199,
		241,
		240,
		133,
		177,
		75,
		185,
		208,
		61,
		88,
		194,
		8,
		196,
		111,
		239,
		44,
		200,
		40,
		243,
		125,
		238,
		113,
		236,
		249,
		107,
		9,
		0,
		204,
		89,
		158,
		92,
		22,
		120,
		205,
		221,
		212,
		28,
		39,
		223,
		78,
		14,
		26,
		154,
		51,
		218,
		254,
		33,
		105,
		34,
		150,
		17,
		178,
		172,
		27,
		70,
		63,
		73,
		68,
		119,
		79,
		153,
		43,
		136,
		151,
		156,
		144,
		25,
		128,
		132,
		46,
		219,
		234,
		140,
		192,
		21,
		60,
		64,
		157,
		105,
		246,
		101,
		235,
		48,
		208,
		52,
		247,
		134,
		65,
		212,
		24,
		17,
		115,
		225,
		244,
		63,
		4,
		204,
		197,
		213,
		96,
		14,
		68,
		230,
		194,
		43,
		130,
		2,
		22,
		86,
		199,
		3,
		180,
		170,
		9,
		142,
		58,
		113,
		57,
		51,
		129,
		87,
		111,
		92,
		81,
		39,
		94,
		54,
		156,
		152,
		1,
		136,
		132,
		143,
		144,
		133,
		88,
		36,
		13,
		216,
		148,
		242,
		195,
		6,
		203,
		110,
		97,
		124,
		179,
		80,
		162,
		33,
		0,
		12,
		227,
		210,
		41,
		69,
		79,
		118,
		192,
		190,
		176,
		8,
		89,
		28,
		35,
		91,
		108,
		207,
		163,
		140,
		241,
		10,
		182,
		168,
		66,
		15,
		211,
		30,
		243,
		34,
		160,
		60,
		171,
		191,
		185,
		202,
		77,
		56,
		153,
		83,
		169,
		157,
		232,
		233,
		223,
		112,
		250,
		119,
		220,
		16,
		218,
		64,
		37,
		200,
		161,
		90,
		189,
		38,
		126,
		158,
		196,
		59,
		20,
		251,
		93,
		137,
		150,
		25,
		7,
		165,
		159,
		175,
		215,
		245,
		186,
		249,
		201,
		193,
		19,
		138,
		23,
		102,
		98,
		145,
		95,
		32,
		49,
		123,
		99,
		217,
		209,
		47,
		188,
		114,
		147,
		40,
		248,
		173,
		45,
		231,
		75,
		29,
		181,
		228,
		183,
		100,
		172,
		31,
		224,
		255,
		62,
		128,
		234,
		174,
		151,
		206,
		141,
		84,
		55,
		155,
		177,
		21,
		76,
		254,
		122,
		82,
		127,
		229,
		72,
		167,
		67,
		252,
		222,
		106,
		178,
		103,
		125,
		42,
		154,
		226,
		107,
		11,
		18,
		44,
		219,
		166,
		61,
		26,
		116,
		237,
		104,
		253,
		5,
		240,
		187,
		149,
		70,
		205,
		131,
		109,
		238,
		50,
		117,
		74,
		164,
		198,
		146,
		53,
		71,
		85,
		239,
		221,
		214,
		139,
		73,
		121,
		120,
		78,
		184,
		236,
		135,
		46,
		27,
		231,
		149,
		135,
		61,
		15,
		4,
		89,
		155,
		171,
		170,
		156,
		106,
		62,
		85,
		252,
		201,
		47,
		215,
		34,
		105,
		71,
		148,
		31,
		81,
		191,
		60,
		224,
		167,
		152,
		118,
		20,
		64,
		181,
		175,
		248,
		72,
		48,
		185,
		217,
		192,
		254,
		9,
		116,
		239,
		200,
		166,
		63,
		186,
		73,
		99,
		199,
		158,
		44,
		168,
		128,
		173,
		55,
		154,
		117,
		145,
		46,
		12,
		184,
		96,
		54,
		101,
		182,
		126,
		205,
		50,
		45,
		236,
		82,
		56,
		124,
		69,
		28,
		95,
		134,
		229,
		169,
		177,
		11,
		3,
		253,
		110,
		160,
		65,
		250,
		42,
		127,
		255,
		53,
		153,
		207,
		103,
		125,
		5,
		39,
		104,
		43,
		27,
		19,
		193,
		88,
		197,
		180,
		176,
		67,
		141,
		242,
		227,
		136,
		111,
		244,
		172,
		76,
		22,
		233,
		198,
		41,
		143,
		91,
		68,
		203,
		213,
		119,
		77,
		129,
		123,
		79,
		58,
		59,
		13,
		162,
		40,
		165,
		14,
		194,
		8,
		146,
		247,
		26,
		115,
		122,
		144,
		221,
		1,
		204,
		33,
		240,
		114,
		238,
		121,
		109,
		107,
		24,
		159,
		234,
		75,
		164,
		18,
		108,
		98,
		218,
		139,
		206,
		241,
		137,
		190,
		29,
		113,
		94,
		35,
		216,
		100,
		212,
		25,
		188,
		179,
		174,
		97,
		130,
		112,
		243,
		210,
		222,
		49,
		0,
		251,
		151,
		157,
		228,
		78,
		74,
		211,
		90,
		86,
		93,
		66,
		87,
		138,
		246,
		223,
		10,
		70,
		32,
		17,
		209,
		102,
		120,
		219,
		92,
		232,
		163,
		235,
		225,
		83,
		133,
		189,
		142,
		131,
		245,
		140,
		237,
		214,
		30,
		23,
		7,
		178,
		220,
		150,
		52,
		16,
		249,
		80,
		208,
		196,
		132,
		21,
		187,
		36,
		183,
		57,
		226,
		2,
		230,
		37,
		84,
		147,
		6,
		202,
		195,
		161,
		51,
		38,
		139,
		196,
		209,
		169,
		191,
		109,
		135,
		183,
		24,
		28,
		244,
		105,
		94,
		79,
		239,
		33,
		88,
		0,
		36,
		195,
		69,
		106,
		224,
		186,
		247,
		232,
		133,
		35,
		219,
		225,
		103,
		121,
		26,
		210,
		154,
		201,
		129,
		64,
		97,
		158,
		208,
		233,
		254,
		148,
		42,
		73,
		176,
		243,
		167,
		175,
		5,
		29,
		12,
		237,
		81,
		194,
		211,
		83,
		86,
		134,
		99,
		203,
		153,
		53,
		84,
		228,
		25,
		3,
		117,
		108,
		156,
		21,
		216,
		67,
		82,
		165,
		147,
		22,
		100,
		10,
		107,
		50,
		229,
		207,
		44,
		1,
		128,
		4,
		217,
		61,
		155,
		54,
		20,
		204,
		130,
		160,
		43,
		145,
		75,
		57,
		245,
		55,
		163,
		168,
		48,
		198,
		7,
		6,
		80,
		101,
		146,
		249,
		142,
		197,
		131,
		123,
		179,
		253,
		235,
		56,
		76,
		11,
		19,
		144,
		184,
		236,
		52,
		218,
		178,
		187,
		65,
		122,
		112,
		58,
		171,
		30,
		85,
		252,
		152,
		188,
		40,
		185,
		124,
		104,
		27,
		149,
		23,
		136,
		74,
		137,
		78,
		174,
		170,
		102,
		248,
		63,
		159,
		138,
		111,
		13,
		230,
		127,
		72,
		226,
		241,
		238,
		246,
		250,
		90,
		115,
		251,
		38,
		140,
		189,
		166,
		234,
		212,
		119,
		125,
		202,
		15,
		71,
		240,
		68,
		41,
		17,
		77,
		255,
		89,
		32,
		34,
		47,
		192,
		206,
		8,
		190,
		98,
		93,
		118,
		39,
		177,
		221,
		37,
		18,
		116,
		200,
		242,
		143,
		16,
		31,
		120,
		181,
		46,
		220,
		2,
		205,
		114,
		157,
		95,
		126,
		59,
		49,
		172,
		87,
		227,
		150,
		45,
		215,
		14,
		132,
		151,
		161,
		110,
		164,
		9,
		162,
		182,
		223,
		62,
		91,
		113,
		173,
		214,
		60,
		92,
		222,
		96,
		141,
		193,
		199,
		66,
		213,
		70,
		231,
		180,
		51,
		85,
		94,
		3,
		193,
		189,
		207,
		221,
		103,
		100,
		15,
		166,
		147,
		241,
		240,
		198,
		48,
		29,
		206,
		69,
		11,
		117,
		141,
		120,
		51,
		194,
		44,
		78,
		26,
		229,
		102,
		186,
		253,
		106,
		227,
		131,
		154,
		239,
		245,
		162,
		18,
		146,
		252,
		101,
		224,
		164,
		83,
		46,
		181,
		118,
		242,
		218,
		247,
		19,
		57,
		157,
		196,
		116,
		86,
		226,
		58,
		109,
		192,
		47,
		203,
		151,
		104,
		119,
		182,
		108,
		63,
		236,
		36,
		70,
		5,
		220,
		191,
		8,
		98,
		38,
		31,
		167,
		52,
		250,
		27,
		243,
		235,
		81,
		89,
		111,
		195,
		149,
		61,
		160,
		112,
		37,
		165,
		113,
		65,
		73,
		155,
		39,
		95,
		125,
		50,
		25,
		215,
		168,
		185,
		2,
		159,
		238,
		234,
		22,
		76,
		179,
		156,
		210,
		53,
		174,
		246,
		145,
		143,
		45,
		23,
		115,
		213,
		1,
		30,
		97,
		87,
		248,
		114,
		219,
		33,
		21,
		96,
		200,
		173,
		64,
		41,
		255,
		84,
		152,
		82,
		150,
		123,
		170,
		40,
		32,
		202,
		135,
		91,
		66,
		197,
		176,
		17,
		180,
		35,
		55,
		49,
		128,
		209,
		148,
		171,
		254,
		72,
		54,
		56,
		4,
		121,
		130,
		62,
		211,
		228,
		71,
		43,
		244,
		59,
		216,
		42,
		142,
		67,
		230,
		233,
		90,
		161,
		205,
		199,
		169,
		136,
		132,
		107,
		0,
		12,
		7,
		24,
		190,
		20,
		16,
		137,
		80,
		28,
		122,
		75,
		13,
		208,
		172,
		133,
		6,
		178,
		249,
		177,
		139,
		60,
		34,
		129,
		212,
		217,
		175,
		214,
		187,
		9,
		223,
		231,
		93,
		232,
		134,
		204,
		183,
		140,
		68,
		77,
		138,
		158,
		222,
		79,
		110,
		74,
		163,
		10,
		184,
		88,
		188,
		127,
		225,
		126,
		237,
		99,
		153,
		251,
		105,
		124,
		14,
		201,
		92,
		144,
		10,
		169,
		183,
		0,
		58,
		114,
		57,
		141,
		108,
		84,
		130,
		48,
		93,
		36,
		82,
		95,
		2,
		155,
		159,
		53,
		147,
		140,
		135,
		139,
		14,
		39,
		91,
		134,
		192,
		241,
		151,
		219,
		232,
		102,
		245,
		106,
		244,
		55,
		211,
		51,
		27,
		215,
		66,
		133,
		247,
		226,
		112,
		18,
		198,
		207,
		7,
		60,
		71,
		13,
		99,
		214,
		129,
		40,
		193,
		229,
		196,
		85,
		21,
		1,
		208,
		12,
		65,
		171,
		163,
		33,
		240,
		29,
		186,
		188,
		168,
		63,
		154,
		59,
		78,
		201,
		235,
		158,
		170,
		80,
		249,
		115,
		220,
		234,
		217,
		19,
		223,
		116,
		162,
		203,
		38,
		67,
		98,
		109,
		200,
		5,
		161,
		83,
		176,
		127,
		224,
		15,
		3,
		34,
		76,
		70,
		42,
		209,
		179,
		189,
		195,
		117,
		32,
		31,
		90,
		11,
		160,
		204,
		111,
		88,
		181,
		9,
		242,
		143,
		210,
		218,
		96,
		120,
		144,
		113,
		191,
		44,
		46,
		174,
		251,
		43,
		182,
		30,
		72,
		228,
		175,
		103,
		180,
		231,
		61,
		252,
		227,
		28,
		148,
		173,
		233,
		131,
		52,
		87,
		142,
		205,
		125,
		37,
		190,
		89,
		23,
		56,
		199,
		157,
		149,
		138,
		94,
		248,
		156,
		166,
		4,
		26,
		185,
		246,
		212,
		172,
		16,
		194,
		202,
		250,
		97,
		101,
		20,
		137,
		50,
		35,
		92,
		146,
		184,
		243,
		6,
		254,
		128,
		206,
		69,
		150,
		118,
		49,
		237,
		110,
		145,
		197,
		167,
		73,
		236,
		86,
		68,
		54,
		74,
		136,
		213,
		222,
		187,
		77,
		123,
		122,
		24,
		45,
		132,
		239,
		79,
		22,
		178,
		152,
		124,
		81,
		121,
		253,
		64,
		164,
		75,
		230,
		177,
		105,
		221,
		255,
		153,
		41,
		126,
		100,
		17,
		8,
		104,
		225,
		62,
		165,
		216,
		47,
		107,
		238,
		119,
		25,
		79,
		38,
		199,
		162,
		151,
		93,
		240,
		91,
		247,
		125,
		110,
		88,
		26,
		111,
		212,
		46,
		191,
		30,
		77,
		202,
		56,
		62,
		187,
		44,
		165,
		39,
		153,
		116,
		136,
		84,
		47,
		197,
		141,
		49,
		11,
		118,
		72,
		36,
		220,
		235,
		155,
		164,
		143,
		222,
		57,
		55,
		241,
		71,
		194,
		200,
		85,
		174,
		139,
		100,
		166,
		135,
		215,
		37,
		251,
		52,
		233,
		230,
		129,
		76,
		117,
		68,
		95,
		19,
		163,
		138,
		2,
		223,
		8,
		23,
		15,
		3,
		31,
		134,
		177,
		27,
		160,
		217,
		219,
		214,
		208,
		232,
		180,
		6,
		246,
		190,
		9,
		189,
		45,
		142,
		132,
		51,
		209,
		64,
		133,
		145,
		172,
		5,
		97,
		69,
		137,
		195,
		82,
		231,
		75,
		66,
		184,
		131,
		102,
		115,
		150,
		244,
		83,
		159,
		1,
		198,
		179,
		112,
		183,
		87,
		226,
		108,
		238,
		113,
		169,
		156,
		107,
		0,
		201,
		63,
		254,
		255,
		12,
		206,
		90,
		81,
		210,
		104,
		178,
		192,
		65,
		21,
		205,
		35,
		181,
		242,
		234,
		105,
		74,
		4,
		18,
		193,
		119,
		60,
		122,
		130,
		106,
		239,
		157,
		243,
		33,
		186,
		171,
		92,
		140,
		149,
		101,
		236,
		173,
		29,
		224,
		250,
		237,
		53,
		123,
		89,
		32,
		196,
		98,
		207,
		213,
		248,
		121,
		253,
		146,
		203,
		28,
		54,
		211,
		176,
		73,
		10,
		41,
		16,
		7,
		109,
		120,
		185,
		152,
		103,
		227,
		43,
		99,
		48,
		154,
		50,
		96,
		204,
		42,
		170,
		175,
		127,
		245,
		20,
		168,
		59,
		94,
		86,
		252,
		228,
		167,
		182,
		22,
		216,
		225,
		229,
		13,
		144,
		70,
		148,
		126,
		78,
		114,
		61,
		40,
		80,
		34,
		24,
		158,
		128,
		14,
		17,
		124,
		218,
		188,
		147,
		25,
		67,
		161,
		249,
		221,
		58,
		109,
		231,
		244,
		194,
		128,
		245,
		78,
		180,
		213,
		188,
		93,
		56,
		13,
		199,
		106,
		193,
		63,
		189,
		3,
		238,
		18,
		206,
		181,
		95,
		37,
		132,
		215,
		80,
		162,
		164,
		33,
		182,
		1,
		62,
		21,
		68,
		163,
		173,
		107,
		221,
		23,
		171,
		145,
		236,
		210,
		190,
		70,
		113,
		77,
		191,
		97,
		174,
		115,
		124,
		27,
		214,
		88,
		82,
		207,
		52,
		17,
		254,
		60,
		29,
		146,
		141,
		149,
		153,
		133,
		28,
		43,
		129,
		239,
		222,
		197,
		137,
		57,
		16,
		152,
		69,
		108,
		36,
		147,
		39,
		183,
		20,
		30,
		169,
		58,
		67,
		65,
		76,
		74,
		114,
		46,
		156,
		19,
		89,
		200,
		125,
		209,
		216,
		34,
		25,
		75,
		218,
		31,
		11,
		54,
		159,
		251,
		223,
		41,
		234,
		45,
		205,
		120,
		246,
		116,
		235,
		252,
		233,
		12,
		110,
		201,
		5,
		155,
		92,
		150,
		84,
		192,
		203,
		72,
		242,
		40,
		90,
		51,
		6,
		241,
		154,
		83,
		165,
		100,
		101,
		208,
		158,
		136,
		91,
		237,
		166,
		224,
		24,
		219,
		143,
		87,
		185,
		47,
		104,
		112,
		243,
		22,
		15,
		255,
		118,
		55,
		135,
		122,
		96,
		240,
		117,
		7,
		105,
		187,
		32,
		49,
		198,
		79,
		98,
		227,
		103,
		8,
		81,
		134,
		172,
		119,
		175,
		225,
		195,
		186,
		94,
		248,
		85,
		226,
		35,
		2,
		253,
		121,
		177,
		249,
		170,
		73,
		42,
		211,
		144,
		179,
		138,
		157,
		247,
		111,
		142,
		50,
		161,
		196,
		204,
		102,
		126,
		0,
		168,
		250,
		86,
		176,
		48,
		53,
		229,
		220,
		14,
		228,
		212,
		232,
		167,
		178,
		202,
		61,
		44,
		140,
		66,
		123,
		127,
		151,
		10,
		38,
		9,
		131,
		217,
		59,
		99,
		71,
		160,
		184,
		130,
		4,
		26,
		148,
		139,
		230,
		64,
		205,
		100,
		141,
		169,
		136,
		25,
		89,
		77,
		138,
		131,
		75,
		112,
		11,
		65,
		47,
		154,
		87,
		155,
		14,
		201,
		187,
		174,
		60,
		94,
		164,
		42,
		185,
		38,
		184,
		123,
		159,
		127,
		66,
		107,
		23,
		202,
		140,
		189,
		219,
		151,
		78,
		215,
		211,
		121,
		223,
		192,
		203,
		199,
		32,
		24,
		206,
		124,
		17,
		104,
		30,
		19,
		70,
		229,
		251,
		76,
		118,
		62,
		117,
		193,
		236,
		128,
		35,
		20,
		249,
		69,
		190,
		195,
		255,
		241,
		143,
		57,
		108,
		83,
		22,
		71,
		172,
		67,
		79,
		110,
		0,
		10,
		102,
		157,
		46,
		33,
		132,
		73,
		237,
		31,
		252,
		51,
		149,
		95,
		147,
		56,
		238,
		135,
		106,
		15,
		167,
		210,
		230,
		28,
		181,
		63,
		144,
		166,
		246,
		240,
		228,
		115,
		214,
		119,
		2,
		133,
		156,
		64,
		13,
		231,
		239,
		109,
		188,
		81,
		45,
		41,
		88,
		197,
		126,
		111,
		16,
		222,
		245,
		186,
		152,
		224,
		92,
		142,
		134,
		182,
		217,
		198,
		18,
		180,
		208,
		234,
		72,
		86,
		49,
		105,
		242,
		21,
		91,
		116,
		139,
		209,
		216,
		225,
		165,
		207,
		120,
		27,
		194,
		129,
		227,
		43,
		248,
		171,
		113,
		176,
		175,
		80,
		98,
		226,
		183,
		103,
		250,
		82,
		4,
		168,
		158,
		150,
		44,
		52,
		220,
		61,
		243,
		96,
		114,
		233,
		148,
		99,
		39,
		162,
		59,
		85,
		213,
		101,
		50,
		40,
		93,
		68,
		36,
		173,
		12,
		232,
		7,
		170,
		253,
		37,
		145,
		179,
		3,
		90,
		254,
		212,
		48,
		29,
		53,
		177,
		247,
		1,
		55,
		54,
		84,
		97,
		200,
		163,
		160,
		26,
		8,
		122,
		6,
		196,
		153,
		146,
		58,
		125,
		161,
		34,
		221,
		137,
		235,
		5,
		244,
		191,
		74,
		178,
		204,
		130,
		9,
		218,
		243,
		129,
		91,
		225,
		98,
		105,
		253,
		63,
		204,
		205,
		12,
		250,
		51,
		88,
		175,
		154,
		177,
		73,
		15,
		68,
		242,
		33,
		55,
		121,
		90,
		217,
		193,
		134,
		16,
		254,
		38,
		114,
		201,
		211,
		46,
		158,
		223,
		86,
		166,
		191,
		111,
		152,
		137,
		18,
		192,
		174,
		220,
		89,
		5,
		47,
		248,
		161,
		206,
		74,
		203,
		230,
		252,
		81,
		247,
		19,
		106,
		72,
		6,
		222,
		3,
		80,
		24,
		208,
		84,
		171,
		138,
		75,
		94,
		52,
		35,
		26,
		57,
		122,
		131,
		224,
		215,
		207,
		101,
		109,
		8,
		155,
		39,
		198,
		76,
		156,
		153,
		25,
		255,
		83,
		1,
		169,
		99,
		27,
		14,
		65,
		125,
		77,
		167,
		117,
		163,
		62,
		214,
		210,
		235,
		37,
		133,
		148,
		9,
		238,
		202,
		146,
		112,
		42,
		160,
		143,
		233,
		79,
		34,
		61,
		179,
		173,
		43,
		17,
		29,
		231,
		92,
		41,
		107,
		93,
		78,
		196,
		104,
		195,
		110,
		164,
		145,
		244,
		21,
		124,
		246,
		28,
		103,
		187,
		71,
		170,
		20,
		150,
		31,
		136,
		13,
		11,
		249,
		126,
		45,
		140,
		116,
		194,
		4,
		10,
		237,
		188,
		151,
		168,
		216,
		239,
		23,
		123,
		69,
		56,
		2,
		190,
		127,
		178,
		213,
		218,
		7,
		200,
		22,
		228,
		180,
		149,
		87,
		184,
		157,
		102,
		251,
		241,
		40,
		130,
		181,
		44,
		48,
		60,
		36,
		59,
		236,
		49,
		185,
		144,
		32,
		108,
		119,
		70,
		0,
		183,
		189,
		30,
		142,
		58,
		141,
		197,
		53,
		135,
		219,
		227,
		229,
		232,
		234,
		147,
		176,
		139,
		113,
		120,
		212,
		97,
		240,
		186,
		118,
		82,
		54,
		159,
		162,
		182,
		115,
		226,
		66,
		221,
		95,
		209,
		100,
		132,
		67,
		128,
		245,
		50,
		172,
		96,
		199,
		165,
		64,
		85,
		226,
		50,
		103,
		231,
		45,
		129,
		215,
		127,
		177,
		169,
		19,
		27,
		229,
		118,
		184,
		89,
		74,
		32,
		100,
		93,
		4,
		71,
		158,
		253,
		46,
		125,
		174,
		102,
		213,
		42,
		53,
		244,
		49,
		151,
		67,
		92,
		211,
		205,
		111,
		85,
		144,
		119,
		236,
		180,
		84,
		14,
		241,
		222,
		64,
		221,
		172,
		168,
		91,
		149,
		234,
		251,
		101,
		29,
		63,
		112,
		51,
		3,
		11,
		217,
		167,
		36,
		248,
		191,
		128,
		110,
		12,
		88,
		55,
		207,
		58,
		113,
		95,
		140,
		7,
		73,
		179,
		178,
		132,
		114,
		38,
		77,
		228,
		209,
		255,
		141,
		159,
		37,
		23,
		28,
		65,
		131,
		47,
		130,
		109,
		137,
		54,
		20,
		160,
		120,
		81,
		123,
		223,
		134,
		52,
		176,
		152,
		181,
		230,
		17,
		108,
		247,
		208,
		190,
		39,
		162,
		173,
		183,
		224,
		80,
		40,
		161,
		193,
		216,
		249,
		75,
		157,
		165,
		150,
		155,
		237,
		148,
		201,
		126,
		96,
		195,
		68,
		240,
		187,
		243,
		79,
		146,
		238,
		199,
		18,
		94,
		56,
		9,
		252,
		86,
		82,
		203,
		66,
		78,
		69,
		90,
		76,
		139,
		30,
		210,
		219,
		185,
		43,
		62,
		163,
		60,
		175,
		33,
		250,
		26,
		254,
		61,
		44,
		8,
		225,
		72,
		200,
		220,
		156,
		13,
		245,
		206,
		6,
		15,
		31,
		170,
		196,
		142,
		246,
		97,
		117,
		115,
		0,
		135,
		242,
		83,
		98,
		136,
		197,
		25,
		212,
		57,
		232,
		106,
		189,
		22,
		218,
		16,
		138,
		239,
		2,
		107,
		153,
		99,
		87,
		34,
		35,
		21,
		186,
		48,
		235,
		202,
		198,
		41,
		24,
		227,
		143,
		133,
		204,
		1,
		164,
		171,
		182,
		121,
		154,
		104,
		145,
		166,
		5,
		105,
		70,
		59,
		192,
		124,
		188,
		10,
		116,
		122,
		194,
		147,
		214,
		233,
		18,
		3,
		124,
		178,
		65,
		69,
		52,
		169,
		48,
		226,
		234,
		218,
		153,
		214,
		244,
		140,
		188,
		134,
		36,
		58,
		181,
		170,
		126,
		216,
		55,
		24,
		231,
		189,
		93,
		5,
		158,
		121,
		20,
		119,
		174,
		237,
		180,
		141,
		201,
		163,
		29,
		220,
		195,
		60,
		143,
		71,
		148,
		199,
		150,
		62,
		104,
		196,
		14,
		142,
		219,
		11,
		176,
		81,
		159,
		12,
		242,
		250,
		64,
		88,
		75,
		206,
		87,
		57,
		30,
		133,
		248,
		15,
		49,
		40,
		72,
		193,
		185,
		9,
		94,
		68,
		145,
		73,
		253,
		223,
		96,
		132,
		107,
		198,
		92,
		113,
		89,
		221,
		111,
		54,
		146,
		184,
		56,
		13,
		164,
		207,
		155,
		109,
		91,
		90,
		106,
		168,
		245,
		254,
		204,
		118,
		100,
		22,
		177,
		229,
		135,
		105,
		86,
		17,
		205,
		78,
		160,
		238,
		101,
		182,
		152,
		211,
		38,
		222,
		228,
		117,
		53,
		33,
		161,
		8,
		225,
		197,
		103,
		45,
		67,
		246,
		230,
		239,
		39,
		28,
		215,
		194,
		80,
		50,
		59,
		247,
		98,
		165,
		212,
		23,
		243,
		19,
		200,
		70,
		213,
		74,
		224,
		209,
		183,
		251,
		46,
		7,
		123,
		166,
		179,
		172,
		167,
		171,
		34,
		187,
		191,
		21,
		125,
		4,
		114,
		127,
		76,
		116,
		162,
		16,
		26,
		82,
		25,
		173,
		42,
		137,
		151,
		32,
		149,
		41,
		210,
		175,
		128,
		236,
		79,
		120,
		0,
		63,
		122,
		43,
		147,
		157,
		227,
		85,
		108,
		102,
		10,
		241,
		192,
		47,
		35,
		2,
		129,
		115,
		144,
		95,
		66,
		77,
		232,
		37,
		130,
		235,
		6,
		99,
		249,
		51,
		255,
		84,
		217,
		83,
		252,
		202,
		203,
		190,
		138,
		112,
		186,
		27,
		110,
		233,
		154,
		156,
		136,
		31,
		131,
		1,
		208,
		61,
		240,
		44,
		97,
		139,
		199,
		11,
		158,
		89,
		43,
		62,
		172,
		206,
		52,
		186,
		41,
		182,
		40,
		235,
		15,
		239,
		93,
		244,
		29,
		57,
		24,
		137,
		201,
		221,
		26,
		19,
		219,
		224,
		155,
		209,
		191,
		10,
		176,
		136,
		94,
		236,
		129,
		248,
		142,
		131,
		214,
		117,
		107,
		220,
		230,
		174,
		229,
		81,
		210,
		251,
		135,
		90,
		28,
		45,
		75,
		7,
		222,
		71,
		67,
		233,
		79,
		80,
		91,
		87,
		60,
		211,
		223,
		254,
		144,
		154,
		246,
		13,
		190,
		177,
		20,
		217,
		125,
		143,
		108,
		163,
		124,
		16,
		179,
		132,
		105,
		213,
		46,
		83,
		111,
		97,
		31,
		169,
		252,
		195,
		134,
		215,
		102,
		96,
		116,
		227,
		70,
		231,
		146,
		21,
		12,
		208,
		157,
		119,
		127,
		253,
		44,
		193,
		5,
		207,
		3,
		168,
		126,
		23,
		250,
		159,
		55,
		66,
		118,
		140,
		37,
		175,
		0,
		54,
		73,
		86,
		130,
		36,
		64,
		122,
		216,
		198,
		161,
		249,
		98,
		133,
		203,
		228,
		27,
		65,
		189,
		185,
		200,
		85,
		238,
		255,
		128,
		78,
		101,
		42,
		8,
		112,
		204,
		30,
		22,
		38,
		242,
		114,
		39,
		247,
		106,
		194,
		148,
		56,
		14,
		6,
		188,
		164,
		76,
		173,
		99,
		240,
		72,
		113,
		53,
		95,
		232,
		139,
		82,
		17,
		115,
		187,
		104,
		59,
		225,
		32,
		63,
		192,
		156,
		120,
		151,
		58,
		109,
		181,
		1,
		35,
		147,
		202,
		110,
		68,
		160,
		141,
		165,
		33,
		226,
		121,
		4,
		243,
		183,
		50,
		171,
		197,
		69,
		245,
		162,
		184,
		205,
		212,
		180,
		61,
		170,
		237,
		49,
		178,
		77,
		25,
		123,
		149,
		100,
		47,
		218,
		34,
		92,
		18,
		153,
		74,
		103,
		145,
		167,
		166,
		196,
		241,
		88,
		51,
		48,
		138,
		152,
		234,
		150,
		84,
		9,
		2,
		97,
		252,
		20,
		16,
		41,
		231,
		71,
		86,
		161,
		217,
		204,
		131,
		191,
		143,
		101,
		183,
		43,
		141,
		224,
		255,
		113,
		111,
		233,
		211,
		203,
		44,
		8,
		80,
		178,
		232,
		98,
		77,
		156,
		246,
		225,
		216,
		251,
		184,
		65,
		34,
		193,
		146,
		218,
		18,
		150,
		105,
		72,
		137,
		142,
		94,
		91,
		219,
		61,
		145,
		195,
		107,
		21,
		13,
		167,
		175,
		202,
		89,
		229,
		4,
		173,
		90,
		75,
		208,
		2,
		108,
		30,
		155,
		11,
		17,
		236,
		92,
		29,
		148,
		100,
		125,
		62,
		147,
		53,
		209,
		168,
		138,
		196,
		28,
		199,
		237,
		58,
		99,
		12,
		136,
		9,
		36,
		14,
		15,
		206,
		56,
		241,
		154,
		109,
		88,
		49,
		67,
		153,
		35,
		160,
		171,
		63,
		253,
		152,
		27,
		3,
		68,
		210,
		60,
		228,
		176,
		115,
		139,
		205,
		134,
		48,
		227,
		245,
		187,
		180,
		144,
		244,
		93,
		96,
		116,
		177,
		32,
		114,
		73,
		179,
		186,
		22,
		163,
		50,
		120,
		55,
		240,
		110,
		162,
		5,
		103,
		130,
		151,
		128,
		31,
		157,
		19,
		166,
		70,
		129,
		66,
		46,
		243,
		123,
		82,
		226,
		174,
		181,
		132,
		234,
		64,
		119,
		238,
		242,
		254,
		230,
		249,
		247,
		69,
		25,
		33,
		39,
		42,
		40,
		81,
		194,
		117,
		127,
		220,
		76,
		248,
		79,
		7,
		26,
		45,
		213,
		185,
		135,
		250,
		192,
		124,
		182,
		0,
		198,
		200,
		47,
		126,
		85,
		106,
		118,
		87,
		149,
		122,
		95,
		164,
		57,
		51,
		189,
		112,
		23,
		24,
		197,
		10,
		212,
		38,
		170,
		1,
		172,
		102,
		83,
		54,
		215,
		190,
		223,
		37,
		158,
		235,
		169,
		159,
		140,
		6,
		221,
		74,
		207,
		201,
		59,
		188,
		239,
		78,
		52,
		222,
		165,
		121,
		133,
		104,
		214,
		84,
		36,
		191,
		174,
		89,
		111,
		234,
		152,
		246,
		168,
		24,
		229,
		255,
		137,
		144,
		96,
		233,
		37,
		193,
		103,
		202,
		232,
		48,
		126,
		92,
		151,
		206,
		25,
		51,
		208,
		253,
		124,
		248,
		204,
		58,
		251,
		250,
		172,
		153,
		110,
		5,
		215,
		109,
		183,
		197,
		9,
		203,
		95,
		84,
		176,
		247,
		239,
		108,
		68,
		16,
		200,
		38,
		114,
		57,
		127,
		135,
		79,
		1,
		23,
		196,
		228,
		224,
		8,
		149,
		162,
		179,
		19,
		221,
		119,
		56,
		45,
		85,
		67,
		145,
		123,
		75,
		11,
		20,
		121,
		223,
		39,
		29,
		155,
		133,
		164,
		252,
		216,
		63,
		185,
		150,
		28,
		70,
		44,
		21,
		2,
		104,
		214,
		181,
		76,
		15,
		230,
		46,
		102,
		53,
		125,
		188,
		157,
		98,
		47,
		175,
		170,
		122,
		159,
		55,
		101,
		201,
		91,
		83,
		249,
		225,
		240,
		17,
		173,
		62,
		77,
		33,
		217,
		238,
		136,
		52,
		14,
		115,
		60,
		50,
		244,
		66,
		158,
		161,
		138,
		219,
		142,
		97,
		163,
		130,
		199,
		205,
		80,
		171,
		236,
		227,
		132,
		73,
		210,
		32,
		254,
		49,
		146,
		88,
		245,
		94,
		74,
		35,
		194,
		167,
		31,
		106,
		209,
		43,
		242,
		120,
		107,
		93,
		61,
		59,
		190,
		41,
		186,
		27,
		72,
		207,
		141,
		81,
		42,
		192,
		160,
		34,
		156,
		113,
		169,
		0,
		100,
		64,
		212,
		69,
		128,
		148,
		78,
		71,
		189,
		134,
		140,
		198,
		87,
		226,
		86,
		154,
		4,
		195,
		99,
		118,
		147,
		241,
		231,
		105,
		235,
		116,
		182,
		117,
		178,
		82,
		166,
		143,
		7,
		218,
		112,
		65,
		90,
		22,
		26,
		131,
		180,
		30,
		13,
		18,
		10,
		6,
		213,
		237,
		177,
		3,
		165,
		220,
		222,
		211,
		40,
		139,
		129,
		54,
		243,
		187,
		12,
		184,
		91,
		24,
		225,
		130,
		60,
		86,
		65,
		120,
		54,
		201,
		232,
		41,
		97,
		50,
		122,
		178,
		157,
		49,
		99,
		203,
		46,
		254,
		251,
		123,
		106,
		249,
		69,
		164,
		181,
		173,
		7,
		15,
		137,
		71,
		231,
		246,
		193,
		92,
		180,
		176,
		31,
		47,
		197,
		23,
		1,
		121,
		108,
		35,
		209,
		207,
		73,
		115,
		139,
		45,
		64,
		95,
		18,
		72,
		194,
		237,
		107,
		140,
		168,
		240,
		81,
		58,
		205,
		248,
		174,
		175,
		110,
		152,
		0,
		11,
		159,
		93,
		145,
		227,
		57,
		131,
		114,
		156,
		68,
		16,
		56,
		187,
		163,
		228,
		144,
		67,
		85,
		27,
		211,
		43,
		109,
		38,
		162,
		204,
		190,
		59,
		13,
		250,
		235,
		112,
		189,
		52,
		196,
		221,
		171,
		177,
		76,
		252,
		8,
		42,
		100,
		188,
		158,
		51,
		149,
		113,
		172,
		40,
		169,
		132,
		103,
		77,
		154,
		195,
		66,
		14,
		21,
		36,
		142,
		83,
		219,
		242,
		82,
		94,
		70,
		89,
		74,
		224,
		215,
		78,
		135,
		138,
		136,
		241,
		87,
		229,
		185,
		129,
		236,
		88,
		239,
		167,
		98,
		213,
		223,
		124,
		192,
		212,
		17,
		128,
		20,
		48,
		84,
		253,
		182,
		3,
		146,
		216,
		210,
		233,
		19,
		26,
		165,
		199,
		34,
		55,
		151,
		80,
		206,
		2,
		6,
		230,
		33,
		226,
		32,
		191,
		61,
		179,
		243,
		150,
		119,
		30,
		10,
		161,
		12,
		198,
		9,
		63,
		44,
		166,
		127,
		133,
		62,
		75,
		155,
		28,
		79,
		238,
		125,
		234,
		111,
		105,
		37,
		200,
		118,
		244,
		148,
		126,
		5,
		217,
		39,
		90,
		96,
		220,
		186,
		141,
		117,
		25,
		143,
		222,
		245,
		202,
		22,
		160,
		102,
		104,
		255,
		4,
		153,
		147,
		214,
		247,
		53,
		218,
		101,
		170,
		116,
		134,
		29,
		208,
		183,
		184,
		107,
		233,
		87,
		186,
		70,
		154,
		225,
		11,
		113,
		208,
		131,
		4,
		246,
		240,
		117,
		226,
		57,
		179,
		160,
		150,
		212,
		161,
		26,
		224,
		129,
		232,
		9,
		108,
		89,
		147,
		62,
		149,
		25,
		235,
		53,
		250,
		39,
		40,
		79,
		130,
		12,
		6,
		155,
		96,
		69,
		170,
		104,
		73,
		85,
		106,
		65,
		16,
		247,
		249,
		63,
		137,
		67,
		255,
		197,
		184,
		134,
		234,
		18,
		37,
		56,
		112,
		199,
		115,
		227,
		64,
		74,
		253,
		110,
		23,
		21,
		24,
		30,
		38,
		122,
		200,
		198,
		217,
		193,
		205,
		209,
		72,
		127,
		213,
		187,
		138,
		145,
		221,
		109,
		68,
		204,
		17,
		125,
		190,
		121,
		153,
		44,
		162,
		32,
		191,
		168,
		189,
		88,
		58,
		157,
		81,
		207,
		8,
		71,
		13,
		156,
		41,
		133,
		140,
		118,
		77,
		31,
		142,
		75,
		95,
		98,
		203,
		175,
		139,
		132,
		202,
		220,
		15,
		185,
		242,
		180,
		76,
		143,
		219,
		3,
		237,
		123,
		60,
		36,
		167,
		194,
		0,
		148,
		159,
		28,
		166,
		124,
		14,
		103,
		82,
		165,
		206,
		7,
		241,
		48,
		49,
		27,
		54,
		183,
		51,
		92,
		5,
		210,
		248,
		35,
		251,
		181,
		151,
		238,
		10,
		172,
		1,
		66,
		91,
		171,
		34,
		99,
		211,
		46,
		52,
		164,
		33,
		83,
		61,
		239,
		116,
		101,
		146,
		59,
		218,
		102,
		245,
		144,
		152,
		50,
		42,
		84,
		252,
		174,
		2,
		228,
		100,
		97,
		177,
		182,
		119,
		86,
		169,
		45,
		229,
		173,
		254,
		29,
		126,
		135,
		196,
		231,
		222,
		201,
		163,
		114,
		93,
		215,
		141,
		111,
		55,
		19,
		244,
		236,
		214,
		80,
		78,
		192,
		223,
		178,
		20,
		136,
		90,
		176,
		128,
		188,
		243,
		230,
		158,
		105,
		120,
		216,
		22,
		47,
		43,
		195,
		94,
		208,
		196,
		132,
		21,
		52,
		16,
		249,
		80,
		7,
		178,
		220,
		150,
		237,
		214,
		30,
		23,
		195,
		161,
		51,
		38,
		84,
		147,
		6,
		202,
		226,
		2,
		230,
		37,
		187,
		36,
		183,
		57,
		10,
		70,
		32,
		17,
		87,
		138,
		246,
		223,
		90,
		86,
		93,
		66,
		228,
		78,
		74,
		211,
		142,
		131,
		245,
		140,
		225,
		83,
		133,
		189,
		92,
		232,
		163,
		235,
		209,
		102,
		120,
		219,
		94,
		35,
		216,
		100,
		137,
		190,
		29,
		113,
		218,
		139,
		206,
		241,
		164,
		18,
		108,
		98,
		0,
		251,
		151,
		157,
		243,
		210,
		222,
		49,
		174,
		97,
		130,
		112,
		212,
		25,
		188,
		179,
		146,
		247,
		26,
		115,
		165,
		14,
		194,
		8,
		59,
		13,
		162,
		40,
		129,
		123,
		79,
		58,
		24,
		159,
		234,
		75,
		238,
		121,
		109,
		107,
		204,
		33,
		240,
		114,
		122,
		144,
		221,
		1,
		67,
		141,
		242,
		227,
		88,
		197,
		180,
		176,
		43,
		27,
		19,
		193,
		125,
		5,
		39,
		104,
		203,
		213,
		119,
		77,
		41,
		143,
		91,
		68,
		76,
		22,
		233,
		198,
		136,
		111,
		244,
		172,
		28,
		95,
		134,
		229,
		82,
		56,
		124,
		69,
		205,
		50,
		45,
		236,
		54,
		101,
		182,
		126,
		53,
		153,
		207,
		103,
		250,
		42,
		127,
		255,
		253,
		110,
		160,
		65,
		169,
		177,
		11,
		3,
		200,
		166,
		63,
		186,
		254,
		9,
		116,
		239,
		48,
		185,
		217,
		192,
		181,
		175,
		248,
		72,
		46,
		12,
		184,
		96,
		55,
		154,
		117,
		145,
		44,
		168,
		128,
		173,
		73,
		99,
		199,
		158,
		62,
		85,
		252,
		201,
		171,
		170,
		156,
		106,
		15,
		4,
		89,
		155,
		231,
		149,
		135,
		61,
		152,
		118,
		20,
		64,
		191,
		60,
		224,
		167,
		71,
		148,
		31,
		81,
		47,
		215,
		34,
		105,
		51,
		127,
		25,
		40,
		110,
		179,
		207,
		230,
		99,
		111,
		100,
		123,
		221,
		119,
		115,
		234,
		183,
		186,
		204,
		181,
		216,
		106,
		188,
		132,
		101,
		209,
		154,
		210,
		232,
		95,
		65,
		226,
		233,
		253,
		189,
		44,
		13,
		41,
		192,
		105,
		62,
		139,
		229,
		175,
		212,
		239,
		39,
		46,
		250,
		152,
		10,
		31,
		109,
		170,
		63,
		243,
		219,
		59,
		223,
		28,
		130,
		29,
		142,
		0,
		171,
		206,
		35,
		74,
		156,
		55,
		251,
		49,
		2,
		52,
		155,
		17,
		184,
		66,
		118,
		3,
		33,
		166,
		211,
		114,
		215,
		64,
		84,
		82,
		245,
		24,
		201,
		75,
		67,
		169,
		228,
		56,
		103,
		26,
		225,
		93,
		176,
		135,
		36,
		72,
		227,
		178,
		247,
		200,
		157,
		43,
		85,
		91,
		57,
		194,
		174,
		164,
		202,
		235,
		231,
		8,
		151,
		88,
		187,
		73,
		237,
		32,
		133,
		138,
		37,
		102,
		191,
		220,
		107,
		1,
		69,
		124,
		244,
		11,
		20,
		213,
		15,
		92,
		143,
		71,
		12,
		160,
		246,
		94,
		195,
		19,
		70,
		198,
		196,
		87,
		153,
		120,
		144,
		136,
		50,
		58,
		122,
		180,
		203,
		218,
		97,
		252,
		141,
		137,
		18,
		34,
		42,
		248,
		68,
		60,
		30,
		81,
		242,
		236,
		78,
		116,
		16,
		182,
		98,
		125,
		117,
		47,
		208,
		255,
		177,
		86,
		205,
		149,
		7,
		108,
		197,
		240,
		146,
		147,
		165,
		83,
		54,
		61,
		96,
		162,
		222,
		172,
		190,
		4,
		161,
		79,
		45,
		121,
		134,
		5,
		217,
		158,
		126,
		173,
		38,
		104,
		22,
		238,
		27,
		80,
		241,
		159,
		6,
		131,
		199,
		48,
		77,
		214,
		9,
		128,
		224,
		249,
		140,
		150,
		193,
		113,
		23,
		53,
		129,
		89,
		14,
		163,
		76,
		168,
		21,
		145,
		185,
		148,
		112,
		90,
		254,
		167,
		227,
		24,
		116,
		126,
		16,
		49,
		61,
		210,
		77,
		130,
		97,
		147,
		55,
		250,
		95,
		80,
		189,
		192,
		59,
		135,
		106,
		93,
		254,
		146,
		57,
		104,
		45,
		18,
		71,
		241,
		143,
		129,
		251,
		124,
		9,
		168,
		13,
		154,
		142,
		136,
		47,
		194,
		19,
		145,
		153,
		115,
		62,
		226,
		113,
		20,
		249,
		144,
		70,
		237,
		33,
		235,
		216,
		238,
		65,
		203,
		98,
		152,
		172,
		217,
		32,
		66,
		208,
		197,
		183,
		112,
		229,
		41,
		1,
		225,
		5,
		198,
		88,
		199,
		84,
		218,
		51,
		39,
		103,
		246,
		215,
		243,
		26,
		179,
		228,
		81,
		63,
		117,
		14,
		53,
		253,
		244,
		109,
		96,
		22,
		111,
		2,
		176,
		102,
		94,
		191,
		11,
		64,
		8,
		50,
		133,
		155,
		56,
		233,
		165,
		195,
		242,
		180,
		105,
		21,
		60,
		185,
		181,
		190,
		161,
		7,
		173,
		169,
		48,
		205,
		239,
		91,
		131,
		212,
		121,
		150,
		114,
		207,
		75,
		99,
		78,
		170,
		128,
		36,
		125,
		43,
		69,
		220,
		89,
		29,
		234,
		151,
		12,
		211,
		90,
		58,
		35,
		86,
		76,
		27,
		171,
		123,
		149,
		247,
		163,
		92,
		223,
		3,
		68,
		164,
		119,
		252,
		178,
		204,
		52,
		193,
		138,
		221,
		182,
		31,
		42,
		72,
		73,
		127,
		137,
		236,
		231,
		186,
		120,
		4,
		118,
		100,
		222,
		40,
		54,
		148,
		174,
		202,
		108,
		184,
		167,
		175,
		245,
		10,
		37,
		107,
		140,
		23,
		79,
		160,
		110,
		17,
		0,
		187,
		38,
		87,
		83,
		200,
		248,
		240,
		34,
		158,
		230,
		196,
		139,
		214,
		122,
		44,
		132,
		25,
		201,
		156,
		28,
		30,
		141,
		67,
		162,
		74,
		82,
		232,
		224,
		255,
		188,
		101,
		6,
		177,
		219,
		159,
		166,
		46,
		209,
		206,
		15,
		213,
		134,
		85,
		157,
		56,
		90,
		191,
		170,
		10,
		205,
		83,
		159,
		155,
		123,
		188,
		127,
		189,
		34,
		160,
		46,
		93,
		73,
		140,
		29,
		137,
		173,
		201,
		96,
		43,
		158,
		15,
		69,
		79,
		116,
		142,
		135,
		26,
		23,
		21,
		108,
		202,
		120,
		36,
		28,
		113,
		197,
		114,
		58,
		255,
		72,
		66,
		225,
		223,
		147,
		136,
		185,
		19,
		206,
		70,
		111,
		207,
		195,
		219,
		196,
		215,
		125,
		74,
		211,
		98,
		153,
		4,
		14,
		75,
		106,
		168,
		71,
		248,
		55,
		233,
		27,
		128,
		77,
		42,
		37,
		186,
		199,
		253,
		65,
		39,
		16,
		232,
		132,
		18,
		67,
		104,
		87,
		139,
		61,
		251,
		245,
		6,
		129,
		210,
		115,
		224,
		119,
		242,
		244,
		184,
		85,
		235,
		105,
		9,
		227,
		152,
		68,
		110,
		11,
		234,
		131,
		151,
		60,
		145,
		91,
		148,
		162,
		177,
		59,
		226,
		24,
		163,
		214,
		76,
		82,
		212,
		238,
		22,
		176,
		221,
		194,
		143,
		213,
		95,
		112,
		246,
		17,
		53,
		109,
		20,
		218,
		122,
		107,
		92,
		193,
		41,
		45,
		130,
		178,
		88,
		138,
		156,
		228,
		241,
		190,
		0,
		172,
		254,
		86,
		179,
		99,
		102,
		230,
		247,
		100,
		216,
		57,
		40,
		48,
		154,
		146,
		198,
		133,
		124,
		31,
		161,
		203,
		220,
		229,
		171,
		84,
		117,
		180,
		252,
		175,
		231,
		47,
		149,
		183,
		249,
		33,
		3,
		174,
		8,
		236,
		49,
		181,
		52,
		25,
		250,
		208,
		7,
		94,
		63,
		81,
		35,
		166,
		144,
		103,
		118,
		237,
		32,
		169,
		89,
		64,
		54,
		44,
		209,
		97,
		239,
		1,
		217,
		141,
		165,
		38,
		62,
		121,
		13,
		222,
		200,
		134,
		78,
		182,
		240,
		187,
		204,
		167,
		80,
		101,
		51,
		50,
		243,
		5,
		157,
		150,
		2,
		192,
		12,
		126,
		164,
		30,
		209,
		109,
		150,
		235,
		196,
		168,
		11,
		60,
		68,
		123,
		62,
		111,
		215,
		217,
		167,
		17,
		40,
		34,
		78,
		181,
		132,
		107,
		103,
		70,
		197,
		55,
		212,
		27,
		6,
		9,
		172,
		97,
		198,
		175,
		66,
		39,
		189,
		119,
		187,
		16,
		157,
		23,
		184,
		142,
		143,
		250,
		206,
		52,
		254,
		95,
		42,
		173,
		222,
		216,
		204,
		91,
		199,
		69,
		148,
		121,
		180,
		104,
		37,
		207,
		160,
		49,
		113,
		101,
		229,
		76,
		165,
		129,
		35,
		105,
		7,
		178,
		162,
		171,
		99,
		88,
		147,
		134,
		20,
		118,
		127,
		179,
		38,
		225,
		144,
		83,
		183,
		87,
		140,
		2,
		145,
		14,
		164,
		149,
		243,
		191,
		106,
		67,
		63,
		226,
		247,
		232,
		227,
		239,
		102,
		255,
		251,
		81,
		57,
		64,
		54,
		59,
		8,
		48,
		230,
		84,
		94,
		22,
		93,
		233,
		110,
		205,
		211,
		100,
		15,
		138,
		19,
		125,
		90,
		193,
		188,
		75,
		117,
		108,
		12,
		133,
		253,
		77,
		26,
		0,
		213,
		13,
		185,
		155,
		36,
		192,
		47,
		130,
		24,
		53,
		29,
		153,
		43,
		114,
		214,
		252,
		124,
		73,
		224,
		139,
		223,
		41,
		31,
		30,
		46,
		236,
		177,
		186,
		136,
		50,
		32,
		82,
		245,
		161,
		195,
		45,
		18,
		85,
		137,
		10,
		228,
		170,
		33,
		242,
		220,
		151,
		98,
		154,
		86,
		71,
		56,
		246,
		5,
		1,
		112,
		237,
		116,
		166,
		174,
		158,
		221,
		146,
		176,
		200,
		248,
		194,
		96,
		126,
		241,
		238,
		58,
		156,
		115,
		92,
		163,
		249,
		25,
		65,
		218,
		61,
		80,
		51,
		234,
		169,
		240,
		201,
		141,
		231,
		89,
		152,
		135,
		120,
		203,
		3,
		208,
		131,
		210,
		122,
		44,
		128,
		74,
		202,
		159,
		79,
		244,
		21,
		219,
		72,
		182,
		190,
		4,
		28,
		142,
		144,
		22,
		44,
		212,
		114,
		31,
		0,
		77,
		23,
		157,
		178,
		52,
		211,
		247,
		175,
		214,
		24,
		184,
		169,
		158,
		3,
		235,
		239,
		64,
		112,
		154,
		72,
		94,
		38,
		51,
		124,
		194,
		110,
		60,
		148,
		113,
		161,
		164,
		36,
		53,
		166,
		26,
		251,
		234,
		242,
		88,
		80,
		4,
		71,
		190,
		221,
		99,
		9,
		30,
		39,
		105,
		150,
		183,
		118,
		62,
		109,
		37,
		237,
		87,
		117,
		59,
		227,
		193,
		108,
		202,
		46,
		243,
		119,
		246,
		219,
		56,
		18,
		197,
		156,
		253,
		147,
		225,
		100,
		82,
		165,
		180,
		47,
		226,
		107,
		155,
		130,
		244,
		238,
		19,
		163,
		45,
		195,
		27,
		79,
		103,
		228,
		252,
		187,
		207,
		28,
		10,
		68,
		140,
		116,
		50,
		121,
		14,
		101,
		146,
		167,
		241,
		240,
		49,
		199,
		95,
		84,
		192,
		2,
		206,
		188,
		102,
		220,
		250,
		152,
		125,
		104,
		200,
		15,
		145,
		93,
		89,
		185,
		126,
		189,
		127,
		224,
		98,
		236,
		159,
		139,
		78,
		223,
		75,
		111,
		11,
		162,
		233,
		92,
		205,
		135,
		141,
		182,
		76,
		69,
		216,
		213,
		215,
		174,
		8,
		186,
		230,
		222,
		179,
		7,
		176,
		248,
		61,
		138,
		128,
		35,
		29,
		81,
		74,
		123,
		209,
		12,
		132,
		173,
		13,
		1,
		25,
		6,
		21,
		191,
		136,
		17,
		160,
		91,
		198,
		204,
		137,
		168,
		106,
		133,
		58,
		245,
		43,
		217,
		66,
		143,
		232,
		231,
		120,
		5,
		63,
		131,
		229,
		210,
		42,
		70,
		208,
		129,
		170,
		149,
		73,
		255,
		57,
		55,
		196,
		67,
		16,
		177,
		34,
		181,
		48,
		54,
		122,
		151,
		41,
		171,
		203,
		33,
		90,
		134,
		172,
		201,
		40,
		65,
		85,
		254,
		83,
		153,
		86,
		96,
		115,
		249,
		32,
		218,
		97,
		20,
		23,
		2,
		144,
		242,
		251,
		55,
		162,
		101,
		20,
		215,
		51,
		211,
		8,
		134,
		21,
		138,
		36,
		181,
		245,
		225,
		97,
		200,
		33,
		5,
		167,
		237,
		131,
		54,
		38,
		47,
		231,
		220,
		189,
		196,
		178,
		191,
		140,
		180,
		98,
		208,
		218,
		146,
		217,
		109,
		234,
		73,
		87,
		224,
		32,
		17,
		119,
		59,
		238,
		199,
		187,
		102,
		115,
		108,
		103,
		107,
		226,
		123,
		127,
		213,
		172,
		166,
		202,
		49,
		0,
		239,
		227,
		194,
		65,
		179,
		80,
		159,
		130,
		141,
		40,
		229,
		85,
		233,
		18,
		111,
		64,
		44,
		143,
		184,
		192,
		255,
		186,
		235,
		83,
		93,
		35,
		149,
		122,
		219,
		174,
		41,
		90,
		92,
		72,
		223,
		67,
		193,
		16,
		253,
		48,
		236,
		161,
		75,
		66,
		43,
		198,
		163,
		57,
		243,
		63,
		148,
		25,
		147,
		60,
		10,
		11,
		126,
		74,
		176,
		124,
		70,
		228,
		250,
		117,
		106,
		190,
		24,
		247,
		216,
		39,
		125,
		157,
		197,
		94,
		185,
		210,
		195,
		188,
		114,
		129,
		133,
		244,
		105,
		240,
		34,
		42,
		26,
		89,
		22,
		52,
		76,
		86,
		254,
		168,
		4,
		206,
		78,
		27,
		203,
		112,
		145,
		95,
		204,
		50,
		58,
		128,
		152,
		212,
		183,
		110,
		45,
		116,
		77,
		9,
		99,
		221,
		28,
		3,
		252,
		79,
		135,
		84,
		7,
		81,
		137,
		61,
		31,
		160,
		68,
		171,
		6,
		156,
		177,
		153,
		29,
		175,
		246,
		82,
		120,
		139,
		14,
		151,
		249,
		222,
		69,
		56,
		207,
		241,
		232,
		136,
		1,
		121,
		201,
		158,
		132,
		113,
		37,
		71,
		169,
		150,
		209,
		13,
		142,
		96,
		46,
		165,
		118,
		88,
		19,
		230,
		30,
		248,
		205,
		100,
		15,
		91,
		173,
		155,
		154,
		170,
		104,
		53,
		62,
		12,
		182,
		164,
		214,
		49,
		144,
		229,
		98,
		17,
		23,
		3,
		148,
		8,
		138,
		91,
		182,
		123,
		167,
		234,
		0,
		9,
		96,
		141,
		232,
		114,
		184,
		116,
		223,
		82,
		216,
		119,
		65,
		64,
		53,
		1,
		251,
		231,
		237,
		129,
		122,
		75,
		164,
		168,
		137,
		10,
		248,
		27,
		212,
		201,
		198,
		99,
		174,
		30,
		162,
		89,
		36,
		11,
		103,
		196,
		243,
		139,
		180,
		241,
		160,
		24,
		22,
		104,
		222,
		246,
		143,
		249,
		244,
		199,
		255,
		41,
		155,
		145,
		217,
		146,
		38,
		161,
		2,
		28,
		171,
		107,
		90,
		60,
		112,
		165,
		140,
		240,
		45,
		56,
		39,
		44,
		32,
		169,
		48,
		52,
		158,
		92,
		73,
		219,
		185,
		176,
		124,
		233,
		46,
		95,
		156,
		120,
		152,
		67,
		205,
		94,
		193,
		111,
		254,
		190,
		170,
		42,
		131,
		106,
		78,
		236,
		166,
		200,
		125,
		109,
		100,
		172,
		151,
		58,
		110,
		12,
		226,
		221,
		154,
		70,
		197,
		43,
		101,
		238,
		61,
		19,
		88,
		173,
		85,
		179,
		134,
		47,
		68,
		16,
		230,
		208,
		209,
		225,
		35,
		126,
		117,
		71,
		253,
		239,
		157,
		26,
		194,
		118,
		84,
		235,
		15,
		224,
		77,
		215,
		250,
		210,
		86,
		228,
		189,
		25,
		51,
		192,
		69,
		220,
		178,
		149,
		14,
		115,
		132,
		186,
		163,
		195,
		74,
		50,
		130,
		213,
		207,
		29,
		181,
		227,
		79,
		133,
		5,
		80,
		128,
		59,
		218,
		20,
		135,
		121,
		113,
		203,
		211,
		159,
		252,
		37,
		102,
		63,
		6,
		66,
		40,
		150,
		87,
		72,
		183,
		4,
		204,
		31,
		76,
		55,
		13,
		175,
		177,
		62,
		33,
		245,
		83,
		188,
		147,
		108,
		54,
		214,
		142,
		21,
		242,
		153,
		136,
		247,
		57,
		202,
		206,
		191,
		34,
		187,
		105,
		97,
		81,
		18,
		93,
		127,
		7,
		28,
		35,
		102,
		55,
		143,
		129,
		255,
		73,
		137,
		53,
		206,
		179,
		156,
		240,
		83,
		100,
		157,
		111,
		140,
		67,
		94,
		81,
		244,
		57,
		112,
		122,
		22,
		237,
		220,
		51,
		63,
		30,
		197,
		79,
		224,
		214,
		215,
		162,
		150,
		108,
		158,
		247,
		26,
		127,
		229,
		47,
		227,
		72,
		159,
		29,
		204,
		33,
		236,
		48,
		125,
		151,
		166,
		7,
		114,
		245,
		134,
		128,
		148,
		3,
		123,
		49,
		95,
		234,
		250,
		243,
		59,
		0,
		248,
		105,
		41,
		61,
		189,
		20,
		253,
		217,
		200,
		11,
		239,
		15,
		212,
		90,
		201,
		86,
		203,
		222,
		76,
		46,
		39,
		235,
		126,
		185,
		175,
		176,
		187,
		183,
		62,
		167,
		163,
		9,
		252,
		205,
		171,
		231,
		50,
		27,
		103,
		186,
		6,
		78,
		5,
		177,
		54,
		149,
		139,
		60,
		97,
		24,
		110,
		99,
		80,
		104,
		190,
		12,
		45,
		52,
		84,
		221,
		165,
		21,
		66,
		88,
		87,
		210,
		75,
		37,
		2,
		153,
		228,
		19,
		64,
		109,
		69,
		193,
		115,
		42,
		142,
		164,
		141,
		85,
		225,
		195,
		124,
		152,
		119,
		218,
		118,
		180,
		233,
		226,
		208,
		106,
		120,
		10,
		36,
		17,
		184,
		211,
		135,
		113,
		71,
		70,
		188,
		242,
		121,
		170,
		132,
		207,
		58,
		194,
		173,
		249,
		155,
		117,
		74,
		13,
		209,
		82,
		44,
		254,
		246,
		198,
		133,
		202,
		232,
		144,
		14,
		31,
		96,
		174,
		93,
		89,
		40,
		181,
		43,
		4,
		251,
		161,
		65,
		25,
		130,
		101,
		160,
		154,
		56,
		38,
		169,
		182,
		98,
		196,
		1,
		192,
		223,
		32,
		147,
		91,
		136,
		219,
		8,
		107,
		178,
		241,
		168,
		145,
		213,
		191,
		172,
		77,
		131,
		16,
		238,
		230,
		92,
		68,
		138,
		34,
		116,
		216,
		18,
		146,
		199,
		23,
		101,
		162,
		55,
		251,
		242,
		144,
		2,
		23,
		138,
		21,
		134,
		8,
		211,
		51,
		215,
		20,
		5,
		33,
		200,
		97,
		225,
		245,
		181,
		36,
		220,
		231,
		47,
		38,
		54,
		131,
		237,
		167,
		208,
		98,
		180,
		140,
		191,
		178,
		196,
		189,
		224,
		87,
		73,
		234,
		109,
		217,
		146,
		218,
		102,
		187,
		199,
		238,
		59,
		119,
		17,
		32,
		213,
		127,
		123,
		226,
		107,
		103,
		108,
		115,
		194,
		227,
		239,
		0,
		49,
		202,
		166,
		172,
		229,
		40,
		141,
		130,
		159,
		80,
		179,
		65,
		184,
		143,
		44,
		64,
		111,
		18,
		233,
		85,
		149,
		35,
		93,
		83,
		235,
		186,
		255,
		192,
		223,
		72,
		92,
		90,
		41,
		174,
		219,
		122,
		75,
		161,
		236,
		48,
		253,
		16,
		193,
		67,
		148,
		63,
		243,
		57,
		163,
		198,
		43,
		66,
		176,
		74,
		126,
		11,
		10,
		60,
		147,
		25,
		24,
		190,
		106,
		117,
		250,
		228,
		70,
		124,
		185,
		94,
		197,
		157,
		125,
		39,
		216,
		247,
		105,
		244,
		133,
		129,
		114,
		188,
		195,
		210,
		76,
		52,
		22,
		89,
		26,
		42,
		34,
		240,
		203,
		27,
		78,
		206,
		4,
		168,
		254,
		86,
		152,
		128,
		58,
		50,
		204,
		95,
		145,
		112,
		99,
		9,
		77,
		116,
		45,
		110,
		183,
		212,
		7,
		84,
		135,
		79,
		252,
		3,
		28,
		221,
		6,
		171,
		68,
		160,
		31,
		61,
		137,
		81,
		120,
		82,
		246,
		175,
		29,
		153,
		177,
		156,
		207,
		56,
		69,
		222,
		249,
		151,
		14,
		139,
		132,
		158,
		201,
		121,
		1,
		136,
		232,
		241,
		142,
		13,
		209,
		150,
		169,
		71,
		37,
		113,
		30,
		230,
		19,
		88,
		118,
		165,
		46,
		96,
		154,
		155,
		173,
		91,
		15,
		100,
		205,
		248,
		214,
		164,
		182,
		12,
		62,
		53,
		104,
		170,
		82,
		209,
		201,
		142,
		24,
		246,
		46,
		122,
		185,
		65,
		7,
		76,
		250,
		41,
		63,
		113,
		196,
		197,
		4,
		242,
		59,
		80,
		167,
		146,
		251,
		137,
		83,
		233,
		106,
		97,
		245,
		55,
		244,
		89,
		255,
		27,
		98,
		64,
		14,
		214,
		13,
		39,
		240,
		169,
		198,
		66,
		195,
		238,
		103,
		144,
		129,
		26,
		200,
		166,
		212,
		81,
		193,
		219,
		38,
		150,
		215,
		94,
		174,
		183,
		68,
		148,
		145,
		17,
		247,
		91,
		9,
		161,
		223,
		199,
		109,
		101,
		0,
		147,
		47,
		206,
		86,
		60,
		43,
		18,
		49,
		114,
		139,
		232,
		11,
		88,
		16,
		216,
		92,
		163,
		130,
		67,
		225,
		71,
		42,
		53,
		187,
		165,
		35,
		25,
		1,
		230,
		194,
		154,
		120,
		34,
		168,
		135,
		171,
		54,
		222,
		218,
		227,
		45,
		141,
		156,
		107,
		19,
		6,
		73,
		117,
		69,
		175,
		125,
		23,
		128,
		5,
		3,
		241,
		118,
		37,
		132,
		254,
		20,
		111,
		179,
		79,
		162,
		28,
		158,
		96,
		203,
		102,
		172,
		153,
		252,
		29,
		116,
		21,
		239,
		84,
		33,
		99,
		85,
		70,
		204,
		188,
		157,
		95,
		176,
		149,
		110,
		243,
		249,
		119,
		186,
		221,
		210,
		15,
		192,
		30,
		236,
		208,
		231,
		31,
		115,
		77,
		48,
		10,
		182,
		124,
		202,
		12,
		2,
		229,
		180,
		159,
		160,
		61,
		143,
		211,
		235,
		237,
		224,
		226,
		155,
		8,
		191,
		181,
		22,
		134,
		50,
		133,
		205,
		228,
		57,
		177,
		152,
		40,
		100,
		127,
		78,
		32,
		138,
		189,
		36,
		56,
		52,
		44,
		51,
		253,
		58,
		164,
		104,
		207,
		173,
		72,
		93,
		74,
		213,
		87,
		217,
		108,
		140,
		75,
		136,
		126,
		90,
		62,
		151,
		170,
		190,
		123,
		234,
		184,
		131,
		121,
		112,
		220,
		105,
		248,
		178,
		13,
		213,
		155,
		185,
		192,
		36,
		130,
		47,
		53,
		24,
		153,
		29,
		114,
		43,
		252,
		214,
		138,
		15,
		125,
		19,
		193,
		90,
		75,
		188,
		108,
		117,
		133,
		12,
		77,
		253,
		0,
		26,
		161,
		245,
		45,
		195,
		85,
		18,
		10,
		137,
		170,
		228,
		242,
		33,
		151,
		220,
		154,
		98,
		73,
		124,
		139,
		224,
		41,
		223,
		30,
		31,
		236,
		46,
		186,
		177,
		50,
		136,
		82,
		32,
		194,
		248,
		126,
		96,
		238,
		241,
		156,
		58,
		92,
		115,
		249,
		163,
		65,
		25,
		61,
		218,
		71,
		86,
		246,
		56,
		1,
		5,
		237,
		112,
		166,
		116,
		158,
		174,
		146,
		221,
		200,
		176,
		122,
		210,
		128,
		44,
		202,
		74,
		79,
		159,
		21,
		244,
		72,
		219,
		190,
		182,
		28,
		4,
		51,
		80,
		169,
		234,
		201,
		240,
		231,
		141,
		152,
		89,
		120,
		135,
		3,
		203,
		131,
		208,
		34,
		40,
		181,
		78,
		107,
		132,
		70,
		103,
		55,
		197,
		27,
		212,
		9,
		6,
		97,
		172,
		109,
		209,
		235,
		150,
		168,
		196,
		60,
		11,
		123,
		68,
		111,
		62,
		217,
		215,
		17,
		167,
		95,
		254,
		173,
		42,
		216,
		222,
		91,
		204,
		69,
		199,
		121,
		148,
		104,
		180,
		207,
		37,
		175,
		198,
		39,
		66,
		119,
		189,
		16,
		187,
		23,
		157,
		142,
		184,
		250,
		143,
		52,
		206,
		134,
		147,
		118,
		20,
		179,
		127,
		225,
		38,
		83,
		144,
		87,
		183,
		2,
		140,
		14,
		145,
		49,
		160,
		101,
		113,
		76,
		229,
		129,
		165,
		105,
		35,
		178,
		7,
		171,
		162,
		88,
		99,
		64,
		57,
		59,
		54,
		48,
		8,
		84,
		230,
		22,
		94,
		233,
		93,
		205,
		110,
		100,
		211,
		149,
		164,
		191,
		243,
		67,
		106,
		226,
		63,
		232,
		247,
		239,
		227,
		255,
		102,
		81,
		251,
		1,
		238,
		226,
		195,
		173,
		167,
		203,
		48,
		131,
		140,
		41,
		228,
		64,
		178,
		81,
		158,
		65,
		45,
		142,
		185,
		84,
		232,
		19,
		110,
		82,
		92,
		34,
		148,
		193,
		254,
		187,
		234,
		91,
		93,
		73,
		222,
		123,
		218,
		175,
		40,
		49,
		237,
		160,
		74,
		66,
		192,
		17,
		252,
		56,
		242,
		62,
		149,
		67,
		42,
		199,
		162,
		10,
		127,
		75,
		177,
		24,
		146,
		61,
		11,
		250,
		54,
		163,
		100,
		22,
		3,
		145,
		243,
		9,
		135,
		20,
		139,
		21,
		214,
		50,
		210,
		96,
		201,
		32,
		4,
		37,
		180,
		244,
		224,
		39,
		46,
		230,
		221,
		166,
		236,
		130,
		55,
		141,
		181,
		99,
		209,
		188,
		197,
		179,
		190,
		235,
		72,
		86,
		225,
		219,
		147,
		216,
		108,
		239,
		198,
		186,
		103,
		33,
		16,
		118,
		58,
		227,
		122,
		126,
		212,
		114,
		109,
		102,
		106,
		161,
		69,
		170,
		7,
		80,
		136,
		60,
		30,
		174,
		247,
		83,
		121,
		157,
		176,
		152,
		28,
		223,
		68,
		57,
		206,
		138,
		15,
		150,
		248,
		120,
		200,
		159,
		133,
		240,
		233,
		137,
		0,
		151,
		208,
		12,
		143,
		112,
		36,
		70,
		168,
		89,
		18,
		231,
		31,
		97,
		47,
		164,
		119,
		90,
		172,
		154,
		155,
		249,
		204,
		101,
		14,
		13,
		183,
		165,
		215,
		171,
		105,
		52,
		63,
		116,
		107,
		191,
		25,
		125,
		71,
		229,
		251,
		156,
		196,
		95,
		184,
		246,
		217,
		38,
		124,
		128,
		132,
		245,
		104,
		211,
		194,
		189,
		115,
		88,
		23,
		53,
		77,
		241,
		35,
		43,
		27,
		207,
		79,
		26,
		202,
		87,
		255,
		169,
		5,
		51,
		59,
		129,
		153,
		113,
		144,
		94,
		205,
		117,
		76,
		8,
		98,
		213,
		182,
		111,
		44,
		78,
		134,
		85,
		6,
		220,
		29,
		2,
		253,
		3,
		135,
		175,
		130,
		102,
		76,
		232,
		177,
		1,
		35,
		151,
		79,
		24,
		181,
		90,
		190,
		31,
		150,
		246,
		239,
		154,
		128,
		215,
		103,
		231,
		137,
		16,
		149,
		209,
		38,
		91,
		192,
		104,
		187,
		48,
		126,
		0,
		248,
		13,
		70,
		183,
		89,
		59,
		111,
		144,
		19,
		207,
		136,
		32,
		43,
		118,
		180,
		200,
		186,
		168,
		18,
		17,
		122,
		211,
		230,
		132,
		133,
		179,
		69,
		99,
		57,
		198,
		233,
		167,
		64,
		219,
		131,
		228,
		250,
		88,
		98,
		6,
		160,
		116,
		107,
		4,
		52,
		60,
		238,
		82,
		42,
		8,
		71,
		108,
		162,
		221,
		204,
		119,
		234,
		155,
		159,
		210,
		65,
		143,
		110,
		134,
		158,
		36,
		44,
		26,
		182,
		224,
		72,
		213,
		5,
		80,
		208,
		226,
		29,
		2,
		195,
		25,
		74,
		153,
		81,
		51,
		112,
		169,
		202,
		125,
		23,
		83,
		106,
		129,
		78,
		173,
		95,
		251,
		54,
		147,
		156,
		47,
		212,
		184,
		178,
		220,
		253,
		241,
		30,
		245,
		164,
		225,
		222,
		139,
		61,
		67,
		77,
		113,
		12,
		247,
		75,
		166,
		145,
		50,
		94,
		227,
		14,
		223,
		93,
		85,
		191,
		242,
		46,
		55,
		176,
		197,
		100,
		193,
		86,
		66,
		68,
		20,
		34,
		141,
		7,
		174,
		84,
		96,
		21,
		189,
		216,
		53,
		92,
		138,
		33,
		237,
		39,
		205,
		45,
		201,
		10,
		148,
		11,
		152,
		22,
		236,
		142,
		28,
		9,
		123,
		188,
		41,
		229,
		40,
		157,
		243,
		185,
		194,
		249,
		49,
		56,
		255,
		235,
		171,
		58,
		27,
		63,
		214,
		127,
		115,
		199,
		140,
		196,
		254,
		73,
		87,
		244,
		161,
		172,
		218,
		163,
		206,
		124,
		170,
		146,
		117,
		121,
		114,
		109,
		203,
		97,
		101,
		252,
		37,
		105,
		15,
		62,
		120,
		165,
		217,
		240,
		72,
		66,
		223,
		36,
		1,
		238,
		44,
		13,
		93,
		175,
		113,
		190,
		99,
		108,
		11,
		198,
		7,
		187,
		129,
		252,
		194,
		174,
		86,
		97,
		17,
		46,
		5,
		84,
		179,
		189,
		123,
		205,
		53,
		148,
		199,
		64,
		178,
		180,
		49,
		166,
		47,
		173,
		19,
		254,
		2,
		222,
		165,
		79,
		197,
		172,
		77,
		40,
		29,
		215,
		122,
		209,
		125,
		247,
		228,
		210,
		144,
		229,
		94,
		164,
		236,
		249,
		28,
		126,
		217,
		21,
		139,
		76,
		57,
		250,
		61,
		221,
		104,
		230,
		100,
		251,
		91,
		202,
		15,
		27,
		38,
		143,
		235,
		207,
		3,
		73,
		216,
		109,
		193,
		200,
		50,
		9,
		42,
		83,
		81,
		92,
		90,
		98,
		62,
		140,
		124,
		52,
		131,
		55,
		167,
		4,
		14,
		185,
		255,
		206,
		213,
		153,
		41,
		0,
		136,
		85,
		130,
		157,
		133,
		137,
		149,
		12,
		59,
		145,
		103,
		191,
		241,
		211,
		170,
		78,
		232,
		69,
		95,
		114,
		243,
		119,
		24,
		65,
		150,
		188,
		224,
		101,
		23,
		121,
		171,
		48,
		33,
		214,
		6,
		31,
		239,
		102,
		39,
		151,
		106,
		112,
		203,
		159,
		71,
		169,
		63,
		120,
		96,
		227,
		192,
		142,
		152,
		75,
		253,
		182,
		240,
		8,
		35,
		22,
		225,
		138,
		67,
		181,
		116,
		117,
		134,
		68,
		208,
		219,
		88,
		226,
		56,
		74,
		168,
		146,
		20,
		10,
		132,
		155,
		246,
		80,
		54,
		25,
		147,
		201,
		43,
		115,
		87,
		176,
		45,
		60,
		156,
		82,
		107,
		111,
		135,
		26,
		204,
		30,
		244,
		196,
		248,
		183,
		162,
		218,
		16,
		184,
		234,
		70,
		160,
		32,
		37,
		245,
		127,
		158,
		34,
		177,
		212,
		220,
		118,
		110,
		89,
		58,
		195,
		128,
		163,
		154,
		141,
		231,
		242,
		51,
		18,
		237,
		105,
		161,
		233,
		186,
		117,
		122,
		223,
		18,
		182,
		68,
		167,
		104,
		247,
		24,
		20,
		53,
		91,
		81,
		61,
		198,
		164,
		170,
		212,
		98,
		55,
		8,
		77,
		28,
		183,
		219,
		120,
		79,
		162,
		30,
		229,
		152,
		199,
		27,
		86,
		188,
		180,
		54,
		231,
		10,
		173,
		171,
		191,
		40,
		141,
		44,
		89,
		222,
		252,
		137,
		189,
		71,
		238,
		100,
		203,
		253,
		206,
		4,
		200,
		99,
		181,
		220,
		49,
		84,
		255,
		113,
		226,
		125,
		227,
		32,
		196,
		36,
		12,
		192,
		85,
		146,
		224,
		245,
		103,
		5,
		209,
		216,
		16,
		43,
		80,
		26,
		116,
		193,
		150,
		63,
		214,
		242,
		211,
		66,
		2,
		22,
		29,
		190,
		160,
		23,
		45,
		101,
		46,
		154,
		123,
		67,
		149,
		39,
		74,
		51,
		69,
		72,
		21,
		140,
		136,
		34,
		132,
		155,
		144,
		156,
		25,
		48,
		76,
		145,
		215,
		230,
		128,
		204,
		88,
		1,
		165,
		143,
		107,
		70,
		110,
		234,
		87,
		179,
		92,
		241,
		166,
		126,
		202,
		232,
		142,
		62,
		105,
		115,
		6,
		31,
		127,
		246,
		41,
		178,
		207,
		56,
		124,
		249,
		96,
		14,
		175,
		228,
		17,
		233,
		151,
		217,
		82,
		129,
		97,
		38,
		250,
		121,
		134,
		210,
		176,
		94,
		251,
		65,
		83,
		33,
		93,
		159,
		194,
		201,
		172,
		90,
		108,
		109,
		15,
		58,
		147,
		248,
		106,
		50,
		169,
		78,
		0,
		47,
		208,
		138,
		130,
		157,
		73,
		239,
		139,
		177,
		19,
		13,
		174,
		225,
		195,
		187,
		7,
		213,
		221,
		237,
		118,
		114,
		3,
		158,
		37,
		52,
		75,
		133,
		197,
		205,
		119,
		111,
		135,
		102,
		168,
		59,
		57,
		185,
		236,
		60,
		161,
		9,
		95,
		243,
		184,
		112,
		163,
		240,
		42,
		235,
		244,
		11,
		131,
		186,
		254,
		148,
		35,
		64,
		153,
		218,
		201,
		177,
		164,
		235,
		215,
		231,
		13,
		223,
		9,
		148,
		124,
		120,
		65,
		143,
		47,
		62,
		163,
		68,
		96,
		56,
		218,
		128,
		10,
		37,
		67,
		229,
		136,
		151,
		25,
		7,
		129,
		187,
		169,
		250,
		178,
		122,
		254,
		1,
		32,
		225,
		244,
		158,
		137,
		176,
		147,
		208,
		41,
		74,
		125,
		101,
		207,
		199,
		162,
		49,
		141,
		108,
		230,
		54,
		51,
		179,
		85,
		249,
		171,
		3,
		99,
		121,
		132,
		52,
		117,
		252,
		12,
		21,
		197,
		50,
		35,
		184,
		106,
		4,
		118,
		243,
		175,
		133,
		82,
		11,
		100,
		224,
		97,
		76,
		86,
		251,
		93,
		185,
		192,
		226,
		172,
		116,
		89,
		43,
		241,
		75,
		200,
		195,
		87,
		149,
		102,
		103,
		166,
		80,
		153,
		242,
		5,
		48,
		27,
		227,
		165,
		238,
		88,
		139,
		157,
		211,
		240,
		115,
		107,
		44,
		186,
		84,
		140,
		216,
		26,
		33,
		219,
		210,
		126,
		203,
		90,
		16,
		220,
		248,
		156,
		53,
		8,
		28,
		217,
		72,
		232,
		119,
		245,
		123,
		206,
		46,
		233,
		42,
		95,
		152,
		6,
		202,
		109,
		15,
		234,
		255,
		130,
		40,
		31,
		134,
		154,
		150,
		142,
		145,
		70,
		155,
		19,
		58,
		138,
		198,
		221,
		236,
		170,
		29,
		23,
		180,
		36,
		144,
		39,
		111,
		159,
		45,
		113,
		73,
		79,
		66,
		64,
		57,
		222,
		104,
		174,
		160,
		71,
		22,
		61,
		2,
		114,
		69,
		189,
		209,
		239,
		146,
		168,
		20,
		213,
		24,
		127,
		112,
		173,
		98,
		188,
		78,
		30,
		63,
		253,
		18,
		55,
		204,
		81,
		91,
		183,
		77,
		246,
		131,
		193,
		247,
		228,
		110,
		194,
		105,
		196,
		14,
		59,
		94,
		191,
		214,
		92,
		182,
		205,
		17,
		237,
		0,
		190,
		60,
		181,
		34,
		167,
		161,
		83,
		212,
		135,
		38,
		232,
		58,
		50,
		2,
		65,
		14,
		44,
		84,
		202,
		219,
		164,
		106,
		153,
		157,
		236,
		113,
		239,
		192,
		63,
		101,
		133,
		221,
		70,
		161,
		100,
		94,
		252,
		226,
		109,
		114,
		166,
		0,
		197,
		4,
		27,
		228,
		87,
		159,
		76,
		31,
		204,
		175,
		118,
		53,
		108,
		85,
		17,
		123,
		104,
		137,
		71,
		212,
		42,
		34,
		152,
		128,
		78,
		230,
		176,
		28,
		214,
		86,
		3,
		211,
		233,
		240,
		144,
		25,
		97,
		209,
		134,
		156,
		147,
		22,
		143,
		225,
		198,
		93,
		32,
		215,
		132,
		169,
		129,
		5,
		183,
		238,
		74,
		96,
		73,
		145,
		37,
		7,
		184,
		92,
		179,
		30,
		178,
		112,
		45,
		38,
		20,
		174,
		188,
		206,
		224,
		213,
		124,
		23,
		67,
		181,
		131,
		130,
		120,
		54,
		189,
		110,
		64,
		11,
		254,
		6,
		105,
		61,
		95,
		177,
		142,
		201,
		21,
		150,
		191,
		245,
		155,
		46,
		62,
		55,
		255,
		196,
		60,
		173,
		237,
		249,
		121,
		208,
		57,
		29,
		12,
		207,
		43,
		203,
		16,
		158,
		13,
		146,
		15,
		26,
		136,
		234,
		227,
		47,
		186,
		125,
		107,
		116,
		127,
		115,
		250,
		99,
		103,
		205,
		56,
		9,
		111,
		35,
		246,
		223,
		163,
		126,
		194,
		138,
		193,
		117,
		242,
		81,
		79,
		248,
		165,
		220,
		170,
		167,
		148,
		172,
		122,
		200,
		216,
		231,
		162,
		243,
		75,
		69,
		59,
		141,
		77,
		241,
		10,
		119,
		88,
		52,
		151,
		160,
		89,
		171,
		72,
		135,
		154,
		149,
		48,
		253,
		180,
		190,
		210,
		41,
		24,
		247,
		251,
		218,
		1,
		139,
		36,
		18,
		19,
		102,
		82,
		168,
		90,
		51,
		222,
		187,
		33,
		235,
		39,
		140,
		91,
		217,
		8,
		229,
		40,
		244,
		185,
		83,
		98,
		195,
		182,
		49,
		66,
		68,
		80,
		199,
		189,
		215,
		147,
		170,
		243,
		176,
		105,
		10,
		217,
		138,
		89,
		145,
		34,
		221,
		194,
		3,
		21,
		197,
		144,
		16,
		218,
		118,
		32,
		136,
		70,
		94,
		228,
		236,
		18,
		129,
		79,
		174,
		183,
		42,
		91,
		95,
		172,
		98,
		29,
		12,
		146,
		234,
		200,
		135,
		196,
		244,
		252,
		46,
		198,
		96,
		180,
		171,
		36,
		58,
		152,
		162,
		103,
		128,
		27,
		67,
		163,
		249,
		6,
		41,
		68,
		69,
		115,
		133,
		209,
		186,
		19,
		38,
		8,
		122,
		104,
		210,
		224,
		235,
		182,
		116,
		80,
		211,
		15,
		72,
		119,
		153,
		251,
		175,
		192,
		56,
		205,
		134,
		168,
		123,
		240,
		190,
		17,
		230,
		155,
		0,
		39,
		73,
		208,
		85,
		90,
		64,
		23,
		167,
		223,
		86,
		54,
		47,
		216,
		117,
		154,
		126,
		193,
		227,
		87,
		143,
		166,
		140,
		40,
		113,
		195,
		71,
		111,
		66,
		184,
		101,
		25,
		48,
		229,
		169,
		207,
		254,
		11,
		161,
		165,
		60,
		181,
		185,
		178,
		173,
		14,
		188,
		106,
		82,
		97,
		108,
		26,
		99,
		62,
		137,
		151,
		52,
		179,
		7,
		76,
		4,
		219,
		255,
		22,
		191,
		63,
		43,
		107,
		250,
		2,
		57,
		241,
		248,
		232,
		93,
		51,
		121,
		187,
		124,
		233,
		37,
		44,
		78,
		220,
		201,
		84,
		203,
		88,
		214,
		13,
		237,
		9,
		202,
		74,
		225,
		45,
		231,
		125,
		24,
		245,
		156,
		110,
		148,
		160,
		213,
		212,
		226,
		77,
		199,
		1,
		150,
		130,
		132,
		247,
		112,
		5,
		164,
		149,
		127,
		50,
		238,
		35,
		206,
		31,
		157,
		102,
		81,
		242,
		158,
		177,
		204,
		55,
		139,
		75,
		253,
		131,
		141,
		53,
		100,
		33,
		30,
		28,
		61,
		49,
		222,
		239,
		20,
		120,
		114,
		59,
		246,
		83,
		92,
		65,
		142,
		109,
		159,
		160,
		114,
		122,
		74,
		9,
		70,
		100,
		28,
		130,
		147,
		236,
		34,
		209,
		213,
		164,
		57,
		167,
		136,
		119,
		45,
		205,
		149,
		14,
		233,
		44,
		22,
		180,
		170,
		37,
		58,
		238,
		72,
		141,
		76,
		83,
		172,
		31,
		215,
		4,
		87,
		132,
		231,
		62,
		125,
		36,
		29,
		89,
		51,
		32,
		193,
		15,
		156,
		98,
		106,
		208,
		200,
		6,
		174,
		248,
		84,
		158,
		30,
		75,
		155,
		161,
		184,
		216,
		81,
		41,
		153,
		206,
		212,
		219,
		94,
		199,
		169,
		142,
		21,
		104,
		159,
		204,
		225,
		201,
		77,
		255,
		166,
		2,
		40,
		1,
		217,
		109,
		79,
		240,
		20,
		251,
		86,
		250,
		56,
		101,
		110,
		92,
		230,
		244,
		134,
		168,
		157,
		52,
		95,
		11,
		253,
		203,
		202,
		48,
		126,
		245,
		38,
		8,
		67,
		182,
		78,
		33,
		117,
		23,
		249,
		198,
		129,
		93,
		222,
		247,
		189,
		211,
		102,
		118,
		127,
		183,
		140,
		116,
		229,
		165,
		177,
		49,
		152,
		113,
		85,
		68,
		135,
		99,
		131,
		88,
		214,
		69,
		218,
		71,
		82,
		192,
		162,
		171,
		103,
		242,
		53,
		35,
		60,
		55,
		59,
		178,
		43,
		47,
		133,
		112,
		65,
		39,
		107,
		190,
		151,
		235,
		54,
		138,
		194,
		137,
		61,
		186,
		25,
		7,
		176,
		237,
		148,
		226,
		239,
		220,
		228,
		50,
		128,
		144,
		175,
		234,
		187,
		3,
		13,
		115,
		197,
		5,
		185,
		66,
		63,
		16,
		124,
		223,
		232,
		17,
		227,
		0,
		207,
		210,
		221,
		120,
		181,
		252,
		246,
		154,
		97,
		80,
		191,
		179,
		146,
		73,
		195,
		108,
		90,
		91,
		46,
		26,
		224,
		18,
		123,
		150,
		243,
		105,
		163,
		111,
		196,
		19,
		145,
		64,
		173,
		96,
		188,
		241,
		27,
		42,
		139,
		254,
		121,
		10,
		12,
		24,
		143,
		65,
		179,
		109,
		162,
		127,
		112,
		23,
		218,
		84,
		94,
		195,
		56,
		29,
		242,
		48,
		17,
		13,
		50,
		25,
		72,
		175,
		161,
		103,
		209,
		27,
		167,
		157,
		224,
		222,
		178,
		74,
		125,
		51,
		177,
		15,
		226,
		30,
		194,
		185,
		83,
		41,
		136,
		219,
		92,
		174,
		168,
		45,
		186,
		97,
		235,
		248,
		206,
		140,
		249,
		66,
		184,
		217,
		176,
		81,
		52,
		1,
		203,
		102,
		205,
		37,
		230,
		33,
		193,
		116,
		250,
		120,
		231,
		240,
		229,
		0,
		98,
		197,
		9,
		151,
		80,
		31,
		85,
		196,
		113,
		221,
		212,
		46,
		21,
		71,
		214,
		19,
		7,
		58,
		147,
		247,
		211,
		96,
		40,
		159,
		43,
		187,
		24,
		18,
		165,
		54,
		79,
		77,
		64,
		70,
		126,
		34,
		144,
		158,
		129,
		153,
		149,
		137,
		16,
		39,
		141,
		227,
		210,
		201,
		133,
		53,
		28,
		148,
		73,
		67,
		110,
		239,
		107,
		4,
		93,
		138,
		160,
		123,
		163,
		237,
		207,
		182,
		82,
		244,
		89,
		26,
		3,
		243,
		122,
		59,
		139,
		118,
		108,
		252,
		121,
		11,
		101,
		183,
		44,
		61,
		202,
		220,
		146,
		132,
		87,
		225,
		170,
		236,
		20,
		215,
		131,
		91,
		181,
		35,
		100,
		124,
		255,
		154,
		88,
		204,
		199,
		68,
		254,
		36,
		86,
		63,
		10,
		253,
		150,
		95,
		169,
		104,
		105,
		42,
		5,
		143,
		213,
		55,
		111,
		75,
		172,
		180,
		142,
		8,
		22,
		152,
		135,
		234,
		76,
		208,
		2,
		232,
		216,
		228,
		171,
		190,
		198,
		49,
		32,
		128,
		78,
		119,
		115,
		155,
		6,
		99,
		130,
		62,
		173,
		200,
		192,
		106,
		114,
		12,
		164,
		246,
		90,
		188,
		60,
		57,
		233,
		238,
		47,
		14,
		241,
		117,
		189,
		245,
		166,
		69,
		38,
		223,
		156,
		191,
		134,
		145,
		251,
		150,
		216,
		206,
		29,
		171,
		224,
		166,
		94,
		157,
		201,
		17,
		255,
		105,
		46,
		54,
		181,
		208,
		18,
		134,
		141,
		14,
		180,
		110,
		28,
		117,
		64,
		183,
		220,
		21,
		227,
		34,
		35,
		9,
		36,
		165,
		33,
		78,
		23,
		192,
		234,
		49,
		233,
		167,
		133,
		252,
		24,
		190,
		19,
		80,
		73,
		185,
		48,
		113,
		193,
		60,
		38,
		182,
		51,
		65,
		47,
		253,
		102,
		119,
		128,
		41,
		200,
		116,
		231,
		130,
		138,
		32,
		56,
		70,
		238,
		188,
		16,
		246,
		118,
		115,
		163,
		164,
		101,
		68,
		187,
		63,
		247,
		191,
		236,
		15,
		108,
		149,
		214,
		245,
		204,
		219,
		177,
		96,
		79,
		197,
		159,
		125,
		37,
		1,
		230,
		254,
		196,
		66,
		92,
		210,
		205,
		160,
		6,
		154,
		72,
		162,
		146,
		174,
		225,
		244,
		140,
		123,
		106,
		202,
		4,
		61,
		57,
		209,
		76,
		121,
		251,
		69,
		168,
		84,
		136,
		243,
		25,
		99,
		194,
		145,
		22,
		228,
		226,
		103,
		240,
		43,
		161,
		178,
		132,
		198,
		179,
		8,
		242,
		147,
		250,
		27,
		126,
		75,
		129,
		44,
		135,
		11,
		249,
		39,
		232,
		53,
		58,
		93,
		144,
		30,
		20,
		137,
		114,
		87,
		184,
		122,
		91,
		71,
		120,
		83,
		2,
		229,
		235,
		45,
		155,
		81,
		237,
		215,
		170,
		148,
		248,
		0,
		55,
		42,
		98,
		213,
		97,
		241,
		82,
		88,
		239,
		124,
		5,
		7,
		10,
		12,
		52,
		104,
		218,
		212,
		203,
		211,
		223,
		195,
		90,
		109,
		199,
		169,
		152,
		131,
		207,
		127,
		86,
		222,
		3,
		111,
		172,
		107,
		139,
		62,
		176,
		50,
		173,
		186,
		175,
		74,
		40,
		143,
		67,
		221,
		26,
		85,
		31,
		142,
		59,
		151,
		158,
		100,
		95,
		13,
		156,
		89,
		77,
		112,
		217,
		189,
		153,
		69,
		233,
		191,
		23,
		138,
		90,
		15,
		143,
		141,
		30,
		208,
		49,
		217,
		193,
		123,
		115,
		108,
		47,
		246,
		149,
		34,
		72,
		12,
		53,
		189,
		66,
		93,
		156,
		70,
		21,
		198,
		14,
		187,
		165,
		7,
		61,
		89,
		255,
		43,
		52,
		60,
		102,
		153,
		182,
		248,
		31,
		132,
		220,
		51,
		253,
		130,
		147,
		40,
		181,
		196,
		192,
		91,
		107,
		99,
		177,
		13,
		117,
		87,
		24,
		232,
		6,
		100,
		48,
		207,
		76,
		144,
		215,
		55,
		228,
		111,
		33,
		95,
		167,
		82,
		25,
		78,
		37,
		140,
		185,
		219,
		218,
		236,
		26,
		127,
		116,
		41,
		235,
		151,
		229,
		247,
		77,
		94,
		124,
		200,
		16,
		71,
		234,
		5,
		225,
		92,
		216,
		240,
		221,
		57,
		19,
		183,
		238,
		184,
		214,
		79,
		202,
		142,
		121,
		4,
		159,
		64,
		201,
		169,
		176,
		197,
		223,
		136,
		56,
		254,
		243,
		133,
		252,
		145,
		35,
		245,
		205,
		44,
		152,
		211,
		155,
		161,
		22,
		8,
		171,
		122,
		54,
		80,
		97,
		39,
		250,
		134,
		175,
		42,
		38,
		45,
		50,
		148,
		62,
		58,
		163,
		179,
		209,
		67,
		86,
		36,
		227,
		118,
		186,
		146,
		114,
		150,
		85,
		203,
		84,
		199,
		73,
		160,
		180,
		244,
		101,
		68,
		96,
		137,
		32,
		119,
		194,
		172,
		230,
		157,
		166,
		110,
		103,
		104,
		239,
		154,
		59,
		158,
		9,
		29,
		27,
		188,
		81,
		128,
		2,
		10,
		224,
		173,
		113,
		226,
		135,
		106,
		3,
		213,
		126,
		178,
		120,
		75,
		125,
		210,
		88,
		241,
		11,
		63,
		74,
		112,
		139,
		231,
		237,
		131,
		162,
		174,
		65,
		222,
		17,
		242,
		0,
		164,
		105,
		204,
		195,
		46,
		83,
		168,
		20,
		249,
		206,
		109,
		1,
		170,
		251,
		190,
		129,
		212,
		98,
		28,
		18,
		95,
		196,
		185,
		78,
		10,
		143,
		22,
		120,
		248,
		72,
		31,
		5,
		112,
		105,
		9,
		128,
		33,
		197,
		42,
		135,
		208,
		8,
		188,
		158,
		46,
		119,
		211,
		249,
		29,
		48,
		24,
		156,
		218,
		44,
		26,
		27,
		121,
		76,
		229,
		142,
		141,
		55,
		37,
		87,
		43,
		233,
		180,
		191,
		23,
		80,
		140,
		15,
		240,
		164,
		198,
		40,
		217,
		146,
		103,
		159,
		225,
		175,
		36,
		247,
		0,
		4,
		117,
		232,
		83,
		66,
		61,
		243,
		216,
		151,
		181,
		205,
		113,
		163,
		171,
		155,
		244,
		235,
		63,
		153,
		253,
		199,
		101,
		123,
		28,
		68,
		223,
		56,
		118,
		89,
		166,
		252,
		245,
		204,
		136,
		226,
		85,
		54,
		239,
		172,
		206,
		6,
		213,
		134,
		92,
		157,
		130,
		125,
		79,
		207,
		154,
		74,
		215,
		127,
		41,
		133,
		179,
		187,
		1,
		25,
		241,
		16,
		222,
		77,
		193,
		173,
		14,
		57,
		212,
		104,
		147,
		238,
		210,
		220,
		162,
		20,
		65,
		126,
		59,
		106,
		129,
		110,
		98,
		67,
		45,
		39,
		75,
		176,
		3,
		12,
		169,
		100,
		192,
		50,
		209,
		30,
		184,
		114,
		190,
		21,
		195,
		170,
		71,
		34,
		138,
		255,
		203,
		49,
		152,
		18,
		189,
		139,
		219,
		221,
		201,
		94,
		251,
		90,
		47,
		168,
		177,
		109,
		32,
		202,
		194,
		64,
		145,
		124,
		224,
		73,
		160,
		132,
		165,
		52,
		116,
		96,
		167,
		174,
		102,
		93,
		38,
		108,
		2,
		183,
		122,
		182,
		35,
		228,
		150,
		131,
		17,
		115,
		137,
		7,
		148,
		11,
		149,
		86,
		178,
		82,
		111,
		70,
		58,
		231,
		161,
		144,
		246,
		186,
		99,
		250,
		254,
		84,
		242,
		237,
		230,
		234,
		13,
		53,
		227,
		81,
		60,
		69,
		51,
		62,
		107,
		200,
		214,
		97,
		91,
		19,
		88,
		236,
		31,
		159,
		154,
		74,
		175,
		7,
		85,
		249,
		107,
		99,
		201,
		209,
		192,
		33,
		157,
		14,
		28,
		37,
		50,
		88,
		230,
		133,
		124,
		63,
		214,
		30,
		86,
		5,
		77,
		140,
		173,
		82,
		59,
		36,
		73,
		239,
		23,
		45,
		171,
		181,
		148,
		204,
		232,
		15,
		137,
		166,
		44,
		118,
		212,
		208,
		56,
		165,
		146,
		131,
		35,
		237,
		71,
		8,
		29,
		101,
		115,
		161,
		75,
		123,
		128,
		199,
		223,
		92,
		116,
		32,
		248,
		22,
		66,
		9,
		79,
		183,
		127,
		49,
		39,
		244,
		252,
		10,
		203,
		202,
		156,
		169,
		94,
		53,
		231,
		93,
		135,
		245,
		57,
		251,
		111,
		100,
		21,
		241,
		87,
		250,
		216,
		0,
		78,
		108,
		167,
		254,
		41,
		3,
		224,
		205,
		76,
		200,
		20,
		143,
		158,
		105,
		95,
		218,
		168,
		198,
		152,
		40,
		213,
		207,
		185,
		160,
		80,
		217,
		229,
		221,
		129,
		51,
		149,
		236,
		238,
		227,
		24,
		187,
		177,
		6,
		195,
		139,
		60,
		136,
		150,
		191,
		55,
		234,
		64,
		113,
		106,
		38,
		42,
		179,
		132,
		46,
		61,
		34,
		58,
		54,
		102,
		170,
		52,
		243,
		83,
		70,
		163,
		193,
		215,
		89,
		219,
		68,
		134,
		69,
		130,
		98,
		153,
		48,
		84,
		112,
		228,
		117,
		176,
		164,
		126,
		119,
		141,
		182,
		188,
		246,
		103,
		210,
		13,
		11,
		142,
		25,
		138,
		43,
		120,
		255,
		189,
		97,
		26,
		240,
		144,
		18,
		172,
		65,
		162,
		104,
		197,
		110,
		122,
		19,
		242,
		151,
		47,
		90,
		225,
		27,
		194,
		72,
		91,
		109,
		190,
		81,
		147,
		178,
		247,
		253,
		96,
		155,
		220,
		211,
		180,
		121,
		226,
		16,
		206,
		1,
		125,
		17,
		233,
		222,
		184,
		4,
		62,
		67,
		12,
		2,
		196,
		114,
		174,
		145,
		186,
		235,
		247,
		248,
		93,
		144,
		52,
		198,
		37,
		234,
		117,
		154,
		150,
		183,
		217,
		211,
		191,
		68,
		38,
		40,
		86,
		224,
		181,
		138,
		207,
		158,
		53,
		89,
		250,
		205,
		32,
		156,
		103,
		26,
		69,
		153,
		212,
		62,
		54,
		180,
		101,
		136,
		47,
		41,
		61,
		170,
		15,
		174,
		219,
		92,
		126,
		11,
		63,
		197,
		108,
		230,
		73,
		127,
		76,
		134,
		74,
		225,
		55,
		94,
		179,
		214,
		125,
		243,
		96,
		255,
		97,
		162,
		70,
		166,
		142,
		66,
		215,
		16,
		98,
		119,
		229,
		135,
		83,
		90,
		146,
		169,
		210,
		152,
		246,
		67,
		20,
		189,
		84,
		112,
		81,
		192,
		128,
		148,
		159,
		60,
		34,
		149,
		175,
		231,
		172,
		24,
		249,
		193,
		23,
		165,
		200,
		177,
		199,
		202,
		151,
		14,
		10,
		160,
		6,
		25,
		18,
		30,
		155,
		178,
		206,
		19,
		85,
		100,
		2,
		78,
		218,
		131,
		39,
		13,
		233,
		196,
		236,
		104,
		213,
		49,
		222,
		115,
		36,
		252,
		72,
		106,
		12,
		188,
		235,
		241,
		132,
		157,
		253,
		116,
		171,
		48,
		77,
		186,
		254,
		123,
		226,
		140,
		45,
		102,
		147,
		107,
		21,
		91,
		208,
		3,
		227,
		164,
		120,
		251,
		4,
		80,
		50,
		220,
		121,
		195,
		209,
		163,
		223,
		29,
		64,
		75,
		46,
		216,
		238,
		239,
		141,
		184,
		17,
		122,
		232,
		176,
		43,
		204,
		130,
		173,
		82,
		8,
		0,
		31,
		203,
		109,
		9,
		51,
		145,
		143,
		44,
		99,
		65,
		57,
		133,
		87,
		95,
		111,
		244,
		240,
		129,
		28,
		167,
		182,
		201,
		7,
		71,
		79,
		245,
		237,
		5,
		228,
		42,
		185,
		187,
		59,
		110,
		190,
		35,
		139,
		221,
		113,
		58,
		242,
		33,
		114,
		168,
		105,
		118,
		137,
		1,
		56,
		124,
		22,
		161,
		194,
		27,
		88,
		183,
		244,
		45,
		78,
		249,
		147,
		215,
		238,
		102,
		153,
		134,
		71,
		157,
		206,
		29,
		213,
		158,
		50,
		100,
		204,
		81,
		129,
		212,
		84,
		86,
		197,
		11,
		234,
		2,
		26,
		160,
		168,
		232,
		38,
		89,
		72,
		243,
		110,
		31,
		27,
		128,
		176,
		184,
		106,
		214,
		174,
		140,
		195,
		96,
		126,
		220,
		230,
		130,
		36,
		240,
		239,
		231,
		189,
		66,
		109,
		35,
		196,
		95,
		7,
		149,
		254,
		87,
		98,
		0,
		1,
		55,
		193,
		164,
		175,
		242,
		48,
		76,
		62,
		44,
		150,
		51,
		221,
		191,
		235,
		20,
		151,
		75,
		12,
		236,
		63,
		180,
		250,
		132,
		124,
		137,
		194,
		99,
		13,
		148,
		17,
		85,
		162,
		223,
		68,
		155,
		18,
		114,
		107,
		30,
		4,
		83,
		227,
		133,
		167,
		19,
		203,
		156,
		49,
		222,
		58,
		135,
		3,
		43,
		6,
		226,
		200,
		108,
		53,
		161,
		237,
		139,
		186,
		252,
		33,
		93,
		116,
		241,
		253,
		246,
		233,
		79,
		229,
		225,
		120,
		37,
		40,
		94,
		39,
		74,
		248,
		46,
		22,
		247,
		67,
		8,
		64,
		122,
		205,
		211,
		112,
		123,
		111,
		47,
		190,
		159,
		187,
		82,
		251,
		172,
		25,
		119,
		61,
		70,
		125,
		181,
		188,
		104,
		10,
		152,
		141,
		255,
		56,
		173,
		97,
		73,
		169,
		77,
		142,
		16,
		143,
		28,
		146,
		57,
		92,
		177,
		216,
		14,
		165,
		105,
		163,
		144,
		166,
		9,
		131,
		42,
		208,
		228,
		145,
		179,
		52,
		65,
		224,
		69,
		210,
		198,
		192,
		103,
		138,
		91,
		217,
		209,
		59,
		118,
		170,
		245,
		136,
		115,
		207,
		34,
		21,
		182,
		218,
		113,
		32,
		101,
		90,
		15,
		185,
		199,
		201,
		171,
		80,
		60,
		54,
		88,
		121,
		117,
		154,
		5,
		202,
		41,
		219,
		127,
		178,
		23,
		24,
		34,
		138,
		216,
		116,
		146,
		18,
		23,
		199,
		77,
		172,
		16,
		131,
		230,
		238,
		68,
		92,
		107,
		8,
		241,
		178,
		145,
		168,
		191,
		213,
		192,
		1,
		32,
		223,
		91,
		147,
		219,
		136,
		154,
		160,
		38,
		56,
		182,
		169,
		196,
		98,
		4,
		43,
		161,
		251,
		25,
		65,
		101,
		130,
		31,
		14,
		174,
		96,
		89,
		93,
		181,
		40,
		254,
		44,
		198,
		246,
		202,
		133,
		144,
		232,
		249,
		173,
		117,
		155,
		13,
		74,
		82,
		209,
		242,
		188,
		170,
		121,
		207,
		132,
		194,
		58,
		17,
		36,
		211,
		184,
		113,
		135,
		70,
		71,
		180,
		118,
		226,
		233,
		106,
		208,
		10,
		120,
		85,
		141,
		195,
		225,
		152,
		124,
		218,
		119,
		109,
		64,
		193,
		69,
		42,
		115,
		164,
		142,
		210,
		87,
		37,
		75,
		153,
		2,
		19,
		228,
		52,
		45,
		221,
		84,
		21,
		165,
		88,
		66,
		24,
		97,
		99,
		110,
		104,
		80,
		12,
		190,
		78,
		6,
		177,
		5,
		149,
		54,
		60,
		139,
		205,
		252,
		231,
		171,
		27,
		50,
		186,
		103,
		176,
		175,
		183,
		187,
		167,
		62,
		9,
		163,
		222,
		203,
		46,
		76,
		235,
		39,
		185,
		126,
		11,
		200,
		15,
		239,
		90,
		212,
		86,
		201,
		105,
		248,
		61,
		41,
		20,
		189,
		217,
		253,
		49,
		123,
		234,
		95,
		243,
		250,
		0,
		59,
		7,
		166,
		245,
		114,
		128,
		134,
		3,
		148,
		29,
		159,
		33,
		204,
		48,
		236,
		151,
		125,
		247,
		158,
		127,
		26,
		47,
		229,
		72,
		227,
		79,
		197,
		214,
		224,
		162,
		215,
		108,
		150,
		122,
		112,
		237,
		22,
		51,
		220,
		30,
		63,
		111,
		157,
		67,
		140,
		81,
		94,
		57,
		244,
		53,
		137,
		179,
		206,
		240,
		156,
		100,
		83,
		35,
		28,
		55,
		102,
		129,
		143,
		73,
		255,
		74,
		160,
		219,
		7,
		251,
		22,
		168,
		42,
		163,
		52,
		177,
		183,
		69,
		194,
		145,
		48,
		161,
		91,
		224,
		149,
		215,
		225,
		242,
		120,
		212,
		127,
		210,
		24,
		45,
		72,
		169,
		192,
		195,
		14,
		105,
		102,
		187,
		116,
		170,
		88,
		8,
		41,
		235,
		4,
		33,
		218,
		71,
		77,
		200,
		126,
		184,
		182,
		81,
		0,
		43,
		20,
		100,
		83,
		171,
		199,
		249,
		132,
		190,
		2,
		188,
		11,
		1,
		162,
		50,
		134,
		49,
		121,
		137,
		59,
		103,
		95,
		89,
		84,
		86,
		47,
		148,
		62,
		9,
		144,
		140,
		128,
		152,
		135,
		80,
		141,
		5,
		44,
		156,
		208,
		203,
		250,
		254,
		97,
		227,
		109,
		216,
		56,
		255,
		60,
		73,
		142,
		16,
		220,
		123,
		25,
		252,
		233,
		12,
		55,
		205,
		196,
		104,
		221,
		76,
		6,
		202,
		238,
		138,
		35,
		30,
		10,
		207,
		94,
		13,
		245,
		179,
		248,
		78,
		157,
		139,
		197,
		230,
		101,
		125,
		58,
		172,
		66,
		154,
		206,
		79,
		61,
		231,
		93,
		222,
		213,
		65,
		131,
		112,
		113,
		176,
		70,
		143,
		228,
		19,
		38,
		185,
		147,
		68,
		29,
		114,
		246,
		119,
		90,
		64,
		237,
		75,
		175,
		214,
		244,
		186,
		98,
		117,
		111,
		146,
		34,
		99,
		234,
		26,
		3,
		211,
		36,
		53,
		174,
		124,
		18,
		96,
		229,
		107,
		115,
		217,
		209,
		180,
		39,
		155,
		122,
		240,
		32,
		37,
		165,
		67,
		239,
		189,
		21,
		191,
		236,
		164,
		108,
		232,
		23,
		54,
		247,
		226,
		136,
		159,
		166,
		133,
		198,
		63,
		92,
		181,
		82,
		118,
		46,
		204,
		150,
		28,
		51,
		85,
		243,
		158,
		129,
		15,
		17,
		151,
		173,
		223,
		167,
		178,
		253,
		193,
		241,
		27,
		201,
		31,
		130,
		106,
		110,
		87,
		153,
		57,
		40,
		39,
		18,
		229,
		142,
		71,
		177,
		112,
		113,
		130,
		64,
		212,
		223,
		92,
		230,
		60,
		78,
		207,
		155,
		67,
		173,
		59,
		124,
		100,
		231,
		196,
		138,
		156,
		79,
		249,
		178,
		244,
		12,
		228,
		97,
		19,
		125,
		175,
		52,
		37,
		210,
		2,
		27,
		235,
		98,
		35,
		147,
		110,
		116,
		99,
		187,
		245,
		215,
		174,
		74,
		236,
		65,
		91,
		118,
		247,
		115,
		28,
		69,
		146,
		184,
		93,
		62,
		199,
		132,
		167,
		158,
		137,
		227,
		246,
		55,
		22,
		233,
		109,
		165,
		237,
		190,
		20,
		188,
		238,
		66,
		164,
		36,
		33,
		241,
		123,
		154,
		38,
		181,
		208,
		216,
		114,
		106,
		41,
		56,
		152,
		86,
		111,
		107,
		131,
		30,
		200,
		26,
		240,
		192,
		252,
		179,
		166,
		222,
		172,
		150,
		16,
		14,
		128,
		159,
		242,
		84,
		50,
		29,
		151,
		205,
		47,
		119,
		83,
		180,
		193,
		168,
		73,
		44,
		25,
		211,
		126,
		213,
		121,
		243,
		224,
		214,
		148,
		225,
		90,
		160,
		49,
		144,
		195,
		68,
		182,
		176,
		53,
		162,
		43,
		169,
		23,
		250,
		6,
		218,
		161,
		75,
		3,
		191,
		133,
		248,
		198,
		170,
		82,
		101,
		21,
		42,
		1,
		80,
		183,
		185,
		127,
		201,
		76,
		70,
		219,
		32,
		5,
		234,
		40,
		9,
		89,
		171,
		117,
		186,
		103,
		104,
		15,
		194,
		251,
		202,
		209,
		157,
		45,
		4,
		140,
		81,
		134,
		153,
		129,
		141,
		145,
		8,
		63,
		149,
		46,
		87,
		85,
		88,
		94,
		102,
		58,
		136,
		120,
		48,
		135,
		51,
		163,
		0,
		10,
		189,
		95,
		206,
		11,
		31,
		34,
		139,
		239,
		203,
		7,
		77,
		220,
		105,
		197,
		204,
		54,
		13,
		232,
		253,
		24,
		122,
		221,
		17,
		143,
		72,
		61,
		254,
		57,
		217,
		108,
		226,
		96,
		255,
		255,
		207,
		199,
		21,
		169,
		209,
		243,
		188,
		151,
		89,
		38,
		55,
		140,
		17,
		96,
		100,
		152,
		194,
		61,
		18,
		92,
		187,
		32,
		120,
		31,
		1,
		163,
		153,
		253,
		91,
		143,
		144,
		25,
		230,
		249,
		56,
		226,
		177,
		98,
		170,
		200,
		139,
		82,
		49,
		134,
		236,
		168,
		145,
		41,
		186,
		116,
		149,
		125,
		101,
		223,
		215,
		225,
		77,
		27,
		179,
		46,
		254,
		171,
		43,
		228,
		109,
		13,
		20,
		97,
		123,
		44,
		156,
		28,
		114,
		235,
		110,
		42,
		221,
		160,
		59,
		248,
		124,
		84,
		121,
		157,
		183,
		19,
		74,
		250,
		216,
		108,
		180,
		227,
		78,
		161,
		69,
		219,
		208,
		141,
		79,
		51,
		65,
		83,
		233,
		234,
		129,
		40,
		29,
		127,
		126,
		72,
		190,
		147,
		64,
		203,
		133,
		251,
		3,
		246,
		189,
		76,
		162,
		192,
		148,
		107,
		232,
		52,
		115,
		211,
		102,
		8,
		66,
		57,
		2,
		202,
		195,
		4,
		16,
		80,
		193,
		224,
		196,
		45,
		132,
		54,
		214,
		50,
		241,
		111,
		240,
		99,
		237,
		23,
		117,
		231,
		242,
		128,
		71,
		210,
		30,
		142,
		130,
		137,
		150,
		48,
		154,
		158,
		7,
		222,
		146,
		244,
		197,
		131,
		94,
		34,
		11,
		136,
		60,
		119,
		63,
		5,
		178,
		172,
		15,
		90,
		87,
		33,
		88,
		53,
		135,
		81,
		105,
		14,
		95,
		26,
		37,
		112,
		198,
		184,
		182,
		138,
		247,
		12,
		176,
		93,
		106,
		201,
		165,
		122,
		181,
		86,
		164,
		0,
		205,
		104,
		103,
		212,
		47,
		67,
		73,
		39,
		6,
		10,
		229,
		239,
		217,
		118,
		252,
		85,
		175,
		155,
		238,
		70,
		35,
		206,
		167,
		113,
		218,
		22,
		220,
		24,
		245,
		36,
		166,
		174,
		68,
		9,
		213,
		204,
		75,
		62,
		159,
		58,
		173,
		185,
		191,
		3,
		91,
		192,
		39,
		105,
		70,
		185,
		227,
		235,
		244,
		32,
		134,
		226,
		216,
		122,
		100,
		199,
		136,
		170,
		210,
		110,
		188,
		180,
		132,
		31,
		27,
		106,
		247,
		76,
		93,
		34,
		236,
		172,
		164,
		30,
		6,
		238,
		15,
		193,
		82,
		80,
		208,
		133,
		85,
		200,
		96,
		54,
		154,
		209,
		25,
		202,
		153,
		67,
		130,
		157,
		98,
		234,
		211,
		151,
		253,
		74,
		41,
		240,
		179,
		49,
		104,
		204,
		230,
		2,
		47,
		7,
		131,
		62,
		218,
		53,
		152,
		207,
		23,
		163,
		129,
		231,
		87,
		0,
		26,
		111,
		118,
		22,
		159,
		64,
		219,
		166,
		81,
		21,
		144,
		9,
		103,
		198,
		141,
		120,
		128,
		254,
		176,
		59,
		232,
		8,
		79,
		147,
		16,
		239,
		187,
		217,
		55,
		146,
		40,
		58,
		72,
		52,
		246,
		171,
		160,
		197,
		51,
		5,
		4,
		102,
		83,
		250,
		145,
		150,
		24,
		139,
		20,
		138,
		73,
		173,
		77,
		101,
		169,
		60,
		251,
		137,
		156,
		14,
		108,
		184,
		177,
		121,
		66,
		57,
		115,
		29,
		168,
		255,
		86,
		191,
		155,
		186,
		43,
		107,
		127,
		116,
		215,
		201,
		126,
		68,
		12,
		71,
		243,
		18,
		42,
		252,
		78,
		35,
		90,
		44,
		33,
		124,
		229,
		225,
		75,
		237,
		242,
		249,
		245,
		112,
		89,
		37,
		248,
		190,
		143,
		233,
		165,
		28,
		19,
		182,
		123,
		223,
		45,
		206,
		1,
		158,
		113,
		125,
		92,
		50,
		56,
		84,
		175,
		205,
		195,
		189,
		11,
		94,
		97,
		36,
		117,
		222,
		178,
		17,
		38,
		203,
		119,
		140,
		241,
		174,
		114,
		63,
		213,
		221,
		95,
		142,
		99,
		196,
		194,
		214,
		65,
		228,
		69,
		48,
		183,
		149,
		224,
		212,
		46,
		135,
		13,
		162,
		148,
		167,
		109,
		161,
		10,
		220,
		181,
		88,
		61,
		203,
		47,
		137,
		36,
		6,
		222,
		144,
		178,
		121,
		32,
		247,
		221,
		62,
		19,
		146,
		22,
		202,
		81,
		64,
		183,
		129,
		4,
		118,
		24,
		70,
		246,
		11,
		17,
		103,
		126,
		142,
		7,
		94,
		25,
		1,
		130,
		170,
		254,
		38,
		200,
		156,
		215,
		145,
		105,
		161,
		239,
		249,
		42,
		34,
		212,
		21,
		20,
		66,
		119,
		128,
		235,
		57,
		131,
		89,
		43,
		231,
		37,
		177,
		186,
		229,
		250,
		151,
		49,
		201,
		243,
		117,
		107,
		74,
		18,
		54,
		209,
		87,
		120,
		242,
		168,
		10,
		14,
		230,
		123,
		76,
		93,
		253,
		51,
		153,
		214,
		195,
		187,
		173,
		127,
		149,
		165,
		193,
		65,
		68,
		148,
		113,
		217,
		139,
		39,
		181,
		189,
		23,
		15,
		30,
		255,
		67,
		208,
		194,
		251,
		236,
		134,
		56,
		91,
		162,
		225,
		8,
		192,
		136,
		219,
		147,
		82,
		115,
		140,
		96,
		143,
		77,
		108,
		41,
		35,
		190,
		69,
		2,
		13,
		106,
		167,
		60,
		206,
		16,
		223,
		163,
		207,
		55,
		0,
		102,
		218,
		224,
		157,
		210,
		220,
		26,
		172,
		112,
		79,
		100,
		53,
		211,
		213,
		80,
		199,
		84,
		245,
		166,
		33,
		99,
		191,
		196,
		46,
		78,
		204,
		114,
		159,
		124,
		182,
		27,
		176,
		164,
		205,
		44,
		73,
		241,
		132,
		63,
		197,
		28,
		150,
		133,
		179,
		184,
		116,
		234,
		45,
		141,
		152,
		125,
		31,
		9,
		135,
		5,
		154,
		88,
		155,
		92,
		188,
		71,
		238,
		138,
		174,
		58,
		171,
		110,
		122,
		160,
		169,
		83,
		104,
		98,
		40,
		185,
		12,
		59,
		3,
		95,
		237,
		75,
		50,
		48,
		61,
		198,
		101,
		111,
		216,
		29,
		85,
		226,
		86,
		72,
		97,
		233,
		52,
		158,
		175,
		180,
		248,
		244,
		109,
		90,
		240,
		227,
		252,
		228,
		232,
		50,
		87,
		186,
		211,
		5,
		174,
		98,
		168,
		155,
		173,
		2,
		136,
		33,
		219,
		239,
		154,
		184,
		63,
		74,
		235,
		78,
		217,
		205,
		203,
		108,
		129,
		80,
		210,
		218,
		48,
		125,
		161,
		254,
		131,
		120,
		196,
		41,
		30,
		189,
		209,
		122,
		43,
		110,
		81,
		4,
		178,
		204,
		194,
		160,
		91,
		55,
		61,
		83,
		114,
		126,
		145,
		14,
		193,
		34,
		208,
		116,
		185,
		28,
		19,
		170,
		230,
		128,
		177,
		247,
		42,
		86,
		127,
		250,
		246,
		253,
		226,
		68,
		238,
		234,
		115,
		46,
		35,
		85,
		44,
		65,
		243,
		37,
		29,
		252,
		72,
		3,
		75,
		113,
		198,
		216,
		123,
		112,
		100,
		36,
		181,
		148,
		176,
		89,
		240,
		167,
		18,
		124,
		54,
		77,
		118,
		190,
		183,
		99,
		1,
		147,
		134,
		244,
		51,
		166,
		106,
		66,
		162,
		70,
		133,
		27,
		132,
		23,
		153,
		158,
		245,
		92,
		105,
		11,
		10,
		60,
		202,
		175,
		164,
		249,
		59,
		71,
		53,
		39,
		157,
		56,
		214,
		180,
		224,
		31,
		156,
		64,
		7,
		231,
		52,
		191,
		241,
		143,
		119,
		130,
		201,
		104,
		6,
		159,
		26,
		94,
		169,
		212,
		79,
		144,
		25,
		121,
		96,
		21,
		15,
		88,
		232,
		142,
		172,
		24,
		192,
		151,
		58,
		213,
		49,
		140,
		8,
		32,
		13,
		233,
		195,
		103,
		62,
		188,
		255,
		38,
		69,
		242,
		152,
		220,
		229,
		109,
		146,
		141,
		76,
		150,
		197,
		22,
		222,
		149,
		57,
		111,
		199,
		90,
		138,
		223,
		95,
		93,
		206,
		0,
		225,
		9,
		17,
		171,
		163,
		227,
		45,
		82,
		67,
		248,
		101,
		20,
		16,
		139,
		187,
		179,
		97,
		221,
		165,
		135,
		200,
		107,
		117,
		215,
		237,
		137,
		47,
		251,
		228,
		236,
		182,
		73,
		102,
		40,
		207,
		84,
		12,
		148,
		5,
		192,
		212,
		233,
		64,
		36,
		0,
		204,
		134,
		23,
		162,
		14,
		7,
		253,
		198,
		35,
		54,
		211,
		177,
		22,
		218,
		68,
		131,
		246,
		53,
		242,
		18,
		167,
		41,
		171,
		52,
		48,
		1,
		26,
		86,
		230,
		207,
		71,
		154,
		77,
		82,
		74,
		70,
		90,
		195,
		244,
		94,
		229,
		156,
		158,
		147,
		149,
		173,
		241,
		67,
		179,
		251,
		76,
		248,
		104,
		203,
		193,
		118,
		200,
		116,
		78,
		51,
		13,
		97,
		153,
		174,
		222,
		225,
		202,
		155,
		124,
		114,
		180,
		2,
		135,
		141,
		16,
		235,
		206,
		33,
		227,
		194,
		146,
		96,
		190,
		113,
		172,
		163,
		196,
		9,
		10,
		99,
		130,
		231,
		210,
		24,
		181,
		30,
		178,
		56,
		43,
		29,
		95,
		42,
		145,
		107,
		250,
		91,
		8,
		143,
		125,
		123,
		254,
		105,
		224,
		98,
		220,
		49,
		205,
		17,
		106,
		128,
		226,
		243,
		83,
		157,
		164,
		160,
		72,
		213,
		3,
		209,
		59,
		11,
		55,
		120,
		109,
		21,
		103,
		93,
		219,
		197,
		75,
		84,
		57,
		159,
		249,
		214,
		92,
		6,
		228,
		188,
		152,
		127,
		150,
		245,
		12,
		79,
		108,
		85,
		66,
		40,
		61,
		252,
		221,
		34,
		166,
		110,
		38,
		117,
		223,
		119,
		37,
		137,
		111,
		239,
		234,
		58,
		176,
		81,
		237,
		126,
		27,
		19,
		185,
		161,
		47,
		170,
		216,
		182,
		100,
		255,
		238,
		25,
		201,
		208,
		32,
		169,
		232,
		88,
		165,
		191,
		168,
		112,
		62,
		28,
		101,
		129,
		39,
		138,
		144,
		189,
		60,
		184,
		215,
		142,
		89,
		115,
		236,
		217,
		46,
		69,
		140,
		122,
		187,
		186,
		73,
		139,
		31,
		20,
		151,
		45,
		247,
		133,
		4,
		80,
		136,
		102,
		240,
		183,
		175,
		44,
		15,
		65,
		87,
		132,
		50,
		121,
		63,
		199,
		134,
		94,
		234,
		200,
		119,
		147,
		124,
		209,
		75,
		102,
		78,
		202,
		120,
		33,
		133,
		175,
		92,
		217,
		64,
		46,
		9,
		146,
		239,
		24,
		38,
		63,
		95,
		214,
		174,
		30,
		73,
		83,
		166,
		242,
		144,
		126,
		65,
		6,
		218,
		89,
		183,
		249,
		114,
		161,
		143,
		196,
		49,
		201,
		47,
		26,
		179,
		216,
		140,
		122,
		76,
		77,
		125,
		191,
		226,
		233,
		219,
		97,
		115,
		1,
		171,
		145,
		51,
		45,
		162,
		189,
		105,
		207,
		32,
		15,
		240,
		170,
		74,
		18,
		137,
		110,
		5,
		20,
		107,
		165,
		86,
		82,
		35,
		190,
		39,
		245,
		253,
		205,
		142,
		193,
		227,
		155,
		129,
		41,
		127,
		211,
		25,
		153,
		204,
		28,
		167,
		70,
		136,
		27,
		229,
		237,
		87,
		79,
		3,
		96,
		185,
		250,
		163,
		154,
		222,
		180,
		10,
		203,
		212,
		43,
		152,
		80,
		131,
		208,
		123,
		113,
		29,
		230,
		215,
		56,
		52,
		21,
		150,
		100,
		135,
		72,
		85,
		90,
		255,
		50,
		130,
		62,
		197,
		184,
		151,
		251,
		88,
		111,
		23,
		40,
		109,
		60,
		132,
		138,
		244,
		66,
		173,
		12,
		121,
		254,
		141,
		139,
		159,
		8,
		148,
		22,
		199,
		42,
		231,
		59,
		118,
		156,
		149,
		252,
		17,
		116,
		238,
		36,
		232,
		67,
		206,
		68,
		235,
		221,
		220,
		169,
		157,
		103,
		192,
		213,
		71,
		37,
		44,
		224,
		117,
		178,
		195,
		0,
		228,
		4,
		223,
		81,
		194,
		93,
		243,
		98,
		34,
		54,
		182,
		31,
		246,
		210,
		112,
		58,
		84,
		225,
		241,
		248,
		48,
		11,
		106,
		19,
		101,
		104,
		91,
		99,
		181,
		7,
		13,
		69,
		14,
		186,
		61,
		158,
		128,
		55,
		247,
		198,
		160,
		236,
		57,
		16,
		108,
		177,
		164,
		187,
		176,
		188,
		53,
		172,
		168,
		2,
		158,
		29,
		193,
		134,
		185,
		87,
		53,
		97,
		14,
		246,
		3,
		72,
		102,
		181,
		62,
		112,
		138,
		139,
		189,
		75,
		31,
		116,
		221,
		232,
		198,
		180,
		166,
		28,
		46,
		37,
		120,
		186,
		22,
		187,
		84,
		176,
		15,
		45,
		153,
		65,
		104,
		66,
		230,
		191,
		13,
		137,
		161,
		140,
		223,
		40,
		85,
		206,
		233,
		135,
		30,
		155,
		148,
		142,
		217,
		105,
		17,
		152,
		248,
		225,
		219,
		11,
		94,
		222,
		20,
		184,
		238,
		70,
		136,
		144,
		42,
		34,
		220,
		79,
		129,
		96,
		115,
		25,
		93,
		100,
		61,
		126,
		167,
		196,
		23,
		68,
		151,
		95,
		236,
		19,
		12,
		205,
		8,
		174,
		122,
		101,
		234,
		244,
		86,
		108,
		169,
		78,
		213,
		141,
		109,
		55,
		200,
		231,
		121,
		228,
		149,
		145,
		98,
		172,
		211,
		194,
		92,
		36,
		6,
		73,
		10,
		58,
		50,
		224,
		207,
		88,
		76,
		74,
		57,
		190,
		203,
		106,
		91,
		177,
		252,
		32,
		237,
		0,
		209,
		83,
		132,
		47,
		227,
		41,
		179,
		214,
		59,
		82,
		160,
		90,
		110,
		27,
		26,
		44,
		131,
		9,
		210,
		243,
		255,
		16,
		33,
		218,
		182,
		188,
		245,
		56,
		157,
		146,
		143,
		64,
		163,
		81,
		168,
		159,
		60,
		80,
		127,
		2,
		249,
		69,
		133,
		51,
		77,
		67,
		251,
		170,
		239,
		208,
		192,
		114,
		164,
		156,
		175,
		162,
		212,
		173,
		240,
		71,
		89,
		250,
		125,
		201,
		130,
		202,
		118,
		171,
		215,
		254,
		43,
		103,
		1,
		48,
		197,
		111,
		107,
		242,
		123,
		119,
		124,
		99,
		117,
		178,
		39,
		235,
		226,
		128,
		18,
		7,
		154,
		5,
		150,
		24,
		195,
		35,
		199,
		4,
		21,
		49,
		216,
		113,
		241,
		229,
		165,
		52,
		204,
		247,
		63,
		54,
		38,
		147,
		253,
		183,
		217,
		11,
		225,
		209,
		237,
		162,
		183,
		207,
		56,
		41,
		137,
		71,
		126,
		122,
		146,
		15,
		35,
		12,
		134,
		220,
		62,
		102,
		66,
		165,
		189,
		135,
		1,
		31,
		145,
		142,
		227,
		69,
		231,
		38,
		7,
		248,
		124,
		180,
		252,
		175,
		76,
		47,
		214,
		149,
		182,
		143,
		152,
		242,
		106,
		139,
		55,
		164,
		193,
		201,
		99,
		123,
		5,
		173,
		255,
		83,
		181,
		53,
		48,
		224,
		19,
		10,
		250,
		115,
		50,
		130,
		127,
		101,
		245,
		112,
		2,
		108,
		190,
		37,
		52,
		195,
		74,
		103,
		230,
		98,
		13,
		84,
		131,
		169,
		114,
		170,
		228,
		198,
		191,
		91,
		253,
		80,
		147,
		81,
		197,
		206,
		77,
		247,
		45,
		95,
		54,
		3,
		244,
		159,
		86,
		160,
		97,
		96,
		213,
		155,
		141,
		94,
		232,
		163,
		229,
		29,
		222,
		138,
		82,
		188,
		42,
		109,
		117,
		246,
		22,
		92,
		205,
		120,
		212,
		221,
		39,
		28,
		78,
		223,
		26,
		14,
		51,
		154,
		254,
		218,
		44,
		239,
		40,
		200,
		125,
		243,
		113,
		238,
		249,
		236,
		9,
		107,
		204,
		0,
		158,
		89,
		151,
		136,
		144,
		156,
		128,
		25,
		46,
		132,
		234,
		219,
		192,
		140,
		60,
		21,
		157,
		64,
		105,
		33,
		150,
		34,
		178,
		17,
		27,
		172,
		63,
		70,
		68,
		73,
		79,
		119,
		43,
		153,
		4,
		59,
		16,
		65,
		166,
		168,
		110,
		216,
		18,
		174,
		148,
		233,
		215,
		187,
		67,
		116,
		72,
		186,
		100,
		171,
		118,
		121,
		30,
		211,
		93,
		87,
		202,
		49,
		20,
		251,
		57,
		24,
		104,
		226,
		241,
		199,
		133,
		240,
		75,
		177,
		208,
		185,
		88,
		61,
		8,
		194,
		111,
		196,
		58,
		184,
		6,
		235,
		23,
		203,
		176,
		90,
		32,
		129,
		210,
		85,
		167,
		161,
		36,
		179,
		228,
		11,
		7,
		38,
		72,
		66,
		46,
		213,
		102,
		105,
		204,
		1,
		165,
		87,
		180,
		123,
		164,
		200,
		107,
		92,
		177,
		13,
		246,
		139,
		183,
		185,
		199,
		113,
		36,
		27,
		94,
		15,
		190,
		184,
		172,
		59,
		158,
		63,
		74,
		205,
		212,
		8,
		69,
		175,
		167,
		37,
		244,
		25,
		221,
		23,
		219,
		112,
		166,
		207,
		34,
		71,
		239,
		154,
		174,
		84,
		253,
		119,
		216,
		238,
		31,
		211,
		70,
		129,
		243,
		230,
		116,
		22,
		236,
		98,
		241,
		110,
		240,
		51,
		215,
		55,
		133,
		44,
		197,
		225,
		192,
		81,
		17,
		5,
		194,
		203,
		3,
		56,
		67,
		9,
		103,
		210,
		104,
		80,
		134,
		52,
		89,
		32,
		86,
		91,
		14,
		173,
		179,
		4,
		62,
		118,
		61,
		137,
		10,
		35,
		95,
		130,
		196,
		245,
		147,
		223,
		6,
		159,
		155,
		49,
		151,
		136,
		131,
		143,
		68,
		160,
		79,
		226,
		181,
		109,
		217,
		251,
		75,
		18,
		182,
		156,
		120,
		85,
		125,
		249,
		58,
		161,
		220,
		43,
		111,
		234,
		115,
		29,
		157,
		45,
		122,
		96,
		21,
		12,
		108,
		229,
		114,
		53,
		233,
		106,
		149,
		193,
		163,
		77,
		188,
		247,
		2,
		250,
		132,
		202,
		65,
		146,
		191,
		73,
		127,
		126,
		28,
		41,
		128,
		235,
		232,
		82,
		64,
		50,
		78,
		140,
		209,
		218,
		145,
		142,
		90,
		252,
		152,
		162,
		0,
		30,
		121,
		33,
		186,
		93,
		19,
		60,
		195,
		153,
		101,
		97,
		16,
		141,
		54,
		39,
		88,
		150,
		189,
		242,
		208,
		168,
		20,
		198,
		206,
		254,
		42,
		170,
		255,
		47,
		178,
		26,
		76,
		224,
		214,
		222,
		100,
		124,
		148,
		117,
		187,
		40,
		144,
		169,
		237,
		135,
		48,
		83,
		138,
		201,
		171,
		99,
		176,
		227,
		57,
		248,
		231,
		24,
		36,
		140,
		218,
		118,
		188,
		60,
		105,
		185,
		2,
		227,
		45,
		190,
		64,
		72,
		242,
		234,
		166,
		197,
		28,
		95,
		6,
		63,
		123,
		17,
		175,
		110,
		113,
		142,
		61,
		245,
		38,
		117,
		14,
		52,
		150,
		136,
		7,
		24,
		204,
		106,
		133,
		170,
		85,
		15,
		239,
		183,
		44,
		203,
		160,
		177,
		206,
		0,
		243,
		247,
		134,
		27,
		130,
		80,
		88,
		104,
		43,
		100,
		70,
		62,
		3,
		87,
		53,
		219,
		228,
		163,
		127,
		252,
		18,
		92,
		215,
		4,
		42,
		97,
		148,
		108,
		138,
		191,
		22,
		125,
		41,
		223,
		233,
		232,
		216,
		26,
		71,
		76,
		126,
		196,
		214,
		164,
		35,
		251,
		79,
		109,
		210,
		54,
		217,
		116,
		238,
		195,
		235,
		111,
		221,
		132,
		32,
		10,
		249,
		124,
		229,
		139,
		172,
		55,
		74,
		189,
		131,
		154,
		250,
		115,
		11,
		187,
		236,
		246,
		207,
		182,
		192,
		205,
		254,
		198,
		16,
		162,
		168,
		224,
		171,
		31,
		152,
		59,
		37,
		146,
		82,
		99,
		5,
		73,
		156,
		181,
		201,
		20,
		1,
		30,
		21,
		25,
		144,
		9,
		13,
		167,
		101,
		112,
		226,
		128,
		137,
		69,
		208,
		23,
		102,
		165,
		65,
		161,
		122,
		244,
		103,
		248,
		86,
		199,
		135,
		147,
		19,
		186,
		83,
		119,
		213,
		159,
		241,
		68,
		84,
		93,
		149,
		174,
		8,
		169,
		220,
		91,
		40,
		46,
		58,
		173,
		49,
		179,
		98,
		143,
		66,
		158,
		211,
		57,
		48,
		89,
		180,
		209,
		75,
		129,
		77,
		230,
		107,
		225,
		78,
		120,
		121,
		12,
		56,
		194,
		222,
		212,
		184,
		67,
		114,
		157,
		145,
		176,
		51,
		193,
		34,
		237,
		240,
		255,
		90,
		151,
		39,
		155,
		96,
		29,
		50,
		94,
		253,
		202,
		178,
		141,
		200,
		153,
		33,
		47,
		81,
		231,
		244,
		173,
		122,
		80,
		179,
		158,
		31,
		155,
		70,
		162,
		4,
		169,
		139,
		83,
		29,
		63,
		203,
		123,
		134,
		156,
		234,
		243,
		3,
		138,
		71,
		220,
		205,
		58,
		12,
		137,
		251,
		149,
		17,
		90,
		28,
		228,
		44,
		98,
		116,
		167,
		211,
		148,
		140,
		15,
		39,
		115,
		171,
		69,
		180,
		14,
		212,
		166,
		106,
		168,
		60,
		55,
		175,
		89,
		152,
		153,
		207,
		250,
		13,
		102,
		199,
		159,
		187,
		92,
		218,
		245,
		127,
		37,
		104,
		119,
		26,
		188,
		68,
		126,
		248,
		230,
		20,
		91,
		78,
		54,
		32,
		242,
		24,
		40,
		135,
		131,
		107,
		246,
		193,
		208,
		112,
		190,
		56,
		48,
		154,
		130,
		147,
		114,
		206,
		93,
		76,
		204,
		201,
		25,
		252,
		84,
		6,
		170,
		133,
		77,
		5,
		86,
		30,
		223,
		254,
		1,
		79,
		118,
		97,
		11,
		181,
		214,
		47,
		108,
		143,
		128,
		231,
		42,
		177,
		67,
		157,
		82,
		237,
		2,
		192,
		225,
		164,
		174,
		51,
		200,
		95,
		81,
		151,
		33,
		253,
		194,
		233,
		184,
		46,
		66,
		186,
		141,
		235,
		87,
		109,
		16,
		238,
		50,
		73,
		163,
		195,
		65,
		255,
		18,
		94,
		88,
		221,
		74,
		217,
		120,
		43,
		172,
		124,
		9,
		178,
		72,
		145,
		27,
		8,
		62,
		241,
		59,
		150,
		61,
		41,
		64,
		161,
		196,
		132,
		10,
		136,
		23,
		213,
		22,
		209,
		49,
		53,
		249,
		103,
		160,
		0,
		21,
		240,
		146,
		45,
		36,
		222,
		229,
		239,
		165,
		52,
		129,
		202,
		99,
		7,
		35,
		183,
		38,
		227,
		247,
		75,
		232,
		226,
		85,
		144,
		216,
		111,
		219,
		182,
		142,
		210,
		96,
		198,
		191,
		189,
		176,
		121,
		224,
		215,
		125,
		110,
		113,
		105,
		101,
		197,
		236,
		100,
		185,
		19,
		34,
		57,
		117,
		11,
		167,
		241,
		89,
		196,
		20,
		65,
		193,
		195,
		80,
		158,
		127,
		151,
		143,
		53,
		61,
		34,
		97,
		184,
		219,
		108,
		6,
		66,
		123,
		243,
		12,
		19,
		210,
		8,
		91,
		136,
		64,
		245,
		235,
		73,
		115,
		23,
		177,
		101,
		122,
		114,
		40,
		215,
		248,
		182,
		81,
		202,
		146,
		125,
		179,
		204,
		221,
		102,
		251,
		138,
		142,
		21,
		37,
		45,
		255,
		67,
		59,
		25,
		86,
		166,
		72,
		42,
		126,
		129,
		2,
		222,
		153,
		121,
		170,
		33,
		111,
		17,
		233,
		28,
		87,
		0,
		107,
		194,
		247,
		149,
		148,
		162,
		84,
		49,
		58,
		103,
		165,
		217,
		171,
		185,
		3,
		16,
		50,
		134,
		94,
		9,
		164,
		75,
		175,
		18,
		150,
		190,
		147,
		119,
		93,
		249,
		160,
		246,
		152,
		1,
		132,
		192,
		55,
		74,
		209,
		14,
		135,
		231,
		254,
		139,
		145,
		198,
		118,
		176,
		189,
		203,
		178,
		223,
		109,
		187,
		131,
		98,
		214,
		157,
		213,
		239,
		88,
		70,
		229,
		52,
		120,
		30,
		47,
		105,
		180,
		200,
		225,
		100,
		104,
		99,
		124,
		218,
		112,
		116,
		237,
		253,
		159,
		13,
		24,
		106,
		173,
		56,
		244,
		220,
		60,
		216,
		27,
		133,
		26,
		137,
		7,
		238,
		250,
		186,
		43,
		10,
		46,
		199,
		110,
		57,
		140,
		226,
		168,
		211,
		232,
		32,
		41,
		38,
		161,
		212,
		117,
		208,
		71,
		83,
		85,
		242,
		31,
		206,
		76,
		68,
		174,
		227,
		63,
		172,
		201,
		36,
		77,
		155,
		48,
		252,
		54,
		5,
		51,
		156,
		22,
		191,
		69,
		113,
		4,
		62,
		197,
		169,
		163,
		205,
		236,
		224,
		15,
		144,
		95,
		188,
		78,
		234,
		39,
		130,
		141,
		96,
		29,
		230,
		90,
		183,
		128,
		35,
		79,
		228,
		181,
		240,
		207,
		154,
		44,
		82,
		92,
		219,
		163,
		182,
		249,
		197,
		245,
		31,
		205,
		27,
		134,
		110,
		106,
		83,
		157,
		61,
		44,
		177,
		86,
		114,
		42,
		200,
		146,
		24,
		55,
		81,
		247,
		154,
		133,
		11,
		21,
		147,
		169,
		187,
		232,
		160,
		104,
		236,
		19,
		50,
		243,
		230,
		140,
		155,
		162,
		129,
		194,
		59,
		88,
		111,
		119,
		221,
		213,
		176,
		35,
		159,
		126,
		244,
		36,
		33,
		161,
		71,
		235,
		185,
		17,
		113,
		107,
		150,
		38,
		103,
		238,
		30,
		7,
		215,
		32,
		49,
		170,
		120,
		22,
		100,
		225,
		189,
		151,
		64,
		25,
		118,
		242,
		115,
		94,
		68,
		233,
		79,
		171,
		210,
		240,
		190,
		102,
		75,
		57,
		227,
		89,
		218,
		209,
		69,
		135,
		116,
		117,
		180,
		66,
		139,
		224,
		23,
		34,
		9,
		241,
		183,
		252,
		74,
		153,
		143,
		193,
		226,
		97,
		121,
		62,
		168,
		70,
		158,
		202,
		8,
		51,
		201,
		192,
		108,
		217,
		72,
		2,
		206,
		234,
		142,
		39,
		26,
		14,
		203,
		90,
		250,
		101,
		231,
		105,
		220,
		60,
		251,
		56,
		77,
		138,
		20,
		216,
		127,
		29,
		248,
		237,
		144,
		58,
		13,
		148,
		136,
		132,
		156,
		131,
		84,
		137,
		1,
		40,
		152,
		212,
		207,
		254,
		184,
		15,
		5,
		166,
		54,
		130,
		53,
		125,
		141,
		63,
		99,
		91,
		93,
		80,
		82,
		43,
		204,
		122,
		188,
		178,
		85,
		4,
		47,
		16,
		96,
		87,
		175,
		195,
		253,
		128,
		186,
		6,
		199,
		10,
		109,
		98,
		191,
		112,
		174,
		92,
		12,
		45,
		239,
		0,
		37,
		222,
		67,
		73,
		165,
		95,
		228,
		145,
		211,
		229,
		246,
		124,
		208,
		123,
		214,
		28,
		41,
		76,
		173,
		196,
		78,
		164,
		223,
		3,
		255,
		18,
		172,
		46,
		167,
		48,
		181,
		179,
		65,
		198,
		149,
		52,
		97,
		192,
		181,
		50,
		65,
		71,
		83,
		196,
		88,
		218,
		11,
		230,
		43,
		247,
		186,
		80,
		89,
		48,
		221,
		184,
		34,
		232,
		36,
		143,
		2,
		136,
		39,
		17,
		16,
		101,
		81,
		171,
		183,
		189,
		209,
		42,
		27,
		244,
		248,
		217,
		90,
		168,
		75,
		132,
		153,
		150,
		51,
		254,
		78,
		242,
		9,
		116,
		91,
		55,
		148,
		163,
		219,
		228,
		161,
		240,
		72,
		70,
		56,
		142,
		166,
		223,
		169,
		164,
		151,
		175,
		121,
		203,
		193,
		137,
		194,
		118,
		241,
		82,
		76,
		251,
		59,
		10,
		108,
		32,
		245,
		220,
		160,
		125,
		104,
		119,
		124,
		112,
		249,
		96,
		100,
		206,
		12,
		25,
		139,
		233,
		224,
		44,
		185,
		126,
		15,
		204,
		40,
		200,
		19,
		157,
		14,
		145,
		63,
		174,
		238,
		250,
		122,
		211,
		58,
		30,
		188,
		246,
		152,
		45,
		61,
		52,
		252,
		199,
		106,
		62,
		92,
		178,
		141,
		202,
		22,
		149,
		123,
		53,
		190,
		109,
		67,
		8,
		253,
		5,
		227,
		214,
		127,
		20,
		64,
		182,
		128,
		129,
		177,
		115,
		46,
		37,
		23,
		173,
		191,
		205,
		74,
		146,
		38,
		4,
		187,
		95,
		176,
		29,
		135,
		170,
		130,
		6,
		180,
		237,
		73,
		99,
		144,
		21,
		140,
		226,
		197,
		94,
		35,
		212,
		234,
		243,
		147,
		26,
		98,
		210,
		133,
		159,
		77,
		229,
		179,
		31,
		213,
		85,
		0,
		208,
		107,
		138,
		68,
		215,
		41,
		33,
		155,
		131,
		207,
		172,
		117,
		54,
		111,
		86,
		18,
		120,
		198,
		7,
		24,
		231,
		84,
		156,
		79,
		28,
		103,
		93,
		255,
		225,
		110,
		113,
		165,
		3,
		236,
		195,
		60,
		102,
		134,
		222,
		69,
		162,
		201,
		216,
		167,
		105,
		154,
		158,
		239,
		114,
		235,
		57,
		49,
		1,
		66,
		13,
		47,
		87,
		31,
		130,
		106,
		110,
		87,
		153,
		57,
		40,
		223,
		167,
		178,
		253,
		193,
		241,
		27,
		201,
		85,
		243,
		158,
		129,
		15,
		17,
		151,
		173,
		181,
		82,
		118,
		46,
		204,
		150,
		28,
		51,
		226,
		136,
		159,
		166,
		133,
		198,
		63,
		92,
		191,
		236,
		164,
		108,
		232,
		23,
		54,
		247,
		240,
		32,
		37,
		165,
		67,
		239,
		189,
		21,
		107,
		115,
		217,
		209,
		180,
		39,
		155,
		122,
		211,
		36,
		53,
		174,
		124,
		18,
		96,
		229,
		117,
		111,
		146,
		34,
		99,
		234,
		26,
		3,
		64,
		237,
		75,
		175,
		214,
		244,
		186,
		98,
		185,
		147,
		68,
		29,
		114,
		246,
		119,
		90,
		112,
		113,
		176,
		70,
		143,
		228,
		19,
		38,
		79,
		61,
		231,
		93,
		222,
		213,
		65,
		131,
		230,
		101,
		125,
		58,
		172,
		66,
		154,
		206,
		13,
		245,
		179,
		248,
		78,
		157,
		139,
		197,
		202,
		238,
		138,
		35,
		30,
		10,
		207,
		94,
		12,
		55,
		205,
		196,
		104,
		221,
		76,
		6,
		73,
		142,
		16,
		220,
		123,
		25,
		252,
		233,
		254,
		97,
		227,
		109,
		216,
		56,
		255,
		60,
		80,
		141,
		5,
		44,
		156,
		208,
		203,
		250,
		148,
		62,
		9,
		144,
		140,
		128,
		152,
		135,
		137,
		59,
		103,
		95,
		89,
		84,
		86,
		47,
		188,
		11,
		1,
		162,
		50,
		134,
		49,
		121,
		100,
		83,
		171,
		199,
		249,
		132,
		190,
		2,
		200,
		126,
		184,
		182,
		81,
		0,
		43,
		20,
		8,
		41,
		235,
		4,
		33,
		218,
		71,
		77,
		195,
		14,
		105,
		102,
		187,
		116,
		170,
		88,
		212,
		127,
		210,
		24,
		45,
		72,
		169,
		192,
		161,
		91,
		224,
		149,
		215,
		225,
		242,
		120,
		163,
		52,
		177,
		183,
		69,
		194,
		145,
		48,
		74,
		160,
		219,
		7,
		251,
		22,
		168,
		42,
		18,
		224,
		3,
		204,
		209,
		222,
		123,
		182,
		255,
		245,
		153,
		98,
		83,
		188,
		176,
		145,
		147,
		172,
		233,
		184,
		0,
		14,
		112,
		198,
		6,
		186,
		65,
		60,
		19,
		127,
		220,
		235,
		16,
		146,
		67,
		174,
		99,
		191,
		242,
		24,
		41,
		136,
		253,
		122,
		9,
		15,
		27,
		140,
		74,
		192,
		111,
		89,
		88,
		45,
		25,
		227,
		17,
		120,
		149,
		240,
		106,
		160,
		108,
		199,
		71,
		132,
		96,
		128,
		91,
		213,
		70,
		217,
		68,
		81,
		195,
		161,
		168,
		100,
		241,
		54,
		244,
		190,
		208,
		101,
		117,
		124,
		180,
		143,
		119,
		230,
		166,
		178,
		50,
		155,
		114,
		86,
		137,
		193,
		138,
		62,
		185,
		26,
		4,
		179,
		238,
		151,
		225,
		236,
		223,
		231,
		49,
		131,
		32,
		63,
		52,
		56,
		177,
		40,
		44,
		134,
		115,
		66,
		36,
		104,
		189,
		148,
		232,
		53,
		207,
		226,
		202,
		78,
		252,
		165,
		1,
		43,
		2,
		218,
		110,
		76,
		243,
		23,
		248,
		85,
		162,
		187,
		219,
		82,
		42,
		154,
		205,
		215,
		216,
		93,
		196,
		170,
		141,
		22,
		107,
		156,
		51,
		125,
		246,
		37,
		11,
		64,
		181,
		77,
		34,
		118,
		20,
		250,
		197,
		130,
		94,
		221,
		249,
		59,
		102,
		109,
		95,
		229,
		247,
		133,
		171,
		158,
		55,
		92,
		8,
		254,
		200,
		201,
		164,
		139,
		116,
		46,
		206,
		150,
		13,
		234,
		47,
		21,
		183,
		169,
		38,
		57,
		237,
		75,
		163,
		113,
		121,
		73,
		10,
		69,
		103,
		31,
		129,
		144,
		239,
		33,
		210,
		214,
		167,
		58,
		35,
		194,
		12,
		159,
		97,
		105,
		211,
		203,
		5,
		173,
		251,
		87,
		157,
		29,
		72,
		152,
		142,
		79,
		80,
		175,
		28,
		212,
		7,
		84,
		135,
		228,
		61,
		126,
		39,
		30,
		90,
		48,
		84,
		64,
		0,
		145,
		176,
		148,
		125,
		212,
		131,
		54,
		88,
		18,
		105,
		82,
		154,
		147,
		71,
		37,
		183,
		162,
		208,
		23,
		130,
		78,
		102,
		134,
		98,
		161,
		63,
		160,
		51,
		189,
		142,
		194,
		164,
		149,
		211,
		14,
		114,
		91,
		222,
		210,
		217,
		198,
		96,
		202,
		206,
		87,
		10,
		7,
		113,
		8,
		101,
		215,
		1,
		57,
		216,
		108,
		39,
		111,
		85,
		226,
		252,
		95,
		218,
		167,
		92,
		224,
		13,
		58,
		153,
		245,
		94,
		15,
		74,
		117,
		32,
		150,
		232,
		230,
		132,
		127,
		19,
		25,
		119,
		86,
		90,
		181,
		42,
		229,
		6,
		244,
		80,
		157,
		56,
		55,
		22,
		115,
		158,
		247,
		33,
		138,
		70,
		140,
		191,
		137,
		38,
		172,
		5,
		255,
		203,
		190,
		156,
		27,
		110,
		207,
		106,
		253,
		233,
		239,
		72,
		165,
		116,
		246,
		254,
		20,
		89,
		133,
		199,
		9,
		118,
		103,
		220,
		65,
		48,
		52,
		175,
		159,
		151,
		69,
		249,
		129,
		163,
		236,
		79,
		81,
		243,
		201,
		173,
		11,
		223,
		192,
		200,
		146,
		109,
		66,
		12,
		235,
		112,
		40,
		152,
		219,
		2,
		97,
		214,
		188,
		248,
		193,
		73,
		182,
		169,
		104,
		178,
		225,
		50,
		250,
		177,
		29,
		75,
		227,
		126,
		174,
		251,
		123,
		121,
		234,
		36,
		197,
		45,
		53,
		143,
		135,
		76,
		34,
		187,
		62,
		122,
		141,
		240,
		107,
		180,
		61,
		93,
		68,
		49,
		43,
		124,
		204,
		170,
		136,
		60,
		228,
		179,
		30,
		241,
		21,
		168,
		44,
		4,
		41,
		205,
		231,
		67,
		26,
		186,
		209,
		120,
		77,
		47,
		46,
		24,
		238,
		139,
		128,
		221,
		31,
		99,
		17,
		3,
		185,
		28,
		242,
		144,
		196,
		59,
		184,
		100,
		35,
		195,
		16,
		155,
		213,
		171,
		83,
		166,
		237,
		52,
		247,
		48,
		208,
		101,
		235,
		105,
		246,
		225,
		244,
		17,
		115,
		212,
		24,
		134,
		65,
		14,
		68,
		213,
		96,
		204,
		197,
		63,
		4,
		86,
		199,
		2,
		22,
		43,
		130,
		230,
		194,
		113,
		57,
		142,
		58,
		170,
		9,
		3,
		180,
		39,
		94,
		92,
		81,
		87,
		111,
		51,
		129,
		143,
		144,
		136,
		132,
		152,
		1,
		54,
		156,
		242,
		195,
		216,
		148,
		36,
		13,
		133,
		88,
		80,
		162,
		124,
		179,
		110,
		97,
		6,
		203,
		69,
		79,
		210,
		41,
		12,
		227,
		33,
		0,
		28,
		35,
		8,
		89,
		190,
		176,
		118,
		192,
		10,
		182,
		140,
		241,
		207,
		163,
		91,
		108,
		34,
		160,
		30,
		243,
		15,
		211,
		168,
		66,
		56,
		153,
		202,
		77,
		191,
		185,
		60,
		171,
		112,
		250,
		233,
		223,
		157,
		232,
		83,
		169,
		200,
		161,
		64,
		37,
		16,
		218,
		119,
		220,
		59,
		20,
		158,
		196,
		38,
		126,
		90,
		189,
		165,
		159,
		25,
		7,
		137,
		150,
		251,
		93,
		193,
		19,
		249,
		201,
		245,
		186,
		175,
		215,
		32,
		49,
		145,
		95,
		102,
		98,
		138,
		23,
		114,
		147,
		47,
		188,
		217,
		209,
		123,
		99,
		29,
		181,
		231,
		75,
		173,
		45,
		40,
		248,
		255,
		62,
		31,
		224,
		100,
		172,
		228,
		183,
		84,
		55,
		206,
		141,
		174,
		151,
		128,
		234,
		82,
		127,
		254,
		122,
		21,
		76,
		155,
		177,
		106,
		178,
		252,
		222,
		167,
		67,
		229,
		72,
		11,
		18,
		226,
		107,
		42,
		154,
		103,
		125,
		237,
		104,
		26,
		116,
		166,
		61,
		44,
		219,
		205,
		131,
		149,
		70,
		240,
		187,
		253,
		5,
		198,
		146,
		74,
		164,
		50,
		117,
		109,
		238,
		139,
		73,
		221,
		214,
		85,
		239,
		53,
		71,
		46,
		27,
		236,
		135,
		78,
		184,
		121,
		120,
		178,
		187,
		65,
		122,
		112,
		58,
		171,
		30,
		85,
		252,
		152,
		188,
		40,
		185,
		124,
		104,
		27,
		149,
		23,
		136,
		74,
		137,
		78,
		174,
		170,
		102,
		248,
		63,
		159,
		138,
		111,
		13,
		230,
		127,
		72,
		226,
		241,
		238,
		246,
		250,
		90,
		115,
		251,
		38,
		140,
		189,
		166,
		234,
		212,
		119,
		125,
		202,
		15,
		71,
		240,
		68,
		41,
		17,
		77,
		255,
		89,
		32,
		34,
		47,
		192,
		206,
		8,
		190,
		98,
		93,
		118,
		39,
		177,
		221,
		37,
		18,
		116,
		200,
		242,
		143,
		16,
		31,
		120,
		181,
		46,
		220,
		2,
		205,
		114,
		157,
		95,
		126,
		59,
		49,
		172,
		87,
		227,
		150,
		45,
		215,
		14,
		132,
		151,
		161,
		110,
		164,
		9,
		162,
		182,
		223,
		62,
		91,
		113,
		173,
		214,
		60,
		92,
		222,
		96,
		141,
		193,
		199,
		66,
		213,
		70,
		231,
		180,
		51,
		139,
		196,
		209,
		169,
		191,
		109,
		135,
		183,
		24,
		28,
		244,
		105,
		94,
		79,
		239,
		33,
		88,
		0,
		36,
		195,
		69,
		106,
		224,
		186,
		247,
		232,
		133,
		35,
		219,
		225,
		103,
		121,
		26,
		210,
		154,
		201,
		129,
		64,
		97,
		158,
		208,
		233,
		254,
		148,
		42,
		73,
		176,
		243,
		167,
		175,
		5,
		29,
		12,
		237,
		81,
		194,
		211,
		83,
		86,
		134,
		99,
		203,
		153,
		53,
		84,
		228,
		25,
		3,
		117,
		108,
		156,
		21,
		216,
		67,
		82,
		165,
		147,
		22,
		100,
		10,
		107,
		50,
		229,
		207,
		44,
		1,
		128,
		4,
		217,
		61,
		155,
		54,
		20,
		204,
		130,
		160,
		43,
		145,
		75,
		57,
		245,
		55,
		163,
		168,
		48,
		198,
		7,
		6,
		80,
		101,
		146,
		249,
		142,
		197,
		131,
		123,
		179,
		253,
		235,
		56,
		76,
		11,
		19,
		144,
		184,
		236,
		52,
		218,
		91,
		241,
		245,
		108,
		229,
		233,
		226,
		253,
		232,
		53,
		73,
		96,
		181,
		249,
		159,
		174,
		110,
		217,
		199,
		100,
		227,
		87,
		28,
		84,
		94,
		236,
		58,
		2,
		49,
		60,
		74,
		51,
		82,
		105,
		161,
		168,
		184,
		13,
		99,
		41,
		139,
		175,
		70,
		239,
		111,
		123,
		59,
		170,
		4,
		155,
		8,
		134,
		93,
		189,
		89,
		154,
		235,
		44,
		185,
		117,
		124,
		30,
		140,
		153,
		62,
		196,
		240,
		133,
		132,
		178,
		29,
		151,
		26,
		177,
		125,
		183,
		45,
		72,
		165,
		204,
		197,
		47,
		98,
		190,
		115,
		158,
		79,
		205,
		81,
		198,
		210,
		212,
		167,
		32,
		85,
		244,
		27,
		173,
		211,
		221,
		101,
		52,
		113,
		78,
		54,
		1,
		162,
		206,
		225,
		156,
		103,
		219,
		107,
		166,
		3,
		12,
		17,
		222,
		61,
		207,
		76,
		109,
		97,
		142,
		191,
		68,
		40,
		34,
		137,
		218,
		9,
		193,
		114,
		141,
		146,
		83,
		237,
		135,
		195,
		250,
		163,
		224,
		57,
		90,
		22,
		14,
		180,
		188,
		66,
		209,
		31,
		254,
		69,
		149,
		192,
		64,
		138,
		38,
		112,
		216,
		194,
		186,
		152,
		215,
		148,
		164,
		172,
		126,
		231,
		122,
		11,
		15,
		252,
		50,
		77,
		92,
		55,
		208,
		75,
		19,
		243,
		169,
		86,
		121,
		150,
		48,
		228,
		251,
		116,
		106,
		200,
		242,
		88,
		42,
		56,
		130,
		176,
		187,
		230,
		36,
		20,
		21,
		35,
		213,
		129,
		234,
		67,
		118,
		144,
		104,
		157,
		214,
		248,
		43,
		160,
		238,
		0,
		131,
		95,
		24,
		39,
		201,
		171,
		255,
		10,
		16,
		71,
		247,
		143,
		6,
		102,
		127,
		65,
		182,
		203,
		80,
		119,
		25,
		128,
		5,
		246,
		220,
		120,
		33,
		147,
		23,
		63,
		18,
		136,
		37,
		202,
		46,
		145,
		179,
		7,
		223,
		236,
		86,
		140,
		254,
		50,
		240,
		100,
		111,
		247,
		1,
		192,
		193,
		151,
		162,
		85,
		62,
		73,
		2,
		68,
		188,
		116,
		58,
		44,
		255,
		139,
		204,
		212,
		87,
		127,
		43,
		243,
		29,
		147,
		35,
		222,
		196,
		178,
		171,
		91,
		210,
		31,
		132,
		149,
		98,
		84,
		209,
		163,
		205,
		172,
		245,
		34,
		8,
		235,
		198,
		71,
		195,
		30,
		250,
		92,
		241,
		211,
		11,
		69,
		103,
		221,
		21,
		93,
		14,
		70,
		135,
		166,
		89,
		23,
		46,
		57,
		83,
		237,
		142,
		119,
		52,
		96,
		104,
		194,
		218,
		203,
		42,
		150,
		5,
		20,
		148,
		145,
		65,
		164,
		12,
		94,
		242,
		76,
		3,
		22,
		110,
		120,
		170,
		64,
		112,
		223,
		219,
		51,
		174,
		153,
		136,
		40,
		230,
		159,
		199,
		227,
		4,
		130,
		173,
		39,
		125,
		48,
		47,
		66,
		228,
		28,
		38,
		160,
		190,
		36,
		81,
		234,
		16,
		201,
		67,
		80,
		102,
		169,
		99,
		206,
		101,
		113,
		24,
		249,
		156,
		182,
		106,
		17,
		251,
		155,
		25,
		167,
		74,
		6,
		0,
		133,
		18,
		129,
		32,
		115,
		244,
		7,
		9,
		207,
		121,
		165,
		154,
		177,
		224,
		118,
		26,
		226,
		213,
		179,
		15,
		53,
		72,
		215,
		216,
		191,
		114,
		233,
		27,
		197,
		10,
		181,
		90,
		152,
		185,
		252,
		246,
		107,
		144,
		33,
		184,
		143,
		37,
		54,
		41,
		49,
		61,
		157,
		180,
		60,
		225,
		75,
		122,
		97,
		45,
		19,
		176,
		186,
		13,
		200,
		128,
		55,
		131,
		238,
		214,
		138,
		56,
		158,
		231,
		229,
		232,
		117,
		124,
		134,
		189,
		183,
		253,
		108,
		217,
		146,
		59,
		95,
		123,
		239,
		126,
		187,
		175,
		220,
		82,
		208,
		79,
		141,
		78,
		137,
		105,
		109,
		161,
		63,
		248,
		88,
		77,
		168,
		202,
		169,
		238,
		246,
		117,
		93,
		9,
		209,
		63,
		107,
		32,
		102,
		158,
		86,
		24,
		14,
		221,
		213,
		35,
		226,
		227,
		181,
		128,
		119,
		28,
		206,
		116,
		174,
		220,
		16,
		210,
		70,
		77,
		60,
		216,
		126,
		211,
		241,
		41,
		103,
		69,
		142,
		215,
		0,
		42,
		201,
		228,
		101,
		225,
		61,
		166,
		183,
		64,
		118,
		243,
		129,
		239,
		177,
		1,
		252,
		230,
		144,
		137,
		121,
		240,
		54,
		182,
		179,
		99,
		134,
		46,
		124,
		208,
		66,
		74,
		224,
		248,
		233,
		8,
		180,
		39,
		53,
		12,
		27,
		113,
		207,
		172,
		85,
		22,
		255,
		55,
		127,
		44,
		100,
		165,
		132,
		123,
		18,
		13,
		96,
		198,
		62,
		4,
		130,
		156,
		189,
		229,
		193,
		38,
		160,
		143,
		5,
		95,
		253,
		249,
		17,
		140,
		187,
		170,
		10,
		196,
		110,
		33,
		52,
		76,
		90,
		136,
		98,
		82,
		36,
		34,
		167,
		48,
		163,
		2,
		81,
		214,
		148,
		72,
		51,
		217,
		185,
		59,
		133,
		104,
		139,
		65,
		236,
		71,
		83,
		58,
		219,
		190,
		6,
		115,
		200,
		50,
		235,
		97,
		114,
		68,
		151,
		120,
		186,
		155,
		222,
		212,
		73,
		178,
		245,
		250,
		157,
		80,
		203,
		57,
		231,
		40,
		84,
		56,
		192,
		247,
		145,
		45,
		23,
		106,
		37,
		43,
		237,
		91,
		135,
		184,
		147,
		194,
		204,
		244,
		168,
		26,
		188,
		197,
		199,
		202,
		49,
		146,
		152,
		47,
		234,
		162,
		21,
		161,
		191,
		150,
		30,
		195,
		105,
		88,
		67,
		15,
		3,
		154,
		173,
		7,
		20,
		11,
		19,
		31,
		79,
		131,
		29,
		218,
		122,
		111,
		138,
		232,
		254,
		112,
		242,
		109,
		175,
		108,
		171,
		75,
		176,
		25,
		125,
		89,
		205,
		92,
		153,
		141,
		87,
		94,
		164,
		159,
		149,
		223,
		78,
		251,
		71,
		77,
		208,
		43,
		14,
		225,
		35,
		2,
		82,
		160,
		126,
		177,
		108,
		99,
		4,
		201,
		8,
		180,
		142,
		243,
		205,
		161,
		89,
		110,
		30,
		33,
		10,
		91,
		188,
		178,
		116,
		194,
		58,
		155,
		200,
		79,
		189,
		187,
		62,
		169,
		32,
		162,
		28,
		241,
		13,
		209,
		170,
		64,
		202,
		163,
		66,
		39,
		18,
		216,
		117,
		222,
		114,
		248,
		235,
		221,
		159,
		234,
		81,
		171,
		227,
		246,
		19,
		113,
		214,
		26,
		132,
		67,
		54,
		245,
		50,
		210,
		103,
		233,
		107,
		244,
		84,
		197,
		0,
		20,
		41,
		128,
		228,
		192,
		12,
		70,
		215,
		98,
		206,
		199,
		61,
		6,
		37,
		92,
		94,
		83,
		85,
		109,
		49,
		131,
		115,
		59,
		140,
		56,
		168,
		11,
		1,
		182,
		240,
		193,
		218,
		150,
		38,
		15,
		135,
		90,
		141,
		146,
		138,
		134,
		154,
		3,
		52,
		158,
		104,
		176,
		254,
		220,
		165,
		65,
		231,
		74,
		80,
		125,
		252,
		120,
		23,
		78,
		153,
		179,
		239,
		106,
		24,
		118,
		164,
		63,
		46,
		217,
		9,
		16,
		224,
		105,
		40,
		152,
		101,
		127,
		196,
		144,
		72,
		166,
		48,
		119,
		111,
		236,
		207,
		129,
		151,
		68,
		242,
		185,
		255,
		7,
		44,
		25,
		238,
		133,
		76,
		186,
		123,
		122,
		137,
		75,
		223,
		212,
		87,
		237,
		55,
		69,
		167,
		157,
		27,
		5,
		139,
		148,
		249,
		95,
		57,
		22,
		156,
		198,
		36,
		124,
		88,
		191,
		34,
		51,
		147,
		93,
		100,
		96,
		136,
		21,
		195,
		17,
		251,
		203,
		247,
		184,
		173,
		213,
		31,
		183,
		229,
		73,
		175,
		47,
		42,
		250,
		112,
		145,
		45,
		190,
		219,
		211,
		121,
		97,
		86,
		53,
		204,
		143,
		172,
		149,
		130,
		232,
		253,
		60,
		29,
		226,
		102,
		174,
		230,
		181,
		20,
		190,
		186,
		35,
		170,
		166,
		173,
		178,
		167,
		122,
		6,
		47,
		250,
		182,
		208,
		225,
		33,
		150,
		136,
		43,
		172,
		24,
		83,
		27,
		17,
		163,
		117,
		77,
		126,
		115,
		5,
		124,
		29,
		38,
		238,
		231,
		247,
		66,
		44,
		102,
		196,
		224,
		9,
		160,
		32,
		52,
		116,
		229,
		75,
		212,
		71,
		201,
		18,
		242,
		22,
		213,
		164,
		99,
		246,
		58,
		51,
		81,
		195,
		214,
		113,
		139,
		191,
		202,
		203,
		253,
		82,
		216,
		85,
		254,
		50,
		248,
		98,
		7,
		234,
		131,
		138,
		96,
		45,
		241,
		60,
		209,
		0,
		130,
		30,
		137,
		157,
		155,
		232,
		111,
		26,
		187,
		84,
		226,
		156,
		146,
		42,
		123,
		62,
		1,
		121,
		78,
		237,
		129,
		174,
		211,
		40,
		148,
		36,
		233,
		76,
		67,
		94,
		145,
		114,
		128,
		3,
		34,
		46,
		193,
		240,
		11,
		103,
		109,
		198,
		149,
		70,
		142,
		61,
		194,
		221,
		28,
		162,
		200,
		140,
		181,
		236,
		175,
		118,
		21,
		89,
		65,
		251,
		243,
		13,
		158,
		80,
		177,
		10,
		218,
		143,
		15,
		197,
		105,
		63,
		151,
		141,
		245,
		215,
		152,
		219,
		235,
		227,
		49,
		168,
		53,
		68,
		64,
		179,
		125,
		2,
		19,
		120,
		159,
		4,
		92,
		188,
		230,
		25,
		54,
		217,
		127,
		171,
		180,
		59,
		37,
		135,
		189,
		23,
		101,
		119,
		205,
		255,
		244,
		169,
		107,
		91,
		90,
		108,
		154,
		206,
		165,
		12,
		57,
		223,
		39,
		210,
		153,
		183,
		100,
		239,
		161,
		79,
		204,
		16,
		87,
		104,
		134,
		228,
		176,
		69,
		95,
		8,
		184,
		192,
		73,
		41,
		48,
		14,
		249,
		132,
		31,
		56,
		86,
		207,
		74,
		185,
		147,
		55,
		110,
		220,
		88,
		112,
		93,
		199,
		106,
		133,
		97,
		222,
		252,
		72,
		144,
		98,
		108,
		18,
		164,
		241,
		206,
		139,
		218,
		113,
		29,
		190,
		137,
		100,
		216,
		35,
		94,
		179,
		188,
		25,
		212,
		112,
		130,
		97,
		174,
		49,
		222,
		210,
		243,
		157,
		151,
		251,
		0,
		58,
		79,
		123,
		129,
		40,
		162,
		13,
		59,
		8,
		194,
		14,
		165,
		115,
		26,
		247,
		146,
		1,
		221,
		144,
		122,
		114,
		240,
		33,
		204,
		107,
		109,
		121,
		238,
		75,
		234,
		159,
		24,
		23,
		30,
		214,
		237,
		150,
		220,
		178,
		7,
		80,
		249,
		16,
		52,
		21,
		132,
		196,
		208,
		57,
		183,
		36,
		187,
		37,
		230,
		2,
		226,
		202,
		6,
		147,
		84,
		38,
		51,
		161,
		195,
		211,
		74,
		78,
		228,
		66,
		93,
		86,
		90,
		223,
		246,
		138,
		87,
		17,
		32,
		70,
		10,
		219,
		120,
		102,
		209,
		235,
		163,
		232,
		92,
		189,
		133,
		83,
		225,
		140,
		245,
		131,
		142,
		72,
		248,
		175,
		181,
		192,
		217,
		185,
		48,
		239,
		116,
		9,
		254,
		186,
		63,
		166,
		200,
		158,
		199,
		99,
		73,
		173,
		128,
		168,
		44,
		145,
		117,
		154,
		55,
		96,
		184,
		12,
		46,
		61,
		135,
		149,
		231,
		155,
		89,
		4,
		15,
		106,
		156,
		170,
		171,
		201,
		252,
		85,
		62,
		105,
		34,
		215,
		47,
		81,
		31,
		148,
		71,
		167,
		224,
		60,
		191,
		64,
		20,
		118,
		152,
		104,
		39,
		5,
		125,
		193,
		19,
		27,
		43,
		176,
		180,
		197,
		88,
		227,
		242,
		141,
		67,
		172,
		244,
		111,
		136,
		198,
		233,
		22,
		76,
		68,
		91,
		143,
		41,
		77,
		119,
		213,
		203,
		126,
		182,
		101,
		54,
		236,
		45,
		50,
		205,
		69,
		124,
		56,
		82,
		229,
		134,
		95,
		28,
		3,
		11,
		177,
		169,
		65,
		160,
		110,
		253,
		255,
		127,
		42,
		250,
		103,
		207,
		153,
		53,
		157,
		79,
		71,
		119,
		52,
		123,
		89,
		33,
		191,
		174,
		209,
		31,
		236,
		232,
		153,
		4,
		154,
		181,
		74,
		16,
		240,
		168,
		51,
		212,
		17,
		43,
		137,
		151,
		24,
		7,
		211,
		117,
		176,
		113,
		110,
		145,
		34,
		234,
		57,
		106,
		185,
		218,
		3,
		64,
		25,
		32,
		100,
		14,
		29,
		252,
		50,
		161,
		95,
		87,
		237,
		245,
		59,
		147,
		197,
		105,
		163,
		35,
		118,
		166,
		156,
		133,
		229,
		108,
		20,
		164,
		243,
		233,
		230,
		99,
		250,
		148,
		179,
		40,
		85,
		162,
		241,
		220,
		244,
		112,
		194,
		155,
		63,
		21,
		60,
		228,
		80,
		114,
		205,
		41,
		198,
		107,
		199,
		5,
		88,
		83,
		97,
		219,
		201,
		187,
		149,
		160,
		9,
		98,
		54,
		192,
		246,
		247,
		13,
		67,
		200,
		27,
		53,
		126,
		139,
		115,
		28,
		72,
		42,
		196,
		251,
		188,
		96,
		227,
		202,
		128,
		238,
		91,
		75,
		66,
		138,
		177,
		73,
		216,
		152,
		140,
		12,
		165,
		76,
		104,
		121,
		186,
		94,
		190,
		101,
		235,
		120,
		231,
		122,
		111,
		253,
		159,
		150,
		90,
		207,
		8,
		30,
		1,
		10,
		6,
		143,
		22,
		18,
		184,
		77,
		124,
		26,
		86,
		131,
		170,
		214,
		11,
		183,
		255,
		180,
		0,
		135,
		36,
		58,
		141,
		208,
		169,
		223,
		210,
		225,
		217,
		15,
		189,
		173,
		146,
		215,
		134,
		62,
		48,
		78,
		248,
		56,
		132,
		127,
		2,
		45,
		65,
		226,
		213,
		44,
		222,
		61,
		242,
		239,
		224,
		69,
		136,
		193,
		203,
		167,
		92,
		109,
		130,
		142,
		175,
		116,
		254,
		81,
		103,
		102,
		19,
		39,
		221,
		47,
		70,
		171,
		206,
		84,
		158,
		82,
		249,
		46,
		172,
		125,
		144,
		93,
		129,
		204,
		38,
		23,
		182,
		195,
		68,
		55,
		49,
		37,
		178,
		164,
		133,
		71,
		168,
		141,
		118,
		235,
		225,
		111,
		162,
		197,
		202,
		23,
		216,
		6,
		244,
		200,
		255,
		7,
		107,
		85,
		40,
		18,
		174,
		100,
		210,
		20,
		26,
		253,
		172,
		135,
		184,
		15,
		152,
		29,
		27,
		233,
		110,
		61,
		156,
		230,
		12,
		119,
		171,
		87,
		186,
		4,
		134,
		120,
		211,
		126,
		180,
		129,
		228,
		5,
		108,
		13,
		247,
		76,
		57,
		123,
		77,
		94,
		212,
		229,
		34,
		188,
		112,
		215,
		181,
		80,
		69,
		82,
		205,
		79,
		193,
		116,
		148,
		83,
		144,
		102,
		66,
		38,
		143,
		178,
		166,
		99,
		242,
		160,
		155,
		97,
		104,
		196,
		113,
		224,
		170,
		37,
		151,
		203,
		243,
		245,
		248,
		250,
		131,
		16,
		167,
		173,
		14,
		158,
		42,
		157,
		213,
		252,
		33,
		169,
		128,
		48,
		124,
		103,
		86,
		56,
		146,
		165,
		60,
		32,
		44,
		52,
		43,
		236,
		65,
		231,
		3,
		122,
		88,
		22,
		206,
		21,
		63,
		232,
		177,
		222,
		90,
		219,
		246,
		127,
		136,
		153,
		2,
		208,
		190,
		204,
		73,
		217,
		195,
		62,
		142,
		207,
		70,
		182,
		175,
		74,
		201,
		209,
		150,
		0,
		238,
		54,
		98,
		161,
		89,
		31,
		84,
		226,
		49,
		39,
		105,
		220,
		221,
		28,
		234,
		35,
		72,
		191,
		138,
		227,
		145,
		75,
		241,
		114,
		121,
		237,
		47,
		249,
		95,
		50,
		45,
		163,
		189,
		59,
		1,
		25,
		254,
		218,
		130,
		96,
		58,
		176,
		159,
		179,
		46,
		198,
		194,
		251,
		53,
		149,
		132,
		115,
		11,
		30,
		81,
		109,
		93,
		183,
		101,
		92,
		140,
		137,
		9,
		239,
		67,
		17,
		185,
		199,
		223,
		117,
		125,
		24,
		139,
		55,
		214,
		78,
		36,
		51,
		10,
		41,
		106,
		147,
		240,
		19,
		64,
		8,
		192,
		68,
		187,
		154,
		91,
		188,
		210,
		160,
		37,
		19,
		228,
		245,
		110,
		163,
		42,
		218,
		195,
		181,
		175,
		82,
		226,
		22,
		52,
		122,
		162,
		128,
		45,
		139,
		111,
		178,
		54,
		183,
		154,
		121,
		83,
		132,
		221,
		79,
		36,
		211,
		230,
		176,
		177,
		112,
		134,
		30,
		21,
		129,
		67,
		143,
		253,
		39,
		157,
		108,
		130,
		90,
		14,
		38,
		165,
		189,
		250,
		142,
		93,
		75,
		5,
		205,
		53,
		115,
		56,
		151,
		89,
		249,
		232,
		223,
		66,
		170,
		174,
		1,
		49,
		219,
		9,
		31,
		103,
		114,
		61,
		207,
		209,
		87,
		109,
		149,
		51,
		94,
		65,
		12,
		86,
		220,
		243,
		117,
		146,
		182,
		238,
		69,
		6,
		255,
		156,
		34,
		72,
		95,
		102,
		40,
		215,
		246,
		55,
		127,
		44,
		100,
		172,
		131,
		47,
		125,
		213,
		48,
		224,
		229,
		101,
		116,
		231,
		91,
		186,
		171,
		179,
		25,
		17,
		57,
		68,
		126,
		194,
		164,
		147,
		107,
		7,
		145,
		192,
		235,
		212,
		8,
		190,
		120,
		118,
		225,
		26,
		135,
		141,
		200,
		233,
		43,
		196,
		123,
		180,
		106,
		152,
		3,
		206,
		169,
		166,
		237,
		136,
		105,
		0,
		20,
		191,
		18,
		216,
		23,
		33,
		50,
		184,
		97,
		155,
		32,
		85,
		133,
		2,
		81,
		240,
		99,
		244,
		113,
		119,
		59,
		214,
		104,
		234,
		138,
		96,
		27,
		199,
		222,
		202,
		15,
		158,
		10,
		46,
		74,
		227,
		168,
		29,
		140,
		198,
		204,
		247,
		13,
		4,
		187,
		217,
		60,
		41,
		137,
		78,
		208,
		28,
		24,
		248,
		63,
		252,
		62,
		161,
		35,
		173,
		92,
		16,
		11,
		58,
		144,
		77,
		197,
		236,
		76,
		64,
		88,
		71,
		84,
		254,
		201,
		80,
		153,
		148,
		150,
		239,
		73,
		251,
		167,
		159,
		242,
		70,
		241,
		185,
		124,
		203,
		193,
		98,
		139,
		16,
		109,
		154,
		222,
		91,
		194,
		172,
		44,
		156,
		203,
		209,
		164,
		189,
		221,
		84,
		245,
		17,
		254,
		83,
		4,
		220,
		104,
		74,
		250,
		163,
		7,
		45,
		201,
		228,
		204,
		72,
		14,
		248,
		206,
		207,
		173,
		152,
		49,
		90,
		89,
		227,
		241,
		131,
		255,
		61,
		96,
		107,
		195,
		132,
		88,
		219,
		36,
		112,
		18,
		252,
		13,
		70,
		179,
		75,
		53,
		123,
		240,
		35,
		212,
		208,
		161,
		60,
		135,
		150,
		233,
		39,
		12,
		67,
		97,
		25,
		165,
		119,
		127,
		79,
		32,
		63,
		235,
		77,
		41,
		19,
		177,
		175,
		200,
		144,
		11,
		236,
		162,
		141,
		114,
		40,
		33,
		24,
		92,
		54,
		129,
		226,
		59,
		120,
		26,
		210,
		1,
		82,
		136,
		73,
		86,
		169,
		155,
		27,
		78,
		158,
		3,
		171,
		253,
		81,
		103,
		111,
		213,
		205,
		37,
		196,
		10,
		153,
		21,
		121,
		218,
		237,
		0,
		188,
		71,
		58,
		6,
		8,
		118,
		192,
		149,
		170,
		239,
		190,
		85,
		186,
		182,
		151,
		249,
		243,
		159,
		100,
		215,
		216,
		125,
		176,
		20,
		230,
		5,
		202,
		108,
		166,
		106,
		193,
		23,
		126,
		147,
		246,
		94,
		43,
		31,
		229,
		76,
		198,
		105,
		95,
		15,
		9,
		29,
		138,
		47,
		142,
		251,
		124,
		101,
		185,
		244,
		30,
		22,
		148,
		69,
		168,
		52,
		157,
		116,
		80,
		113,
		224,
		160,
		180,
		115,
		122,
		178,
		137,
		242,
		184,
		214,
		99,
		174,
		98,
		247,
		48,
		66,
		87,
		197,
		167,
		93,
		211,
		64,
		223,
		65,
		130,
		102,
		134,
		187,
		146,
		238,
		51,
		117,
		68,
		34,
		110,
		183,
		46,
		42,
		128,
		38,
		57,
		50,
		62,
		217,
		225,
		55,
		133,
		232,
		145,
		231,
		234,
		191,
		28,
		2,
		181,
		143,
		199,
		140,
		56,
		210,
		219,
		33,
		26,
		16,
		90,
		203,
		126,
		53,
		156,
		248,
		220,
		72,
		217,
		28,
		8,
		123,
		245,
		119,
		232,
		42,
		233,
		46,
		206,
		202,
		6,
		152,
		95,
		255,
		234,
		15,
		109,
		134,
		31,
		40,
		130,
		145,
		142,
		150,
		154,
		58,
		19,
		155,
		70,
		236,
		221,
		198,
		138,
		180,
		23,
		29,
		170,
		111,
		39,
		144,
		36,
		73,
		113,
		45,
		159,
		57,
		64,
		66,
		79,
		160,
		174,
		104,
		222,
		2,
		61,
		22,
		71,
		209,
		189,
		69,
		114,
		20,
		168,
		146,
		239,
		112,
		127,
		24,
		213,
		78,
		188,
		98,
		173,
		18,
		253,
		63,
		30,
		91,
		81,
		204,
		55,
		131,
		246,
		77,
		183,
		110,
		228,
		247,
		193,
		14,
		196,
		105,
		194,
		214,
		191,
		94,
		59,
		17,
		205,
		182,
		92,
		60,
		190,
		0,
		237,
		161,
		167,
		34,
		181,
		38,
		135,
		212,
		83,
		235,
		164,
		177,
		201,
		223,
		13,
		231,
		215,
		120,
		124,
		148,
		9,
		62,
		47,
		143,
		65,
		56,
		96,
		68,
		163,
		37,
		10,
		128,
		218,
		151,
		136,
		229,
		67,
		187,
		129,
		7,
		25,
		122,
		178,
		250,
		169,
		225,
		32,
		1,
		254,
		176,
		137,
		158,
		244,
		74,
		41,
		208,
		147,
		199,
		207,
		101,
		125,
		108,
		141,
		49,
		162,
		179,
		51,
		54,
		230,
		3,
		171,
		249,
		85,
		52,
		132,
		121,
		99,
		21,
		12,
		252,
		117,
		184,
		35,
		50,
		197,
		243,
		118,
		4,
		106,
		11,
		82,
		133,
		175,
		76,
		97,
		224,
		100,
		185,
		93,
		251,
		86,
		116,
		172,
		226,
		192,
		75,
		241,
		43,
		89,
		149,
		87,
		195,
		200,
		80,
		166,
		103,
		102,
		48,
		5,
		242,
		153,
		238,
		165,
		227,
		27,
		211,
		157,
		139,
		88,
		44,
		107,
		115,
		240,
		216,
		140,
		84,
		186,
		44,
		84,
		65,
		14,
		50,
		2,
		232,
		58,
		236,
		113,
		153,
		157,
		164,
		106,
		202,
		219,
		70,
		161,
		133,
		221,
		63,
		101,
		239,
		192,
		166,
		0,
		109,
		114,
		252,
		226,
		100,
		94,
		76,
		31,
		87,
		159,
		27,
		228,
		197,
		4,
		17,
		123,
		108,
		85,
		118,
		53,
		204,
		175,
		152,
		128,
		42,
		34,
		71,
		212,
		104,
		137,
		3,
		211,
		214,
		86,
		176,
		28,
		78,
		230,
		134,
		156,
		97,
		209,
		144,
		25,
		233,
		240,
		32,
		215,
		198,
		93,
		143,
		225,
		147,
		22,
		74,
		96,
		183,
		238,
		129,
		5,
		132,
		169,
		179,
		30,
		184,
		92,
		37,
		7,
		73,
		145,
		188,
		206,
		20,
		174,
		45,
		38,
		178,
		112,
		131,
		130,
		67,
		181,
		124,
		23,
		224,
		213,
		254,
		6,
		64,
		11,
		189,
		110,
		120,
		54,
		21,
		150,
		142,
		201,
		95,
		177,
		105,
		61,
		255,
		196,
		62,
		55,
		155,
		46,
		191,
		245,
		57,
		29,
		121,
		208,
		237,
		249,
		60,
		173,
		13,
		146,
		16,
		158,
		43,
		203,
		12,
		207,
		186,
		125,
		227,
		47,
		136,
		234,
		15,
		26,
		103,
		205,
		250,
		99,
		127,
		115,
		107,
		116,
		163,
		126,
		246,
		223,
		111,
		35,
		56,
		9,
		79,
		248,
		242,
		81,
		193,
		117,
		194,
		138,
		122,
		200,
		148,
		172,
		170,
		167,
		165,
		220,
		59,
		141,
		75,
		69,
		162,
		243,
		216,
		231,
		151,
		160,
		88,
		52,
		10,
		119,
		77,
		241,
		48,
		253,
		154,
		149,
		72,
		135,
		89,
		171,
		251,
		218,
		24,
		247,
		210,
		41,
		180,
		190,
		82,
		168,
		19,
		102,
		36,
		18,
		1,
		139,
		39,
		140,
		33,
		235,
		222,
		187,
		90,
		51,
		185,
		83,
		40,
		244,
		8,
		229,
		91,
		217,
		80,
		199,
		66,
		68,
		182,
		49,
		98,
		195,
		185,
		193,
		212,
		155,
		167,
		151,
		125,
		175,
		121,
		228,
		12,
		8,
		49,
		255,
		95,
		78,
		211,
		52,
		16,
		72,
		170,
		240,
		122,
		85,
		51,
		149,
		248,
		231,
		105,
		119,
		241,
		203,
		217,
		138,
		194,
		10,
		142,
		113,
		80,
		145,
		132,
		238,
		249,
		192,
		227,
		160,
		89,
		58,
		13,
		21,
		191,
		183,
		210,
		65,
		253,
		28,
		150,
		70,
		67,
		195,
		37,
		137,
		219,
		115,
		19,
		9,
		244,
		68,
		5,
		140,
		124,
		101,
		181,
		66,
		83,
		200,
		26,
		116,
		6,
		131,
		223,
		245,
		34,
		123,
		20,
		144,
		17,
		60,
		38,
		139,
		45,
		201,
		176,
		146,
		220,
		4,
		41,
		91,
		129,
		59,
		184,
		179,
		39,
		229,
		22,
		23,
		214,
		32,
		233,
		130,
		117,
		64,
		107,
		147,
		213,
		158,
		40,
		251,
		237,
		163,
		128,
		3,
		27,
		92,
		202,
		36,
		252,
		168,
		106,
		81,
		171,
		162,
		14,
		187,
		42,
		96,
		172,
		136,
		236,
		69,
		120,
		108,
		169,
		56,
		152,
		7,
		133,
		11,
		190,
		94,
		153,
		90,
		47,
		232,
		118,
		186,
		29,
		127,
		154,
		143,
		242,
		88,
		111,
		246,
		234,
		230,
		254,
		225,
		54,
		235,
		99,
		74,
		250,
		182,
		173,
		156,
		218,
		109,
		103,
		196,
		84,
		224,
		87,
		31,
		239,
		93,
		1,
		57,
		63,
		50,
		48,
		73,
		174,
		24,
		222,
		208,
		55,
		102,
		77,
		114,
		2,
		53,
		205,
		161,
		159,
		226,
		216,
		100,
		165,
		104,
		15,
		0,
		221,
		18,
		204,
		62,
		110,
		79,
		141,
		98,
		71,
		188,
		33,
		43,
		199,
		61,
		134,
		243,
		177,
		135,
		148,
		30,
		178,
		25,
		180,
		126,
		75,
		46,
		207,
		166,
		44,
		198,
		189,
		97,
		157,
		112,
		206,
		76,
		197,
		82,
		215,
		209,
		35,
		164,
		247,
		86,
		4,
		125,
		11,
		6,
		53,
		13,
		219,
		105,
		99,
		43,
		96,
		212,
		83,
		240,
		238,
		89,
		153,
		168,
		206,
		130,
		87,
		126,
		2,
		223,
		202,
		213,
		222,
		210,
		91,
		194,
		198,
		108,
		174,
		187,
		41,
		75,
		66,
		142,
		27,
		220,
		173,
		110,
		138,
		106,
		177,
		63,
		172,
		51,
		157,
		12,
		76,
		88,
		216,
		113,
		152,
		188,
		30,
		84,
		58,
		143,
		159,
		150,
		94,
		101,
		195,
		98,
		23,
		144,
		227,
		229,
		241,
		102,
		250,
		120,
		169,
		68,
		137,
		85,
		24,
		242,
		251,
		146,
		127,
		26,
		128,
		74,
		134,
		45,
		160,
		42,
		133,
		179,
		178,
		199,
		243,
		9,
		21,
		31,
		115,
		136,
		185,
		86,
		90,
		123,
		248,
		10,
		233,
		38,
		59,
		52,
		145,
		92,
		236,
		80,
		171,
		214,
		249,
		149,
		54,
		1,
		121,
		70,
		3,
		82,
		234,
		228,
		154,
		44,
		239,
		71,
		17,
		189,
		119,
		247,
		162,
		114,
		201,
		40,
		230,
		117,
		139,
		131,
		57,
		33,
		109,
		14,
		215,
		148,
		205,
		244,
		176,
		218,
		100,
		165,
		186,
		69,
		246,
		62,
		237,
		190,
		197,
		255,
		93,
		67,
		204,
		211,
		7,
		161,
		78,
		97,
		158,
		196,
		36,
		124,
		231,
		0,
		107,
		122,
		5,
		203,
		56,
		60,
		77,
		208,
		73,
		155,
		147,
		163,
		224,
		175,
		141,
		245,
		200,
		156,
		254,
		16,
		47,
		104,
		180,
		55,
		217,
		151,
		28,
		207,
		225,
		170,
		95,
		167,
		65,
		116,
		221,
		182,
		226,
		20,
		34,
		35,
		19,
		209,
		140,
		135,
		181,
		15,
		29,
		111,
		232,
		48,
		132,
		166,
		25,
		253,
		18,
		191,
		37,
		8,
		32,
		164,
		22,
		79,
		235,
		193,
		50,
		183,
		46,
		64,
		103,
		252,
		129,
		118,
		72,
		81,
		49,
		184,
		192,
		112,
		39,
		61,
		74,
		95,
		205,
		175,
		166,
		106,
		255,
		56,
		73,
		138,
		110,
		142,
		85,
		219,
		72,
		215,
		121,
		232,
		168,
		188,
		60,
		149,
		124,
		88,
		250,
		176,
		222,
		107,
		123,
		114,
		186,
		129,
		224,
		153,
		239,
		226,
		209,
		233,
		63,
		141,
		135,
		207,
		132,
		48,
		183,
		20,
		10,
		189,
		125,
		76,
		42,
		102,
		179,
		154,
		230,
		59,
		46,
		49,
		58,
		54,
		191,
		38,
		34,
		136,
		241,
		251,
		151,
		108,
		93,
		178,
		190,
		159,
		28,
		238,
		13,
		194,
		223,
		208,
		117,
		184,
		8,
		180,
		79,
		50,
		29,
		113,
		210,
		229,
		157,
		162,
		231,
		182,
		14,
		0,
		126,
		200,
		39,
		134,
		243,
		116,
		7,
		1,
		21,
		130,
		30,
		156,
		77,
		160,
		109,
		177,
		252,
		22,
		31,
		118,
		155,
		254,
		100,
		174,
		98,
		201,
		68,
		206,
		97,
		87,
		86,
		35,
		23,
		237,
		33,
		27,
		185,
		167,
		40,
		55,
		227,
		69,
		170,
		133,
		122,
		32,
		192,
		152,
		3,
		228,
		143,
		158,
		225,
		47,
		220,
		216,
		169,
		52,
		173,
		127,
		119,
		71,
		4,
		75,
		105,
		17,
		11,
		163,
		245,
		89,
		147,
		19,
		70,
		150,
		45,
		204,
		2,
		145,
		111,
		103,
		221,
		197,
		137,
		234,
		51,
		112,
		41,
		16,
		84,
		62,
		128,
		65,
		94,
		161,
		18,
		218,
		9,
		90,
		12,
		212,
		96,
		66,
		253,
		25,
		246,
		91,
		193,
		236,
		196,
		64,
		242,
		171,
		15,
		37,
		214,
		83,
		202,
		164,
		131,
		24,
		101,
		146,
		172,
		181,
		213,
		92,
		36,
		148,
		195,
		217,
		44,
		120,
		26,
		244,
		203,
		140,
		80,
		211,
		61,
		115,
		248,
		43,
		5,
		78,
		187,
		67,
		165,
		144,
		57,
		82,
		6,
		240,
		198,
		199,
		247,
		53,
		104,
		99,
		81,
		235,
		249,
		139,
		178,
		241,
		40,
		75,
		252,
		150,
		210,
		235,
		99,
		156,
		131,
		66,
		152,
		203,
		24,
		208,
		155,
		55,
		97,
		201,
		84,
		132,
		209,
		81,
		83,
		192,
		14,
		239,
		7,
		31,
		165,
		173,
		237,
		35,
		92,
		77,
		246,
		107,
		26,
		30,
		133,
		181,
		189,
		111,
		211,
		171,
		137,
		198,
		101,
		123,
		217,
		227,
		135,
		33,
		245,
		234,
		226,
		184,
		71,
		104,
		38,
		193,
		90,
		2,
		144,
		251,
		82,
		103,
		5,
		4,
		50,
		196,
		161,
		170,
		247,
		53,
		73,
		59,
		41,
		147,
		54,
		216,
		186,
		238,
		17,
		146,
		78,
		9,
		233,
		58,
		177,
		255,
		129,
		121,
		140,
		199,
		102,
		8,
		145,
		20,
		80,
		167,
		218,
		65,
		158,
		23,
		119,
		110,
		27,
		1,
		86,
		230,
		128,
		162,
		22,
		206,
		153,
		52,
		219,
		63,
		130,
		6,
		46,
		3,
		231,
		205,
		105,
		48,
		164,
		232,
		142,
		191,
		249,
		36,
		88,
		113,
		244,
		248,
		243,
		236,
		74,
		224,
		228,
		125,
		32,
		45,
		91,
		34,
		79,
		253,
		43,
		19,
		242,
		70,
		13,
		69,
		127,
		200,
		214,
		117,
		126,
		106,
		42,
		187,
		154,
		190,
		87,
		254,
		169,
		28,
		114,
		56,
		67,
		120,
		176,
		185,
		109,
		15,
		157,
		136,
		250,
		61,
		168,
		100,
		76,
		172,
		72,
		139,
		21,
		138,
		25,
		151,
		60,
		89,
		180,
		221,
		11,
		160,
		108,
		166,
		149,
		163,
		12,
		134,
		47,
		213,
		225,
		148,
		182,
		49,
		68,
		229,
		64,
		215,
		195,
		197,
		98,
		143,
		94,
		220,
		212,
		62,
		115,
		175,
		240,
		141,
		118,
		202,
		39,
		16,
		179,
		223,
		116,
		37,
		96,
		95,
		10,
		188,
		194,
		204,
		174,
		85,
		57,
		51,
		93,
		124,
		112,
		159,
		0,
		207,
		44,
		222,
		122,
		183,
		18,
		29,
		117,
		135,
		89,
		150,
		75,
		68,
		35,
		238,
		96,
		106,
		247,
		12,
		41,
		198,
		4,
		37,
		57,
		6,
		45,
		124,
		155,
		149,
		83,
		229,
		47,
		147,
		169,
		212,
		234,
		134,
		126,
		73,
		7,
		133,
		59,
		214,
		42,
		246,
		141,
		103,
		29,
		188,
		239,
		104,
		154,
		156,
		25,
		142,
		85,
		223,
		204,
		250,
		184,
		205,
		118,
		140,
		237,
		132,
		101,
		0,
		53,
		255,
		82,
		249,
		17,
		210,
		21,
		245,
		64,
		206,
		76,
		211,
		196,
		209,
		52,
		86,
		241,
		61,
		163,
		100,
		43,
		97,
		240,
		69,
		233,
		224,
		26,
		33,
		115,
		226,
		39,
		51,
		14,
		167,
		195,
		231,
		84,
		28,
		171,
		31,
		143,
		44,
		38,
		145,
		2,
		123,
		121,
		116,
		114,
		74,
		22,
		164,
		170,
		181,
		173,
		161,
		189,
		36,
		19,
		185,
		215,
		230,
		253,
		177,
		1,
		40,
		160,
		125,
		119,
		90,
		219,
		95,
		48,
		105,
		190,
		148,
		79,
		151,
		217,
		251,
		130,
		102,
		192,
		109,
		46,
		55,
		199,
		78,
		15,
		191,
		66,
		88,
		200,
		77,
		63,
		81,
		131,
		24,
		9,
		254,
		232,
		166,
		176,
		99,
		213,
		158,
		216,
		32,
		227,
		183,
		111,
		129,
		23,
		80,
		72,
		203,
		174,
		108,
		248,
		243,
		112,
		202,
		16,
		98,
		11,
		62,
		201,
		162,
		107,
		157,
		92,
		93,
		30,
		49,
		187,
		225,
		3,
		91,
		127,
		152,
		128,
		186,
		60,
		34,
		172,
		179,
		222,
		120,
		228,
		54,
		220,
		236,
		208,
		159,
		138,
		242,
		5,
		20,
		180,
		122,
		67,
		71,
		175,
		50,
		87,
		182,
		10,
		153,
		252,
		244,
		94,
		70,
		56,
		144,
		194,
		110,
		136,
		8,
		13,
		221,
		218,
		27,
		58,
		197,
		65,
		137,
		193,
		146,
		113,
		18,
		235,
		168,
		139,
		178,
		165,
		207
	};

	private Class41()
	{
	}

	public static Class41 smethod_0()
	{
		return class41_0;
	}

	public byte[] method_0(ref byte[] byte_2)
	{
		checked
		{
			uint num = (uint)byte_2.Length;
			byte[] byte_3 = new byte[16];
			byte[] byte_4 = new byte[16];
			uint num2 = num >> 4;
			uint num3 = (uint)(unchecked((long)num) & 0xFL);
			uint num4 = (uint)(unchecked((long)num2) - 1L);
			uint uint_;
			for (uint num5 = 0u; num5 <= num4; num5++)
			{
				uint_ = num5 << 4;
				method_3(ref byte_2, ref uint_, ref byte_4);
				method_1(ref byte_4);
			}
			Buffer.BlockCopy(byte_2, (int)(num2 << 4), byte_3, 0, (int)num3);
			byte_3[(int)num3] = 128;
			uint_ = 0u;
			method_3(ref byte_3, ref uint_, ref byte_4);
			method_1(ref byte_4);
			return byte_4;
		}
	}

	private void method_1(ref byte[] byte_2)
	{
		uint uint_ = 0u;
		method_2(ref byte_2, ref uint_);
		uint num = 1u;
		do
		{
			method_5(ref byte_2);
			method_6(ref byte_2);
			method_4(ref byte_2);
			method_5(ref byte_2);
			method_6(ref byte_2);
			uint_ = num << 12;
			method_2(ref byte_2, ref uint_);
			num = checked(num + 1u);
		}
		while (num <= 5);
		method_5(ref byte_2);
	}

	private void method_2(ref byte[] byte_2, ref uint uint_0)
	{
		uint num = 0u;
		checked
		{
			do
			{
				byte_2[(int)num] = byte_1[(int)(byte_2[(int)num] ^ uint_0 ^ (num << 8))];
				num++;
			}
			while (num <= 15);
		}
	}

	private void method_3(ref byte[] byte_2, ref uint uint_0, ref byte[] byte_3)
	{
		uint num = 0u;
		do
		{
			byte_3[checked((int)num)] = (byte)checked(byte_3[(int)num] ^ byte_2[(int)(num + uint_0)]);
			num = checked(num + 1u);
		}
		while (num <= 15);
	}

	private void method_4(ref byte[] byte_2)
	{
		uint num = 0u;
		checked
		{
			do
			{
				byte_2[(int)num] = byte_0[byte_2[(int)num]];
				num++;
			}
			while (num <= 15);
		}
	}

	private void method_5(ref byte[] byte_2)
	{
		byte[] array = new byte[16];
		uint num = 0u;
		checked
		{
			do
			{
				array[(int)num] = byte_2[(int)num];
				num++;
			}
			while (num <= 15);
			byte_2[0] = array[0];
			byte_2[1] = array[5];
			byte_2[2] = array[10];
			byte_2[3] = array[15];
			byte_2[4] = array[4];
			byte_2[5] = array[9];
			byte_2[6] = array[14];
			byte_2[7] = array[3];
			byte_2[8] = array[8];
			byte_2[9] = array[13];
			byte_2[10] = array[2];
			byte_2[11] = array[7];
			byte_2[12] = array[12];
			byte_2[13] = array[1];
			byte_2[14] = array[6];
			byte_2[15] = array[11];
		}
	}

	private void method_6(ref byte[] byte_2)
	{
		byte[] array = new byte[16];
		uint num = 0u;
		checked
		{
			do
			{
				array[(int)num] = byte_2[(int)num];
				num++;
			}
			while (num <= 15);
		}
		byte_2[0] = (byte)(method_7(ref array[0]) ^ method_8(ref array[1]) ^ array[2] ^ array[3]);
		byte_2[1] = (byte)(array[0] ^ method_7(ref array[1]) ^ method_8(ref array[2]) ^ array[3]);
		byte_2[2] = (byte)(array[0] ^ array[1] ^ method_7(ref array[2]) ^ method_8(ref array[3]));
		byte_2[3] = (byte)(method_8(ref array[0]) ^ array[1] ^ array[2] ^ method_7(ref array[3]));
		byte_2[4] = (byte)(method_7(ref array[4]) ^ method_8(ref array[5]) ^ array[6] ^ array[7]);
		byte_2[5] = (byte)(array[4] ^ method_7(ref array[5]) ^ method_8(ref array[6]) ^ array[7]);
		byte_2[6] = (byte)(array[4] ^ array[5] ^ method_7(ref array[6]) ^ method_8(ref array[7]));
		byte_2[7] = (byte)(method_8(ref array[4]) ^ array[5] ^ array[6] ^ method_7(ref array[7]));
		byte_2[8] = (byte)(method_7(ref array[8]) ^ method_8(ref array[9]) ^ array[10] ^ array[11]);
		byte_2[9] = (byte)(array[8] ^ method_7(ref array[9]) ^ method_8(ref array[10]) ^ array[11]);
		byte_2[10] = (byte)(array[8] ^ array[9] ^ method_7(ref array[10]) ^ method_8(ref array[11]));
		byte_2[11] = (byte)(method_8(ref array[8]) ^ array[9] ^ array[10] ^ method_7(ref array[11]));
		byte_2[12] = (byte)(method_7(ref array[12]) ^ method_8(ref array[13]) ^ array[14] ^ array[15]);
		byte_2[13] = (byte)(array[12] ^ method_7(ref array[13]) ^ method_8(ref array[14]) ^ array[15]);
		byte_2[14] = (byte)(array[12] ^ array[13] ^ method_7(ref array[14]) ^ method_8(ref array[15]));
		byte_2[15] = (byte)(method_8(ref array[12]) ^ array[13] ^ array[14] ^ method_7(ref array[15]));
	}

	private byte method_7(ref byte byte_2)
	{
		byte b = (byte)(byte_2 << 1);
		if ((byte_2 & 0x80u) != 0)
		{
			b = checked((byte)(b ^ 0x1B));
		}
		return b;
	}

	private byte method_8(ref byte byte_2)
	{
		return (byte)(method_7(ref byte_2) ^ byte_2);
	}
}
internal class Class42
{
	private uint uint_0;

	private uint uint_1;

	private byte[] byte_0;

	private byte[] byte_1;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_2)
	{
		uint_0 = uint_2;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_2)
	{
		uint_1 = uint_2;
	}

	public byte[] method_4()
	{
		return byte_0;
	}

	public void method_5(byte[] byte_2)
	{
		byte_0 = byte_2;
	}

	public byte[] method_6()
	{
		return byte_1;
	}

	public void method_7(byte[] byte_2)
	{
		byte_1 = byte_2;
	}

	public static Class42 smethod_0(byte[] byte_2)
	{
		Class42 @class = new Class42();
		using MemoryStream input = new MemoryStream(byte_2);
		using BinaryReader binaryReader = new BinaryReader(input);
		@class.method_1(binaryReader.ReadUInt32());
		@class.method_3(binaryReader.ReadUInt32());
		@class.method_5(binaryReader.ReadBytes(checked(byte_2.Length - 8 - 16)));
		@class.method_7(binaryReader.ReadBytes(16));
		return @class;
	}

	public byte[] method_8()
	{
		checked
		{
			using MemoryStream memoryStream = new MemoryStream();
			using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
			_ = method_4().Length + method_6().Length;
			binaryWriter.Write(method_4());
			binaryWriter.Write(method_6());
			binaryWriter.Flush();
			memoryStream.Position = 0L;
			return memoryStream.ToArray();
		}
	}
}
internal class Class32 : Class30
{
	private byte[] byte_0;

	private byte[] byte_1;

	public byte[] method_3()
	{
		return byte_0;
	}

	public void method_4(byte[] byte_2)
	{
		byte_0 = byte_2;
	}

	public byte[] method_5()
	{
		return byte_1;
	}

	public void method_6(byte[] byte_2)
	{
		byte_1 = byte_2;
	}

	public override uint vmethod_0()
	{
		return checked((uint)(method_3().Length + method_5().Length));
	}

	public static Class32 smethod_0(byte[] byte_2)
	{
		Class32 @class = new Class32();
		using MemoryStream input = new MemoryStream(byte_2);
		using BinaryReader binaryReader = new BinaryReader(input);
		@class.method_4(binaryReader.ReadBytes(checked(byte_2.Length - 16)));
		@class.method_6(binaryReader.ReadBytes(16));
		return @class;
	}

	public byte[] method_7()
	{
		using MemoryStream memoryStream = new MemoryStream();
		using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(vmethod_0());
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_1());
		binaryWriter.Write(method_3());
		binaryWriter.Write(method_5());
		binaryWriter.Write(method_2());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class43
{
	private uint uint_0;

	private uint uint_1;

	private uint uint_2;

	private byte[] byte_0;

	private KMSRequest kmsrequest_0;

	private byte[] byte_1;

	private byte[] byte_2;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_3)
	{
		uint_0 = uint_3;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_3)
	{
		uint_1 = uint_3;
	}

	public uint method_4()
	{
		return uint_2;
	}

	public void method_5(uint uint_3)
	{
		uint_2 = uint_3;
	}

	public byte[] method_6()
	{
		return byte_0;
	}

	public void method_7(byte[] byte_3)
	{
		byte_0 = byte_3;
	}

	public KMSRequest method_8()
	{
		return kmsrequest_0;
	}

	public void method_9(KMSRequest kmsrequest_1)
	{
		kmsrequest_0 = kmsrequest_1;
	}

	public byte[] method_10()
	{
		return byte_1;
	}

	public void method_11(byte[] byte_3)
	{
		byte_1 = byte_3;
	}

	public byte[] method_12()
	{
		return byte_2;
	}

	public void method_13(byte[] byte_3)
	{
		byte_2 = byte_3;
	}

	public uint method_14()
	{
		checked
		{
			return (uint)(unchecked((long)checked(Marshal.SizeOf((object)method_4()) + method_6().Length)) + unchecked((long)method_8().BodyLength) + method_10().Length);
		}
	}

	public byte[] method_15()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_4());
		binaryWriter.Write(method_6());
		binaryWriter.Write(method_8().GetByteArray());
		binaryWriter.Write(method_10());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public byte[] method_16()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_6());
		binaryWriter.Write(method_8().GetByteArray());
		binaryWriter.Write(method_10());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public static Class43 smethod_0(ref byte[] byte_3)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class43 @class = new Class43();
		@class.method_1(binaryReader.ReadUInt32());
		@class.method_3(binaryReader.ReadUInt32());
		@class.method_5(binaryReader.ReadUInt32());
		@class.method_7(binaryReader.ReadBytes(16));
		byte[] encrypted = binaryReader.ReadBytes(checked(byte_3.Length - 8 - 4 - 16 - 4));
		bool isEncrypted = true;
		@class.method_9(KMSRequest.Parse(ref encrypted, ref isEncrypted));
		@class.method_11(binaryReader.ReadBytes(4));
		return @class;
	}

	public static Class43 smethod_1(ref byte[] byte_3, ref Class43 class43_0)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class43 @class = new Class43();
		@class.method_5(class43_0.method_4());
		@class.method_7(class43_0.method_6());
		byte[] encrypted = binaryReader.ReadBytes(checked(byte_3.Length - 4));
		bool isEncrypted = true;
		@class.method_9(KMSRequest.Parse(ref encrypted, ref isEncrypted));
		@class.method_11(binaryReader.ReadBytes(4));
		class43_0 = @class;
		return class43_0;
	}
}
internal class Class33 : Class30
{
	private uint uint_0;

	private byte[] byte_0;

	private KMSResponse kmsresponse_0;

	private byte[] byte_1;

	private byte[] byte_2;

	private byte[] byte_3;

	public uint method_3()
	{
		return uint_0;
	}

	public void method_4(uint uint_1)
	{
		uint_0 = uint_1;
	}

	public byte[] method_5()
	{
		return byte_0;
	}

	public void method_6(byte[] byte_4)
	{
		byte_0 = byte_4;
	}

	public KMSResponse method_7()
	{
		return kmsresponse_0;
	}

	public void method_8(KMSResponse kmsresponse_1)
	{
		kmsresponse_0 = kmsresponse_1;
	}

	public byte[] method_9()
	{
		return byte_1;
	}

	public void method_10(byte[] byte_4)
	{
		byte_1 = byte_4;
	}

	public byte[] method_11()
	{
		return byte_2;
	}

	public void method_12(byte[] byte_4)
	{
		byte_2 = byte_4;
	}

	public byte[] method_13()
	{
		return byte_3;
	}

	public void method_14(byte[] byte_4)
	{
		byte_3 = byte_4;
	}

	public override uint vmethod_0()
	{
		checked
		{
			return (uint)(unchecked((long)checked(Marshal.SizeOf((object)method_3()) + method_5().Length)) + unchecked((long)method_7().BodyLength) + method_9().Length + method_11().Length + method_13().Length);
		}
	}

	public static Class33 smethod_0(ref byte[] byte_4)
	{
		checked
		{
			int num = byte_4.Length - 4 - 16 - 16 - 32 - 2;
			MemoryStream input = new MemoryStream(byte_4);
			BinaryReader binaryReader = new BinaryReader(input);
			Class33 @class = new Class33();
			@class.method_4(binaryReader.ReadUInt32());
			@class.method_6(binaryReader.ReadBytes(16));
			@class.method_8(KMSResponse.Parse(binaryReader.ReadBytes(num)));
			@class.method_10(binaryReader.ReadBytes(16));
			@class.method_12(binaryReader.ReadBytes(32));
			@class.method_14(binaryReader.ReadBytes(byte_4.Length - 4 - 16 - num - 16 - 32));
			return @class;
		}
	}

	public static Class33 smethod_1(ref byte[] byte_4, bool bool_0)
	{
		new Class33();
		int count = checked(byte_4.Length - 4 - 16 - 16 - 32 - 2);
		MemoryStream input = new MemoryStream(byte_4);
		BinaryReader binaryReader = new BinaryReader(input);
		Class33 @class = new Class33();
		@class.method_4(binaryReader.ReadUInt32());
		@class.method_6(binaryReader.ReadBytes(16));
		@class.method_8(KMSResponse.Parse(binaryReader.ReadBytes(count), bool_0));
		@class.method_10(binaryReader.ReadBytes(16));
		@class.method_12(binaryReader.ReadBytes(32));
		@class.method_14(binaryReader.ReadBytes(2));
		return @class;
	}

	public byte[] method_15()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(vmethod_0());
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_1());
		binaryWriter.Write(method_3());
		binaryWriter.Write(method_5());
		binaryWriter.Write(method_7().GetByteArray());
		binaryWriter.Write(method_9());
		binaryWriter.Write(method_11());
		binaryWriter.Write(method_13());
		binaryWriter.Write(method_2());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public byte[] method_16()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_7().GetByteArray());
		binaryWriter.Write(method_9());
		binaryWriter.Write(method_11());
		binaryWriter.Write(method_13());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class44 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	private static ILogger ilogger_0;

	public Class44(ref IMessageHandler imessageHandler_1, ref ILogger ilogger_1)
	{
		imessageHandler_0 = imessageHandler_1;
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		KMSRequest kmsrequest_ = KMSRequest.Parse(ref request);
		byte[] request2 = smethod_1(ref kmsrequest_).method_15();
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return smethod_0(ref byte_).GetByteArray();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		byte[] request2 = smethod_1(ref request).method_15();
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return smethod_0(ref byte_);
	}

	private static KMSResponse smethod_0(ref byte[] byte_0)
	{
		KMSResponse kMSResponse = null;
		if (byte_0.Length == 12)
		{
			kMSResponse = KMSResponse.ParseError(byte_0);
		}
		else
		{
			Class33 class33_ = Class33.smethod_1(ref byte_0, bool_0: true);
			class33_ = Class45.smethod_2(ref class33_);
			kMSResponse = class33_.method_7();
			ILogger logger = ilogger_0;
			string message = string.Format("Test: Received response: v{0}, PID: {1}", kMSResponse.MajorVersion, kMSResponse.KMSPIDString.Replace("\0", string.Empty));
			logger.LogMessage(ref message);
		}
		return kMSResponse;
	}

	private static Class43 smethod_1(ref KMSRequest kmsrequest_0)
	{
		Class43 @class = new Class43();
		@class.method_5(327680u);
		@class.method_7(Guid.NewGuid().ToByteArray());
		@class.method_9(kmsrequest_0);
		Class43 class43_ = @class;
		byte[] byte_ = class43_.method_8().GetByteArray();
		Class43 class2;
		byte[] byte_2 = (class2 = class43_).method_6();
		byte[] array = Class45.smethod_4(ref byte_, ref byte_2);
		class2.method_7(byte_2);
		byte[] byte_3 = array;
		class43_ = Class43.smethod_1(ref byte_3, ref class43_);
		ILogger logger = ilogger_0;
		string message = $"Test: Sending request: v{kmsrequest_0.MajorVersion}, AppID: {kmsrequest_0.ApplicationId}, Machine: {kmsrequest_0.MachineNameString}";
		logger.LogMessage(ref message);
		return class43_;
	}
}
internal class Class45
{
	public static readonly byte[] byte_0 = new byte[16]
	{
		205,
		126,
		121,
		111,
		42,
		178,
		93,
		203,
		85,
		255,
		200,
		239,
		131,
		100,
		196,
		112
	};

	public static byte[] smethod_0(ref byte[] byte_1)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return ((HashAlgorithm)new SHA256Managed()).ComputeHash(byte_1);
	}

	public static Class43 smethod_1(ref Class43 class43_0)
	{
		byte[] byte_ = class43_0.method_16();
		Class43 @class;
		byte[] byte_2 = (@class = class43_0).method_6();
		byte[] array = smethod_3(ref byte_, ref byte_2);
		@class.method_7(byte_2);
		byte[] byte_3 = Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array, class43_0.method_6().Length));
		byte[] decrypted = Enumerable.ToArray<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, class43_0.method_6().Length));
		class43_0.method_13(byte_3);
		class43_0.method_9(KMSRequest.Parse(ref decrypted));
		return class43_0;
	}

	public static Class33 smethod_2(ref Class33 class33_0)
	{
		byte[] byte_ = class33_0.method_16();
		Class33 @class;
		byte[] byte_2 = (@class = class33_0).method_5();
		byte[] array = smethod_3(ref byte_, ref byte_2);
		@class.method_6(byte_2);
		checked
		{
			int num = array.Length - 16 - 32;
			byte[] decrypted = Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array, num));
			byte[] byte_3 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num), 16));
			byte[] byte_4 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num + 16), 32));
			class33_0.method_8(KMSResponse.Parse(decrypted));
			class33_0.method_10(byte_3);
			class33_0.method_12(byte_4);
			return class33_0;
		}
	}

	private static byte[] smethod_3(ref byte[] byte_1, ref byte[] byte_2)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Expected O, but got Unknown
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		RijndaelManaged val = new RijndaelManaged();
		((SymmetricAlgorithm)val).set_Key(byte_0);
		((SymmetricAlgorithm)val).set_IV(byte_2);
		RijndaelManaged val2 = val;
		MemoryStream memoryStream = new MemoryStream();
		new CryptoStream((Stream)memoryStream, ((SymmetricAlgorithm)val2).CreateDecryptor(), (CryptoStreamMode)1).Write(byte_1, 0, byte_1.Length);
		return memoryStream.ToArray();
	}

	public static byte[] smethod_4(ref byte[] byte_1, ref byte[] byte_2)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Expected O, but got Unknown
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		RijndaelManaged val = new RijndaelManaged();
		((SymmetricAlgorithm)val).set_Key(byte_0);
		((SymmetricAlgorithm)val).set_IV(byte_2);
		RijndaelManaged val2 = val;
		MemoryStream memoryStream = new MemoryStream();
		new CryptoStream((Stream)memoryStream, ((SymmetricAlgorithm)val2).CreateEncryptor(), (CryptoStreamMode)1).Write(byte_1, 0, byte_1.Length);
		return memoryStream.ToArray();
	}
}
internal class Class46 : IMessageHandler
{
	private Interface0 interface0_0;

	private readonly ILogger ilogger_0;

	private Interface0 method_0()
	{
		return interface0_0;
	}

	private void method_1(Interface0 interface0_1)
	{
		interface0_0 = interface0_1;
	}

	public Class46(ref Interface0 interface0_1, ref ILogger ilogger_1)
	{
		method_1(interface0_1);
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		Class43 class43_ = Class43.smethod_0(ref request);
		class43_ = Class45.smethod_1(ref class43_);
		ILogger logger = ilogger_0;
		string message = $"Received request: v{class43_.method_8().MajorVersion}, AppID: {class43_.method_8().ApplicationId}, Machine: {class43_.method_8().MachineNameString}";
		logger.LogMessage(ref message);
		Interface0 @interface = method_0();
		Class43 @class;
		KMSRequest kmsrequest_ = (@class = class43_).method_8();
		KMSResponse kMSResponse = @interface.imethod_0(ref kmsrequest_);
		@class.method_9(kmsrequest_);
		KMSResponse kMSResponse2 = kMSResponse;
		byte[] byte_ = Guid.NewGuid().ToByteArray();
		byte[] gparam_ = Class45.smethod_0(ref byte_);
		byte[] array = new byte[16];
		int num = 0;
		do
		{
			array[num] = (byte)(class43_.method_12()[num] ^ class43_.method_6()[num] ^ byte_[num]);
			num = checked(num + 1);
		}
		while (num <= 15);
		byte[] byte_2 = Class1.smethod_1(kMSResponse2.GetByteArray(), array, gparam_);
		byte[] byte_3 = (@class = class43_).method_6();
		byte[] array2 = Class45.smethod_4(ref byte_2, ref byte_3);
		@class.method_7(byte_3);
		byte[] array3 = array2;
		Class33 class2 = new Class33();
		class2.method_4(class43_.method_4());
		class2.method_6(class43_.method_6());
		checked
		{
			class2.method_8(KMSResponse.Parse(Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array3, (int)kMSResponse2.BodyLength)), isEncrypted: true));
			class2.method_10(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array3, (int)kMSResponse2.BodyLength), 16)));
			class2.method_12(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array3, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length))), 32)));
			class2.method_14(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array3, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length) + class2.method_11().Length)), 2)));
			ILogger logger2 = ilogger_0;
			message = $"Sending response: v{kMSResponse2.MajorVersion}, PID: {kMSResponse2.KMSPIDString}";
			logger2.LogMessage(ref message);
			return class2.method_15();
		}
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
internal class Class47
{
	private uint uint_0;

	private uint uint_1;

	private uint uint_2;

	private byte[] byte_0;

	private byte[] byte_1;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_3)
	{
		uint_0 = uint_3;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_3)
	{
		uint_1 = uint_3;
	}

	public uint method_4()
	{
		return uint_2;
	}

	public void method_5(uint uint_3)
	{
		uint_2 = uint_3;
	}

	public byte[] method_6()
	{
		return byte_0;
	}

	public void method_7(byte[] byte_2)
	{
		byte_0 = byte_2;
	}

	public byte[] method_8()
	{
		return byte_1;
	}

	public void method_9(byte[] byte_2)
	{
		byte_1 = byte_2;
	}

	public byte[] method_10()
	{
		using MemoryStream memoryStream = new MemoryStream();
		using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_4());
		binaryWriter.Write(method_6());
		binaryWriter.Write(method_8());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public static Class47 smethod_0(byte[] byte_2)
	{
		Class47 @class = new Class47();
		using MemoryStream input = new MemoryStream(byte_2);
		using BinaryReader binaryReader = new BinaryReader(input);
		@class.method_1(binaryReader.ReadUInt32());
		@class.method_3(binaryReader.ReadUInt32());
		@class.method_5(binaryReader.ReadUInt32());
		@class.method_7(binaryReader.ReadBytes(16));
		@class.method_9(binaryReader.ReadBytes(checked(byte_2.Length - 8 - 4 - 16)));
		return @class;
	}
}
internal class Class34 : Class30
{
	private uint uint_0;

	private byte[] byte_0;

	private byte[] byte_1;

	public uint method_3()
	{
		return uint_0;
	}

	public void method_4(uint uint_1)
	{
		uint_0 = uint_1;
	}

	public byte[] method_5()
	{
		return byte_0;
	}

	public void method_6(byte[] byte_2)
	{
		byte_0 = byte_2;
	}

	public byte[] method_7()
	{
		return byte_1;
	}

	public void method_8(byte[] byte_2)
	{
		byte_1 = byte_2;
	}

	public override uint vmethod_0()
	{
		return checked((uint)(4 + method_5().Length + method_7().Length));
	}

	public static Class34 smethod_0(byte[] byte_2)
	{
		Class34 @class = new Class34();
		using MemoryStream input = new MemoryStream(byte_2);
		using BinaryReader binaryReader = new BinaryReader(input);
		@class.method_4(binaryReader.ReadUInt32());
		@class.method_6(binaryReader.ReadBytes(16));
		@class.method_8(binaryReader.ReadBytes(checked(byte_2.Length - 2 - 2 - 16)));
		return @class;
	}

	public byte[] method_9()
	{
		using MemoryStream memoryStream = new MemoryStream();
		using BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(vmethod_0());
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_1());
		binaryWriter.Write(method_3());
		binaryWriter.Write(method_5());
		binaryWriter.Write(method_7());
		binaryWriter.Write(method_2());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class48
{
	private uint uint_0;

	private uint uint_1;

	private uint uint_2;

	private byte[] byte_0;

	private KMSRequest kmsrequest_0;

	private byte[] byte_1;

	private byte[] byte_2;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_3)
	{
		uint_0 = uint_3;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_3)
	{
		uint_1 = uint_3;
	}

	public uint method_4()
	{
		return uint_2;
	}

	public void method_5(uint uint_3)
	{
		uint_2 = uint_3;
	}

	public byte[] method_6()
	{
		return byte_0;
	}

	public void method_7(byte[] byte_3)
	{
		byte_0 = byte_3;
	}

	public KMSRequest method_8()
	{
		return kmsrequest_0;
	}

	public void method_9(KMSRequest kmsrequest_1)
	{
		kmsrequest_0 = kmsrequest_1;
	}

	public byte[] method_10()
	{
		return byte_1;
	}

	public void method_11(byte[] byte_3)
	{
		byte_1 = byte_3;
	}

	public byte[] method_12()
	{
		return byte_2;
	}

	public void method_13(byte[] byte_3)
	{
		byte_2 = byte_3;
	}

	public uint method_14()
	{
		checked
		{
			return (uint)(unchecked((long)checked(Marshal.SizeOf((object)method_4()) + method_6().Length)) + unchecked((long)method_8().BodyLength) + method_10().Length);
		}
	}

	public byte[] method_15()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_4());
		binaryWriter.Write(method_6());
		binaryWriter.Write(method_8().GetByteArray());
		binaryWriter.Write(method_10());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public byte[] method_16()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_6());
		binaryWriter.Write(method_8().GetByteArray());
		binaryWriter.Write(method_10());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public static Class48 smethod_0(ref byte[] byte_3)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class48 @class = new Class48();
		@class.method_1(binaryReader.ReadUInt32());
		@class.method_3(binaryReader.ReadUInt32());
		@class.method_5(binaryReader.ReadUInt32());
		@class.method_7(binaryReader.ReadBytes(16));
		byte[] encrypted = binaryReader.ReadBytes(checked(byte_3.Length - 8 - 4 - 16 - 4));
		bool isEncrypted = true;
		@class.method_9(KMSRequest.Parse(ref encrypted, ref isEncrypted));
		@class.method_11(binaryReader.ReadBytes(4));
		return @class;
	}

	public static Class48 smethod_1(ref byte[] byte_3, ref Class48 class48_0)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class48 @class = new Class48();
		@class.method_5(class48_0.method_4());
		@class.method_7(class48_0.method_6());
		byte[] encrypted = binaryReader.ReadBytes(checked(byte_3.Length - 4));
		bool isEncrypted = true;
		@class.method_9(KMSRequest.Parse(ref encrypted, ref isEncrypted));
		@class.method_11(binaryReader.ReadBytes(4));
		class48_0 = @class;
		return class48_0;
	}
}
internal class Class35 : Class30
{
	private uint uint_0;

	private byte[] byte_0;

	private KMSResponse kmsresponse_0;

	private byte[] byte_1;

	private byte[] byte_2;

	private byte[] byte_3;

	private byte[] byte_4;

	private byte[] byte_5;

	private byte[] byte_6;

	public uint method_3()
	{
		return uint_0;
	}

	public void method_4(uint uint_1)
	{
		uint_0 = uint_1;
	}

	public byte[] method_5()
	{
		return byte_0;
	}

	public void method_6(byte[] byte_7)
	{
		byte_0 = byte_7;
	}

	public KMSResponse method_7()
	{
		return kmsresponse_0;
	}

	public void method_8(KMSResponse kmsresponse_1)
	{
		kmsresponse_0 = kmsresponse_1;
	}

	public byte[] method_9()
	{
		return byte_1;
	}

	public void method_10(byte[] byte_7)
	{
		byte_1 = byte_7;
	}

	public byte[] method_11()
	{
		return byte_2;
	}

	public void method_12(byte[] byte_7)
	{
		byte_2 = byte_7;
	}

	public byte[] method_13()
	{
		return byte_3;
	}

	public void method_14(byte[] byte_7)
	{
		byte_3 = byte_7;
	}

	public byte[] method_15()
	{
		return byte_4;
	}

	public void method_16(byte[] byte_7)
	{
		byte_4 = byte_7;
	}

	public byte[] method_17()
	{
		return byte_5;
	}

	public void method_18(byte[] byte_7)
	{
		byte_5 = byte_7;
	}

	public byte[] method_19()
	{
		return byte_6;
	}

	public void method_20(byte[] byte_7)
	{
		byte_6 = byte_7;
	}

	public override uint vmethod_0()
	{
		checked
		{
			return (uint)(unchecked((long)checked(Marshal.SizeOf((object)method_3()) + method_5().Length)) + unchecked((long)method_7().BodyLength) + method_9().Length + method_11().Length + method_13().Length + method_15().Length + method_17().Length + method_19().Length);
		}
	}

	public static Class35 smethod_0(ref byte[] byte_7)
	{
		int count = checked(byte_7.Length - 4 - 16 - 16 - 32 - 8 - 16 - 16 - 10);
		MemoryStream input = new MemoryStream(byte_7);
		BinaryReader binaryReader = new BinaryReader(input);
		Class35 @class = new Class35();
		@class.method_4(binaryReader.ReadUInt32());
		@class.method_6(binaryReader.ReadBytes(16));
		@class.method_8(KMSResponse.Parse(binaryReader.ReadBytes(count)));
		@class.method_10(binaryReader.ReadBytes(16));
		@class.method_12(binaryReader.ReadBytes(32));
		@class.method_14(binaryReader.ReadBytes(8));
		@class.method_16(binaryReader.ReadBytes(16));
		@class.method_18(binaryReader.ReadBytes(16));
		@class.method_20(binaryReader.ReadBytes(10));
		return @class;
	}

	public static Class35 smethod_1(ref byte[] byte_7, ref bool bool_0)
	{
		int count = checked(byte_7.Length - 4 - 16 - 16 - 32 - 8 - 16 - 16 - 10);
		MemoryStream input = new MemoryStream(byte_7);
		BinaryReader binaryReader = new BinaryReader(input);
		Class35 @class = new Class35();
		@class.method_4(binaryReader.ReadUInt32());
		@class.method_6(binaryReader.ReadBytes(16));
		@class.method_8(KMSResponse.Parse(binaryReader.ReadBytes(count), bool_0));
		@class.method_10(binaryReader.ReadBytes(16));
		@class.method_12(binaryReader.ReadBytes(32));
		@class.method_14(binaryReader.ReadBytes(8));
		@class.method_16(binaryReader.ReadBytes(16));
		@class.method_18(binaryReader.ReadBytes(16));
		@class.method_20(binaryReader.ReadBytes(10));
		return @class;
	}

	public byte[] method_21()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(vmethod_0());
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_1());
		binaryWriter.Write(method_3());
		binaryWriter.Write(method_5());
		binaryWriter.Write(method_7().GetByteArray());
		binaryWriter.Write(method_9());
		binaryWriter.Write(method_11());
		binaryWriter.Write(method_13());
		binaryWriter.Write(method_15());
		binaryWriter.Write(method_17());
		binaryWriter.Write(method_19());
		binaryWriter.Write(method_2());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public byte[] method_22()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_7().GetByteArray());
		binaryWriter.Write(method_9());
		binaryWriter.Write(method_11());
		binaryWriter.Write(method_13());
		binaryWriter.Write(method_15());
		binaryWriter.Write(method_17());
		binaryWriter.Write(method_19());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class49 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	private static ILogger ilogger_0;

	public Class49(ref IMessageHandler imessageHandler_1, ref ILogger ilogger_1)
	{
		imessageHandler_0 = imessageHandler_1;
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		KMSRequest kmsrequest_ = KMSRequest.Parse(ref request);
		byte[] request2 = smethod_1(ref kmsrequest_).method_15();
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return smethod_0(ref byte_).GetByteArray();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		byte[] request2 = smethod_1(ref request).method_15();
		byte[] byte_ = imessageHandler_0.HandleRequest(ref request2);
		return smethod_0(ref byte_);
	}

	private static KMSResponse smethod_0(ref byte[] byte_0)
	{
		KMSResponse kMSResponse = new KMSResponse();
		if (byte_0.Length == 12)
		{
			kMSResponse = KMSResponse.ParseError(byte_0);
		}
		else
		{
			bool bool_ = true;
			Class35 class35_ = Class35.smethod_1(ref byte_0, ref bool_);
			class35_ = Class50.smethod_3(ref class35_);
			kMSResponse = class35_.method_7();
			ILogger logger = ilogger_0;
			object arg = kMSResponse.MajorVersion;
			string arg2 = kMSResponse.KMSPIDString.Replace("\0", string.Empty);
			Class35 @class;
			byte[] byte_ = (@class = class35_).method_13();
			string arg3 = Class2.smethod_8(ref byte_, ref ilogger_0);
			@class.method_14(byte_);
			string message = $"Test: Received response: v{arg}, PID: {arg2}, HwID: {arg3}";
			logger.LogMessage(ref message);
		}
		return kMSResponse;
	}

	private static Class48 smethod_1(ref KMSRequest kmsrequest_0)
	{
		Class48 @class = new Class48();
		@class.method_5(393216u);
		@class.method_7(Guid.NewGuid().ToByteArray());
		@class.method_9(kmsrequest_0);
		Class48 class48_ = @class;
		byte[] byte_ = class48_.method_8().GetByteArray();
		Class48 class2;
		byte[] byte_2 = (class2 = class48_).method_6();
		byte[] array = Class50.smethod_4(ref byte_, ref byte_2);
		class2.method_7(byte_2);
		byte[] byte_3 = array;
		class48_ = Class48.smethod_1(ref byte_3, ref class48_);
		ILogger logger = ilogger_0;
		string message = $"Test: Sending request: v{kmsrequest_0.MajorVersion}, AppID: {kmsrequest_0.ApplicationId}, Machine: {kmsrequest_0.MachineNameString}";
		logger.LogMessage(ref message);
		return class48_;
	}
}
internal class Class50
{
	public static readonly byte[] byte_0 = new byte[16]
	{
		205,
		126,
		121,
		111,
		42,
		178,
		93,
		203,
		85,
		255,
		200,
		239,
		131,
		100,
		196,
		112
	};

	private static byte[] byte_1 = new byte[256]
	{
		99,
		124,
		119,
		123,
		242,
		107,
		111,
		197,
		48,
		1,
		103,
		43,
		254,
		215,
		171,
		118,
		202,
		130,
		201,
		125,
		250,
		89,
		71,
		240,
		173,
		212,
		162,
		175,
		156,
		164,
		114,
		192,
		183,
		253,
		147,
		38,
		54,
		63,
		247,
		204,
		52,
		165,
		229,
		241,
		113,
		216,
		49,
		21,
		4,
		199,
		35,
		195,
		24,
		150,
		5,
		154,
		7,
		18,
		128,
		226,
		235,
		39,
		178,
		117,
		9,
		131,
		44,
		26,
		27,
		110,
		90,
		160,
		82,
		59,
		214,
		179,
		41,
		227,
		47,
		132,
		83,
		209,
		0,
		237,
		32,
		252,
		177,
		91,
		106,
		203,
		190,
		57,
		74,
		76,
		88,
		207,
		208,
		239,
		170,
		251,
		67,
		77,
		51,
		133,
		69,
		249,
		2,
		127,
		80,
		60,
		159,
		168,
		81,
		163,
		64,
		143,
		146,
		157,
		56,
		245,
		188,
		182,
		218,
		33,
		16,
		255,
		243,
		210,
		205,
		12,
		19,
		236,
		95,
		151,
		68,
		23,
		196,
		167,
		126,
		61,
		100,
		93,
		25,
		115,
		96,
		129,
		79,
		220,
		34,
		42,
		144,
		136,
		70,
		238,
		184,
		20,
		222,
		94,
		11,
		219,
		224,
		50,
		58,
		10,
		73,
		6,
		36,
		92,
		194,
		211,
		172,
		98,
		145,
		149,
		228,
		121,
		231,
		200,
		55,
		109,
		141,
		213,
		78,
		169,
		108,
		86,
		244,
		234,
		101,
		122,
		174,
		8,
		186,
		120,
		37,
		46,
		28,
		166,
		180,
		198,
		232,
		221,
		116,
		31,
		75,
		189,
		139,
		138,
		112,
		62,
		181,
		102,
		72,
		3,
		246,
		14,
		97,
		53,
		87,
		185,
		134,
		193,
		29,
		158,
		225,
		248,
		152,
		17,
		105,
		217,
		142,
		148,
		155,
		30,
		135,
		233,
		206,
		85,
		40,
		223,
		140,
		161,
		137,
		13,
		191,
		230,
		66,
		104,
		65,
		153,
		45,
		15,
		176,
		84,
		187,
		22
	};

	private static byte[] byte_2 = new byte[256]
	{
		82,
		9,
		106,
		213,
		48,
		54,
		165,
		56,
		191,
		64,
		163,
		158,
		129,
		243,
		215,
		251,
		124,
		227,
		57,
		130,
		155,
		47,
		255,
		135,
		52,
		142,
		67,
		68,
		196,
		222,
		233,
		203,
		84,
		123,
		148,
		50,
		166,
		194,
		35,
		61,
		238,
		76,
		149,
		11,
		66,
		250,
		195,
		78,
		8,
		46,
		161,
		102,
		40,
		217,
		36,
		178,
		118,
		91,
		162,
		73,
		109,
		139,
		209,
		37,
		114,
		248,
		246,
		100,
		134,
		104,
		152,
		22,
		212,
		164,
		92,
		204,
		93,
		101,
		182,
		146,
		108,
		112,
		72,
		80,
		253,
		237,
		185,
		218,
		94,
		21,
		70,
		87,
		167,
		141,
		157,
		132,
		144,
		216,
		171,
		0,
		140,
		188,
		211,
		10,
		247,
		228,
		88,
		5,
		184,
		179,
		69,
		6,
		208,
		44,
		30,
		143,
		202,
		63,
		15,
		2,
		193,
		175,
		189,
		3,
		1,
		19,
		138,
		107,
		58,
		145,
		17,
		65,
		79,
		103,
		220,
		234,
		151,
		242,
		207,
		206,
		240,
		180,
		230,
		115,
		150,
		172,
		116,
		34,
		231,
		173,
		53,
		133,
		226,
		249,
		55,
		232,
		28,
		117,
		223,
		110,
		71,
		241,
		26,
		113,
		29,
		41,
		197,
		137,
		111,
		183,
		98,
		14,
		170,
		24,
		190,
		27,
		252,
		86,
		62,
		75,
		198,
		210,
		121,
		32,
		154,
		219,
		192,
		254,
		120,
		205,
		90,
		244,
		31,
		221,
		168,
		51,
		136,
		7,
		199,
		49,
		177,
		18,
		16,
		89,
		39,
		128,
		236,
		95,
		96,
		81,
		127,
		169,
		25,
		181,
		74,
		13,
		45,
		229,
		122,
		159,
		147,
		201,
		156,
		239,
		160,
		224,
		59,
		77,
		174,
		42,
		245,
		176,
		200,
		235,
		187,
		60,
		131,
		83,
		153,
		97,
		23,
		43,
		4,
		126,
		186,
		119,
		214,
		38,
		225,
		105,
		20,
		99,
		85,
		33,
		12,
		125
	};

	private static byte[,] byte_3 = new byte[11, 16]
	{
		{
			169,
			74,
			65,
			149,
			226,
			1,
			67,
			45,
			155,
			203,
			70,
			4,
			5,
			216,
			74,
			33
		},
		{
			201,
			156,
			188,
			254,
			43,
			157,
			255,
			211,
			176,
			86,
			185,
			215,
			181,
			142,
			243,
			246
		},
		{
			210,
			145,
			254,
			43,
			249,
			12,
			1,
			248,
			73,
			90,
			184,
			47,
			252,
			212,
			75,
			217
		},
		{
			158,
			34,
			203,
			155,
			103,
			46,
			202,
			99,
			46,
			116,
			114,
			76,
			210,
			160,
			57,
			149
		},
		{
			5,
			48,
			225,
			46,
			17,
			30,
			43,
			77,
			63,
			106,
			89,
			1,
			237,
			202,
			96,
			148
		},
		{
			18,
			224,
			195,
			123,
			3,
			254,
			232,
			54,
			60,
			148,
			177,
			55,
			209,
			94,
			209,
			163
		},
		{
			99,
			222,
			201,
			69,
			105,
			32,
			33,
			115,
			85,
			180,
			144,
			68,
			132,
			234,
			65,
			231
		},
		{
			173,
			93,
			93,
			26,
			196,
			125,
			124,
			105,
			145,
			201,
			236,
			45,
			21,
			35,
			173,
			202
		},
		{
			239,
			200,
			41,
			67,
			207,
			181,
			85,
			42,
			94,
			124,
			185,
			7,
			75,
			95,
			20,
			205
		},
		{
			223,
			50,
			148,
			240,
			16,
			135,
			193,
			218,
			78,
			251,
			120,
			221,
			5,
			164,
			108,
			16
		},
		{
			160,
			98,
			94,
			155,
			176,
			229,
			159,
			65,
			254,
			30,
			231,
			156,
			251,
			186,
			139,
			140
		}
	};

	public static byte[] smethod_0(byte[] byte_4)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return ((HashAlgorithm)new SHA256Managed()).ComputeHash(byte_4);
	}

	public static byte[] smethod_1(Class52 class52_0)
	{
		byte[] byte_ = class52_0.method_6();
		byte[] byte_2 = Enumerable.ToArray<byte>(Enumerable.Concat<byte>((IEnumerable<byte>)class52_0.method_6(), (IEnumerable<byte>)class52_0.method_8()));
		return smethod_8(ref byte_2, ref byte_);
	}

	public static Class48 smethod_2(ref Class48 class48_0)
	{
		byte[] byte_ = class48_0.method_16();
		Class48 @class;
		byte[] byte_2 = (@class = class48_0).method_6();
		byte[] array = smethod_8(ref byte_, ref byte_2);
		@class.method_7(byte_2);
		byte[] array2 = Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array, class48_0.method_6().Length));
		byte[] decrypted = Enumerable.ToArray<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, class48_0.method_6().Length));
		class48_0.method_13(array2);
		class48_0.method_9(KMSRequest.Parse(ref decrypted));
		return class48_0;
	}

	public static Class35 smethod_3(ref Class35 class35_0)
	{
		byte[] byte_ = class35_0.method_22();
		Class35 @class;
		byte[] byte_2 = (@class = class35_0).method_5();
		byte[] array = smethod_8(ref byte_, ref byte_2);
		@class.method_6(byte_2);
		checked
		{
			int num = array.Length - 16 - 32 - 8 - 16 - 16;
			byte[] decrypted = Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array, num));
			byte[] byte_3 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num), 16));
			byte[] byte_4 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num + 16), 32));
			byte[] byte_5 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num + 16 + 32), 8));
			byte[] byte_6 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num + 16 + 32 + 8), 16));
			byte[] byte_7 = Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array, num + 16 + 32 + 8 + 16), 16));
			class35_0.method_8(KMSResponse.Parse(decrypted));
			class35_0.method_10(byte_3);
			class35_0.method_12(byte_4);
			class35_0.method_14(byte_5);
			class35_0.method_16(byte_6);
			class35_0.method_18(byte_7);
			return class35_0;
		}
	}

	public static byte[] smethod_4(ref byte[] byte_4, ref byte[] byte_5)
	{
		return smethod_7(ref byte_4, ref byte_5);
	}

	public static byte[] smethod_5(ulong ulong_0)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		checked
		{
			ulong value = unchecked(ulong_0 / 148199999933uL) * 139799999981uL + 3555254745610864506uL;
			return Enumerable.ToArray<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)((HashAlgorithm)new SHA256Managed()).ComputeHash(BitConverter.GetBytes(value)), 16));
		}
	}

	public static byte[] smethod_6(ref byte[] byte_4, ref byte[] byte_5)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return ((HashAlgorithm)new HMACSHA256(byte_4)).ComputeHash(byte_5);
	}

	private static byte[] smethod_7(ref byte[] byte_4, ref byte[] byte_5)
	{
		checked
		{
			byte b = (byte)(16 - unchecked(byte_4.Length % 16));
			byte[] byte_6 = Enumerable.ToArray<byte>(Enumerable.Concat<byte>((IEnumerable<byte>)byte_4, Enumerable.Repeat<byte>(b, unchecked((int)b))));
			if (byte_5 != null)
			{
				int num = 0;
				do
				{
					byte_6[num] = unchecked((byte)(byte_6[num] ^ byte_5[num]));
					num++;
				}
				while (num <= 15);
			}
			int int_ = 0;
			byte[] array = smethod_9(ref byte_6, ref int_);
			int_ = byte_6.Length - 1;
			for (int i = 16; i <= int_; i += 16)
			{
				int num2 = 0;
				do
				{
					byte_6[i + num2] = unchecked((byte)checked(byte_6[i + num2] ^ array[i - 16 + num2]));
					num2++;
				}
				while (num2 <= 15);
				array = Enumerable.ToArray<byte>(Enumerable.Concat<byte>((IEnumerable<byte>)array, (IEnumerable<byte>)smethod_9(ref byte_6, ref i)));
			}
			return array;
		}
	}

	public static byte[] smethod_8(ref byte[] byte_4, ref byte[] byte_5)
	{
		int num = byte_4.Length;
		int int_ = 0;
		byte[] array = smethod_10(ref byte_4, ref int_);
		if (byte_5 != null)
		{
			int num2 = 0;
			do
			{
				array[num2] = (byte)(array[num2] ^ byte_5[num2]);
				num2 = checked(num2 + 1);
			}
			while (num2 <= 15);
		}
		checked
		{
			int_ = num - 1;
			for (int i = 16; i <= int_; i += 16)
			{
				array = Enumerable.ToArray<byte>(Enumerable.Concat<byte>((IEnumerable<byte>)array, (IEnumerable<byte>)smethod_10(ref byte_4, ref i)));
				int num3 = 0;
				do
				{
					array[i + num3] = unchecked((byte)checked(array[i + num3] ^ byte_4[i - 16 + num3]));
					num3++;
				}
				while (num3 <= 15);
			}
			if (array.Length == 16)
			{
				return array;
			}
			byte[] array2 = array;
			byte b = array2[array2.Length - 1];
			return Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array, array.Length - unchecked((int)b)));
		}
	}

	private static byte[] smethod_9(ref byte[] byte_4, ref int int_0)
	{
		byte[] byte_5 = new byte[16];
		int num = 0;
		checked
		{
			do
			{
				byte_5[num] = byte_4[int_0 + num];
				num++;
			}
			while (num <= 15);
			int int_ = 0;
			smethod_11(ref byte_5, ref int_);
			int int_2 = 1;
			do
			{
				smethod_20(ref byte_5);
				smethod_22(ref byte_5);
				smethod_11(ref byte_5, ref int_2);
				int_2++;
			}
			while (int_2 <= 9);
			smethod_20(ref byte_5);
			int_ = 10;
			smethod_11(ref byte_5, ref int_);
			return byte_5;
		}
	}

	private static byte[] smethod_10(ref byte[] byte_4, ref int int_0)
	{
		byte[] byte_5 = new byte[16];
		int num = 0;
		checked
		{
			do
			{
				byte_5[num] = byte_4[int_0 + num];
				num++;
			}
			while (num <= 15);
			int int_ = 10;
			smethod_11(ref byte_5, ref int_);
			smethod_21(ref byte_5);
			int int_2 = 9;
			do
			{
				smethod_11(ref byte_5, ref int_2);
				smethod_23(ref byte_5);
				smethod_21(ref byte_5);
				int_2 += -1;
			}
			while (int_2 >= 1);
			int_ = 0;
			smethod_11(ref byte_5, ref int_);
			return byte_5;
		}
	}

	private static void smethod_11(ref byte[] byte_4, ref int int_0)
	{
		int num = 0;
		do
		{
			byte_4[num] = (byte)(byte_4[num] ^ byte_3[int_0, num]);
			num = checked(num + 1);
		}
		while (num <= 15);
	}

	private static byte smethod_12(ref byte byte_4)
	{
		checked
		{
			return (byte)unchecked((byte_4 < 128) ? ((byte)(byte_4 << 1)) : ((byte)(byte_4 << 1) ^ 0x1B));
		}
	}

	private static byte smethod_13(ref byte byte_4)
	{
		return (byte)(smethod_12(ref byte_4) ^ byte_4);
	}

	private static byte smethod_14(ref byte byte_4)
	{
		byte byte_5 = smethod_12(ref byte_4);
		return smethod_12(ref byte_5);
	}

	private static byte smethod_15(ref byte byte_4)
	{
		byte byte_5 = smethod_12(ref byte_4);
		byte byte_6 = smethod_12(ref byte_5);
		return smethod_12(ref byte_6);
	}

	private static byte smethod_16(ref byte byte_4)
	{
		return (byte)(smethod_15(ref byte_4) ^ byte_4);
	}

	private static byte smethod_17(ref byte byte_4)
	{
		return (byte)(smethod_15(ref byte_4) ^ smethod_12(ref byte_4) ^ byte_4);
	}

	private static byte smethod_18(ref byte byte_4)
	{
		return (byte)(smethod_15(ref byte_4) ^ smethod_14(ref byte_4) ^ byte_4);
	}

	private static byte smethod_19(ref byte byte_4)
	{
		return (byte)(smethod_15(ref byte_4) ^ smethod_14(ref byte_4) ^ smethod_12(ref byte_4));
	}

	private static void smethod_20(ref byte[] byte_4)
	{
		byte[] array = new byte[16];
		int num = 0;
		checked
		{
			do
			{
				byte[] array2 = array;
				int num2 = num;
				byte[] obj = byte_4;
				int num3 = num;
				array2[num2] = obj[(num3 + ((num3 & 3) << 2)) & 0xF];
				num++;
			}
			while (num <= 15);
			int num4 = 0;
			do
			{
				byte_4[num4] = byte_1[array[num4]];
				num4++;
			}
			while (num4 <= 15);
			array = null;
		}
	}

	private static void smethod_21(ref byte[] byte_4)
	{
		byte[] array = new byte[16];
		int num = 0;
		checked
		{
			do
			{
				byte[] array2 = array;
				int num2 = num;
				byte[] obj = byte_4;
				int num3 = num;
				array2[num2] = obj[(num3 - ((num3 & 3) << 2)) & 0xF];
				num++;
			}
			while (num <= 15);
			int num4 = 0;
			do
			{
				byte_4[num4] = byte_2[array[num4]];
				num4++;
			}
			while (num4 <= 15);
			array = null;
		}
	}

	private static void smethod_22(ref byte[] byte_4)
	{
		byte[] array = new byte[16];
		int num = 0;
		do
		{
			array[num] = byte_4[num];
			num = checked(num + 1);
		}
		while (num <= 15);
		int num2 = 0;
		do
		{
			byte_4[num2] = (byte)checked(smethod_12(ref array[num2]) ^ smethod_13(ref array[num2 + 1]) ^ array[num2 + 2] ^ array[num2 + 3]);
			byte_4[checked(num2 + 1)] = (byte)checked(array[num2] ^ smethod_12(ref array[num2 + 1]) ^ smethod_13(ref array[num2 + 2]) ^ array[num2 + 3]);
			byte_4[checked(num2 + 2)] = (byte)checked(array[num2] ^ array[num2 + 1] ^ smethod_12(ref array[num2 + 2]) ^ smethod_13(ref array[num2 + 3]));
			byte_4[checked(num2 + 3)] = (byte)checked(smethod_13(ref array[num2]) ^ array[num2 + 1] ^ array[num2 + 2] ^ smethod_12(ref array[num2 + 3]));
			num2 = checked(num2 + 4);
		}
		while (num2 <= 15);
		array = null;
	}

	private static void smethod_23(ref byte[] byte_4)
	{
		byte[] array = new byte[16];
		int num = 0;
		do
		{
			array[num] = byte_4[num];
			num = checked(num + 1);
		}
		while (num <= 15);
		int num2 = 0;
		do
		{
			byte_4[num2] = (byte)checked(smethod_19(ref array[num2]) ^ smethod_17(ref array[num2 + 1]) ^ smethod_18(ref array[num2 + 2]) ^ smethod_16(ref array[num2 + 3]));
			byte_4[checked(num2 + 1)] = (byte)checked(smethod_16(ref array[num2]) ^ smethod_19(ref array[num2 + 1]) ^ smethod_17(ref array[num2 + 2]) ^ smethod_18(ref array[num2 + 3]));
			byte_4[checked(num2 + 2)] = (byte)checked(smethod_18(ref array[num2]) ^ smethod_16(ref array[num2 + 1]) ^ smethod_19(ref array[num2 + 2]) ^ smethod_17(ref array[num2 + 3]));
			byte_4[checked(num2 + 3)] = (byte)checked(smethod_17(ref array[num2]) ^ smethod_18(ref array[num2 + 1]) ^ smethod_16(ref array[num2 + 2]) ^ smethod_19(ref array[num2 + 3]));
			num2 = checked(num2 + 4);
		}
		while (num2 <= 15);
		array = null;
	}
}
internal class Class51 : IMessageHandler
{
	private Interface0 interface0_0;

	private readonly ILogger ilogger_0;

	private Interface0 method_0()
	{
		return interface0_0;
	}

	private void method_1(Interface0 interface0_1)
	{
		interface0_0 = interface0_1;
	}

	public Class51(ref Interface0 interface0_1, ref ILogger ilogger_1)
	{
		method_1(interface0_1);
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		Class48 class48_ = Class48.smethod_0(ref request);
		class48_ = Class50.smethod_2(ref class48_);
		ILogger logger = ilogger_0;
		string message = $"Received request: v{class48_.method_8().MajorVersion}, AppID: {class48_.method_8().ApplicationId}, Machine: {class48_.method_8().MachineNameString}";
		logger.LogMessage(ref message);
		Interface0 @interface = method_0();
		Class48 @class;
		KMSRequest kmsrequest_ = (@class = class48_).method_8();
		KMSResponse kMSResponse = @interface.imethod_0(ref kmsrequest_);
		@class.method_9(kmsrequest_);
		KMSResponse kMSResponse2 = kMSResponse;
		ILogger logger2 = ilogger_0;
		byte[] byte_ = Class27.smethod_0(ref logger2);
		byte[] array = new byte[16];
		int num = 0;
		do
		{
			array[num] = (byte)(class48_.method_12()[num] ^ class48_.method_6()[num]);
			num = checked(num + 1);
		}
		while (num <= 15);
		byte[] array2 = Guid.NewGuid().ToByteArray();
		byte[] array3 = Class50.smethod_0(array2);
		int num2 = 0;
		do
		{
			array2[num2] = (byte)(array2[num2] ^ array[num2]);
			num2 = checked(num2 + 1);
		}
		while (num2 <= 15);
		byte[] byte_2 = Guid.NewGuid().ToByteArray();
		byte[] array4 = Class50.smethod_8(ref byte_2, ref byte_2);
		byte[] array5 = Class1.smethod_2<byte>(kMSResponse2.GetByteArray(), array2, array3, byte_, array);
		byte[] byte_3 = Class50.smethod_5(BitConverter.ToUInt64(class48_.method_8().GetByteArray(), 84));
		byte[] array6 = new byte[16];
		int num3 = 0;
		do
		{
			array6[num3] = (byte)(byte_2[num3] ^ array4[num3]);
			num3 = checked(num3 + 1);
		}
		while (num3 <= 15);
		byte[] byte_4 = Class1.smethod_0(array6, array5);
		byte[] array7 = Class50.smethod_6(ref byte_3, ref byte_4);
		byte[] byte_5 = Class1.smethod_0(array5, Enumerable.ToArray<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array7, 16)));
		byte[] array8 = Class50.smethod_4(ref byte_5, ref byte_2);
		Class35 class2 = new Class35();
		class2.method_4(class48_.method_4());
		class2.method_6(byte_2);
		checked
		{
			class2.method_8(KMSResponse.Parse(Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)array8, (int)kMSResponse2.BodyLength)), isEncrypted: true));
			class2.method_10(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array8, (int)kMSResponse2.BodyLength), 16)));
			class2.method_12(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array8, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length))), 32)));
			class2.method_14(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array8, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length) + class2.method_11().Length)), 8)));
			class2.method_16(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array8, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length) + class2.method_11().Length + class2.method_13().Length)), 16)));
			class2.method_18(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array8, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length) + class2.method_11().Length + class2.method_13().Length + class2.method_15().Length)), 16)));
			class2.method_20(Enumerable.ToArray<byte>(Enumerable.Take<byte>(Enumerable.Skip<byte>((IEnumerable<byte>)array8, (int)(unchecked((long)kMSResponse2.BodyLength) + unchecked((long)class2.method_9().Length) + class2.method_11().Length + class2.method_13().Length + class2.method_15().Length + class2.method_17().Length)), 10)));
			ILogger logger3 = ilogger_0;
			object arg = kMSResponse2.MajorVersion;
			string kMSPIDString = kMSResponse2.KMSPIDString;
			logger2 = ilogger_0;
			message = $"Sending response: v{arg}, PID: {kMSPIDString}, HwID: {Class2.smethod_8(ref byte_, ref logger2)}";
			logger3.LogMessage(ref message);
			return class2.method_21();
		}
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
internal class Class52
{
	private uint uint_0;

	private uint uint_1;

	private uint uint_2;

	private byte[] byte_0;

	private byte[] byte_1;

	public uint method_0()
	{
		return uint_0;
	}

	public void method_1(uint uint_3)
	{
		uint_0 = uint_3;
	}

	public uint method_2()
	{
		return uint_1;
	}

	public void method_3(uint uint_3)
	{
		uint_1 = uint_3;
	}

	public uint method_4()
	{
		return uint_2;
	}

	public void method_5(uint uint_3)
	{
		uint_2 = uint_3;
	}

	public byte[] method_6()
	{
		return byte_0;
	}

	public void method_7(byte[] byte_2)
	{
		byte_0 = byte_2;
	}

	public byte[] method_8()
	{
		return byte_1;
	}

	public void method_9(byte[] byte_2)
	{
		byte_1 = byte_2;
	}

	public byte[] method_10()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_4());
		binaryWriter.Write(method_6());
		binaryWriter.Write(method_8());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public static Class52 smethod_0(byte[] byte_2)
	{
		Class52 @class = new Class52();
		MemoryStream input = new MemoryStream(byte_2);
		BinaryReader binaryReader = new BinaryReader(input);
		@class.method_1(binaryReader.ReadUInt32());
		@class.method_3(binaryReader.ReadUInt32());
		@class.method_5(binaryReader.ReadUInt32());
		@class.method_7(binaryReader.ReadBytes(16));
		@class.method_9(binaryReader.ReadBytes(checked(byte_2.Length - 8 - 4 - 16)));
		return @class;
	}
}
internal class Class36 : Class30
{
	private uint uint_0;

	private byte[] byte_0;

	private byte[] byte_1;

	public uint method_3()
	{
		return uint_0;
	}

	public void method_4(uint uint_1)
	{
		uint_0 = uint_1;
	}

	public byte[] method_5()
	{
		return byte_0;
	}

	public void method_6(byte[] byte_2)
	{
		byte_0 = byte_2;
	}

	public byte[] method_7()
	{
		return byte_1;
	}

	public void method_8(byte[] byte_2)
	{
		byte_1 = byte_2;
	}

	public override uint vmethod_0()
	{
		return checked((uint)(4 + method_5().Length + method_7().Length));
	}

	public static Class36 smethod_0(byte[] byte_2)
	{
		Class36 @class = new Class36();
		MemoryStream input = new MemoryStream(byte_2);
		BinaryReader binaryReader = new BinaryReader(input);
		@class.method_4(binaryReader.ReadUInt32());
		@class.method_6(binaryReader.ReadBytes(16));
		@class.method_8(binaryReader.ReadBytes(checked(byte_2.Length - 2 - 2 - 16)));
		return @class;
	}

	public byte[] method_9()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(vmethod_0());
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_1());
		binaryWriter.Write(method_3());
		binaryWriter.Write(method_5());
		binaryWriter.Write(method_7());
		binaryWriter.Write(method_2());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class53 : IMessageHandler
{
	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(0u);
		binaryWriter.Write(0u);
		binaryWriter.Write(3221549122u);
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
internal class Class54 : ILogger
{
	void ILogger.LogMessage(ref string message)
	{
		Console.WriteLine(Convert.ToString(DateTime.Now.ToString("s") + "\t") + message);
	}
}
namespace AutoPico.Logging
{
	public interface ILogger
	{
		void LogMessage(ref string message);
	}
}
internal class Class55 : ILogger
{
	private static readonly StringBuilder stringBuilder_0 = new StringBuilder();

	void ILogger.LogMessage(ref string message)
	{
		stringBuilder_0.AppendLine(message);
	}

	public string method_0(bool bool_0 = true)
	{
		string result = stringBuilder_0.ToString();
		if (bool_0)
		{
			stringBuilder_0.Clear();
		}
		return result;
	}
}
internal class Class56
{
	[CompilerGenerated]
	internal sealed class Class57
	{
		public Variables variables_0;

		internal void method_0()
		{
			smethod_1(ref variables_0);
		}
	}

	[CompilerGenerated]
	internal sealed class Class58
	{
		public string string_0;

		public string string_1;

		public string string_2;

		public string string_3;

		public Variables variables_0;

		public string string_4;

		internal void method_0()
		{
			smethod_6(ref string_0, ref string_1, ref string_2, ref string_3, ref variables_0);
		}

		internal void method_1()
		{
			ref string reference = ref string_0;
			ref string reference2 = ref string_2;
			string empty = string.Empty;
			smethod_3(ref reference, ref reference2, ref empty, ref string_3, ref string_4, ref variables_0);
		}
	}

	private const uint uint_0 = 0u;

	private const uint uint_1 = 0u;

	private const uint uint_2 = 34u;

	private const int int_0 = 1073741828;

	private static FileStream fileStream_0 = null;

	private static EventWaitHandle eventWaitHandle_0 = null;

	private static EventWaitHandle eventWaitHandle_1 = null;

	private static int int_1 = 0;

	internal static void smethod_0(ref Variables variables_0)
	{
		Variables variables_ = variables_0;
		variables_0.IsSecohQad.Value = false;
		Class11.smethod_1(bool_0: false, ref variables_0);
		variables_0.IsWinDivert.Value = false;
		Class15.smethod_1(ref variables_0);
		new Thread((ThreadStart)delegate
		{
			smethod_1(ref variables_);
		}).Start();
	}

	internal static void smethod_1(ref Variables variables_0)
	{
		smethod_2(ref variables_0);
	}

	private static void smethod_2(ref Variables variables_0)
	{
		FileLogger logger = variables_0.Logger;
		string message = "Loading TunnelTap...";
		logger.LogMessage(ref message);
		string string_4 = "KMS-Windows ELDI";
		string string_3 = WMINetWorkAdapter.smethod_2(ref string_4, ref variables_0);
		if (string.IsNullOrEmpty(string_3))
		{
			string_4 = "TAP-Windows Adapter V9";
			string_3 = WMINetWorkAdapter.smethod_2(ref string_4, ref variables_0);
		}
		if (string.IsNullOrEmpty(string_3) && variables_0.IntentosTunTap < 8)
		{
			FileLogger logger2 = variables_0.Logger;
			message = "Installing TAP Driver";
			logger2.LogMessage(ref message);
			message = "OpenVPN.cer";
			string[] array = Class2.smethod_0(ref variables_0, ref message, variables_0.DirectorioActual + "\\driver");
			message = array[0] + "\\" + array[1];
			WMINetWorkAdapter.smethod_9(ref message, ref variables_0);
			message = "tap-windows-9.21.0.exe";
			array = Class2.smethod_0(ref variables_0, ref message, variables_0.DirectorioActual + "\\driver");
			ArrayList arrayList_ = new ArrayList();
			arrayList_.Add("/S");
			bool bool_ = true;
			Class3.smethod_1(ref array, ref arrayList_, ref variables_0, ref bool_);
			string_3 = WMINetWorkAdapter.smethod_2(ref string_4, ref variables_0);
			if (string.IsNullOrEmpty(string_3))
			{
				variables_0.IsWinDivert.Value = true;
				variables_0.IsTapDriver.Value = false;
				variables_0.IsSecohQad.Value = false;
				Thread.Sleep(Class2.smethod_2(50, 600));
				HostServer hostServer_ = null;
				Class3.smethod_19(ref variables_0, ref hostServer_);
			}
		}
		string string_0 = variables_0.KmsHostForward.IpAddress;
		string string_1 = string.Empty;
		string[] array2 = string_0.Split(new char[1]
		{
			'.'
		});
		try
		{
			string_0 = $"{array2[0]:D3}.{array2[1]:D3}.{array2[2]:D3}.";
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			variables_0.KmsHostForward.IpAddress = WMINetWorkAdapter.smethod_13();
			string_0 = variables_0.KmsHostForward.IpAddress;
			ProjectData.ClearProjectError();
		}
		string_1 = string_0;
		string_0 += "1";
		string_1 += "0";
		string string_2 = "255.255.255.0";
		try
		{
			ref string string_5 = ref string_3;
			int num = 1;
			if (WMINetWorkAdapter.smethod_1(ref string_5, ref num, ref variables_0))
			{
				ref string string_6 = ref string_3;
				bool bool_ = true;
				WMINetWorkAdapter.smethod_4(ref string_6, ref bool_, ref variables_0);
			}
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception exception_ = ex;
			string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
			FileLogger logger3 = variables_0.Logger;
			message = "Error: " + str;
			logger3.LogMessage(ref message);
			ProjectData.ClearProjectError();
		}
		variables_0.IsTapDriverLoaded = true;
		Variables variables_ = variables_0;
		new Thread((ThreadStart)delegate
		{
			smethod_6(ref string_0, ref string_1, ref string_2, ref string_3, ref variables_);
		}).Start();
		new Thread((ThreadStart)delegate
		{
			ref string string_7 = ref string_0;
			ref string string_8 = ref string_2;
			string string_9 = string.Empty;
			smethod_3(ref string_7, ref string_8, ref string_9, ref string_3, ref string_4, ref variables_);
		}).Start();
	}

	private static void smethod_3(ref string string_0, ref string string_1, ref string string_2, ref string string_3, ref string string_4, ref Variables variables_0)
	{
		if (!string.IsNullOrEmpty(string_3))
		{
			WMINetWorkAdapter.smethod_5(ref string_3, ref string_4, ref string_0, ref string_1, ref string_2, ref variables_0);
			return;
		}
		FileLogger logger = variables_0.Logger;
		string message = "Error: Not Network TAP Found";
		logger.LogMessage(ref message);
		checked
		{
			variables_0.IntentosTunTap++;
			HostServer hostServer_ = null;
			Class3.smethod_19(ref variables_0, ref hostServer_);
		}
	}

	private static void smethod_4(IAsyncResult iasyncResult_0)
	{
		fileStream_0.EndWrite(iasyncResult_0);
		eventWaitHandle_1.Set();
	}

	private static void smethod_5(IAsyncResult iasyncResult_0)
	{
		int_1 = fileStream_0.EndRead(iasyncResult_0);
		eventWaitHandle_0.Set();
	}

	private static void smethod_6(ref string string_0, ref string string_1, ref string string_2, ref string string_3, ref Variables variables_0)
	{
		checked
		{
			try
			{
				FileLogger logger = variables_0.Logger;
				string message = "Starting TunnelTap : " + string_0;
				logger.LogMessage(ref message);
				int val = (int)WMINetWorkAdapter.smethod_10(string_0);
				int val2 = (int)WMINetWorkAdapter.smethod_10(string_1);
				int val3 = (int)WMINetWorkAdapter.smethod_10(string_2);
				SafeFileHandle safeFileHandle = CreateFile(Convert.ToString("\\\\.\\Global\\") + string_3 + ".tap", 3u, 3u, (IntPtr)0, 3u, 1073741828u, IntPtr.Zero);
				IntPtr intPtr = Marshal.AllocHGlobal(4);
				IntPtr intPtr2 = Marshal.AllocHGlobal(12);
				int num = 0;
				Marshal.WriteInt32(intPtr, 1);
				uint uint_ = smethod_7(6u, 0u);
				uint uint_2 = 0u;
				DeviceIoControl(safeFileHandle, uint_, intPtr, 4u, intPtr, 4, ref uint_2, IntPtr.Zero);
				num = (int)uint_2;
				Marshal.WriteInt32(intPtr2, 0, val);
				Marshal.WriteInt32(intPtr2, 4, val2);
				Marshal.WriteInt32(intPtr2, 8, val3);
				uint uint_3 = smethod_7(10u, 0u);
				uint_2 = (uint)num;
				DeviceIoControl(safeFileHandle, uint_3, intPtr2, 12u, intPtr2, 12, ref uint_2, IntPtr.Zero);
				num = (int)uint_2;
				fileStream_0 = new FileStream(safeFileHandle, FileAccess.ReadWrite, 10000, isAsync: true);
				byte[] array = new byte[10001];
				int num2 = default(int);
				int num3 = default(int);
				eventWaitHandle_0 = new EventWaitHandle(initialState: false, EventResetMode.AutoReset);
				eventWaitHandle_1 = new EventWaitHandle(initialState: false, EventResetMode.AutoReset);
				AsyncCallback callback = smethod_5;
				AsyncCallback callback2 = smethod_4;
				while (true)
				{
					fileStream_0.BeginRead(array, 0, 10000, callback, num2);
					eventWaitHandle_0.WaitOne();
					int num4 = 0;
					do
					{
						byte b = array[12 + num4];
						array[12 + num4] = array[16 + num4];
						array[16 + num4] = b;
						num4++;
					}
					while (num4 <= 3);
					fileStream_0.BeginWrite(array, 0, int_1, callback2, num3);
					eventWaitHandle_1.WaitOne();
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				string message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
	}

	private static uint smethod_7(uint uint_3, uint uint_4)
	{
		return smethod_8(34u, uint_3, uint_4, 0u);
	}

	private static uint smethod_8(uint uint_3, uint uint_4, uint uint_5, uint uint_6)
	{
		return (uint_3 << 16) | (uint_6 << 14) | (uint_4 << 2) | uint_5;
	}

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern SafeFileHandle CreateFile(string string_0, uint uint_3, uint uint_4, IntPtr intptr_0, uint uint_5, uint uint_6, IntPtr intptr_1);

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern uint DeviceIoControl(SafeFileHandle safeFileHandle_0, uint uint_3, IntPtr intptr_0, uint uint_4, IntPtr intptr_1, int int_2, ref uint uint_5, IntPtr intptr_2);
}
internal class Class59 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	private Class66 class66_0;

	public Class59(IMessageHandler imessageHandler_1, Class66 class66_1)
	{
		imessageHandler_0 = imessageHandler_1;
		class66_0 = class66_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		byte[] request2 = method_0().method_26();
		return imessageHandler_0.HandleRequest(ref request2);
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}

	private Class65 method_0()
	{
		Class65 @class = new Class65();
		@class.method_1(5);
		@class.method_3(0);
		@class.method_5(Enum1.const_14);
		@class.method_7(Enum0.flag_0 | Enum0.flag_1 | Enum0.flag_4);
		@class.method_9(16u);
		@class.method_11(72);
		@class.method_13(0);
		@class.method_15(2u);
		@class.method_21(class66_0.method_20());
		@class.method_19(5840);
		@class.method_17(5840);
		@class.method_23(1u);
		return @class;
	}
}
internal class Class65 : Class64
{
}
internal class Class64 : Class63
{
	private uint uint_3;

	private List<Class71> list_0;

	public uint method_22()
	{
		return uint_3;
	}

	public void method_23(uint uint_4)
	{
		uint_3 = uint_4;
	}

	public List<Class71> method_24()
	{
		return list_0;
	}

	public void method_25(List<Class71> list_1)
	{
		list_0 = list_1;
	}

	public static Class64 smethod_0(byte[] byte_2)
	{
		MemoryStream input = new MemoryStream(byte_2);
		BinaryReader binaryReader = new BinaryReader(input);
		Class64 @class = new Class64();
		@class.method_1(binaryReader.ReadByte());
		@class.method_3(binaryReader.ReadByte());
		@class.method_5((Enum1)binaryReader.ReadByte());
		@class.method_7((Enum0)binaryReader.ReadByte());
		@class.method_9(binaryReader.ReadUInt32());
		@class.method_11(binaryReader.ReadUInt16());
		@class.method_13(binaryReader.ReadUInt16());
		@class.method_15(binaryReader.ReadUInt32());
		@class.method_17(binaryReader.ReadUInt16());
		@class.method_19(binaryReader.ReadUInt16());
		@class.method_21(binaryReader.ReadUInt32());
		@class.method_23(binaryReader.ReadUInt32());
		@class.method_25(new List<Class71>());
		checked
		{
			int num = (int)(unchecked((long)@class.method_22()) - 1L);
			for (int i = 0; i <= num; i++)
			{
				Class71 class2 = new Class71();
				class2.method_1((ushort)binaryReader.ReadInt16());
				class2.method_3((ushort)binaryReader.ReadInt16());
				class2.method_5(new Guid(binaryReader.ReadBytes(16)));
				class2.method_7((ushort)binaryReader.ReadInt16());
				class2.method_9((ushort)binaryReader.ReadInt16());
				class2.method_11(new Guid(binaryReader.ReadBytes(16)));
				class2.method_13((uint)binaryReader.ReadInt32());
				@class.method_24().Add(class2);
			}
			return @class;
		}
	}

	public byte[] method_26()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_2());
		binaryWriter.Write((byte)method_4());
		binaryWriter.Write((byte)method_6());
		binaryWriter.Write(method_8());
		binaryWriter.Write(method_10());
		binaryWriter.Write(method_12());
		binaryWriter.Write(method_14());
		binaryWriter.Write(method_16());
		binaryWriter.Write(method_18());
		binaryWriter.Write(method_20());
		binaryWriter.Write(method_22());
		checked
		{
			int num = (int)(unchecked((long)method_22()) - 1L);
			for (int i = 0; i <= num; i++)
			{
				Class71 @class = method_24()[i];
				binaryWriter.Write(@class.method_0());
				binaryWriter.Write(@class.method_2());
				binaryWriter.Write(@class.method_4().ToByteArray());
				binaryWriter.Write(@class.method_6());
				binaryWriter.Write(@class.method_8());
				binaryWriter.Write(@class.method_10().ToByteArray());
				binaryWriter.Write(@class.method_12());
			}
			binaryWriter.Flush();
			memoryStream.Position = 0L;
			return memoryStream.ToArray();
		}
	}
}
internal class Class67 : Class66
{
	public static Class67 smethod_1(byte[] byte_3)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class67 @class = new Class67();
		@class.method_1(binaryReader.ReadByte());
		@class.method_3(binaryReader.ReadByte());
		@class.method_5((Enum1)binaryReader.ReadByte());
		@class.method_7((Enum0)binaryReader.ReadByte());
		@class.method_9(binaryReader.ReadUInt32());
		@class.method_11(binaryReader.ReadUInt16());
		@class.method_13(binaryReader.ReadUInt16());
		@class.method_15(binaryReader.ReadUInt32());
		@class.method_17(binaryReader.ReadUInt16());
		@class.method_19(binaryReader.ReadUInt16());
		@class.method_21(binaryReader.ReadUInt32());
		checked
		{
			@class.method_23((ushort)binaryReader.ReadInt16());
			if (@class.method_22() > 0)
			{
				@class.method_25(binaryReader.ReadBytes(@class.method_22()));
				binaryReader.ReadByte();
			}
			else
			{
				binaryReader.ReadByte();
				binaryReader.ReadByte();
			}
			@class.method_27(binaryReader.ReadUInt32());
			@class.method_29(new List<Class72>());
			int num = (int)(unchecked((long)@class.method_26()) - 1L);
			for (int i = 0; i <= num; i++)
			{
				Class72 class2 = new Class72();
				class2.method_1((ushort)binaryReader.ReadInt16());
				class2.method_3((ushort)binaryReader.ReadInt16());
				class2.method_5(new Guid(binaryReader.ReadBytes(16)));
				class2.method_7((uint)binaryReader.ReadInt32());
				@class.method_28().Add(class2);
			}
			return @class;
		}
	}
}
internal class Class66 : Class63
{
	private ushort ushort_4;

	private byte[] byte_2;

	private uint uint_3;

	private List<Class72> list_0;

	public ushort method_22()
	{
		return ushort_4;
	}

	public void method_23(ushort ushort_5)
	{
		ushort_4 = ushort_5;
	}

	public byte[] method_24()
	{
		return byte_2;
	}

	public void method_25(byte[] byte_3)
	{
		byte_2 = byte_3;
	}

	public uint method_26()
	{
		return uint_3;
	}

	public void method_27(uint uint_4)
	{
		uint_3 = uint_4;
	}

	public List<Class72> method_28()
	{
		return list_0;
	}

	public void method_29(List<Class72> list_1)
	{
		list_0 = list_1;
	}

	public byte[] method_30()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_2());
		binaryWriter.Write((byte)method_4());
		binaryWriter.Write((byte)method_6());
		binaryWriter.Write(method_8());
		binaryWriter.Write(method_10());
		binaryWriter.Write(method_12());
		binaryWriter.Write(method_14());
		binaryWriter.Write(method_16());
		binaryWriter.Write(method_18());
		binaryWriter.Write(method_20());
		binaryWriter.Write(method_22());
		binaryWriter.Write(method_24());
		binaryWriter.Write((byte)0);
		binaryWriter.Write(method_26());
		foreach (Class72 item in method_28())
		{
			binaryWriter.Write(item.method_0());
			binaryWriter.Write(item.method_2());
			binaryWriter.Write(item.method_4().ToByteArray());
			binaryWriter.Write(item.method_6());
		}
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public static Class66 smethod_0(byte[] byte_3)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class66 @class = new Class66();
		@class.method_1(binaryReader.ReadByte());
		@class.method_3(binaryReader.ReadByte());
		@class.method_5((Enum1)binaryReader.ReadByte());
		@class.method_7((Enum0)binaryReader.ReadByte());
		@class.method_9(binaryReader.ReadUInt32());
		@class.method_11(binaryReader.ReadUInt16());
		@class.method_13(binaryReader.ReadUInt16());
		@class.method_15(binaryReader.ReadUInt32());
		@class.method_17(binaryReader.ReadUInt16());
		@class.method_19(binaryReader.ReadUInt16());
		@class.method_21(binaryReader.ReadUInt32());
		checked
		{
			@class.method_23((ushort)binaryReader.ReadInt16());
			@class.method_25(binaryReader.ReadBytes(@class.method_22()));
			binaryReader.ReadByte();
			@class.method_27(binaryReader.ReadUInt32());
			@class.method_29(new List<Class72>());
			int num = (int)(unchecked((long)@class.method_26()) - 1L);
			for (int i = 0; i <= num; i++)
			{
				Class72 class2 = new Class72();
				class2.method_1((ushort)binaryReader.ReadInt16());
				class2.method_3((ushort)binaryReader.ReadInt16());
				class2.method_5(new Guid(binaryReader.ReadBytes(16)));
				class2.method_7((uint)binaryReader.ReadInt32());
				@class.method_28().Add(class2);
			}
			return @class;
		}
	}
}
internal class Class60 : IMessageHandler
{
	private IKMSServerSettings ikmsserverSettings_0;

	public Class60(IKMSServerSettings ikmsserverSettings_1)
	{
		ikmsserverSettings_0 = ikmsserverSettings_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		Class64 request2 = Class64.smethod_0(request);
		return new Class70(ikmsserverSettings_0).AutoPico.KMSEmulator.IMessageHandler<Class64,Class66>.HandleRequest(ref request2).method_30();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
internal class Class61 : IMessageHandler
{
	private IMessageHandler imessageHandler_0;

	public Class61(IMessageHandler imessageHandler_1)
	{
		imessageHandler_0 = imessageHandler_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		byte[] request2 = smethod_0().method_26();
		return imessageHandler_0.HandleRequest(ref request2);
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}

	private static Class64 smethod_0()
	{
		Class64 @class = new Class64();
		@class.method_1(5);
		@class.method_3(0);
		@class.method_5(Enum1.const_11);
		@class.method_7(Enum0.flag_0 | Enum0.flag_1 | Enum0.flag_4);
		@class.method_9(16u);
		@class.method_11(160);
		@class.method_13(0);
		@class.method_15(2u);
		@class.method_21(0u);
		@class.method_19(5840);
		@class.method_17(5840);
		@class.method_23(3u);
		@class.method_25(new List<Class71>());
		List<Class71> list = @class.method_24();
		Class71 class2 = new Class71();
		class2.method_1(0);
		class2.method_3(1);
		class2.method_5(new Guid("51c82175-844e-4750-b0d8-ec255555bc06"));
		class2.method_7(1);
		class2.method_9(0);
		class2.method_11(new Guid("8a885d04-1ceb-11c9-9fe8-08002b104860"));
		class2.method_13(2u);
		list.Add(class2);
		List<Class71> list2 = @class.method_24();
		Class71 class3 = new Class71();
		class3.method_1(1);
		class3.method_3(1);
		class3.method_5(new Guid("51c82175-844e-4750-b0d8-ec255555bc06"));
		class3.method_7(1);
		class3.method_9(0);
		class3.method_11(new Guid("71710533-beba-4937-8319-b5dbef9ccc36"));
		class3.method_13(1u);
		list2.Add(class3);
		List<Class71> list3 = @class.method_24();
		Class71 class4 = new Class71();
		class4.method_1(2);
		class4.method_3(1);
		class4.method_5(new Guid("51c82175-844e-4750-b0d8-ec255555bc06"));
		class4.method_7(1);
		class4.method_9(0);
		class4.method_11(new Guid("6cb71c2c-9812-4540-0300-000000000000"));
		class4.method_13(1u);
		list3.Add(class4);
		return @class;
	}
}
internal class Class63 : Class62
{
	private ushort ushort_2;

	private ushort ushort_3;

	private uint uint_2;

	public ushort method_16()
	{
		return ushort_2;
	}

	public void method_17(ushort ushort_4)
	{
		ushort_2 = ushort_4;
	}

	public ushort method_18()
	{
		return ushort_3;
	}

	public void method_19(ushort ushort_4)
	{
		ushort_3 = ushort_4;
	}

	public uint method_20()
	{
		return uint_2;
	}

	public void method_21(uint uint_3)
	{
		uint_2 = uint_3;
	}
}
internal class Class62
{
	private byte byte_0;

	private byte byte_1;

	private Enum1 enum1_0;

	private Enum0 enum0_0;

	private uint uint_0;

	private ushort ushort_0;

	private ushort ushort_1;

	private uint uint_1;

	public byte method_0()
	{
		return byte_0;
	}

	public void method_1(byte byte_2)
	{
		byte_0 = byte_2;
	}

	public byte method_2()
	{
		return byte_1;
	}

	public void method_3(byte byte_2)
	{
		byte_1 = byte_2;
	}

	public Enum1 method_4()
	{
		return enum1_0;
	}

	public void method_5(Enum1 enum1_1)
	{
		enum1_0 = enum1_1;
	}

	public Enum0 method_6()
	{
		return enum0_0;
	}

	public void method_7(Enum0 enum0_1)
	{
		enum0_0 = enum0_1;
	}

	public uint method_8()
	{
		return uint_0;
	}

	public void method_9(uint uint_2)
	{
		uint_0 = uint_2;
	}

	public ushort method_10()
	{
		return ushort_0;
	}

	public void method_11(ushort ushort_2)
	{
		ushort_0 = ushort_2;
	}

	public ushort method_12()
	{
		return ushort_1;
	}

	public void method_13(ushort ushort_2)
	{
		ushort_1 = ushort_2;
	}

	public uint method_14()
	{
		return uint_1;
	}

	public void method_15(uint uint_2)
	{
		uint_1 = uint_2;
	}
}
internal class Class70 : IMessageHandler<Class64, Class66>
{
	private IKMSServerSettings ikmsserverSettings_0;

	private static uint uint_0;

	public Class70(IKMSServerSettings ikmsserverSettings_1)
	{
		ikmsserverSettings_0 = ikmsserverSettings_1;
	}

	Class66 IMessageHandler<Class64, Class66>.HandleRequest(ref Class64 request)
	{
		checked
		{
			uint_0 = (uint)(unchecked((long)uint_0) + 1L);
			Class66 @class = new Class66();
			@class.method_1(request.method_0());
			@class.method_3(request.method_2());
			@class.method_5(Enum1.const_12);
			@class.method_7(Enum0.flag_0 | Enum0.flag_1 | Enum0.flag_4);
			@class.method_9(request.method_8());
			@class.method_11(108);
			@class.method_13(request.method_12());
			@class.method_15(request.method_14());
			@class.method_17(request.method_16());
			@class.method_19(request.method_18());
			@class.method_21(uint_0);
			byte[] bytes = Encoding.ASCII.GetBytes(ikmsserverSettings_0.Port + "\0");
			@class.method_23((ushort)bytes.Length);
			@class.method_25(bytes);
			@class.method_27(3u);
			@class.method_29(new List<Class72>());
			List<Class72> list = @class.method_28();
			Class72 class2 = new Class72();
			class2.method_1(0);
			class2.method_3(0);
			class2.method_5(new Guid("8a885d04-1ceb-11c9-9fe8-08002b104860"));
			class2.method_7(2u);
			list.Add(class2);
			List<Class72> list2 = @class.method_28();
			Class72 class3 = new Class72();
			class3.method_1(2);
			class3.method_3(2);
			class3.method_5(Guid.Empty);
			class3.method_7(0u);
			list2.Add(class3);
			List<Class72> list3 = @class.method_28();
			Class72 class4 = new Class72();
			class4.method_1(3);
			class4.method_3(3);
			class4.method_5(Guid.Empty);
			class4.method_7(0u);
			list3.Add(class4);
			return @class;
		}
	}
}
namespace AutoPico.KMSEmulator
{
	public interface IMessageHandler<REQ, RESP>
	{
		RESP HandleRequest(ref REQ request);
	}
}
internal class Class71
{
	private ushort ushort_0;

	private ushort ushort_1;

	private Guid guid_0;

	private ushort ushort_2;

	private ushort ushort_3;

	private Guid guid_1;

	private uint uint_0;

	public ushort method_0()
	{
		return ushort_0;
	}

	public void method_1(ushort ushort_4)
	{
		ushort_0 = ushort_4;
	}

	public ushort method_2()
	{
		return ushort_1;
	}

	public void method_3(ushort ushort_4)
	{
		ushort_1 = ushort_4;
	}

	public Guid method_4()
	{
		return guid_0;
	}

	public void method_5(Guid guid_2)
	{
		guid_0 = guid_2;
	}

	public ushort method_6()
	{
		return ushort_2;
	}

	public void method_7(ushort ushort_4)
	{
		ushort_2 = ushort_4;
	}

	public ushort method_8()
	{
		return ushort_3;
	}

	public void method_9(ushort ushort_4)
	{
		ushort_3 = ushort_4;
	}

	public Guid method_10()
	{
		return guid_1;
	}

	public void method_11(Guid guid_2)
	{
		guid_1 = guid_2;
	}

	public uint method_12()
	{
		return uint_0;
	}

	public void method_13(uint uint_1)
	{
		uint_0 = uint_1;
	}
}
internal class Class72
{
	private ushort ushort_0;

	private ushort ushort_1;

	private Guid guid_0;

	private uint uint_0;

	public ushort method_0()
	{
		return ushort_0;
	}

	public void method_1(ushort ushort_2)
	{
		ushort_0 = ushort_2;
	}

	public ushort method_2()
	{
		return ushort_1;
	}

	public void method_3(ushort ushort_2)
	{
		ushort_1 = ushort_2;
	}

	public Guid method_4()
	{
		return guid_0;
	}

	public void method_5(Guid guid_1)
	{
		guid_0 = guid_1;
	}

	public uint method_6()
	{
		return uint_0;
	}

	public void method_7(uint uint_1)
	{
		uint_0 = uint_1;
	}
}
[Flags]
internal enum Enum0 : byte
{
	flag_0 = 0x1,
	flag_1 = 0x2,
	flag_2 = 0x4,
	flag_3 = 0x8,
	flag_4 = 0x10,
	flag_5 = 0x20,
	flag_6 = 0x40,
	flag_7 = 0x80
}
internal enum Enum1 : byte
{
	const_0 = 0,
	const_1 = 1,
	const_2 = 2,
	const_3 = 3,
	const_4 = 4,
	const_5 = 5,
	const_6 = 6,
	const_7 = 7,
	const_8 = 8,
	const_9 = 9,
	const_10 = 10,
	const_11 = 11,
	const_12 = 12,
	const_13 = 13,
	const_14 = 14,
	const_15 = 0xF,
	const_16 = 17,
	const_17 = 18,
	const_18 = 19
}
internal class Class73 : IMessageHandler
{
	private readonly ILogger ilogger_0;

	private IMessageHandler imessageHandler_0;

	private IMessageHandler method_0()
	{
		return imessageHandler_0;
	}

	private void method_1(IMessageHandler imessageHandler_1)
	{
		imessageHandler_0 = imessageHandler_1;
	}

	public Class73(IMessageHandler imessageHandler_1, ILogger ilogger_1)
	{
		method_1(imessageHandler_1);
		ilogger_0 = ilogger_1;
	}

	byte[] IMessageHandler.HandleRequest(ref byte[] request)
	{
		Class68 request2 = Class68.smethod_0(request);
		return new Class74(method_0(), ilogger_0).AutoPico.KMSEmulator.IMessageHandler<Class68,Class69>.HandleRequest(ref request2).method_26();
	}

	KMSResponse IMessageHandler.HandleRequest(ref KMSRequest request)
	{
		return null;
	}
}
internal class Class68 : Class62
{
	private uint uint_2;

	private ushort ushort_2;

	private ushort ushort_3;

	private byte[] byte_2;

	public uint method_16()
	{
		return uint_2;
	}

	public void method_17(uint uint_3)
	{
		uint_2 = uint_3;
	}

	public ushort method_18()
	{
		return ushort_2;
	}

	public void method_19(ushort ushort_4)
	{
		ushort_2 = ushort_4;
	}

	public ushort method_20()
	{
		return ushort_3;
	}

	public void method_21(ushort ushort_4)
	{
		ushort_3 = ushort_4;
	}

	public byte[] method_22()
	{
		return byte_2;
	}

	public void method_23(byte[] byte_3)
	{
		byte_2 = byte_3;
	}

	public static Class68 smethod_0(byte[] byte_3)
	{
		MemoryStream input = new MemoryStream(byte_3);
		BinaryReader binaryReader = new BinaryReader(input);
		Class68 @class = new Class68();
		@class.method_1(binaryReader.ReadByte());
		@class.method_3(binaryReader.ReadByte());
		@class.method_5((Enum1)binaryReader.ReadByte());
		@class.method_7((Enum0)binaryReader.ReadByte());
		@class.method_9(binaryReader.ReadUInt32());
		@class.method_11(binaryReader.ReadUInt16());
		@class.method_13(binaryReader.ReadUInt16());
		@class.method_15(binaryReader.ReadUInt32());
		@class.method_17(binaryReader.ReadUInt32());
		@class.method_19(binaryReader.ReadUInt16());
		@class.method_21(binaryReader.ReadUInt16());
		@class.method_23(binaryReader.ReadBytes(checked((int)@class.method_16())));
		return @class;
	}

	public byte[] method_24()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_2());
		binaryWriter.Write((byte)method_4());
		binaryWriter.Write((byte)method_6());
		binaryWriter.Write(method_8());
		binaryWriter.Write(method_10());
		binaryWriter.Write(method_12());
		binaryWriter.Write(method_14());
		binaryWriter.Write(method_16());
		binaryWriter.Write(method_18());
		binaryWriter.Write(method_20());
		binaryWriter.Write(method_22());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}
}
internal class Class74 : IMessageHandler<Class68, Class69>
{
	private readonly ILogger ilogger_0;

	private IMessageHandler imessageHandler_0;

	private IMessageHandler method_0()
	{
		return imessageHandler_0;
	}

	private void method_1(IMessageHandler imessageHandler_1)
	{
		imessageHandler_0 = imessageHandler_1;
	}

	public Class74(IMessageHandler imessageHandler_1, ILogger ilogger_1)
	{
		method_1(imessageHandler_1);
		ilogger_0 = ilogger_1;
	}

	Class69 IMessageHandler<Class68, Class69>.HandleRequest(ref Class68 request)
	{
		byte[] request2 = request.method_22();
		byte[] byte_ = method_0().HandleRequest(ref request2);
		Class69 @class = new Class69();
		@class.method_25(byte_);
		int num = @class.method_24().Length;
		@class.method_1(request.method_0());
		@class.method_3(request.method_2());
		@class.method_5(Enum1.const_2);
		@class.method_7(Enum0.flag_0 | Enum0.flag_1);
		@class.method_9(request.method_8());
		checked
		{
			@class.method_11((ushort)(24 + num));
			@class.method_13(request.method_12());
			@class.method_15(request.method_14());
			@class.method_17((uint)num);
			@class.method_19(request.method_18());
			@class.method_21(0);
			@class.method_23((byte)request.method_20());
			return @class;
		}
	}
}
internal class Class69 : Class62
{
	private uint uint_2;

	private ushort ushort_2;

	private byte byte_2;

	private byte byte_3;

	private byte[] byte_4;

	public uint method_16()
	{
		return uint_2;
	}

	public void method_17(uint uint_3)
	{
		uint_2 = uint_3;
	}

	public ushort method_18()
	{
		return ushort_2;
	}

	public void method_19(ushort ushort_3)
	{
		ushort_2 = ushort_3;
	}

	public byte method_20()
	{
		return byte_2;
	}

	public void method_21(byte byte_5)
	{
		byte_2 = byte_5;
	}

	public byte method_22()
	{
		return byte_3;
	}

	public void method_23(byte byte_5)
	{
		byte_3 = byte_5;
	}

	public byte[] method_24()
	{
		return byte_4;
	}

	public void method_25(byte[] byte_5)
	{
		byte_4 = byte_5;
	}

	public byte[] method_26()
	{
		MemoryStream memoryStream = new MemoryStream();
		BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
		binaryWriter.Write(method_0());
		binaryWriter.Write(method_2());
		binaryWriter.Write((byte)method_4());
		binaryWriter.Write((byte)method_6());
		binaryWriter.Write(method_8());
		binaryWriter.Write(method_10());
		binaryWriter.Write(method_12());
		binaryWriter.Write(method_14());
		binaryWriter.Write(method_16());
		binaryWriter.Write(method_18());
		binaryWriter.Write(method_20());
		binaryWriter.Write(method_22());
		binaryWriter.Write(method_24());
		binaryWriter.Flush();
		memoryStream.Position = 0L;
		return memoryStream.ToArray();
	}

	public static Class69 smethod_0(byte[] byte_5)
	{
		MemoryStream input = new MemoryStream(byte_5);
		BinaryReader binaryReader = new BinaryReader(input);
		Class69 @class = new Class69();
		@class.method_1(binaryReader.ReadByte());
		@class.method_3(binaryReader.ReadByte());
		@class.method_5((Enum1)binaryReader.ReadByte());
		@class.method_7((Enum0)binaryReader.ReadByte());
		@class.method_9(binaryReader.ReadUInt32());
		@class.method_11(binaryReader.ReadUInt16());
		@class.method_13(binaryReader.ReadUInt16());
		@class.method_15(binaryReader.ReadUInt32());
		@class.method_17(binaryReader.ReadUInt32());
		@class.method_19(binaryReader.ReadUInt16());
		@class.method_21(binaryReader.ReadByte());
		@class.method_23(binaryReader.ReadByte());
		@class.method_25(binaryReader.ReadBytes(checked((int)@class.method_16())));
		return @class;
	}
}
[StandardModule]
internal sealed class Class75
{
	private static Variables variables_0 = null;

	[STAThread]
	public static void Main()
	{
		smethod_0();
		variables_0.IsSecohQad.Value = true;
		int int_ = Conversions.ToInteger("1688");
		string string_ = "NETSTAT.EXE";
		string[] string_2 = Class2.smethod_0(ref variables_0, ref string_);
		Class3.smethod_2(ref int_, ref string_2, ref variables_0);
		Class3.smethod_8(ref variables_0);
		if (!variables_0.IsSilent)
		{
			Class3.smethod_9(ref variables_0);
		}
		FileLogger logger = variables_0.Logger;
		string_ = "Time Start: " + variables_0.Tiempo;
		logger.LogMessage(ref string_);
		Class3.smethod_0(ref variables_0);
	}

	private static void smethod_0()
	{
		variables_0 = new Variables();
		variables_0.SystemRoot = Environment.GetEnvironmentVariable("SystemRoot");
	}
}
[StandardModule]
[CompilerGenerated]
[HideModuleName]
[DebuggerNonUserCode]
internal sealed class Class76
{
	internal static MySettings smethod_0()
	{
		return MySettings.Default;
	}
}
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("MyTemplate", "11.0.0.0")]
internal class Class77 : ConsoleApplicationBase
{
	public Class77()
		: this()
	{
	}
}
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("MyTemplate", "11.0.0.0")]
internal class Class78 : Computer
{
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DebuggerHidden]
	public Class78()
		: this()
	{
	}
}
[HideModuleName]
[StandardModule]
[GeneratedCode("MyTemplate", "11.0.0.0")]
internal sealed class Class79
{
	[EditorBrowsable(EditorBrowsableState.Never)]
	[MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
	internal sealed class Class80
	{
		[ThreadStatic]
		private static Hashtable hashtable_0;

		[DebuggerHidden]
		private static T smethod_0<T>(T gparam_0) where T : Form, new()
		{
			if (gparam_0 != null && !((Control)gparam_0).get_IsDisposed())
			{
				return gparam_0;
			}
			if (hashtable_0 != null)
			{
				if (hashtable_0.ContainsKey(typeof(T)))
				{
					throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate", new string[0]));
				}
			}
			else
			{
				hashtable_0 = new Hashtable();
			}
			hashtable_0.Add(typeof(T), null);
			TargetInvocationException ex2 = default(TargetInvocationException);
			try
			{
				return new T();
			}
			catch (TargetInvocationException ex) when (((Func<bool>)delegate
			{
				// Could not convert BlockContainer to single expression
				ProjectData.SetProjectError((Exception)ex);
				ex2 = ex;
				return ex2.InnerException != null;
			}).Invoke())
			{
				throw new InvalidOperationException(Utils.GetResourceString("WinForms_SeeInnerException", new string[1]
				{
					ex2.InnerException!.Message
				}), ex2.InnerException);
			}
			finally
			{
				hashtable_0.Remove(typeof(T));
			}
		}

		[DebuggerHidden]
		private void method_0<T>(ref T gparam_0) where T : Form
		{
			((Component)gparam_0).Dispose();
			gparam_0 = default(T);
		}

		[DebuggerHidden]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public Class80()
		{
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		bool object.Equals(object object_0)
		{
			return base.Equals(RuntimeHelpers.GetObjectValue(object_0));
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		int object.GetHashCode()
		{
			return base.GetHashCode();
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		internal Type method_1()
		{
			return typeof(Class80);
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		string object.ToString()
		{
			return base.ToString();
		}
	}

	[MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal sealed class Class81
	{
		[DebuggerHidden]
		[EditorBrowsable(EditorBrowsableState.Never)]
		bool object.Equals(object object_0)
		{
			return base.Equals(RuntimeHelpers.GetObjectValue(object_0));
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DebuggerHidden]
		int object.GetHashCode()
		{
			return base.GetHashCode();
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DebuggerHidden]
		internal Type method_0()
		{
			return typeof(Class81);
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DebuggerHidden]
		string object.ToString()
		{
			return base.ToString();
		}

		[DebuggerHidden]
		private static T smethod_0<T>(T gparam_0) where T : new()
		{
			if (gparam_0 == null)
			{
				return new T();
			}
			return gparam_0;
		}

		[DebuggerHidden]
		private void method_1<T>(ref T gparam_0)
		{
			gparam_0 = default(T);
		}

		[DebuggerHidden]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public Class81()
		{
		}
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	[ComVisible(false)]
	internal sealed class Class82<T> where T : new()
	{
		[ThreadStatic]
		[CompilerGenerated]
		private static T gparam_0;

		[DebuggerHidden]
		internal T method_0()
		{
			if (gparam_0 == null)
			{
				gparam_0 = new T();
			}
			return gparam_0;
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DebuggerHidden]
		public Class82()
		{
		}
	}

	private static readonly Class82<Class78> class82_0 = new Class82<Class78>();

	private static readonly Class82<Class77> class82_1 = new Class82<Class77>();

	private static readonly Class82<User> class82_2 = new Class82<User>();

	private static Class82<Class80> class82_3 = new Class82<Class80>();

	private static readonly Class82<Class81> class82_4 = new Class82<Class81>();

	[DebuggerHidden]
	internal static Class78 smethod_0()
	{
		return class82_0.method_0();
	}

	[DebuggerHidden]
	internal static Class77 smethod_1()
	{
		return class82_1.method_0();
	}

	[DebuggerHidden]
	internal static User smethod_2()
	{
		return class82_2.method_0();
	}

	[DebuggerHidden]
	internal static Class80 smethod_3()
	{
		return class82_3.method_0();
	}

	[DebuggerHidden]
	internal static Class81 smethod_4()
	{
		return class82_4.method_0();
	}
}
[CompilerGenerated]
internal sealed class Class83
{
	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 16)]
	private struct Struct1
	{
	}

	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 32)]
	private struct Struct2
	{
	}

	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 48)]
	private struct Struct3
	{
	}

	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 176)]
	private struct Struct4
	{
	}

	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 256)]
	private struct Struct5
	{
	}

	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 24576)]
	private struct Struct6
	{
	}

	internal static readonly Struct5 struct5_0/* Not supported: data

	internal static readonly Struct2 struct2_0/* Not supported: data(30 00 31 00 32 00 33 00 34 00 35 00 36 00 37 00 38 00 39 00 41 00 42 00 43 00 44 00 45 00 46 00) */;

	internal static readonly Struct3 struct3_0/* Not supported: data(42 00 43 00 44 00 46 00 47 00 48 00 4A 00 4B 00 4D 00 50 00 51 00 52 00 54 00 56 00 57 00 58 00 59 00 32 00 33 00 34 00 36 00 37 00 38 00 39 00) */;

	internal static readonly long long_0/* Not supported: data(36 4F 46 3A 88 63 D3 5F) */;

	internal static readonly Struct2 struct2_1/* Not supported: data(FE 31 98 75 FB 48 84 86 9C F3 F1 CE 99 A8 90 64 AB 57 1F CA 47 04 50 58 30 24 E2 14 62 87 79 A0) */;

	internal static readonly Struct5 struct5_1/* Not supported: data

	internal static readonly long long_1/* Not supported: data(3A 1C 04 96 00 B6 00 76) */;

	internal static readonly long long_2/* Not supported: data(04 11 73 80 38 DD 77 FC) */;

	internal static readonly Struct6 struct6_0/* Not supported: data

	internal static readonly Struct4 struct4_0/* Not supported: data(A9 4A 41 95 E2 01 43 2D 9B CB 46 04 05 D8 4A 21 C9 9C BC FE 2B 9D FF D3 B0 56 B9 D7 B5 8E F3 F6 D2 91 FE 2B F9 0C 01 F8 49 5A B8 2F FC D4 4B D9 9E 22 CB 9B 67 2E CA 63 2E 74 72 4C D2 A0 39 95 05 30 E1 2E 11 1E 2B 4D 3F 6A 59 01 ED CA 60 94 12 E0 C3 7B 03 FE E8 36 3C 94 B1 37 D1 5E D1 A3 63 DE C9 45 69 20 21 73 55 B4 90 44 84 EA 41 E7 AD 5D 5D 1A C4 7D 7C 69 91 C9 EC 2D 15 23 AD CA EF C8 29 43 CF B5 55 2A 5E 7C B9 07 4B 5F 14 CD DF 32 94 F0 10 87 C1 DA 4E FB 78 DD 05 A4 6C 10 A0 62 5E 9B B0 E5 9F 41 FE 1E E7 9C FB BA 8B 8C) */;

	internal static readonly Struct1 struct1_0/* Not supported: data(CD 7E 79 6F 2A B2 5D CB 55 FF C8 EF 83 64 C4 70) */;

	internal static uint smethod_0(string string_0)
	{
		uint num = 2166136261u;
		if (string_0 != null)
		{
			for (int i = 0; i < string_0.Length; i++)
			{
				num = (string_0[i] ^ num) * 16777619;
			}
		}
		return num;
	}
}
namespace AutoPico.Activador
{
	public class Backup
	{
		internal static void smethod_0(ref bool bool_0, ref Variables variables_0)
		{
			string text = variables_0.DirectorioBackupTokens + "\\Windows";
			string text2 = variables_0.DirectorioBackupTokens + "\\Office";
			string string_ = variables_0.DirectorioBackupTokens + "\\Keys.txt";
			try
			{
				FileSystemProxy fileSystem = ((ServerComputer)Class79.smethod_0()).get_FileSystem();
				if (!fileSystem.DirectoryExists(variables_0.DirectorioBackupTokens))
				{
					fileSystem.CreateDirectory(variables_0.DirectorioBackupTokens);
					goto IL_0068;
				}
				if (bool_0)
				{
					goto IL_0068;
				}
				goto end_IL_0036;
				IL_0068:
				string text3 = string.Empty;
				string text4 = string.Empty;
				string text5 = string.Empty;
				string text6 = string.Empty;
				FileLogger logger = variables_0.Logger;
				string message = "Making tokens backup...";
				logger.LogMessage(ref message);
				message = "sppsvc";
				bool bool_ = false;
				bool bool_2 = true;
				Class2.smethod_1(ref message, ref bool_, ref variables_0, ref bool_2);
				message = "osppsvc";
				bool_2 = false;
				bool_ = true;
				Class2.smethod_1(ref message, ref bool_2, ref variables_0, ref bool_);
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						if (variables_0.IsServer)
						{
							text3 = Environment.GetEnvironmentVariable("SystemRoot") + "\\Sysnative\\spp\\store";
							text5 = Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
						}
						else
						{
							text3 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\spp\\store";
							text5 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
						}
						text4 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
						text6 = Environment.GetEnvironmentVariable("ProgramFiles") + "\\Common Files\\Microsoft Shared\\OFFICE15\\Office Setup Controller\\pkeyconfig-office.xrm-ms";
					}
					else if (variables_0.IsWindows7)
					{
						text3 = Environment.GetEnvironmentVariable("SystemRoot") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareProtectionPlatform";
						text4 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
						text5 = ((!variables_0.IsServer) ? (Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms") : (Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms"));
						text6 = Environment.GetEnvironmentVariable("ProgramFiles") + "\\Common Files\\Microsoft Shared\\OFFICE15\\Office Setup Controller\\pkeyconfig-office.xrm-ms";
					}
					else if (variables_0.IsWindowsVista)
					{
						text3 = Environment.GetEnvironmentVariable("SystemRoot") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareLicensing";
						text4 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
						text5 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Licensingpkeyconfig\\pkeyconfig.xrm-ms";
					}
				}
				else
				{
					if (variables_0.IsServer)
					{
						text3 = Environment.GetEnvironmentVariable("SystemRoot") + "\\Sysnative\\spp\\store\\2.0";
						text5 = Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
					}
					else
					{
						text3 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\spp\\store\\2.0";
						text5 = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
					}
					text4 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
					text6 = Environment.GetEnvironmentVariable("ProgramFiles") + "\\Common Files\\Microsoft Shared\\OFFICE15\\Office Setup Controller\\pkeyconfig-office.xrm-ms";
				}
				FileLogger logger2 = variables_0.Logger;
				message = "Taking backup of: " + text3 + " " + text4;
				logger2.LogMessage(ref message);
				try
				{
					if (!string.IsNullOrEmpty(text3) && fileSystem.DirectoryExists(text3))
					{
						if (!fileSystem.DirectoryExists(text))
						{
							fileSystem.CreateDirectory(text);
						}
						fileSystem.CopyDirectory(text3, text);
					}
					if (!string.IsNullOrEmpty(text5) && fileSystem.FileExists(text5))
					{
						File.Copy(text5, text + "\\pkeyconfig.xrm-ms", true);
					}
					if (!string.IsNullOrEmpty(text4) && fileSystem.DirectoryExists(text4))
					{
						if (!fileSystem.DirectoryExists(text2))
						{
							fileSystem.CreateDirectory(text2);
						}
						fileSystem.CopyDirectory(text4, text2);
					}
					if (!string.IsNullOrEmpty(text6) && fileSystem.FileExists(text6))
					{
						if (!fileSystem.DirectoryExists(text2))
						{
							fileSystem.CreateDirectory(text2);
						}
						File.Copy(text6, text2 + "\\pkeyconfig-office.xrm-ms", true);
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger3 = variables_0.Logger;
					message = "Error: " + str;
					logger3.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
				smethod_3(ref string_, ref variables_0);
				FileLogger logger4 = variables_0.Logger;
				message = "Backup made in: " + variables_0.DirectorioBackupTokens;
				logger4.LogMessage(ref message);
				Class3.smethod_24(ref variables_0, ref variables_0.AudioTransfer);
				fileSystem = null;
				end_IL_0036:;
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger5 = variables_0.Logger;
				string message = "Error: " + str2;
				logger5.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		internal static void smethod_1(ref Variables variables_0)
		{
			string string_ = variables_0.DirectorioBackupTokens + "\\Windows";
			string text = variables_0.DirectorioBackupTokens + "\\Office";
			_ = variables_0.DirectorioBackupTokens + "\\Keys.txt";
			try
			{
				FileSystemProxy fileSystem = ((ServerComputer)Class79.smethod_0()).get_FileSystem();
				string string_2 = string.Empty;
				string string_3 = string.Empty;
				string string_4 = string.Empty;
				string string_5 = string.Empty;
				if (!variables_0.IsWindows10 && !variables_0.IsWindows81)
				{
					if (variables_0.IsWindows8)
					{
						if (variables_0.IsServer)
						{
							string_2 = Environment.GetEnvironmentVariable("SystemRoot") + "\\Sysnative\\spp\\store";
							string_4 = Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
						}
						else
						{
							string_2 = Environment.GetEnvironmentVariable("SystemRoot") + "\\System32\\spp\\store";
							string_4 = Environment.GetEnvironmentVariable("WinDir") + "\\System32\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
						}
						string_3 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
						string_5 = Environment.GetEnvironmentVariable("ProgramFiles") + "\\Common Files\\Microsoft Shared\\OFFICE15\\Office Setup Controller\\pkeyconfig-office.xrm-ms";
					}
					else if (variables_0.IsWindows7)
					{
						string_2 = Environment.GetEnvironmentVariable("SystemRoot") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareProtectionPlatform";
						string_3 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
						string_4 = ((!variables_0.IsServer) ? (Environment.GetEnvironmentVariable("WinDir") + "\\System32\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms") : (Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms"));
						string_5 = Environment.GetEnvironmentVariable("ProgramFiles") + "\\Common Files\\Microsoft Shared\\OFFICE15\\Office Setup Controller\\pkeyconfig-office.xrm-ms";
					}
					else if (variables_0.IsWindowsVista)
					{
						string_2 = Environment.GetEnvironmentVariable("SystemRoot") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareLicensing";
						string_4 = Environment.GetEnvironmentVariable("WinDir") + "\\System32\\Licensingpkeyconfig\\pkeyconfig.xrm-ms";
						string_3 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
					}
				}
				else
				{
					if (variables_0.IsServer)
					{
						string_2 = Environment.GetEnvironmentVariable("SystemRoot") + "\\Sysnative\\spp\\store\\2.0";
						string_4 = Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
					}
					else
					{
						string_2 = Environment.GetEnvironmentVariable("SystemRoot") + "\\System32\\spp\\store\\2.0";
						string_4 = Environment.GetEnvironmentVariable("WinDir") + "\\System32\\spp\\tokens\\pkeyconfig\\pkeyconfig.xrm-ms";
					}
					string_3 = Environment.GetEnvironmentVariable("SystemDrive") + "\\ProgramData\\Microsoft\\OfficeSoftwareProtectionPlatform";
					string_5 = Environment.GetEnvironmentVariable("ProgramFiles") + "\\Common Files\\Microsoft Shared\\OFFICE15\\Office Setup Controller\\pkeyconfig-office.xrm-ms";
				}
				if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8 || variables_0.IsWindows7)
				{
					SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
					Class17.smethod_37(ref softwareLicensingService_, ref variables_0);
				}
				FileLogger logger = variables_0.Logger;
				string message = "Restoring tokens backup...";
				logger.LogMessage(ref message);
				message = "sppsvc";
				bool bool_ = false;
				bool bool_2 = true;
				Class2.smethod_1(ref message, ref bool_, ref variables_0, ref bool_2);
				message = "osppsvc";
				bool_2 = false;
				bool_ = true;
				Class2.smethod_1(ref message, ref bool_2, ref variables_0, ref bool_);
				FileLogger logger2 = variables_0.Logger;
				message = "Taking backup of: " + variables_0.DirectorioBackupTokens;
				logger2.LogMessage(ref message);
				if (!string.IsNullOrEmpty(string_2) && fileSystem.DirectoryExists(string_))
				{
					TakeOwner.smethod_0(ref string_2, ref variables_0);
					smethod_2(ref string_, ref string_2, ref variables_0);
					if (!string.IsNullOrEmpty(string_4) && fileSystem.FileExists(string_ + "\\pkeyconfig-office.xrm-ms"))
					{
						TakeOwner.smethod_1(ref string_4, ref variables_0);
						File.Copy(string_ + "\\pkeyconfig.xrm-ms", string_4, true);
					}
					FileLogger logger3 = variables_0.Logger;
					message = "Restore for Windows made in: " + string_2;
					logger3.LogMessage(ref message);
				}
				if (!string.IsNullOrEmpty(string_3) && fileSystem.DirectoryExists(text))
				{
					TakeOwner.smethod_0(ref string_3, ref variables_0);
					smethod_2(ref string_, ref string_3, ref variables_0);
					if (!string.IsNullOrEmpty(string_5) && fileSystem.FileExists(text + "\\pkeyconfig-office.xrm-ms"))
					{
						TakeOwner.smethod_1(ref string_5, ref variables_0);
						File.Copy(text + "\\pkeyconfig-office.xrm-ms", string_5, true);
					}
					FileLogger logger4 = variables_0.Logger;
					message = "Restore for Office made in: " + string_3;
					logger4.LogMessage(ref message);
				}
				Class3.smethod_24(ref variables_0, ref variables_0.AudioTransfer);
				variables_0.IsWindowsListo.Value = true;
				variables_0.IsOffice2013Listo.Value = true;
				variables_0.IsOffice2010Listo.Value = true;
				variables_0.IsGui = false;
				Class3.smethod_6(ref variables_0);
				fileSystem = null;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger5 = variables_0.Logger;
				string message = "Error: " + str;
				logger5.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		private static void smethod_2(ref string string_0, ref string string_1, ref Variables variables_0)
		{
			string oldValue = variables_0.DirectorioBackupTokens + "\\Windows";
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_1))
			{
				return;
			}
			try
			{
				ReadOnlyCollection<string> files = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)3, new string[1]
				{
					"*.dat"
				});
				foreach (string item in files)
				{
					try
					{
						string text = item.Replace(oldValue, string_1);
						if (File.Exists(text))
						{
							File.Delete(text);
						}
						File.Copy(item, text, true);
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger = variables_0.Logger;
						string message = "Error: " + str;
						logger.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
				}
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger2 = variables_0.Logger;
				string message = "Error: " + str2;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		private static void smethod_3(ref string string_0, ref Variables variables_0)
		{
			//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
			FileLogger logger = variables_0.Logger;
			string message = "Backuping Product Keys...";
			logger.LogMessage(ref message);
			try
			{
				if (File.Exists(string_0))
				{
					File.Delete(string_0);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			try
			{
				bool bool_ = true;
				bool bool_2 = false;
				ArrayList arrayList = Class10.smethod_12(ref bool_, ref bool_2, ref variables_0);
				IEnumerator enumerator = default(IEnumerator);
				try
				{
					enumerator = arrayList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						string text = Conversions.ToString(enumerator.Current);
						File.AppendAllText(string_0, text + Environment.NewLine);
						FileLogger logger3 = variables_0.Logger;
						message = "Key Found: " + Class2.smethod_5(text);
						logger3.LogMessage(ref message);
					}
				}
				finally
				{
					if (enumerator is IDisposable)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				if (!variables_0.IsOffice2013PermanentActivate)
				{
					bool_2 = false;
					bool_ = true;
					arrayList = Class10.smethod_12(ref bool_2, ref bool_, ref variables_0);
					IEnumerator enumerator2 = default(IEnumerator);
					try
					{
						enumerator2 = arrayList.GetEnumerator();
						while (enumerator2.MoveNext())
						{
							string text2 = Conversions.ToString(enumerator2.Current);
							File.AppendAllText(string_0, text2 + Environment.NewLine);
							FileLogger logger4 = variables_0.Logger;
							message = "Key Found: " + Class2.smethod_5(text2);
							logger4.LogMessage(ref message);
						}
					}
					finally
					{
						if (enumerator2 is IDisposable)
						{
							(enumerator2 as IDisposable).Dispose();
						}
					}
				}
				else if (variables_0.IsGui)
				{
					string text3 = string.Empty;
					int num = 0;
					while (string.IsNullOrEmpty(text3) && num < 2)
					{
						text3 = Interaction.InputBox("Enter your Office 2013 Key Activation" + Environment.NewLine + "example: XXXXX-XXXXX-XXXXX-XXXXX-" + variables_0.PartialPermanentOffice2013Key, "Office 2013 Jey Backup", "", -1, -1);
						if (text3.Length != 29)
						{
							text3 = string.Empty;
						}
						else if (!new Regex("^([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})-([A-Z1-9]{5})$").IsMatch(text3))
						{
							text3 = string.Empty;
						}
						num = checked(num + 1);
					}
					File.AppendAllText(string_0, "Office 2013: " + text3 + Environment.NewLine);
					FileLogger logger5 = variables_0.Logger;
					message = "Key entered: " + Class2.smethod_5(text3);
					logger5.LogMessage(ref message);
				}
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger6 = variables_0.Logger;
				message = "Error: " + str2;
				logger6.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			FileLogger logger7 = variables_0.Logger;
			message = "Product Keys Saved";
			logger7.LogMessage(ref message);
		}
	}
	public class Check
	{
		[CompilerGenerated]
		internal sealed class Class84
		{
			public Variables variables_0;

			internal void method_0()
			{
				smethod_2(ref variables_0);
			}

			internal void method_1()
			{
				smethod_3(ref variables_0);
			}

			internal void method_2()
			{
				smethod_4(ref variables_0);
			}

			internal void method_3()
			{
				smethod_6(ref variables_0);
			}
		}

		private const string string_0 = "Name: ";

		private const string string_1 = "Description: ";

		private const string string_2 = "Activation ID: ";

		private const string string_3 = "Application ID: ";

		private const string string_4 = "Extended PID: ";

		private const string string_5 = "Partial Product Key: ";

		private const int int_0 = -1073418231;

		private const int int_1 = -1073417728;

		private const string string_6 = "License Status: Unlicensed";

		private const string string_7 = "License Status: Licensed";

		private const string string_8 = "Volume activation expiration: %MINUTE% minute(s) (%DAY% day(s))";

		private const string string_9 = "Timebased activation expiration: %MINUTE% minute(s) (%DAY% day(s))";

		private const string string_10 = "License Status: Initial grace period";

		private const string string_11 = "License Status: Additional grace period (KMS license expired or hardware out of tolerance)";

		private const string string_12 = "License Status: Non-genuine grace period.";

		private const string string_13 = "License Status: Notification";

		private const string string_14 = "License Status: Extended grace period";

		private const string string_15 = "Time remaining: %MINUTE% minute(s) (%DAY% day(s))";

		private const string string_16 = "Notification Reason: 0x%ERRCODE% (non-genuine).";

		private const string string_17 = "Notification Reason: 0x%ERRCODE% (grace time expired).";

		private const string string_18 = "Notification Reason: 0x%ERRCODE%.";

		private const string string_19 = "License Status: Unknown";

		private const string string_20 = "Evaluation End Date: ";

		private const string string_21 = "Configured Activation Type: All";

		private const string string_22 = "Configured Activation Type: AD";

		private const string string_23 = "Configured Activation Type: KMS";

		private const string string_24 = "Configured Activation Type: Token";

		private const string string_25 = "Please use slmgr.vbs /ato to activate and update KMS client information in order to update values.";

		private const string string_26 = "Activating %PRODUCTNAME%";

		private const string string_27 = "Error: product not found.";

		private const string string_28 = "This system is configured for Token-based activation only. Use slmgr.vbs /fta to initiate Token-based activation, or slmgr.vbs /act-type to change the activation type setting.";

		private const string string_29 = "Product activated successfully.";

		private const string string_30 = "Error: Product activation failed.";

		private const string string_31 = "The machine is running within the non-genuine grace period. Run 'slui.exe' to go online and make the machine genuine.";

		private const string string_32 = "Windows is running within the non-genuine notification period. Run 'slui.exe' to go online and validate Windows.";

		private const string string_33 = "Error: ";

		internal static void smethod_0(ref Variables variables_0)
		{
			string text = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\sppsvc";
			Class10.smethod_5(ref text, ref variables_0);
			text = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\osppsvc";
			Class10.smethod_5(ref text, ref variables_0);
		}

		internal static void smethod_1(ref Variables variables_0)
		{
			Variables variables_ = variables_0;
			new Thread((ThreadStart)delegate
			{
				smethod_2(ref variables_);
			}).Start();
			new Thread((ThreadStart)delegate
			{
				smethod_3(ref variables_);
			}).Start();
			new Thread((ThreadStart)delegate
			{
				smethod_4(ref variables_);
			}).Start();
			new Thread((ThreadStart)delegate
			{
				smethod_6(ref variables_);
			}).Start();
			Class3.smethod_24(ref variables_0, ref variables_0.AudioDiagnostic);
		}

		internal static void smethod_2(ref Variables variables_0)
		{
			//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_0287: Unknown result type (might be due to invalid IL or missing references)
			//IL_02d1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02d7: Invalid comparison between Unknown and I4
			//IL_0493: Unknown result type (might be due to invalid IL or missing references)
			//IL_04dd: Unknown result type (might be due to invalid IL or missing references)
			//IL_04e3: Invalid comparison between Unknown and I4
			variables_0.IsWindowsActivable.Value = false;
			checked
			{
				variables_0.IntentosCheckWindows++;
				Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			}
			string message;
			if (!variables_0.IsWindowsXP)
			{
				try
				{
					if (variables_0.IntentosCheckWindows <= 1 && new Class8().method_0(ref variables_0))
					{
						FileLogger logger = variables_0.Logger;
						message = "OEM Key Found: Version Windows Skipped";
						logger.LogMessage(ref message);
						FileLogger logger2 = variables_0.Logger;
						message = "OEM Activation needs Internet Connection";
						logger2.LogMessage(ref message);
						variables_0.IsWindowsActivable.Value = false;
						variables_0.IsWindowsListo.Value = true;
						variables_0.IsWindowsChecked.Value = true;
						Class3.smethod_6(ref variables_0);
						return;
					}
					if (variables_0.IntentosCheckWindows < 5 && variables_0.EditionID != null)
					{
						bool bool_ = true;
						bool bool_2 = false;
						bool bool_3 = false;
						bool bool_4 = false;
						Class17.smethod_46(ref variables_0, ref bool_, ref bool_2, ref bool_3, ref bool_4);
						if (variables_0.ColeccionWindows.Count > 0)
						{
							FileLogger logger3 = variables_0.Logger;
							message = "Found Windows Products: " + Conversions.ToString(variables_0.ColeccionWindows.Count);
							logger3.LogMessage(ref message);
							SoftwareLicensingProduct softwareLicensingProduct_ = variables_0.ColeccionWindows[0];
							smethod_11(ref softwareLicensingProduct_, ref variables_0);
							if (Class17.smethod_27(softwareLicensingProduct_.Description))
							{
								variables_0.IsWindowsActivable.Value = true;
								Class3.smethod_27(ref variables_0.ColeccionWindowsActivable, ref softwareLicensingProduct_);
							}
							else if (!Class17.smethod_29(softwareLicensingProduct_.Description) && !Class17.smethod_30(softwareLicensingProduct_.Description))
							{
								if (Class17.smethod_31(softwareLicensingProduct_.Description))
								{
									string message2 = softwareLicensingProduct_.Name + ": is Evaluation Version. You must upgrade to Full Version";
									variables_0.Logger.LogMessage(ref message2);
									if (variables_0.IsGui)
									{
										variables_0.ShowMessage.Show(message2, "Not Supported by KMS", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
									}
								}
								else if (Class17.smethod_28(softwareLicensingProduct_.Description) && (long)softwareLicensingProduct_.LicenseStatus != 1L)
								{
									if ((long)softwareLicensingProduct_.LicenseStatus != 2L && (long)softwareLicensingProduct_.LicenseStatus != 3L && (long)softwareLicensingProduct_.LicenseStatus != 4L)
									{
										string message3 = "This " + softwareLicensingProduct_.Name + " has a OEM KEY, if you wish activate it with KMS, then install a GVLK KEY";
										variables_0.Logger.LogMessage(ref message3);
										if (variables_0.IsGui)
										{
											variables_0.ShowMessage.Show(message3, "Not Supported by KMS", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
										}
										message3 = softwareLicensingProduct_.Name + ". (OEM) --> VL  ?";
										variables_0.Logger.LogMessage(ref message3);
										if (variables_0.IsGui && (int)variables_0.ShowMessage.Show(message3, "Convert OEM Key", IFrmShowMessage.enumMessageIcon.Question, IFrmShowMessage.enumMessageButton.YesNo, variables_0.iactivateMetroForm_0) == 6)
										{
											BooleanEvent isWindowsActivable = variables_0.IsWindowsActivable;
											bool_4 = isWindowsActivable.Value;
											RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
											isWindowsActivable.Value = bool_4;
										}
									}
									else
									{
										BooleanEvent isWindowsActivable2 = variables_0.IsWindowsActivable;
										bool_4 = isWindowsActivable2.Value;
										RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
										isWindowsActivable2.Value = bool_4;
									}
								}
							}
							else if ((long)softwareLicensingProduct_.LicenseStatus != 1L)
							{
								if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
								{
									BooleanEvent isWindowsActivable3 = variables_0.IsWindowsActivable;
									bool_4 = isWindowsActivable3.Value;
									RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
									isWindowsActivable3.Value = bool_4;
								}
								else if ((long)softwareLicensingProduct_.LicenseStatus != 2L && (long)softwareLicensingProduct_.LicenseStatus != 3L && (long)softwareLicensingProduct_.LicenseStatus != 4L)
								{
									if ((long)softwareLicensingProduct_.GracePeriodRemaining >= 0L && (long)softwareLicensingProduct_.GenuineStatus == 1L)
									{
										BooleanEvent isWindowsActivable4 = variables_0.IsWindowsActivable;
										bool_4 = isWindowsActivable4.Value;
										RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
										isWindowsActivable4.Value = bool_4;
									}
									else if ((long)softwareLicensingProduct_.GracePeriodRemaining >= 1L && (long)softwareLicensingProduct_.GenuineStatus == 0L)
									{
										BooleanEvent isWindowsActivable5 = variables_0.IsWindowsActivable;
										bool_4 = isWindowsActivable5.Value;
										RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
										isWindowsActivable5.Value = bool_4;
									}
									else
									{
										string message4 = "This " + softwareLicensingProduct_.Name + " has a RETAIL/MAK KEY, if you wish activate it with KMS, then install a GVLK KEY";
										variables_0.Logger.LogMessage(ref message4);
										if (variables_0.IsGui)
										{
											variables_0.ShowMessage.Show(message4, "Not Supported by KMS", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
										}
										message4 = softwareLicensingProduct_.Name + ". (RETAIL/MAK) --> VL  ?";
										variables_0.Logger.LogMessage(ref message4);
										if (variables_0.IsGui && (int)variables_0.ShowMessage.Show(message4, "Convert RETAIL/MAK Key", IFrmShowMessage.enumMessageIcon.Question, IFrmShowMessage.enumMessageButton.YesNo, variables_0.iactivateMetroForm_0) == 6)
										{
											BooleanEvent isWindowsActivable6 = variables_0.IsWindowsActivable;
											bool_4 = isWindowsActivable6.Value;
											RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
											isWindowsActivable6.Value = bool_4;
										}
									}
								}
								else
								{
									BooleanEvent isWindowsActivable7 = variables_0.IsWindowsActivable;
									bool_4 = isWindowsActivable7.Value;
									RT2VL.smethod_8(ref bool_4, softwareLicensingProduct_, ref variables_0);
									isWindowsActivable7.Value = bool_4;
								}
							}
							else
							{
								variables_0.IsWindowsPermanentActivate = true;
							}
						}
						else if (variables_0.ColeccionWindows.Count == 0 && !variables_0.IsWindowsXP && (variables_0.EditionID.Contains("Core") || variables_0.EditionID.Contains("Professional") || variables_0.EditionID.Contains("Enterprise") || variables_0.EditionID.Contains("Education") || variables_0.EditionID.Contains("Essentials") || variables_0.EditionID.Contains("Embedded") || variables_0.EditionID.Contains("Standard") || variables_0.EditionID.Contains("Datacenter") || variables_0.EditionID.Contains("HI") || variables_0.EditionID.Contains("Solution") || variables_0.EditionID.Contains("CloudStorage") || variables_0.EditionID.Contains("Country") || variables_0.EditionID.Contains("Premium") || variables_0.EditionID.Contains("HPC") || variables_0.EditionID.Contains("Business") || variables_0.EditionID.Contains("Web")))
						{
							message = "Windows " + variables_0.EditionID;
							Key.smethod_12(ref message, ref variables_0);
							smethod_2(ref variables_0);
						}
						if (variables_0.ColeccionWindowsActivable.Count > 0 && variables_0.IsWindowsActivable.Value && variables_0.ColeccionWindowsActivable.Count > 0)
						{
							Class3.smethod_24(ref variables_0, ref variables_0.AudioInputOk);
							bool_4 = true;
							Class10.smethod_7(ref bool_4, ref variables_0);
							variables_0.IsWindowsChecked.Value = true;
							Activador.smethod_0(ref variables_0);
							return;
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger4 = variables_0.Logger;
					message = "Error: " + str;
					logger4.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
			}
			FileLogger logger5 = variables_0.Logger;
			message = "Version Windows Skipped";
			logger5.LogMessage(ref message);
			variables_0.IsWindowsActivable.Value = false;
			variables_0.IsWindowsListo.Value = true;
			variables_0.IsWindowsChecked.Value = true;
			Class3.smethod_6(ref variables_0);
		}

		internal static void smethod_3(ref Variables variables_0)
		{
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Unknown result type (might be due to invalid IL or missing references)
			//IL_0158: Invalid comparison between Unknown and I4
			variables_0.IsOffice2016Activable.Value = false;
			int num;
			bool bool_;
			bool bool_2;
			bool bool_3;
			bool bool_4;
			checked
			{
				variables_0.IntentosCheckOffice2016++;
				num = 0;
				bool_ = true;
				bool_2 = false;
				bool_3 = false;
				bool_4 = false;
				Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			}
			string message;
			try
			{
				if (variables_0.IntentosCheckOffice2016 < 10)
				{
					smethod_8(ref variables_0);
					if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Conversions.ToString(variables_0.RutaOffice2016)))
					{
						FileLogger logger = variables_0.Logger;
						message = Conversions.ToString(Operators.ConcatenateObject((object)"Office 2016 Found: ", variables_0.RutaOffice2016));
						logger.LogMessage(ref message);
						Class17.smethod_46(ref variables_0, ref bool_4, ref bool_3, ref bool_2, ref bool_);
						if (variables_0.ColeccionOffice2016W8.Count <= 0 && variables_0.ColeccionOffice2016W7.Count <= 0)
						{
							if (variables_0.ColeccionOffice2016W8.Count == 0 && variables_0.ColeccionOffice2016W7.Count == 0)
							{
								string message2 = "Error: You need Reinstall Office 2016 or Open It the firts time";
								variables_0.Logger.LogMessage(ref message2);
								if (variables_0.IsGui)
								{
									variables_0.ShowMessage.Show(message2, "KEY no found", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
								}
								message2 = "Office 2016. (non KEY) --> ProPlus KEY ?";
								variables_0.Logger.LogMessage(ref message2);
								if (variables_0.IsGui)
								{
									if ((int)variables_0.ShowMessage.Show(message2, "Install KEY", IFrmShowMessage.enumMessageIcon.Question, IFrmShowMessage.enumMessageButton.YesNo, variables_0.iactivateMetroForm_0) == 6)
									{
										message = "Office 16, Office16ProPlus";
										RT2VL.smethod_15(ref message, ref variables_0);
									}
								}
								else
								{
									message = "Office 16, Office16ProPlus";
									RT2VL.smethod_15(ref message, ref variables_0);
								}
							}
						}
						else
						{
							if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
							{
								if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
								{
									FileLogger logger2 = variables_0.Logger;
									message = "Found Office 2016 Products: " + Conversions.ToString(variables_0.ColeccionOffice2016W7.Count);
									logger2.LogMessage(ref message);
									foreach (OfficeSoftwareProtectionProduct item in variables_0.ColeccionOffice2016W7)
									{
										OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = item;
										smethod_12(ref officeSoftwareProtectionProduct_, ref variables_0);
										if (Class17.smethod_27(officeSoftwareProtectionProduct_.Description))
										{
											variables_0.IsOffice2016Activable.Value = true;
											Class3.smethod_28(ref variables_0.ColeccionOffice2016ActivableW7, ref officeSoftwareProtectionProduct_);
										}
										else if (!Class17.smethod_29(officeSoftwareProtectionProduct_.Description) && !Class17.smethod_30(officeSoftwareProtectionProduct_.Description))
										{
											if (Class17.smethod_31(officeSoftwareProtectionProduct_.Description))
											{
												string message3 = officeSoftwareProtectionProduct_.Name + ": is Evaluation Version. You must upgrade to Full Version";
												variables_0.Logger.LogMessage(ref message3);
												num = checked(num + 1);
												if (officeSoftwareProtectionProduct_.Name.Contains("Grace") || officeSoftwareProtectionProduct_.Name.Contains("Trial") || officeSoftwareProtectionProduct_.Name.Contains("Demo"))
												{
													BooleanEvent isOffice2016Activable = variables_0.IsOffice2016Activable;
													bool bool_5 = isOffice2016Activable.Value;
													RT2VL.smethod_6(ref bool_5, ref officeSoftwareProtectionProduct_, ref bool_, ref bool_2, ref bool_3, ref variables_0.ColeccionRetailOffice2016W7, ref variables_0);
													isOffice2016Activable.Value = bool_5;
												}
											}
										}
										else if ((long)officeSoftwareProtectionProduct_.LicenseStatus != 1L)
										{
											BooleanEvent isOffice2016Activable2 = variables_0.IsOffice2016Activable;
											bool bool_5 = isOffice2016Activable2.Value;
											RT2VL.smethod_6(ref bool_5, ref officeSoftwareProtectionProduct_, ref bool_, ref bool_2, ref bool_3, ref variables_0.ColeccionRetailOffice2016W7, ref variables_0);
											isOffice2016Activable2.Value = bool_5;
										}
										else
										{
											variables_0.PartialPermanentOffice2016Key = officeSoftwareProtectionProduct_.PartialProductKey;
											variables_0.IsOffice2016PermanentActivate = true;
										}
									}
								}
							}
							else
							{
								FileLogger logger3 = variables_0.Logger;
								message = "Found Office 2016 Products: " + Conversions.ToString(variables_0.ColeccionOffice2016W8.Count);
								logger3.LogMessage(ref message);
								foreach (SoftwareLicensingProduct item2 in variables_0.ColeccionOffice2016W8)
								{
									SoftwareLicensingProduct softwareLicensingProduct_ = item2;
									smethod_11(ref softwareLicensingProduct_, ref variables_0);
									if (Class17.smethod_27(softwareLicensingProduct_.Description))
									{
										variables_0.IsOffice2016Activable.Value = true;
										Class3.smethod_27(ref variables_0.ColeccionOffice2016ActivableW8, ref softwareLicensingProduct_);
									}
									else if (!Class17.smethod_29(softwareLicensingProduct_.Description) && !Class17.smethod_30(softwareLicensingProduct_.Description))
									{
										if (Class17.smethod_31(softwareLicensingProduct_.Description))
										{
											string message4 = softwareLicensingProduct_.Name + ": is Evaluation Version. You must upgrade to Full Version";
											variables_0.Logger.LogMessage(ref message4);
											num = checked(num + 1);
											if (softwareLicensingProduct_.Name.Contains("Grace") || softwareLicensingProduct_.Name.Contains("Trial") || softwareLicensingProduct_.Name.Contains("Demo"))
											{
												ref List<SoftwareLicensingProduct> coleccionRetailOffice2016W = ref variables_0.ColeccionRetailOffice2016W8;
												BooleanEvent isOffice2016Activable3;
												bool bool_5 = (isOffice2016Activable3 = variables_0.IsOffice2016Activable).Value;
												smethod_5(ref softwareLicensingProduct_, ref coleccionRetailOffice2016W, ref bool_5, bool_, bool_2, variables_0);
												isOffice2016Activable3.Value = bool_5;
											}
										}
									}
									else if ((long)softwareLicensingProduct_.LicenseStatus != 1L)
									{
										ref List<SoftwareLicensingProduct> coleccionRetailOffice2016W2 = ref variables_0.ColeccionRetailOffice2016W8;
										BooleanEvent isOffice2016Activable3;
										bool bool_5 = (isOffice2016Activable3 = variables_0.IsOffice2016Activable).Value;
										smethod_5(ref softwareLicensingProduct_, ref coleccionRetailOffice2016W2, ref bool_5, bool_, bool_2, variables_0);
										isOffice2016Activable3.Value = bool_5;
									}
									else
									{
										variables_0.PartialPermanentOffice2016Key = softwareLicensingProduct_.PartialProductKey;
										variables_0.IsOffice2016PermanentActivate = true;
									}
								}
							}
							if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
							{
								if ((variables_0.IsWindows7 || variables_0.IsWindowsVista) && variables_0.ColeccionRetailOffice2016W7.Count > 0 && variables_0.IntentosCheckOffice2016 < 7)
								{
									RT2VL.smethod_10(ref variables_0.ColeccionRetailOffice2016W7, ref variables_0);
								}
							}
							else if (variables_0.ColeccionRetailOffice2016W8.Count > 0 && variables_0.IntentosCheckOffice2016 < 7)
							{
								RT2VL.smethod_9(ref variables_0.ColeccionRetailOffice2016W8, ref variables_0);
							}
							if ((variables_0.ColeccionOffice2016ActivableW8.Count > 0 || variables_0.ColeccionOffice2016ActivableW7.Count > 0) && variables_0.IsOffice2016Activable.Value)
							{
								Class3.smethod_24(ref variables_0, ref variables_0.AudioInputOk);
								bool bool_5 = true;
								Class10.smethod_8(ref bool_5, ref variables_0);
								variables_0.IsOffice2016Checked.Value = true;
								Activador.smethod_0(ref variables_0);
								return;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger4 = variables_0.Logger;
				message = "Error: " + str;
				logger4.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			FileLogger logger5 = variables_0.Logger;
			message = "Office 2016 Skipped";
			logger5.LogMessage(ref message);
			variables_0.IsOffice2016Activable.Value = false;
			variables_0.IsOffice2016Listo.Value = true;
			variables_0.IsOffice2016Checked.Value = true;
			Class3.smethod_6(ref variables_0);
		}

		internal static void smethod_4(ref Variables variables_0)
		{
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Unknown result type (might be due to invalid IL or missing references)
			//IL_0158: Invalid comparison between Unknown and I4
			variables_0.IsOffice2013Activable.Value = false;
			int num;
			bool bool_;
			bool bool_2;
			bool bool_3;
			bool bool_4;
			checked
			{
				variables_0.IntentosCheckOffice2013++;
				num = 0;
				bool_ = false;
				bool_2 = true;
				bool_3 = false;
				bool_4 = false;
				Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			}
			string message;
			try
			{
				if (variables_0.IntentosCheckOffice2013 < 10)
				{
					smethod_9(ref variables_0);
					if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Conversions.ToString(variables_0.RutaOffice2013)))
					{
						FileLogger logger = variables_0.Logger;
						message = Conversions.ToString(Operators.ConcatenateObject((object)"Office 2013 Found: ", variables_0.RutaOffice2013));
						logger.LogMessage(ref message);
						Class17.smethod_46(ref variables_0, ref bool_4, ref bool_3, ref bool_2, ref bool_);
						if (variables_0.ColeccionOffice2013W8.Count <= 0 && variables_0.ColeccionOffice2013W7.Count <= 0)
						{
							if (variables_0.ColeccionOffice2013W8.Count == 0 && variables_0.ColeccionOffice2013W7.Count == 0)
							{
								string message2 = "Error: You need Reinstall Office 2013 or Open It the firts time";
								variables_0.Logger.LogMessage(ref message2);
								if (variables_0.IsGui)
								{
									variables_0.ShowMessage.Show(message2, "KEY no found", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
								}
								message2 = "Office 2013. (non KEY) --> ProPlus KEY ?";
								variables_0.Logger.LogMessage(ref message2);
								if (variables_0.IsGui)
								{
									if ((int)variables_0.ShowMessage.Show(message2, "Install KEY", IFrmShowMessage.enumMessageIcon.Question, IFrmShowMessage.enumMessageButton.YesNo, variables_0.iactivateMetroForm_0) == 6)
									{
										message = "Office 15, OfficeProPlus";
										RT2VL.smethod_22(ref message, ref variables_0);
									}
								}
								else
								{
									message = "Office 15, OfficeProPlus";
									RT2VL.smethod_22(ref message, ref variables_0);
								}
							}
						}
						else
						{
							if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
							{
								if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
								{
									FileLogger logger2 = variables_0.Logger;
									message = "Found Office 2013 Products: " + Conversions.ToString(variables_0.ColeccionOffice2013W7.Count);
									logger2.LogMessage(ref message);
									foreach (OfficeSoftwareProtectionProduct item in variables_0.ColeccionOffice2013W7)
									{
										OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = item;
										smethod_12(ref officeSoftwareProtectionProduct_, ref variables_0);
										if (Class17.smethod_27(officeSoftwareProtectionProduct_.Description))
										{
											variables_0.IsOffice2013Activable.Value = true;
											Class3.smethod_28(ref variables_0.ColeccionOffice2013ActivableW7, ref officeSoftwareProtectionProduct_);
										}
										else if (!Class17.smethod_29(officeSoftwareProtectionProduct_.Description) && !Class17.smethod_30(officeSoftwareProtectionProduct_.Description))
										{
											if (Class17.smethod_31(officeSoftwareProtectionProduct_.Description))
											{
												string message3 = officeSoftwareProtectionProduct_.Name + ": is Evaluation Version. You must upgrade to Full Version";
												variables_0.Logger.LogMessage(ref message3);
												num = checked(num + 1);
												if (officeSoftwareProtectionProduct_.Name.Contains("Grace") || officeSoftwareProtectionProduct_.Name.Contains("Trial") || officeSoftwareProtectionProduct_.Name.Contains("Demo"))
												{
													BooleanEvent isOffice2013Activable = variables_0.IsOffice2013Activable;
													bool bool_5 = isOffice2013Activable.Value;
													RT2VL.smethod_6(ref bool_5, ref officeSoftwareProtectionProduct_, ref bool_, ref bool_2, ref bool_3, ref variables_0.ColeccionRetailOffice2013W7, ref variables_0);
													isOffice2013Activable.Value = bool_5;
												}
											}
										}
										else if ((long)officeSoftwareProtectionProduct_.LicenseStatus != 1L)
										{
											BooleanEvent isOffice2013Activable2 = variables_0.IsOffice2013Activable;
											bool bool_5 = isOffice2013Activable2.Value;
											RT2VL.smethod_6(ref bool_5, ref officeSoftwareProtectionProduct_, ref bool_, ref bool_2, ref bool_3, ref variables_0.ColeccionRetailOffice2013W7, ref variables_0);
											isOffice2013Activable2.Value = bool_5;
										}
										else
										{
											variables_0.PartialPermanentOffice2013Key = officeSoftwareProtectionProduct_.PartialProductKey;
											variables_0.IsOffice2013PermanentActivate = true;
										}
									}
								}
							}
							else
							{
								FileLogger logger3 = variables_0.Logger;
								message = "Found Office 2013 Products: " + Conversions.ToString(variables_0.ColeccionOffice2013W8.Count);
								logger3.LogMessage(ref message);
								foreach (SoftwareLicensingProduct item2 in variables_0.ColeccionOffice2013W8)
								{
									SoftwareLicensingProduct softwareLicensingProduct_ = item2;
									smethod_11(ref softwareLicensingProduct_, ref variables_0);
									if (Class17.smethod_27(softwareLicensingProduct_.Description))
									{
										variables_0.IsOffice2013Activable.Value = true;
										Class3.smethod_27(ref variables_0.ColeccionOffice2013ActivableW8, ref softwareLicensingProduct_);
									}
									else if (!Class17.smethod_29(softwareLicensingProduct_.Description) && !Class17.smethod_30(softwareLicensingProduct_.Description))
									{
										if (Class17.smethod_31(softwareLicensingProduct_.Description))
										{
											string message4 = softwareLicensingProduct_.Name + ": is Evaluation Version. You must upgrade to Full Version";
											variables_0.Logger.LogMessage(ref message4);
											num = checked(num + 1);
											if (softwareLicensingProduct_.Name.Contains("Grace") || softwareLicensingProduct_.Name.Contains("Trial") || softwareLicensingProduct_.Name.Contains("Demo"))
											{
												ref List<SoftwareLicensingProduct> coleccionRetailOffice2013W = ref variables_0.ColeccionRetailOffice2013W8;
												BooleanEvent isOffice2013Activable3;
												bool bool_5 = (isOffice2013Activable3 = variables_0.IsOffice2013Activable).Value;
												smethod_5(ref softwareLicensingProduct_, ref coleccionRetailOffice2013W, ref bool_5, bool_, bool_2, variables_0);
												isOffice2013Activable3.Value = bool_5;
											}
										}
									}
									else if ((long)softwareLicensingProduct_.LicenseStatus != 1L)
									{
										ref List<SoftwareLicensingProduct> coleccionRetailOffice2013W2 = ref variables_0.ColeccionRetailOffice2013W8;
										BooleanEvent isOffice2013Activable3;
										bool bool_5 = (isOffice2013Activable3 = variables_0.IsOffice2013Activable).Value;
										smethod_5(ref softwareLicensingProduct_, ref coleccionRetailOffice2013W2, ref bool_5, bool_, bool_2, variables_0);
										isOffice2013Activable3.Value = bool_5;
									}
									else
									{
										variables_0.PartialPermanentOffice2013Key = softwareLicensingProduct_.PartialProductKey;
										variables_0.IsOffice2013PermanentActivate = true;
									}
								}
							}
							if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
							{
								if ((variables_0.IsWindows7 || variables_0.IsWindowsVista) && variables_0.ColeccionRetailOffice2013W7.Count > 0 && variables_0.IntentosCheckOffice2013 < 7)
								{
									RT2VL.smethod_17(ref variables_0.ColeccionRetailOffice2013W7, ref variables_0);
								}
							}
							else if (variables_0.ColeccionRetailOffice2013W8.Count > 0 && variables_0.IntentosCheckOffice2013 < 7)
							{
								RT2VL.smethod_16(ref variables_0.ColeccionRetailOffice2013W8, ref variables_0);
							}
							if ((variables_0.ColeccionOffice2013ActivableW8.Count > 0 || variables_0.ColeccionOffice2013ActivableW7.Count > 0) && variables_0.IsOffice2013Activable.Value)
							{
								Class3.smethod_24(ref variables_0, ref variables_0.AudioInputOk);
								bool bool_5 = true;
								Class10.smethod_9(ref bool_5, ref variables_0);
								variables_0.IsOffice2013Checked.Value = true;
								Activador.smethod_0(ref variables_0);
								return;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger4 = variables_0.Logger;
				message = "Error: " + str;
				logger4.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			FileLogger logger5 = variables_0.Logger;
			message = "Office 2013 Skipped";
			logger5.LogMessage(ref message);
			variables_0.IsOffice2013Activable.Value = false;
			variables_0.IsOffice2013Listo.Value = true;
			variables_0.IsOffice2013Checked.Value = true;
			Class3.smethod_6(ref variables_0);
		}

		private static void smethod_5(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref List<SoftwareLicensingProduct> list_0, ref bool bool_0, bool bool_1, bool bool_2, Variables variables_0)
		{
			//IL_012d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0172: Unknown result type (might be due to invalid IL or missing references)
			//IL_0178: Invalid comparison between Unknown and I4
			if (!softwareLicensingProduct_0.Name.Contains("Grace") && !softwareLicensingProduct_0.Name.Contains("Trial") && !softwareLicensingProduct_0.Name.Contains("Demo"))
			{
				if ((long)softwareLicensingProduct_0.LicenseStatus != 2L && (long)softwareLicensingProduct_0.LicenseStatus != 3L && (long)softwareLicensingProduct_0.LicenseStatus != 4L)
				{
					if ((long)softwareLicensingProduct_0.GracePeriodRemaining >= 0L && (long)softwareLicensingProduct_0.GenuineStatus == 1L)
					{
						RT2VL.smethod_7(ref bool_0, softwareLicensingProduct_0, ref bool_1, ref bool_2, ref list_0, ref variables_0);
						return;
					}
					if ((long)softwareLicensingProduct_0.GracePeriodRemaining >= 1L && (long)softwareLicensingProduct_0.GenuineStatus == 0L)
					{
						RT2VL.smethod_7(ref bool_0, softwareLicensingProduct_0, ref bool_1, ref bool_2, ref list_0, ref variables_0);
						return;
					}
					string message = "This " + softwareLicensingProduct_0.Name + " has a RETAIL/MAK KEY, if you wish activate it with KMS, then install a GVLK KEY";
					variables_0.Logger.LogMessage(ref message);
					if (variables_0.IsGui)
					{
						variables_0.ShowMessage.Show(message, "Not Supported by KMS", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
					}
					message = softwareLicensingProduct_0.Name + ". (RETAIL/MAK) --> VL  ?";
					variables_0.Logger.LogMessage(ref message);
					if (variables_0.IsGui && (int)variables_0.ShowMessage.Show(message, "Convert RETAIL/MAK Key", IFrmShowMessage.enumMessageIcon.Question, IFrmShowMessage.enumMessageButton.YesNo, variables_0.iactivateMetroForm_0) == 6)
					{
						RT2VL.smethod_7(ref bool_0, softwareLicensingProduct_0, ref bool_1, ref bool_2, ref list_0, ref variables_0);
					}
				}
				else
				{
					RT2VL.smethod_7(ref bool_0, softwareLicensingProduct_0, ref bool_1, ref bool_2, ref list_0, ref variables_0);
				}
			}
			else
			{
				RT2VL.smethod_7(ref bool_0, softwareLicensingProduct_0, ref bool_1, ref bool_2, ref list_0, ref variables_0);
			}
		}

		internal static void smethod_6(ref Variables variables_0)
		{
			//IL_019f: Unknown result type (might be due to invalid IL or missing references)
			//IL_031f: Unknown result type (might be due to invalid IL or missing references)
			//IL_035a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0360: Invalid comparison between Unknown and I4
			variables_0.IsOffice2010Activable.Value = false;
			int num;
			bool bool_;
			bool bool_2;
			bool bool_3;
			bool bool_4;
			checked
			{
				variables_0.IntentosCheckOffice2010++;
				num = 0;
				bool_ = false;
				bool_2 = false;
				bool_3 = true;
				bool_4 = false;
				Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			}
			string message;
			try
			{
				if (variables_0.IntentosCheckOffice2010 < 10)
				{
					smethod_10(ref variables_0);
					if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Conversions.ToString(variables_0.RutaOffice2010)))
					{
						FileLogger logger = variables_0.Logger;
						message = Conversions.ToString(Operators.ConcatenateObject((object)"Office 2010 Found: ", variables_0.RutaOffice2010));
						logger.LogMessage(ref message);
						Class17.smethod_46(ref variables_0, ref bool_4, ref bool_3, ref bool_2, ref bool_);
						if (variables_0.ColeccionOffice2010.Count > 0)
						{
							FileLogger logger2 = variables_0.Logger;
							message = "Found Office 2010 Products: " + Conversions.ToString(variables_0.ColeccionOffice2010.Count);
							logger2.LogMessage(ref message);
							foreach (OfficeSoftwareProtectionProduct item in variables_0.ColeccionOffice2010)
							{
								OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = item;
								smethod_12(ref officeSoftwareProtectionProduct_, ref variables_0);
								if (Class17.smethod_27(officeSoftwareProtectionProduct_.Description))
								{
									variables_0.IsOffice2010Activable.Value = true;
									Class3.smethod_28(ref variables_0.ColeccionOffice2010Activable, ref officeSoftwareProtectionProduct_);
								}
								else if (!Class17.smethod_29(officeSoftwareProtectionProduct_.Description) && !Class17.smethod_30(officeSoftwareProtectionProduct_.Description))
								{
									if (Class17.smethod_31(officeSoftwareProtectionProduct_.Description))
									{
										string message2 = officeSoftwareProtectionProduct_.Name + ": is Evaluation Version. You must upgrade to Full Version";
										variables_0.Logger.LogMessage(ref message2);
										if (variables_0.IsGui)
										{
											variables_0.ShowMessage.Show(message2, "Not Supported by KMS", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
										}
										num = checked(num + 1);
										BooleanEvent isOffice2010Activable = variables_0.IsOffice2010Activable;
										bool bool_5 = isOffice2010Activable.Value;
										RT2VL.smethod_6(ref bool_5, ref officeSoftwareProtectionProduct_, ref bool_, ref bool_2, ref bool_3, ref variables_0.ColeccionRetailOffice2010, ref variables_0);
										isOffice2010Activable.Value = bool_5;
									}
								}
								else if ((long)officeSoftwareProtectionProduct_.LicenseStatus != 1L)
								{
									BooleanEvent isOffice2010Activable2 = variables_0.IsOffice2010Activable;
									bool bool_5 = isOffice2010Activable2.Value;
									RT2VL.smethod_6(ref bool_5, ref officeSoftwareProtectionProduct_, ref bool_, ref bool_2, ref bool_3, ref variables_0.ColeccionRetailOffice2010, ref variables_0);
									isOffice2010Activable2.Value = bool_5;
								}
							}
							if (variables_0.ColeccionRetailOffice2010.Count > 0 && variables_0.ColeccionRetailOffice2010.Count > 0 && variables_0.IntentosCheckOffice2010 < 7)
							{
								bool bool_5 = true;
								Class10.smethod_6(ref bool_5, ref variables_0);
								RT2VL.smethod_23(ref variables_0.ColeccionRetailOffice2010, ref variables_0);
							}
							if (variables_0.ColeccionOffice2010Activable.Count > 0 && variables_0.IsOffice2010Activable.Value && variables_0.ColeccionOffice2010Activable.Count > 0)
							{
								Class3.smethod_24(ref variables_0, ref variables_0.AudioInputOk);
								bool bool_5 = true;
								Class10.smethod_6(ref bool_5, ref variables_0);
								variables_0.IsOffice2010Checked.Value = true;
								Activador.smethod_0(ref variables_0);
								return;
							}
						}
						else if (variables_0.ColeccionOffice2010.Count == 0)
						{
							string message3 = "Error: You need Reinstall Office 2010 or Open It the firts time";
							variables_0.Logger.LogMessage(ref message3);
							if (variables_0.IsGui)
							{
								variables_0.ShowMessage.Show(message3, "KEY no found", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
							}
							message3 = "Office 2010. (non KEY) --> ProPlus KEY ?";
							variables_0.Logger.LogMessage(ref message3);
							if (variables_0.IsGui)
							{
								if ((int)variables_0.ShowMessage.Show(message3, "Install KEY", IFrmShowMessage.enumMessageIcon.Question, IFrmShowMessage.enumMessageButton.YesNo, variables_0.iactivateMetroForm_0) == 6)
								{
									message = "Office 14, OfficeProPlus";
									RT2VL.smethod_25(ref message, ref variables_0);
								}
							}
							else
							{
								message = "Office 14, OfficeProPlus";
								RT2VL.smethod_25(ref message, ref variables_0);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger3 = variables_0.Logger;
				message = "Error: " + str;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			FileLogger logger4 = variables_0.Logger;
			message = "Office 2010 Skipped";
			logger4.LogMessage(ref message);
			variables_0.IsOffice2010Activable.Value = false;
			variables_0.IsOffice2010Listo.Value = true;
			variables_0.IsOffice2010Checked.Value = true;
			Class3.smethod_6(ref variables_0);
		}

		internal static void smethod_7(ref Variables variables_0)
		{
			//IL_0463: Unknown result type (might be due to invalid IL or missing references)
			ArrayList arrayList = new ArrayList();
			StringBuilder stringBuilder = new StringBuilder();
			Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
			if (!variables_0.IsWindowsXP)
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				Class17.smethod_36(ref softwareLicensingService_, ref variables_0);
			}
			string text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
			variables_0.EditionID = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "EditionID", (object)null));
			variables_0.ProductName = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "ProductName", (object)null));
			variables_0.CurrentVersion = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "CurrentVersion", (object)null));
			variables_0.CurrentBuild = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "CurrentBuild", (object)null));
			string text2 = Conversions.ToString(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "BuildLabEx", (object)null));
			string[] array = text2.Split(new char[1]
			{
				'.'
			});
			text2 = Enumerable.ElementAt<string>((IEnumerable<string>)array, 0) + "." + Enumerable.ElementAt<string>((IEnumerable<string>)array, 1);
			stringBuilder.AppendLine("Windows Detected: " + variables_0.ProductName + " : " + variables_0.EditionID + " : " + variables_0.CurrentVersion + " : " + text2);
			stringBuilder.AppendLine(string.Empty);
			bool bool_3;
			bool bool_2;
			bool bool_;
			if (!variables_0.IsWindowsXP)
			{
				List<SoftwareLicensingProduct> list_ = Class17.smethod_17(ref variables_0);
				bool_ = true;
				bool_2 = false;
				bool_3 = false;
				arrayList.AddRange(Class17.smethod_25(ref list_, ref bool_, ref bool_2, ref bool_3, ref variables_0));
			}
			bool bool_4;
			List<OfficeSoftwareProtectionProduct> list_2;
			if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7)
				{
					bool_4 = false;
					list_2 = Class17.smethod_19(ref variables_0, ref bool_4);
					bool_3 = false;
					bool_2 = false;
					bool_ = true;
					arrayList.AddRange(Class17.smethod_26(ref list_2, ref bool_3, ref bool_2, ref bool_, ref variables_0));
					bool_4 = false;
					list_2 = Class17.smethod_19(ref variables_0, ref bool_4);
					bool_ = false;
					bool_2 = true;
					bool_3 = false;
					arrayList.AddRange(Class17.smethod_26(ref list_2, ref bool_, ref bool_2, ref bool_3, ref variables_0));
				}
			}
			else
			{
				List<SoftwareLicensingProduct> list_ = Class17.smethod_17(ref variables_0);
				bool_3 = false;
				bool_2 = false;
				bool_ = true;
				arrayList.AddRange(Class17.smethod_25(ref list_, ref bool_3, ref bool_2, ref bool_, ref variables_0));
				list_ = Class17.smethod_17(ref variables_0);
				bool_ = false;
				bool_2 = true;
				bool_3 = false;
				arrayList.AddRange(Class17.smethod_25(ref list_, ref bool_, ref bool_2, ref bool_3, ref variables_0));
			}
			bool_4 = true;
			list_2 = Class17.smethod_19(ref variables_0, ref bool_4);
			bool_3 = true;
			bool_2 = false;
			bool_ = false;
			arrayList.AddRange(Class17.smethod_26(ref list_2, ref bool_3, ref bool_2, ref bool_, ref variables_0));
			IEnumerator enumerator = default(IEnumerator);
			try
			{
				enumerator = arrayList.GetEnumerator();
				while (enumerator.MoveNext())
				{
					object objectValue = RuntimeHelpers.GetObjectValue(enumerator.Current);
					OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct = new OfficeSoftwareProtectionProduct();
					SoftwareLicensingProduct softwareLicensingProduct = new SoftwareLicensingProduct();
					if (objectValue.GetType() == ((object)officeSoftwareProtectionProduct).GetType())
					{
						officeSoftwareProtectionProduct = (OfficeSoftwareProtectionProduct)objectValue;
						stringBuilder.AppendLine("Name: " + officeSoftwareProtectionProduct.Name);
						stringBuilder.AppendLine("Description: " + officeSoftwareProtectionProduct.Description);
						stringBuilder.AppendLine(smethod_15(officeSoftwareProtectionProduct));
						stringBuilder.AppendLine("LicenseStatus: " + smethod_16(officeSoftwareProtectionProduct.LicenseStatus));
						stringBuilder.AppendLine("PartialProductKey: " + officeSoftwareProtectionProduct.PartialProductKey);
					}
					else if (objectValue.GetType() == ((object)softwareLicensingProduct).GetType())
					{
						softwareLicensingProduct = (SoftwareLicensingProduct)objectValue;
						stringBuilder.AppendLine("Name: " + softwareLicensingProduct.Name);
						stringBuilder.AppendLine("Description: " + softwareLicensingProduct.Description);
						stringBuilder.AppendLine(smethod_14(ref softwareLicensingProduct));
						stringBuilder.AppendLine("LicenseStatus: " + smethod_16(softwareLicensingProduct.LicenseStatus));
						stringBuilder.AppendLine("PartialProductKey: " + softwareLicensingProduct.PartialProductKey);
						if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8)
						{
							stringBuilder.AppendLine("GenuineStatus: " + smethod_17(softwareLicensingProduct.GenuineStatus));
						}
					}
					stringBuilder.AppendLine(string.Empty);
				}
			}
			finally
			{
				if (enumerator is IDisposable)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			variables_0.ShowMessage.Show(stringBuilder.ToString(), "Status Info", IFrmShowMessage.enumMessageIcon.Information, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
		}

		private static void smethod_8(ref Variables variables_0)
		{
			string text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\16.0\\Common\\InstallRoot";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null) != null)
			{
				variables_0.RutaOffice2016 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Office\\16.0\\Common\\InstallRoot";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null) != null)
			{
				variables_0.RutaOffice2016 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\16.0\\ClickToRunStore\\Applications";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "", (object)null) != null)
			{
				variables_0.RutaOffice2016 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Office\\16.0\\ClickToRunStore\\Applications";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "", (object)null) != null)
			{
				variables_0.RutaOffice2016 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "", (object)null));
				return;
			}
			variables_0.RutaOffice2016 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\Microsoft Office\\Office16";
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Conversions.ToString(variables_0.RutaOffice2016)))
			{
				variables_0.RutaOffice2016 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + "\\Microsoft Office\\Office16";
			}
		}

		private static void smethod_9(ref Variables variables_0)
		{
			string text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\15.0\\Common\\InstallRoot";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null) != null)
			{
				variables_0.RutaOffice2013 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Office\\15.0\\Common\\InstallRoot";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null) != null)
			{
				variables_0.RutaOffice2013 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\15.0\\ClickToRun";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "InstallPath", (object)null) != null)
			{
				variables_0.RutaOffice2013 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "InstallPath", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Office\\15.0\\ClickToRun";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "InstallPath", (object)null) != null)
			{
				variables_0.RutaOffice2013 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "InstallPath", (object)null));
				return;
			}
			variables_0.RutaOffice2013 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\Microsoft Office\\Office15";
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Conversions.ToString(variables_0.RutaOffice2013)))
			{
				variables_0.RutaOffice2013 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + "\\Microsoft Office\\Office15";
			}
		}

		private static void smethod_10(ref Variables variables_0)
		{
			string text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\14.0\\Common\\InstallRoot";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null) != null)
			{
				variables_0.RutaOffice2010 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null));
				return;
			}
			text = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Office\\14.0\\Common\\InstallRoot";
			if (((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null) != null)
			{
				variables_0.RutaOffice2010 = RuntimeHelpers.GetObjectValue(((ServerComputer)Class79.smethod_0()).get_Registry().GetValue(text, "Path", (object)null));
				return;
			}
			variables_0.RutaOffice2010 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\Microsoft Office\\Office14";
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Conversions.ToString(variables_0.RutaOffice2010)))
			{
				variables_0.RutaOffice2010 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + "\\Microsoft Office\\Office14";
			}
		}

		private static void smethod_11(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendLine("Name: " + softwareLicensingProduct_0.Name);
			stringBuilder.AppendLine("Description: " + softwareLicensingProduct_0.Description);
			stringBuilder.AppendLine("GracePeriodRemaining: " + Conversions.ToString(softwareLicensingProduct_0.GracePeriodRemaining));
			stringBuilder.AppendLine("LicenseStatus: " + Conversions.ToString(softwareLicensingProduct_0.LicenseStatus));
			stringBuilder.AppendLine("PartialProductKey: " + softwareLicensingProduct_0.PartialProductKey);
			if (variables_0.IsWindows10 || variables_0.IsWindows81 || variables_0.IsWindows8)
			{
				stringBuilder.AppendLine("GenuineStatus: " + Conversions.ToString(softwareLicensingProduct_0.GenuineStatus));
			}
			FileLogger logger = variables_0.Logger;
			string message = stringBuilder.ToString();
			logger.LogMessage(ref message);
		}

		private static void smethod_12(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendLine("Name: " + officeSoftwareProtectionProduct_0.Name);
			stringBuilder.AppendLine("Description: " + officeSoftwareProtectionProduct_0.Description);
			stringBuilder.AppendLine("GracePeriodRemaining: " + Conversions.ToString(officeSoftwareProtectionProduct_0.GracePeriodRemaining));
			stringBuilder.AppendLine("LicenseStatus: " + Conversions.ToString(officeSoftwareProtectionProduct_0.LicenseStatus));
			stringBuilder.AppendLine("PartialProductKey: " + officeSoftwareProtectionProduct_0.PartialProductKey);
			FileLogger logger = variables_0.Logger;
			string message = stringBuilder.ToString();
			logger.LogMessage(ref message);
		}

		private static uint smethod_13(uint uint_0)
		{
			object obj = 1440;
			return Conversions.ToUInteger(Conversion.Int(Operators.DivideObject(Operators.SubtractObject(Operators.AddObject((object)uint_0, obj), (object)1), obj)));
		}

		private static string smethod_14(ref SoftwareLicensingProduct softwareLicensingProduct_0)
		{
			uint gracePeriodRemaining = softwareLicensingProduct_0.GracePeriodRemaining;
			uint num = smethod_13(gracePeriodRemaining);
			bool flag = Class17.smethod_31(softwareLicensingProduct_0.Description);
			string empty = string.Empty;
			uint licenseStatus = softwareLicensingProduct_0.LicenseStatus;
			if ((long)licenseStatus == 0L)
			{
				return "License Status: Unlicensed";
			}
			if ((long)licenseStatus == 1L)
			{
				if ((long)gracePeriodRemaining == 0L)
				{
					return "Permanent Activated";
				}
				empty = ((!flag) ? Strings.Replace("Volume activation expiration: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0) : Strings.Replace("Timebased activation expiration: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0));
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 2L)
			{
				empty = "License Status: Initial grace period";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 3L)
			{
				empty = "License Status: Additional grace period (KMS license expired or hardware out of tolerance)";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 4L)
			{
				empty = "License Status: Non-genuine grace period.";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 5L)
			{
				empty = "License Status: Notification";
				string text = Conversion.Hex(softwareLicensingProduct_0.LicenseStatusReason);
				_ = softwareLicensingProduct_0.LicenseStatusReason;
				_ = softwareLicensingProduct_0.LicenseStatusReason;
				return Strings.Replace("Notification Reason: 0x%ERRCODE%.", "%ERRCODE%", text, 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 6L)
			{
				empty = "License Status: Extended grace period";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			return "License Status: Unknown";
		}

		private static string smethod_15(OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0)
		{
			uint gracePeriodRemaining = officeSoftwareProtectionProduct_0.GracePeriodRemaining;
			uint num = smethod_13(gracePeriodRemaining);
			bool flag = Class17.smethod_31(officeSoftwareProtectionProduct_0.Description);
			string empty = string.Empty;
			uint licenseStatus = officeSoftwareProtectionProduct_0.LicenseStatus;
			if ((long)licenseStatus == 0L)
			{
				return "License Status: Unlicensed";
			}
			if ((long)licenseStatus == 1L)
			{
				if ((long)gracePeriodRemaining == 0L)
				{
					return "Permanent Activated";
				}
				empty = ((!flag) ? Strings.Replace("Volume activation expiration: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0) : Strings.Replace("Timebased activation expiration: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0));
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 2L)
			{
				empty = "License Status: Initial grace period";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 3L)
			{
				empty = "License Status: Additional grace period (KMS license expired or hardware out of tolerance)";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 4L)
			{
				empty = "License Status: Non-genuine grace period.";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 5L)
			{
				empty = "License Status: Notification";
				string text = Conversion.Hex(officeSoftwareProtectionProduct_0.LicenseStatusReason);
				_ = officeSoftwareProtectionProduct_0.LicenseStatusReason;
				_ = officeSoftwareProtectionProduct_0.LicenseStatusReason;
				return Strings.Replace("Notification Reason: 0x%ERRCODE%.", "%ERRCODE%", text, 1, -1, (CompareMethod)0);
			}
			if ((long)licenseStatus == 6L)
			{
				empty = "License Status: Extended grace period";
				empty = Strings.Replace("Time remaining: %MINUTE% minute(s) (%DAY% day(s))", "%MINUTE%", Conversions.ToString(gracePeriodRemaining), 1, -1, (CompareMethod)0);
				return Strings.Replace(empty, "%DAY%", Conversions.ToString(num), 1, -1, (CompareMethod)0);
			}
			return "License Status: Unknown";
		}

		private static string smethod_16(uint uint_0)
		{
			return uint_0 switch
			{
				0u => "Unlicensed", 
				1u => "Licensed", 
				2u => "Out-Of-Box Grace Period", 
				3u => "Out-Of-Tolerance Grace Period", 
				4u => "Non-Genuine Grace Period", 
				5u => "Notification", 
				6u => "Extended Grace", 
				_ => "Unknown value", 
			};
		}

		private static string smethod_17(uint uint_0)
		{
			return uint_0 switch
			{
				1u => "Non Activated", 
				0u => "Genuine Activated", 
				_ => "Unknown value", 
			};
		}
	}
	public class Cliente
	{
		private delegate void Delegate0(IKMSClientSettings ikmsclientSettings_0);

		private readonly ILogger ilogger_0;

		private readonly IKMSClientSettings ikmsclientSettings_0;

		private bool bool_0;

		public bool Success
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		public Cliente(IKMSClientSettings settings, ILogger logger)
		{
			ikmsclientSettings_0 = settings;
			ilogger_0 = logger;
			Success = false;
		}

		public void Start()
		{
			KMSNetworkClient kMSNetworkClient = new KMSNetworkClient(ilogger_0);
			kMSNetworkClient.Execute(ikmsclientSettings_0);
			Success = kMSNetworkClient.Success;
		}
	}
	public class HostServer
	{
		public delegate void IpAddressChangedEventHandler(string mvalue);

		private readonly Class2 class2_0;

		private string string_0;

		[CompilerGenerated]
		private uint uint_0;

		[CompilerGenerated]
		private IpAddressChangedEventHandler ipAddressChangedEventHandler_0;

		public uint Port
		{
			[CompilerGenerated]
			get
			{
				return uint_0;
			}
			[CompilerGenerated]
			set
			{
				uint_0 = value;
			}
		}

		public string IpAddress
		{
			get
			{
				return string_0;
			}
			set
			{
				string text = string_0;
				string_0 = value;
				if (!text.Contains(string_0))
				{
					try
					{
						ipAddressChangedEventHandler_0?.Invoke(string_0);
					}
					catch (Exception projectError)
					{
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		public event IpAddressChangedEventHandler IpAddressChanged
		{
			[CompilerGenerated]
			add
			{
				IpAddressChangedEventHandler ipAddressChangedEventHandler = ipAddressChangedEventHandler_0;
				IpAddressChangedEventHandler ipAddressChangedEventHandler2;
				do
				{
					ipAddressChangedEventHandler2 = ipAddressChangedEventHandler;
					IpAddressChangedEventHandler value2 = (IpAddressChangedEventHandler)Delegate.Combine(ipAddressChangedEventHandler2, value);
					ipAddressChangedEventHandler = Interlocked.CompareExchange(ref ipAddressChangedEventHandler_0, value2, ipAddressChangedEventHandler2);
				}
				while ((object)ipAddressChangedEventHandler != ipAddressChangedEventHandler2);
			}
			[CompilerGenerated]
			remove
			{
				IpAddressChangedEventHandler ipAddressChangedEventHandler = ipAddressChangedEventHandler_0;
				IpAddressChangedEventHandler ipAddressChangedEventHandler2;
				do
				{
					ipAddressChangedEventHandler2 = ipAddressChangedEventHandler;
					IpAddressChangedEventHandler value2 = (IpAddressChangedEventHandler)Delegate.Remove(ipAddressChangedEventHandler2, value);
					ipAddressChangedEventHandler = Interlocked.CompareExchange(ref ipAddressChangedEventHandler_0, value2, ipAddressChangedEventHandler2);
				}
				while ((object)ipAddressChangedEventHandler != ipAddressChangedEventHandler2);
			}
		}

		public HostServer(string string_1, uint puerto)
		{
			class2_0 = null;
			string_0 = string_1;
			Port = puerto;
			class2_0 = class2_0;
		}

		public HostServer()
		{
			class2_0 = null;
			ResetIpForward();
		}

		public void ResetIpLocal()
		{
			string text = Conversions.ToString(127);
			string text2 = Conversions.ToString(Class2.smethod_2(0, 254));
			string text3 = Conversions.ToString(Class2.smethod_2(0, 254));
			string text4 = Conversions.ToString(Class2.smethod_2(2, 254));
			string_0 = $"{text:D3}.{text2:D3}.{text3:D3}.{text4:D3}";
			Port = 1688u;
		}

		public void ResetIpForward()
		{
			string text = Conversions.ToString(10);
			string text2 = Conversions.ToString(Class2.smethod_2(0, 254));
			string text3 = Conversions.ToString(Class2.smethod_2(0, 254));
			string text4 = Conversions.ToString(Class2.smethod_2(2, 254));
			string_0 = $"{text:D3}.{text2:D3}.{text3:D3}.{text4:D3}";
			Port = 1688u;
		}
	}
	public class RT2VL
	{
		private static bool smethod_0(ref string string_0, ref int int_0, ref bool bool_0, ref Variables variables_0)
		{
			try
			{
				ReadOnlyCollection<string> files = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
				{
					"*.xrm-ms"
				});
				foreach (string item in files)
				{
					try
					{
						string string_ = ((ServerComputer)Class79.smethod_0()).get_FileSystem().ReadAllText(item);
						checked
						{
							int_0++;
							FileLogger logger = variables_0.Logger;
							string message = "Installing License " + Conversions.ToString(int_0) + " for Windows";
							logger.LogMessage(ref message);
							SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
							bool_0 = Conversions.ToBoolean(Class17.smethod_44(ref softwareLicensingService_, ref string_, ref variables_0));
						}
						if (0u - (bool_0 ? 1u : 0u) != 0)
						{
							return false;
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger2 = variables_0.Logger;
						string message = "Error: " + str;
						logger2.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
				}
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger3 = variables_0.Logger;
				string message = "Error: " + str2;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			return true;
		}

		internal static bool smethod_1(ref Variables variables_0)
		{
			int int_ = 0;
			uint num = 1u;
			string text = "kmscertW";
			if (variables_0.IsWindows10)
			{
				text += "10";
			}
			else if (variables_0.IsWindows81)
			{
				text += "81";
			}
			else if (variables_0.IsWindows8)
			{
				text += "8";
			}
			else if (variables_0.IsWindows7)
			{
				text += "7";
			}
			else if (variables_0.IsWindowsVista)
			{
				text += "6";
			}
			string string_ = variables_0.DirectorioActual + "\\cert\\" + text;
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_))
			{
				bool bool_ = num != 0;
				bool num2 = smethod_0(ref string_, ref int_, ref bool_, ref variables_0);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num2)
				{
					return false;
				}
			}
			else
			{
				string_ = Environment.GetEnvironmentVariable("SystemRoot") + "\\System32\\spp\\tokens\\pkeyconfig";
				bool bool_ = num != 0;
				bool num3 = smethod_0(ref string_, ref int_, ref bool_, ref variables_0);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num3)
				{
					return false;
				}
			}
			string_ = variables_0.DirectorioActual + "\\cert\\" + text + "\\" + variables_0.EditionID;
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_))
			{
				bool bool_ = num != 0;
				bool num4 = smethod_0(ref string_, ref int_, ref bool_, ref variables_0);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num4)
				{
					return false;
				}
			}
			else
			{
				string_ = Environment.GetEnvironmentVariable("SystemRoot") + "\\System32\\spp\\tokens\\skus\\" + variables_0.EditionID;
				bool bool_ = num != 0;
				bool num5 = smethod_0(ref string_, ref int_, ref bool_, ref variables_0);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num5)
				{
					return false;
				}
			}
			return true;
		}

		private static bool smethod_2(ref string string_0, ref string string_1, ref int int_0, ref bool bool_0, ref Variables variables_0, bool bool_1 = false, ref string string_2 = "")
		{
			try
			{
				ReadOnlyCollection<string> readOnlyCollection = (string.IsNullOrEmpty(string_2) ? ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
				{
					"*.xrm-ms"
				}) : ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
				{
					smethod_27(ref string_2) + "*.xrm-ms"
				}));
				foreach (string item in readOnlyCollection)
				{
					try
					{
						string string_3 = ((ServerComputer)Class79.smethod_0()).get_FileSystem().ReadAllText(item);
						checked
						{
							int_0++;
							FileLogger logger = variables_0.Logger;
							string message = "Installing License " + Conversions.ToString(int_0) + " for :" + string_1;
							logger.LogMessage(ref message);
							if (!bool_1)
							{
								if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
								{
									if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
									{
										OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
										bool_0 = Conversions.ToBoolean(Class17.smethod_45(ref officeSoftwareProtectionService_, ref string_3, ref variables_0));
									}
								}
								else
								{
									SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
									bool_0 = Conversions.ToBoolean(Class17.smethod_44(ref softwareLicensingService_, ref string_3, ref variables_0));
								}
							}
							else
							{
								OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
								bool_0 = Conversions.ToBoolean(Class17.smethod_45(ref officeSoftwareProtectionService_, ref string_3, ref variables_0));
							}
						}
						if (0u - (bool_0 ? 1u : 0u) != 0)
						{
							return false;
						}
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger2 = variables_0.Logger;
						string message = "Error: " + str;
						logger2.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
				}
				smethod_26(ref string_0, ref variables_0);
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger3 = variables_0.Logger;
				string message = "Error: " + str2;
				logger3.LogMessage(ref message);
				bool result = false;
				ProjectData.ClearProjectError();
				return result;
			}
			return true;
		}

		internal static bool smethod_3(ref string string_0, ref Variables variables_0, ref string string_1 = "")
		{
			int int_ = 0;
			uint num = 1u;
			string string_2 = variables_0.DirectorioActual + "\\cert\\kmscert2016";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_2))
			{
				bool bool_ = num != 0;
				string string_3 = "";
				bool num2 = smethod_2(ref string_2, ref string_0, ref int_, ref bool_, ref variables_0, bool_1: false, ref string_3);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num2)
				{
					return false;
				}
			}
			string_2 = variables_0.DirectorioActual + "\\cert\\kmscert2016\\" + string_0;
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_2))
			{
				bool bool_ = num != 0;
				string string_3 = "";
				bool num3 = smethod_2(ref string_2, ref string_0, ref int_, ref bool_, ref variables_0, bool_1: false, ref string_3);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num3)
				{
					return false;
				}
			}
			if (!string.IsNullOrEmpty(string_1))
			{
				string_2 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\Microsoft Office\\root\\Licenses16";
				if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_2))
				{
					string_2 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + "\\Microsoft Office\\root\\Licenses16";
				}
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_2))
				{
					bool bool_ = num != 0;
					bool num4 = smethod_2(ref string_2, ref string_0, ref int_, ref bool_, ref variables_0, bool_1: false, ref string_1);
					num = 0u - (bool_ ? 1u : 0u);
					if (!num4)
					{
						return false;
					}
				}
			}
			return true;
		}

		internal static bool smethod_4(ref string string_0, ref Variables variables_0)
		{
			int int_ = 0;
			uint num = 1u;
			string string_ = variables_0.DirectorioActual + "\\cert\\kmscert2013";
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_))
			{
				bool bool_ = num != 0;
				string string_2 = "";
				bool num2 = smethod_2(ref string_, ref string_0, ref int_, ref bool_, ref variables_0, bool_1: false, ref string_2);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num2)
				{
					return false;
				}
			}
			string_ = variables_0.DirectorioActual + "\\cert\\kmscert2013\\" + string_0;
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_))
			{
				bool bool_ = num != 0;
				string string_2 = "";
				bool num3 = smethod_2(ref string_, ref string_0, ref int_, ref bool_, ref variables_0, bool_1: false, ref string_2);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num3)
				{
					return false;
				}
			}
			return true;
		}

		public static bool InstallCertVLOffice2010(ref string folder, ref Variables variables)
		{
			int int_ = 0;
			uint num = 1u;
			string string_ = variables.DirectorioActual + "\\cert\\kmscert2010\\" + folder;
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_))
			{
				bool bool_ = num != 0;
				string string_2 = "";
				bool num2 = smethod_2(ref string_, ref folder, ref int_, ref bool_, ref variables, bool_1: true, ref string_2);
				num = 0u - (bool_ ? 1u : 0u);
				if (!num2)
				{
					return false;
				}
			}
			return true;
		}

		internal static bool smethod_5(ref string string_0, ref bool bool_0, ref bool bool_1, ref bool bool_2, ref Variables variables_0)
		{
			string text = string.Empty;
			if (bool_0)
			{
				text = variables_0.DirectorioActual + "\\cert\\kmscert2016\\" + string_0;
			}
			else if (bool_1)
			{
				text = variables_0.DirectorioActual + "\\cert\\kmscert2013\\" + string_0;
			}
			else if (bool_2)
			{
				text = variables_0.DirectorioActual + "\\cert\\kmscert2010\\" + string_0;
			}
			bool num = ((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(text);
			string message;
			if (num)
			{
				FileLogger logger = variables_0.Logger;
				message = "Folder Found: " + text;
				logger.LogMessage(ref message);
				return num;
			}
			FileLogger logger2 = variables_0.Logger;
			message = "Error: Folder Not Found: " + text + " cant convert to VL";
			logger2.LogMessage(ref message);
			return num;
		}

		internal static void smethod_6(ref bool bool_0, ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref bool bool_1, ref bool bool_2, ref bool bool_3, ref List<OfficeSoftwareProtectionProduct> list_0, ref Variables variables_0)
		{
			string string_ = string.Empty;
			if (bool_1)
			{
				string string_2 = officeSoftwareProtectionProduct_0.Name;
				string_ = smethod_27(ref string_2);
			}
			else if (bool_2)
			{
				string string_2 = officeSoftwareProtectionProduct_0.Name;
				string_ = smethod_28(ref string_2);
			}
			else if (bool_3)
			{
				string string_2 = officeSoftwareProtectionProduct_0.Name;
				string_ = smethod_29(ref string_2);
			}
			if (smethod_5(ref string_, ref bool_1, ref bool_2, ref bool_3, ref variables_0))
			{
				Class3.smethod_28(ref list_0, ref officeSoftwareProtectionProduct_0);
				bool_0 = true;
			}
		}

		internal static void smethod_7(ref bool bool_0, SoftwareLicensingProduct softwareLicensingProduct_0, ref bool bool_1, ref bool bool_2, ref List<SoftwareLicensingProduct> list_0, ref Variables variables_0)
		{
			string string_ = string.Empty;
			if (bool_1)
			{
				string string_2 = softwareLicensingProduct_0.Name;
				string_ = smethod_27(ref string_2);
			}
			else if (bool_2)
			{
				string string_2 = softwareLicensingProduct_0.Name;
				string_ = smethod_28(ref string_2);
			}
			bool bool_3 = false;
			if (smethod_5(ref string_, ref bool_1, ref bool_2, ref bool_3, ref variables_0))
			{
				Class3.smethod_27(ref list_0, ref softwareLicensingProduct_0);
				bool_0 = true;
			}
		}

		internal static void smethod_8(ref bool bool_0, SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
		{
			string string_ = softwareLicensingProduct_0.Name;
			if (!string_.Contains("Core") && !string_.Contains("Professional") && !string_.Contains("Enterprise") && !string_.Contains("Essentials") && !string_.Contains("Embedded") && !string_.Contains("Business") && !string_.Contains("Standard") && !string_.Contains("Datacenter") && !string_.Contains("Country") && !string_.Contains("Premium") && !string_.Contains("HPC") && !string_.Contains("ServerCloudStorageCore") && !string_.Contains("ServerCloudStorage") && !string_.Contains("ServerSolutionCore") && !string_.Contains("ServerSolution") && !string_.Contains("Web"))
			{
				Class3.smethod_15(ref variables_0, ref string_);
			}
			else
			{
				if (!Class17.smethod_27(softwareLicensingProduct_0.Description))
				{
					Key.smethod_11(ref softwareLicensingProduct_0, bool_0: true, ref variables_0);
				}
				bool_0 = true;
			}
			if (bool_0)
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				Class17.smethod_36(ref softwareLicensingService_, ref variables_0);
				Check.smethod_2(ref variables_0);
			}
		}

		internal static void smethod_9(ref List<SoftwareLicensingProduct> list_0, ref Variables variables_0)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Converting Office 2016 products: " + Conversions.ToString(list_0.Count);
			logger.LogMessage(ref message);
			bool bool_ = true;
			Class10.smethod_8(ref bool_, ref variables_0);
			smethod_11(ref list_0, ref variables_0);
			list_0.Clear();
			Check.smethod_3(ref variables_0);
		}

		internal static void smethod_10(ref List<OfficeSoftwareProtectionProduct> list_0, ref Variables variables_0)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Converting Office 2016 products: " + Conversions.ToString(list_0.Count);
			logger.LogMessage(ref message);
			bool bool_ = true;
			Class10.smethod_8(ref bool_, ref variables_0);
			smethod_12(ref list_0, ref variables_0);
			list_0.Clear();
			Check.smethod_3(ref variables_0);
		}

		internal static void smethod_11(ref List<SoftwareLicensingProduct> list_0, ref Variables variables_0)
		{
			while (list_0.Count > 0)
			{
				SoftwareLicensingProduct softwareLicensingProduct_ = Enumerable.ElementAt<SoftwareLicensingProduct>((IEnumerable<SoftwareLicensingProduct>)list_0, 0);
				string string_ = softwareLicensingProduct_.Name;
				string string_2 = smethod_27(ref string_);
				bool bool_ = true;
				bool bool_2 = false;
				bool bool_3 = false;
				if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(softwareLicensingProduct_.Description))
				{
					FileLogger logger = variables_0.Logger;
					string_ = "Converting " + softwareLicensingProduct_.Name + " ...";
					logger.LogMessage(ref string_);
					string_ = softwareLicensingProduct_.Name;
					if (smethod_3(ref string_2, ref variables_0, ref string_))
					{
						Key.smethod_11(ref softwareLicensingProduct_, bool_0: false, ref variables_0);
					}
				}
				list_0.Remove(softwareLicensingProduct_);
			}
		}

		internal static void smethod_12(ref List<OfficeSoftwareProtectionProduct> list_0, ref Variables variables_0)
		{
			while (list_0.Count > 0)
			{
				OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = Enumerable.ElementAt<OfficeSoftwareProtectionProduct>((IEnumerable<OfficeSoftwareProtectionProduct>)list_0, 0);
				string string_ = officeSoftwareProtectionProduct_.Name;
				string string_2 = smethod_27(ref string_);
				bool bool_ = true;
				bool bool_2 = false;
				bool bool_3 = false;
				if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(officeSoftwareProtectionProduct_.Description))
				{
					FileLogger logger = variables_0.Logger;
					string_ = "Converting " + officeSoftwareProtectionProduct_.Name + " ...";
					logger.LogMessage(ref string_);
					string_ = officeSoftwareProtectionProduct_.Name;
					if (smethod_3(ref string_2, ref variables_0, ref string_))
					{
						Key.smethod_14(ref officeSoftwareProtectionProduct_, ref variables_0);
					}
				}
				list_0.Remove(officeSoftwareProtectionProduct_);
			}
		}

		internal static void smethod_13(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
		{
			string string_ = softwareLicensingProduct_0.Name;
			string string_2 = smethod_27(ref string_);
			bool bool_ = true;
			bool bool_2 = false;
			bool bool_3 = false;
			if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(softwareLicensingProduct_0.Description))
			{
				FileLogger logger = variables_0.Logger;
				string_ = "Converting " + softwareLicensingProduct_0.Name + " ...";
				logger.LogMessage(ref string_);
				string_ = softwareLicensingProduct_0.Name;
				if (smethod_3(ref string_2, ref variables_0, ref string_))
				{
					Key.smethod_11(ref softwareLicensingProduct_0, bool_0: false, ref variables_0);
				}
			}
			Check.smethod_3(ref variables_0);
		}

		internal static void smethod_14(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
		{
			string string_ = officeSoftwareProtectionProduct_0.Name;
			string string_2 = smethod_27(ref string_);
			bool bool_ = true;
			bool bool_2 = false;
			bool bool_3 = false;
			if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(officeSoftwareProtectionProduct_0.Description))
			{
				FileLogger logger = variables_0.Logger;
				string_ = "Converting " + officeSoftwareProtectionProduct_0.Name + " ...";
				logger.LogMessage(ref string_);
				string_ = officeSoftwareProtectionProduct_0.Name;
				smethod_3(ref string_2, ref variables_0, ref string_);
				Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
			}
			Check.smethod_3(ref variables_0);
		}

		internal static void smethod_15(ref string string_0, ref Variables variables_0)
		{
			string string_ = smethod_27(ref string_0);
			bool bool_ = true;
			bool bool_2 = false;
			bool bool_3 = false;
			if (smethod_5(ref string_, ref bool_, ref bool_2, ref bool_3, ref variables_0))
			{
				FileLogger logger = variables_0.Logger;
				string message = "Converting " + string_0 + " ...";
				logger.LogMessage(ref message);
				smethod_3(ref string_, ref variables_0, ref string_0);
				Key.smethod_12(ref string_0, ref variables_0);
			}
			Check.smethod_3(ref variables_0);
		}

		internal static void smethod_16(ref List<SoftwareLicensingProduct> list_0, ref Variables variables_0)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Converting Office 2013 products: " + Conversions.ToString(list_0.Count);
			logger.LogMessage(ref message);
			bool bool_ = true;
			Class10.smethod_9(ref bool_, ref variables_0);
			smethod_18(ref list_0, ref variables_0);
			list_0.Clear();
			Check.smethod_4(ref variables_0);
		}

		internal static void smethod_17(ref List<OfficeSoftwareProtectionProduct> list_0, ref Variables variables_0)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Converting Office 2013 products: " + Conversions.ToString(list_0.Count);
			logger.LogMessage(ref message);
			bool bool_ = true;
			Class10.smethod_9(ref bool_, ref variables_0);
			smethod_19(ref list_0, ref variables_0);
			list_0.Clear();
			Check.smethod_4(ref variables_0);
		}

		internal static void smethod_18(ref List<SoftwareLicensingProduct> list_0, ref Variables variables_0)
		{
			while (list_0.Count > 0)
			{
				SoftwareLicensingProduct softwareLicensingProduct_ = Enumerable.ElementAt<SoftwareLicensingProduct>((IEnumerable<SoftwareLicensingProduct>)list_0, 0);
				string string_ = softwareLicensingProduct_.Name;
				string string_2 = smethod_28(ref string_);
				bool bool_ = false;
				bool bool_2 = true;
				bool bool_3 = false;
				if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(softwareLicensingProduct_.Description))
				{
					FileLogger logger = variables_0.Logger;
					string_ = "Converting " + softwareLicensingProduct_.Name + " ...";
					logger.LogMessage(ref string_);
					if (smethod_4(ref string_2, ref variables_0))
					{
						Key.smethod_11(ref softwareLicensingProduct_, bool_0: false, ref variables_0);
					}
				}
				list_0.Remove(softwareLicensingProduct_);
			}
		}

		internal static void smethod_19(ref List<OfficeSoftwareProtectionProduct> list_0, ref Variables variables_0)
		{
			while (list_0.Count > 0)
			{
				OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = Enumerable.ElementAt<OfficeSoftwareProtectionProduct>((IEnumerable<OfficeSoftwareProtectionProduct>)list_0, 0);
				string string_ = officeSoftwareProtectionProduct_.Name;
				string string_2 = smethod_28(ref string_);
				bool bool_ = false;
				bool bool_2 = true;
				bool bool_3 = false;
				if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(officeSoftwareProtectionProduct_.Description))
				{
					FileLogger logger = variables_0.Logger;
					string_ = "Converting " + officeSoftwareProtectionProduct_.Name + " ...";
					logger.LogMessage(ref string_);
					if (smethod_4(ref string_2, ref variables_0))
					{
						Key.smethod_14(ref officeSoftwareProtectionProduct_, ref variables_0);
					}
				}
				list_0.Remove(officeSoftwareProtectionProduct_);
			}
		}

		internal static void smethod_20(ref SoftwareLicensingProduct softwareLicensingProduct_0, ref Variables variables_0)
		{
			string string_ = softwareLicensingProduct_0.Name;
			string string_2 = smethod_28(ref string_);
			bool bool_ = false;
			bool bool_2 = true;
			bool bool_3 = false;
			if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(softwareLicensingProduct_0.Description))
			{
				FileLogger logger = variables_0.Logger;
				string_ = "Converting " + softwareLicensingProduct_0.Name + " ...";
				logger.LogMessage(ref string_);
				if (smethod_4(ref string_2, ref variables_0))
				{
					Key.smethod_11(ref softwareLicensingProduct_0, bool_0: false, ref variables_0);
				}
			}
			Check.smethod_4(ref variables_0);
		}

		internal static void smethod_21(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
		{
			string string_ = officeSoftwareProtectionProduct_0.Name;
			string string_2 = smethod_28(ref string_);
			bool bool_ = false;
			bool bool_2 = true;
			bool bool_3 = false;
			if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(officeSoftwareProtectionProduct_0.Description))
			{
				FileLogger logger = variables_0.Logger;
				string_ = "Converting " + officeSoftwareProtectionProduct_0.Name + " ...";
				logger.LogMessage(ref string_);
				smethod_4(ref string_2, ref variables_0);
				Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
			}
			Check.smethod_4(ref variables_0);
		}

		internal static void smethod_22(ref string string_0, ref Variables variables_0)
		{
			string string_ = smethod_28(ref string_0);
			bool bool_ = false;
			bool bool_2 = true;
			bool bool_3 = false;
			if (smethod_5(ref string_, ref bool_, ref bool_2, ref bool_3, ref variables_0))
			{
				FileLogger logger = variables_0.Logger;
				string message = "Converting " + string_0 + " ...";
				logger.LogMessage(ref message);
				smethod_4(ref string_, ref variables_0);
				Key.smethod_12(ref string_0, ref variables_0);
			}
			Check.smethod_4(ref variables_0);
		}

		internal static void smethod_23(ref List<OfficeSoftwareProtectionProduct> list_0, ref Variables variables_0)
		{
			while (list_0.Count > 0)
			{
				OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_ = Enumerable.ElementAt<OfficeSoftwareProtectionProduct>((IEnumerable<OfficeSoftwareProtectionProduct>)list_0, 0);
				string string_ = officeSoftwareProtectionProduct_.Name;
				string string_2 = smethod_29(ref string_);
				bool bool_ = false;
				bool bool_2 = false;
				bool bool_3 = true;
				if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(officeSoftwareProtectionProduct_.Description))
				{
					FileLogger logger = variables_0.Logger;
					string_ = "Converting " + officeSoftwareProtectionProduct_.Name + " ...";
					logger.LogMessage(ref string_);
					InstallCertVLOffice2010(ref string_2, ref variables_0);
					Key.smethod_14(ref officeSoftwareProtectionProduct_, ref variables_0);
				}
				list_0.Remove(officeSoftwareProtectionProduct_);
			}
			list_0.Clear();
			Check.smethod_6(ref variables_0);
		}

		internal static void smethod_24(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
		{
			string string_ = officeSoftwareProtectionProduct_0.Name;
			string string_2 = smethod_29(ref string_);
			bool bool_ = false;
			bool bool_2 = false;
			bool bool_3 = true;
			if (smethod_5(ref string_2, ref bool_, ref bool_2, ref bool_3, ref variables_0) && !Class17.smethod_27(officeSoftwareProtectionProduct_0.Description))
			{
				FileLogger logger = variables_0.Logger;
				string_ = "Converting " + officeSoftwareProtectionProduct_0.Name + " ...";
				logger.LogMessage(ref string_);
				InstallCertVLOffice2010(ref string_2, ref variables_0);
				Key.smethod_14(ref officeSoftwareProtectionProduct_0, ref variables_0);
			}
			Check.smethod_6(ref variables_0);
		}

		internal static void smethod_25(ref string string_0, ref Variables variables_0)
		{
			string string_ = smethod_29(ref string_0);
			bool bool_ = false;
			bool bool_2 = false;
			bool bool_3 = true;
			if (smethod_5(ref string_, ref bool_, ref bool_2, ref bool_3, ref variables_0))
			{
				FileLogger logger = variables_0.Logger;
				string message = "Converting " + string_0 + " ...";
				logger.LogMessage(ref message);
				InstallCertVLOffice2010(ref string_, ref variables_0);
				Key.smethod_12(ref string_0, ref variables_0);
			}
			Check.smethod_6(ref variables_0);
		}

		private static void smethod_26(ref string string_0, ref Variables variables_0)
		{
			ReadOnlyCollection<string> files = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
			{
				"*.reg"
			});
			FileLogger logger = variables_0.Logger;
			string message = "Installing .reg files";
			logger.LogMessage(ref message);
			foreach (string item in files)
			{
				try
				{
					ArrayList arrayList_ = new ArrayList();
					arrayList_.Add("/S");
					arrayList_.Add("\"" + item + "\"");
					message = "regedit.exe";
					string[] string_ = Class2.smethod_0(ref variables_0, ref message);
					bool bool_ = true;
					Class3.smethod_1(ref string_, ref arrayList_, ref variables_0, ref bool_);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger2 = variables_0.Logger;
					message = "Error: " + str;
					logger2.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
			}
		}

		internal static string smethod_27(ref string string_0)
		{
			string empty = string.Empty;
			if (string_0.Contains("Office16ProPlus"))
			{
				return "ProPlus";
			}
			if (string_0.Contains("Office16Std"))
			{
				return "Standard";
			}
			if (string_0.Contains("Office16Professional"))
			{
				return "ProPlus";
			}
			if (string_0.Contains("Office16ProjectPro"))
			{
				return "ProjectPro";
			}
			if (string_0.Contains("Office16ProjectStd"))
			{
				return "ProjectStd";
			}
			if (string_0.Contains("Office16VisioPro"))
			{
				return "VisioPro";
			}
			if (string_0.Contains("Office16VisioStd"))
			{
				return "VisioStd";
			}
			if (string_0.Contains("Office16Access"))
			{
				return "Access";
			}
			if (string_0.Contains("Office16Excel"))
			{
				return "Excel";
			}
			if (string_0.Contains("Office16InfoPath"))
			{
				return "InfoPath";
			}
			if (string_0.Contains("Office16Lync"))
			{
				return "Lync";
			}
			if (string_0.Contains("Office16OneNote"))
			{
				return "OneNote";
			}
			if (string_0.Contains("Office16Outlook"))
			{
				return "Outlook";
			}
			if (string_0.Contains("Office16PowerPoint"))
			{
				return "PowerPoint";
			}
			if (string_0.Contains("Office16Publisher"))
			{
				return "Publisher";
			}
			if (string_0.Contains("Office16Word"))
			{
				return "Word";
			}
			if (string_0.Contains("Office16Mondo"))
			{
				return "Mondo";
			}
			if (string_0.Contains("Office16SkypeforBusiness"))
			{
				return "SkypeforBusiness";
			}
			return "NonSupported";
		}

		internal static string smethod_28(ref string string_0)
		{
			string empty = string.Empty;
			if (string_0.Contains("OfficeProPlus"))
			{
				return "ProPlus";
			}
			if (string_0.Contains("OfficeStd"))
			{
				return "Standard";
			}
			if (string_0.Contains("OfficeProfessional"))
			{
				return "ProPlus";
			}
			if (string_0.Contains("OfficeProjectPro"))
			{
				return "ProjectPro";
			}
			if (string_0.Contains("OfficeProjectStd"))
			{
				return "ProjectStd";
			}
			if (string_0.Contains("OfficeVisioPro"))
			{
				return "VisioPro";
			}
			if (string_0.Contains("OfficeVisioStd"))
			{
				return "VisioStd";
			}
			if (string_0.Contains("OfficeAccess"))
			{
				return "Access";
			}
			if (string_0.Contains("OfficeExcel"))
			{
				return "Excel";
			}
			if (string_0.Contains("OfficeInfoPath"))
			{
				return "InfoPath";
			}
			if (string_0.Contains("OfficeLync"))
			{
				return "Lync";
			}
			if (string_0.Contains("OfficeOneNote"))
			{
				return "OneNote";
			}
			if (string_0.Contains("OfficeOutlook"))
			{
				return "Outlook";
			}
			if (string_0.Contains("OfficePowerPoint"))
			{
				return "PowerPoint";
			}
			if (string_0.Contains("OfficePublisher"))
			{
				return "Publisher";
			}
			if (string_0.Contains("OfficeWord"))
			{
				return "Word";
			}
			return "NonSupported";
		}

		internal static string smethod_29(ref string string_0)
		{
			string empty = string.Empty;
			if (string_0.Contains("OfficeProPlus"))
			{
				return "ProPlus";
			}
			if (string_0.Contains("OfficeStd"))
			{
				return "Standard";
			}
			if (string_0.Contains("OfficeProjectPro"))
			{
				return "ProjectPro";
			}
			if (string_0.Contains("OfficeProjectStd"))
			{
				return "ProjectStd";
			}
			if (string_0.Contains("OfficeVisioPro"))
			{
				return "Visio";
			}
			if (string_0.Contains("OfficeVisioStd"))
			{
				return "Visio";
			}
			if (string_0.Contains("OfficeVisioPrem"))
			{
				return "Visio";
			}
			if (string_0.Contains("OfficeAccess"))
			{
				return "Access";
			}
			if (string_0.Contains("OfficeExcel"))
			{
				return "Excel";
			}
			if (string_0.Contains("OfficeInfoPath"))
			{
				return "InfoPath";
			}
			if (string_0.Contains("OfficeGroove"))
			{
				return "Groove";
			}
			if (string_0.Contains("OfficeOneNote"))
			{
				return "OneNote";
			}
			if (string_0.Contains("OfficeOutlook"))
			{
				return "Outlook";
			}
			if (string_0.Contains("OfficePowerPoint"))
			{
				return "PowerPoint";
			}
			if (string_0.Contains("OfficePublisher"))
			{
				return "Publisher";
			}
			if (string_0.Contains("OfficeWord"))
			{
				return "Word";
			}
			if (string_0.Contains("OfficeSmallBusBasics"))
			{
				return "SmallBusBasics";
			}
			return "NonSupported";
		}
	}
	public class TakeOwner
	{
		internal static void smethod_0(ref string string_0, ref Variables variables_0)
		{
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_0))
			{
				return;
			}
			try
			{
				ReadOnlyCollection<string> files = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)3, new string[1]
				{
					"*.dat"
				});
				string string_ = "takeown.exe";
				string[] string_2 = Class2.smethod_0(ref variables_0, ref string_);
				string_ = "icacls.exe";
				string[] string_3 = Class2.smethod_0(ref variables_0, ref string_);
				foreach (string item in files)
				{
					try
					{
						ArrayList arrayList_ = new ArrayList();
						arrayList_.Add("/f");
						arrayList_.Add(item);
						bool bool_ = true;
						Class3.smethod_1(ref string_2, ref arrayList_, ref variables_0, ref bool_);
						arrayList_.Clear();
						arrayList_.Add(item);
						arrayList_.Add("/grant :r");
						arrayList_.Add("administrators:(d,f)");
						bool_ = true;
						Class3.smethod_1(ref string_3, ref arrayList_, ref variables_0, ref bool_);
						arrayList_.Clear();
						arrayList_.Add(item);
						arrayList_.Add("/grant :r");
						arrayList_.Add("*S-1-1-0:(d,f)");
						bool_ = true;
						Class3.smethod_1(ref string_3, ref arrayList_, ref variables_0, ref bool_);
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger = variables_0.Logger;
						string_ = "Error: " + str;
						logger.LogMessage(ref string_);
						ProjectData.ClearProjectError();
					}
				}
			}
			catch (Exception ex2)
			{
				ProjectData.SetProjectError(ex2);
				Exception exception_2 = ex2;
				string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				FileLogger logger2 = variables_0.Logger;
				string string_ = "Error: " + str2;
				logger2.LogMessage(ref string_);
				ProjectData.ClearProjectError();
			}
		}

		internal static void smethod_1(ref string string_0, ref Variables variables_0)
		{
			//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00da: Invalid comparison between Unknown and I4
			//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(string_0))
			{
				return;
			}
			try
			{
				string string_ = "takeown.exe";
				string[] string_2 = Class2.smethod_0(ref variables_0, ref string_);
				string_ = "icacls.exe";
				string[] string_3 = Class2.smethod_0(ref variables_0, ref string_);
				ArrayList arrayList_ = new ArrayList();
				arrayList_.Add("/f");
				arrayList_.Add(string_0);
				bool bool_ = true;
				Class3.smethod_1(ref string_2, ref arrayList_, ref variables_0, ref bool_);
				arrayList_.Clear();
				arrayList_.Add(string_0);
				arrayList_.Add("/grant :r");
				arrayList_.Add("administrators:(d,f)");
				bool_ = true;
				Class3.smethod_1(ref string_3, ref arrayList_, ref variables_0, ref bool_);
				arrayList_.Clear();
				arrayList_.Add(string_0);
				arrayList_.Add("/grant :r");
				arrayList_.Add("*S-1-1-0:(d,f)");
				bool_ = true;
				Class3.smethod_1(ref string_3, ref arrayList_, ref variables_0, ref bool_);
				FileAttributes attributes = File.GetAttributes(string_0);
				if ((attributes & 1) == 1)
				{
					attributes = smethod_2(attributes, (FileAttributes)1);
					File.SetAttributes(string_0, attributes);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string string_ = "Error: " + str;
				logger.LogMessage(ref string_);
				ProjectData.ClearProjectError();
			}
		}

		private static FileAttributes smethod_2(FileAttributes fileAttributes_0, FileAttributes fileAttributes_1)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0003: Unknown result type (might be due to invalid IL or missing references)
			return (FileAttributes)(fileAttributes_0 & ~fileAttributes_1);
		}
	}
	public class UndoGenuine
	{
		internal static void smethod_0(ref Variables variables_0)
		{
			if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
			{
				string string_ = "sppsvc";
				bool bool_ = false;
				bool bool_2 = true;
				Class2.smethod_1(ref string_, ref bool_, ref variables_0, ref bool_2);
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Environment.GetEnvironmentVariable("WinDir") + "\\System32"))
				{
					string_ = Environment.GetEnvironmentVariable("WinDir") + "\\System32";
					smethod_1(ref string_, ref variables_0);
				}
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Environment.GetEnvironmentVariable("WinDir") + "\\SysWOW64"))
				{
					string_ = Environment.GetEnvironmentVariable("WinDir") + "\\SysWOW64";
					smethod_1(ref string_, ref variables_0);
				}
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative"))
				{
					string_ = Environment.GetEnvironmentVariable("WinDir") + "\\Sysnative";
					smethod_1(ref string_, ref variables_0);
				}
				string_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows Activation Technologies";
				string string_2 = null;
				Class10.smethod_3(ref string_, ref string_2, ref variables_0);
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Environment.GetEnvironmentVariable("WinDir") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareProtectionPlatform"))
				{
					string_2 = Environment.GetEnvironmentVariable("WinDir") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareProtectionPlatform";
					Class3.smethod_5(ref string_2, ref variables_0);
				}
				if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(Environment.GetEnvironmentVariable("WinDir") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareLicensing"))
				{
					string_2 = Environment.GetEnvironmentVariable("WinDir") + "\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\SoftwareLicensing";
					Class3.smethod_5(ref string_2, ref variables_0);
				}
				string_2 = "Windows";
				Key.smethod_12(ref string_2, ref variables_0);
			}
		}

		private static bool smethod_1(ref string string_0, ref Variables variables_0)
		{
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Invalid comparison between Unknown and I4
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_0))
			{
				try
				{
					ReadOnlyCollection<string> files = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
					{
						"*.*"
					});
					if (files.Count > 0)
					{
						int num = 0;
						foreach (string item in files)
						{
							try
							{
								if (((FileSystemInfo)((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFileInfo(item)).get_Extension().Length == 37 && (int)((FileSystemInfo)((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFileInfo(item)).get_Attributes() == 34)
								{
									((ServerComputer)Class79.smethod_0()).get_FileSystem().DeleteFile(item, (UIOption)2, (RecycleOption)2, (UICancelOption)2);
									num = checked(num + 1);
								}
								if (num == 2)
								{
									return true;
								}
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception exception_ = ex;
								string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
								FileLogger logger = variables_0.Logger;
								string message = "Error: " + str;
								logger.LogMessage(ref message);
								ProjectData.ClearProjectError();
							}
						}
					}
				}
				catch (Exception projectError)
				{
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
				}
			}
			return false;
		}

		private static bool smethod_2(ref string string_0, ref Variables variables_0)
		{
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Invalid comparison between Unknown and I4
			if (((ServerComputer)Class79.smethod_0()).get_FileSystem().DirectoryExists(string_0))
			{
				try
				{
					ReadOnlyCollection<string> files = ((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFiles(string_0, (SearchOption)2, new string[1]
					{
						"*.*"
					});
					if (files.Count > 0)
					{
						foreach (string item in files)
						{
							try
							{
								if ((int)((FileSystemInfo)((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFileInfo(item)).get_Attributes() == 34)
								{
									((ServerComputer)Class79.smethod_0()).get_FileSystem().DeleteFile(item, (UIOption)2, (RecycleOption)2, (UICancelOption)2);
								}
							}
							catch (Exception ex)
							{
								ProjectData.SetProjectError(ex);
								Exception exception_ = ex;
								string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
								FileLogger logger = variables_0.Logger;
								string message = "Error: " + str;
								logger.LogMessage(ref message);
								ProjectData.ClearProjectError();
							}
						}
					}
				}
				catch (Exception ex2)
				{
					ProjectData.SetProjectError(ex2);
					Exception exception_2 = ex2;
					string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
					FileLogger logger2 = variables_0.Logger;
					string message = "Error: " + str2;
					logger2.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
			}
			return false;
		}
	}
	public class Variables
	{
		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct Programas
		{
			public const string RegEdit = "regedit.exe";

			public const string OsppRearm = "OSPPREARM.EXE";

			public const string Netstat = "NETSTAT.EXE";

			public const string Takeown = "takeown.exe";

			public const string Icacls = "icacls.exe";

			public const string SC = "sc.exe";

			public const string Route = "route.exe";

			public const string OpenVpnCert = "OpenVPN.cer";

			public const string OpenVpnExe = "tap-windows-9.21.0.exe";

			public const string Explorer = "explorer.exe";

			public const string McBuilder = "mcbuilder.exe";
		}

		public string DirectorioActual;

		public List<SoftwareLicensingProduct> ColeccionWindows;

		public List<SoftwareLicensingProduct> ColeccionOffice2016W8;

		public List<OfficeSoftwareProtectionProduct> ColeccionOffice2016W7;

		public List<SoftwareLicensingProduct> ColeccionOffice2013W8;

		public List<OfficeSoftwareProtectionProduct> ColeccionOffice2013W7;

		public List<OfficeSoftwareProtectionProduct> ColeccionOffice2010;

		public List<SoftwareLicensingProduct> ColeccionWindowsActivable;

		public List<SoftwareLicensingProduct> ColeccionOffice2016ActivableW8;

		public List<OfficeSoftwareProtectionProduct> ColeccionOffice2016ActivableW7;

		public List<SoftwareLicensingProduct> ColeccionOffice2013ActivableW8;

		public List<OfficeSoftwareProtectionProduct> ColeccionOffice2013ActivableW7;

		public List<OfficeSoftwareProtectionProduct> ColeccionOffice2010Activable;

		public List<SoftwareLicensingProduct> ColeccionRetailOffice2016W8;

		public List<OfficeSoftwareProtectionProduct> ColeccionRetailOffice2016W7;

		public List<SoftwareLicensingProduct> ColeccionRetailOffice2013W8;

		public List<OfficeSoftwareProtectionProduct> ColeccionRetailOffice2013W7;

		public List<OfficeSoftwareProtectionProduct> ColeccionRetailOffice2010;

		public bool IsWindows10;

		public bool IsWindows81;

		public bool IsWindows8;

		public bool IsWindows7;

		public bool IsWindowsVista;

		public bool IsWindowsXP;

		public bool IsServer;

		public bool IsPreview;

		public bool IsWindowsPermanentActivate;

		public bool IsOffice2016PermanentActivate;

		public bool IsOffice2013PermanentActivate;

		public bool IsOffice2010PermanentActivate;

		public string PartialPermanentOffice2016Key;

		public string PartialPermanentOffice2013Key;

		[AccessedThroughProperty("IsWindowsListo")]
		[CompilerGenerated]
		private BooleanEvent _IsWindowsListo;

		[AccessedThroughProperty("IsOffice2016Listo")]
		[CompilerGenerated]
		private BooleanEvent _IsOffice2016Listo;

		[AccessedThroughProperty("IsOffice2013Listo")]
		[CompilerGenerated]
		private BooleanEvent _IsOffice2013Listo;

		[AccessedThroughProperty("IsOffice2010Listo")]
		[CompilerGenerated]
		private BooleanEvent _IsOffice2010Listo;

		[AccessedThroughProperty("LogString")]
		[CompilerGenerated]
		private static StringEvent _LogString;

		public bool MoveCircularProgress;

		[AccessedThroughProperty("IsWindowsActivable")]
		[CompilerGenerated]
		private BooleanEvent _IsWindowsActivable;

		[AccessedThroughProperty("IsOffice2016Activable")]
		[CompilerGenerated]
		private BooleanEvent _IsOffice2016Activable;

		[AccessedThroughProperty("IsOffice2013Activable")]
		[CompilerGenerated]
		private BooleanEvent _IsOffice2013Activable;

		[CompilerGenerated]
		[AccessedThroughProperty("IsOffice2010Activable")]
		private BooleanEvent _IsOffice2010Activable;

		public BooleanEvent IsWindowsChecked;

		public BooleanEvent IsOffice2016Checked;

		public BooleanEvent IsOffice2013Checked;

		public BooleanEvent IsOffice2010Checked;

		public DateTime Tiempo;

		public const string Comilla = "\"";

		internal IActivateMetroForm iactivateMetroForm_0;

		public ArrayList RetailKeysWindows;

		public ArrayList RetailKeysOffice2016;

		public ArrayList RetailKeysOffice2013;

		public object RutaOffice2016;

		public object RutaOffice2013;

		public object RutaOffice2010;

		public bool PlaySound;

		public AudioFile AudioVerified;

		public AudioFile AudioTransfer;

		public AudioFile AudioComplete;

		public AudioFile AudioBegin;

		public AudioFile AudioWarning;

		public AudioFile AudioDiagnostic;

		public AudioFile AudioAffirmative;

		public AudioFile AudioEnterAuthorizationCode;

		public AudioFile AudioIncomingTransmission;

		public AudioFile AudioProcessing;

		public AudioFile AudioInputOk;

		public AudioFile AudioInputFailed;

		public Stack<AudioFile> Sonidos;

		public string[] ArgumentosConsola;

		public bool IsSilent;

		public bool IsBackup;

		public bool IsPaused;

		public bool IsCheckStatus;

		public bool IsGui;

		public bool ActivadorIniciado;

		public string DirectorioBackupTokens;

		public const uint VLActivationInterval = 43200u;

		public const uint VLRenewalInterval = 43200u;

		public const string WindowsAppId = "55c92734-d682-4d71-983e-d6ec3f16059f";

		public const string Office2016AppId = "0ff1ce15-a989-479d-af46-f275c6370663";

		public const string Office2013AppId = "0ff1ce15-a989-479d-af46-f275c6370663";

		public const string Office2010AppId = "59a52881-a989-479d-af46-f275c6370663";

		public readonly FileLogger Logger;

		public IFrmShowMessage ShowMessage;

		public string ProductName;

		public string EditionID;

		public string CurrentVersion;

		public string CurrentBuild;

		public bool makeTask;

		public bool noWin;

		public bool no2016;

		public bool no2013;

		public bool no2010;

		public bool InternetConnection;

		public bool RunAsService;

		public ManagementScope GObjWmiService;

		[CompilerGenerated]
		[AccessedThroughProperty("KmsHostForward")]
		private HostServer _KmsHostForward;

		[AccessedThroughProperty("KmsHostLocal")]
		[CompilerGenerated]
		private HostServer _KmsHostLocal;

		public HostServer[] ServersOnline;

		public int IntentosActivacion;

		public int IntentosCheckWindows;

		public int IntentosCheckOffice2016;

		public int IntentosCheckOffice2013;

		public int IntentosCheckOffice2010;

		public int IntentosWinDivert;

		public int IntentosTunTap;

		public int IntentosSecoh;

		public BooleanEvent IsTapDriver;

		public bool IsTapDriverLoaded;

		public BooleanEvent IsWinDivert;

		public bool IsWinDivertLoaded;

		public BooleanEvent IsSecohQad;

		public bool IsSecohQadLoaded;

		public string SystemRoot;

		public BooleanEvent IsOnline;

		public IKMSClientSettings ClientSettings;

		public bool firewallPortOpened;

		public bool firewallAppAdded;

		public TCPServer listener;

		public bool WaterMarkBasebrd;

		public bool WaterMarkShell32;

		public bool IsWaterMarkRemove;

		public bool IsWaterMarkRestore;

		public bool Closing;

		[field: AccessedThroughProperty("IsWindowsListo")]
		public virtual BooleanEvent IsWindowsListo
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("IsOffice2016Listo")]
		public virtual BooleanEvent IsOffice2016Listo
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("IsOffice2013Listo")]
		public virtual BooleanEvent IsOffice2013Listo
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("IsOffice2010Listo")]
		public virtual BooleanEvent IsOffice2010Listo
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("LogString")]
		public static StringEvent LogString
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		} = new StringEvent();


		[field: AccessedThroughProperty("IsWindowsActivable")]
		public virtual BooleanEvent IsWindowsActivable
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("IsOffice2016Activable")]
		public virtual BooleanEvent IsOffice2016Activable
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("IsOffice2013Activable")]
		public virtual BooleanEvent IsOffice2013Activable
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("IsOffice2010Activable")]
		public virtual BooleanEvent IsOffice2010Activable
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("KmsHostForward")]
		public virtual HostServer KmsHostForward
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		[field: AccessedThroughProperty("KmsHostLocal")]
		public virtual HostServer KmsHostLocal
		{
			get;
			[MethodImpl(MethodImplOptions.Synchronized)]
			set;
		}

		public Variables()
		{
			//IL_0336: Unknown result type (might be due to invalid IL or missing references)
			//IL_0340: Expected O, but got Unknown
			DirectorioActual = Class2.smethod_6();
			ColeccionWindows = new List<SoftwareLicensingProduct>();
			ColeccionOffice2016W8 = new List<SoftwareLicensingProduct>();
			ColeccionOffice2016W7 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionOffice2013W8 = new List<SoftwareLicensingProduct>();
			ColeccionOffice2013W7 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionOffice2010 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionWindowsActivable = new List<SoftwareLicensingProduct>();
			ColeccionOffice2016ActivableW8 = new List<SoftwareLicensingProduct>();
			ColeccionOffice2016ActivableW7 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionOffice2013ActivableW8 = new List<SoftwareLicensingProduct>();
			ColeccionOffice2013ActivableW7 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionOffice2010Activable = new List<OfficeSoftwareProtectionProduct>();
			ColeccionRetailOffice2016W8 = new List<SoftwareLicensingProduct>();
			ColeccionRetailOffice2016W7 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionRetailOffice2013W8 = new List<SoftwareLicensingProduct>();
			ColeccionRetailOffice2013W7 = new List<OfficeSoftwareProtectionProduct>();
			ColeccionRetailOffice2010 = new List<OfficeSoftwareProtectionProduct>();
			IsWindows10 = false;
			IsWindows81 = false;
			IsWindows8 = false;
			IsWindows7 = false;
			IsWindowsVista = false;
			IsWindowsXP = false;
			IsServer = false;
			IsPreview = false;
			IsWindowsPermanentActivate = false;
			IsOffice2016PermanentActivate = false;
			IsOffice2013PermanentActivate = false;
			IsOffice2010PermanentActivate = false;
			PartialPermanentOffice2016Key = string.Empty;
			PartialPermanentOffice2013Key = string.Empty;
			IsWindowsListo = new BooleanEvent();
			IsOffice2016Listo = new BooleanEvent();
			IsOffice2013Listo = new BooleanEvent();
			IsOffice2010Listo = new BooleanEvent();
			MoveCircularProgress = false;
			IsWindowsActivable = new BooleanEvent();
			IsOffice2016Activable = new BooleanEvent();
			IsOffice2013Activable = new BooleanEvent();
			IsOffice2010Activable = new BooleanEvent();
			IsWindowsChecked = new BooleanEvent();
			IsOffice2016Checked = new BooleanEvent();
			IsOffice2013Checked = new BooleanEvent();
			IsOffice2010Checked = new BooleanEvent();
			Tiempo = DateAndTime.get_Now();
			iactivateMetroForm_0 = null;
			RetailKeysWindows = new ArrayList();
			RetailKeysOffice2016 = new ArrayList();
			RetailKeysOffice2013 = new ArrayList();
			RutaOffice2016 = string.Empty;
			RutaOffice2013 = string.Empty;
			RutaOffice2010 = string.Empty;
			PlaySound = false;
			AudioVerified = null;
			AudioTransfer = null;
			AudioComplete = null;
			AudioBegin = null;
			AudioWarning = null;
			AudioDiagnostic = null;
			AudioAffirmative = null;
			AudioEnterAuthorizationCode = null;
			AudioIncomingTransmission = null;
			AudioProcessing = null;
			AudioInputOk = null;
			AudioInputFailed = null;
			Sonidos = new Stack<AudioFile>();
			ArgumentosConsola = Environment.GetCommandLineArgs();
			IsSilent = false;
			IsBackup = false;
			IsPaused = false;
			IsCheckStatus = false;
			IsGui = false;
			ActivadorIniciado = false;
			DirectorioBackupTokens = DirectorioActual + "\\TokensBackup";
			Logger = new FileLogger();
			ShowMessage = null;
			ProductName = string.Empty;
			EditionID = string.Empty;
			CurrentVersion = string.Empty;
			CurrentBuild = string.Empty;
			makeTask = false;
			noWin = false;
			no2016 = false;
			no2013 = false;
			no2010 = false;
			InternetConnection = false;
			RunAsService = false;
			GObjWmiService = new ManagementScope();
			KmsHostForward = new HostServer();
			KmsHostLocal = new HostServer();
			IntentosActivacion = 0;
			IntentosCheckWindows = 0;
			IntentosCheckOffice2016 = 0;
			IntentosCheckOffice2013 = 0;
			IntentosCheckOffice2010 = 0;
			IntentosWinDivert = 0;
			IntentosTunTap = 0;
			IntentosSecoh = 0;
			IsTapDriver = new BooleanEvent();
			IsTapDriverLoaded = false;
			IsWinDivert = new BooleanEvent();
			IsWinDivertLoaded = false;
			IsSecohQad = new BooleanEvent();
			IsSecohQadLoaded = false;
			SystemRoot = null;
			IsOnline = new BooleanEvent();
			ClientSettings = null;
			firewallPortOpened = false;
			firewallAppAdded = false;
			WaterMarkBasebrd = false;
			WaterMarkShell32 = false;
			IsWaterMarkRemove = false;
			IsWaterMarkRestore = false;
			Closing = false;
		}
	}
}
namespace AutoPico.Activador.WMI
{
	public class OfficeSoftwareProtectionProduct : Component
	{
		public class OfficeSoftwareProtectionProductCollection : ICollection
		{
			public class OfficeSoftwareProtectionProductEnumerator : IEnumerator
			{
				private ManagementObjectEnumerator managementObjectEnumerator_0;

				virtual object IEnumerator.Current => new OfficeSoftwareProtectionProduct((ManagementObject)managementObjectEnumerator_0.get_Current());

				public OfficeSoftwareProtectionProductEnumerator(ManagementObjectEnumerator objEnum)
				{
					managementObjectEnumerator_0 = objEnum;
				}

				public virtual bool MoveNext()
				{
					return managementObjectEnumerator_0.MoveNext();
				}

				public virtual void Reset()
				{
					managementObjectEnumerator_0.Reset();
				}
			}

			private ManagementObjectCollection managementObjectCollection_0;

			virtual int ICollection.Count => managementObjectCollection_0.get_Count();

			virtual bool ICollection.IsSynchronized => managementObjectCollection_0.get_IsSynchronized();

			virtual object ICollection.SyncRoot => this;

			public OfficeSoftwareProtectionProductCollection(ManagementObjectCollection objCollection)
			{
				managementObjectCollection_0 = objCollection;
			}

			public virtual void CopyTo(Array array, int index)
			{
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_0023: Expected O, but got Unknown
				managementObjectCollection_0.CopyTo(array, index);
				for (int i = 0; i < array.Length; i = checked(i + 1))
				{
					array.SetValue(new OfficeSoftwareProtectionProduct((ManagementObject)array.GetValue(i)), i);
				}
			}

			public virtual IEnumerator GetEnumerator()
			{
				return new OfficeSoftwareProtectionProductEnumerator(managementObjectCollection_0.GetEnumerator());
			}
		}

		public class WMIValueTypeConverter : TypeConverter
		{
			private TypeConverter typeConverter_0;

			private Type type_0;

			public WMIValueTypeConverter(Type inBaseType)
				: this()
			{
				typeConverter_0 = TypeDescriptor.GetConverter(inBaseType);
				type_0 = inBaseType;
			}

			public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType)
			{
				return typeConverter_0.CanConvertFrom(context, srcType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				return typeConverter_0.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				return typeConverter_0.ConvertFrom(context, culture, RuntimeHelpers.GetObjectValue(value));
			}

			public override object CreateInstance(ITypeDescriptorContext context, IDictionary dictionary)
			{
				return typeConverter_0.CreateInstance(context, dictionary);
			}

			public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetCreateInstanceSupported(context);
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributeVar)
			{
				return typeConverter_0.GetProperties(context, RuntimeHelpers.GetObjectValue(value), attributeVar);
			}

			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetPropertiesSupported(context);
			}

			public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValues(context);
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesExclusive(context);
			}

			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesSupported(context);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if ((object)type_0.BaseType == typeof(Enum))
				{
					if ((object)value.GetType() == destinationType)
					{
						return value;
					}
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "NULL_ENUM_VALUE";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if ((object)type_0 == typeof(bool) && (object)type_0.BaseType == typeof(ValueType))
				{
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if (context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
				{
					return "";
				}
				return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
			}
		}

		[TypeConverter(typeof(ExpandableObjectConverter))]
		public class ManagementSystemProperties
		{
			private ManagementBaseObject managementBaseObject_0;

			[Browsable(true)]
			public int GENUS => Conversions.ToInteger(managementBaseObject_0.get_Item("__GENUS"));

			[Browsable(true)]
			public string CLASS => Conversions.ToString(managementBaseObject_0.get_Item("__CLASS"));

			[Browsable(true)]
			public string SUPERCLASS => Conversions.ToString(managementBaseObject_0.get_Item("__SUPERCLASS"));

			[Browsable(true)]
			public string DYNASTY => Conversions.ToString(managementBaseObject_0.get_Item("__DYNASTY"));

			[Browsable(true)]
			public string RELPATH => Conversions.ToString(managementBaseObject_0.get_Item("__RELPATH"));

			[Browsable(true)]
			public int PROPERTY_COUNT => Conversions.ToInteger(managementBaseObject_0.get_Item("__PROPERTY_COUNT"));

			[Browsable(true)]
			public string[] DERIVATION => (string[])managementBaseObject_0.get_Item("__DERIVATION");

			[Browsable(true)]
			public string SERVER => Conversions.ToString(managementBaseObject_0.get_Item("__SERVER"));

			[Browsable(true)]
			public string NAMESPACE => Conversions.ToString(managementBaseObject_0.get_Item("__NAMESPACE"));

			[Browsable(true)]
			public string PATH => Conversions.ToString(managementBaseObject_0.get_Item("__PATH"));

			public ManagementSystemProperties(ManagementBaseObject ManagedObject)
			{
				managementBaseObject_0 = ManagedObject;
			}
		}

		private static string string_0 = "root\\CimV2";

		private static string string_1 = "OfficeSoftwareProtectionProduct";

		private static ManagementScope managementScope_0 = null;

		private ManagementSystemProperties managementSystemProperties_0;

		private ManagementObject managementObject_0;

		private bool bool_0;

		private ManagementBaseObject managementBaseObject_0;

		private ManagementBaseObject managementBaseObject_1;

		private bool bool_1;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string OriginatingNamespace => "root\\CimV2";

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string ManagementClassName
		{
			get
			{
				string text = string_1;
				if (managementBaseObject_1 != null && managementBaseObject_1.get_ClassPath() != null)
				{
					text = Conversions.ToString(managementBaseObject_1.get_Item("__CLASS"));
					if (text == null || (object)text == string.Empty)
					{
						text = string_1;
					}
				}
				return text;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementSystemProperties SystemProperties => managementSystemProperties_0;

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementBaseObject LateBoundObject => managementBaseObject_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementScope Scope
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Scope();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					managementObject_0.set_Scope(value);
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool AutoCommit
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		[Browsable(true)]
		public ManagementPath Path
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Path();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					if (!method_0(null, value, null))
					{
						throw new ArgumentException("El nombre de clase no coincide.");
					}
					managementObject_0.set_Path(value);
				}
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public static ManagementScope StaticScope
		{
			get
			{
				return managementScope_0;
			}
			set
			{
				managementScope_0 = value;
			}
		}

		[Browsable(true)]
		[Description("ID of current product's Application")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ApplicationID => Conversions.ToString(managementBaseObject_1.get_Item("ApplicationID"));

		[Description("Product Description")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string Description => Conversions.ToString(managementBaseObject_1.get_Item("Description"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Last discovered KMS host name through DNS.")]
		public string DiscoveredKeyManagementServiceMachineName => Conversions.ToString(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachineName"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDiscoveredKeyManagementServiceMachinePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Last discovered KMS host port through DNS.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint DiscoveredKeyManagementServiceMachinePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsEvaluationEndDateNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("EvaluationEndDate") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The expiration date of this product's application.  After this date, the LicenseStatus will be Unlicensed, and cannot be Activated.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public DateTime EvaluationEndDate
		{
			get
			{
				if (managementBaseObject_1.get_Item("EvaluationEndDate") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("EvaluationEndDate")));
				}
				return DateTime.MinValue;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsExtendedGraceNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ExtendedGrace") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Extended grace time in minutes before the parent application becomes unlicensed.")]
		[Browsable(true)]
		public uint ExtendedGrace
		{
			get
			{
				if (managementBaseObject_1.get_Item("ExtendedGrace") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("ExtendedGrace"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsGenuineStatusNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("GenuineStatus") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Genuine status for this product.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint GenuineStatus
		{
			get
			{
				if (managementBaseObject_1.get_Item("GenuineStatus") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("GenuineStatus"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsGracePeriodRemainingNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("GracePeriodRemaining") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Remaining time in minutes before the parent application becomes unlicensed.  For KMS clients, this is the remaining time before re-Activation is required.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint GracePeriodRemaining
		{
			get
			{
				if (managementBaseObject_1.get_Item("GracePeriodRemaining") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("GracePeriodRemaining"));
			}
		}

		[Description("Product Identifier")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ID => Conversions.ToString(managementBaseObject_1.get_Item("ID"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIsKeyManagementServiceMachineNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Indicates if KMS is enabled on the computer: 1 if true, 0 if false.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint IsKeyManagementServiceMachine
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("IsKeyManagementServiceMachine"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceCurrentCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The count of currently active KMS clients on the KMS host. -1 indicates the host is not enabled as a KMS, or has not received any client licensing-requests.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceCurrentCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceFailedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The total count of failed KMS requests.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceFailedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceLicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The count of KMS requests from clients with License Status=1 (Licensed).")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceLicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests"));
			}
		}

		[Description("The name of the KMS host. Returns null if SetKeyManagementServiceMachine has not been called.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string KeyManagementServiceMachine => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceMachine"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceNonGenuineGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=4 (NonGenuineGrace).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceNonGenuineGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceNotificationRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=5 (Notification).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceNotificationRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOBGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=2 (OOBGrace).")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceOOBGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceOOTGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("The count of KMS requests from clients with License Status=3 (OOTGrace).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceOOTGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServicePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The TCP port used by clients to send KMS-activation requests. Returns 0 if SetKeyManagementServicePort has not been called.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServicePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServicePort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("KMS product key ID. Returns null if not applicable.")]
		[Browsable(true)]
		public string KeyManagementServiceProductKeyID => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceProductKeyID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceTotalRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The total count of valid KMS requests.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceTotalRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceUnlicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("The count of KMS requests from clients with License Status=0 (Unlicensed).")]
		public uint KeyManagementServiceUnlicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests"));
			}
		}

		[Browsable(true)]
		[Description("The dependency identifier for the family of SKUs used to determine license relationships for add-ons.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string LicenseDependsOn => Conversions.ToString(managementBaseObject_1.get_Item("LicenseDependsOn"));

		[Description("The family identifier for the SKU used to determine license relationships for add-ons.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string LicenseFamily => Conversions.ToString(managementBaseObject_1.get_Item("LicenseFamily"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsLicenseIsAddonNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseIsAddon") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Returns True if the product is identified as an add-on license.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool LicenseIsAddon
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseIsAddon") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("LicenseIsAddon"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsLicenseStatusNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatus") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("License status of this product's application.  0=Unlicensed, 1=Licensed, 2=OOBGrace, 3=OOTGrace, 4=NonGenuineGrace, 5=Notification.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint LicenseStatus
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatus") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("LicenseStatus"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsLicenseStatusReasonNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatusReason") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("A diagnostic code which indicates why a computer is in a specific licensing state.")]
		public uint LicenseStatusReason
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatusReason") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("LicenseStatusReason"));
			}
		}

		[Description("Software licensing server URL for the binding certificate")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string MachineURL => Conversions.ToString(managementBaseObject_1.get_Item("MachineURL"));

		[Browsable(true)]
		[Description("Product Name")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string Name => Conversions.ToString(managementBaseObject_1.get_Item("Name"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("An identifier for this product's application that can be used for telephone or offline activation. Returns null if a product key is not installed.")]
		public string OfflineInstallationId => Conversions.ToString(managementBaseObject_1.get_Item("OfflineInstallationId"));

		[Description("Last five characters of this product's key. Returns null if a product key is not installed.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string PartialProductKey => Conversions.ToString(managementBaseObject_1.get_Item("PartialProductKey"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Software licensing server URL for the process certificate")]
		public string ProcessorURL => Conversions.ToString(managementBaseObject_1.get_Item("ProcessorURL"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Product key ID. Returns null if a product key is not installed.")]
		public string ProductKeyID => Conversions.ToString(managementBaseObject_1.get_Item("ProductKeyID"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Software licensing server URL for the product certificate")]
		public string ProductKeyURL => Conversions.ToString(managementBaseObject_1.get_Item("ProductKeyURL"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsRequiredClientCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The minimum number of clients required to connect to a KMS host in order to enable volume licensing.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint RequiredClientCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RequiredClientCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Additional information for token-based activation.")]
		[Browsable(true)]
		public string TokenActivationAdditionalInfo => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationAdditionalInfo"));

		[Description("Thumbprint of the certificate that activated the product.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string TokenActivationCertificateThumbprint => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationCertificateThumbprint"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTokenActivationGrantNumberNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationGrantNumber") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Grant number in the token-based activation license that activated the product.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint TokenActivationGrantNumber
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationGrantNumber") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TokenActivationGrantNumber"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("ID of the token-based activation license that activated the product.")]
		[Browsable(true)]
		public string TokenActivationILID => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationILID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsTokenActivationILVIDNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationILVID") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("Version of the token-based activation license that activated the product.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint TokenActivationILVID
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationILVID") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TokenActivationILVID"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTrustedTimeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TrustedTime") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The trusted time for the product.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public DateTime TrustedTime
		{
			get
			{
				if (managementBaseObject_1.get_Item("TrustedTime") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("TrustedTime")));
				}
				return DateTime.MinValue;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Software licensing server URL for the user license")]
		public string UseLicenseURL => Conversions.ToString(managementBaseObject_1.get_Item("UseLicenseURL"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsVLActivationIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The frequency, in minutes, of how often a client will contact the KMS host before the product is licensed.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLActivationInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLActivationInterval"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsVLRenewalIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("The frequency, in minutes, of how often a client will contact the KMS host after the product is licensed.")]
		public uint VLRenewalInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLRenewalInterval"));
			}
		}

		public OfficeSoftwareProtectionProduct()
			: this()
		{
			method_28(null, null, null);
		}

		public OfficeSoftwareProtectionProduct(string keyID)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_28(null, new ManagementPath(smethod_0(keyID)), null);
		}

		public OfficeSoftwareProtectionProduct(ManagementScope mgmtScope, string keyID)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_28(mgmtScope, new ManagementPath(smethod_0(keyID)), null);
		}

		public OfficeSoftwareProtectionProduct(ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_28(null, path, getOptions);
		}

		public OfficeSoftwareProtectionProduct(ManagementScope mgmtScope, ManagementPath path)
			: this()
		{
			method_28(mgmtScope, path, null);
		}

		public OfficeSoftwareProtectionProduct(ManagementPath path)
			: this()
		{
			method_28(null, path, null);
		}

		public OfficeSoftwareProtectionProduct(ManagementScope mgmtScope, ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_28(mgmtScope, path, getOptions);
		}

		public OfficeSoftwareProtectionProduct(ManagementObject theObject)
			: this()
		{
			method_27();
			if (!method_1((ManagementBaseObject)(object)theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public OfficeSoftwareProtectionProduct(ManagementBaseObject theObject)
			: this()
		{
			method_27();
			if (!method_1(theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementBaseObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties(theObject);
			managementBaseObject_1 = managementBaseObject_0;
			bool_1 = true;
		}

		private bool method_0(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			if (managementPath_0 != null && string.Compare(managementPath_0.get_ClassName(), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			return method_1((ManagementBaseObject)new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0));
		}

		private bool method_1(ManagementBaseObject managementBaseObject_2)
		{
			if (managementBaseObject_2 != null && string.Compare(Conversions.ToString(managementBaseObject_2.get_Item("__CLASS")), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			Array array = (Array)managementBaseObject_2.get_Item("__DERIVATION");
			if (array != null)
			{
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					if (string.Compare(Conversions.ToString(array.GetValue(num)), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		private bool method_2()
		{
			if (!IsDiscoveredKeyManagementServiceMachinePortNull)
			{
				return true;
			}
			return false;
		}

		public static DateTime ToDateTime(string dmtfDate)
		{
			DateTime minValue = DateTime.MinValue;
			int num = minValue.Year;
			int num2 = minValue.Month;
			int num3 = minValue.Day;
			int num4 = minValue.Hour;
			int num5 = minValue.Minute;
			int num6 = minValue.Second;
			long num7 = 0L;
			DateTime minValue2 = DateTime.MinValue;
			string empty = string.Empty;
			if (dmtfDate == null)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length == 0)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length != 25)
			{
				throw new ArgumentOutOfRangeException();
			}
			checked
			{
				try
				{
					empty = dmtfDate.Substring(0, 4);
					if (Operators.CompareString("****", empty, false) != 0)
					{
						num = int.Parse(empty);
					}
					empty = dmtfDate.Substring(4, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num2 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(6, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num3 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(8, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num4 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(10, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num5 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(12, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num6 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(15, 6);
					if (Operators.CompareString("******", empty, false) != 0)
					{
						num7 = long.Parse(empty) * 10L;
					}
					if (num < 0 || num2 < 0 || num3 < 0 || num4 < 0 || num5 < 0 || num5 < 0 || num6 < 0 || num7 < 0L)
					{
						throw new ArgumentOutOfRangeException();
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					throw new ArgumentOutOfRangeException(null, ex2.Message);
				}
				minValue2 = new DateTime(num, num2, num3, num4, num5, num6, 0).AddTicks(num7);
				TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(minValue2);
				int num8 = 0;
				int num9 = 0;
				long num10 = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				empty = dmtfDate.Substring(22, 3);
				if (Operators.CompareString(empty, "******", false) != 0)
				{
					empty = dmtfDate.Substring(21, 4);
					try
					{
						num8 = int.Parse(empty);
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						throw new ArgumentOutOfRangeException(null, ex4.Message);
					}
					num9 = (int)(num10 - num8);
					minValue2 = minValue2.AddMinutes(num9);
				}
				return minValue2;
			}
		}

		public static string ToDmtfDateTime(DateTime date)
		{
			string empty = string.Empty;
			TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(date);
			checked
			{
				long value = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				if (Math.Abs(value) > 999L)
				{
					date = date.ToUniversalTime();
					empty = "+000";
				}
				else if (utcOffset.Ticks >= 0L)
				{
					empty = "+" + ((long)Math.Round((double)utcOffset.Ticks / 600000000.0)).ToString().PadLeft(3, '0');
				}
				else
				{
					string text = value.ToString();
					empty = "-" + text.Substring(1, text.Length - 1).PadLeft(3, '0');
				}
				string str = string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(date.Year.ToString().PadLeft(4, '0') + date.Month.ToString().PadLeft(2, '0'), date.Day.ToString().PadLeft(2, '0')), date.Hour.ToString().PadLeft(2, '0')), date.Minute.ToString().PadLeft(2, '0')), date.Second.ToString().PadLeft(2, '0')), ".");
				DateTime dateTime = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
				string text2 = ((long)Math.Round((double)((date.Ticks - dateTime.Ticks) * 1000L) / 10000.0)).ToString();
				if (text2.Length > 6)
				{
					text2 = text2.Substring(0, 6);
				}
				return string.Concat(str + text2.PadLeft(6, '0'), empty);
			}
		}

		private bool method_3()
		{
			if (!IsEvaluationEndDateNull)
			{
				return true;
			}
			return false;
		}

		private bool method_4()
		{
			if (!IsExtendedGraceNull)
			{
				return true;
			}
			return false;
		}

		private bool method_5()
		{
			if (!IsGenuineStatusNull)
			{
				return true;
			}
			return false;
		}

		private bool method_6()
		{
			if (!IsGracePeriodRemainingNull)
			{
				return true;
			}
			return false;
		}

		private bool method_7()
		{
			if (!IsIsKeyManagementServiceMachineNull)
			{
				return true;
			}
			return false;
		}

		private bool method_8()
		{
			if (!IsKeyManagementServiceCurrentCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_9()
		{
			if (!IsKeyManagementServiceFailedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_10()
		{
			if (!IsKeyManagementServiceLicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_11()
		{
			if (!IsKeyManagementServiceNonGenuineGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_12()
		{
			if (!IsKeyManagementServiceNotificationRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_13()
		{
			if (!IsKeyManagementServiceOOBGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_14()
		{
			if (!IsKeyManagementServiceOOTGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_15()
		{
			if (!IsKeyManagementServicePortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_16()
		{
			if (!IsKeyManagementServiceTotalRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_17()
		{
			if (!IsKeyManagementServiceUnlicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_18()
		{
			if (!IsLicenseIsAddonNull)
			{
				return true;
			}
			return false;
		}

		private bool method_19()
		{
			if (!IsLicenseStatusNull)
			{
				return true;
			}
			return false;
		}

		private bool method_20()
		{
			if (!IsLicenseStatusReasonNull)
			{
				return true;
			}
			return false;
		}

		private bool method_21()
		{
			if (!IsRequiredClientCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_22()
		{
			if (!IsTokenActivationGrantNumberNull)
			{
				return true;
			}
			return false;
		}

		private bool method_23()
		{
			if (!IsTokenActivationILVIDNull)
			{
				return true;
			}
			return false;
		}

		private bool method_24()
		{
			if (!IsTrustedTimeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_25()
		{
			if (!IsVLActivationIntervalNull)
			{
				return true;
			}
			return false;
		}

		private bool method_26()
		{
			if (!IsVLRenewalIntervalNull)
			{
				return true;
			}
			return false;
		}

		[Browsable(true)]
		public void CommitObject()
		{
			if (!bool_1)
			{
				managementObject_0.Put();
			}
		}

		[Browsable(true)]
		public void CommitObject(PutOptions putOptions)
		{
			if (!bool_1)
			{
				managementObject_0.Put(putOptions);
			}
		}

		private void method_27()
		{
			bool_0 = true;
			bool_1 = false;
		}

		private static string smethod_0(string string_2)
		{
			return string.Concat("root\\CimV2:OfficeSoftwareProtectionProduct", string.Concat(".ID=", string.Concat("\"", string_2 + "\"")));
		}

		private void method_28(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			method_27();
			if (managementPath_0 != null && !method_0(managementScope_1, managementPath_0, objectGetOptions_0))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0);
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances()
		{
			return GetInstances(null, null, null);
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(string condition)
		{
			return GetInstances(null, condition, null);
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(string[] selectedProperties)
		{
			return GetInstances(null, null, selectedProperties);
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(string condition, string[] selectedProperties)
		{
			return GetInstances(null, condition, selectedProperties);
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(ManagementScope mgmtScope, EnumerationOptions enumOptions)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementPath val = new ManagementPath();
			val.set_ClassName("OfficeSoftwareProtectionProduct");
			val.set_NamespacePath("root\\CimV2");
			ManagementClass val2 = new ManagementClass(mgmtScope, val, (ObjectGetOptions)null);
			if (enumOptions == null)
			{
				enumOptions = new EnumerationOptions();
				enumOptions.set_EnsureLocatable(true);
			}
			return new OfficeSoftwareProtectionProductCollection(val2.GetInstances(enumOptions));
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(ManagementScope mgmtScope, string condition)
		{
			return GetInstances(mgmtScope, condition, null);
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(ManagementScope mgmtScope, string[] selectedProperties)
		{
			return GetInstances(mgmtScope, null, selectedProperties);
		}

		public static OfficeSoftwareProtectionProductCollection GetInstances(ManagementScope mgmtScope, string condition, string[] selectedProperties)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementObjectSearcher val = new ManagementObjectSearcher(mgmtScope, (ObjectQuery)new SelectQuery("OfficeSoftwareProtectionProduct", condition, selectedProperties));
			EnumerationOptions val2 = new EnumerationOptions();
			val2.set_EnsureLocatable(true);
			val.set_Options(val2);
			return new OfficeSoftwareProtectionProductCollection(val.Get());
		}

		[Browsable(true)]
		public static OfficeSoftwareProtectionProduct CreateInstance()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Expected O, but got Unknown
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Expected O, but got Unknown
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Expected O, but got Unknown
			ManagementScope val = null;
			if (managementScope_0 == null)
			{
				val = new ManagementScope();
				val.get_Path().set_NamespacePath(string_0);
			}
			else
			{
				val = managementScope_0;
			}
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(val, val2, (ObjectGetOptions)null);
			return new OfficeSoftwareProtectionProduct(val3.CreateInstance());
		}

		[Browsable(true)]
		public void Delete()
		{
			managementObject_0.Delete();
		}

		public uint Activate()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("Activate", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceMachine()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServicePort()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DepositOfflineConfirmationId(string ConfirmationId, string InstallationId)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DepositOfflineConfirmationId");
				val.set_Item("ConfirmationId", (object)ConfirmationId);
				val.set_Item("InstallationId", (object)InstallationId);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DepositOfflineConfirmationId", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DepositTokenActivationResponse(string CertChain, string Challenge, string Response)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DepositTokenActivationResponse");
				val.set_Item("CertChain", (object)CertChain);
				val.set_Item("Challenge", (object)Challenge);
				val.set_Item("Response", (object)Response);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DepositTokenActivationResponse", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint GenerateTokenActivationChallenge(ref string Challenge)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GenerateTokenActivationChallenge", val, (InvokeMethodOptions)null);
				Challenge = Convert.ToString(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("Challenge").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			Challenge = null;
			return Convert.ToUInt32(0);
		}

		public uint GetPolicyInformationDWord(string PolicyName, ref uint PolicyValue)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("GetPolicyInformationDWord");
				val.set_Item("PolicyName", (object)PolicyName);
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GetPolicyInformationDWord", val, (InvokeMethodOptions)null);
				PolicyValue = Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("PolicyValue").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			PolicyValue = Convert.ToUInt32(0);
			return Convert.ToUInt32(0);
		}

		public uint GetPolicyInformationString(string PolicyName, ref string PolicyValue)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("GetPolicyInformationString");
				val.set_Item("PolicyName", (object)PolicyName);
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GetPolicyInformationString", val, (InvokeMethodOptions)null);
				PolicyValue = Convert.ToString(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("PolicyValue").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			PolicyValue = null;
			return Convert.ToUInt32(0);
		}

		public uint GetTokenActivationGrants(ref string[] Grants)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GetTokenActivationGrants", val, (InvokeMethodOptions)null);
				Grants = (string[])val2.get_Properties().get_Item("Grants").get_Value();
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			Grants = null;
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceMachine(string MachineName)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceMachine");
				val.set_Item("MachineName", (object)MachineName);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServicePort(uint PortNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServicePort");
				val.set_Item("PortNumber", (object)PortNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint UninstallProductKey()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("UninstallProductKey", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}
	}
	public class OfficeSoftwareProtectionService : Component
	{
		public class OfficeSoftwareProtectionServiceCollection : ICollection
		{
			public class OfficeSoftwareProtectionServiceEnumerator : IEnumerator
			{
				private ManagementObjectEnumerator managementObjectEnumerator_0;

				virtual object IEnumerator.Current => new OfficeSoftwareProtectionService((ManagementObject)managementObjectEnumerator_0.get_Current());

				public OfficeSoftwareProtectionServiceEnumerator(ManagementObjectEnumerator objEnum)
				{
					managementObjectEnumerator_0 = objEnum;
				}

				public virtual bool MoveNext()
				{
					return managementObjectEnumerator_0.MoveNext();
				}

				public virtual void Reset()
				{
					managementObjectEnumerator_0.Reset();
				}
			}

			private ManagementObjectCollection managementObjectCollection_0;

			virtual int ICollection.Count => managementObjectCollection_0.get_Count();

			virtual bool ICollection.IsSynchronized => managementObjectCollection_0.get_IsSynchronized();

			virtual object ICollection.SyncRoot => this;

			public OfficeSoftwareProtectionServiceCollection(ManagementObjectCollection objCollection)
			{
				managementObjectCollection_0 = objCollection;
			}

			public virtual void CopyTo(Array array, int index)
			{
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_0023: Expected O, but got Unknown
				managementObjectCollection_0.CopyTo(array, index);
				for (int i = 0; i < array.Length; i = checked(i + 1))
				{
					array.SetValue(new OfficeSoftwareProtectionService((ManagementObject)array.GetValue(i)), i);
				}
			}

			public virtual IEnumerator GetEnumerator()
			{
				return new OfficeSoftwareProtectionServiceEnumerator(managementObjectCollection_0.GetEnumerator());
			}
		}

		public class WMIValueTypeConverter : TypeConverter
		{
			private TypeConverter typeConverter_0;

			private Type type_0;

			public WMIValueTypeConverter(Type inBaseType)
				: this()
			{
				typeConverter_0 = TypeDescriptor.GetConverter(inBaseType);
				type_0 = inBaseType;
			}

			public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType)
			{
				return typeConverter_0.CanConvertFrom(context, srcType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				return typeConverter_0.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				return typeConverter_0.ConvertFrom(context, culture, RuntimeHelpers.GetObjectValue(value));
			}

			public override object CreateInstance(ITypeDescriptorContext context, IDictionary dictionary)
			{
				return typeConverter_0.CreateInstance(context, dictionary);
			}

			public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetCreateInstanceSupported(context);
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributeVar)
			{
				return typeConverter_0.GetProperties(context, RuntimeHelpers.GetObjectValue(value), attributeVar);
			}

			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetPropertiesSupported(context);
			}

			public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValues(context);
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesExclusive(context);
			}

			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesSupported(context);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if ((object)type_0.BaseType == typeof(Enum))
				{
					if ((object)value.GetType() == destinationType)
					{
						return value;
					}
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "NULL_ENUM_VALUE";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if ((object)type_0 == typeof(bool) && (object)type_0.BaseType == typeof(ValueType))
				{
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if (context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
				{
					return "";
				}
				return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
			}
		}

		[TypeConverter(typeof(ExpandableObjectConverter))]
		public class ManagementSystemProperties
		{
			private ManagementBaseObject managementBaseObject_0;

			[Browsable(true)]
			public int GENUS => Conversions.ToInteger(managementBaseObject_0.get_Item("__GENUS"));

			[Browsable(true)]
			public string CLASS => Conversions.ToString(managementBaseObject_0.get_Item("__CLASS"));

			[Browsable(true)]
			public string SUPERCLASS => Conversions.ToString(managementBaseObject_0.get_Item("__SUPERCLASS"));

			[Browsable(true)]
			public string DYNASTY => Conversions.ToString(managementBaseObject_0.get_Item("__DYNASTY"));

			[Browsable(true)]
			public string RELPATH => Conversions.ToString(managementBaseObject_0.get_Item("__RELPATH"));

			[Browsable(true)]
			public int PROPERTY_COUNT => Conversions.ToInteger(managementBaseObject_0.get_Item("__PROPERTY_COUNT"));

			[Browsable(true)]
			public string[] DERIVATION => (string[])managementBaseObject_0.get_Item("__DERIVATION");

			[Browsable(true)]
			public string SERVER => Conversions.ToString(managementBaseObject_0.get_Item("__SERVER"));

			[Browsable(true)]
			public string NAMESPACE => Conversions.ToString(managementBaseObject_0.get_Item("__NAMESPACE"));

			[Browsable(true)]
			public string PATH => Conversions.ToString(managementBaseObject_0.get_Item("__PATH"));

			public ManagementSystemProperties(ManagementBaseObject ManagedObject)
			{
				managementBaseObject_0 = ManagedObject;
			}
		}

		private static string string_0 = "root\\CimV2";

		private static string string_1 = "OfficeSoftwareProtectionService";

		private static ManagementScope managementScope_0 = null;

		private ManagementSystemProperties managementSystemProperties_0;

		private ManagementObject managementObject_0;

		private bool bool_0;

		private ManagementBaseObject managementBaseObject_0;

		private ManagementBaseObject managementBaseObject_1;

		private bool bool_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string OriginatingNamespace => "root\\CimV2";

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ManagementClassName
		{
			get
			{
				string text = string_1;
				if (managementBaseObject_1 != null && managementBaseObject_1.get_ClassPath() != null)
				{
					text = Conversions.ToString(managementBaseObject_1.get_Item("__CLASS"));
					if (text == null || (object)text == string.Empty)
					{
						text = string_1;
					}
				}
				return text;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementSystemProperties SystemProperties => managementSystemProperties_0;

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementBaseObject LateBoundObject => managementBaseObject_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementScope Scope
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Scope();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					managementObject_0.set_Scope(value);
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool AutoCommit
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		[Browsable(true)]
		public ManagementPath Path
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Path();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					if (!method_0(null, value, null))
					{
						throw new ArgumentException("El nombre de clase no coincide.");
					}
					managementObject_0.set_Path(value);
				}
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public static ManagementScope StaticScope
		{
			get
			{
				return managementScope_0;
			}
			set
			{
				managementScope_0 = value;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("The GUID that identifies a KMS client to a KMS host. The client includes this in requests it sends to the KMS.")]
		public string ClientMachineID => Conversions.ToString(managementBaseObject_1.get_Item("ClientMachineID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsIsKeyManagementServiceMachineNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[Description("Indicates whether KMS is enabled on the computer: 0 if false, 1 if true.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint IsKeyManagementServiceMachine
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("IsKeyManagementServiceMachine"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceActivationDisabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceActivationDisabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Indicates whether the volume activation through key management service is disabled.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool KeyManagementServiceActivationDisabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceActivationDisabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceActivationDisabled"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceCurrentCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The count of currently active KMS clients on the KMS host. -1 indicates the computer is not enabled as a KMS, or has not received any client licensing-requests.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint KeyManagementServiceCurrentCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceDnsPublishingNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceDnsPublishing") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Indicates the DNS publishing status of a KMS host: 0=Disabled, 1=Auto publish enabled (default).")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool KeyManagementServiceDnsPublishing
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceDnsPublishing") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceDnsPublishing"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceFailedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("The count of invalid KMS requests.")]
		public uint KeyManagementServiceFailedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceHostCachingNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceHostCaching") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Indicates the caching status of KMS host name and port: 0=Caching disabled, 1=Caching enabled (default).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool KeyManagementServiceHostCaching
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceHostCaching") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceHostCaching"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceLicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=1 (Licensed).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceLicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceListeningPortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceListeningPort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The TCP port the KMS host uses to listen for activation requests.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceListeningPort
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceListeningPort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceListeningPort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceLowPriorityNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLowPriority") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Indicates the thread priority status of KMS service: 0=Normal Priority (default), 1=Low priority.")]
		public bool KeyManagementServiceLowPriority
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLowPriority") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceLowPriority"));
			}
		}

		[Description("The name of the KMS host. Returns null if SetKeyManagementServiceMachine has not been called.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string KeyManagementServiceMachine => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceMachine"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceNonGenuineGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=4 (NonGenuineGrace).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceNonGenuineGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceNotificationRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("The count of KMS requests from clients with License Status=5 (Notification).")]
		public uint KeyManagementServiceNotificationRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOBGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=2 (OOBGrace).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceOOBGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOTGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The count of KMS requests from clients with License Status=3 (OOTGrace).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceOOTGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServicePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The TCP port used by clients to send KMS-activation requests. Returns 0 if SetKeyManagementServicePort has not been called.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServicePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServicePort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceTotalRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The total count of valid KMS requests.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint KeyManagementServiceTotalRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceUnlicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("The count of KMS requests from clients with License Status=0 (Unlicensed).")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceUnlicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsPolicyCacheRefreshRequiredNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("PolicyCacheRefreshRequired") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Indicates whether the licensing policy-cache needs to be updated: 0=not required, 1=Refresh required.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint PolicyCacheRefreshRequired
		{
			get
			{
				if (managementBaseObject_1.get_Item("PolicyCacheRefreshRequired") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("PolicyCacheRefreshRequired"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsRequiredClientCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The minimum number of clients required to connect to a KMS host in order to enable volume licensing.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint RequiredClientCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RequiredClientCount"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Version of the Software Licensing service")]
		public string Version => Conversions.ToString(managementBaseObject_1.get_Item("Version"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsVLActivationIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("The frequency, in minutes, of how often a client will contact the KMS host before the client is licensed.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLActivationInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLActivationInterval"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsVLRenewalIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("The frequency, in minutes, of how often a client will contact the KMS host after the client is licensed.")]
		public uint VLRenewalInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLRenewalInterval"));
			}
		}

		public OfficeSoftwareProtectionService()
			: this()
		{
			method_23(null, null, null);
		}

		public OfficeSoftwareProtectionService(string keyVersion)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_23(null, new ManagementPath(smethod_0(keyVersion)), null);
		}

		public OfficeSoftwareProtectionService(ManagementScope mgmtScope, string keyVersion)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_23(mgmtScope, new ManagementPath(smethod_0(keyVersion)), null);
		}

		public OfficeSoftwareProtectionService(ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_23(null, path, getOptions);
		}

		public OfficeSoftwareProtectionService(ManagementScope mgmtScope, ManagementPath path)
			: this()
		{
			method_23(mgmtScope, path, null);
		}

		public OfficeSoftwareProtectionService(ManagementPath path)
			: this()
		{
			method_23(null, path, null);
		}

		public OfficeSoftwareProtectionService(ManagementScope mgmtScope, ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_23(mgmtScope, path, getOptions);
		}

		public OfficeSoftwareProtectionService(ManagementObject theObject)
			: this()
		{
			method_22();
			if (!method_1((ManagementBaseObject)(object)theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public OfficeSoftwareProtectionService(ManagementBaseObject theObject)
			: this()
		{
			method_22();
			if (!method_1(theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementBaseObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties(theObject);
			managementBaseObject_1 = managementBaseObject_0;
			bool_1 = true;
		}

		private bool method_0(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			if (managementPath_0 != null && string.Compare(managementPath_0.get_ClassName(), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			return method_1((ManagementBaseObject)new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0));
		}

		private bool method_1(ManagementBaseObject managementBaseObject_2)
		{
			if (managementBaseObject_2 != null && string.Compare(Conversions.ToString(managementBaseObject_2.get_Item("__CLASS")), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			Array array = (Array)managementBaseObject_2.get_Item("__DERIVATION");
			if (array != null)
			{
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					if (string.Compare(Conversions.ToString(array.GetValue(num)), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		private bool method_2()
		{
			if (!IsIsKeyManagementServiceMachineNull)
			{
				return true;
			}
			return false;
		}

		private bool method_3()
		{
			if (!IsKeyManagementServiceActivationDisabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_4()
		{
			if (!IsKeyManagementServiceCurrentCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_5()
		{
			if (!IsKeyManagementServiceDnsPublishingNull)
			{
				return true;
			}
			return false;
		}

		private bool method_6()
		{
			if (!IsKeyManagementServiceFailedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_7()
		{
			if (!IsKeyManagementServiceHostCachingNull)
			{
				return true;
			}
			return false;
		}

		private bool method_8()
		{
			if (!IsKeyManagementServiceLicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_9()
		{
			if (!IsKeyManagementServiceListeningPortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_10()
		{
			if (!IsKeyManagementServiceLowPriorityNull)
			{
				return true;
			}
			return false;
		}

		private bool method_11()
		{
			if (!IsKeyManagementServiceNonGenuineGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_12()
		{
			if (!IsKeyManagementServiceNotificationRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_13()
		{
			if (!IsKeyManagementServiceOOBGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_14()
		{
			if (!IsKeyManagementServiceOOTGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_15()
		{
			if (!IsKeyManagementServicePortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_16()
		{
			if (!IsKeyManagementServiceTotalRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_17()
		{
			if (!IsKeyManagementServiceUnlicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_18()
		{
			if (!IsPolicyCacheRefreshRequiredNull)
			{
				return true;
			}
			return false;
		}

		private bool method_19()
		{
			if (!IsRequiredClientCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_20()
		{
			if (!IsVLActivationIntervalNull)
			{
				return true;
			}
			return false;
		}

		private bool method_21()
		{
			if (!IsVLRenewalIntervalNull)
			{
				return true;
			}
			return false;
		}

		[Browsable(true)]
		public void CommitObject()
		{
			if (!bool_1)
			{
				managementObject_0.Put();
			}
		}

		[Browsable(true)]
		public void CommitObject(PutOptions putOptions)
		{
			if (!bool_1)
			{
				managementObject_0.Put(putOptions);
			}
		}

		private void method_22()
		{
			bool_0 = true;
			bool_1 = false;
		}

		private static string smethod_0(string string_2)
		{
			return string.Concat("root\\CimV2:OfficeSoftwareProtectionService", string.Concat(".Version=", string.Concat("\"", string_2 + "\"")));
		}

		private void method_23(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			method_22();
			if (managementPath_0 != null && !method_0(managementScope_1, managementPath_0, objectGetOptions_0))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0);
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances()
		{
			return GetInstances(null, null, null);
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(string condition)
		{
			return GetInstances(null, condition, null);
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(string[] selectedProperties)
		{
			return GetInstances(null, null, selectedProperties);
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(string condition, string[] selectedProperties)
		{
			return GetInstances(null, condition, selectedProperties);
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(ManagementScope mgmtScope, EnumerationOptions enumOptions)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementPath val = new ManagementPath();
			val.set_ClassName("OfficeSoftwareProtectionService");
			val.set_NamespacePath("root\\CimV2");
			ManagementClass val2 = new ManagementClass(mgmtScope, val, (ObjectGetOptions)null);
			if (enumOptions == null)
			{
				enumOptions = new EnumerationOptions();
				enumOptions.set_EnsureLocatable(true);
			}
			return new OfficeSoftwareProtectionServiceCollection(val2.GetInstances(enumOptions));
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(ManagementScope mgmtScope, string condition)
		{
			return GetInstances(mgmtScope, condition, null);
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(ManagementScope mgmtScope, string[] selectedProperties)
		{
			return GetInstances(mgmtScope, null, selectedProperties);
		}

		public static OfficeSoftwareProtectionServiceCollection GetInstances(ManagementScope mgmtScope, string condition, string[] selectedProperties)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementObjectSearcher val = new ManagementObjectSearcher(mgmtScope, (ObjectQuery)new SelectQuery("OfficeSoftwareProtectionService", condition, selectedProperties));
			EnumerationOptions val2 = new EnumerationOptions();
			val2.set_EnsureLocatable(true);
			val.set_Options(val2);
			return new OfficeSoftwareProtectionServiceCollection(val.Get());
		}

		[Browsable(true)]
		public static OfficeSoftwareProtectionService CreateInstance()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Expected O, but got Unknown
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Expected O, but got Unknown
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Expected O, but got Unknown
			ManagementScope val = null;
			if (managementScope_0 == null)
			{
				val = new ManagementScope();
				val.get_Path().set_NamespacePath(string_0);
			}
			else
			{
				val = managementScope_0;
			}
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(val, val2, (ObjectGetOptions)null);
			return new OfficeSoftwareProtectionService(val3.CreateInstance());
		}

		[Browsable(true)]
		public void Delete()
		{
			managementObject_0.Delete();
		}

		public uint AcquireGenuineTicket(string ServerUrl, string TemplateId)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("AcquireGenuineTicket");
				val.set_Item("ServerUrl", (object)ServerUrl);
				val.set_Item("TemplateId", (object)TemplateId);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("AcquireGenuineTicket", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceListeningPort()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceListeningPort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceMachine()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServicePort()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearProductKeyFromRegistry()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearProductKeyFromRegistry", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DisableKeyManagementServiceActivation(bool DisableActivation)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DisableKeyManagementServiceActivation");
				val.set_Item("DisableActivation", (object)DisableActivation);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DisableKeyManagementServiceActivation", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DisableKeyManagementServiceDnsPublishing(bool DisablePublishing)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DisableKeyManagementServiceDnsPublishing");
				val.set_Item("DisablePublishing", (object)DisablePublishing);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DisableKeyManagementServiceDnsPublishing", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DisableKeyManagementServiceHostCaching(bool DisableCaching)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DisableKeyManagementServiceHostCaching");
				val.set_Item("DisableCaching", (object)DisableCaching);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DisableKeyManagementServiceHostCaching", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint EnableKeyManagementServiceLowPriority(bool EnableLowPriority)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("EnableKeyManagementServiceLowPriority");
				val.set_Item("EnableLowPriority", (object)EnableLowPriority);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("EnableKeyManagementServiceLowPriority", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint InstallLicense(string License)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("InstallLicense");
				val.set_Item("License", (object)License);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("InstallLicense", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint InstallLicensePackage(string LicensePackage)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("InstallLicensePackage");
				val.set_Item("LicensePackage", (object)LicensePackage);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("InstallLicensePackage", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint InstallProductKey(string ProductKey)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("InstallProductKey");
				val.set_Item("ProductKey", (object)ProductKey);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("InstallProductKey", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceListeningPort(uint PortNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceListeningPort");
				val.set_Item("PortNumber", (object)PortNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceListeningPort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceMachine(string MachineName)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceMachine");
				val.set_Item("MachineName", (object)MachineName);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServicePort(uint PortNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServicePort");
				val.set_Item("PortNumber", (object)PortNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetVLActivationInterval(uint ActivationInterval)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetVLActivationInterval");
				val.set_Item("ActivationInterval", (object)ActivationInterval);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetVLActivationInterval", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetVLRenewalInterval(uint RenewalInterval)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetVLRenewalInterval");
				val.set_Item("RenewalInterval", (object)RenewalInterval);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetVLRenewalInterval", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}
	}
	public class SoftwareLicensingProduct : Component
	{
		public class SoftwareLicensingProductCollection : ICollection
		{
			public class SoftwareLicensingProductEnumerator : IEnumerator
			{
				private ManagementObjectEnumerator managementObjectEnumerator_0;

				virtual object IEnumerator.Current => new SoftwareLicensingProduct((ManagementObject)managementObjectEnumerator_0.get_Current());

				public SoftwareLicensingProductEnumerator(ManagementObjectEnumerator objEnum)
				{
					managementObjectEnumerator_0 = objEnum;
				}

				public virtual bool MoveNext()
				{
					return managementObjectEnumerator_0.MoveNext();
				}

				public virtual void Reset()
				{
					managementObjectEnumerator_0.Reset();
				}
			}

			private ManagementObjectCollection managementObjectCollection_0;

			virtual int ICollection.Count => managementObjectCollection_0.get_Count();

			virtual bool ICollection.IsSynchronized => managementObjectCollection_0.get_IsSynchronized();

			virtual object ICollection.SyncRoot => this;

			public SoftwareLicensingProductCollection(ManagementObjectCollection objCollection)
			{
				managementObjectCollection_0 = objCollection;
			}

			public virtual void CopyTo(Array array, int index)
			{
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_0023: Expected O, but got Unknown
				managementObjectCollection_0.CopyTo(array, index);
				for (int i = 0; i < array.Length; i = checked(i + 1))
				{
					array.SetValue(new SoftwareLicensingProduct((ManagementObject)array.GetValue(i)), i);
				}
			}

			public virtual IEnumerator GetEnumerator()
			{
				return new SoftwareLicensingProductEnumerator(managementObjectCollection_0.GetEnumerator());
			}
		}

		public class WMIValueTypeConverter : TypeConverter
		{
			private TypeConverter typeConverter_0;

			private Type type_0;

			public WMIValueTypeConverter(Type inBaseType)
				: this()
			{
				typeConverter_0 = TypeDescriptor.GetConverter(inBaseType);
				type_0 = inBaseType;
			}

			public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType)
			{
				return typeConverter_0.CanConvertFrom(context, srcType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				return typeConverter_0.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				return typeConverter_0.ConvertFrom(context, culture, RuntimeHelpers.GetObjectValue(value));
			}

			public override object CreateInstance(ITypeDescriptorContext context, IDictionary dictionary)
			{
				return typeConverter_0.CreateInstance(context, dictionary);
			}

			public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetCreateInstanceSupported(context);
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributeVar)
			{
				return typeConverter_0.GetProperties(context, RuntimeHelpers.GetObjectValue(value), attributeVar);
			}

			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetPropertiesSupported(context);
			}

			public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValues(context);
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesExclusive(context);
			}

			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesSupported(context);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if ((object)type_0.BaseType == typeof(Enum))
				{
					if ((object)value.GetType() == destinationType)
					{
						return value;
					}
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "NULL_ENUM_VALUE";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if ((object)type_0 == typeof(bool) && (object)type_0.BaseType == typeof(ValueType))
				{
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if (context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
				{
					return "";
				}
				return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
			}
		}

		[TypeConverter(typeof(ExpandableObjectConverter))]
		public class ManagementSystemProperties
		{
			private ManagementBaseObject managementBaseObject_0;

			[Browsable(true)]
			public int GENUS => Conversions.ToInteger(managementBaseObject_0.get_Item("__GENUS"));

			[Browsable(true)]
			public string CLASS => Conversions.ToString(managementBaseObject_0.get_Item("__CLASS"));

			[Browsable(true)]
			public string SUPERCLASS => Conversions.ToString(managementBaseObject_0.get_Item("__SUPERCLASS"));

			[Browsable(true)]
			public string DYNASTY => Conversions.ToString(managementBaseObject_0.get_Item("__DYNASTY"));

			[Browsable(true)]
			public string RELPATH => Conversions.ToString(managementBaseObject_0.get_Item("__RELPATH"));

			[Browsable(true)]
			public int PROPERTY_COUNT => Conversions.ToInteger(managementBaseObject_0.get_Item("__PROPERTY_COUNT"));

			[Browsable(true)]
			public string[] DERIVATION => (string[])managementBaseObject_0.get_Item("__DERIVATION");

			[Browsable(true)]
			public string SERVER => Conversions.ToString(managementBaseObject_0.get_Item("__SERVER"));

			[Browsable(true)]
			public string NAMESPACE => Conversions.ToString(managementBaseObject_0.get_Item("__NAMESPACE"));

			[Browsable(true)]
			public string PATH => Conversions.ToString(managementBaseObject_0.get_Item("__PATH"));

			public ManagementSystemProperties(ManagementBaseObject ManagedObject)
			{
				managementBaseObject_0 = ManagedObject;
			}
		}

		private static string string_0 = "root\\CimV2";

		private static string string_1 = "SoftwareLicensingProduct";

		private static ManagementScope managementScope_0 = null;

		private ManagementSystemProperties managementSystemProperties_0;

		private ManagementObject managementObject_0;

		private bool bool_0;

		private ManagementBaseObject managementBaseObject_0;

		private ManagementBaseObject managementBaseObject_1;

		private bool bool_1;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string OriginatingNamespace => "root\\CimV2";

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string ManagementClassName
		{
			get
			{
				string text = string_1;
				if (managementBaseObject_1 != null && managementBaseObject_1.get_ClassPath() != null)
				{
					text = Conversions.ToString(managementBaseObject_1.get_Item("__CLASS"));
					if (text == null || (object)text == string.Empty)
					{
						text = string_1;
					}
				}
				return text;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public ManagementSystemProperties SystemProperties => managementSystemProperties_0;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public ManagementBaseObject LateBoundObject => managementBaseObject_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementScope Scope
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Scope();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					managementObject_0.set_Scope(value);
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool AutoCommit
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		[Browsable(true)]
		public ManagementPath Path
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Path();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					if (!method_0(null, value, null))
					{
						throw new ArgumentException("El nombre de clase no coincide.");
					}
					managementObject_0.set_Path(value);
				}
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public static ManagementScope StaticScope
		{
			get
			{
				return managementScope_0;
			}
			set
			{
				managementScope_0 = value;
			}
		}

		[Description("PID de host KMS en el objeto de activación usado para la última activación de AD.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ADActivationCsvlkPid => Conversions.ToString(managementBaseObject_1.get_Item("ADActivationCsvlkPid"));

		[Browsable(true)]
		[Description("SkuId de host KMS en el objeto de activación usado para la última activación de AD.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ADActivationCsvlkSkuId => Conversions.ToString(managementBaseObject_1.get_Item("ADActivationCsvlkSkuId"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Nombre completo del objeto de activación usado para la última activación de AD.")]
		public string ADActivationObjectDN => Conversions.ToString(managementBaseObject_1.get_Item("ADActivationObjectDN"));

		[Browsable(true)]
		[Description("Nombre de objeto de activación usado para la última activación de AD.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ADActivationObjectName => Conversions.ToString(managementBaseObject_1.get_Item("ADActivationObjectName"));

		[Description("Identificador de la aplicación del producto actual")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ApplicationID => Conversions.ToString(managementBaseObject_1.get_Item("ApplicationID"));

		[Browsable(true)]
		[Description("PID2 de clave de producto del host AVMA.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string AutomaticVMActivationHostDigitalPid2 => Conversions.ToString(managementBaseObject_1.get_Item("AutomaticVMActivationHostDigitalPid2"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Nombre de máquina del host AVMA.")]
		public string AutomaticVMActivationHostMachineName => Conversions.ToString(managementBaseObject_1.get_Item("AutomaticVMActivationHostMachineName"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsAutomaticVMActivationLastActivationTimeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("AutomaticVMActivationLastActivationTime") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Hora de la última activación del producto.")]
		public DateTime AutomaticVMActivationLastActivationTime
		{
			get
			{
				if (managementBaseObject_1.get_Item("AutomaticVMActivationLastActivationTime") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("AutomaticVMActivationLastActivationTime")));
				}
				return DateTime.MinValue;
			}
		}

		[Description("Descripción del producto")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string Description => Conversions.ToString(managementBaseObject_1.get_Item("Description"));

		[Browsable(true)]
		[Description("Última dirección IP de host de KMS detectada mediante DNS.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string DiscoveredKeyManagementServiceMachineIpAddress => Conversions.ToString(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachineIpAddress"));

		[Browsable(true)]
		[Description("Último nombre de host KMS detectado a través de DNS.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string DiscoveredKeyManagementServiceMachineName => Conversions.ToString(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachineName"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsDiscoveredKeyManagementServiceMachinePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Último puerto de host KMS detectado a través de DNS.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint DiscoveredKeyManagementServiceMachinePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsEvaluationEndDateNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("EvaluationEndDate") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Fecha de expiración de la aplicación de este producto. Una vez pasada esta fecha, Estado de la licencia será Sin licencia y no se podrá activar.")]
		[Browsable(true)]
		public DateTime EvaluationEndDate
		{
			get
			{
				if (managementBaseObject_1.get_Item("EvaluationEndDate") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("EvaluationEndDate")));
				}
				return DateTime.MinValue;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsExtendedGraceNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ExtendedGrace") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Período de gracia ampliado en minutos antes de que la aplicación principal se quede sin licencia.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint ExtendedGrace
		{
			get
			{
				if (managementBaseObject_1.get_Item("ExtendedGrace") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("ExtendedGrace"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsGenuineStatusNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("GenuineStatus") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("Estado de autenticidad de este producto.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint GenuineStatus
		{
			get
			{
				if (managementBaseObject_1.get_Item("GenuineStatus") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("GenuineStatus"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsGracePeriodRemainingNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("GracePeriodRemaining") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Tiempo restante en minutos antes de que la aplicación primaria pase a modo de notificación. Para los clientes de volumen, se trata del período restante antes de que sea necesaria la reactivación.")]
		public uint GracePeriodRemaining
		{
			get
			{
				if (managementBaseObject_1.get_Item("GracePeriodRemaining") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("GracePeriodRemaining"));
			}
		}

		[Browsable(true)]
		[Description("Se requiere IAID en el host para evitar que esta máquina virtual escriba notificaciones.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string IAID => Conversions.ToString(managementBaseObject_1.get_Item("IAID"));

		[Description("Identificador del producto")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ID => Conversions.ToString(managementBaseObject_1.get_Item("ID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsIsKeyManagementServiceMachineNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Indica si KMS está habilitado en el equipo: 1 si lo está, 0 si no lo está.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint IsKeyManagementServiceMachine
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("IsKeyManagementServiceMachine"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceCurrentCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número de clientes KMS activos actualmente en el host KMS. -1 indica que el host no está habilitado como KMS o que no recibió ninguna solicitud de licencia de cliente.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint KeyManagementServiceCurrentCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceFailedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número total de solicitudes KMS no válidas.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceFailedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceLicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=1 (con licencia).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceLicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests"));
			}
		}

		[Description("Nombre completo del dominio del recurso que contiene los registros SRV de KMS de la organización. Devuelve NULL si no se ha llamado a SetKeyManagementServiceLookupDomain.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string KeyManagementServiceLookupDomain => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceLookupDomain"));

		[Description("Nombre del host KMS. Devuelve null si no se llamó a SetKeyManagementServiceMachine.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string KeyManagementServiceMachine => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceMachine"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceNonGenuineGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=4 (período de gracia para software no original).")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public uint KeyManagementServiceNonGenuineGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceNotificationRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=5 (notificación).")]
		[Browsable(true)]
		public uint KeyManagementServiceNotificationRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOBGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=2 (período de gracia inicial).")]
		public uint KeyManagementServiceOOBGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOTGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=3 (período de gracia fuera de tolerancia).")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceOOTGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServicePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Puerto TCP usado por clientes para enviar solicitudes de activación de KMS. Devuelve 0 si no se llamó a SetKeyManagementServicePort.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServicePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServicePort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Identificador de la clave de producto KMS. Devuelve null si no es aplicable.")]
		[Browsable(true)]
		public string KeyManagementServiceProductKeyID => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceProductKeyID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceTotalRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número total de solicitudes KMS válidas.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint KeyManagementServiceTotalRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceUnlicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=0 (sin licencia).")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceUnlicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests"));
			}
		}

		[Description("Identificador de dependencia de la familia de SKU empleado para determinar las relaciones de licencias para complementos.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string LicenseDependsOn => Conversions.ToString(managementBaseObject_1.get_Item("LicenseDependsOn"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Identificador de familia de SKU empleado para determinar las relaciones de licencias para complementos.")]
		public string LicenseFamily => Conversions.ToString(managementBaseObject_1.get_Item("LicenseFamily"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsLicenseIsAddonNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseIsAddon") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Devuelve True si se identifica el producto como licencia de complemento.")]
		public bool LicenseIsAddon
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseIsAddon") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("LicenseIsAddon"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsLicenseStatusNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatus") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Estado de licencia de la aplicación de este producto.  0=sin licencia, 1=con licencia, 2=período de gracia inicial, 3=período de gracia fuera de tolerancia, 4=período de gracia para software no original, 5=notificación, 6=período de gracia extendido.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint LicenseStatus
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatus") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("LicenseStatus"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsLicenseStatusReasonNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatusReason") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Código diagnóstico que indica por qué un equipo está en un estado de licencia específico.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public uint LicenseStatusReason
		{
			get
			{
				if (managementBaseObject_1.get_Item("LicenseStatusReason") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("LicenseStatusReason"));
			}
		}

		[Browsable(true)]
		[Description("Dirección URL del Servidor de licencias de software para el certificado de enlace")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string MachineURL => Conversions.ToString(managementBaseObject_1.get_Item("MachineURL"));

		[Description("Nombre del producto")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string Name => Conversions.ToString(managementBaseObject_1.get_Item("Name"));

		[Description("Identificador de la aplicación de este producto que sirve para realizar la activación por teléfono o sin conexión. Devuelve null si no está instalada una clave de producto.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string OfflineInstallationId => Conversions.ToString(managementBaseObject_1.get_Item("OfflineInstallationId"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Últimos cinco caracteres de la clave de este producto. Devuelve null si no está instalada una clave de producto.")]
		[Browsable(true)]
		public string PartialProductKey => Conversions.ToString(managementBaseObject_1.get_Item("PartialProductKey"));

		[Description("Dirección URL del Servidor de licencias de software para el certificado de proceso")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ProcessorURL => Conversions.ToString(managementBaseObject_1.get_Item("ProcessorURL"));

		[Description("Cadena de canales de clave de producto. Devuelve null si no hay instalada ninguna clave de producto.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string ProductKeyChannel => Conversions.ToString(managementBaseObject_1.get_Item("ProductKeyChannel"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Identificador de la clave de producto. Devuelve null si no está instalada una clave de producto.")]
		public string ProductKeyID => Conversions.ToString(managementBaseObject_1.get_Item("ProductKeyID"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Clave de producto ID2, PID2, cadena. Devuelve null si no hay instalada una clave de producto.")]
		public string ProductKeyID2 => Conversions.ToString(managementBaseObject_1.get_Item("ProductKeyID2"));

		[Description("Dirección URL del Servidor de licencias de software para el certificado de producto")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string ProductKeyURL => Conversions.ToString(managementBaseObject_1.get_Item("ProductKeyURL"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsRemainingAppReArmCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RemainingAppReArmCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Número de veces restantes que se puede rearmar correctamente la aplicación.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint RemainingAppReArmCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RemainingAppReArmCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RemainingAppReArmCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsRemainingSkuReArmCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RemainingSkuReArmCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número de veces restantes que se puede rearmar correctamente el SKU.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint RemainingSkuReArmCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RemainingSkuReArmCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RemainingSkuReArmCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsRequiredClientCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número mínimo de clientes necesarios para conectarse a un host KMS y habilitar las licencias por volumen.")]
		public uint RequiredClientCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RequiredClientCount"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Información adicional para la activación basada en token.")]
		public string TokenActivationAdditionalInfo => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationAdditionalInfo"));

		[Description("Huella digital del certificado que activó el producto.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string TokenActivationCertificateThumbprint => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationCertificateThumbprint"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTokenActivationGrantNumberNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationGrantNumber") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de concesión de la licencia de activación basada en token que activó el producto.")]
		public uint TokenActivationGrantNumber
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationGrantNumber") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TokenActivationGrantNumber"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Identificador de la licencia de activación basada en token que activó el producto.")]
		public string TokenActivationILID => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationILID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsTokenActivationILVIDNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationILVID") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Versión de la licencia de activación basada en token que activó el producto.")]
		public uint TokenActivationILVID
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationILVID") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TokenActivationILVID"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTrustedTimeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TrustedTime") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Hora de confianza del producto.")]
		[Browsable(true)]
		public DateTime TrustedTime
		{
			get
			{
				if (managementBaseObject_1.get_Item("TrustedTime") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("TrustedTime")));
				}
				return DateTime.MinValue;
			}
		}

		[Description("Dirección URL del Servidor de licencias de software para la licencia de usuario")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string UseLicenseURL => Conversions.ToString(managementBaseObject_1.get_Item("UseLicenseURL"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Dirección URL del servidor de licencias de software para validación original")]
		public string ValidationURL => Conversions.ToString(managementBaseObject_1.get_Item("ValidationURL"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsVLActivationIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Frecuencia de contacto en minutos de un cliente con el host KMS antes de que tenga licencia el producto.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLActivationInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLActivationInterval"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsVLActivationTypeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationType") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Tipo de activación usado para la última activación de cliente de VL correcta.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLActivationType
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationType") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLActivationType"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsVLActivationTypeEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationTypeEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Tipo de activación configurada para el cliente de VL.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLActivationTypeEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationTypeEnabled") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLActivationTypeEnabled"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsVLRenewalIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Frecuencia de contacto en minutos de un cliente con el host KMS una vez que tenga licencia el producto.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLRenewalInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLRenewalInterval"));
			}
		}

		public SoftwareLicensingProduct()
			: this()
		{
			method_33(null, null, null);
		}

		public SoftwareLicensingProduct(string keyID)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_33(null, new ManagementPath(smethod_0(keyID)), null);
		}

		public SoftwareLicensingProduct(ManagementScope mgmtScope, string keyID)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_33(mgmtScope, new ManagementPath(smethod_0(keyID)), null);
		}

		public SoftwareLicensingProduct(ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_33(null, path, getOptions);
		}

		public SoftwareLicensingProduct(ManagementScope mgmtScope, ManagementPath path)
			: this()
		{
			method_33(mgmtScope, path, null);
		}

		public SoftwareLicensingProduct(ManagementPath path)
			: this()
		{
			method_33(null, path, null);
		}

		public SoftwareLicensingProduct(ManagementScope mgmtScope, ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_33(mgmtScope, path, getOptions);
		}

		public SoftwareLicensingProduct(ManagementObject theObject)
			: this()
		{
			method_32();
			if (!method_1((ManagementBaseObject)(object)theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public SoftwareLicensingProduct(ManagementBaseObject theObject)
			: this()
		{
			method_32();
			if (!method_1(theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementBaseObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties(theObject);
			managementBaseObject_1 = managementBaseObject_0;
			bool_1 = true;
		}

		private bool method_0(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			if (managementPath_0 != null && string.Compare(managementPath_0.get_ClassName(), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			return method_1((ManagementBaseObject)new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0));
		}

		private bool method_1(ManagementBaseObject managementBaseObject_2)
		{
			if (managementBaseObject_2 != null && string.Compare(Conversions.ToString(managementBaseObject_2.get_Item("__CLASS")), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			Array array = (Array)managementBaseObject_2.get_Item("__DERIVATION");
			if (array != null)
			{
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					if (string.Compare(Conversions.ToString(array.GetValue(num)), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		public static DateTime ToDateTime(string dmtfDate)
		{
			DateTime minValue = DateTime.MinValue;
			int num = minValue.Year;
			int num2 = minValue.Month;
			int num3 = minValue.Day;
			int num4 = minValue.Hour;
			int num5 = minValue.Minute;
			int num6 = minValue.Second;
			long num7 = 0L;
			DateTime minValue2 = DateTime.MinValue;
			string empty = string.Empty;
			if (dmtfDate == null)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length == 0)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length != 25)
			{
				throw new ArgumentOutOfRangeException();
			}
			checked
			{
				try
				{
					empty = dmtfDate.Substring(0, 4);
					if (Operators.CompareString("****", empty, false) != 0)
					{
						num = int.Parse(empty);
					}
					empty = dmtfDate.Substring(4, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num2 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(6, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num3 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(8, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num4 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(10, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num5 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(12, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num6 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(15, 6);
					if (Operators.CompareString("******", empty, false) != 0)
					{
						num7 = long.Parse(empty) * 10L;
					}
					if (num < 0 || num2 < 0 || num3 < 0 || num4 < 0 || num5 < 0 || num5 < 0 || num6 < 0 || num7 < 0L)
					{
						throw new ArgumentOutOfRangeException();
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					throw new ArgumentOutOfRangeException(null, ex2.Message);
				}
				minValue2 = new DateTime(num, num2, num3, num4, num5, num6, 0).AddTicks(num7);
				TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(minValue2);
				int num8 = 0;
				int num9 = 0;
				long num10 = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				empty = dmtfDate.Substring(22, 3);
				if (Operators.CompareString(empty, "******", false) != 0)
				{
					empty = dmtfDate.Substring(21, 4);
					try
					{
						num8 = int.Parse(empty);
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						throw new ArgumentOutOfRangeException(null, ex4.Message);
					}
					num9 = (int)(num10 - num8);
					minValue2 = minValue2.AddMinutes(num9);
				}
				return minValue2;
			}
		}

		public static string ToDmtfDateTime(DateTime date)
		{
			string empty = string.Empty;
			TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(date);
			checked
			{
				long value = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				if (Math.Abs(value) > 999L)
				{
					date = date.ToUniversalTime();
					empty = "+000";
				}
				else if (utcOffset.Ticks >= 0L)
				{
					empty = "+" + ((long)Math.Round((double)utcOffset.Ticks / 600000000.0)).ToString().PadLeft(3, '0');
				}
				else
				{
					string text = value.ToString();
					empty = "-" + text.Substring(1, text.Length - 1).PadLeft(3, '0');
				}
				string str = string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(date.Year.ToString().PadLeft(4, '0') + date.Month.ToString().PadLeft(2, '0'), date.Day.ToString().PadLeft(2, '0')), date.Hour.ToString().PadLeft(2, '0')), date.Minute.ToString().PadLeft(2, '0')), date.Second.ToString().PadLeft(2, '0')), ".");
				DateTime dateTime = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
				string text2 = ((long)Math.Round((double)((date.Ticks - dateTime.Ticks) * 1000L) / 10000.0)).ToString();
				if (text2.Length > 6)
				{
					text2 = text2.Substring(0, 6);
				}
				return string.Concat(str + text2.PadLeft(6, '0'), empty);
			}
		}

		private bool method_2()
		{
			if (!IsAutomaticVMActivationLastActivationTimeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_3()
		{
			if (!IsDiscoveredKeyManagementServiceMachinePortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_4()
		{
			if (!IsEvaluationEndDateNull)
			{
				return true;
			}
			return false;
		}

		private bool method_5()
		{
			if (!IsExtendedGraceNull)
			{
				return true;
			}
			return false;
		}

		private bool method_6()
		{
			if (!IsGenuineStatusNull)
			{
				return true;
			}
			return false;
		}

		private bool method_7()
		{
			if (!IsGracePeriodRemainingNull)
			{
				return true;
			}
			return false;
		}

		private bool method_8()
		{
			if (!IsIsKeyManagementServiceMachineNull)
			{
				return true;
			}
			return false;
		}

		private bool method_9()
		{
			if (!IsKeyManagementServiceCurrentCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_10()
		{
			if (!IsKeyManagementServiceFailedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_11()
		{
			if (!IsKeyManagementServiceLicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_12()
		{
			if (!IsKeyManagementServiceNonGenuineGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_13()
		{
			if (!IsKeyManagementServiceNotificationRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_14()
		{
			if (!IsKeyManagementServiceOOBGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_15()
		{
			if (!IsKeyManagementServiceOOTGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_16()
		{
			if (!IsKeyManagementServicePortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_17()
		{
			if (!IsKeyManagementServiceTotalRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_18()
		{
			if (!IsKeyManagementServiceUnlicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_19()
		{
			if (!IsLicenseIsAddonNull)
			{
				return true;
			}
			return false;
		}

		private bool method_20()
		{
			if (!IsLicenseStatusNull)
			{
				return true;
			}
			return false;
		}

		private bool method_21()
		{
			if (!IsLicenseStatusReasonNull)
			{
				return true;
			}
			return false;
		}

		private bool method_22()
		{
			if (!IsRemainingAppReArmCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_23()
		{
			if (!IsRemainingSkuReArmCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_24()
		{
			if (!IsRequiredClientCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_25()
		{
			if (!IsTokenActivationGrantNumberNull)
			{
				return true;
			}
			return false;
		}

		private bool method_26()
		{
			if (!IsTokenActivationILVIDNull)
			{
				return true;
			}
			return false;
		}

		private bool method_27()
		{
			if (!IsTrustedTimeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_28()
		{
			if (!IsVLActivationIntervalNull)
			{
				return true;
			}
			return false;
		}

		private bool method_29()
		{
			if (!IsVLActivationTypeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_30()
		{
			if (!IsVLActivationTypeEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_31()
		{
			if (!IsVLRenewalIntervalNull)
			{
				return true;
			}
			return false;
		}

		[Browsable(true)]
		public void CommitObject()
		{
			if (!bool_1)
			{
				managementObject_0.Put();
			}
		}

		[Browsable(true)]
		public void CommitObject(PutOptions putOptions)
		{
			if (!bool_1)
			{
				managementObject_0.Put(putOptions);
			}
		}

		private void method_32()
		{
			bool_0 = true;
			bool_1 = false;
		}

		private static string smethod_0(string string_2)
		{
			return string.Concat("root\\CimV2:SoftwareLicensingProduct", string.Concat(".ID=", string.Concat("\"", string_2 + "\"")));
		}

		private void method_33(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			method_32();
			if (managementPath_0 != null && !method_0(managementScope_1, managementPath_0, objectGetOptions_0))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0);
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public static SoftwareLicensingProductCollection GetInstances()
		{
			return GetInstances(null, null, null);
		}

		public static SoftwareLicensingProductCollection GetInstances(string condition)
		{
			return GetInstances(null, condition, null);
		}

		public static SoftwareLicensingProductCollection GetInstances(string[] selectedProperties)
		{
			return GetInstances(null, null, selectedProperties);
		}

		public static SoftwareLicensingProductCollection GetInstances(string condition, string[] selectedProperties)
		{
			return GetInstances(null, condition, selectedProperties);
		}

		public static SoftwareLicensingProductCollection GetInstances(ManagementScope mgmtScope, EnumerationOptions enumOptions)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementPath val = new ManagementPath();
			val.set_ClassName("SoftwareLicensingProduct");
			val.set_NamespacePath("root\\CimV2");
			ManagementClass val2 = new ManagementClass(mgmtScope, val, (ObjectGetOptions)null);
			if (enumOptions == null)
			{
				enumOptions = new EnumerationOptions();
				enumOptions.set_EnsureLocatable(true);
			}
			return new SoftwareLicensingProductCollection(val2.GetInstances(enumOptions));
		}

		public static SoftwareLicensingProductCollection GetInstances(ManagementScope mgmtScope, string condition)
		{
			return GetInstances(mgmtScope, condition, null);
		}

		public static SoftwareLicensingProductCollection GetInstances(ManagementScope mgmtScope, string[] selectedProperties)
		{
			return GetInstances(mgmtScope, null, selectedProperties);
		}

		public static SoftwareLicensingProductCollection GetInstances(ManagementScope mgmtScope, string condition, string[] selectedProperties)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementObjectSearcher val = new ManagementObjectSearcher(mgmtScope, (ObjectQuery)new SelectQuery("SoftwareLicensingProduct", condition, selectedProperties));
			EnumerationOptions val2 = new EnumerationOptions();
			val2.set_EnsureLocatable(true);
			val.set_Options(val2);
			return new SoftwareLicensingProductCollection(val.Get());
		}

		[Browsable(true)]
		public static SoftwareLicensingProduct CreateInstance()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Expected O, but got Unknown
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Expected O, but got Unknown
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Expected O, but got Unknown
			ManagementScope val = null;
			if (managementScope_0 == null)
			{
				val = new ManagementScope();
				val.get_Path().set_NamespacePath(string_0);
			}
			else
			{
				val = managementScope_0;
			}
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(val, val2, (ObjectGetOptions)null);
			return new SoftwareLicensingProduct(val3.CreateInstance());
		}

		[Browsable(true)]
		public void Delete()
		{
			managementObject_0.Delete();
		}

		public uint Activate()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("Activate", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceLookupDomain()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceLookupDomain", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceMachine()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServicePort()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearVLActivationTypeEnabled()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearVLActivationTypeEnabled", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DepositOfflineConfirmationId(string ConfirmationId, string InstallationId)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DepositOfflineConfirmationId");
				val.set_Item("ConfirmationId", (object)ConfirmationId);
				val.set_Item("InstallationId", (object)InstallationId);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DepositOfflineConfirmationId", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DepositTokenActivationResponse(string CertChain, string Challenge, string Response)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DepositTokenActivationResponse");
				val.set_Item("CertChain", (object)CertChain);
				val.set_Item("Challenge", (object)Challenge);
				val.set_Item("Response", (object)Response);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DepositTokenActivationResponse", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint GenerateTokenActivationChallenge(ref string Challenge)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GenerateTokenActivationChallenge", val, (InvokeMethodOptions)null);
				Challenge = Convert.ToString(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("Challenge").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			Challenge = null;
			return Convert.ToUInt32(0);
		}

		public uint GetPolicyInformationDWord(string PolicyName, ref uint PolicyValue)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("GetPolicyInformationDWord");
				val.set_Item("PolicyName", (object)PolicyName);
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GetPolicyInformationDWord", val, (InvokeMethodOptions)null);
				PolicyValue = Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("PolicyValue").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			PolicyValue = Convert.ToUInt32(0);
			return Convert.ToUInt32(0);
		}

		public uint GetPolicyInformationString(string PolicyName, ref string PolicyValue)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("GetPolicyInformationString");
				val.set_Item("PolicyName", (object)PolicyName);
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GetPolicyInformationString", val, (InvokeMethodOptions)null);
				PolicyValue = Convert.ToString(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("PolicyValue").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			PolicyValue = null;
			return Convert.ToUInt32(0);
		}

		public uint GetTokenActivationGrants(ref string[] Grants)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GetTokenActivationGrants", val, (InvokeMethodOptions)null);
				Grants = (string[])val2.get_Properties().get_Item("Grants").get_Value();
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			Grants = null;
			return Convert.ToUInt32(0);
		}

		public uint ReArmSku()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ReArmSku", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceLookupDomain(string LookupDomain)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceLookupDomain");
				val.set_Item("LookupDomain", (object)LookupDomain);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceLookupDomain", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceMachine(string MachineName)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceMachine");
				val.set_Item("MachineName", (object)MachineName);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServicePort(uint PortNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServicePort");
				val.set_Item("PortNumber", (object)PortNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetVLActivationTypeEnabled(uint ActivationType)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetVLActivationTypeEnabled");
				val.set_Item("ActivationType", (object)ActivationType);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetVLActivationTypeEnabled", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint UninstallProductKey()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("UninstallProductKey", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}
	}
	public class SoftwareLicensingService : Component
	{
		public class SoftwareLicensingServiceCollection : ICollection
		{
			public class SoftwareLicensingServiceEnumerator : IEnumerator
			{
				private ManagementObjectEnumerator managementObjectEnumerator_0;

				virtual object IEnumerator.Current => new SoftwareLicensingService((ManagementObject)managementObjectEnumerator_0.get_Current());

				public SoftwareLicensingServiceEnumerator(ManagementObjectEnumerator objEnum)
				{
					managementObjectEnumerator_0 = objEnum;
				}

				public virtual bool MoveNext()
				{
					return managementObjectEnumerator_0.MoveNext();
				}

				public virtual void Reset()
				{
					managementObjectEnumerator_0.Reset();
				}
			}

			private ManagementObjectCollection managementObjectCollection_0;

			virtual int ICollection.Count => managementObjectCollection_0.get_Count();

			virtual bool ICollection.IsSynchronized => managementObjectCollection_0.get_IsSynchronized();

			virtual object ICollection.SyncRoot => this;

			public SoftwareLicensingServiceCollection(ManagementObjectCollection objCollection)
			{
				managementObjectCollection_0 = objCollection;
			}

			public virtual void CopyTo(Array array, int index)
			{
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_0023: Expected O, but got Unknown
				managementObjectCollection_0.CopyTo(array, index);
				for (int i = 0; i < array.Length; i = checked(i + 1))
				{
					array.SetValue(new SoftwareLicensingService((ManagementObject)array.GetValue(i)), i);
				}
			}

			public virtual IEnumerator GetEnumerator()
			{
				return new SoftwareLicensingServiceEnumerator(managementObjectCollection_0.GetEnumerator());
			}
		}

		public class WMIValueTypeConverter : TypeConverter
		{
			private TypeConverter typeConverter_0;

			private Type type_0;

			public WMIValueTypeConverter(Type inBaseType)
				: this()
			{
				typeConverter_0 = TypeDescriptor.GetConverter(inBaseType);
				type_0 = inBaseType;
			}

			public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType)
			{
				return typeConverter_0.CanConvertFrom(context, srcType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				return typeConverter_0.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				return typeConverter_0.ConvertFrom(context, culture, RuntimeHelpers.GetObjectValue(value));
			}

			public override object CreateInstance(ITypeDescriptorContext context, IDictionary dictionary)
			{
				return typeConverter_0.CreateInstance(context, dictionary);
			}

			public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetCreateInstanceSupported(context);
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributeVar)
			{
				return typeConverter_0.GetProperties(context, RuntimeHelpers.GetObjectValue(value), attributeVar);
			}

			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetPropertiesSupported(context);
			}

			public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValues(context);
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesExclusive(context);
			}

			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesSupported(context);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if ((object)type_0.BaseType == typeof(Enum))
				{
					if ((object)value.GetType() == destinationType)
					{
						return value;
					}
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "NULL_ENUM_VALUE";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if ((object)type_0 == typeof(bool) && (object)type_0.BaseType == typeof(ValueType))
				{
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if (context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
				{
					return "";
				}
				return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
			}
		}

		[TypeConverter(typeof(ExpandableObjectConverter))]
		public class ManagementSystemProperties
		{
			private ManagementBaseObject managementBaseObject_0;

			[Browsable(true)]
			public int GENUS => Conversions.ToInteger(managementBaseObject_0.get_Item("__GENUS"));

			[Browsable(true)]
			public string CLASS => Conversions.ToString(managementBaseObject_0.get_Item("__CLASS"));

			[Browsable(true)]
			public string SUPERCLASS => Conversions.ToString(managementBaseObject_0.get_Item("__SUPERCLASS"));

			[Browsable(true)]
			public string DYNASTY => Conversions.ToString(managementBaseObject_0.get_Item("__DYNASTY"));

			[Browsable(true)]
			public string RELPATH => Conversions.ToString(managementBaseObject_0.get_Item("__RELPATH"));

			[Browsable(true)]
			public int PROPERTY_COUNT => Conversions.ToInteger(managementBaseObject_0.get_Item("__PROPERTY_COUNT"));

			[Browsable(true)]
			public string[] DERIVATION => (string[])managementBaseObject_0.get_Item("__DERIVATION");

			[Browsable(true)]
			public string SERVER => Conversions.ToString(managementBaseObject_0.get_Item("__SERVER"));

			[Browsable(true)]
			public string NAMESPACE => Conversions.ToString(managementBaseObject_0.get_Item("__NAMESPACE"));

			[Browsable(true)]
			public string PATH => Conversions.ToString(managementBaseObject_0.get_Item("__PATH"));

			public ManagementSystemProperties(ManagementBaseObject ManagedObject)
			{
				managementBaseObject_0 = ManagedObject;
			}
		}

		private static string string_0 = "root\\CimV2";

		private static string string_1 = "SoftwareLicensingService";

		private static ManagementScope managementScope_0 = null;

		private ManagementSystemProperties managementSystemProperties_0;

		private ManagementObject managementObject_0;

		private bool bool_0;

		private ManagementBaseObject managementBaseObject_0;

		private ManagementBaseObject managementBaseObject_1;

		private bool bool_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string OriginatingNamespace => "root\\CimV2";

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ManagementClassName
		{
			get
			{
				string text = string_1;
				if (managementBaseObject_1 != null && managementBaseObject_1.get_ClassPath() != null)
				{
					text = Conversions.ToString(managementBaseObject_1.get_Item("__CLASS"));
					if (text == null || (object)text == string.Empty)
					{
						text = string_1;
					}
				}
				return text;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public ManagementSystemProperties SystemProperties => managementSystemProperties_0;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public ManagementBaseObject LateBoundObject => managementBaseObject_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementScope Scope
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Scope();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					managementObject_0.set_Scope(value);
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool AutoCommit
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		[Browsable(true)]
		public ManagementPath Path
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Path();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					if (!method_0(null, value, null))
					{
						throw new ArgumentException("El nombre de clase no coincide.");
					}
					managementObject_0.set_Path(value);
				}
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public static ManagementScope StaticScope
		{
			get
			{
				return managementScope_0;
			}
			set
			{
				managementScope_0 = value;
			}
		}

		[Browsable(true)]
		[Description("GUID que identifica un cliente KMS a un host KMS. El cliente lo incluye en las solicitudes que envía al KMS.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ClientMachineID => Conversions.ToString(managementBaseObject_1.get_Item("ClientMachineID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Última dirección IP de host de KMS detectada mediante DNS.")]
		public string DiscoveredKeyManagementServiceMachineIpAddress => Conversions.ToString(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachineIpAddress"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Último nombre de host KMS detectado a través de DNS.")]
		public string DiscoveredKeyManagementServiceMachineName => Conversions.ToString(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachineName"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDiscoveredKeyManagementServiceMachinePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Último puerto de host KMS detectado a través de DNS.")]
		[Browsable(true)]
		public uint DiscoveredKeyManagementServiceMachinePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("DiscoveredKeyManagementServiceMachinePort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsIsKeyManagementServiceMachineNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Indica si KMS está habilitado en el equipo: 0 si no lo está, 1 si lo está.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint IsKeyManagementServiceMachine
		{
			get
			{
				if (managementBaseObject_1.get_Item("IsKeyManagementServiceMachine") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("IsKeyManagementServiceMachine"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceCurrentCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número de clientes KMS activos actualmente en el host KMS. -1 indica que el equipo no está habilitado como KMS o que no recibió ninguna solicitud de licencia de cliente.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceCurrentCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceCurrentCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceDnsPublishingNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceDnsPublishing") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Indica el estado de publicación de DNS de un host KMS: 0=deshabilitado, 1=publicación automática habilitada (predeterminado).")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool KeyManagementServiceDnsPublishing
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceDnsPublishing") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceDnsPublishing"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceFailedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número total de solicitudes KMS no válidas.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceFailedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceFailedRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceHostCachingNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceHostCaching") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("Indica el estado de caché del nombre y el puerto del host KMS: 0=caché deshabilitada, 1=caché habilitada (predeterminado).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool KeyManagementServiceHostCaching
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceHostCaching") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceHostCaching"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceLicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=1 (con licencia).")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceLicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceLicensedRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceListeningPortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceListeningPort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("Puerto TCP que emplea el host KMS para escuchar solicitudes de activación.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint KeyManagementServiceListeningPort
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceListeningPort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceListeningPort"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Nombre completo del dominio del recurso que contiene los registros SRV de KMS de la organización. Devuelve NULL si no se ha llamado a SetKeyManagementServiceLookupDomain.")]
		[Browsable(true)]
		public string KeyManagementServiceLookupDomain => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceLookupDomain"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceLowPriorityNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLowPriority") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Indica el estado de prioridad de subproceso del servicio KMS: 0=prioridad normal (predeterminado), 1=baja prioridad.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool KeyManagementServiceLowPriority
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceLowPriority") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("KeyManagementServiceLowPriority"));
			}
		}

		[Description("Nombre del host KMS. Devuelve null si no se llamó a SetKeyManagementServiceMachine.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string KeyManagementServiceMachine => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceMachine"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceNonGenuineGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=4 (período de gracia para software no original).")]
		public uint KeyManagementServiceNonGenuineGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNonGenuineGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceNotificationRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=5 (notificación).")]
		public uint KeyManagementServiceNotificationRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceNotificationRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOBGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=2 (período de gracia inicial).")]
		public uint KeyManagementServiceOOBGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOBGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServiceOOTGraceRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número de solicitudes KMS de clientes con estado de licencia=3 (período de gracia fuera de tolerancia).")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceOOTGraceRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceOOTGraceRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsKeyManagementServicePortNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Puerto TCP usado por clientes para enviar solicitudes de activación de KMS. Devuelve 0 si no se llamó a SetKeyManagementServicePort.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServicePort
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServicePort") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServicePort"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Identificador de la clave de producto KMS. Devuelve null si no es aplicable.")]
		public string KeyManagementServiceProductKeyID => Conversions.ToString(managementBaseObject_1.get_Item("KeyManagementServiceProductKeyID"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceTotalRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número total de solicitudes KMS válidas.")]
		[Browsable(true)]
		public uint KeyManagementServiceTotalRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceTotalRequests"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeyManagementServiceUnlicensedRequestsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Número de solicitudes KMS de clientes con estado de licencia=0 (sin licencia).")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeyManagementServiceUnlicensedRequests
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeyManagementServiceUnlicensedRequests"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsOA2xBiosMarkerMinorVersionNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("OA2xBiosMarkerMinorVersion") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número de versión secundaria del marcador BIOS OA2.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint OA2xBiosMarkerMinorVersion
		{
			get
			{
				if (managementBaseObject_1.get_Item("OA2xBiosMarkerMinorVersion") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("OA2xBiosMarkerMinorVersion"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsOA2xBiosMarkerStatusNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("OA2xBiosMarkerStatus") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Estado del marcador BIOS OA2.  0=Sin tabla SLIC, 1=Tabla SLIC con marcador de Windows, 2=Tabla SLIC sin marcador de Windows, 3=Tabla SLIC dañada o no válida")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint OA2xBiosMarkerStatus
		{
			get
			{
				if (managementBaseObject_1.get_Item("OA2xBiosMarkerStatus") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("OA2xBiosMarkerStatus"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Clave de producto del marcador BIOS OA3.")]
		public string OA3xOriginalProductKey => Conversions.ToString(managementBaseObject_1.get_Item("OA3xOriginalProductKey"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsPolicyCacheRefreshRequiredNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("PolicyCacheRefreshRequired") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Indica si es necesario actualizar la memoria caché de la directiva de licencias: 0=no es necesario, 1=actualización necesaria.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint PolicyCacheRefreshRequired
		{
			get
			{
				if (managementBaseObject_1.get_Item("PolicyCacheRefreshRequired") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("PolicyCacheRefreshRequired"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsRemainingWindowsReArmCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RemainingWindowsReArmCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número de veces restantes que se puede rearmar correctamente el cliente.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint RemainingWindowsReArmCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RemainingWindowsReArmCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RemainingWindowsReArmCount"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsRequiredClientCountNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Número mínimo de clientes necesarios para conectarse a un host KMS y habilitar las licencias por volumen.")]
		public uint RequiredClientCount
		{
			get
			{
				if (managementBaseObject_1.get_Item("RequiredClientCount") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("RequiredClientCount"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Información adicional para la activación basada en token.")]
		[Browsable(true)]
		public string TokenActivationAdditionalInfo => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationAdditionalInfo"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Huella digital del certificado que activó el equipo.")]
		public string TokenActivationCertificateThumbprint => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationCertificateThumbprint"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsTokenActivationGrantNumberNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationGrantNumber") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Número de concesión de la licencia de activación basada en token que activó el equipo.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint TokenActivationGrantNumber
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationGrantNumber") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TokenActivationGrantNumber"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Identificador de la licencia de activación basada en token que activó el equipo.")]
		public string TokenActivationILID => Conversions.ToString(managementBaseObject_1.get_Item("TokenActivationILID"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTokenActivationILVIDNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationILVID") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Versión de la licencia de activación basada en token que activó el equipo.")]
		public uint TokenActivationILVID
		{
			get
			{
				if (managementBaseObject_1.get_Item("TokenActivationILVID") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TokenActivationILVID"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Versión del Servicio de licencias de software")]
		[Browsable(true)]
		public string Version => Conversions.ToString(managementBaseObject_1.get_Item("Version"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsVLActivationIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Frecuencia de contacto en minutos de un cliente con el host KMS antes de que tenga licencia el cliente.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLActivationInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLActivationInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLActivationInterval"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsVLRenewalIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("Frecuencia de contacto en minutos de un cliente con el host KMS una vez que tenga licencia el cliente.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint VLRenewalInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("VLRenewalInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("VLRenewalInterval"));
			}
		}

		public SoftwareLicensingService()
			: this()
		{
			method_28(null, null, null);
		}

		public SoftwareLicensingService(string keyVersion)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_28(null, new ManagementPath(smethod_0(keyVersion)), null);
		}

		public SoftwareLicensingService(ManagementScope mgmtScope, string keyVersion)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_28(mgmtScope, new ManagementPath(smethod_0(keyVersion)), null);
		}

		public SoftwareLicensingService(ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_28(null, path, getOptions);
		}

		public SoftwareLicensingService(ManagementScope mgmtScope, ManagementPath path)
			: this()
		{
			method_28(mgmtScope, path, null);
		}

		public SoftwareLicensingService(ManagementPath path)
			: this()
		{
			method_28(null, path, null);
		}

		public SoftwareLicensingService(ManagementScope mgmtScope, ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_28(mgmtScope, path, getOptions);
		}

		public SoftwareLicensingService(ManagementObject theObject)
			: this()
		{
			method_27();
			if (!method_1((ManagementBaseObject)(object)theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public SoftwareLicensingService(ManagementBaseObject theObject)
			: this()
		{
			method_27();
			if (!method_1(theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementBaseObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties(theObject);
			managementBaseObject_1 = managementBaseObject_0;
			bool_1 = true;
		}

		private bool method_0(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			if (managementPath_0 != null && string.Compare(managementPath_0.get_ClassName(), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			return method_1((ManagementBaseObject)new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0));
		}

		private bool method_1(ManagementBaseObject managementBaseObject_2)
		{
			if (managementBaseObject_2 != null && string.Compare(Conversions.ToString(managementBaseObject_2.get_Item("__CLASS")), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			Array array = (Array)managementBaseObject_2.get_Item("__DERIVATION");
			if (array != null)
			{
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					if (string.Compare(Conversions.ToString(array.GetValue(num)), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		private bool method_2()
		{
			if (!IsDiscoveredKeyManagementServiceMachinePortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_3()
		{
			if (!IsIsKeyManagementServiceMachineNull)
			{
				return true;
			}
			return false;
		}

		private bool method_4()
		{
			if (!IsKeyManagementServiceCurrentCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_5()
		{
			if (!IsKeyManagementServiceDnsPublishingNull)
			{
				return true;
			}
			return false;
		}

		private bool method_6()
		{
			if (!IsKeyManagementServiceFailedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_7()
		{
			if (!IsKeyManagementServiceHostCachingNull)
			{
				return true;
			}
			return false;
		}

		private bool method_8()
		{
			if (!IsKeyManagementServiceLicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_9()
		{
			if (!IsKeyManagementServiceListeningPortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_10()
		{
			if (!IsKeyManagementServiceLowPriorityNull)
			{
				return true;
			}
			return false;
		}

		private bool method_11()
		{
			if (!IsKeyManagementServiceNonGenuineGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_12()
		{
			if (!IsKeyManagementServiceNotificationRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_13()
		{
			if (!IsKeyManagementServiceOOBGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_14()
		{
			if (!IsKeyManagementServiceOOTGraceRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_15()
		{
			if (!IsKeyManagementServicePortNull)
			{
				return true;
			}
			return false;
		}

		private bool method_16()
		{
			if (!IsKeyManagementServiceTotalRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_17()
		{
			if (!IsKeyManagementServiceUnlicensedRequestsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_18()
		{
			if (!IsOA2xBiosMarkerMinorVersionNull)
			{
				return true;
			}
			return false;
		}

		private bool method_19()
		{
			if (!IsOA2xBiosMarkerStatusNull)
			{
				return true;
			}
			return false;
		}

		private bool method_20()
		{
			if (!IsPolicyCacheRefreshRequiredNull)
			{
				return true;
			}
			return false;
		}

		private bool method_21()
		{
			if (!IsRemainingWindowsReArmCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_22()
		{
			if (!IsRequiredClientCountNull)
			{
				return true;
			}
			return false;
		}

		private bool method_23()
		{
			if (!IsTokenActivationGrantNumberNull)
			{
				return true;
			}
			return false;
		}

		private bool method_24()
		{
			if (!IsTokenActivationILVIDNull)
			{
				return true;
			}
			return false;
		}

		private bool method_25()
		{
			if (!IsVLActivationIntervalNull)
			{
				return true;
			}
			return false;
		}

		private bool method_26()
		{
			if (!IsVLRenewalIntervalNull)
			{
				return true;
			}
			return false;
		}

		[Browsable(true)]
		public void CommitObject()
		{
			if (!bool_1)
			{
				managementObject_0.Put();
			}
		}

		[Browsable(true)]
		public void CommitObject(PutOptions putOptions)
		{
			if (!bool_1)
			{
				managementObject_0.Put(putOptions);
			}
		}

		private void method_27()
		{
			bool_0 = true;
			bool_1 = false;
		}

		private static string smethod_0(string string_2)
		{
			return string.Concat("root\\CimV2:SoftwareLicensingService", string.Concat(".Version=", string.Concat("\"", string_2 + "\"")));
		}

		private void method_28(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			method_27();
			if (managementPath_0 != null && !method_0(managementScope_1, managementPath_0, objectGetOptions_0))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0);
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public static SoftwareLicensingServiceCollection GetInstances()
		{
			return GetInstances(null, null, null);
		}

		public static SoftwareLicensingServiceCollection GetInstances(string condition)
		{
			return GetInstances(null, condition, null);
		}

		public static SoftwareLicensingServiceCollection GetInstances(string[] selectedProperties)
		{
			return GetInstances(null, null, selectedProperties);
		}

		public static SoftwareLicensingServiceCollection GetInstances(string condition, string[] selectedProperties)
		{
			return GetInstances(null, condition, selectedProperties);
		}

		public static SoftwareLicensingServiceCollection GetInstances(ManagementScope mgmtScope, EnumerationOptions enumOptions)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementPath val = new ManagementPath();
			val.set_ClassName("SoftwareLicensingService");
			val.set_NamespacePath("root\\CimV2");
			ManagementClass val2 = new ManagementClass(mgmtScope, val, (ObjectGetOptions)null);
			if (enumOptions == null)
			{
				enumOptions = new EnumerationOptions();
				enumOptions.set_EnsureLocatable(true);
			}
			return new SoftwareLicensingServiceCollection(val2.GetInstances(enumOptions));
		}

		public static SoftwareLicensingServiceCollection GetInstances(ManagementScope mgmtScope, string condition)
		{
			return GetInstances(mgmtScope, condition, null);
		}

		public static SoftwareLicensingServiceCollection GetInstances(ManagementScope mgmtScope, string[] selectedProperties)
		{
			return GetInstances(mgmtScope, null, selectedProperties);
		}

		public static SoftwareLicensingServiceCollection GetInstances(ManagementScope mgmtScope, string condition, string[] selectedProperties)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementObjectSearcher val = new ManagementObjectSearcher(mgmtScope, (ObjectQuery)new SelectQuery("SoftwareLicensingService", condition, selectedProperties));
			EnumerationOptions val2 = new EnumerationOptions();
			val2.set_EnsureLocatable(true);
			val.set_Options(val2);
			return new SoftwareLicensingServiceCollection(val.Get());
		}

		[Browsable(true)]
		public static SoftwareLicensingService CreateInstance()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Expected O, but got Unknown
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Expected O, but got Unknown
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Expected O, but got Unknown
			ManagementScope val = null;
			if (managementScope_0 == null)
			{
				val = new ManagementScope();
				val.get_Path().set_NamespacePath(string_0);
			}
			else
			{
				val = managementScope_0;
			}
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(val, val2, (ObjectGetOptions)null);
			return new SoftwareLicensingService(val3.CreateInstance());
		}

		[Browsable(true)]
		public void Delete()
		{
			managementObject_0.Delete();
		}

		public uint AcquireGenuineTicket(string ServerUrl, string TemplateId)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("AcquireGenuineTicket");
				val.set_Item("ServerUrl", (object)ServerUrl);
				val.set_Item("TemplateId", (object)TemplateId);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("AcquireGenuineTicket", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceListeningPort()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceListeningPort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceLookupDomain()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceLookupDomain", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServiceMachine()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearKeyManagementServicePort()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearProductKeyFromRegistry()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearProductKeyFromRegistry", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ClearVLActivationTypeEnabled()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ClearVLActivationTypeEnabled", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DepositActiveDirectoryOfflineActivationConfirmation(string ActivationObjectName, string ConfirmationID, string ProductKey)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DepositActiveDirectoryOfflineActivationConfirmation");
				val.set_Item("ActivationObjectName", (object)ActivationObjectName);
				val.set_Item("ConfirmationID", (object)ConfirmationID);
				val.set_Item("ProductKey", (object)ProductKey);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DepositActiveDirectoryOfflineActivationConfirmation", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DisableKeyManagementServiceDnsPublishing(bool DisablePublishing)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DisableKeyManagementServiceDnsPublishing");
				val.set_Item("DisablePublishing", (object)DisablePublishing);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DisableKeyManagementServiceDnsPublishing", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DisableKeyManagementServiceHostCaching(bool DisableCaching)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DisableKeyManagementServiceHostCaching");
				val.set_Item("DisableCaching", (object)DisableCaching);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DisableKeyManagementServiceHostCaching", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint DoActiveDirectoryOnlineActivation(string ActivationObjectName, string ProductKey)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("DoActiveDirectoryOnlineActivation");
				val.set_Item("ActivationObjectName", (object)ActivationObjectName);
				val.set_Item("ProductKey", (object)ProductKey);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DoActiveDirectoryOnlineActivation", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint EnableKeyManagementServiceLowPriority(bool EnableLowPriority)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("EnableKeyManagementServiceLowPriority");
				val.set_Item("EnableLowPriority", (object)EnableLowPriority);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("EnableKeyManagementServiceLowPriority", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint GenerateActiveDirectoryOfflineActivationId(string ProductKey, ref string InstallationID)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("GenerateActiveDirectoryOfflineActivationId");
				val.set_Item("ProductKey", (object)ProductKey);
				ManagementBaseObject val2 = managementObject_0.InvokeMethod("GenerateActiveDirectoryOfflineActivationId", val, (InvokeMethodOptions)null);
				InstallationID = Convert.ToString(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("InstallationID").get_Value()));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(val2.get_Properties().get_Item("ReturnValue").get_Value()));
			}
			InstallationID = null;
			return Convert.ToUInt32(0);
		}

		public uint InstallLicense(string License)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("InstallLicense");
				val.set_Item("License", (object)License);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("InstallLicense", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint InstallLicensePackage(string LicensePackage)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("InstallLicensePackage");
				val.set_Item("LicensePackage", (object)LicensePackage);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("InstallLicensePackage", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint InstallProductKey(string ProductKey)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("InstallProductKey");
				val.set_Item("ProductKey", (object)ProductKey);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("InstallProductKey", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ReArmApp(string ApplicationId)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("ReArmApp");
				val.set_Item("ApplicationId", (object)ApplicationId);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ReArmApp", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint ReArmWindows()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ReArmWindows", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint RefreshLicenseStatus()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("RefreshLicenseStatus", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceListeningPort(uint PortNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceListeningPort");
				val.set_Item("PortNumber", (object)PortNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceListeningPort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceLookupDomain(string LookupDomain)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceLookupDomain");
				val.set_Item("LookupDomain", (object)LookupDomain);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceLookupDomain", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServiceMachine(string MachineName)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServiceMachine");
				val.set_Item("MachineName", (object)MachineName);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServiceMachine", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetKeyManagementServicePort(uint PortNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetKeyManagementServicePort");
				val.set_Item("PortNumber", (object)PortNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetKeyManagementServicePort", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetVLActivationInterval(uint ActivationInterval)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetVLActivationInterval");
				val.set_Item("ActivationInterval", (object)ActivationInterval);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetVLActivationInterval", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetVLActivationTypeEnabled(uint ActivationType)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetVLActivationTypeEnabled");
				val.set_Item("ActivationType", (object)ActivationType);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetVLActivationTypeEnabled", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetVLRenewalInterval(uint RenewalInterval)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetVLRenewalInterval");
				val.set_Item("RenewalInterval", (object)RenewalInterval);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetVLRenewalInterval", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}
	}
}
namespace AutoPico.Activador.Keys
{
	public interface IPIDCheck
	{
		string CheckProductKey(string strKey);

		string CheckProductKeyEx(string strKey, bool semicolonExport);

		void ConfigPath(string strFile);

		string GetCount(string string_0);
	}
	public class Key
	{
		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindows10
		{
			public const string Professional = "W269N-WFGWX-YVC9B-4J6C9-T83GX";

			public const string ProfessionalN = "MH37W-N47XK-V7XM9-C7227-GCQG9";

			public const string Enterprise = "NPPR9-FWDCX-D2C8J-H872K-2YT43";

			public const string EnterpriseN = "DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4";

			public const string Education = "NW6C2-QMPVW-D7KKK-3GKT6-VCFB2";

			public const string EducationN = "2WH4N-8QGBV-H22JP-CT43Q-MDWWJ";

			public const string Core = "TX9XD-98N7V-6WMQ6-BX7FG-H8Q99";

			public const string CoreN = "3KHY7-WNT83-DGQKR-F7HPR-844BM";

			public const string CoreSingleLanguage = "7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH";

			public const string CoreCountrySpecific = "PVMJN-6DFY6-9CCP6-7BKTT-D3WVR";

			public const string EnterpriseS = "WNMTR-4C88C-JK8YV-HQ7T2-76DF9";

			public const string EnterpriseSN = "2F77B-TNFGY-69QQF-B8YKP-D69TJ";

			public const string ProfessionalPreview = "43BNY-B3MHX-37RT3-HT88J-33XGM";

			public const string EnterprisePreview = "MFY6B-WNCVR-9KWQ4-9CGGM-QJ3YW";

			public const string CorePreview = "JTJ43-TNBFV-YDGKB-92WGV-GCQXV";

			public const string EducationPreview = "YVKRN-H6QFQ-JQGG3-T7BF3-2WGQ7";

			public const string CoreARM = "7NX88-X6YM3-9Q3YT-CCGBF-KBVQF";

			public const string EmbeddedIndustryA = "GN2X2-KXTK6-P92FR-VBB9G-PDJFP";

			public const string ProfessionalS = "NFDD9-FX3VM-DYCKP-B8HT8-D9M2C";

			public const string CoreConnectedCountrySpecific = "FTNXM-J4RGP-MYQCV-RVM8R-TVH24";

			public const string EmbeddedIndustry = "XY4TQ-CXNVJ-YCT73-HH6R7-R897X";

			public const string CoreConnected = "DJMYQ-WN6HG-YJ2YX-82JDB-CWFCW";

			public const string CoreConnectedSingleLanguage = "QQMNF-GPVQ6-BFXGG-GWRCX-7XKT7";

			public const string ProfessionalStudent = "YNXW3-HV3VB-Y83VG-KPBXM-6VH3Q";

			public const string CoreConnectedN = "JQNT7-W63G4-WX4QX-RD9M9-6CPKM";

			public const string ProfessionalSN = "8Q36Y-N2F39-HRMHT-4XW33-TCQR4";

			public const string EmbeddedIndustryE = "XCNC9-BPK3C-KCCMD-FTDTC-KWY4G";

			public const string ProfessionalStudentN = "8G9XJ-GN6PJ-GW787-MVV7G-GMR99";

			public const string ProfessionalWMC = "NKPM6-TCVPT-3HRFX-Q4H9B-QJ34Y";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindows81
		{
			public const string Professional = "GCRJD-8NW9H-F2CDX-CCM8D-9D6T9";

			public const string ProfessionalPreview = "MTWNQ-CKDHJ-3HXW9-Q2PFX-WB2HQ";

			public const string ProfessionalStudent = "NQHYK-WGWJH-DQJT7-XB68G-BPYG9";

			public const string ProfessionalStudentN = "TNFGH-2R6PB-8XM3K-QYHX2-J4296";

			public const string Preview = "YNB3T-VHW8P-72P6K-BQHCB-DM92V";

			public const string ProfessionalWMC = "789NJ-TQK6T-6XTH8-J39CJ-J8D3P";

			public const string ProfessionalWMCPreview = "MY4N9-TGH34-4X4VY-8FG2T-RRDPV";

			public const string Enterprise = "MHF9N-XY6XB-WVXMC-BTDCT-MKKG7";

			public const string EnterprisePreview = "2MP7K-98NK8-WPVF3-Q2WDG-VMD98";

			public const string ProfessionalN = "HMCNV-VVBFX-7HMBH-CTY9B-B4FXY";

			public const string EnterpriseN = "TT4HM-HN7YT-62K67-RGRQJ-JFFXW";

			public const string CoreARM = "XYTND-K6QKT-K2MRH-66RTM-43JKP";

			public const string Core = "M9Q9P-WNJJT-6PXPY-DWX8H-6XWKK";

			public const string CoreN = "7B9N3-D94CG-YTVHR-QBPX3-RJP64";

			public const string CoreSingleLanguage = "BB6NG-PQ82V-VRDPW-8XVD2-V8P66";

			public const string CoreCountrySpecific = "NCTT7-2RGK8-WMHRF-RY7YQ-JTXG3";

			public const string CoreConnected = "3PY8R-QHNP9-W7XQD-G6DPH-3J2C9";

			public const string CoreConnectedN = "Q6HTR-N24GM-PMJFP-69CD8-2GXKR";

			public const string CoreConnectedSingleLanguage = "KF37N-VDV38-GRRTV-XH8X6-6F3BB";

			public const string CoreConnectedCountrySpecific = "R962J-37N87-9VVK2-WJ74P-XTMHR";

			public const string EmbeddedIndustry = "NMMPB-38DD4-R2823-62W8D-VXKJB";

			public const string EmbeddedIndustryE = "FNFKF-PWTVT-9RC8H-32HB2-JB34X";

			public const string EmbeddedIndustryA = "VHXM3-NR6FT-RY6RT-CK882-KW2CJ";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindows8
		{
			public const string Professional = "NG4HW-VH26C-733KW-K6F98-J8CK4";

			public const string ProfessionalPreview = "TK8TP-9JN6P-7X7WW-RFFTV-B7QPF";

			public const string PreRelease = "DNJXJ-7XBW8-2378T-X22TX-BKG7J";

			public const string ProfessionalWMC = "GNBB8-YVD74-QJHX6-27H4K-8QHDG";

			public const string Enterprise = "32JNW-9KQ84-P47T8-D8GGY-CWCK7";

			public const string ProfessionalN = "XCVCF-2NXM9-723PB-MHCB7-2RYQQ";

			public const string EnterpriseN = "JMNMF-RHW7P-DMY6X-RF3DR-X2BQT";

			public const string CoreARM = "DXHJF-N9KQX-MFPVR-GHGQK-Y7RKV";

			public const string Core = "BN3D2-R7TKB-3YPBD-8DRP2-27GG4";

			public const string CoreN = "8N2M2-HWPGY-7PGT9-HGDD8-GVGGY";

			public const string CoreSingleLanguage = "2WN2H-YGCQR-KFX6K-CD6TF-84YXQ";

			public const string CoreCountrySpecific = "4K36P-JN4VD-GDC6V-KDT89-DYFKP";

			public const string EmbeddedProfessional = "RYXVT-BNQG7-VD29F-DBMRY-HT73M";

			public const string EmbeddedEnterprise = "NKB3R-R2F8T-3XCDP-7Q2KW-XWYQ2";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindows7
		{
			public const string Professional = "FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4";

			public const string Enterprise = "33PXH-7Y6KF-2VJC9-XBBR8-HVTHH";

			public const string ProfessionalN = "MRPKT-YTG23-K7D7T-X2JMM-QY7MG";

			public const string EnterpriseN = "YDRBP-3D83W-TY26F-D46B2-XCKRJ";

			public const string ProfessionalE = "W82YF-2Q76Y-63HXB-FGJG9-GF7QX";

			public const string EnterpriseE = "C29WB-22CC8-VJ326-GHFJW-H9DH4";

			public const string Embedded = "73KQT-CD9G6-K7TQG-66MRP-CQ22C";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindowsVista
		{
			public const string Business = "YFKBB-PQJJV-G996G-VWGXY-2V3X8";

			public const string BusinessN = "HMBQG-8H2RH-C77VX-27R82-VMQBT";

			public const string Enterprise = "VKK3X-68KWM-X2YGT-QR4M6-4BWMV";

			public const string EnterpriseN = "YDRBP-3D83W-TY26F-D46B2-XCKRJ";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindowsServer2016
		{
			public const string ServerHICore = "7VX4N-3VDHQ-VYGHB-JXJVP-9QB26";

			public const string ServerHI = "7VX4N-3VDHQ-VYGHB-JXJVP-9QB26";

			public const string ServerSolutionCore = "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";

			public const string ServerSolution = "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";

			public const string ServerStandard = "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";

			public const string ServerCloudStorage = "3NPTF-33KPT-GGBPR-YX76B-39KDD";

			public const string ServerCloudStorageCore = "3NPTF-33KPT-GGBPR-YX76B-39KDD";

			public const string ServerDatacenter = "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";

			public const string ServerStandardCore = "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";

			public const string ServerDatacenterPreview = "VRDD2-NVGDP-K7QG8-69BR4-TVFHB";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindowsServer2012R2
		{
			public const string ServerStandard = "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";

			public const string ServerDatacenter = "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";

			public const string ServerDatacenterPreview = "VRDD2-NVGDP-K7QG8-69BR4-TVFHB";

			public const string ServerStandardCore = "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";

			public const string ServerDatacenterCore = "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";

			public const string ServerCore = "";

			public const string ServerCoreN = "";

			public const string ServerMultiPointStandard = "";

			public const string ServerMultiPointPremium = "";

			public const string ServerCloudStorageCore = "3NPTF-33KPT-GGBPR-YX76B-39KDD";

			public const string ServerCloudStorage = "3NPTF-33KPT-GGBPR-YX76B-39KDD";

			public const string ServerSolutionCore = "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";

			public const string ServerSolution = "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindowsServer2012
		{
			public const string ServerStandard = "XC9B7-NBPP2-83J2H-RHMBY-92BT4";

			public const string ServerDatacenter = "48HP8-DN98B-MYWDG-T2DCC-8W83P";

			public const string ServerStandardCore = "XC9B7-NBPP2-83J2H-RHMBY-92BT4";

			public const string ServerDatacenterCore = "48HP8-DN98B-MYWDG-T2DCC-8W83P";

			public const string ServerCore = "BN3D2-R7TKB-3YPBD-8DRP2-27GG4";

			public const string ServerCoreN = "8N2M2-HWPGY-7PGT9-HGDD8-GVGGY";

			public const string ServerMultiPointStandard = "HM7DN-YVMH3-46JC3-XYTG7-CYQJJ";

			public const string ServerMultiPointPremium = "XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindowsServer2008R2
		{
			public const string ServerStandard = "YC6KT-GKW9T-YTKYR-T4X34-R7VHC";

			public const string ServerEnterprise = "489J6-VHDMP-X63PK-3K798-CPX3Y";

			public const string ServerDataCenter = "74YFP-3QFB3-KQT8W-PMXWJ-7M648";

			public const string ServerHPC = "TT8MH-CG224-D3D7Q-498W2-9QCTX";

			public const string ServerWeb = "6TPJF-RBVHG-WBW2R-86QPH-6RTM4";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysWindowsServer2008
		{
			public const string ServerStandard = "TM24T-X9RMF-VWXK6-X8JC9-BFGM2";

			public const string ServerEnterprise = "YQGMW-MPWTJ-34KDK-48M3W-X4Q6V";

			public const string ServerDataCenter = "7M67G-PC374-GR742-YH8V4-TCBY3";

			public const string ServerHPC = "RCTX3-KWVHP-BR6TB-RB6DM-6X7HP";
		}

		[StructLayout(LayoutKind.Sequential, Size = 1)]
		public struct KeysOffice
		{
			public const string Office2010ProPlus = "VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB";

			public const string Office2010Std = "V7QKV-4XVVR-XYV4D-F7DFM-8R6BM";

			public const string Office2010Access = "V7Y44-9T38C-R2VJK-666HK-T7DDX";

			public const string Office2010Excel = "H62QG-HXVKF-PP4HP-66KMR-CW9BM";

			public const string Office2010SharePoint = "QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4";

			public const string Office2010InfoPath = "K96W8-67RPQ-62T9Y-J8FQJ-BT37T";

			public const string Office2010OneNote = "Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX";

			public const string Office2010Outlook = "7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ";

			public const string Office2010PowerPoint = "RC8FX-88JRY-3PF7C-X8P67-P4VTT";

			public const string Office2010ProjectPro = "YGX6F-PGV49-PGW3J-9BTGG-VHKC6";

			public const string Office2010ProjectStd = "4HP3K-88W3F-W2K3D-6677X-F9PGB";

			public const string Office2010Publisher = "BFK7F-9MYHM-V68C7-DRQ66-83YTP";

			public const string Office2010VisioPro = "7MCW8-VRQVK-G677T-PDJCM-Q8TCP";

			public const string Office2010VisioPrem = "D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ";

			public const string Office2010VisioStd = "767HD-QGMWX-8QTDB-9G3R2-KHFGJ";

			public const string Office2010Word = "HVHB3-C6FV7-KQX9W-YQG79-CRY7T";

			public const string Office2013ProPlus = "YC7DK-G2NP3-2QQC3-J6H88-GVGXT";

			public const string Office2013Std = "KBKQT-2NMXY-JJWGP-M62JB-92CD4";

			public const string Office2013Mondo = "42QTK-RN8M7-J3C4G-BBGYM-88CYV";

			public const string Office2013Access = "NG2JY-H4JBT-HQXYP-78QH9-4JM2D";

			public const string Office2013Excel = "VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB";

			public const string Office2013InfoPath = "DKT8B-N7VXH-D963P-Q4PHY-F8894";

			public const string Office2013Lync = "2MG3G-3BNTT-3MFW9-KDQW3-TCK7R";

			public const string Office2013OneNote = "TGN6P-8MMBC-37P2F-XHXXK-P34VW";

			public const string Office2013Outlook = "QPN8Q-BJBTJ-334K3-93TGY-2PMBT";

			public const string Office2013PowerPoint = "4NT99-8RJFH-Q2VDH-KYG2C-4RD4F";

			public const string Office2013ProjectPro = "FN8TT-7WMH6-2D4X9-M337T-2342K";

			public const string Office2013ProjectStd = "6NTH3-CW976-3G3Y2-JK3TX-8QHTT";

			public const string Office2013Publisher = "PN2WF-29XG2-T9HJ7-JQPJR-FCXK4";

			public const string Office2013VisioPro = "C2FG9-N6J68-H8BTJ-BW3QX-RM3B3";

			public const string Office2013VisioStd = "J484Y-4NKBF-W2HMG-DBMJC-PGWR7";

			public const string Office2013Word = "6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7";

			public const string Office2016ProPlus = "XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99";

			public const string Office2016Std = "JNRGM-WHDWX-FJJG3-K47QV-DRTFM";

			public const string Office2016Mondo = "42QTK-RN8M7-J3C4G-BBGYM-88CYV";

			public const string Office2016Access = "GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW";

			public const string Office2016Excel = "9C2PK-NWTVB-JMPW8-BFT28-7FTBF";

			public const string Office2016InfoPath = "DKT8B-N7VXH-D963P-Q4PHY-F8894";

			public const string Office2016Lync = "2MG3G-3BNTT-3MFW9-KDQW3-TCK7R";

			public const string Office2016OneNote = "DR92N-9HTF2-97XKM-XW2WJ-XW3J6";

			public const string Office2016Outlook = "R69KK-NTPKF-7M3Q4-QYBHW-6MT9B";

			public const string Office2016PowerPoint = "J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6";

			public const string Office2016ProjectPro = "YG9NW-3K39V-2T3HJ-93F3Q-G83KT";

			public const string Office2016ProjectStd = "GNFHQ-F6YQM-KQDGJ-327XX-KQBVC";

			public const string Office2016Publisher = "F47MM-N3XJP-TQXJ9-BP99D-8K837";

			public const string Office2016VisioPro = "PD3PC-RHNGV-FXJ29-8JK7D-RJRJK";

			public const string Office2016VisioStd = "7WHWN-4T7MP-G96JF-G33KR-W8GF4";

			public const string Office2016Word = "WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6";

			public const string Office2016Skype = "869NQ-FJ69K-466HW-QYCP2-DDBV6";
		}

		private static string smethod_0(ref Variables variables_0)
		{
			try
			{
				if (variables_0.IsWindows10)
				{
					if (!variables_0.IsServer)
					{
						return smethod_1(ref variables_0.EditionID, ref variables_0);
					}
					return smethod_4(ref variables_0.EditionID, ref variables_0);
				}
				if (variables_0.IsWindows81)
				{
					if (!variables_0.IsServer)
					{
						return smethod_2(ref variables_0.EditionID, ref variables_0);
					}
					return smethod_5(ref variables_0.EditionID);
				}
				if (variables_0.IsWindows8)
				{
					if (!variables_0.IsServer)
					{
						return smethod_3(ref variables_0.EditionID);
					}
					return smethod_6(ref variables_0.EditionID);
				}
				if (variables_0.IsWindows7)
				{
					if (!variables_0.IsServer)
					{
						return smethod_7(ref variables_0.EditionID);
					}
					return smethod_8(ref variables_0.EditionID);
				}
				if (variables_0.IsWindowsVista)
				{
					if (!variables_0.IsServer)
					{
						return smethod_10(ref variables_0.EditionID);
					}
					return smethod_9(ref variables_0.EditionID);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			return string.Empty;
		}

		private static string smethod_1(ref string string_0, ref Variables variables_0)
		{
			if (!variables_0.IsPreview)
			{
				string text = string_0;
				switch (Class83.smethod_0(text))
				{
				case 284165279u:
					if (Operators.CompareString(text, "ProfessionalWMC", false) == 0)
					{
						return "NKPM6-TCVPT-3HRFX-Q4H9B-QJ34Y";
					}
					break;
				case 279320640u:
					if (Operators.CompareString(text, "CoreARM", false) == 0)
					{
						return "7NX88-X6YM3-9Q3YT-CCGBF-KBVQF";
					}
					break;
				case 201349025u:
					if (Operators.CompareString(text, "EducationN", false) == 0)
					{
						return "2WH4N-8QGBV-H22JP-CT43Q-MDWWJ";
					}
					break;
				case 290327408u:
					if (Operators.CompareString(text, "CoreN", false) == 0)
					{
						return "3KHY7-WNT83-DGQKR-F7HPR-844BM";
					}
					break;
				case 286266594u:
					if (Operators.CompareString(text, "Enterprise", false) == 0)
					{
						return "NPPR9-FWDCX-D2C8J-H872K-2YT43";
					}
					break;
				case 379705053u:
					if (Operators.CompareString(text, "EmbeddedIndustry", false) == 0)
					{
						return "XY4TQ-CXNVJ-YCT73-HH6R7-R897X";
					}
					break;
				case 379048501u:
					if (Operators.CompareString(text, "Education", false) == 0)
					{
						return "NW6C2-QMPVW-D7KKK-3GKT6-VCFB2";
					}
					break;
				case 1040237652u:
					if (Operators.CompareString(text, "CoreSingleLanguage", false) == 0)
					{
						return "7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH";
					}
					break;
				case 1019533204u:
					if (Operators.CompareString(text, "EmbeddedIndustryA", false) == 0)
					{
						return "GN2X2-KXTK6-P92FR-VBB9G-PDJFP";
					}
					break;
				case 952422728u:
					if (Operators.CompareString(text, "EmbeddedIndustryE", false) == 0)
					{
						return "XCNC9-BPK3C-KCCMD-FTDTC-KWY4G";
					}
					break;
				case 1569369246u:
					if (Operators.CompareString(text, "Core", false) == 0)
					{
						return "TX9XD-98N7V-6WMQ6-BX7FG-H8Q99";
					}
					break;
				case 1391791790u:
					if (Operators.CompareString(text, "Home", false) == 0)
					{
						return "TX9XD-98N7V-6WMQ6-BX7FG-H8Q99";
					}
					break;
				case 1694854857u:
					if (Operators.CompareString(text, "CoreConnectedN", false) == 0)
					{
						return "JQNT7-W63G4-WX4QX-RD9M9-6CPKM";
					}
					break;
				case 1658276631u:
					if (Operators.CompareString(text, "EnterpriseSN", false) == 0)
					{
						return "2F77B-TNFGY-69QQF-B8YKP-D69TJ";
					}
					break;
				case 2009492128u:
					if (Operators.CompareString(text, "HomeN", false) == 0)
					{
						return "3KHY7-WNT83-DGQKR-F7HPR-844BM";
					}
					break;
				case 1916366243u:
					if (Operators.CompareString(text, "ProfessionalS", false) == 0)
					{
						return "NFDD9-FX3VM-DYCKP-B8HT8-D9M2C";
					}
					break;
				case 1832478148u:
					if (Operators.CompareString(text, "ProfessionalN", false) == 0)
					{
						return "MH37W-N47XK-V7XM9-C7227-GCQG9";
					}
					break;
				case 2235990957u:
					if (Operators.CompareString(text, "ProfessionalStudentN", false) == 0)
					{
						return "8G9XJ-GN6PJ-GW787-MVV7G-GMR99";
					}
					break;
				case 2065149425u:
					if (Operators.CompareString(text, "ProfessionalStudent", false) == 0)
					{
						return "YNXW3-HV3VB-Y83VG-KPBXM-6VH3Q";
					}
					break;
				case 2370867875u:
					if (Operators.CompareString(text, "EnterpriseS", false) == 0)
					{
						return "WNMTR-4C88C-JK8YV-HQ7T2-76DF9";
					}
					break;
				case 2286979780u:
					if (Operators.CompareString(text, "EnterpriseN", false) == 0)
					{
						return "DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4";
					}
					break;
				case 3025581156u:
					if (Operators.CompareString(text, "HomeSingleLanguage", false) == 0)
					{
						return "7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH";
					}
					break;
				case 2935940669u:
					if (Operators.CompareString(text, "CoreConnectedCountrySpecific", false) == 0)
					{
						return "FTNXM-J4RGP-MYQCV-RVM8R-TVH24";
					}
					break;
				case 3177712663u:
					if (Operators.CompareString(text, "ProfessionalSN", false) == 0)
					{
						return "8Q36Y-N2F39-HRMHT-4XW33-TCQR4";
					}
					break;
				case 3140712445u:
					if (Operators.CompareString(text, "CoreConnected", false) == 0)
					{
						return "DJMYQ-WN6HG-YJ2YX-82JDB-CWFCW";
					}
					break;
				case 3885129284u:
					if (Operators.CompareString(text, "HomeCountrySpecific", false) == 0)
					{
						return "PVMJN-6DFY6-9CCP6-7BKTT-D3WVR";
					}
					break;
				case 3364771207u:
					if (Operators.CompareString(text, "CoreConnectedSingleLanguage", false) == 0)
					{
						return "QQMNF-GPVQ6-BFXGG-GWRCX-7XKT7";
					}
					break;
				case 4272272020u:
					if (Operators.CompareString(text, "CoreCountrySpecific", false) == 0)
					{
						return "PVMJN-6DFY6-9CCP6-7BKTT-D3WVR";
					}
					break;
				case 4164464098u:
					if (Operators.CompareString(text, "Professional", false) == 0)
					{
						return "W269N-WFGWX-YVC9B-4J6C9-T83GX";
					}
					break;
				}
			}
			else
			{
				switch (string_0)
				{
				case "Education":
					return "YVKRN-H6QFQ-JQGG3-T7BF3-2WGQ7";
				case "Core":
					return "JTJ43-TNBFV-YDGKB-92WGV-GCQXV";
				case "Home":
					return "JTJ43-TNBFV-YDGKB-92WGV-GCQXV";
				case "Enterprise":
					return "MFY6B-WNCVR-9KWQ4-9CGGM-QJ3YW";
				case "Professional":
					return "43BNY-B3MHX-37RT3-HT88J-33XGM";
				}
			}
			return string.Empty;
		}

		private static string smethod_2(ref string string_0, ref Variables variables_0)
		{
			if (!variables_0.IsPreview)
			{
				string text = string_0;
				switch (Class83.smethod_0(text))
				{
				case 284165279u:
					if (Operators.CompareString(text, "ProfessionalWMC", false) == 0)
					{
						return "789NJ-TQK6T-6XTH8-J39CJ-J8D3P";
					}
					break;
				case 279320640u:
					if (Operators.CompareString(text, "CoreARM", false) == 0)
					{
						return "XYTND-K6QKT-K2MRH-66RTM-43JKP";
					}
					break;
				case 290327408u:
					if (Operators.CompareString(text, "CoreN", false) == 0)
					{
						return "7B9N3-D94CG-YTVHR-QBPX3-RJP64";
					}
					break;
				case 286266594u:
					if (Operators.CompareString(text, "Enterprise", false) == 0)
					{
						return "MHF9N-XY6XB-WVXMC-BTDCT-MKKG7";
					}
					break;
				case 952422728u:
					if (Operators.CompareString(text, "EmbeddedIndustryE", false) == 0)
					{
						return "FNFKF-PWTVT-9RC8H-32HB2-JB34X";
					}
					break;
				case 379705053u:
					if (Operators.CompareString(text, "EmbeddedIndustry", false) == 0)
					{
						return "NMMPB-38DD4-R2823-62W8D-VXKJB";
					}
					break;
				case 1569369246u:
					if (Operators.CompareString(text, "Core", false) == 0)
					{
						return "M9Q9P-WNJJT-6PXPY-DWX8H-6XWKK";
					}
					break;
				case 1040237652u:
					if (Operators.CompareString(text, "CoreSingleLanguage", false) == 0)
					{
						return "BB6NG-PQ82V-VRDPW-8XVD2-V8P66";
					}
					break;
				case 1019533204u:
					if (Operators.CompareString(text, "EmbeddedIndustryA", false) == 0)
					{
						return "VHXM3-NR6FT-RY6RT-CK882-KW2CJ";
					}
					break;
				case 1832478148u:
					if (Operators.CompareString(text, "ProfessionalN", false) == 0)
					{
						return "HMCNV-VVBFX-7HMBH-CTY9B-B4FXY";
					}
					break;
				case 1694854857u:
					if (Operators.CompareString(text, "CoreConnectedN", false) == 0)
					{
						return "Q6HTR-N24GM-PMJFP-69CD8-2GXKR";
					}
					break;
				case 2286979780u:
					if (Operators.CompareString(text, "EnterpriseN", false) == 0)
					{
						return "TT4HM-HN7YT-62K67-RGRQJ-JFFXW";
					}
					break;
				case 2235990957u:
					if (Operators.CompareString(text, "ProfessionalStudentN", false) == 0)
					{
						return "TNFGH-2R6PB-8XM3K-QYHX2-J4296";
					}
					break;
				case 2065149425u:
					if (Operators.CompareString(text, "ProfessionalStudent", false) == 0)
					{
						return "NQHYK-WGWJH-DQJT7-XB68G-BPYG9";
					}
					break;
				case 3140712445u:
					if (Operators.CompareString(text, "CoreConnected", false) == 0)
					{
						return "3PY8R-QHNP9-W7XQD-G6DPH-3J2C9";
					}
					break;
				case 2935940669u:
					if (Operators.CompareString(text, "CoreConnectedCountrySpecific", false) == 0)
					{
						return "R962J-37N87-9VVK2-WJ74P-XTMHR";
					}
					break;
				case 4272272020u:
					if (Operators.CompareString(text, "CoreCountrySpecific", false) == 0)
					{
						return "NCTT7-2RGK8-WMHRF-RY7YQ-JTXG3";
					}
					break;
				case 4164464098u:
					if (Operators.CompareString(text, "Professional", false) == 0)
					{
						return "GCRJD-8NW9H-F2CDX-CCM8D-9D6T9";
					}
					break;
				case 3364771207u:
					if (Operators.CompareString(text, "CoreConnectedSingleLanguage", false) == 0)
					{
						return "KF37N-VDV38-GRRTV-XH8X6-6F3BB";
					}
					break;
				}
			}
			else
			{
				switch (string_0)
				{
				case "Enterprise":
					return "2MP7K-98NK8-WPVF3-Q2WDG-VMD98";
				case "ProfessionalWMC":
					return "MY4N9-TGH34-4X4VY-8FG2T-RRDPV";
				case "Professional":
					return "MTWNQ-CKDHJ-3HXW9-Q2PFX-WB2HQ";
				}
			}
			return string.Empty;
		}

		private static string smethod_3(ref string string_0)
		{
			string text = string_0;
			switch (Class83.smethod_0(text))
			{
			case 284165279u:
				if (Operators.CompareString(text, "ProfessionalWMC", false) == 0)
				{
					return "GNBB8-YVD74-QJHX6-27H4K-8QHDG";
				}
				goto default;
			case 279320640u:
				if (Operators.CompareString(text, "CoreARM", false) == 0)
				{
					return "DXHJF-N9KQX-MFPVR-GHGQK-Y7RKV";
				}
				goto default;
			case 1040237652u:
				if (Operators.CompareString(text, "CoreSingleLanguage", false) == 0)
				{
					return "2WN2H-YGCQR-KFX6K-CD6TF-84YXQ";
				}
				goto default;
			case 290327408u:
				if (Operators.CompareString(text, "CoreN", false) == 0)
				{
					return "8N2M2-HWPGY-7PGT9-HGDD8-GVGGY";
				}
				goto default;
			case 286266594u:
				if (Operators.CompareString(text, "Enterprise", false) == 0)
				{
					return "32JNW-9KQ84-P47T8-D8GGY-CWCK7";
				}
				goto default;
			case 2286979780u:
				if (Operators.CompareString(text, "EnterpriseN", false) == 0)
				{
					return "JMNMF-RHW7P-DMY6X-RF3DR-X2BQT";
				}
				goto default;
			case 1832478148u:
				if (Operators.CompareString(text, "ProfessionalN", false) == 0)
				{
					return "XCVCF-2NXM9-723PB-MHCB7-2RYQQ";
				}
				goto default;
			case 1569369246u:
				if (Operators.CompareString(text, "Core", false) == 0)
				{
					return "BN3D2-R7TKB-3YPBD-8DRP2-27GG4";
				}
				goto default;
			case 4272272020u:
				if (Operators.CompareString(text, "CoreCountrySpecific", false) == 0)
				{
					return "4K36P-JN4VD-GDC6V-KDT89-DYFKP";
				}
				goto default;
			case 4164464098u:
				if (Operators.CompareString(text, "Professional", false) == 0)
				{
					return "NG4HW-VH26C-733KW-K6F98-J8CK4";
				}
				goto default;
			case 3011034031u:
				if (Operators.CompareString(text, "Prerelease", false) == 0)
				{
					return "DNJXJ-7XBW8-2378T-X22TX-BKG7J";
				}
				goto default;
			default:
				return string.Empty;
			}
		}

		private static string smethod_4(ref string string_0, ref Variables variables_0)
		{
			if (!variables_0.IsPreview)
			{
				string text = string_0;
				switch (Class83.smethod_0(text))
				{
				case 527056604u:
					if (Operators.CompareString(text, "ServerCloudStorage", false) == 0)
					{
						return "3NPTF-33KPT-GGBPR-YX76B-39KDD";
					}
					break;
				case 233591429u:
					if (Operators.CompareString(text, "ServerHI", false) == 0)
					{
						return "7VX4N-3VDHQ-VYGHB-JXJVP-9QB26";
					}
					break;
				case 3455999176u:
					if (Operators.CompareString(text, "ServerStandardCore", false) == 0)
					{
						return "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";
					}
					break;
				case 3401765283u:
					if (Operators.CompareString(text, "ServerStandard", false) == 0)
					{
						return "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";
					}
					break;
				case 3649601129u:
					if (Operators.CompareString(text, "ServerSolution", false) == 0)
					{
						return "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";
					}
					break;
				case 3491518331u:
					if (Operators.CompareString(text, "ServerCloudStorageCore", false) == 0)
					{
						return "3NPTF-33KPT-GGBPR-YX76B-39KDD";
					}
					break;
				case 4082463954u:
					if (Operators.CompareString(text, "ServerSolutionCore", false) == 0)
					{
						return "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";
					}
					break;
				case 3993874526u:
					if (Operators.CompareString(text, "ServerHICore", false) == 0)
					{
						return "7VX4N-3VDHQ-VYGHB-JXJVP-9QB26";
					}
					break;
				case 3824071431u:
					if (Operators.CompareString(text, "ServerDatacenter", false) == 0)
					{
						return "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";
					}
					break;
				}
			}
			else
			{
				string text2 = string_0;
				if (Operators.CompareString(text2, "ServerDatacenter", false) == 0)
				{
					if (variables_0.CurrentBuild.StartsWith("98"))
					{
						return "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";
					}
					return "VRDD2-NVGDP-K7QG8-69BR4-TVFHB";
				}
			}
			return string.Empty;
		}

		private static string smethod_5(ref string string_0)
		{
			string text = string_0;
			switch (Class83.smethod_0(text))
			{
			case 1326787857u:
				if (Operators.CompareString(text, "ServerCoreN", false) == 0)
				{
					return "";
				}
				goto default;
			case 527056604u:
				if (Operators.CompareString(text, "ServerCloudStorage", false) == 0)
				{
					return "3NPTF-33KPT-GGBPR-YX76B-39KDD";
				}
				goto default;
			case 268379036u:
				if (Operators.CompareString(text, "ServerMultiPointPremium", false) == 0)
				{
					return "";
				}
				goto default;
			case 2677852732u:
				if (Operators.CompareString(text, "ServerDatacenterCore", false) == 0)
				{
					return "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";
				}
				goto default;
			case 2280928442u:
				if (Operators.CompareString(text, "ServerMultiPointStandard", false) == 0)
				{
					return "";
				}
				goto default;
			case 2099694853u:
				if (Operators.CompareString(text, "ServerCore", false) == 0)
				{
					return "";
				}
				goto default;
			case 3491518331u:
				if (Operators.CompareString(text, "ServerCloudStorageCore", false) == 0)
				{
					return "3NPTF-33KPT-GGBPR-YX76B-39KDD";
				}
				goto default;
			case 3455999176u:
				if (Operators.CompareString(text, "ServerStandardCore", false) == 0)
				{
					return "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";
				}
				goto default;
			case 3401765283u:
				if (Operators.CompareString(text, "ServerStandard", false) == 0)
				{
					return "D2N9P-3P6X9-2R39C-7RTCD-MDVJX";
				}
				goto default;
			case 4082463954u:
				if (Operators.CompareString(text, "ServerSolutionCore", false) == 0)
				{
					return "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";
				}
				goto default;
			case 3824071431u:
				if (Operators.CompareString(text, "ServerDatacenter", false) == 0)
				{
					return "W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9";
				}
				goto default;
			case 3649601129u:
				if (Operators.CompareString(text, "ServerSolution", false) == 0)
				{
					return "KNC87-3J2TX-XB4WP-VCPJV-M4FWM";
				}
				goto default;
			default:
				return string.Empty;
			}
		}

		private static string smethod_6(ref string string_0)
		{
			string text = string_0;
			switch (Class83.smethod_0(text))
			{
			case 1326787857u:
				if (Operators.CompareString(text, "ServerCoreN", false) == 0)
				{
					return "8N2M2-HWPGY-7PGT9-HGDD8-GVGGY";
				}
				goto default;
			case 268379036u:
				if (Operators.CompareString(text, "ServerMultiPointPremium", false) == 0)
				{
					return "XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G";
				}
				goto default;
			case 2280928442u:
				if (Operators.CompareString(text, "ServerMultiPointStandard", false) == 0)
				{
					return "HM7DN-YVMH3-46JC3-XYTG7-CYQJJ";
				}
				goto default;
			case 2099694853u:
				if (Operators.CompareString(text, "ServerCore", false) == 0)
				{
					return "BN3D2-R7TKB-3YPBD-8DRP2-27GG4";
				}
				goto default;
			case 3401765283u:
				if (Operators.CompareString(text, "ServerStandard", false) == 0)
				{
					return "XC9B7-NBPP2-83J2H-RHMBY-92BT4";
				}
				goto default;
			case 2677852732u:
				if (Operators.CompareString(text, "ServerDatacenterCore", false) == 0)
				{
					return "48HP8-DN98B-MYWDG-T2DCC-8W83P";
				}
				goto default;
			case 3824071431u:
				if (Operators.CompareString(text, "ServerDatacenter", false) == 0)
				{
					return "48HP8-DN98B-MYWDG-T2DCC-8W83P";
				}
				goto default;
			case 3455999176u:
				if (Operators.CompareString(text, "ServerStandardCore", false) == 0)
				{
					return "XC9B7-NBPP2-83J2H-RHMBY-92BT4";
				}
				goto default;
			default:
				return string.Empty;
			}
		}

		private static string smethod_7(ref string string_0)
		{
			string text = string_0;
			switch (Class83.smethod_0(text))
			{
			case 1748590053u:
				if (Operators.CompareString(text, "ProfessionalE", false) == 0)
				{
					return "W82YF-2Q76Y-63HXB-FGJG9-GF7QX";
				}
				goto default;
			case 588384575u:
				if (Operators.CompareString(text, "Embedded", false) == 0)
				{
					return "73KQT-CD9G6-K7TQG-66MRP-CQ22C";
				}
				goto default;
			case 286266594u:
				if (Operators.CompareString(text, "Enterprise", false) == 0)
				{
					return "33PXH-7Y6KF-2VJC9-XBBR8-HVTHH";
				}
				goto default;
			case 2203091685u:
				if (Operators.CompareString(text, "EnterpriseE", false) == 0)
				{
					return "C29WB-22CC8-VJ326-GHFJW-H9DH4";
				}
				goto default;
			case 1832478148u:
				if (Operators.CompareString(text, "ProfessionalN", false) == 0)
				{
					return "MRPKT-YTG23-K7D7T-X2JMM-QY7MG";
				}
				goto default;
			case 4164464098u:
				if (Operators.CompareString(text, "Professional", false) == 0)
				{
					return "FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4";
				}
				goto default;
			case 2286979780u:
				if (Operators.CompareString(text, "EnterpriseN", false) == 0)
				{
					return "YDRBP-3D83W-TY26F-D46B2-XCKRJ";
				}
				goto default;
			default:
				return string.Empty;
			}
		}

		private static string smethod_8(ref string string_0)
		{
			return string_0 switch
			{
				"ServerWeb" => "6TPJF-RBVHG-WBW2R-86QPH-6RTM4", 
				"ServerHPC" => "TT8MH-CG224-D3D7Q-498W2-9QCTX", 
				"ServerEnterprise" => "489J6-VHDMP-X63PK-3K798-CPX3Y", 
				"ServerDatacenter" => "74YFP-3QFB3-KQT8W-PMXWJ-7M648", 
				"ServerStandard" => "YC6KT-GKW9T-YTKYR-T4X34-R7VHC", 
				_ => string.Empty, 
			};
		}

		private static string smethod_9(ref string string_0)
		{
			return string_0 switch
			{
				"ServerHPC" => "RCTX3-KWVHP-BR6TB-RB6DM-6X7HP", 
				"ServerEnterprise" => "YQGMW-MPWTJ-34KDK-48M3W-X4Q6V", 
				"ServerDatacenter" => "7M67G-PC374-GR742-YH8V4-TCBY3", 
				"ServerStandard" => "TM24T-X9RMF-VWXK6-X8JC9-BFGM2", 
				_ => string.Empty, 
			};
		}

		private static string smethod_10(ref string string_0)
		{
			string text = string_0;
			switch (Class83.smethod_0(text))
			{
			case 198782180u:
				if (Operators.CompareString(text, "ENTERPRISEN", false) == 0)
				{
					return "YDRBP-3D83W-TY26F-D46B2-XCKRJ";
				}
				goto default;
			case 131837803u:
				if (Operators.CompareString(text, "Business", false) == 0)
				{
					return "YFKBB-PQJJV-G996G-VWGXY-2V3X8";
				}
				goto default;
			case 1801109058u:
				if (Operators.CompareString(text, "ENTERPRISE", false) == 0)
				{
					return "VKK3X-68KWM-X2YGT-QR4M6-4BWMV";
				}
				goto default;
			case 286266594u:
				if (Operators.CompareString(text, "Enterprise", false) == 0)
				{
					return "VKK3X-68KWM-X2YGT-QR4M6-4BWMV";
				}
				goto default;
			case 2211755839u:
				if (Operators.CompareString(text, "BusinessN", false) == 0)
				{
					return "HMBQG-8H2RH-C77VX-27R82-VMQBT";
				}
				goto default;
			case 1997556511u:
				if (Operators.CompareString(text, "BUSINESSN", false) == 0)
				{
					return "HMBQG-8H2RH-C77VX-27R82-VMQBT";
				}
				goto default;
			case 2629154699u:
				if (Operators.CompareString(text, "BUSINESS", false) == 0)
				{
					return "YFKBB-PQJJV-G996G-VWGXY-2V3X8";
				}
				goto default;
			case 2286979780u:
				if (Operators.CompareString(text, "EnterpriseN", false) == 0)
				{
					return "YDRBP-3D83W-TY26F-D46B2-XCKRJ";
				}
				goto default;
			default:
				return string.Empty;
			}
		}

		internal static bool smethod_11(ref SoftwareLicensingProduct softwareLicensingProduct_0, bool bool_0, ref Variables variables_0)
		{
			string empty = string.Empty;
			uint num = 1u;
			string string_ = null;
			empty = ((!bool_0 || variables_0.IsWindowsPermanentActivate) ? smethod_16(softwareLicensingProduct_0.Name) : smethod_0(ref variables_0));
			if (!string.IsNullOrEmpty(empty) && softwareLicensingProduct_0 != null)
			{
				string partialProductKey = softwareLicensingProduct_0.PartialProductKey;
				if (empty.Contains(partialProductKey))
				{
					return true;
				}
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				num = Class17.smethod_34(ref softwareLicensingService_, ref empty, ref variables_0, ref string_);
				if ((long)num == 0L && string_ == null)
				{
					if (!Class17.smethod_27(softwareLicensingProduct_0.Description) && (!bool_0 || !variables_0.IsPreview))
					{
						FileLogger logger = variables_0.Logger;
						string message = "Converting: " + softwareLicensingProduct_0.Name;
						logger.LogMessage(ref message);
						FileLogger logger2 = variables_0.Logger;
						message = "UnInstalling Key";
						logger2.LogMessage(ref message);
						Class17.smethod_39(ref softwareLicensingProduct_0, ref variables_0);
						return true;
					}
				}
				else if (((long)num == 1L && string_.Contains("C004E016")) || string_.Contains("C004F069"))
				{
					if (bool_0)
					{
						RT2VL.smethod_1(ref variables_0);
					}
					else if (softwareLicensingProduct_0.Name.Contains("Office 15"))
					{
						string message = string.Empty;
						RT2VL.smethod_4(ref message, ref variables_0);
					}
					else if (softwareLicensingProduct_0.Name.Contains("Office 16"))
					{
						string message = string.Empty;
						string string_2 = softwareLicensingProduct_0.Name;
						RT2VL.smethod_3(ref message, ref variables_0, ref string_2);
					}
				}
			}
			return false;
		}

		internal static bool smethod_12(ref string string_0, ref Variables variables_0)
		{
			string empty = string.Empty;
			uint num = 1u;
			string string_ = null;
			bool num2 = string_0.Contains("Windows");
			bool flag = string_0.Contains("Office 16");
			bool flag2 = string_0.Contains("Office 15");
			bool flag3 = string_0.Contains("Office 14");
			empty = ((!num2) ? smethod_16(string_0) : smethod_0(ref variables_0));
			if (num2)
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				num = Class17.smethod_34(ref softwareLicensingService_, ref empty, ref variables_0, ref string_);
			}
			else if (!flag2 && !flag)
			{
				if (flag3)
				{
					OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
					num = Class17.smethod_35(ref officeSoftwareProtectionService_, ref empty, ref variables_0, ref string_);
				}
			}
			else if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
				{
					OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
					num = Class17.smethod_35(ref officeSoftwareProtectionService_, ref empty, ref variables_0, ref string_);
				}
			}
			else
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				num = Class17.smethod_34(ref softwareLicensingService_, ref empty, ref variables_0, ref string_);
			}
			if ((long)num == 0L && string_ == null)
			{
				return true;
			}
			return false;
		}

		internal static bool smethod_13(ref string string_0, ref bool bool_0, ref bool bool_1, ref bool bool_2, ref bool bool_3, ref Variables variables_0)
		{
			uint num = 1u;
			string string_ = null;
			if (bool_0)
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				num = Class17.smethod_34(ref softwareLicensingService_, ref string_0, ref variables_0, ref string_);
			}
			else if (!bool_2 && !bool_1)
			{
				if (bool_3)
				{
					OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
					num = Class17.smethod_35(ref officeSoftwareProtectionService_, ref string_0, ref variables_0, ref string_);
				}
			}
			else if (!variables_0.IsWindows10 && !variables_0.IsWindows81 && !variables_0.IsWindows8)
			{
				if (variables_0.IsWindows7 || variables_0.IsWindowsVista)
				{
					OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
					num = Class17.smethod_35(ref officeSoftwareProtectionService_, ref string_0, ref variables_0, ref string_);
				}
			}
			else
			{
				SoftwareLicensingService softwareLicensingService_ = Class17.smethod_49(ref variables_0);
				num = Class17.smethod_34(ref softwareLicensingService_, ref string_0, ref variables_0, ref string_);
			}
			if ((long)num == 0L && string_ == null)
			{
				return true;
			}
			return false;
		}

		internal static bool smethod_14(ref OfficeSoftwareProtectionProduct officeSoftwareProtectionProduct_0, ref Variables variables_0)
		{
			string string_ = smethod_16(officeSoftwareProtectionProduct_0.Name);
			uint num = 1u;
			string string_2 = null;
			if (officeSoftwareProtectionProduct_0 != null)
			{
				if (string_.Contains(officeSoftwareProtectionProduct_0.PartialProductKey))
				{
					return true;
				}
				OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
				num = Class17.smethod_35(ref officeSoftwareProtectionService_, ref string_, ref variables_0, ref string_2);
				if ((long)num == 0L && string_2 == null)
				{
					if (!Class17.smethod_27(officeSoftwareProtectionProduct_0.Description))
					{
						FileLogger logger = variables_0.Logger;
						string message = "Converting: " + officeSoftwareProtectionProduct_0.Name;
						logger.LogMessage(ref message);
						Class17.smethod_40(ref officeSoftwareProtectionProduct_0, ref variables_0);
						return true;
					}
				}
				else if ((long)num == 1L && string_2.Contains("C004E016"))
				{
					if (officeSoftwareProtectionProduct_0.Name.Contains("Office 15"))
					{
						string message = string.Empty;
						RT2VL.smethod_4(ref message, ref variables_0);
					}
					else if (officeSoftwareProtectionProduct_0.Name.Contains("Office 14"))
					{
						string message = string.Empty;
						RT2VL.InstallCertVLOffice2010(ref message, ref variables_0);
					}
				}
			}
			return false;
		}

		internal static bool smethod_15(string string_0, ref Variables variables_0)
		{
			string string_ = smethod_16(string_0);
			string string_2 = null;
			OfficeSoftwareProtectionService officeSoftwareProtectionService_ = Class17.smethod_50(ref variables_0);
			if ((long)Class17.smethod_35(ref officeSoftwareProtectionService_, ref string_, ref variables_0, ref string_2) == 0L && string_2 == null)
			{
				return true;
			}
			return false;
		}

		private static string smethod_16(string string_0)
		{
			if (string_0.Contains("Office 16"))
			{
				if (string_0.Contains("ProPlus"))
				{
					return "XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99";
				}
				if (string_0.Contains("Std"))
				{
					return "JNRGM-WHDWX-FJJG3-K47QV-DRTFM";
				}
				if (string_0.Contains("Professional"))
				{
					return "XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99";
				}
				if (string_0.Contains("ProjectPro"))
				{
					return "YG9NW-3K39V-2T3HJ-93F3Q-G83KT";
				}
				if (string_0.Contains("ProjectStd"))
				{
					return "GNFHQ-F6YQM-KQDGJ-327XX-KQBVC";
				}
				if (string_0.Contains("VisioPro"))
				{
					return "PD3PC-RHNGV-FXJ29-8JK7D-RJRJK";
				}
				if (string_0.Contains("VisioStd"))
				{
					return "7WHWN-4T7MP-G96JF-G33KR-W8GF4";
				}
				if (string_0.Contains("Access"))
				{
					return "GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW";
				}
				if (string_0.Contains("Excel"))
				{
					return "9C2PK-NWTVB-JMPW8-BFT28-7FTBF";
				}
				if (string_0.Contains("InfoPath"))
				{
					return "DKT8B-N7VXH-D963P-Q4PHY-F8894";
				}
				if (string_0.Contains("Lync"))
				{
					return "2MG3G-3BNTT-3MFW9-KDQW3-TCK7R";
				}
				if (string_0.Contains("Mondo"))
				{
					return "42QTK-RN8M7-J3C4G-BBGYM-88CYV";
				}
				if (string_0.Contains("OneNote"))
				{
					return "DR92N-9HTF2-97XKM-XW2WJ-XW3J6";
				}
				if (string_0.Contains("Outlook"))
				{
					return "R69KK-NTPKF-7M3Q4-QYBHW-6MT9B";
				}
				if (string_0.Contains("PowerPoint"))
				{
					return "J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6";
				}
				if (string_0.Contains("Publisher"))
				{
					return "F47MM-N3XJP-TQXJ9-BP99D-8K837";
				}
				if (string_0.Contains("Word"))
				{
					return "WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6";
				}
				if (string_0.Contains("Skype"))
				{
					return "869NQ-FJ69K-466HW-QYCP2-DDBV6";
				}
			}
			else if (string_0.Contains("Office 15"))
			{
				if (string_0.Contains("ProPlus"))
				{
					return "YC7DK-G2NP3-2QQC3-J6H88-GVGXT";
				}
				if (string_0.Contains("Std"))
				{
					return "KBKQT-2NMXY-JJWGP-M62JB-92CD4";
				}
				if (string_0.Contains("Professional"))
				{
					return "XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99";
				}
				if (string_0.Contains("ProjectPro"))
				{
					return "FN8TT-7WMH6-2D4X9-M337T-2342K";
				}
				if (string_0.Contains("ProjectStd"))
				{
					return "6NTH3-CW976-3G3Y2-JK3TX-8QHTT";
				}
				if (string_0.Contains("VisioPro"))
				{
					return "C2FG9-N6J68-H8BTJ-BW3QX-RM3B3";
				}
				if (string_0.Contains("VisioStd"))
				{
					return "J484Y-4NKBF-W2HMG-DBMJC-PGWR7";
				}
				if (string_0.Contains("Access"))
				{
					return "NG2JY-H4JBT-HQXYP-78QH9-4JM2D";
				}
				if (string_0.Contains("Excel"))
				{
					return "VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB";
				}
				if (string_0.Contains("InfoPath"))
				{
					return "DKT8B-N7VXH-D963P-Q4PHY-F8894";
				}
				if (string_0.Contains("Lync"))
				{
					return "2MG3G-3BNTT-3MFW9-KDQW3-TCK7R";
				}
				if (string_0.Contains("Mondo"))
				{
					return "42QTK-RN8M7-J3C4G-BBGYM-88CYV";
				}
				if (string_0.Contains("OneNote"))
				{
					return "TGN6P-8MMBC-37P2F-XHXXK-P34VW";
				}
				if (string_0.Contains("Outlook"))
				{
					return "QPN8Q-BJBTJ-334K3-93TGY-2PMBT";
				}
				if (string_0.Contains("PowerPoint"))
				{
					return "4NT99-8RJFH-Q2VDH-KYG2C-4RD4F";
				}
				if (string_0.Contains("Publisher"))
				{
					return "PN2WF-29XG2-T9HJ7-JQPJR-FCXK4";
				}
				if (string_0.Contains("Word"))
				{
					return "6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7";
				}
			}
			else if (string_0.Contains("Office 14"))
			{
				if (string_0.Contains("OfficeProPlus"))
				{
					return "VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB";
				}
				if (string_0.Contains("OfficeStd"))
				{
					return "V7QKV-4XVVR-XYV4D-F7DFM-8R6BM";
				}
				if (string_0.Contains("OfficeProjectPro"))
				{
					return "YGX6F-PGV49-PGW3J-9BTGG-VHKC6";
				}
				if (string_0.Contains("OfficeProjectStd"))
				{
					return "4HP3K-88W3F-W2K3D-6677X-F9PGB";
				}
				if (string_0.Contains("OfficeVisioPro"))
				{
					return "7MCW8-VRQVK-G677T-PDJCM-Q8TCP";
				}
				if (string_0.Contains("OfficeVisioStd"))
				{
					return "767HD-QGMWX-8QTDB-9G3R2-KHFGJ";
				}
				if (string_0.Contains("OfficeVisioPrem"))
				{
					return "D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ";
				}
				if (string_0.Contains("OfficeAccess"))
				{
					return "V7Y44-9T38C-R2VJK-666HK-T7DDX";
				}
				if (string_0.Contains("OfficeExcel"))
				{
					return "H62QG-HXVKF-PP4HP-66KMR-CW9BM";
				}
				if (string_0.Contains("OfficeInfoPath"))
				{
					return "K96W8-67RPQ-62T9Y-J8FQJ-BT37T";
				}
				if (string_0.Contains("OfficeSharePoint"))
				{
					return "QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4";
				}
				if (string_0.Contains("OfficeOneNote"))
				{
					return "Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX";
				}
				if (string_0.Contains("OfficeOutlook"))
				{
					return "7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ";
				}
				if (string_0.Contains("OfficePowerPoint"))
				{
					return "RC8FX-88JRY-3PF7C-X8P67-P4VTT";
				}
				if (string_0.Contains("OfficePublisher"))
				{
					return "BFK7F-9MYHM-V68C7-DRQ66-83YTP";
				}
				if (string_0.Contains("OfficeWord"))
				{
					return "HVHB3-C6FV7-KQX9W-YQG79-CRY7T";
				}
			}
			return string.Empty;
		}

		internal static string smethod_17(IList<byte> ilist_0)
		{
			char[] array = new char[24]
			{
				'B',
				'C',
				'D',
				'F',
				'G',
				'H',
				'J',
				'K',
				'M',
				'P',
				'Q',
				'R',
				'T',
				'V',
				'W',
				'X',
				'Y',
				'2',
				'3',
				'4',
				'6',
				'7',
				'8',
				'9'
			};
			int num = (byte)((uint)ilist_0[66] >> 3) & 1;
			checked
			{
				ilist_0[66] = (byte)((ilist_0[66] & 0xF7) | 0);
				char[] array2 = new char[29];
				List<byte> list = new List<byte>();
				int num2 = 67;
				for (int i = 52; i <= num2; i++)
				{
					list.Add(ilist_0[i]);
				}
				int num3 = 28;
				do
				{
					if (unchecked(checked(num3 + 1) % 6) != 0)
					{
						int num4 = 0;
						int num5 = 14;
						do
						{
							int num6 = (num4 << 8) | list[num5];
							list[num5] = (byte)unchecked(num6 / 24);
							num4 = unchecked(num6 % 24);
							array2[num3] = array[num4];
							num5 += -1;
						}
						while (num5 >= 0);
					}
					else
					{
						array2[num3] = '-';
					}
					num3 += -1;
				}
				while (num3 >= 0);
				if (num != 0)
				{
					int num7 = 0;
					int num8 = 0;
					do
					{
						if (array2[0] != array[num8])
						{
							num8++;
							continue;
						}
						num7 = num8;
						break;
					}
					while (num8 <= 23);
					string text = new string(array2);
					text = text.Replace("-", string.Empty).Remove(0, 1);
					text = text.Substring(0, num7) + "N" + text.Remove(0, num7);
					return text.Substring(0, 5) + "-" + text.Substring(5, 5) + "-" + text.Substring(10, 5) + "-" + text.Substring(15, 5) + "-" + text.Substring(20, 5);
				}
				return new string(array2);
			}
		}
	}
	public class PIDCheck : IPIDCheck
	{
		private string string_0;

		private readonly Variables variables_0;

		private readonly ILogger ilogger_0;

		public readonly byte[] BPrivateKey;

		public PIDCheck(ref Variables variables)
		{
			string_0 = null;
			variables_0 = null;
			ilogger_0 = null;
			BPrivateKey = new byte[32]
			{
				254,
				49,
				152,
				117,
				251,
				72,
				132,
				134,
				156,
				243,
				241,
				206,
				153,
				168,
				144,
				100,
				171,
				87,
				31,
				202,
				71,
				4,
				80,
				88,
				48,
				36,
				226,
				20,
				98,
				135,
				121,
				160
			};
			variables_0 = variables;
			ilogger_0 = variables.Logger;
		}

		public void ConfigPath(string filePath)
		{
			string_0 = filePath;
		}

		[DllImport("pidgenx.dll", CharSet = CharSet.Auto)]
		private static extern int PidGenX(string string_1, string string_2, string string_3, int int_0, IntPtr intptr_0, IntPtr intptr_1, IntPtr intptr_2);

		public string CheckProductKey(string productKey)
		{
			return CheckProductKeyEx(productKey, exportDB: false);
		}

		public string CheckProductKeyEx(string productKey, bool exportDB)
		{
			string str = "";
			byte[] array = new byte[50];
			byte[] array2 = new byte[164];
			byte[] array3 = new byte[1272];
			IntPtr intPtr = Marshal.AllocHGlobal(50);
			IntPtr intPtr2 = Marshal.AllocHGlobal(164);
			IntPtr intPtr3 = Marshal.AllocHGlobal(1272);
			string text = string_0;
			string string_ = "XXXXX";
			array[0] = 50;
			array2[0] = 164;
			array3[0] = 248;
			array3[1] = 4;
			Marshal.Copy(array, 0, intPtr, 50);
			Marshal.Copy(array2, 0, intPtr2, 164);
			Marshal.Copy(array3, 0, intPtr3, 1272);
			switch (PidGenX(productKey, text, string_, 0, intPtr, intPtr2, intPtr3))
			{
			case 0:
			{
				Marshal.Copy(intPtr, array, 0, array.Length);
				Marshal.Copy(intPtr3, array3, 0, array3.Length);
				string text2 = smethod_0(array, 0);
				string text3 = smethod_0(array3, 8);
				string text4 = smethod_0(array3, 136);
				string text5 = smethod_0(array3, 280);
				string text6 = smethod_0(array3, 888);
				string text7 = smethod_0(array3, 1016);
				smethod_0(array3, 1144);
				string text8 = text3.Substring(8, 3);
				string text9 = smethod_1(text, Convert.ToString("{") + text4 + "}", text5);
				if (!exportDB)
				{
					str = str + Convert.ToString("Product Key\t: ") + productKey + Environment.NewLine;
					str = str + "Validity\t: Valid" + Environment.NewLine;
					str = str + Convert.ToString("Product ID\t: ") + text2 + Environment.NewLine;
					str = str + Convert.ToString("Activation ID\t: ") + text4 + Environment.NewLine;
					str = str + Convert.ToString("Edition Type\t: ") + text5 + Environment.NewLine;
					str = str + Convert.ToString("Description\t: ") + text9 + Environment.NewLine;
					str = str + Convert.ToString("Edition ID\t: ") + text6 + Environment.NewLine;
					str = str + Convert.ToString("Key Type\t: ") + text7 + Environment.NewLine;
					str = str + Convert.ToString("Crypto ID\t: ") + text8 + Environment.NewLine;
				}
				else
				{
					str = Convert.ToString(Convert.ToString(Convert.ToString(Convert.ToString(Convert.ToString(Convert.ToString(Convert.ToString(productKey + Convert.ToString(";") + "Valid;") + text2 + ";") + text4 + ";") + text5 + ";") + text9 + ";") + text6 + ";") + text7 + ";") + text8 + Environment.NewLine;
				}
				break;
			}
			case -2147024809:
				str = "Invalid Arguments";
				break;
			case -1979645695:
				str = "Invalid Key";
				break;
			case -2147024894:
				str = "pkeyconfig.xrm.ms file is not found";
				break;
			default:
				str = "Invalid input!!!";
				break;
			}
			Marshal.FreeHGlobal(intPtr);
			Marshal.FreeHGlobal(intPtr2);
			Marshal.FreeHGlobal(intPtr3);
			return str;
		}

		private static string smethod_0(byte[] byte_0, int int_0)
		{
			checked
			{
				int i;
				for (i = int_0; byte_0[i] != 0 || byte_0[i + 1] != 0; i++)
				{
				}
				return Encoding.ASCII.GetString(byte_0, int_0, i - int_0).Replace("\0", "");
			}
		}

		private static string smethod_1(string string_1, string string_2, string string_3)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Expected O, but got Unknown
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0041: Expected O, but got Unknown
			XmlDocument val = new XmlDocument();
			val.Load(string_1);
			Stream stream = new MemoryStream(Convert.FromBase64String(val.GetElementsByTagName("tm:infoBin").get_ItemOf(0).get_InnerText()));
			val.Load(stream);
			XmlNamespaceManager val2 = new XmlNamespaceManager(val.get_NameTable());
			val2.AddNamespace("pkc", "http://www.microsoft.com/DRM/PKEY/Configuration/2.0");
			XmlNode val3 = ((XmlNode)val).SelectSingleNode(Convert.ToString("/pkc:ProductKeyConfiguration/pkc:Configurations/pkc:Configuration[pkc:ActConfigId='") + string_2 + "']", val2);
			if (val3 == null)
			{
				val3 = ((XmlNode)val).SelectSingleNode("/pkc:ProductKeyConfiguration/pkc:Configurations/pkc:Configuration[pkc:ActConfigId='" + string_2.ToUpper() + "']", val2);
			}
			if (val3.get_Item("pkc:EditionId").get_InnerText().Contains(string_3))
			{
				return val3.get_Item("pkc:ProductDescription").get_InnerText();
			}
			return "Not Found";
		}

		private string GetCount(string string_1)
		{
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_010f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0114: Unknown result type (might be due to invalid IL or missing references)
			//IL_0155: Unknown result type (might be due to invalid IL or missing references)
			//IL_015c: Expected O, but got Unknown
			//IL_016f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0174: Unknown result type (might be due to invalid IL or missing references)
			//IL_017f: Unknown result type (might be due to invalid IL or missing references)
			//IL_018a: Unknown result type (might be due to invalid IL or missing references)
			//IL_019f: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01eb: Expected O, but got Unknown
			//IL_0229: Unknown result type (might be due to invalid IL or missing references)
			//IL_0233: Expected O, but got Unknown
			FileLogger logger = variables_0.Logger;
			string message = "Checking count...";
			logger.LogMessage(ref message);
			XmlDocument val = new XmlDocument();
			XmlElement val2 = val.CreateElement("ActivationRequest", "http://www.microsoft.com/DRM/SL/BatchActivationRequest/1.0");
			((XmlNode)val).AppendChild((XmlNode)(object)val2);
			XmlElement val3 = val.CreateElement("VersionNumber", val2.get_NamespaceURI());
			val3.set_InnerText("2.0");
			((XmlNode)val2).AppendChild((XmlNode)(object)val3);
			XmlElement val4 = val.CreateElement("RequestType", val2.get_NamespaceURI());
			val4.set_InnerText("2");
			((XmlNode)val2).AppendChild((XmlNode)(object)val4);
			XmlElement val5 = val.CreateElement("Requests", val2.get_NamespaceURI());
			XmlElement val6 = val.CreateElement("Request", val5.get_NamespaceURI());
			XmlElement val7 = val.CreateElement("PID", val6.get_NamespaceURI());
			val7.set_InnerText(string_1.Replace("XXXXX", "55041"));
			((XmlNode)val6).AppendChild((XmlNode)(object)val7);
			((XmlNode)val5).AppendChild((XmlNode)(object)val6);
			((XmlNode)val2).AppendChild((XmlNode)(object)val5);
			byte[] bytes = Encoding.Unicode.GetBytes(val.get_InnerXml());
			string newValue = Convert.ToBase64String(bytes);
			HMACSHA256 val8 = new HMACSHA256();
			((HMAC)val8).set_Key(BPrivateKey);
			string newValue2 = Convert.ToBase64String(((HashAlgorithm)val8).ComputeHash(bytes));
			string text = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Body><BatchActivate xmlns=\"http://www.microsoft.com/BatchActivationService\"><request><Digest>REPLACEME1</Digest><RequestXml>REPLACEME2</RequestXml></request></BatchActivate></soap:Body></soap:Envelope>";
			text = text.Replace("REPLACEME1", newValue2);
			text = text.Replace("REPLACEME2", newValue);
			XmlDocument val9 = new XmlDocument();
			val9.LoadXml(text);
			HttpWebRequest val10 = (HttpWebRequest)WebRequest.Create("https://activation.sls.microsoft.com/BatchActivation/BatchActivation.asmx");
			val10.set_Method("POST");
			val10.set_ContentType("text/xml; charset=\"utf-8\"");
			val10.get_Headers().Add("SOAPAction", "http://www.microsoft.com/BatchActivationService/BatchActivate");
			Stream requestStream = val10.GetRequestStream();
			val9.Save(requestStream);
			IAsyncResult asyncResult = val10.BeginGetResponse((AsyncCallback)null, (object)null);
			asyncResult.AsyncWaitHandle.WaitOne();
			WebResponse val11 = val10.EndGetResponse(asyncResult);
			XmlReader obj = XmlReader.Create((TextReader)new StringReader(new StreamReader(val11.GetResponseStream()).ReadToEnd()));
			obj.ReadToFollowing("ResponseXml");
			XmlReader val12 = XmlReader.Create((TextReader)new StringReader(obj.ReadElementContentAsString().Replace("&gt;", ">").Replace("&lt;", "<")
				.Replace("utf-16", "utf-8")));
			val12.ReadToFollowing("ActivationRemaining");
			string text2 = val12.ReadElementContentAsString();
			if (Convert.ToInt32(text2) < 0)
			{
				val12.ReadToFollowing("ErrorCode");
				if (Operators.CompareString(val12.ReadElementContentAsString(), "0x67", false) == 0)
				{
					FileLogger logger2 = variables_0.Logger;
					message = "MAK Blocked";
					logger2.LogMessage(ref message);
					return "0 (Blocked)";
				}
			}
			FileLogger logger3 = variables_0.Logger;
			message = "MAK Count: " + text2;
			logger3.LogMessage(ref message);
			return text2;
		}

		string IPIDCheck.GetCount(string string_1)
		{
			//ILSpy generated this explicit interface implementation from .override directive in GetCount
			return this.GetCount(string_1);
		}
	}
}
namespace AutoPico
{
	public class AudioFile
	{
		private bool bool_0;

		private bool bool_1;

		private string string_0;

		public bool Wait
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		public int Milleseconds
		{
			get
			{
				string string_ = Strings.Space(255);
				string string_2 = "set audiofile time format milliseconds";
				string string_3 = null;
				mciSendStringA(ref string_2, ref string_3, 0, (int)IntPtr.Zero);
				string_3 = "status audiofile length";
				mciSendStringA(ref string_3, ref string_, 255, (int)IntPtr.Zero);
				string_ = Strings.Replace(string_, "\0", "", 1, -1, (CompareMethod)0);
				if (Operators.CompareString(string_, "", false) == 0)
				{
					return 0;
				}
				return Conversions.ToInteger(string_);
			}
		}

		public string Status
		{
			get
			{
				string string_ = Strings.Space(255);
				string string_2 = "status audiofile mode";
				mciSendStringA(ref string_2, ref string_, 255, (int)IntPtr.Zero);
				return Strings.Replace(string_, "\0", "", 1, -1, (CompareMethod)0);
			}
		}

		public int FileSize
		{
			get
			{
				try
				{
					return checked((int)((ServerComputer)Class79.smethod_0()).get_FileSystem().GetFileInfo(string_0).get_Length());
				}
				catch (Exception projectError)
				{
					ProjectData.SetProjectError(projectError);
					int result = 0;
					ProjectData.ClearProjectError();
					return result;
				}
			}
		}

		public int Channels
		{
			get
			{
				string string_ = Strings.Space(255);
				string string_2 = "status audiofile channels";
				mciSendStringA(ref string_2, ref string_, 255, (int)IntPtr.Zero);
				if (Versioned.IsNumeric((object)string_))
				{
					return Conversions.ToInteger(string_);
				}
				return -1;
			}
		}

		public string Debug
		{
			get
			{
				string string_ = Strings.Space(255);
				string string_2 = "status audiofile channels";
				mciSendStringA(ref string_2, ref string_, 255, (int)IntPtr.Zero);
				return Conversion.Str((object)string_);
			}
		}

		public bool IsPaused
		{
			get
			{
				return bool_1;
			}
			set
			{
				bool_1 = value;
			}
		}

		public string Filename
		{
			get
			{
				return string_0;
			}
			set
			{
				if (!((ServerComputer)Class79.smethod_0()).get_FileSystem().FileExists(value))
				{
					throw new FileNotFoundException();
				}
				string_0 = value;
			}
		}

		[DllImport("winmm.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int mciSendStringA([MarshalAs(UnmanagedType.VBByRefStr)] ref string string_1, [MarshalAs(UnmanagedType.VBByRefStr)] ref string string_2, int int_0, int int_1);

		public AudioFile(string location)
		{
			bool_0 = false;
			bool_1 = false;
			Filename = location;
		}

		public void Play()
		{
			if ((Operators.CompareString(string_0, "", false) == 0) | (Filename.Length <= 4))
			{
				return;
			}
			switch (Strings.Right(Filename, 3).ToLower())
			{
			default:
				throw new Exception("File type not supported.");
			case "mid":
			case "idi":
			{
				string string_2 = "stop midi";
				string string_ = "";
				mciSendStringA(ref string_2, ref string_, 0, 0);
				string_ = "close midi";
				string_2 = "";
				mciSendStringA(ref string_, ref string_2, 0, 0);
				string_2 = "open sequencer!" + string_0 + " alias midi";
				string_ = "";
				mciSendStringA(ref string_2, ref string_, 0, 0);
				string_ = "play midi";
				string_2 = "";
				mciSendStringA(ref string_, ref string_2, 0, 0);
				break;
			}
			case "wav":
			{
				string string_2 = "open \"" + string_0 + "\" type waveaudio alias audiofile";
				string string_ = null;
				mciSendStringA(ref string_2, ref string_, 0, (int)IntPtr.Zero);
				string_ = "play audiofile from 0";
				string_2 = null;
				mciSendStringA(ref string_, ref string_2, 0, (int)IntPtr.Zero);
				break;
			}
			case "mp3":
			{
				string string_ = "open \"" + string_0 + "\" type mpegvideo alias audiofile";
				string string_2 = null;
				mciSendStringA(ref string_, ref string_2, 0, (int)IntPtr.Zero);
				string string_3 = "play audiofile from 0";
				if (bool_0)
				{
					string_3 += " wait";
				}
				string_2 = null;
				mciSendStringA(ref string_3, ref string_2, 0, (int)IntPtr.Zero);
				break;
			}
			}
			IsPaused = false;
		}

		public void Pause()
		{
			string string_ = "pause audiofile";
			string string_2 = null;
			mciSendStringA(ref string_, ref string_2, 0, (int)IntPtr.Zero);
			IsPaused = true;
		}

		public void Resume()
		{
			string string_ = "resume audiofile";
			string string_2 = null;
			mciSendStringA(ref string_, ref string_2, 0, (int)IntPtr.Zero);
			IsPaused = false;
		}

		public void Stop()
		{
			string string_ = "stop audiofile";
			string string_2 = null;
			mciSendStringA(ref string_, ref string_2, 0, (int)IntPtr.Zero);
		}

		public void Close()
		{
			string string_ = "close audiofile";
			string string_2 = null;
			mciSendStringA(ref string_, ref string_2, 0, (int)IntPtr.Zero);
		}
	}
	public class BooleanEvent
	{
		public delegate void VariableChangedEventHandler(bool mvalue);

		private bool bool_0;

		[CompilerGenerated]
		private VariableChangedEventHandler variableChangedEventHandler_0;

		public bool Value
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool num = bool_0;
				bool_0 = value;
				if (num != bool_0)
				{
					try
					{
						variableChangedEventHandler_0?.Invoke(bool_0);
					}
					catch (Exception projectError)
					{
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		public event VariableChangedEventHandler VariableChanged
		{
			[CompilerGenerated]
			add
			{
				VariableChangedEventHandler variableChangedEventHandler = variableChangedEventHandler_0;
				VariableChangedEventHandler variableChangedEventHandler2;
				do
				{
					variableChangedEventHandler2 = variableChangedEventHandler;
					VariableChangedEventHandler value2 = (VariableChangedEventHandler)Delegate.Combine(variableChangedEventHandler2, value);
					variableChangedEventHandler = Interlocked.CompareExchange(ref variableChangedEventHandler_0, value2, variableChangedEventHandler2);
				}
				while ((object)variableChangedEventHandler != variableChangedEventHandler2);
			}
			[CompilerGenerated]
			remove
			{
				VariableChangedEventHandler variableChangedEventHandler = variableChangedEventHandler_0;
				VariableChangedEventHandler variableChangedEventHandler2;
				do
				{
					variableChangedEventHandler2 = variableChangedEventHandler;
					VariableChangedEventHandler value2 = (VariableChangedEventHandler)Delegate.Remove(variableChangedEventHandler2, value);
					variableChangedEventHandler = Interlocked.CompareExchange(ref variableChangedEventHandler_0, value2, variableChangedEventHandler2);
				}
				while ((object)variableChangedEventHandler != variableChangedEventHandler2);
			}
		}

		public BooleanEvent()
		{
			bool_0 = false;
		}
	}
	public class EmbeddedAssembly
	{
		internal static void smethod_0(ref string string_0, ref string string_1, ref Variables variables_0)
		{
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Expected O, but got Unknown
			byte[] array = null;
			Assembly executingAssembly = Assembly.GetExecutingAssembly();
			string[] manifestResourceNames = executingAssembly.GetManifestResourceNames();
			string text = null;
			string[] array2 = manifestResourceNames;
			foreach (string text2 in array2)
			{
				if (text2.Contains(string_0))
				{
					text = text2;
					break;
				}
			}
			checked
			{
				if (text != null)
				{
					Stream manifestResourceStream = executingAssembly.GetManifestResourceStream(text);
					if (manifestResourceStream == null)
					{
						throw new Exception(string_0 + Convert.ToString(" is not found in Embedded Resources."));
					}
					array = new byte[(int)manifestResourceStream.Length - 1 + 1];
					manifestResourceStream.Read(array, 0, (int)manifestResourceStream.Length);
					bool flag = false;
					string text3 = "";
					SHA1CryptoServiceProvider val = new SHA1CryptoServiceProvider();
					string text4 = BitConverter.ToString(((HashAlgorithm)val).ComputeHash(array)).Replace("-", string.Empty);
					text3 = string_1;
					if (File.Exists(text3))
					{
						byte[] array3 = File.ReadAllBytes(text3);
						string text5 = BitConverter.ToString(((HashAlgorithm)val).ComputeHash(array3)).Replace("-", string.Empty);
						flag = ((Operators.CompareString(text4, text5, false) == 0) ? true : false);
					}
					else
					{
						flag = false;
					}
					if (!flag)
					{
						File.WriteAllBytes(text3, array);
					}
					return;
				}
				throw new Exception(string_0 + Convert.ToString(" is not found in Embedded Resources."));
			}
		}
	}
	public interface IActivateMetroForm
	{
		void ShowFormSegura();

		void HideFormSegura();

		void SetCircularProgressSegura(bool value, int percent, bool reset);

		void CloseFormSegura();
	}
	public interface IFrmShowMessage
	{
		public enum enumMessageIcon
		{
			Error,
			Warning,
			Information,
			Question
		}

		public enum enumMessageButton
		{
			OK,
			YesNo,
			YesNoCancel,
			OKCancel
		}

		DialogResult Show(string messageText, IActivateMetroForm formActivateMetro);

		DialogResult Show(string messageText, string messageTitle, IActivateMetroForm formActivateMetro);

		DialogResult Show(string messageText, string messageTitle, enumMessageIcon messageIcon, enumMessageButton messageButton, IActivateMetroForm formActivateMetro);
	}
	public class StringEvent
	{
		public delegate void VariableChangedEventHandler(string mvalue);

		private string string_0;

		[CompilerGenerated]
		private VariableChangedEventHandler variableChangedEventHandler_0;

		public string Value
		{
			get
			{
				return string_0;
			}
			set
			{
				string text = string_0;
				string_0 = value;
				if (!text.Contains(string_0))
				{
					variableChangedEventHandler_0?.Invoke(string_0);
				}
			}
		}

		public event VariableChangedEventHandler VariableChanged
		{
			[CompilerGenerated]
			add
			{
				VariableChangedEventHandler variableChangedEventHandler = variableChangedEventHandler_0;
				VariableChangedEventHandler variableChangedEventHandler2;
				do
				{
					variableChangedEventHandler2 = variableChangedEventHandler;
					VariableChangedEventHandler value2 = (VariableChangedEventHandler)Delegate.Combine(variableChangedEventHandler2, value);
					variableChangedEventHandler = Interlocked.CompareExchange(ref variableChangedEventHandler_0, value2, variableChangedEventHandler2);
				}
				while ((object)variableChangedEventHandler != variableChangedEventHandler2);
			}
			[CompilerGenerated]
			remove
			{
				VariableChangedEventHandler variableChangedEventHandler = variableChangedEventHandler_0;
				VariableChangedEventHandler variableChangedEventHandler2;
				do
				{
					variableChangedEventHandler2 = variableChangedEventHandler;
					VariableChangedEventHandler value2 = (VariableChangedEventHandler)Delegate.Remove(variableChangedEventHandler2, value);
					variableChangedEventHandler = Interlocked.CompareExchange(ref variableChangedEventHandler_0, value2, variableChangedEventHandler2);
				}
				while ((object)variableChangedEventHandler != variableChangedEventHandler2);
			}
		}

		public StringEvent()
		{
			string_0 = string.Empty;
		}
	}
	public class TypingMonkey
	{
		private const string string_0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";

		private Random random_0;

		public TypingMonkey()
		{
			random_0 = new Random();
		}

		public string TypeAway(int size)
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i <= size; i = checked(i + 1))
			{
				char value = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"[random_0.Next(0, "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
	}
}
namespace AutoPico.FakeClient
{
	public class FakeClient
	{
		[CompilerGenerated]
		private bool bool_0;

		public bool Stop
		{
			[CompilerGenerated]
			get
			{
				return bool_0;
			}
			[CompilerGenerated]
			set
			{
				bool_0 = value;
			}
		}

		public FakeClient()
		{
			Stop = false;
		}

		public void Run(ref Variables variables)
		{
			FileLogger logger = variables.Logger;
			string message = "Loading WinDivert...";
			logger.LogMessage(ref message);
			IntPtr intPtr = Marshal.AllocHGlobal(65535);
			try
			{
				IntPtr intPtr2 = Class21.DivertOpen(string.Format("ip.SrcAddr == {0} or ip.DstAddr == {0}", variables.KmsHostForward.IpAddress), DivertLayer.DivertLayerNetwork, -101, 0uL);
				if (intPtr2 == new IntPtr(-1))
				{
					FileLogger logger2 = variables.Logger;
					message = "Failed to open the WinDivert device";
					logger2.LogMessage(ref message);
					if (variables.IntentosWinDivert < 6)
					{
						Thread.Sleep(Class2.smethod_2(50, 600));
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables, ref hostServer_);
					}
					else
					{
						variables.IsWinDivert.Value = false;
						Class15.smethod_1(ref variables);
						variables.IsTapDriver.Value = true;
						HostServer hostServer_ = null;
						Class3.smethod_19(ref variables, ref hostServer_);
					}
					return;
				}
				try
				{
					FileLogger logger3 = variables.Logger;
					message = "WinDivert Started: " + variables.KmsHostForward.IpAddress;
					logger3.LogMessage(ref message);
					DivertAddress divertAddress = default(DivertAddress);
					int int_ = default(int);
					DivertIPHdr divertIPHdr = default(DivertIPHdr);
					while (!Stop)
					{
						IntPtr intPtr3 = Marshal.AllocCoTaskMem(Marshal.SizeOf((object)divertAddress));
						if (!Class21.DivertRecv(intPtr2, intPtr, 65535, intPtr3, ref int_))
						{
							FileLogger logger4 = variables.Logger;
							message = "Failed to redirect packet; windivert failed";
							logger4.LogMessage(ref message);
							continue;
						}
						object? obj = Marshal.PtrToStructure(intPtr3, divertAddress.GetType());
						divertAddress = ((obj != null) ? ((DivertAddress)obj) : default(DivertAddress));
						IntPtr intptr_ = Marshal.AllocCoTaskMem(Marshal.SizeOf((object)divertIPHdr));
						Class21.DivertHelperParsePacket(intPtr, int_, ref intptr_, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
						object? obj2 = Marshal.PtrToStructure(intptr_, divertIPHdr.GetType());
						divertIPHdr = ((obj2 != null) ? ((DivertIPHdr)obj2) : default(DivertIPHdr));
						uint dstAddr = divertIPHdr.DstAddr;
						divertIPHdr.DstAddr = divertIPHdr.SrcAddr;
						divertIPHdr.SrcAddr = dstAddr;
						if (divertAddress.Direction == 0)
						{
							divertAddress.Direction = 1;
						}
						else
						{
							divertAddress.Direction = 0;
						}
						Marshal.StructureToPtr((object)divertAddress, intPtr3, fDeleteOld: true);
						Marshal.StructureToPtr((object)divertIPHdr, intptr_, fDeleteOld: true);
						Class21.DivertHelperCalcChecksums(intPtr, int_, 0uL);
						if (!Class21.DivertSend(intPtr2, intPtr, int_, intPtr3, IntPtr.Zero))
						{
							Console.WriteLine("Failed to redirect packet; windivert injection failed");
						}
					}
				}
				finally
				{
					Class21.DivertClose(intPtr2);
				}
			}
			finally
			{
				Marshal.FreeHGlobal(intPtr);
			}
		}
	}
	public struct DivertAddress
	{
		public uint IfIdx;

		public uint SubIfIdx;

		public byte Direction;
	}
	public struct DivertIPHdr
	{
		public byte bitvector1;

		public byte TOS;

		public ushort Length;

		public ushort Id;

		public ushort FragOff0;

		public byte TTL;

		public byte Protocol;

		public ushort Checksum;

		public uint SrcAddr;

		public uint DstAddr;
	}
	public struct DivertIPV6Hdr
	{
		public uint bitvector1;

		public ushort FlowLabel1;

		public ushort Length;

		public byte NextHdr;

		public byte HopLimit;

		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 4, ArraySubType = UnmanagedType.U4)]
		public uint[] SrcAddr;

		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 4, ArraySubType = UnmanagedType.U4)]
		public uint[] DstAddr;

		public uint TrafficClass0
		{
			get
			{
				return bitvector1 & 0xFu;
			}
			set
			{
				bitvector1 = value | bitvector1;
			}
		}

		public uint Version
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0xF0u) / 16.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 16L) | bitvector1);
				}
			}
		}

		public uint FlowLabel0
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0xF00u) / 256.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 256L) | bitvector1);
				}
			}
		}

		public uint TrafficClass1
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0xF000u) / 4096.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 4096L) | bitvector1);
				}
			}
		}
	}
	public struct DivertICMPHdr
	{
		public byte Type;

		public byte Code;

		public ushort Checksum;

		public uint Body;
	}
	public struct DivertICMPV6Hdr
	{
		public byte Type;

		public byte Code;

		public ushort Checksum;

		public uint Body;
	}
	public struct DivertTCPHdr
	{
		public ushort SrcPort;

		public ushort DstPort;

		public uint SeqNum;

		public uint AckNum;

		public uint bitvector1;

		public ushort Window;

		public ushort Checksum;

		public ushort UrgPtr;

		public uint Reserved1
		{
			get
			{
				return bitvector1 & 0xFu;
			}
			set
			{
				bitvector1 = value | bitvector1;
			}
		}

		public uint HdrLength
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0xF0u) / 16.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 16L) | bitvector1);
				}
			}
		}

		public uint Fin
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0x100u) / 256.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 256L) | bitvector1);
				}
			}
		}

		public uint Syn
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0x200u) / 512.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 512L) | bitvector1);
				}
			}
		}

		public uint Rst
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0x400u) / 1024.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 1024L) | bitvector1);
				}
			}
		}

		public uint Psh
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0x800u) / 2048.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 2048L) | bitvector1);
				}
			}
		}

		public uint Ack
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0x1000u) / 4096.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 4096L) | bitvector1);
				}
			}
		}

		public uint Urg
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0x2000u) / 8192.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 8192L) | bitvector1);
				}
			}
		}

		public uint Reserved2
		{
			get
			{
				return checked((uint)Math.Round((double)(bitvector1 & 0xC000u) / 16384.0));
			}
			set
			{
				checked
				{
					bitvector1 = (uint)((unchecked((long)value) * 16384L) | bitvector1);
				}
			}
		}
	}
	public struct DivertUDPHdr
	{
		public ushort SrcPort;

		public ushort DstPort;

		public ushort Length;

		public ushort Checksum;
	}
	public enum DivertLayer
	{
		DivertLayerNetwork,
		DivertLayerNetworkForward
	}
}
namespace AutoPico.KMSEmulator
{
	public class KMSClient
	{
		private RpcRequestClient rpcRequestClient_0;

		private readonly ILogger ilogger_0;

		private bool bool_0;

		public bool Success
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		public KMSClient(RpcRequestClient rpcClient, ILogger logger)
		{
			rpcRequestClient_0 = rpcClient;
			ilogger_0 = logger;
			Success = false;
		}

		public void SendKmsResquest(ref IKMSClientSettings settings)
		{
			Class22 class22_ = new Class23().method_0(settings.KMSClientProduct);
			KMSRequest request = method_0(ref class22_, ref settings);
			ref RpcRequestClient reference = ref rpcRequestClient_0;
			IMessageHandler imessageHandler_ = reference;
			ILogger ilogger_ = ilogger_0;
			Class28 @class = new Class28(ref imessageHandler_, ref ilogger_);
			reference = (RpcRequestClient)imessageHandler_;
			KMSResponse kMSResponse = @class.AutoPico.KMSEmulator.IMessageHandler.HandleRequest(ref request);
			if ((ulong)kMSResponse.KMSErrorCode == 0uL)
			{
				Success = true;
				return;
			}
			Success = false;
			ILogger logger = ilogger_0;
			string message = string.Format("Test: Received response Error: 0x{0:x} {0}", kMSResponse.KMSErrorCode);
			logger.LogMessage(ref message);
		}

		private KMSRequest method_0(ref Class22 class22_0, ref IKMSClientSettings ikmsclientSettings_0)
		{
			Guid clientMachineId = Guid.NewGuid();
			if (!ikmsclientSettings_0.GenerateRandomClientMachineId)
			{
				clientMachineId = ikmsclientSettings_0.ClientMachineId;
			}
			string empty = string.Empty;
			empty = ((!ikmsclientSettings_0.GenerateRandomClientName) ? ikmsclientSettings_0.ClientName : method_1());
			KMSRequest kMSRequest = new KMSRequest();
			kMSRequest.Version = class22_0.method_2();
			kMSRequest.ApplicationId = class22_0.method_4();
			kMSRequest.ClientMachineId = clientMachineId;
			kMSRequest.GraceTime = 43200u;
			kMSRequest.IsClientVM = 0u;
			kMSRequest.KMSCountedId = class22_0.method_8();
			kMSRequest.LicenseStatus = (uint)ikmsclientSettings_0.LicenseStatus;
			kMSRequest.MachineName = KMSRequest.GetMachineNameBytes(ref empty);
			KMSRequest kMSRequest2;
			byte[] arrayBytes = (kMSRequest2 = kMSRequest).MachineName;
			bool isEncrypted = false;
			string machineName = KMSRequest.GetMachineName(ref arrayBytes, ref isEncrypted);
			kMSRequest2.MachineName = arrayBytes;
			kMSRequest.MachineNameString = machineName;
			kMSRequest.PreviousClientMachineId = new byte[16];
			kMSRequest.RequestTime = checked((ulong)DateTime.UtcNow.ToFileTime());
			kMSRequest.RequiredClientCount = class22_0.method_0();
			kMSRequest.SkuId = class22_0.method_6();
			return kMSRequest;
		}

		private string method_1()
		{
			int int_ = Class2.smethod_2(4, 17);
			return method_2(int_);
		}

		private string method_2(int int_0)
		{
			string text = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			StringBuilder stringBuilder = new StringBuilder(int_0);
			checked
			{
				int num = int_0 - 1;
				for (int i = 0; i <= num; i++)
				{
					stringBuilder.Append(text[Class2.smethod_2(0, text.Length)]);
				}
				return stringBuilder.ToString();
			}
		}
	}
	public enum KMSClientProduct
	{
		Office2010,
		Office2013,
		Office2013V4,
		Office2013V5,
		Office2013V6,
		Office2016,
		Office2016V4,
		Office2016V5,
		Office2016V6,
		Windows,
		WindowsVista,
		Windows7,
		Windows8,
		Windows81,
		Windows10
	}
	public sealed class KMSServer
	{
		private static IKMSServerSettings ikmsserverSettings_0;

		private KMSServer()
		{
		}

		public static bool IsRunning(ref Variables variables)
		{
			return variables.listener.bool_0;
		}

		public static void Start(ref Variables variables, KMSServerSettings settings = null)
		{
			if (variables.listener != null && variables.listener.bool_0)
			{
				throw new Exception("Cannot run two instances of KMS Server.");
			}
			if (settings != null)
			{
				ikmsserverSettings_0 = settings;
			}
			else
			{
				ikmsserverSettings_0 = new KMSServerSettings();
			}
			ILogger logger = variables.Logger;
			KMSRequestHandler requestMessageHandler = new KMSRequestHandler(ref ikmsserverSettings_0, ref logger);
			RpcMessageHandler messageHandler = new RpcMessageHandler(ikmsserverSettings_0, requestMessageHandler, variables.Logger);
			if (ikmsserverSettings_0 != null && ikmsserverSettings_0.KillProcessOnPort)
			{
				foreach (TcpRow item in ManagedIpHelper.GetExtendedTcpTable(sorted: true))
				{
					if (item.LocalEndPoint.get_Port() == ikmsserverSettings_0.Port)
					{
						Process.GetProcessById(item.ProcessId).Kill();
						Thread.Sleep(5000);
						break;
					}
				}
			}
			variables.listener = new TCPServer(messageHandler, variables.Logger);
			variables.listener.Start(ikmsserverSettings_0.Port);
			if (variables.listener.bool_0)
			{
				FileLogger logger2 = variables.Logger;
				string message = $"KMSEmulator running port: {ikmsserverSettings_0.Port}";
				logger2.LogMessage(ref message);
			}
		}

		public static void Stop(ref Variables variables)
		{
			variables.listener.Stop();
		}
	}
	public class KMSNetworkClient
	{
		private readonly ILogger ilogger_0;

		private bool bool_0;

		public bool Success
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		public KMSNetworkClient(ILogger logger)
		{
			ilogger_0 = logger;
			Success = false;
		}

		public void Execute(IKMSClientSettings settings)
		{
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			try
			{
				NetworkStream stream = new TcpClient(settings.IPAddress, settings.Port).GetStream();
				Class25 @class = new Class25((Stream)(object)stream);
				Class61 class2 = new Class61(@class);
				byte[] request = new byte[0];
				Class66 class3 = Class66.smethod_0(class2.AutoPico.KMSEmulator.IMessageHandler.HandleRequest(ref request));
				if (class3.method_28()[0].method_0() != 0)
				{
					Class67.smethod_1(new Class59(@class, class3).AutoPico.KMSEmulator.IMessageHandler.HandleRequest(ref request));
				}
				RpcRequestClient rpcClient = new RpcRequestClient(@class);
				KMSClient kMSClient = new KMSClient(rpcClient, ilogger_0);
				kMSClient.SendKmsResquest(ref settings);
				Success = kMSClient.Success;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				ILogger logger = ilogger_0;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}
	}
	public class KMSServerSettings : IKMSServerSettings
	{
		private uint uint_0;

		private string string_0;

		private bool bool_0;

		private int int_0;

		private uint uint_1;

		private uint uint_2;

		private bool bool_1;

		public uint CurrentClientCount
		{
			get
			{
				return uint_0;
			}
			set
			{
				if ((long)value > 50L)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Current Client Count must be between 0 and 50.");
				}
				uint_0 = value;
			}
		}

		public string DefaultKMSPID
		{
			get
			{
				return string_0;
			}
			set
			{
				if (!Regex.IsMatch(value, "^([0-9]{5})-([0-9]{5})-([0-9]{3})-([0-9]{6})-([0-9]{2})-([0-9]{4,5})-([0-9]{4}).([0-9]{4})-([0-9]{7})$", (RegexOptions)2))
				{
					throw new ArgumentException("Provided value is not a valid KMS PID.", "value");
				}
				string_0 = value;
			}
		}

		public bool GenerateRandomKMSPID
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		public int Port
		{
			get
			{
				return int_0;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Server TCP/IP Port cannot be less than 0.");
				}
				if (value > 65535)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Server TCP/IP Port cannot be greater than 65535.");
				}
				int_0 = value;
			}
		}

		public uint VLActivationInterval
		{
			get
			{
				return uint_1;
			}
			set
			{
				if ((long)value < 15L)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Activation Interval cannot be less than 15 minutes.");
				}
				if ((long)value > 43200L)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Activation Interval cannot be greater than 43200 minutes.");
				}
				uint_1 = value;
			}
		}

		public uint VLRenewalInterval
		{
			get
			{
				return uint_2;
			}
			set
			{
				if ((long)value < 15L)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Renewal Interval cannot be less than 15 minutes.");
				}
				if ((long)value > 43200L)
				{
					throw new ArgumentOutOfRangeException("value", "KMS Renewal Interval cannot be greater than 43200 minutes.");
				}
				uint_2 = value;
			}
		}

		public bool KillProcessOnPort
		{
			get
			{
				return bool_1;
			}
			set
			{
				bool_1 = value;
			}
		}

		public KMSServerSettings()
		{
			CurrentClientCount = 26u;
			DefaultKMSPID = "55041-00168-305-246209-03-1033-7600.0000-0522010";
			GenerateRandomKMSPID = true;
			Port = 1688;
			VLActivationInterval = 120u;
			VLRenewalInterval = 43200u;
			KillProcessOnPort = false;
		}
	}
}
namespace AutoPico.KMS
{
	public interface IKMSServerSettings
	{
		uint CurrentClientCount
		{
			get;
			set;
		}

		string DefaultKMSPID
		{
			get;
			set;
		}

		bool GenerateRandomKMSPID
		{
			get;
			set;
		}

		int Port
		{
			get;
			set;
		}

		uint VLActivationInterval
		{
			get;
			set;
		}

		uint VLRenewalInterval
		{
			get;
			set;
		}

		bool KillProcessOnPort
		{
			get;
			set;
		}
	}
}
namespace AutoPico.KMSEmulator
{
	public class TcpTable : IEnumerable<TcpRow>
	{
		private readonly IEnumerable<TcpRow> ienumerable_0;

		public IEnumerable<TcpRow> Rows => ienumerable_0;

		public TcpTable(IEnumerable<TcpRow> tcpRows)
		{
			ienumerable_0 = tcpRows;
		}

		public IEnumerator<TcpRow> GetEnumerator()
		{
			return ienumerable_0.GetEnumerator();
		}

		private IEnumerator IEnumerable_GetEnumerator()
		{
			return ienumerable_0.GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			//ILSpy generated this explicit interface implementation from .override directive in IEnumerable_GetEnumerator
			return this.IEnumerable_GetEnumerator();
		}
	}
	public class TcpRow
	{
		private readonly IPEndPoint ipendPoint_0;

		private readonly IPEndPoint ipendPoint_1;

		private readonly TcpState tcpState_0;

		private readonly int int_0;

		public IPEndPoint LocalEndPoint => ipendPoint_0;

		public IPEndPoint RemoteEndPoint => ipendPoint_1;

		public TcpState State => tcpState_0;

		public int ProcessId => int_0;

		public TcpRow(IpHelper.TcpRow tcpRow__1)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Expected O, but got Unknown
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Expected O, but got Unknown
			tcpState_0 = tcpRow__1.state;
			int_0 = tcpRow__1.owningPid;
			checked
			{
				int num = (byte)unchecked((uint)(checked((byte)unchecked((uint)(checked((byte)unchecked((uint)((byte)(tcpRow__1.localPort1 << 0) + tcpRow__1.localPort2))) + (byte)(tcpRow__1.localPort3 << 0)))) + (byte)(tcpRow__1.localPort4 << 0)));
				long num2 = tcpRow__1.localAddr;
				ipendPoint_0 = new IPEndPoint(num2, num);
				int num3 = (byte)unchecked((uint)(checked((byte)unchecked((uint)(checked((byte)unchecked((uint)((byte)(tcpRow__1.remotePort1 << 0) + tcpRow__1.remotePort2))) + (byte)(tcpRow__1.remotePort3 << 0)))) + (byte)(tcpRow__1.remotePort4 << 0)));
				long num4 = tcpRow__1.remoteAddr;
				ipendPoint_1 = new IPEndPoint(num4, num3);
			}
		}
	}
	public sealed class ManagedIpHelper
	{
		private ManagedIpHelper()
		{
		}

		public static TcpTable GetExtendedTcpTable(bool sorted)
		{
			List<TcpRow> list = new List<TcpRow>();
			IntPtr intPtr = IntPtr.Zero;
			int tcpTableLength = 0;
			if ((long)IpHelper.GetExtendedTcpTable(intPtr, ref tcpTableLength, sorted, 2, IpHelper.TcpTableType.OwnerPidAll, 0) != 0L)
			{
				try
				{
					intPtr = Marshal.AllocHGlobal(tcpTableLength);
					if ((long)IpHelper.GetExtendedTcpTable(intPtr, ref tcpTableLength, sort: true, 2, IpHelper.TcpTableType.OwnerPidAll, 0) == 0L)
					{
						object? obj = Marshal.PtrToStructure(intPtr, typeof(IpHelper.TcpTable));
						IpHelper.TcpTable tcpTable = ((obj != null) ? ((IpHelper.TcpTable)obj) : default(IpHelper.TcpTable));
						checked
						{
							IntPtr intPtr2 = (IntPtr)((long)intPtr + Marshal.SizeOf((object)tcpTable.length));
							int num = (int)(unchecked((long)tcpTable.length) - 1L);
							for (int i = 0; i <= num; i++)
							{
								object? obj2 = Marshal.PtrToStructure(intPtr2, typeof(IpHelper.TcpRow));
								list.Add(new TcpRow((obj2 != null) ? ((IpHelper.TcpRow)obj2) : default(IpHelper.TcpRow)));
								intPtr2 = (IntPtr)((long)intPtr2 + Marshal.SizeOf(typeof(IpHelper.TcpRow)));
							}
						}
					}
				}
				finally
				{
					if (intPtr != IntPtr.Zero)
					{
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
			return new TcpTable(list);
		}
	}
	public sealed class IpHelper
	{
		public enum TcpTableType
		{
			BasicListener,
			BasicConnections,
			BasicAll,
			OwnerPidListener,
			OwnerPidConnections,
			OwnerPidAll,
			OwnerModuleListener,
			OwnerModuleConnections,
			OwnerModuleAll
		}

		public struct TcpTable
		{
			public uint length;

			public TcpRow tcpRow_0;
		}

		public struct TcpRow
		{
			public TcpState state;

			public uint localAddr;

			public byte localPort1;

			public byte localPort2;

			public byte localPort3;

			public byte localPort4;

			public uint remoteAddr;

			public byte remotePort1;

			public byte remotePort2;

			public byte remotePort3;

			public byte remotePort4;

			public int owningPid;
		}

		public const string DllName = "iphlpapi.dll";

		public const int AfInet = 2;

		private IpHelper()
		{
		}

		[DllImport("iphlpapi.dll", SetLastError = true)]
		public static extern uint GetExtendedTcpTable(IntPtr tcpTable, ref int tcpTableLength, bool sort, int ipVersion, TcpTableType tcpTableType, int reserved);
	}
	public class TCPServer : IDisposable
	{
		private class Class85
		{
			internal readonly TcpClient tcpClient_0;

			internal readonly byte[] byte_0;

			internal Class85(TcpClient tcpClient_1, byte[] byte_1)
			{
				tcpClient_0 = tcpClient_1;
				byte_0 = byte_1;
			}
		}

		[CompilerGenerated]
		internal sealed class Class86
		{
			public Class85 class85_0;

			public TCPServer tcpserver_0;

			internal void method_0()
			{
				tcpserver_0.method_1(ref class85_0);
			}
		}

		private TcpListener tcpListener_0;

		private readonly RpcMessageHandler rpcMessageHandler_0;

		private readonly List<Class85> list_0;

		private readonly ILogger ilogger_0;

		internal bool bool_0;

		public TCPServer(RpcMessageHandler messageHandler, ILogger logger)
		{
			tcpListener_0 = null;
			list_0 = new List<Class85>();
			rpcMessageHandler_0 = messageHandler;
			ilogger_0 = logger;
		}

		public void Start(int port)
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Expected O, but got Unknown
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Expected O, but got Unknown
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Expected O, but got Unknown
			//IL_0099: Expected O, but got Unknown
			//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Expected O, but got Unknown
			//IL_0148: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Expected O, but got Unknown
			//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b0: Expected O, but got Unknown
			//IL_01b2: Expected O, but got Unknown
			//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ea: Expected O, but got Unknown
			bool flag = false;
			try
			{
				tcpListener_0 = new TcpListener(IPAddress.IPv6Any, port);
				tcpListener_0.get_Server().set_SendBufferSize(1024);
				tcpListener_0.get_Server().set_ReceiveBufferSize(1024);
				try
				{
					tcpListener_0.get_Server().SetSocketOption((SocketOptionLevel)41, (SocketOptionName)27, false);
				}
				catch (SocketException val)
				{
					ProjectData.SetProjectError((Exception)val);
					flag = true;
					ProjectData.ClearProjectError();
				}
				tcpListener_0.Start();
				tcpListener_0.BeginAcceptTcpClient((AsyncCallback)method_0, (object)tcpListener_0);
			}
			catch (SocketException val2)
			{
				ProjectData.SetProjectError((Exception)val2);
				SocketException val3 = val2;
				flag = true;
				tcpListener_0 = null;
				ILogger logger = ilogger_0;
				string message = "IPv6 failure. Trying IPv4 only";
				logger.LogMessage(ref message);
				string message2 = val3.get_Message();
				Exception exception_ = (Exception)(object)val3;
				string str = Class2.smethod_4(ref exception_);
				val3 = (SocketException)exception_;
				string str2 = message2 + " " + str;
				ILogger logger2 = ilogger_0;
				message = "Error: " + str2;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_2 = ex;
				string str3 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
				ILogger logger3 = ilogger_0;
				string message = "Error: " + str3;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			if (flag)
			{
				try
				{
					tcpListener_0 = new TcpListener(IPAddress.Any, port);
					tcpListener_0.get_Server().set_SendBufferSize(1024);
					tcpListener_0.get_Server().set_ReceiveBufferSize(1024);
					tcpListener_0.Start();
					tcpListener_0.BeginAcceptTcpClient((AsyncCallback)method_0, (object)tcpListener_0);
				}
				catch (SocketException val4)
				{
					ProjectData.SetProjectError((Exception)val4);
					SocketException val5 = val4;
					tcpListener_0 = null;
					ILogger logger4 = ilogger_0;
					string message = "IPv4 failure.";
					logger4.LogMessage(ref message);
					string message3 = val5.get_Message();
					Exception exception_ = (Exception)(object)val5;
					string str4 = Class2.smethod_4(ref exception_);
					val5 = (SocketException)exception_;
					string str5 = message3 + " " + str4;
					ILogger logger5 = ilogger_0;
					message = "Error: " + str5;
					logger5.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
				catch (Exception ex2)
				{
					ProjectData.SetProjectError(ex2);
					Exception exception_3 = ex2;
					string str6 = exception_3.Message + " " + Class2.smethod_4(ref exception_3);
					ILogger logger6 = ilogger_0;
					string message = "Error: " + str6;
					logger6.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
			}
			bool_0 = true;
		}

		public void Dispose()
		{
			Stop();
		}

		public void Stop()
		{
			if (tcpListener_0 != null)
			{
				tcpListener_0.Stop();
			}
			lock (list_0)
			{
				foreach (Class85 item in list_0)
				{
					item.tcpClient_0.get_Client().Disconnect(false);
				}
				list_0.Clear();
			}
			bool_0 = false;
		}

		private void method_0(IAsyncResult iasyncResult_0)
		{
			try
			{
				TcpClient val = tcpListener_0.EndAcceptTcpClient(iasyncResult_0);
				byte[] byte_ = new byte[checked(val.get_ReceiveBufferSize() - 1 + 1)];
				Class85 class85_0 = new Class85(val, byte_);
				lock (list_0)
				{
					list_0.Add(class85_0);
				}
				new Thread((ThreadStart)delegate
				{
					method_1(ref class85_0);
				}).Start();
			}
			catch (ObjectDisposedException projectError)
			{
				ProjectData.SetProjectError((Exception)projectError);
				ILogger logger = ilogger_0;
				string message = "Client listener shut down";
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				ILogger logger2 = ilogger_0;
				string message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		private void method_1(ref Class85 class85_0)
		{
			try
			{
				class85_0.tcpClient_0.GetStream().BeginRead(class85_0.byte_0, 0, class85_0.byte_0.Length, (AsyncCallback)method_2, (object)class85_0);
				tcpListener_0.BeginAcceptTcpClient((AsyncCallback)method_0, (object)null);
				ILogger logger = ilogger_0;
				string message = "Connection accepted from " + ((object)class85_0.tcpClient_0.get_Client().get_RemoteEndPoint()).ToString();
				logger.LogMessage(ref message);
			}
			catch (ObjectDisposedException projectError)
			{
				ProjectData.SetProjectError((Exception)projectError);
				ILogger logger2 = ilogger_0;
				string message = "Client listener shut down";
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				ILogger logger3 = ilogger_0;
				string message = "Error: " + str;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		private void method_2(IAsyncResult iasyncResult_0)
		{
			Class85 @class = iasyncResult_0.AsyncState as Class85;
			if (@class == null)
			{
				return;
			}
			NetworkStream stream = @class.tcpClient_0.GetStream();
			int num = stream.EndRead(iasyncResult_0);
			if (num == 0)
			{
				lock (list_0)
				{
					list_0.Remove(@class);
				}
				return;
			}
			byte[] request = Enumerable.ToArray<byte>(Enumerable.Take<byte>((IEnumerable<byte>)@class.byte_0, num));
			byte b = request[2];
			try
			{
				switch (b)
				{
				case 11:
				{
					byte[] array2 = rpcMessageHandler_0.HandleRequest(ref request);
					stream.BeginWrite(array2, 0, array2.Length, (AsyncCallback)method_3, (object)@class);
					break;
				}
				case 0:
				{
					byte[] array = rpcMessageHandler_0.HandleRequest(ref request);
					stream.BeginWrite(array, 0, array.Length, (AsyncCallback)method_4, (object)@class);
					break;
				}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				ILogger logger = ilogger_0;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		private void method_3(IAsyncResult iasyncResult_0)
		{
			Class85 @class = iasyncResult_0.AsyncState as Class85;
			if (@class != null)
			{
				@class.tcpClient_0.GetStream().BeginRead(@class.byte_0, 0, @class.byte_0.Length, (AsyncCallback)method_2, (object)@class);
			}
		}

		private void method_4(IAsyncResult iasyncResult_0)
		{
			Class85 @class = iasyncResult_0.AsyncState as Class85;
			if (@class != null)
			{
				@class.tcpClient_0.get_Client().Shutdown((SocketShutdown)0);
				@class.tcpClient_0.get_Client().Close();
				ILogger logger = ilogger_0;
				string message = "Connection closed";
				logger.LogMessage(ref message);
				lock (list_0)
				{
					list_0.Remove(@class);
				}
			}
		}
	}
}
namespace AutoPico.KMS
{
	public enum KMSErrorCode : uint
	{
		SL_E_VL_NOT_WINDOWS_SLP = 3221549109u,
		SL_E_VL_NOT_ENOUGH_COUNT = 3221549112u,
		SL_E_VL_BINDING_SERVICE_NOT_ENABLED = 3221549113u,
		SL_E_VL_INFO_PRODUCT_USER_RIGHT = 1074065472u,
		SL_I_VL_OOB_NO_BINDING_SERVER_REGISTRATION = 1074065473u,
		SL_E_VL_KEY_MANAGEMENT_SERVICE_ID_MISMATCH = 3221549122u,
		SL_E_VL_MACHINE_NOT_BOUND = 3221549142u
	}
	public class KMSRequest
	{
		private uint uint_0;

		private uint uint_1;

		private uint uint_2;

		private uint uint_3;

		private Guid guid_0;

		private Guid guid_1;

		private Guid guid_2;

		private Guid guid_3;

		private uint uint_4;

		private ulong ulong_0;

		private byte[] byte_0;

		private byte[] byte_1;

		private string string_0;

		public uint Version
		{
			get
			{
				return uint_0;
			}
			set
			{
				uint_0 = value;
			}
		}

		public uint IsClientVM
		{
			get
			{
				return uint_1;
			}
			set
			{
				uint_1 = value;
			}
		}

		public uint LicenseStatus
		{
			get
			{
				return uint_2;
			}
			set
			{
				uint_2 = value;
			}
		}

		public uint GraceTime
		{
			get
			{
				return uint_3;
			}
			set
			{
				uint_3 = value;
			}
		}

		public Guid ApplicationId
		{
			get
			{
				return guid_0;
			}
			set
			{
				guid_0 = value;
			}
		}

		public Guid SkuId
		{
			get
			{
				return guid_1;
			}
			set
			{
				guid_1 = value;
			}
		}

		public Guid KMSCountedId
		{
			get
			{
				return guid_2;
			}
			set
			{
				guid_2 = value;
			}
		}

		public Guid ClientMachineId
		{
			get
			{
				return guid_3;
			}
			set
			{
				guid_3 = value;
			}
		}

		public uint RequiredClientCount
		{
			get
			{
				return uint_4;
			}
			set
			{
				uint_4 = value;
			}
		}

		public ulong RequestTime
		{
			get
			{
				return ulong_0;
			}
			set
			{
				ulong_0 = value;
			}
		}

		public byte[] PreviousClientMachineId
		{
			get
			{
				return byte_0;
			}
			set
			{
				byte_0 = value;
			}
		}

		public byte[] MachineName
		{
			get
			{
				return byte_1;
			}
			set
			{
				byte_1 = value;
			}
		}

		public string MachineNameString
		{
			get
			{
				return string_0;
			}
			set
			{
				string_0 = value;
			}
		}

		public uint MajorVersion => Version >> 16;

		public uint BodyLength => checked((uint)(Marshal.SizeOf((object)Version) + Marshal.SizeOf((object)IsClientVM) + Marshal.SizeOf((object)LicenseStatus) + Marshal.SizeOf((object)GraceTime) + Marshal.SizeOf((object)ApplicationId) + Marshal.SizeOf((object)SkuId) + Marshal.SizeOf((object)KMSCountedId) + Marshal.SizeOf((object)ClientMachineId) + Marshal.SizeOf((object)RequiredClientCount) + Marshal.SizeOf((object)RequestTime) + PreviousClientMachineId.Length + 128));

		public static KMSRequest Parse(ref byte[] decrypted)
		{
			MemoryStream input = new MemoryStream(decrypted);
			BinaryReader binaryReader = new BinaryReader(input);
			KMSRequest kMSRequest = new KMSRequest();
			kMSRequest.Version = binaryReader.ReadUInt32();
			kMSRequest.IsClientVM = binaryReader.ReadUInt32();
			kMSRequest.LicenseStatus = binaryReader.ReadUInt32();
			kMSRequest.GraceTime = binaryReader.ReadUInt32();
			kMSRequest.ApplicationId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.SkuId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.KMSCountedId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.ClientMachineId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.RequiredClientCount = binaryReader.ReadUInt32();
			kMSRequest.RequestTime = binaryReader.ReadUInt64();
			kMSRequest.PreviousClientMachineId = binaryReader.ReadBytes(16);
			kMSRequest.MachineName = binaryReader.ReadBytes(128);
			KMSRequest kMSRequest2;
			byte[] arrayBytes = (kMSRequest2 = kMSRequest).MachineName;
			bool isEncrypted = false;
			string machineName = GetMachineName(ref arrayBytes, ref isEncrypted);
			kMSRequest2.MachineName = arrayBytes;
			kMSRequest.MachineNameString = machineName;
			return kMSRequest;
		}

		public static KMSRequest Parse(ref byte[] encrypted, ref bool isEncrypted)
		{
			MemoryStream input = new MemoryStream(encrypted);
			BinaryReader binaryReader = new BinaryReader(input);
			KMSRequest kMSRequest = new KMSRequest();
			kMSRequest.Version = binaryReader.ReadUInt32();
			kMSRequest.IsClientVM = binaryReader.ReadUInt32();
			kMSRequest.LicenseStatus = binaryReader.ReadUInt32();
			kMSRequest.GraceTime = binaryReader.ReadUInt32();
			kMSRequest.ApplicationId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.SkuId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.KMSCountedId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.ClientMachineId = new Guid(binaryReader.ReadBytes(16));
			kMSRequest.RequiredClientCount = binaryReader.ReadUInt32();
			kMSRequest.RequestTime = binaryReader.ReadUInt64();
			kMSRequest.PreviousClientMachineId = binaryReader.ReadBytes(16);
			kMSRequest.MachineName = binaryReader.ReadBytes(128);
			KMSRequest kMSRequest2;
			byte[] arrayBytes = (kMSRequest2 = kMSRequest).MachineName;
			string machineName = GetMachineName(ref arrayBytes, ref isEncrypted);
			kMSRequest2.MachineName = arrayBytes;
			kMSRequest.MachineNameString = machineName;
			return kMSRequest;
		}

		public static string GetMachineName(ref byte[] arrayBytes, ref bool isEncrypted = false)
		{
			string text = Encoding.Unicode.GetString(arrayBytes);
			if (!isEncrypted)
			{
				text = text[..text.IndexOf("\0")];
			}
			return text;
		}

		public static byte[] GetMachineNameBytes(ref string machineName)
		{
			byte[] array = Encoding.Unicode.GetBytes(machineName);
			checked
			{
				byte[] array2 = new byte[127 - machineName.Length * 2 + 1];
				if (array2.Length > 0)
				{
					string s = new string('\0', (int)Math.Round((double)array2.Length / 2.0));
					array2 = Encoding.Unicode.GetBytes(s);
					array = Class1.smethod_0(array, array2);
				}
				return array;
			}
		}

		public byte[] GetByteArray()
		{
			MemoryStream memoryStream = new MemoryStream();
			BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
			binaryWriter.Write(Version);
			binaryWriter.Write(IsClientVM);
			binaryWriter.Write(LicenseStatus);
			binaryWriter.Write(GraceTime);
			binaryWriter.Write(ApplicationId.ToByteArray());
			binaryWriter.Write(SkuId.ToByteArray());
			binaryWriter.Write(KMSCountedId.ToByteArray());
			binaryWriter.Write(ClientMachineId.ToByteArray());
			binaryWriter.Write(RequiredClientCount);
			binaryWriter.Write(RequestTime);
			binaryWriter.Write(PreviousClientMachineId);
			binaryWriter.Write(MachineName);
			binaryWriter.Flush();
			memoryStream.Position = 0L;
			return memoryStream.ToArray();
		}
	}
	public class KMSRequestHandler : IMessageHandler
	{
		private readonly IKMSServerSettings ikmsserverSettings_0;

		private readonly ILogger ilogger_0;

		public KMSRequestHandler(ref IKMSServerSettings settings, ref ILogger logger)
		{
			ikmsserverSettings_0 = settings;
			ilogger_0 = logger;
		}

		public byte[] HandleRequest(ref byte[] request)
		{
			byte byte_ = request[10];
			byte byte_2 = request[8];
			try
			{
				return method_0(ref byte_, ref byte_2).HandleRequest(ref request);
			}
			catch (Exception projectError)
			{
				ProjectData.SetProjectError(projectError);
				byte[] result = new byte[0];
				ProjectData.ClearProjectError();
				return result;
			}
		}

		public KMSResponse HandleRequest(ref KMSRequest request)
		{
			return null;
		}

		private IMessageHandler method_0(ref byte byte_0, ref byte byte_1)
		{
			if (byte_0 == 4 && byte_1 == 0)
			{
				IKMSServerSettings ikmsserverSettings_ = ikmsserverSettings_0;
				ILogger ilogger_ = ilogger_0;
				Interface0 interface0_ = new Class37(ref ikmsserverSettings_, ref ilogger_);
				ILogger ilogger_2 = ilogger_0;
				return new Class40(ref interface0_, ref ilogger_2);
			}
			if (byte_0 == 5 && byte_1 == 0)
			{
				IKMSServerSettings ikmsserverSettings_ = ikmsserverSettings_0;
				ILogger ilogger_ = ilogger_0;
				Interface0 interface0_ = new Class37(ref ikmsserverSettings_, ref ilogger_);
				ILogger ilogger_2 = ilogger_0;
				return new Class46(ref interface0_, ref ilogger_2);
			}
			if (byte_0 == 6 && byte_1 == 0)
			{
				IKMSServerSettings ikmsserverSettings_ = ikmsserverSettings_0;
				ILogger ilogger_ = ilogger_0;
				Interface0 interface0_ = new Class37(ref ikmsserverSettings_, ref ilogger_);
				ILogger ilogger_2 = ilogger_0;
				return new Class51(ref interface0_, ref ilogger_2);
			}
			return new Class53();
		}
	}
	public class KMSResponse
	{
		private uint uint_0;

		private uint uint_1;

		private byte[] byte_0;

		private Guid guid_0;

		private ulong ulong_0;

		private uint uint_2;

		private uint uint_3;

		private uint uint_4;

		private KMSErrorCode kmserrorCode_0;

		private string string_0;

		public uint Version
		{
			get
			{
				return uint_0;
			}
			set
			{
				uint_0 = value;
			}
		}

		public uint KMSPIDLength
		{
			get
			{
				return uint_1;
			}
			set
			{
				uint_1 = value;
			}
		}

		public byte[] KMSPID
		{
			get
			{
				return byte_0;
			}
			set
			{
				byte_0 = value;
			}
		}

		public Guid ClientMachineId
		{
			get
			{
				return guid_0;
			}
			set
			{
				guid_0 = value;
			}
		}

		public ulong RequestTime
		{
			get
			{
				return ulong_0;
			}
			set
			{
				ulong_0 = value;
			}
		}

		public uint CurrentClientCount
		{
			get
			{
				return uint_2;
			}
			set
			{
				uint_2 = value;
			}
		}

		public uint VLActivationInterval
		{
			get
			{
				return uint_3;
			}
			set
			{
				uint_3 = value;
			}
		}

		public uint VLRenewalInterval
		{
			get
			{
				return uint_4;
			}
			set
			{
				uint_4 = value;
			}
		}

		public KMSErrorCode KMSErrorCode
		{
			get
			{
				return kmserrorCode_0;
			}
			set
			{
				kmserrorCode_0 = value;
			}
		}

		public uint MajorVersion => Version >> 16;

		public string KMSPIDString
		{
			get
			{
				return string_0;
			}
			set
			{
				string_0 = value;
			}
		}

		public uint BodyLength => checked((uint)(Marshal.SizeOf((object)Version) + Marshal.SizeOf((object)KMSPIDLength) + KMSPID.Length + Marshal.SizeOf((object)ClientMachineId) + Marshal.SizeOf((object)RequestTime) + Marshal.SizeOf((object)CurrentClientCount) + Marshal.SizeOf((object)VLActivationInterval) + Marshal.SizeOf((object)VLRenewalInterval)));

		public static KMSResponse Parse(KMSRequest kmsRequest, IKMSServerSettings serverSettings)
		{
			string kMSPIDString = ((!serverSettings.GenerateRandomKMSPID) ? serverSettings.DefaultKMSPID : new Class29().method_0(ref kmsRequest));
			KMSResponse kMSResponse = new KMSResponse();
			kMSResponse.Version = kmsRequest.Version;
			kMSResponse.KMSPIDString = kMSPIDString;
			checked
			{
				kMSResponse.KMSPIDLength = (uint)(unchecked((long)checked((uint)(kMSResponse.KMSPIDString.Length + 1))) * 2L);
				kMSResponse.KMSPID = Encoding.Unicode.GetBytes(kMSResponse.KMSPIDString + "\0");
				kMSResponse.ClientMachineId = kmsRequest.ClientMachineId;
				kMSResponse.RequestTime = kmsRequest.RequestTime;
				kMSResponse.CurrentClientCount = serverSettings.CurrentClientCount;
				kMSResponse.VLActivationInterval = serverSettings.VLActivationInterval;
				kMSResponse.VLRenewalInterval = serverSettings.VLRenewalInterval;
				return kMSResponse;
			}
		}

		public static KMSResponse Parse(byte[] decrypted)
		{
			MemoryStream input = new MemoryStream(decrypted);
			BinaryReader binaryReader = new BinaryReader(input);
			KMSResponse kMSResponse = new KMSResponse();
			kMSResponse.Version = binaryReader.ReadUInt32();
			kMSResponse.KMSPIDLength = binaryReader.ReadUInt32();
			kMSResponse.KMSPID = binaryReader.ReadBytes(checked((int)kMSResponse.KMSPIDLength));
			kMSResponse.KMSPIDString = Encoding.Unicode.GetString(kMSResponse.KMSPID);
			kMSResponse.ClientMachineId = new Guid(binaryReader.ReadBytes(16));
			kMSResponse.RequestTime = binaryReader.ReadUInt64();
			kMSResponse.CurrentClientCount = binaryReader.ReadUInt32();
			kMSResponse.VLActivationInterval = binaryReader.ReadUInt32();
			kMSResponse.VLRenewalInterval = binaryReader.ReadUInt32();
			return kMSResponse;
		}

		public static KMSResponse Parse(byte[] encrypted, bool isEncrypted)
		{
			int count = checked(encrypted.Length - 142 + 98);
			MemoryStream input = new MemoryStream(encrypted);
			BinaryReader binaryReader = new BinaryReader(input);
			KMSResponse kMSResponse = new KMSResponse();
			kMSResponse.Version = binaryReader.ReadUInt32();
			kMSResponse.KMSPIDLength = binaryReader.ReadUInt32();
			kMSResponse.KMSPID = binaryReader.ReadBytes(count);
			kMSResponse.KMSPIDString = Encoding.Unicode.GetString(kMSResponse.KMSPID);
			kMSResponse.ClientMachineId = new Guid(binaryReader.ReadBytes(16));
			kMSResponse.RequestTime = binaryReader.ReadUInt64();
			kMSResponse.CurrentClientCount = binaryReader.ReadUInt32();
			kMSResponse.VLActivationInterval = binaryReader.ReadUInt32();
			kMSResponse.VLRenewalInterval = binaryReader.ReadUInt32();
			return kMSResponse;
		}

		public byte[] GetByteArray()
		{
			MemoryStream memoryStream = new MemoryStream();
			BinaryWriter binaryWriter = new BinaryWriter(memoryStream);
			binaryWriter.Write(Version);
			binaryWriter.Write(KMSPIDLength);
			binaryWriter.Write(KMSPID);
			binaryWriter.Write(ClientMachineId.ToByteArray());
			binaryWriter.Write(RequestTime);
			binaryWriter.Write(CurrentClientCount);
			binaryWriter.Write(VLActivationInterval);
			binaryWriter.Write(VLRenewalInterval);
			binaryWriter.Flush();
			memoryStream.Position = 0L;
			return memoryStream.ToArray();
		}

		public static KMSResponse ParseError(byte[] byteArray)
		{
			MemoryStream input = new MemoryStream(byteArray);
			BinaryReader binaryReader = new BinaryReader(input);
			KMSResponse kMSResponse = new KMSResponse();
			binaryReader.ReadInt32();
			binaryReader.ReadInt32();
			kMSResponse.KMSErrorCode = (KMSErrorCode)checked((uint)binaryReader.ReadInt32());
			return kMSResponse;
		}
	}
	public enum LicenseStatus : uint
	{
		Unlicensed,
		Licensed,
		OOBGrace,
		OOTGrace,
		NonGenuineGrace,
		Notification,
		ExtendedGrace
	}
}
namespace AutoPico.Logging
{
	public class FileLogger : ILogger
	{
		[CompilerGenerated]
		internal sealed class Class87
		{
			public string string_0;

			public FileLogger fileLogger_0;

			internal void method_0()
			{
				fileLogger_0.method_0(ref string_0);
			}
		}

		private string string_0;

		private List<string> list_0;

		private bool bool_0;

		private bool bool_1;

		private bool bool_2;

		private bool bool_3;

		public FileLogger()
		{
			string_0 = null;
			list_0 = null;
			bool_0 = true;
			bool_1 = false;
			bool_2 = false;
			bool_3 = false;
		}

		public void LogMessage(ref string message)
		{
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			if (!bool_3)
			{
				if (this.string_0 != null && !(!File.Exists(this.string_0) & !bool_1))
				{
					if (bool_1 && new FileInfo(this.string_0).get_IsReadOnly())
					{
						string text = Environment.GetEnvironmentVariable("TEMP") + "\\logs";
						this.string_0 = text + "\\" + Path.GetFileName(Application.get_ExecutablePath());
						this.string_0 = this.string_0.Replace(".exe", string.Empty);
						this.string_0 = this.string_0.Replace(".EXE", string.Empty);
						this.string_0 += ".log";
						try
						{
							if (!Directory.Exists(text))
							{
								Directory.CreateDirectory(text);
							}
						}
						catch (Exception projectError)
						{
							ProjectData.SetProjectError(projectError);
							ProjectData.ClearProjectError();
						}
						bool_1 = false;
					}
				}
				else
				{
					list_0 = new List<string>();
					string text2 = Class2.smethod_6() + "\\logs";
					this.string_0 = text2 + "\\" + Path.GetFileName(Application.get_ExecutablePath());
					this.string_0 = this.string_0.Replace(".exe", string.Empty);
					this.string_0 = this.string_0.Replace(".EXE", string.Empty);
					this.string_0 += ".log";
					try
					{
						if (!Directory.Exists(text2))
						{
							Directory.CreateDirectory(text2);
						}
						if (File.Exists(this.string_0))
						{
							File.Delete(this.string_0);
						}
					}
					catch (Exception projectError2)
					{
						ProjectData.SetProjectError(projectError2);
						ProjectData.ClearProjectError();
					}
					StringBuilder stringBuilder = new StringBuilder();
					if (!bool_2)
					{
						bool_2 = true;
						stringBuilder.Append(DateTime.Now.ToString("yyyy.MM.dd "));
						stringBuilder.Append(Application.get_ProductName() + " ");
						stringBuilder.Append(Application.get_ProductVersion());
						stringBuilder.AppendLine(string.Empty);
						stringBuilder.AppendLine("Official Site: ");
						stringBuilder.AppendLine("http://forums.mydigitallife.info/threads/49108-KMSpico-Official-Thread");
						stringBuilder.AppendLine(message);
						message = stringBuilder.ToString();
					}
				}
				bool_3 = true;
			}
			if (!bool_3)
			{
				return;
			}
			try
			{
				string string_0 = message;
				new Thread((ThreadStart)delegate
				{
					method_0(ref string_0);
				}).Start();
			}
			catch (Exception projectError3)
			{
				ProjectData.SetProjectError(projectError3);
				ProjectData.ClearProjectError();
			}
		}

		private void method_0(ref string string_1)
		{
			try
			{
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.Append(DateTime.Now.ToString("HH:mm:ss:fff "));
				stringBuilder.Append(string_1);
				Variables.LogString.Value = string_1;
				stringBuilder.AppendLine(string.Empty);
				list_0.Add(stringBuilder.ToString());
				if (bool_0)
				{
					bool_0 = false;
					StringBuilder stringBuilder2 = new StringBuilder();
					while (list_0.Count != 0)
					{
						stringBuilder2.Append(Enumerable.ElementAt<string>((IEnumerable<string>)list_0, 0));
						list_0.RemoveAt(0);
					}
					File.AppendAllText(string_0, stringBuilder2.ToString());
					bool_0 = true;
				}
			}
			catch (Exception projectError)
			{
				ProjectData.SetProjectError(projectError);
				bool_1 = true;
				bool_0 = true;
				ProjectData.ClearProjectError();
			}
		}
	}
}
namespace AutoPico.Network
{
	public class Firewall
	{
		internal static void smethod_0(ref Variables variables_0, ref bool bool_0, ref string[] string_0 = null)
		{
			checked
			{
				try
				{
					int int_;
					if (bool_0)
					{
						HostServer kmsHostForward = variables_0.KmsHostForward;
						int_ = (int)kmsHostForward.Port;
						smethod_1(ref int_, "KMS Emulator Port", ref variables_0);
						kmsHostForward.Port = (uint)int_;
						string string_ = "KMS Emulator: " + string_0[1];
						smethod_2(ref string_, string_0[0] + "\\" + string_0[1], ref variables_0);
						return;
					}
					if (!variables_0.firewallPortOpened)
					{
						HostServer kmsHostForward2;
						int_ = (int)(kmsHostForward2 = variables_0.KmsHostForward).Port;
						bool num = smethod_6(ref int_, ref variables_0);
						kmsHostForward2.Port = (uint)int_;
						if (!num)
						{
							goto IL_009b;
						}
					}
					HostServer kmsHostForward3 = variables_0.KmsHostForward;
					int_ = (int)kmsHostForward3.Port;
					smethod_3(ref int_, ref variables_0);
					kmsHostForward3.Port = (uint)int_;
					goto IL_009b;
					IL_009b:
					string string_2 = "KMS Emulator: " + string_0[1];
					if (variables_0.firewallAppAdded || smethod_5(ref string_2, ref variables_0))
					{
						smethod_4(ref string_2, ref variables_0);
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger = variables_0.Logger;
					string string_ = "Error: " + str;
					logger.LogMessage(ref string_);
					ProjectData.ClearProjectError();
				}
			}
		}

		private static void smethod_1(ref int int_0, string string_0, ref Variables variables_0)
		{
			INetFwOpenPorts netFwOpenPorts = null;
			INetFwOpenPort netFwOpenPort = null;
			FileLogger logger = variables_0.Logger;
			string message = "Opening Firewall Port...";
			logger.LogMessage(ref message);
			try
			{
				if (!smethod_6(ref int_0, ref variables_0))
				{
					netFwOpenPorts = smethod_7(ref variables_0).GloballyOpenPorts;
					netFwOpenPort = smethod_8("INetOpenPort") as INetFwOpenPort;
					netFwOpenPort.Port = int_0;
					netFwOpenPort.Protocol = NET_FW_IP_PROTOCOL_.NET_FW_IP_PROTOCOL_TCP;
					netFwOpenPort.Name = string_0;
					netFwOpenPorts.Add(netFwOpenPort);
					variables_0.firewallPortOpened = true;
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				_ = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: Opening Firewall Port";
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			finally
			{
				if (netFwOpenPorts != null)
				{
					netFwOpenPorts = null;
				}
				if (netFwOpenPort != null)
				{
					netFwOpenPort = null;
				}
			}
		}

		private static void smethod_2(ref string string_0, string string_1, ref Variables variables_0)
		{
			INetFwAuthorizedApplications netFwAuthorizedApplications = null;
			INetFwAuthorizedApplication netFwAuthorizedApplication = null;
			FileLogger logger = variables_0.Logger;
			string message = "Opening Firewall App...";
			logger.LogMessage(ref message);
			try
			{
				if (!smethod_5(ref string_0, ref variables_0))
				{
					netFwAuthorizedApplications = smethod_7(ref variables_0).AuthorizedApplications;
					netFwAuthorizedApplication = smethod_8("INetAuthApp") as INetFwAuthorizedApplication;
					netFwAuthorizedApplication.Name = string_0;
					netFwAuthorizedApplication.ProcessImageFileName = string_1;
					netFwAuthorizedApplications.Add(netFwAuthorizedApplication);
					variables_0.firewallAppAdded = true;
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				_ = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: Opening Firewall App";
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			finally
			{
				if (netFwAuthorizedApplications != null)
				{
					netFwAuthorizedApplications = null;
				}
				if (netFwAuthorizedApplication != null)
				{
					netFwAuthorizedApplication = null;
				}
			}
		}

		private static void smethod_3(ref int int_0, ref Variables variables_0)
		{
			INetFwOpenPorts netFwOpenPorts = null;
			FileLogger logger = variables_0.Logger;
			string message = "Closing Firewall Port...";
			logger.LogMessage(ref message);
			try
			{
				if (smethod_6(ref int_0, ref variables_0))
				{
					netFwOpenPorts = smethod_7(ref variables_0).GloballyOpenPorts;
					netFwOpenPorts.Remove(int_0, NET_FW_IP_PROTOCOL_.NET_FW_IP_PROTOCOL_TCP);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			finally
			{
				if (netFwOpenPorts != null)
				{
					netFwOpenPorts = null;
				}
			}
		}

		private static void smethod_4(ref string string_0, ref Variables variables_0)
		{
			INetFwAuthorizedApplications netFwAuthorizedApplications = null;
			INetFwAuthorizedApplication netFwAuthorizedApplication = null;
			FileLogger logger = variables_0.Logger;
			string message = "Closing Firewall App...";
			logger.LogMessage(ref message);
			try
			{
				netFwAuthorizedApplications = smethod_7(ref variables_0).AuthorizedApplications;
				IEnumerator enumerator = default(IEnumerator);
				try
				{
					enumerator = netFwAuthorizedApplications.GetEnumerator();
					do
					{
						if (enumerator.MoveNext())
						{
							netFwAuthorizedApplication = (INetFwAuthorizedApplication)enumerator.Current;
							continue;
						}
						return;
					}
					while (!netFwAuthorizedApplication.Name.Contains(string_0));
					netFwAuthorizedApplications.Remove(netFwAuthorizedApplication.ProcessImageFileName);
				}
				finally
				{
					if (enumerator is IDisposable)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			finally
			{
				if (netFwAuthorizedApplications != null)
				{
					netFwAuthorizedApplications = null;
				}
			}
		}

		private static bool smethod_5(ref string string_0, ref Variables variables_0)
		{
			bool result = false;
			Type type = null;
			INetFwMgr netFwMgr = null;
			INetFwAuthorizedApplications netFwAuthorizedApplications = null;
			INetFwAuthorizedApplication netFwAuthorizedApplication = null;
			try
			{
				type = Type.GetTypeFromProgID("HNetCfg.FwMgr");
				netFwMgr = Activator.CreateInstance(type) as INetFwMgr;
				if (netFwMgr.LocalPolicy.CurrentProfile.FirewallEnabled)
				{
					netFwAuthorizedApplications = netFwMgr.LocalPolicy.CurrentProfile.AuthorizedApplications;
					IEnumerator enumerator = netFwAuthorizedApplications.GetEnumerator();
					while (enumerator.MoveNext())
					{
						netFwAuthorizedApplication = enumerator.Current as INetFwAuthorizedApplication;
						if (netFwAuthorizedApplication.Name.Contains(string_0))
						{
							result = true;
							return result;
						}
					}
					return result;
				}
				return result;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return result;
			}
			finally
			{
				if ((object)type != null)
				{
					type = null;
				}
				if (netFwMgr != null)
				{
					netFwMgr = null;
				}
				if (netFwAuthorizedApplications != null)
				{
					netFwAuthorizedApplications = null;
				}
				if (netFwAuthorizedApplication != null)
				{
					netFwAuthorizedApplication = null;
				}
			}
		}

		private static bool smethod_6(ref int int_0, ref Variables variables_0)
		{
			bool result = false;
			INetFwOpenPorts netFwOpenPorts = null;
			Type type = null;
			INetFwMgr netFwMgr = null;
			INetFwOpenPort netFwOpenPort = null;
			try
			{
				type = Type.GetTypeFromProgID("HNetCfg.FwMgr");
				netFwMgr = Activator.CreateInstance(type) as INetFwMgr;
				netFwOpenPorts = netFwMgr.LocalPolicy.CurrentProfile.GloballyOpenPorts;
				IEnumerator enumerator = netFwOpenPorts.GetEnumerator();
				while (enumerator.MoveNext())
				{
					netFwOpenPort = enumerator.Current as INetFwOpenPort;
					if (netFwOpenPort.Port == int_0)
					{
						result = true;
						return result;
					}
				}
				return result;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return result;
			}
			finally
			{
				if (netFwOpenPorts != null)
				{
					netFwOpenPorts = null;
				}
				if ((object)type != null)
				{
					type = null;
				}
				if (netFwMgr != null)
				{
					netFwMgr = null;
				}
				if (netFwOpenPort != null)
				{
					netFwOpenPort = null;
				}
			}
		}

		private static INetFwProfile smethod_7(ref Variables variables_0)
		{
			try
			{
				return (smethod_8("INetFwMgr") as INetFwMgr).LocalPolicy.CurrentProfile;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			return null;
		}

		private static object smethod_8(string string_0)
		{
			return string_0 switch
			{
				"INetOpenPort" => Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("{0CA545C6-37AD-4A6C-BF92-9F7610067EF5}"))), 
				"INetAuthApp" => Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("{EC9846B3-2762-4A6B-A214-6ACB603462D2}"))), 
				"INetFwMgr" => Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("{304CE942-6E39-40D8-943A-B913C40C9CD4}"))), 
				_ => null, 
			};
		}
	}
	public class NetworkAdapterConfiguration : Component
	{
		public enum IGMPLevelValues
		{
			const_0,
			const_1,
			const_2,
			NULL_ENUM_VALUE
		}

		public enum IPXFrameTypeValues
		{
			Ethernet_II = 0,
			Ethernet_802_3 = 1,
			Ethernet_802_2 = 2,
			Ethernet_SNAP = 3,
			const_4 = 0xFF,
			NULL_ENUM_VALUE = 0x100
		}

		public enum IPXMediaTypeValues
		{
			Ethernet = 1,
			Token_Ring = 2,
			FDDI = 3,
			ARCNET = 8,
			NULL_ENUM_VALUE = 0
		}

		public enum TcpipNetbiosOptionsValues
		{
			EnableNetbiosViaDhcp,
			Habilitado,
			Habilitado0,
			NULL_ENUM_VALUE
		}

		public class NetworkAdapterConfigurationCollection : ICollection
		{
			public class NetworkAdapterConfigurationEnumerator : IEnumerator
			{
				private ManagementObjectEnumerator managementObjectEnumerator_0;

				virtual object IEnumerator.Current => new NetworkAdapterConfiguration((ManagementObject)managementObjectEnumerator_0.get_Current());

				public NetworkAdapterConfigurationEnumerator(ManagementObjectEnumerator objEnum)
				{
					managementObjectEnumerator_0 = objEnum;
				}

				public virtual bool MoveNext()
				{
					return managementObjectEnumerator_0.MoveNext();
				}

				public virtual void Reset()
				{
					managementObjectEnumerator_0.Reset();
				}
			}

			private ManagementObjectCollection managementObjectCollection_0;

			virtual int ICollection.Count => managementObjectCollection_0.get_Count();

			virtual bool ICollection.IsSynchronized => managementObjectCollection_0.get_IsSynchronized();

			virtual object ICollection.SyncRoot => this;

			public NetworkAdapterConfigurationCollection(ManagementObjectCollection objCollection)
			{
				managementObjectCollection_0 = objCollection;
			}

			public virtual void CopyTo(Array array, int index)
			{
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_0023: Expected O, but got Unknown
				managementObjectCollection_0.CopyTo(array, index);
				for (int i = 0; i < array.Length; i = checked(i + 1))
				{
					array.SetValue(new NetworkAdapterConfiguration((ManagementObject)array.GetValue(i)), i);
				}
			}

			public virtual IEnumerator GetEnumerator()
			{
				return new NetworkAdapterConfigurationEnumerator(managementObjectCollection_0.GetEnumerator());
			}
		}

		public class WMIValueTypeConverter : TypeConverter
		{
			private TypeConverter typeConverter_0;

			private Type type_0;

			public WMIValueTypeConverter(Type inBaseType)
				: this()
			{
				typeConverter_0 = TypeDescriptor.GetConverter(inBaseType);
				type_0 = inBaseType;
			}

			public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType)
			{
				return typeConverter_0.CanConvertFrom(context, srcType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				return typeConverter_0.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				return typeConverter_0.ConvertFrom(context, culture, RuntimeHelpers.GetObjectValue(value));
			}

			public override object CreateInstance(ITypeDescriptorContext context, IDictionary dictionary)
			{
				return typeConverter_0.CreateInstance(context, dictionary);
			}

			public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetCreateInstanceSupported(context);
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributeVar)
			{
				return typeConverter_0.GetProperties(context, RuntimeHelpers.GetObjectValue(value), attributeVar);
			}

			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetPropertiesSupported(context);
			}

			public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValues(context);
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesExclusive(context);
			}

			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesSupported(context);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if ((object)type_0.BaseType == typeof(Enum))
				{
					if ((object)value.GetType() == destinationType)
					{
						return value;
					}
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "NULL_ENUM_VALUE";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if ((object)type_0 == typeof(bool) && (object)type_0.BaseType == typeof(ValueType))
				{
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if (context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
				{
					return "";
				}
				return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
			}
		}

		[TypeConverter(typeof(ExpandableObjectConverter))]
		public class ManagementSystemProperties
		{
			private ManagementBaseObject managementBaseObject_0;

			[Browsable(true)]
			public int GENUS => Conversions.ToInteger(managementBaseObject_0.get_Item("__GENUS"));

			[Browsable(true)]
			public string CLASS => Conversions.ToString(managementBaseObject_0.get_Item("__CLASS"));

			[Browsable(true)]
			public string SUPERCLASS => Conversions.ToString(managementBaseObject_0.get_Item("__SUPERCLASS"));

			[Browsable(true)]
			public string DYNASTY => Conversions.ToString(managementBaseObject_0.get_Item("__DYNASTY"));

			[Browsable(true)]
			public string RELPATH => Conversions.ToString(managementBaseObject_0.get_Item("__RELPATH"));

			[Browsable(true)]
			public int PROPERTY_COUNT => Conversions.ToInteger(managementBaseObject_0.get_Item("__PROPERTY_COUNT"));

			[Browsable(true)]
			public string[] DERIVATION => (string[])managementBaseObject_0.get_Item("__DERIVATION");

			[Browsable(true)]
			public string SERVER => Conversions.ToString(managementBaseObject_0.get_Item("__SERVER"));

			[Browsable(true)]
			public string NAMESPACE => Conversions.ToString(managementBaseObject_0.get_Item("__NAMESPACE"));

			[Browsable(true)]
			public string PATH => Conversions.ToString(managementBaseObject_0.get_Item("__PATH"));

			public ManagementSystemProperties(ManagementBaseObject ManagedObject)
			{
				managementBaseObject_0 = ManagedObject;
			}
		}

		private static string string_0 = "root\\CimV2";

		private static string string_1 = "Win32_NetworkAdapterConfiguration";

		private static ManagementScope managementScope_0 = null;

		private ManagementSystemProperties managementSystemProperties_0;

		private ManagementObject managementObject_0;

		private bool bool_0;

		private ManagementBaseObject managementBaseObject_0;

		private ManagementBaseObject managementBaseObject_1;

		private bool bool_1;

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string OriginatingNamespace => "root\\CimV2";

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string ManagementClassName
		{
			get
			{
				string text = string_1;
				if (managementBaseObject_1 != null && managementBaseObject_1.get_ClassPath() != null)
				{
					text = Conversions.ToString(managementBaseObject_1.get_Item("__CLASS"));
					if (text == null || (object)text == string.Empty)
					{
						text = string_1;
					}
				}
				return text;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementSystemProperties SystemProperties => managementSystemProperties_0;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public ManagementBaseObject LateBoundObject => managementBaseObject_1;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public ManagementScope Scope
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Scope();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					managementObject_0.set_Scope(value);
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool AutoCommit
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		[Browsable(true)]
		public ManagementPath Path
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Path();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					if (!method_0(null, value, null))
					{
						throw new ArgumentException("El nombre de clase no coincide.");
					}
					managementObject_0.set_Path(value);
				}
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public static ManagementScope StaticScope
		{
			get
			{
				return managementScope_0;
			}
			set
			{
				managementScope_0 = value;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsArpAlwaysSourceRouteNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ArpAlwaysSourceRoute") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad ArpAlwaysSourceRoute indica si ARP siempre usa enrutamiento de origen. Si se asigna el valor TRUE, TCP/IP transmitirá las consultas ARP con el enrutamiento de origen habilitado en redes Token Ring. De forma predeterminada, ARP transmite las consultas primero sin el enrutamiento de origen y, si no se recibe respuesta, vuelve a intentarlo con el enrutamiento de origen habilitado. Enrutamiento de origen permite el enrutamiento de paquetes de red a través de diferentes tipos de red. Predeterminado: FALSE.")]
		[Browsable(true)]
		public bool ArpAlwaysSourceRoute
		{
			get
			{
				if (managementBaseObject_1.get_Item("ArpAlwaysSourceRoute") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("ArpAlwaysSourceRoute"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsArpUseEtherSNAPNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ArpUseEtherSNAP") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad ArpUseEtherSNAP indica si los paquetes de Ethernet utilizan la codificación SNAP IEEE 802.3. Si se asigna el valor 1, TCP/IP transmitirá los paquetes de Ethernet con la codificación SNAP 802.3. De forma predeterminada, la pila transmite los paquetes en formato DIX de Ethernet. Los sistemas Windows NT/Windows 2000 reciben siempre en ambos formatos. Valor predeterminado: FALSE.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool ArpUseEtherSNAP
		{
			get
			{
				if (managementBaseObject_1.get_Item("ArpUseEtherSNAP") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("ArpUseEtherSNAP"));
			}
		}

		[Description("Una corta descripción textual (cadena de una línea) del objeto CIM_Setting.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string Caption => Conversions.ToString(managementBaseObject_1.get_Item("Caption"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DatabasePath indica una ruta de archivo de Windows a los archivos de base de datos de Internet estándar (HOSTS, LMHOSTS, NETWORKS, PROTOCOLS). Lo utiliza la interfaz de Windows Sockets. La propiedad sólo está disponible en los sistemas de Windows NT/Windows 2000.")]
		public string DatabasePath => Conversions.ToString(managementBaseObject_1.get_Item("DatabasePath"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDeadGWDetectEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DeadGWDetectEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad DeadGWDetectEnabled indica si se detectan las puertas de enlace inactivas. Si se asigna el valor TRUE, TCP detectará las puertas de enlace inactivas. Con esta característica habilitada, TCP pedirá a IP el cambio a una puerta de enlace de reserva si retransmite un segmento varias veces sin recibir una respuesta. Valor predeterminado: TRUE.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool DeadGWDetectEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("DeadGWDetectEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("DeadGWDetectEnabled"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DefaultIPGateway indica las direcciones IP de las puertas de enlace predeterminadas que el equipo usa.\nEjemplo: {194.161.12.1, 194.162.46.1}")]
		public string[] DefaultIPGateway => (string[])managementBaseObject_1.get_Item("DefaultIPGateway");

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsDefaultTOSNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DefaultTOS") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DefaultTOS indica el valor predeterminado de tipo de servicio (TOS) establecido en el encabezado de los paquetes IP salientes. Consulte el documento RFC 791 para ver la definición de los valores. Valor predeterminado: 0, Intervalo válido: 0 - 255.")]
		public byte DefaultTOS
		{
			get
			{
				if (managementBaseObject_1.get_Item("DefaultTOS") == null)
				{
					return Convert.ToByte(0);
				}
				return Conversions.ToByte(managementBaseObject_1.get_Item("DefaultTOS"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDefaultTTLNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DefaultTTL") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad DefaultTTL indica el valor Período de vida (TTL) predeterminado definido en el encabezado de los paquetes IP salientes. El TTL especifica el número de enrutadores por los que un paquete IP puede pasar hasta alcanzar su destino antes de ser descartado. Cada enrutador reduce en uno el recuento TTL de un paquete al pasar y descarta los paquetes si el TTL es 0. Valor predeterminado: 32, Intervalo válido: de 1 a 255.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public byte DefaultTTL
		{
			get
			{
				if (managementBaseObject_1.get_Item("DefaultTTL") == null)
				{
					return Convert.ToByte(0);
				}
				return Conversions.ToByte(managementBaseObject_1.get_Item("DefaultTTL"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Una descripción textual del objeto CIM_Setting.")]
		public string Description => Conversions.ToString(managementBaseObject_1.get_Item("Description"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDHCPEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DHCPEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DHCPEnabled determina si se va a permitir que un servidor del protocolo de configuración dinámica de host (DHCP) asigne automáticamente direcciones IP cuando se establezcan conexiones de red.\nValores: TRUE o FALSE. Si se asigna el valor TRUE, DHCP está habilitado.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public bool DHCPEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("DHCPEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("DHCPEnabled"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDHCPLeaseExpiresNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DHCPLeaseExpires") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad DHCPLeaseExpires indica la fecha y hora de expiración de una concesión de dirección IP que se asignó a un equipo por el servidor de protocolo de configuración dinámica de host (DHCP).\nEjemplo: 20521201000230.000000000")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public DateTime DHCPLeaseExpires
		{
			get
			{
				if (managementBaseObject_1.get_Item("DHCPLeaseExpires") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("DHCPLeaseExpires")));
				}
				return DateTime.MinValue;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsDHCPLeaseObtainedNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DHCPLeaseObtained") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("La propiedad DHCPLeaseObtained indica la fecha y hora de obtención de una concesión de dirección IP que se asignó a un equipo por el servidor de protocolo de configuración dinámica de host (DHCP).\nEjemplo: 19521201000230.000000000")]
		public DateTime DHCPLeaseObtained
		{
			get
			{
				if (managementBaseObject_1.get_Item("DHCPLeaseObtained") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("DHCPLeaseObtained")));
				}
				return DateTime.MinValue;
			}
		}

		[Description("La propiedad DHCPServer indica la dirección IP del servidor DHCP (Protocolo de configuración dinámica de host).\nEjemplo: 154.55.34.0")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string DHCPServer => Conversions.ToString(managementBaseObject_1.get_Item("DHCPServer"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad DNSDomain indica un nombre de organización seguido de un punto y una extensión que especifica el tipo de organización, como microsoft.com. El nombre puede estar formado por cualquier combinación de las letras A a la Z, los números 0 al 9 y el guión (-), más el punto (.) utilizado como separador.\nEjemplo: microsoft.com.")]
		public string DNSDomain => Conversions.ToString(managementBaseObject_1.get_Item("DNSDomain"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad DNSDomainSuffixSearchOrder especifica los sufijos de dominio DNS que se van a anexar a los nombres de host durante la resolución de nombres. Al intentar resolver un nombre de dominio completo (FQDN) de un nombre sólo de host, el sistema primero anexará el nombre de dominio local. Si no es posible, el sistema utilizará la lista de sufijos de dominio para crear FQDN adicionales en el orden enumerado y consultará cada uno en los servidores DNS.\nEjemplo: samples.microsoft.com example.microsoft.com")]
		public string[] DNSDomainSuffixSearchOrder => (string[])managementBaseObject_1.get_Item("DNSDomainSuffixSearchOrder");

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsDNSEnabledForWINSResolutionNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DNSEnabledForWINSResolution") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DNSEnabledForWINSResolution indica si está habilitado el Sistema de nombres de dominio (DNS) para la resolución de nombres mediante la resolución WINS. Si no se puede resolver el nombre con DNS, la solicitud del nombre se reenvía a WINS para su resolución.")]
		public bool DNSEnabledForWINSResolution
		{
			get
			{
				if (managementBaseObject_1.get_Item("DNSEnabledForWINSResolution") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("DNSEnabledForWINSResolution"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DNSHostName indica el nombre de host que emplean algunas utilidades para identificar el equipo local para la autenticación. Otras utilidades basadas en TCP/IP pueden usar este valor para conocer el nombre del equipo local. Los nombres de host se almacenan en servidores DNS en una tabla que asigna nombres a direcciones IP para su uso en DNS. El nombre puede estar formado por cualquier combinación de las letras A a la Z, los números 0 al 9 y el guión (-), más el punto (.) utilizado como separador. De forma predeterminada, este valor es el nombre de equipo de red de Microsoft, pero el administrador de la red puede asignar otro nombre de host sin que afecte al nombre de equipo.\nEjemplo: corpdns.")]
		public string DNSHostName => Conversions.ToString(managementBaseObject_1.get_Item("DNSHostName"));

		[Browsable(true)]
		[Description("La propiedad DNSServerSearchOrder muestra una lista en orden alfabético de las direcciones IP que consultan servidores DNS. ")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string[] DNSServerSearchOrder => (string[])managementBaseObject_1.get_Item("DNSServerSearchOrder");

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsDomainDNSRegistrationEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("DomainDNSRegistrationEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad DomainDNSRegistrationEnabled especifica si las direcciones IP de esta conexión están registradas en DNS bajo el nombre de dominio de esta conexión, además de registrarse bajo el nombre DNS completo del equipo. El nombre de dominio de esta conexión se define por medio del método SetDNSDomain() o DHCP lo asigna. El nombre registrado es el nombre del host del equipo que tiene el nombre de dominio anexado. Sólo en Windows 2000.")]
		public bool DomainDNSRegistrationEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("DomainDNSRegistrationEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("DomainDNSRegistrationEnabled"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsForwardBufferMemoryNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ForwardBufferMemory") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad ForwardBufferMemory indica la cantidad de memoria que IP asigna para almacenar datos de paquetes en la cola de paquetes del enrutador. Cuando el espacio de este búfer está lleno, el enrutador comienza a descartar aleatoriamente paquetes de la cola. Los búferes de datos de las colas de paquetes tienen una longitud de 256 bytes, por lo que el valor de este parámetro debe ser un múltiplo de 256. Para paquetes de gran tamaño se encadenan varios búferes. El encabezado IP de los paquetes se almacena por separado. Este parámetro se omite y no se asignan búferes si el enrutador IP no está habilitado. El tamaño del búfer puede variar desde la red MTU al valor más pequeño que 0xFFFFFFFF. Valor predeterminado: 74240 (suficiente para 50 paquetes de 1480 bytes, redondeados a un múltiplo de 256).")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint ForwardBufferMemory
		{
			get
			{
				if (managementBaseObject_1.get_Item("ForwardBufferMemory") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("ForwardBufferMemory"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsFullDNSRegistrationEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("FullDNSRegistrationEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad FullDNSRegistrationEnabled especifica si las direcciones IP de esta conexión están registradas en DNS bajo el nombre DNS completo del equipo. El nombre DNS completo del equipo se muestra en la ficha Identificación de red del elemento  Sistema del Panel de control. Sólo en Windows 2000.")]
		[Browsable(true)]
		public bool FullDNSRegistrationEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("FullDNSRegistrationEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("FullDNSRegistrationEnabled"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad GatewayCostMetric indica una métrica de costo de valores enteros (entre 1 y 9999) que se va a utilizar para calcular las rutas más rápidas, confiables y económicas. Este argumento tiene una correspondencia exacta con la propiedad DefaultIPGateway. Sólo para Windows 2000.")]
		public ushort[] GatewayCostMetric => (ushort[])managementBaseObject_1.get_Item("GatewayCostMetric");

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIGMPLevelNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IGMPLevel") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad IGMPLevel determina en qué medida el sistema admite la multidifusión IP y participa en el Protocolo de administración de grupos de Internet. En el nivel 0, el sistema no admite la multidifusión. En el nivel 1, el sistema sólo puede enviar paquetes de multidifusión IP. En el nivel 2, el sistema puede enviar paquetes de multidifusión IP y participar totalmente en IGMP para recibir paquetes de multidifusión. Valor predeterminado: 2")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public IGMPLevelValues IGMPLevel
		{
			get
			{
				if (managementBaseObject_1.get_Item("IGMPLevel") == null)
				{
					return (IGMPLevelValues)Convert.ToInt32(3);
				}
				return (IGMPLevelValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("IGMPLevel")));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIndexNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("Index") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad Index especifica el número de índice correspondiente a la configuración del adaptador de red de Win32. El número de índice se usa cuando hay más de una configuración disponible.")]
		public uint Index
		{
			get
			{
				if (managementBaseObject_1.get_Item("Index") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("Index"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsInterfaceIndexNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("InterfaceIndex") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad InterfaceIndex contiene el valor del índice que identifica de forma única a la interfaz local.")]
		public uint InterfaceIndex
		{
			get
			{
				if (managementBaseObject_1.get_Item("InterfaceIndex") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("InterfaceIndex"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad IPAddress contiene una lista con todas las direcciones IP asociadas al adaptador de red actual.\nEjemplo: 155.34.22.0")]
		public string[] IPAddress => (string[])managementBaseObject_1.get_Item("IPAddress");

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIPConnectionMetricNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPConnectionMetric") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad IPConnectionMetric indica el costo de utilizar las rutas configuradas para este adaptador enlazado a IP y se trata del valor estimado de dichas rutas de la tabla de enrutamiento IP. Si hay varias rutas para cada destino de la tabla de enrutamiento IP, se utiliza la ruta con la métrica más baja. El valor predeterminado es 1. Sólo para Windows 2000.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint IPConnectionMetric
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPConnectionMetric") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("IPConnectionMetric"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIPEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad IPEnabled determina si IP está enlazado y habilitado para este adaptador de red.")]
		public bool IPEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("IPEnabled"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsIPFilterSecurityEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPFilterSecurityEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad IPFilterSecurityEnabled indica si la seguridad de puertos IP está habilitada globalmente en todos los adaptadores de red enlazados a IP. Esta propiedad se utiliza junto con las propiedades IPSecPermitTCPPorts, IPSecPermitUDPPorts y IPSecPermitIPProtocols. El valor TRUE indica que la seguridad de puertos IP está habilitada y que los valores de seguridad asociados a adaptadores individuales están vigentes. El valor FALSE indica que la seguridad de filtro IP está deshabilitada en todos los adaptadores de red y permite que el tráfico de todos los puertos y protocolos pase sin filtrar.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool IPFilterSecurityEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPFilterSecurityEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("IPFilterSecurityEnabled"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIPPortSecurityEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPPortSecurityEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad IPPortSecurityEnabled indica si la seguridad del puerto IP está habilitada globalmente por todos los adaptadores de red enlazados a IP. Esta propiedad quedó obsoleta en favor de IPFilterSecurityEnabled en su lugar.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool IPPortSecurityEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPPortSecurityEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("IPPortSecurityEnabled"));
			}
		}

		[Description("La propiedad IPSecPermitIPProtocols enumera los protocolos cuya ejecución a través de IP está permitida. La lista de protocolos se define con el método EnableIPSec. Esta lista estará vacía o incluirá valores numéricos. Un valor numérico cero indica que se concede permiso de acceso para todos los protocolos. Una cadena vacía indica que no se permite la ejecución de ningún protocolo cuando IPFilterSecurityEnabled es TRUE.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string[] IPSecPermitIPProtocols => (string[])managementBaseObject_1.get_Item("IPSecPermitIPProtocols");

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad IPSecPermitTCPPorts enumera los puertos a los que se va a conceder permiso de acceso para TCP. La lista de protocolos se define con el método EnableIPSec. Esta lista estará vacía o incluirá valores numéricos. Un valor numérico cero indica que se concede permiso de acceso para todos los puertos. Una cadena vacía indica que no se concede permiso de acceso a ningún puerto cuando IPFilterSecurityEnabled es TRUE.")]
		public string[] IPSecPermitTCPPorts => (string[])managementBaseObject_1.get_Item("IPSecPermitTCPPorts");

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad IPSecPermitTCPPorts enumera los puertos a los que se va a conceder permiso de acceso para Protocolo de datagrama de usuario (UDP). La lista de protocolos se define con el método EnableIPSec. Esta lista estará vacía o incluirá valores numéricos. Un valor numérico cero indica que se concede permiso de acceso para todos los puertos. Una cadena vacía indica que no se concede permiso de acceso a ningún puerto cuando IPFilterSecurityEnabled es TRUE.")]
		public string[] IPSecPermitUDPPorts => (string[])managementBaseObject_1.get_Item("IPSecPermitUDPPorts");

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad IPSubnet contiene una lista con todas las máscaras de subred asociadas al adaptador de red actual.\nEjemplo: 255.255.0")]
		public string[] IPSubnet => (string[])managementBaseObject_1.get_Item("IPSubnet");

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsIPUseZeroBroadcastNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPUseZeroBroadcast") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedadIPUseZeroBroadcast indica si se utilizan las difusiones de ceros de IP. Si este parámetro tiene el valor TRUE, IP utilizará las difusiones de ceros (0.0.0.0), y el sistema utilizará las difusiones de unos (255.255.255.255). Los sistemas de equipos normalmente utilizan difusiones de unos, pero los que se derivan de las implementaciones BSD utilizan las difusiones de ceros. Los sistemas que no utilizan las mismas difusiones no interoperarán en la misma red. Valor predeterminado: FALSE.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool IPUseZeroBroadcast
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPUseZeroBroadcast") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("IPUseZeroBroadcast"));
			}
		}

		[Description("La propiedad IPXAddress indica la dirección (IPX) del adaptador de red. La dirección IPX identifica un sistema en una red que utiliza protocolo IPX.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string IPXAddress => Conversions.ToString(managementBaseObject_1.get_Item("IPXAddress"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIPXEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPXEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad IPXEnabled determina si Internetwork Packet Exchange (IPX) está enlazado y habilitado para este adaptador.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool IPXEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPXEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("IPXEnabled"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad IPXFrameType representa una matriz de identificadores de tipos de trama con valores enteros. Los valores de esta matriz corresponden a los elementos de IPXNetworkNumber.")]
		public IPXFrameTypeValues[] IPXFrameType
		{
			get
			{
				Array array = (Array)managementBaseObject_1.get_Item("IPXFrameType");
				IPXFrameTypeValues[] array2 = new IPXFrameTypeValues[checked(array.Length - 1 + 1)];
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					array2[num] = (IPXFrameTypeValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(array.GetValue(num)));
				}
				return array2;
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsIPXMediaTypeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPXMediaType") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad IPXMediaType representa un identificador de tipo de media IPX.")]
		public IPXMediaTypeValues IPXMediaType
		{
			get
			{
				if (managementBaseObject_1.get_Item("IPXMediaType") == null)
				{
					return (IPXMediaTypeValues)Convert.ToInt32(0);
				}
				return (IPXMediaTypeValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("IPXMediaType")));
			}
		}

		[Description("La propiedad IPXNetworkNumber representa una matriz de caracteres que identifica únicamente una combinación del adaptador de trama/red en el sistema del equipo. NetWare Link (NWLink), transporte compatible con IPX/SPX en Windows 2000 y Windows NT 4.0 y posteriores usan dos tipos de números de red distintamente diferentes. A veces se hace referencia a este número como el número de red externo. Debe ser único para cada segmento de red. El orden en esta lista de cadenas se corresponderá elemento-para-elemento con los elementos en la propiedad IPXFrameType.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string[] IPXNetworkNumber => (string[])managementBaseObject_1.get_Item("IPXNetworkNumber");

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad IPXVirtualNetNumber identifica de forma única el sistema del equipo en la red. Se representa como un dígito hexadecimal de ocho caracteres. Windows NT/2000 utiliza el número de red virtual (también conocido como un número de red interno) para el enrutamiento interno.")]
		public string IPXVirtualNetNumber => Conversions.ToString(managementBaseObject_1.get_Item("IPXVirtualNetNumber"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeepAliveIntervalNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeepAliveInterval") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad KeepAliveInterval determina el intervalo de separación de retransmisiones de mantenimiento de conexión (Keep Alive) hasta que se reciba una respuesta. Una vez recibida una respuesta, el retardo hasta la siguiente transmisión de mantenimiento de conexión está controlado de nuevo por el valor de Keep Alive Transmission. La conexión se anulará después de intentar el número de retransmisiones especificado en TcpMaxDataRetransmissions y no se haya obtenido respuesta. Valor predeterminado: 1000, Intervalo válido: 1 - 0xFFFFFFFF.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeepAliveInterval
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeepAliveInterval") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeepAliveInterval"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsKeepAliveTimeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeepAliveTime") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad KeepAliveTime determina la frecuencia con que TCP intenta comprobar que una conexión inactiva sigue intacta mediante el envío de un paquete de mantenimiento de conexión (Keep Alive). Si el sistema remoto sigue siendo accesible y está en funcionamiento, confirmará la transmisión de mantenimiento de conexión. De forma predeterminada, este tipo de paquetes no se envían. Una aplicación puede habilitar esta característica en una conexión. Valor predeterminado: 7.200.000 (dos horas)")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint KeepAliveTime
		{
			get
			{
				if (managementBaseObject_1.get_Item("KeepAliveTime") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("KeepAliveTime"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad MACAddress indica la dirección de Media Access Control (MAC) para el adaptador de red. El fabricante asigna una dirección MAC para identificar de forma única al adaptador de red.\nEjemplo: 00:80:C7:8F:6C:96")]
		public string MACAddress => Conversions.ToString(managementBaseObject_1.get_Item("MACAddress"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsMTUNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("MTU") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad MTU invalida la unidad máxima de transmisión (MTU) predeterminada de una interfaz de red. La unidad MTU es el tamaño máximo del paquete (incluido el encabezado de transporte) que el transporte transmitirá por la red subyacente. El datagrama IP puede abarcar varios paquetes. El intervalo de este valor abarca el tamaño mínimo de paquete (68) hasta la MTU compatible con la red subyacente.")]
		public uint MTU
		{
			get
			{
				if (managementBaseObject_1.get_Item("MTU") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("MTU"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsNumForwardPacketsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("NumForwardPackets") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad NumForwardPackets determina el número de encabezados de paquetes IP asignados para la cola de paquetes del enrutador. Cuando todos los encabezados están en uso, el enrutador comienza a descartar aleatoriamente paquetes de la cola. Este valor debe ser al menos tan grande como el valor de ForwardBufferMemory dividido entre el tamaño máximo de datos IP de las redes conectadas al enrutador. No debe ser mayor que el valor de ForwardBufferMemory dividido entre 256, ya que se utilizan como mínimo 256 bytes de memoria del búfer de reenvío para cada paquete. El número óptimo de paquetes de reenvío de un tamaño de ForwardBufferMemory especificado depende del tipo de tráfico existente en la red y se encontrará entre estos dos valores. Este parámetro se omite y no se asignan encabezados si el enrutador no está habilitado. Valor predeterminado: 50, Intervalo válido: 1 - 0xFFFFFFFF")]
		public uint NumForwardPackets
		{
			get
			{
				if (managementBaseObject_1.get_Item("NumForwardPackets") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("NumForwardPackets"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsPMTUBHDetectEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("PMTUBHDetectEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad PMTUBHDetectEnabled indica si se detectan los enrutadores \"agujero negro\". Si se asigna el valor TRUE, TCP intentará detectar los enrutadores \"agujero negro\" durante la detección de la unidad MTU de la ruta de acceso. Un enrutador \"agujero negro\" no devuelve mensajes de destino de ICMP inaccesible cuando necesita fragmentar un datagrama IP con el bit No fragmentar definido. TCP depende de la recepción de estos mensajes para detectar la unidad MTU de la ruta de acceso. Con esta característica habilitada, TCP intentará enviar segmentos sin el bit No fragmentar definido si no se confirman varias retransmisiones de un segmento. Si se confirma el segmento como resultado, el MSS se reducirá y se definirá el bit No fragmentar para futuros paquetes de la conexión. Al habilitar la detección de agujeros negros aumenta el número máximo de retransmisiones realizadas para un segmento dado. Valor predeterminado: FALSE.")]
		public bool PMTUBHDetectEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("PMTUBHDetectEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("PMTUBHDetectEnabled"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsPMTUDiscoveryEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("PMTUDiscoveryEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("La propiedad PMTUDiscoveryEnabled indica si se detecta la ruta máxima de transmisión (MTU). Si se asigna el valor TRUE, TCP intentará detectar la unidad MTU (o el mayor tamaño de paquete) en la ruta de acceso a un host remoto. Mediante la detección de la unidad MTU de la ruta de acceso y la limitación de los segmentos TCP a este tamaño, TCP puede eliminar la fragmentación en los enrutadores que se encuentran en la ruta de acceso que conecta las redes con diferentes unidades MTU. La fragmentación repercute negativamente en el rendimiento de TCP y la congestión de la red. Si se asigna el valor FALSE, se utilizará una unidad MTU de 576 bytes para todas las conexiones que no sean a equipos que se encuentren en la subred local. Valor predeterminado: TRUE.")]
		public bool PMTUDiscoveryEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("PMTUDiscoveryEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("PMTUDiscoveryEnabled"));
			}
		}

		[Description("La propiedad ServiceName indica el nombre de servicio del adaptador de red. Este nombre suele ser más corto que el nombre completo del producto. \nEjemplo: Elnkii.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ServiceName => Conversions.ToString(managementBaseObject_1.get_Item("ServiceName"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("El identificador por el que se conoce el objeto CIM_Setting.")]
		[Browsable(true)]
		public string SettingID => Conversions.ToString(managementBaseObject_1.get_Item("SettingID"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTcpipNetbiosOptionsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpipNetbiosOptions") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad TcpipNetbiosOptions especifica un mapa de bits de los valores posibles relacionados con NetBIOS sobre TCP/IP. Sólo para Windows 2000.")]
		public TcpipNetbiosOptionsValues TcpipNetbiosOptions
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpipNetbiosOptions") == null)
				{
					return (TcpipNetbiosOptionsValues)Convert.ToInt32(3);
				}
				return (TcpipNetbiosOptionsValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("TcpipNetbiosOptions")));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTcpMaxConnectRetransmissionsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpMaxConnectRetransmissions") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad TcpMaxConnectRetransmissions indica el número de veces que TCP intentará retransmitir una Solicitud de conexión antes de terminar la conexión. El período de espera de retransmisión es de 3 segundos. El período de espera de retransmisión se duplica para cada intento. Valor predeterminado: 3, Intervalo rápido: 0 - 0xFFFFFFFF.")]
		public uint TcpMaxConnectRetransmissions
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpMaxConnectRetransmissions") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TcpMaxConnectRetransmissions"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTcpMaxDataRetransmissionsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpMaxDataRetransmissions") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad TcpMaxDataRetransmissions indica el número de veces que TCP retransmitirá un segmento de datos individual (segmento sin conexión) antes de terminar la conexión. El período de espera de la retransmisión se duplicará con cada retransmisión sucesiva en una conexión. Valor predeterminado: 5, Intervalo válido: 0 - 0xFFFFFFFF.")]
		public uint TcpMaxDataRetransmissions
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpMaxDataRetransmissions") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TcpMaxDataRetransmissions"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTcpNumConnectionsNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpNumConnections") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad TcpNumConnections indica el número máximo de conexiones que TCP puede abrir a la vez. Default: 0xFFFFFE, Intervalo válido: 0 - 0xFFFFFE.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint TcpNumConnections
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpNumConnections") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("TcpNumConnections"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsTcpUseRFC1122UrgentPointerNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpUseRFC1122UrgentPointer") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad TcpUseRFC1122UrgentPointer determina si TCP utiliza la especificación RFC 1122 para datos urgentes o el modo utilizado por sistemas derivados de BSD. Los dos mecanismos interpretan de forma distinta el puntero urgente en el encabezado TCP y la longitud de los datos urgentes. No son interoperables. De forma predeterminada, Windows 2000 y Windows NT 3.51 utiliza el modo BSD. Si está el valor TRUE, se envían los datos urgentes en modo RFC 1122. Valor predeterminado: FALSE. ")]
		public bool TcpUseRFC1122UrgentPointer
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpUseRFC1122UrgentPointer") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("TcpUseRFC1122UrgentPointer"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsTcpWindowSizeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpWindowSize") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad TcpWindowSize contiene el tamaño máximo de la ventana de recepción TCP que el sistema ofrece. La ventana de recepción especifica el número de bytes que un remitente puede transmitir sin recibir confirmación. En general, las ventanas que pueden recepción de tamaños mayores mejoran el rendimiento cuando hay retrasos y  sobre redes de banda ancha. Para mayor eficacia, la ventana de recepción debe ser un múltiplo para del tamaño máximo del segmento TCP (MSS). Valor predeterminado: Cuatro veces el tamaño máximo de los datos TCP o un múltiplo par del tamaño de datos TCP redondeado hacia el múltiplo más cercano a 8760. Intervalo válido: 0 - 65535.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public ushort TcpWindowSize
		{
			get
			{
				if (managementBaseObject_1.get_Item("TcpWindowSize") == null)
				{
					return Convert.ToUInt16(0);
				}
				return Conversions.ToUShort(managementBaseObject_1.get_Item("TcpWindowSize"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsWINSEnableLMHostsLookupNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("WINSEnableLMHostsLookup") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad WINSEnableLMHostsLookup indica si se utilizan archivos de búsqueda locales. Los archivos de búsqueda contienen las asignaciones de direcciones IP a nombres de host. Si existen en el sistema local, se encuentran en %SystemRoot%\\system32\\drivers\\etc.")]
		public bool WINSEnableLMHostsLookup
		{
			get
			{
				if (managementBaseObject_1.get_Item("WINSEnableLMHostsLookup") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("WINSEnableLMHostsLookup"));
			}
		}

		[Browsable(true)]
		[Description("La propiedad WINSHostLookupFile contiene una ruta de acceso a un archivo de búsqueda de WINS en el sistema local. Este archivo contiene las asignaciones de direcciones IP a nombres de host. Si se encuentra el archivo especificado en esta propiedad, se copiará a la carpeta %SystemRoot%\\system32\\drivers\\etc del sistema local. Válido únicamente cuando la propiedad WINSEnableLMHostsLookup es TRUE.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string WINSHostLookupFile => Conversions.ToString(managementBaseObject_1.get_Item("WINSHostLookupFile"));

		[Browsable(true)]
		[Description("La propiedad WINSPrimaryServer indica la dirección IP del servidor WINS principal.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string WINSPrimaryServer => Conversions.ToString(managementBaseObject_1.get_Item("WINSPrimaryServer"));

		[Description("La propiedad ScopeID permite aislar un grupo de equipos que sólo se comunican entre sí. El id. de ámbito es un valor de cadena de caracteres anexada al nombre NetBIOS y que se usa para todas las comunicaciones NetBIOS a través de TCP/IP desde ese equipo. Otros equipos configurados con el mismo id. de ámbito pueden comunicarse con este equipo, mientras que los clientes TCP/IP con un id. de ámbito diferente descartan los paquetes de cualquier otro id. de ámbito. Válido únicamente cuando el método EnableWINS se ejecuta correctamente.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string WINSScopeID => Conversions.ToString(managementBaseObject_1.get_Item("WINSScopeID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad WINSSecondaryServer indica la dirección IP del servidor WINS secundario.")]
		public string WINSSecondaryServer => Conversions.ToString(managementBaseObject_1.get_Item("WINSSecondaryServer"));

		public NetworkAdapterConfiguration()
			: this()
		{
			method_38(null, null, null);
		}

		public NetworkAdapterConfiguration(uint keyIndex)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_38(null, new ManagementPath(smethod_0(keyIndex)), null);
		}

		public NetworkAdapterConfiguration(ManagementScope mgmtScope, uint keyIndex)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_38(mgmtScope, new ManagementPath(smethod_0(keyIndex)), null);
		}

		public NetworkAdapterConfiguration(ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_38(null, path, getOptions);
		}

		public NetworkAdapterConfiguration(ManagementScope mgmtScope, ManagementPath path)
			: this()
		{
			method_38(mgmtScope, path, null);
		}

		public NetworkAdapterConfiguration(ManagementPath path)
			: this()
		{
			method_38(null, path, null);
		}

		public NetworkAdapterConfiguration(ManagementScope mgmtScope, ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_38(mgmtScope, path, getOptions);
		}

		public NetworkAdapterConfiguration(ManagementObject theObject)
			: this()
		{
			method_37();
			if (!method_1((ManagementBaseObject)(object)theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public NetworkAdapterConfiguration(ManagementBaseObject theObject)
			: this()
		{
			method_37();
			if (!method_1(theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementBaseObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties(theObject);
			managementBaseObject_1 = managementBaseObject_0;
			bool_1 = true;
		}

		private bool method_0(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			if (managementPath_0 != null && string.Compare(managementPath_0.get_ClassName(), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			return method_1((ManagementBaseObject)new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0));
		}

		private bool method_1(ManagementBaseObject managementBaseObject_2)
		{
			if (managementBaseObject_2 != null && string.Compare(Conversions.ToString(managementBaseObject_2.get_Item("__CLASS")), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			Array array = (Array)managementBaseObject_2.get_Item("__DERIVATION");
			if (array != null)
			{
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					if (string.Compare(Conversions.ToString(array.GetValue(num)), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		private bool method_2()
		{
			if (!IsArpAlwaysSourceRouteNull)
			{
				return true;
			}
			return false;
		}

		private bool method_3()
		{
			if (!IsArpUseEtherSNAPNull)
			{
				return true;
			}
			return false;
		}

		private bool method_4()
		{
			if (!IsDeadGWDetectEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_5()
		{
			if (!IsDefaultTOSNull)
			{
				return true;
			}
			return false;
		}

		private bool method_6()
		{
			if (!IsDefaultTTLNull)
			{
				return true;
			}
			return false;
		}

		private bool method_7()
		{
			if (!IsDHCPEnabledNull)
			{
				return true;
			}
			return false;
		}

		public static DateTime ToDateTime(string dmtfDate)
		{
			DateTime minValue = DateTime.MinValue;
			int num = minValue.Year;
			int num2 = minValue.Month;
			int num3 = minValue.Day;
			int num4 = minValue.Hour;
			int num5 = minValue.Minute;
			int num6 = minValue.Second;
			long num7 = 0L;
			DateTime minValue2 = DateTime.MinValue;
			string empty = string.Empty;
			if (dmtfDate == null)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length == 0)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length != 25)
			{
				throw new ArgumentOutOfRangeException();
			}
			checked
			{
				try
				{
					empty = dmtfDate.Substring(0, 4);
					if (Operators.CompareString("****", empty, false) != 0)
					{
						num = int.Parse(empty);
					}
					empty = dmtfDate.Substring(4, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num2 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(6, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num3 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(8, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num4 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(10, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num5 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(12, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num6 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(15, 6);
					if (Operators.CompareString("******", empty, false) != 0)
					{
						num7 = long.Parse(empty) * 10L;
					}
					if (num < 0 || num2 < 0 || num3 < 0 || num4 < 0 || num5 < 0 || num5 < 0 || num6 < 0 || num7 < 0L)
					{
						throw new ArgumentOutOfRangeException();
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					throw new ArgumentOutOfRangeException(null, ex2.Message);
				}
				minValue2 = new DateTime(num, num2, num3, num4, num5, num6, 0).AddTicks(num7);
				TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(minValue2);
				int num8 = 0;
				int num9 = 0;
				long num10 = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				empty = dmtfDate.Substring(22, 3);
				if (Operators.CompareString(empty, "******", false) != 0)
				{
					empty = dmtfDate.Substring(21, 4);
					try
					{
						num8 = int.Parse(empty);
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						throw new ArgumentOutOfRangeException(null, ex4.Message);
					}
					num9 = (int)(num10 - num8);
					minValue2 = minValue2.AddMinutes(num9);
				}
				return minValue2;
			}
		}

		public static string ToDmtfDateTime(DateTime date)
		{
			string empty = string.Empty;
			TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(date);
			checked
			{
				long value = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				if (Math.Abs(value) > 999L)
				{
					date = date.ToUniversalTime();
					empty = "+000";
				}
				else if (utcOffset.Ticks >= 0L)
				{
					empty = "+" + ((long)Math.Round((double)utcOffset.Ticks / 600000000.0)).ToString().PadLeft(3, '0');
				}
				else
				{
					string text = value.ToString();
					empty = "-" + text.Substring(1, text.Length - 1).PadLeft(3, '0');
				}
				string str = string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(date.Year.ToString().PadLeft(4, '0') + date.Month.ToString().PadLeft(2, '0'), date.Day.ToString().PadLeft(2, '0')), date.Hour.ToString().PadLeft(2, '0')), date.Minute.ToString().PadLeft(2, '0')), date.Second.ToString().PadLeft(2, '0')), ".");
				DateTime dateTime = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
				string text2 = ((long)Math.Round((double)((date.Ticks - dateTime.Ticks) * 1000L) / 10000.0)).ToString();
				if (text2.Length > 6)
				{
					text2 = text2.Substring(0, 6);
				}
				return string.Concat(str + text2.PadLeft(6, '0'), empty);
			}
		}

		private bool method_8()
		{
			if (!IsDHCPLeaseExpiresNull)
			{
				return true;
			}
			return false;
		}

		private bool method_9()
		{
			if (!IsDHCPLeaseObtainedNull)
			{
				return true;
			}
			return false;
		}

		private bool method_10()
		{
			if (!IsDNSEnabledForWINSResolutionNull)
			{
				return true;
			}
			return false;
		}

		private bool method_11()
		{
			if (!IsDomainDNSRegistrationEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_12()
		{
			if (!IsForwardBufferMemoryNull)
			{
				return true;
			}
			return false;
		}

		private bool method_13()
		{
			if (!IsFullDNSRegistrationEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_14()
		{
			if (!IsIGMPLevelNull)
			{
				return true;
			}
			return false;
		}

		private bool method_15()
		{
			if (!IsIndexNull)
			{
				return true;
			}
			return false;
		}

		private bool method_16()
		{
			if (!IsInterfaceIndexNull)
			{
				return true;
			}
			return false;
		}

		private bool method_17()
		{
			if (!IsIPConnectionMetricNull)
			{
				return true;
			}
			return false;
		}

		private bool method_18()
		{
			if (!IsIPEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_19()
		{
			if (!IsIPFilterSecurityEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_20()
		{
			if (!IsIPPortSecurityEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_21()
		{
			if (!IsIPUseZeroBroadcastNull)
			{
				return true;
			}
			return false;
		}

		private bool method_22()
		{
			if (!IsIPXEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_23()
		{
			if (!IsIPXMediaTypeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_24()
		{
			if (!IsKeepAliveIntervalNull)
			{
				return true;
			}
			return false;
		}

		private bool method_25()
		{
			if (!IsKeepAliveTimeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_26()
		{
			if (!IsMTUNull)
			{
				return true;
			}
			return false;
		}

		private bool method_27()
		{
			if (!IsNumForwardPacketsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_28()
		{
			if (!IsPMTUBHDetectEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_29()
		{
			if (!IsPMTUDiscoveryEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_30()
		{
			if (!IsTcpipNetbiosOptionsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_31()
		{
			if (!IsTcpMaxConnectRetransmissionsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_32()
		{
			if (!IsTcpMaxDataRetransmissionsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_33()
		{
			if (!IsTcpNumConnectionsNull)
			{
				return true;
			}
			return false;
		}

		private bool method_34()
		{
			if (!IsTcpUseRFC1122UrgentPointerNull)
			{
				return true;
			}
			return false;
		}

		private bool method_35()
		{
			if (!IsTcpWindowSizeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_36()
		{
			if (!IsWINSEnableLMHostsLookupNull)
			{
				return true;
			}
			return false;
		}

		[Browsable(true)]
		public void CommitObject()
		{
			if (!bool_1)
			{
				managementObject_0.Put();
			}
		}

		[Browsable(true)]
		public void CommitObject(PutOptions putOptions)
		{
			if (!bool_1)
			{
				managementObject_0.Put(putOptions);
			}
		}

		private void method_37()
		{
			bool_0 = true;
			bool_1 = false;
		}

		private static string smethod_0(uint uint_0)
		{
			return string.Concat("root\\CimV2:Win32_NetworkAdapterConfiguration", ".Index=" + uint_0);
		}

		private void method_38(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			method_37();
			if (managementPath_0 != null && !method_0(managementScope_1, managementPath_0, objectGetOptions_0))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0);
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public static NetworkAdapterConfigurationCollection GetInstances()
		{
			return GetInstances(null, null, null);
		}

		public static NetworkAdapterConfigurationCollection GetInstances(string condition)
		{
			return GetInstances(null, condition, null);
		}

		public static NetworkAdapterConfigurationCollection GetInstances(string[] selectedProperties)
		{
			return GetInstances(null, null, selectedProperties);
		}

		public static NetworkAdapterConfigurationCollection GetInstances(string condition, string[] selectedProperties)
		{
			return GetInstances(null, condition, selectedProperties);
		}

		public static NetworkAdapterConfigurationCollection GetInstances(ManagementScope mgmtScope, EnumerationOptions enumOptions)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementPath val = new ManagementPath();
			val.set_ClassName("Win32_NetworkAdapterConfiguration");
			val.set_NamespacePath("root\\CimV2");
			ManagementClass val2 = new ManagementClass(mgmtScope, val, (ObjectGetOptions)null);
			if (enumOptions == null)
			{
				enumOptions = new EnumerationOptions();
				enumOptions.set_EnsureLocatable(true);
			}
			return new NetworkAdapterConfigurationCollection(val2.GetInstances(enumOptions));
		}

		public static NetworkAdapterConfigurationCollection GetInstances(ManagementScope mgmtScope, string condition)
		{
			return GetInstances(mgmtScope, condition, null);
		}

		public static NetworkAdapterConfigurationCollection GetInstances(ManagementScope mgmtScope, string[] selectedProperties)
		{
			return GetInstances(mgmtScope, null, selectedProperties);
		}

		public static NetworkAdapterConfigurationCollection GetInstances(ManagementScope mgmtScope, string condition, string[] selectedProperties)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementObjectSearcher val = new ManagementObjectSearcher(mgmtScope, (ObjectQuery)new SelectQuery("Win32_NetworkAdapterConfiguration", condition, selectedProperties));
			EnumerationOptions val2 = new EnumerationOptions();
			val2.set_EnsureLocatable(true);
			val.set_Options(val2);
			return new NetworkAdapterConfigurationCollection(val.Get());
		}

		[Browsable(true)]
		public static NetworkAdapterConfiguration CreateInstance()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Expected O, but got Unknown
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Expected O, but got Unknown
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Expected O, but got Unknown
			ManagementScope val = null;
			if (managementScope_0 == null)
			{
				val = new ManagementScope();
				val.get_Path().set_NamespacePath(string_0);
			}
			else
			{
				val = managementScope_0;
			}
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(val, val2, (ObjectGetOptions)null);
			return new NetworkAdapterConfiguration(val3.CreateInstance());
		}

		[Browsable(true)]
		public void Delete()
		{
			managementObject_0.Delete();
		}

		public uint DisableIPSec()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("DisableIPSec", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint EnableDHCP()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("EnableDHCP", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint EnableDNS(string DNSDomain, string[] DNSDomainSuffixSearchOrder, string DNSHostName, string[] DNSServerSearchOrder)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("EnableDNS");
			val.set_Item("DNSDomain", (object)DNSDomain);
			val.set_Item("DNSDomainSuffixSearchOrder", (object)DNSDomainSuffixSearchOrder);
			val.set_Item("DNSHostName", (object)DNSHostName);
			val.set_Item("DNSServerSearchOrder", (object)DNSServerSearchOrder);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("EnableDNS", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint EnableIPFilterSec(bool IPFilterSecurityEnabled)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("EnableIPFilterSec");
			val.set_Item("IPFilterSecurityEnabled", (object)IPFilterSecurityEnabled);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("EnableIPFilterSec", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint EnableIPSec(string[] IPSecPermitIPProtocols, string[] IPSecPermitTCPPorts, string[] IPSecPermitUDPPorts)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("EnableIPSec");
				val.set_Item("IPSecPermitIPProtocols", (object)IPSecPermitIPProtocols);
				val.set_Item("IPSecPermitTCPPorts", (object)IPSecPermitTCPPorts);
				val.set_Item("IPSecPermitUDPPorts", (object)IPSecPermitUDPPorts);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("EnableIPSec", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint EnableStatic(string[] IPAddress, string[] SubnetMask)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("EnableStatic");
				val.set_Item("IPAddress", (object)IPAddress);
				val.set_Item("SubnetMask", (object)SubnetMask);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("EnableStatic", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint EnableWINS(bool DNSEnabledForWINSResolution, bool WINSEnableLMHostsLookup, string WINSHostLookupFile, string WINSScopeID)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("EnableWINS");
			val.set_Item("DNSEnabledForWINSResolution", (object)DNSEnabledForWINSResolution);
			val.set_Item("WINSEnableLMHostsLookup", (object)WINSEnableLMHostsLookup);
			val.set_Item("WINSHostLookupFile", (object)WINSHostLookupFile);
			val.set_Item("WINSScopeID", (object)WINSScopeID);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("EnableWINS", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint ReleaseDHCPLease()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("ReleaseDHCPLease", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint ReleaseDHCPLeaseAll()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null)).InvokeMethod("ReleaseDHCPLeaseAll", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint RenewDHCPLease()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("RenewDHCPLease", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint RenewDHCPLeaseAll()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null)).InvokeMethod("RenewDHCPLeaseAll", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetArpAlwaysSourceRoute(bool ArpAlwaysSourceRoute)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetArpAlwaysSourceRoute");
			val.set_Item("ArpAlwaysSourceRoute", (object)ArpAlwaysSourceRoute);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetArpAlwaysSourceRoute", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetArpUseEtherSNAP(bool ArpUseEtherSNAP)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetArpUseEtherSNAP");
			val.set_Item("ArpUseEtherSNAP", (object)ArpUseEtherSNAP);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetArpUseEtherSNAP", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetDatabasePath(string DatabasePath)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetDatabasePath");
			val.set_Item("DatabasePath", (object)DatabasePath);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetDatabasePath", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetDeadGWDetect(bool DeadGWDetectEnabled)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetDeadGWDetect");
			val.set_Item("DeadGWDetectEnabled", (object)DeadGWDetectEnabled);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetDeadGWDetect", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetDefaultTOS(byte DefaultTOS)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetDefaultTOS");
			val.set_Item("DefaultTOS", (object)DefaultTOS);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetDefaultTOS", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetDefaultTTL(byte DefaultTTL)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetDefaultTTL");
			val.set_Item("DefaultTTL", (object)DefaultTTL);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetDefaultTTL", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetDNSDomain(string DNSDomain)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetDNSDomain");
				val.set_Item("DNSDomain", (object)DNSDomain);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetDNSDomain", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetDNSServerSearchOrder(string[] DNSServerSearchOrder)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetDNSServerSearchOrder");
				val.set_Item("DNSServerSearchOrder", (object)DNSServerSearchOrder);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetDNSServerSearchOrder", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint SetDNSSuffixSearchOrder(string[] DNSDomainSuffixSearchOrder)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetDNSSuffixSearchOrder");
			val.set_Item("DNSDomainSuffixSearchOrder", (object)DNSDomainSuffixSearchOrder);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetDNSSuffixSearchOrder", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetDynamicDNSRegistration(bool DomainDNSRegistrationEnabled, bool FullDNSRegistrationEnabled)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetDynamicDNSRegistration");
				val.set_Item("DomainDNSRegistrationEnabled", (object)DomainDNSRegistrationEnabled);
				val.set_Item("FullDNSRegistrationEnabled", (object)FullDNSRegistrationEnabled);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetDynamicDNSRegistration", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint SetForwardBufferMemory(uint ForwardBufferMemory)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetForwardBufferMemory");
			val.set_Item("ForwardBufferMemory", (object)ForwardBufferMemory);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetForwardBufferMemory", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetGateways(string[] DefaultIPGateway, ushort[] GatewayCostMetric)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetGateways");
				val.set_Item("DefaultIPGateway", (object)DefaultIPGateway);
				val.set_Item("GatewayCostMetric", (object)GatewayCostMetric);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetGateways", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint SetIGMPLevel(byte IGMPLevel)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetIGMPLevel");
			val.set_Item("IGMPLevel", (object)IGMPLevel);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetIGMPLevel", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetIPConnectionMetric(uint IPConnectionMetric)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetIPConnectionMetric");
				val.set_Item("IPConnectionMetric", (object)IPConnectionMetric);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetIPConnectionMetric", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint SetIPUseZeroBroadcast(bool IPUseZeroBroadcast)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetIPUseZeroBroadcast");
			val.set_Item("IPUseZeroBroadcast", (object)IPUseZeroBroadcast);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetIPUseZeroBroadcast", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetIPXFrameTypeNetworkPairs(uint[] IPXFrameType, string[] IPXNetworkNumber)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetIPXFrameTypeNetworkPairs");
				val.set_Item("IPXFrameType", (object)IPXFrameType);
				val.set_Item("IPXNetworkNumber", (object)IPXNetworkNumber);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetIPXFrameTypeNetworkPairs", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint SetIPXVirtualNetworkNumber(string IPXVirtualNetNumber)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetIPXVirtualNetworkNumber");
			val.set_Item("IPXVirtualNetNumber", (object)IPXVirtualNetNumber);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetIPXVirtualNetworkNumber", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetKeepAliveInterval(uint KeepAliveInterval)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetKeepAliveInterval");
			val.set_Item("KeepAliveInterval", (object)KeepAliveInterval);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetKeepAliveInterval", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetKeepAliveTime(uint KeepAliveTime)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetKeepAliveTime");
			val.set_Item("KeepAliveTime", (object)KeepAliveTime);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetKeepAliveTime", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetMTU(uint MTU)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetMTU");
			val.set_Item("MTU", (object)MTU);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetMTU", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetNumForwardPackets(uint NumForwardPackets)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetNumForwardPackets");
			val.set_Item("NumForwardPackets", (object)NumForwardPackets);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetNumForwardPackets", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetPMTUBHDetect(bool PMTUBHDetectEnabled)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetPMTUBHDetect");
			val.set_Item("PMTUBHDetectEnabled", (object)PMTUBHDetectEnabled);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetPMTUBHDetect", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetPMTUDiscovery(bool PMTUDiscoveryEnabled)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetPMTUDiscovery");
			val.set_Item("PMTUDiscoveryEnabled", (object)PMTUDiscoveryEnabled);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetPMTUDiscovery", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetTcpipNetbios(uint TcpipNetbiosOptions)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetTcpipNetbios");
				val.set_Item("TcpipNetbiosOptions", (object)TcpipNetbiosOptions);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetTcpipNetbios", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public static uint SetTcpMaxConnectRetransmissions(uint TcpMaxConnectRetransmissions)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetTcpMaxConnectRetransmissions");
			val.set_Item("TcpMaxConnectRetransmissions", (object)TcpMaxConnectRetransmissions);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetTcpMaxConnectRetransmissions", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetTcpMaxDataRetransmissions(uint TcpMaxDataRetransmissions)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetTcpMaxDataRetransmissions");
			val.set_Item("TcpMaxDataRetransmissions", (object)TcpMaxDataRetransmissions);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetTcpMaxDataRetransmissions", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetTcpNumConnections(uint TcpNumConnections)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetTcpNumConnections");
			val.set_Item("TcpNumConnections", (object)TcpNumConnections);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetTcpNumConnections", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetTcpUseRFC1122UrgentPointer(bool TcpUseRFC1122UrgentPointer)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetTcpUseRFC1122UrgentPointer");
			val.set_Item("TcpUseRFC1122UrgentPointer", (object)TcpUseRFC1122UrgentPointer);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetTcpUseRFC1122UrgentPointer", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public static uint SetTcpWindowSize(ushort TcpWindowSize)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Expected O, but got Unknown
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			ManagementBaseObject val = null;
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(managementScope_0, val2, (ObjectGetOptions)null);
			val = ((ManagementObject)val3).GetMethodParameters("SetTcpWindowSize");
			val.set_Item("TcpWindowSize", (object)TcpWindowSize);
			return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(((ManagementObject)val3).InvokeMethod("SetTcpWindowSize", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
				.get_Value()));
		}

		public uint SetWINSServer(string WINSPrimaryServer, string WINSSecondaryServer)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetWINSServer");
				val.set_Item("WINSPrimaryServer", (object)WINSPrimaryServer);
				val.set_Item("WINSSecondaryServer", (object)WINSSecondaryServer);
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetWINSServer", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}
	}
	public class NetworkAdapter : Component
	{
		public enum AdapterTypeIdValues
		{
			Ethernet_802_3,
			Token_Ring_802_5,
			const_2,
			const_3,
			LocalTalk,
			Ethernet_usando_el_formato_DIX_de_encabezado,
			ARCNET,
			ARCNET_878_2_,
			ATM,
			const_9,
			const_10,
			Bpc,
			CoWan,
			Val_1394,
			NULL_ENUM_VALUE
		}

		public enum AvailabilityValues
		{
			Otros = 1,
			Desconocido = 2,
			const_2 = 3,
			Advertencia = 4,
			En_prueba = 5,
			No_aplicable = 6,
			Apagado = 7,
			const_7 = 8,
			Inactivo = 9,
			Degradado = 10,
			No_instalado = 11,
			const_11 = 12,
			const_12 = 13,
			const_13 = 14,
			const_14 = 0xF,
			const_15 = 0x10,
			const_16 = 17,
			Pausado = 18,
			const_18 = 19,
			No_configurado = 20,
			Inactivo0 = 21,
			NULL_ENUM_VALUE = 0
		}

		public enum ConfigManagerErrorCodeValues
		{
			Este_dispositivo_funciona_correctamente_,
			const_1,
			Windows_no_puede_cargar_el_controlador_para_este_dispositivo_,
			const_3,
			const_4,
			El_controlador_de_este_dispositivo_necesita_un_recurso_que_Windows_no_puede_administrar_,
			const_6,
			No_se_puede_filtrar_,
			Falta_el_controlador_del_dispositivo_,
			Este_dispositivo_no_funciona_correctamente_porque_el_firmware_de_control_informa_incorrectamente_de_los_recursos_del_dispositivo_,
			No_puede_iniciar_este_dispositivo_,
			Error_de_este_dispositivo_,
			Este_dispositivo_no_encuentra_suficientes_recursos_libres_que_pueda_usar_,
			Windows_no_puede_comprobar_los_recursos_de_este_dispositivo_,
			El_dispositivo_no_puede_funcionar_correctamente_hasta_que_reinicie_su_equipo_,
			const_15,
			Windows_no_puede_identificar_todos_los_recursos_que_usa_este_dispositivo_,
			const_17,
			Reinstalar_los_controladores_de_este_dispositivo_,
			Error_al_usar_el_cargador_VxD_,
			const_20,
			const_21,
			const_22,
			const_23,
			const_24,
			Windows_sigue_configurando_este_dispositivo_,
			Windows_sigue_configurando_este_dispositivo_0,
			const_27,
			const_28,
			const_29,
			const_30,
			Este_dispositivo_no_funciona_correctamente_porque_Windows_no_puede_cargar_los_controladores_requeridos_para_este_dispositivo_,
			NULL_ENUM_VALUE
		}

		public enum PowerManagementCapabilitiesValues
		{
			Desconocido,
			No_compatible,
			Deshabilitado,
			Habilitado,
			const_4,
			const_5,
			const_6,
			Se_admite_el_encendido_por_tiempo,
			NULL_ENUM_VALUE
		}

		public enum StatusInfoValues
		{
			Otros = 1,
			Desconocido = 2,
			Habilitado = 3,
			Deshabilitado = 4,
			No_aplicable = 5,
			NULL_ENUM_VALUE = 0
		}

		public class NetworkAdapterCollection : ICollection
		{
			public class NetworkAdapterEnumerator : IEnumerator
			{
				private ManagementObjectEnumerator managementObjectEnumerator_0;

				virtual object IEnumerator.Current => new NetworkAdapter((ManagementObject)managementObjectEnumerator_0.get_Current());

				public NetworkAdapterEnumerator(ManagementObjectEnumerator objEnum)
				{
					managementObjectEnumerator_0 = objEnum;
				}

				public virtual bool MoveNext()
				{
					return managementObjectEnumerator_0.MoveNext();
				}

				public virtual void Reset()
				{
					managementObjectEnumerator_0.Reset();
				}
			}

			private ManagementObjectCollection managementObjectCollection_0;

			virtual int ICollection.Count => managementObjectCollection_0.get_Count();

			virtual bool ICollection.IsSynchronized => managementObjectCollection_0.get_IsSynchronized();

			virtual object ICollection.SyncRoot => this;

			public NetworkAdapterCollection(ManagementObjectCollection objCollection)
			{
				managementObjectCollection_0 = objCollection;
			}

			public virtual void CopyTo(Array array, int index)
			{
				//IL_0019: Unknown result type (might be due to invalid IL or missing references)
				//IL_0023: Expected O, but got Unknown
				managementObjectCollection_0.CopyTo(array, index);
				for (int i = 0; i < array.Length; i = checked(i + 1))
				{
					array.SetValue(new NetworkAdapter((ManagementObject)array.GetValue(i)), i);
				}
			}

			public virtual IEnumerator GetEnumerator()
			{
				return new NetworkAdapterEnumerator(managementObjectCollection_0.GetEnumerator());
			}
		}

		public class WMIValueTypeConverter : TypeConverter
		{
			private TypeConverter typeConverter_0;

			private Type type_0;

			public WMIValueTypeConverter(Type inBaseType)
				: this()
			{
				typeConverter_0 = TypeDescriptor.GetConverter(inBaseType);
				type_0 = inBaseType;
			}

			public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType)
			{
				return typeConverter_0.CanConvertFrom(context, srcType);
			}

			public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
			{
				return typeConverter_0.CanConvertTo(context, destinationType);
			}

			public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
			{
				return typeConverter_0.ConvertFrom(context, culture, RuntimeHelpers.GetObjectValue(value));
			}

			public override object CreateInstance(ITypeDescriptorContext context, IDictionary dictionary)
			{
				return typeConverter_0.CreateInstance(context, dictionary);
			}

			public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetCreateInstanceSupported(context);
			}

			public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributeVar)
			{
				return typeConverter_0.GetProperties(context, RuntimeHelpers.GetObjectValue(value), attributeVar);
			}

			public override bool GetPropertiesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetPropertiesSupported(context);
			}

			public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValues(context);
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesExclusive(context);
			}

			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				return typeConverter_0.GetStandardValuesSupported(context);
			}

			public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
			{
				if ((object)type_0.BaseType == typeof(Enum))
				{
					if ((object)value.GetType() == destinationType)
					{
						return value;
					}
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "NULL_ENUM_VALUE";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if ((object)type_0 == typeof(bool) && (object)type_0.BaseType == typeof(ValueType))
				{
					if (value == null && context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
					{
						return "";
					}
					return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
				}
				if (context != null && !context.get_PropertyDescriptor().ShouldSerializeValue(RuntimeHelpers.GetObjectValue(context.get_Instance())))
				{
					return "";
				}
				return typeConverter_0.ConvertTo(context, culture, RuntimeHelpers.GetObjectValue(value), destinationType);
			}
		}

		[TypeConverter(typeof(ExpandableObjectConverter))]
		public class ManagementSystemProperties
		{
			private ManagementBaseObject managementBaseObject_0;

			[Browsable(true)]
			public int GENUS => Conversions.ToInteger(managementBaseObject_0.get_Item("__GENUS"));

			[Browsable(true)]
			public string CLASS => Conversions.ToString(managementBaseObject_0.get_Item("__CLASS"));

			[Browsable(true)]
			public string SUPERCLASS => Conversions.ToString(managementBaseObject_0.get_Item("__SUPERCLASS"));

			[Browsable(true)]
			public string DYNASTY => Conversions.ToString(managementBaseObject_0.get_Item("__DYNASTY"));

			[Browsable(true)]
			public string RELPATH => Conversions.ToString(managementBaseObject_0.get_Item("__RELPATH"));

			[Browsable(true)]
			public int PROPERTY_COUNT => Conversions.ToInteger(managementBaseObject_0.get_Item("__PROPERTY_COUNT"));

			[Browsable(true)]
			public string[] DERIVATION => (string[])managementBaseObject_0.get_Item("__DERIVATION");

			[Browsable(true)]
			public string SERVER => Conversions.ToString(managementBaseObject_0.get_Item("__SERVER"));

			[Browsable(true)]
			public string NAMESPACE => Conversions.ToString(managementBaseObject_0.get_Item("__NAMESPACE"));

			[Browsable(true)]
			public string PATH => Conversions.ToString(managementBaseObject_0.get_Item("__PATH"));

			public ManagementSystemProperties(ManagementBaseObject ManagedObject)
			{
				managementBaseObject_0 = ManagedObject;
			}
		}

		private static string string_0 = "root\\CimV2";

		private static string string_1 = "Win32_NetworkAdapter";

		private static ManagementScope managementScope_0 = null;

		private ManagementSystemProperties managementSystemProperties_0;

		private ManagementObject managementObject_0;

		private bool bool_0;

		private ManagementBaseObject managementBaseObject_0;

		private ManagementBaseObject managementBaseObject_1;

		private bool bool_1;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string OriginatingNamespace => "root\\CimV2";

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public string ManagementClassName
		{
			get
			{
				string text = string_1;
				if (managementBaseObject_1 != null && managementBaseObject_1.get_ClassPath() != null)
				{
					text = Conversions.ToString(managementBaseObject_1.get_Item("__CLASS"));
					if (text == null || (object)text == string.Empty)
					{
						text = string_1;
					}
				}
				return text;
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementSystemProperties SystemProperties => managementSystemProperties_0;

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ManagementBaseObject LateBoundObject => managementBaseObject_1;

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public ManagementScope Scope
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Scope();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					managementObject_0.set_Scope(value);
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool AutoCommit
		{
			get
			{
				return bool_0;
			}
			set
			{
				bool_0 = value;
			}
		}

		[Browsable(true)]
		public ManagementPath Path
		{
			get
			{
				if (!bool_1)
				{
					return managementObject_0.get_Path();
				}
				return null;
			}
			set
			{
				if (!bool_1)
				{
					if (!method_0(null, value, null))
					{
						throw new ArgumentException("El nombre de clase no coincide.");
					}
					managementObject_0.set_Path(value);
				}
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		public static ManagementScope StaticScope
		{
			get
			{
				return managementScope_0;
			}
			set
			{
				managementScope_0 = value;
			}
		}

		[Description("La propiedad AdapterType refleja el medio de red que que usa. Es posible que esta propiedad no sea aplicable para todos los tipos de adaptadores de red en esta clase. Sólo Windows NT.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string AdapterType => Conversions.ToString(managementBaseObject_1.get_Item("AdapterType"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsAdapterTypeIdNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("AdapterTypeId") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad AdapterTypeId refleja el medio de red en uso. Esta propiedad da la misma información que la propiedad AdapterType, excepto que la información se devuelve en la forma de un valor entero que corresponde a lo siguiente: \n0 - Ethernet 802.3\n1 - Token Ring 802.5\n2 - Fiber Distributed Data Interface (FDDI)\n3 - Wide Area Network (WAN)\n4 - LocalTalk\n5 - Ethernet usando el formato de encabezado DIX\n6 - ARCNET\n7 - ARCNET (878.2)\n8 - ATM\n9 - Wireless\n10 - Infrared Wireless\n11 - Bpc\n12 - CoWan\n13 - 1394\nEsta propiedad puede ser no aplicable a todos los tipos de adaptadores de red listados dentro de esta clase. Sólo Windows NT.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public AdapterTypeIdValues AdapterTypeId
		{
			get
			{
				if (managementBaseObject_1.get_Item("AdapterTypeId") == null)
				{
					return (AdapterTypeIdValues)Convert.ToInt32(14);
				}
				return (AdapterTypeIdValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("AdapterTypeId")));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsAutoSenseNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("AutoSense") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Un valor booleano que indica si el adaptador de red puede determinar automáticamente la velocidad u otras características de comunicaciones del medio de red adjuntado.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		public bool AutoSense
		{
			get
			{
				if (managementBaseObject_1.get_Item("AutoSense") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("AutoSense"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsAvailabilityNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("Availability") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La disponibilidad y estado del dispositivo. Por ejemplo, la propiedad disponibilidad, indica que el dispositivo está en funcionamiento y tiene energía total (valor=3), o se encuentra en un estado de aviso (4), prueba (5), degradado (10) o ahorro de energía (valores 13-15 y 17). En relación con los estados de ahorro de energía, éstos se definen como sigue: Valor 13 (\"Ahorro de energía: desconocido\") indica que se sabe que el dispositivo está en un modo de ahorro de energía, pero se desconoce su estado exacto en este modo; 14 (\"Ahorro de energía: modo de bajo consumo\") indica que el dispositivo está en un estado de  ahorro de energía, pero sigue funcionando y puede exhibir una baja de rendimiento;  15 (\"Ahorro de energía: espera\") describe que el sistema no está en funcionamiento, pero que se podría poner en operación \"rápidamente\"; y valor 17 (\"Ahorro de energía: advertencia\") indica que el equipo está en un estado de aviso, aunque está también en modo de ahorro de energía.")]
		public AvailabilityValues Availability
		{
			get
			{
				if (managementBaseObject_1.get_Item("Availability") == null)
				{
					return (AvailabilityValues)Convert.ToInt32(0);
				}
				return (AvailabilityValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("Availability")));
			}
		}

		[Description("La propiedad Caption es una descripción textual breve (cadena de una línea) del objeto.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string Caption => Conversions.ToString(managementBaseObject_1.get_Item("Caption"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsConfigManagerErrorCodeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ConfigManagerErrorCode") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Indica el código de error del Administrador de configuración de Win32. Los valores siguientes pueden ser devueltos: \n0 Este dispositivo funciona correctamente. \n1 Este dispositivo no está configurado correctamente. \n2 Windows no puede cargar el controlador para este dispositivo. \n3 El controlador de este dispositivo puede estar dañado o le falta memoria o recursos a su sistema. \n4 Este dispositivo no funciona correctamente. Uno de sus controladores o el Registro pueden estar dañados. \n5 El controlador de este dispositivo necesita un recurso que Windows no puede administrar. \n6 La configuración de arranque de este dispositivo entra en conflicto con otros dispositivos. \n7 No se puede filtrar. \n8 Falta el cargador de controlador del dispositivo. \n9 Este dispositivo no funciona correctamente porque el firmware de control está informando incorrectamente acerca de los recursos del dispositivo. \n10 El dispositivo no puede se iniciar. \n11 Error en el dispositivo. \n12 Este dispositivo no encuentra suficientes recursos libres para usar. \n13 Windows no puede comprobar los recursos de este dispositivo. \n14 Este dispositivo no funcionará correctamente hasta que reinicie su equipo. \n15 Este dispositivo no funciona correctamente porque hay un posible problema de enumeración. \n16 Windows no puede identificar todos los recursos que utiliza este dispositivo. \n17 Este dispositivo está solicitando un tipo de recurso desconocido. \n18 Vuelva a instalar los controladores de este dispositivo \n19 Su Registro debe estar dañado. \n20 Error usar el cargador VxD. \n21 Error del sistema: intente cambiar el controlador de este dispositivo. Si esto no funciona, consulte la documentación de hardware. Windows está quitando este dispositivo. \n22 Este dispositivo está deshabilitado. \n23 Error del sistema: intente cambiar el controlador de este dispositivo. Si esto no funciona, consulte la documentación de hardware. \n24 Este dispositivo no está presente, no funciona correctamente o no tiene todos los controladores instalados. \n25 Windows aún está instalando este dispositivo. \n26 Windows aún está instalando este dispositivo. \n27 Este dispositivo no tiene una configuración de Registro válida. \n28 Los controladores de este dispositivo no están instalados. \n29 Este dispositivo está deshabilitado porque el firmware no proporcionó los recursos requeridos. \n30 Este dispositivo está utilizando una recurso de solicitud de interrupción (IRQ) que ya está usando otro dispositivo. \n31 Este dispositivo no funciona correctamente porque Windows no puede cargar los controladores requeridos.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public ConfigManagerErrorCodeValues ConfigManagerErrorCode
		{
			get
			{
				if (managementBaseObject_1.get_Item("ConfigManagerErrorCode") == null)
				{
					return (ConfigManagerErrorCodeValues)Convert.ToInt32(32);
				}
				return (ConfigManagerErrorCodeValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("ConfigManagerErrorCode")));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsConfigManagerUserConfigNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ConfigManagerUserConfig") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("Indica si el dispositivo usa una configuración predefinida por el usuario.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool ConfigManagerUserConfig
		{
			get
			{
				if (managementBaseObject_1.get_Item("ConfigManagerUserConfig") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("ConfigManagerUserConfig"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("CreationClassName indica el nombre de la clase o subclase que se usa en la creación de una instancia. Cuando se usa con las demás propiedades clave de esta clase, esta propiedad permite que se identifiquen de manera única todas las instancias de esta clase y sus subclases.")]
		public string CreationClassName => Conversions.ToString(managementBaseObject_1.get_Item("CreationClassName"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad Description ofrece una descripción textual del objeto. ")]
		public string Description => Conversions.ToString(managementBaseObject_1.get_Item("Description"));

		[Description("La propiedad DeviceID contiene una cadena que identifica de forma única el adaptador de red con respecto a otros dispositivos del sistema.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string DeviceID => Conversions.ToString(managementBaseObject_1.get_Item("DeviceID"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsErrorClearedNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("ErrorCleared") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("ErrorCleared es una propiedad booleana que indica que el error comunicado en la propiedad LastErrorCode se ha resuelto ahora.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool ErrorCleared
		{
			get
			{
				if (managementBaseObject_1.get_Item("ErrorCleared") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("ErrorCleared"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("ErrorDescription es una cadena de forma libre que ofrece más información acerca del error registrado en la propiedad LastErrorCode e información acerca de cualquier acción correctiva que se pueda tomar.")]
		public string ErrorDescription => Conversions.ToString(managementBaseObject_1.get_Item("ErrorDescription"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad GUID especifica el identificador global único de la conexión.")]
		public string GUID => Conversions.ToString(managementBaseObject_1.get_Item("GUID"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsIndexNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("Index") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad Index indica el número de índice del adaptador de red, que se almacena en el Registro del sistema. \nEjemplo: 0.")]
		public uint Index
		{
			get
			{
				if (managementBaseObject_1.get_Item("Index") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("Index"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsInstallDateNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("InstallDate") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad InstallDate es un valor de fecha y hora que indica cuándo se instaló el objeto. La falta de un valor no indica que el objeto no está instalado.")]
		public DateTime InstallDate
		{
			get
			{
				if (managementBaseObject_1.get_Item("InstallDate") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("InstallDate")));
				}
				return DateTime.MinValue;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsInstalledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("Installed") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad Installed determina si el adaptador de red está instalado en el sistema.\nValores: TRUE o FALSE. Un valor TRUE indica si el adaptador de red está instalado.  \nLa propiedad Installed quedó obsoleta. No hay valor de reemplazo y esta propiedad se considera ahora obsoleta.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool Installed
		{
			get
			{
				if (managementBaseObject_1.get_Item("Installed") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("Installed"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsInterfaceIndexNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("InterfaceIndex") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad InterfaceIndex contiene el valor del índice que identifica de forma única a la interfaz local.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public uint InterfaceIndex
		{
			get
			{
				if (managementBaseObject_1.get_Item("InterfaceIndex") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("InterfaceIndex"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsLastErrorCodeNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("LastErrorCode") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("LastErrorCode captura el último código de error informado por el dispositivo lógico.")]
		public uint LastErrorCode
		{
			get
			{
				if (managementBaseObject_1.get_Item("LastErrorCode") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("LastErrorCode"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("La propiedad MACAddress indica la dirección de Media Access Control (MAC) para este adaptador de red. Una dirección MAC es un número único de 48 bits asignado al adaptador de red por el fabricante. Identifica de forma única este adaptador de red y se usa en la asignación de comunicaciones de red TCP/IP.")]
		public string MACAddress => Conversions.ToString(managementBaseObject_1.get_Item("MACAddress"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad Manufacturer indica el nombre del fabricante del adaptador de red.\nEjemplo: 3COM.")]
		public string Manufacturer => Conversions.ToString(managementBaseObject_1.get_Item("Manufacturer"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsMaxNumberControlledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("MaxNumberControlled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[Description("La propiedad MaxNumberControlled indica el número máximo de los puertos directamente direccionables admitidos por este adaptador de red. Se debe usar el valor cero si se desconoce el número.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public uint MaxNumberControlled
		{
			get
			{
				if (managementBaseObject_1.get_Item("MaxNumberControlled") == null)
				{
					return Convert.ToUInt32(0);
				}
				return Conversions.ToUInteger(managementBaseObject_1.get_Item("MaxNumberControlled"));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsMaxSpeedNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("MaxSpeed") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Browsable(true)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("La velocidad máxima, en bits por segundo, para el adaptador de red.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public ulong MaxSpeed
		{
			get
			{
				if (managementBaseObject_1.get_Item("MaxSpeed") == null)
				{
					return Convert.ToUInt64(0);
				}
				return Conversions.ToULong(managementBaseObject_1.get_Item("MaxSpeed"));
			}
		}

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("La propiedad Name define la etiqueta por la que se conoce el objeto. Cuando se incluye en una subclase, la propiedad Name puede ser invalidada como si se tratara de una propiedad Key.")]
		public string Name => Conversions.ToString(managementBaseObject_1.get_Item("Name"));

		[Description("La propiedad NetConnectionID especifica el nombre de conexión de red tal como aparece en la carpeta \"Conexiones de red\".")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string NetConnectionID
		{
			get
			{
				return Conversions.ToString(managementBaseObject_1.get_Item("NetConnectionID"));
			}
			set
			{
				managementBaseObject_1.set_Item("NetConnectionID", (object)value);
				if (!bool_1 && bool_0)
				{
					managementObject_0.Put();
				}
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsNetConnectionStatusNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("NetConnectionStatus") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("NetConnectionStatus es una cadena que indica el estado de la conexión del adaptador de red a la red. El valor de la propiedad se interpreta de la siguiente manera:\n0 - Desconectado\n1 - Conectar\n2 - Conectado\n3 - Desconectar\n4 - Hardware no presente\n5 - Hardware deshabilitado\n6 - Hardware con mal funcionamiento\n7 - Medios desconectados\n8 - Autenticación\n9 - Autenticación correcta\n10 - Error en la autenticación\n11 - Dirección no válida\n12 - Credenciales necesarias\n.. - Otros - Para valores enteros distintos de los listados más arriba, consulte la documentación de errores de Win32.")]
		public ushort NetConnectionStatus
		{
			get
			{
				if (managementBaseObject_1.get_Item("NetConnectionStatus") == null)
				{
					return Convert.ToUInt16(0);
				}
				return Conversions.ToUShort(managementBaseObject_1.get_Item("NetConnectionStatus"));
			}
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsNetEnabledNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("NetEnabled") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Description("La propiedad NetEnabled especifica si está habilitada la conexión de red.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool NetEnabled
		{
			get
			{
				if (managementBaseObject_1.get_Item("NetEnabled") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("NetEnabled"));
			}
		}

		[Browsable(true)]
		[Description("Matriz de cadenas que indica las direcciones de red de un adaptador.")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string[] NetworkAddresses => (string[])managementBaseObject_1.get_Item("NetworkAddresses");

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("PermanentAddress define la dirección de red dentro del código en un adaptador. Esta dirección \"dentro del código\" puede ser cambiada  vía actualización firmware o configuración de software. Si es así, este campo debe ser actualizado cuando se haga el cambio. PermanentAddress debe dejarse en blanco si no existe dirección \"dentro del código\" en el adaptador de red.")]
		public string PermanentAddress => Conversions.ToString(managementBaseObject_1.get_Item("PermanentAddress"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsPhysicalAdapterNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("PhysicalAdapter") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("La propiedad PhysicalAdapter especifica si se trata de un adaptador físico o lógico.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool PhysicalAdapter
		{
			get
			{
				if (managementBaseObject_1.get_Item("PhysicalAdapter") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("PhysicalAdapter"));
			}
		}

		[Browsable(true)]
		[Description("Indica el id. Plug and Play Win32 del dispositivo lógico. Ejemplo: *PNP030b")]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string PNPDeviceID => Conversions.ToString(managementBaseObject_1.get_Item("PNPDeviceID"));

		[Description("Indica los recursos específicos relacionados con energía de dispositivo lógico. Los valores de la matriz, 0=\"Desconocido\", 1=\"No compatible\" y 2=\"Deshabilitado\" se explican por sí solos. El valor 3=\"Habilitado\" indica que las características de administración de energía están habilitadas actualmente pero se desconoce el conjunto de características exacto o la información no está disponible. \" Modos de ahorro de energía establecidos automáticamente \" (4) describe que un dispositivo puede cambiar su estado de energía con base en el uso u otros criterios. \" Estado de energía configurable \" (5) indica que se admite el método SetPowerState. \" Ciclo de energía permitido \" (6) indica que se puede invocar el método SetPowerState con la variable de entrada PowerState establecida a 5 (\"Ciclo de energía \"). \" Se admite el encendido por tiempo \" (7) indica que el método SetPowerState puede ser invocado con la variable de entrada PowerState establecida  a 5 (\"Ciclo de energía \") y el parámetro Time establecido a un fecha y hora específica, o intervalo, para encendido.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public PowerManagementCapabilitiesValues[] PowerManagementCapabilities
		{
			get
			{
				Array array = (Array)managementBaseObject_1.get_Item("PowerManagementCapabilities");
				PowerManagementCapabilitiesValues[] array2 = new PowerManagementCapabilitiesValues[checked(array.Length - 1 + 1)];
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					array2[num] = (PowerManagementCapabilitiesValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(array.GetValue(num)));
				}
				return array2;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsPowerManagementSupportedNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("PowerManagementSupported") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("Booleano que indica que el Dispositivo se puede administrar con energía - por ej., ponerlo en un estado de ahorro de energía. Este booleano no indica que las características de administración de energía están actualmente habilitadas, o si están deshabilitadas, las características que son compatibles. Consulte la matriz PowerManagementCapabilities para obtener esta información. Si este booleano es falso, el valor entero 1, para la cadena, \"No compatible\", debe ser la única entrada en la matriz PowerManagementCapabilities.")]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public bool PowerManagementSupported
		{
			get
			{
				if (managementBaseObject_1.get_Item("PowerManagementSupported") == null)
				{
					return Convert.ToBoolean(0);
				}
				return Conversions.ToBoolean(managementBaseObject_1.get_Item("PowerManagementSupported"));
			}
		}

		[Description("La propiedad ProductName indica el nombre del producto del adaptador de red.\nEjemplo: Fast EtherLink XL")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ProductName => Conversions.ToString(managementBaseObject_1.get_Item("ProductName"));

		[Description("La propiedad ServiceName indica el nombre de servicio del adaptador de red. Este nombre suele ser más corto que el nombre completo del producto. \nEjemplo: Elnkii.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string ServiceName => Conversions.ToString(managementBaseObject_1.get_Item("ServiceName"));

		[Browsable(false)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public bool IsSpeedNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("Speed") == null)
				{
					return true;
				}
				return false;
			}
		}

		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Un estimado del ancho de banda actual en bits por segundo. Para extremos que varían en ancho de banda o para aquellos donde no se puede estimar correctamente, esta propiedad debe contener el ancho de banda nominal.")]
		public ulong Speed
		{
			get
			{
				if (managementBaseObject_1.get_Item("Speed") == null)
				{
					return Convert.ToUInt64(0);
				}
				return Conversions.ToULong(managementBaseObject_1.get_Item("Speed"));
			}
		}

		[Description("La propiedad Status es una cadena que indica el estado actual del objeto. Se pueden definir diversos estados operativos y no operativos. Los estados operativos son \"Correcto\", \"Degradado\" y \"Pred. de error\". \"Pred. de error\" indica que quizá un elemento funcione correctamente pero que anticipe un error en el futuro cercano. Un ejemplo es un disco duro compatible con SMART. También se pueden especificar estados no operativos. Éstos son \"Error\", \"Iniciando\", \"Deteniendo\" y \"Servicio\". El último, \"Servicio\", se podría aplicar durante la creación del reflejo de un disco, la recarga de una lista de permisos de usuarios u otro trabajo administrativo. No todo este trabajo se realiza en línea y no obstante el elemento administrado no es \"Correcto\" ni se encuentra en uno de los otros estados.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		public string Status => Conversions.ToString(managementBaseObject_1.get_Item("Status"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsStatusInfoNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("StatusInfo") == null)
				{
					return true;
				}
				return false;
			}
		}

		[Description("StatusInfo es una cadena que indica si el dispositivo lógico está en un estado habilitado (valor = 3), deshabilitado (valor = 4) o algún otro estado (1) o un estado desconocido (2). Si esta propiedad no se aplica al dispositivo lógico, el valor, 5 (\"No aplicable\"), debe ser usado.")]
		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		public StatusInfoValues StatusInfo
		{
			get
			{
				if (managementBaseObject_1.get_Item("StatusInfo") == null)
				{
					return (StatusInfoValues)Convert.ToInt32(0);
				}
				return (StatusInfoValues)Convert.ToInt32(RuntimeHelpers.GetObjectValue(managementBaseObject_1.get_Item("StatusInfo")));
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(true)]
		[Description("CreationClassName de ámbito del sistema.")]
		public string SystemCreationClassName => Conversions.ToString(managementBaseObject_1.get_Item("SystemCreationClassName"));

		[Browsable(true)]
		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Description("Nombre del sistema de ámbito.")]
		public string SystemName => Conversions.ToString(managementBaseObject_1.get_Item("SystemName"));

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[Browsable(false)]
		public bool IsTimeOfLastResetNull
		{
			get
			{
				if (managementBaseObject_1.get_Item("TimeOfLastReset") == null)
				{
					return true;
				}
				return false;
			}
		}

		[DesignerSerializationVisibility(/*Could not decode attribute arguments.*/)]
		[TypeConverter(typeof(WMIValueTypeConverter))]
		[Browsable(true)]
		[Description("La propiedad TimeOfLastReset indica cuándo se restableció por última vez el adaptador de red.")]
		public DateTime TimeOfLastReset
		{
			get
			{
				if (managementBaseObject_1.get_Item("TimeOfLastReset") != null)
				{
					return ToDateTime(Conversions.ToString(managementBaseObject_1.get_Item("TimeOfLastReset")));
				}
				return DateTime.MinValue;
			}
		}

		public NetworkAdapter()
			: this()
		{
			method_24(null, null, null);
		}

		public NetworkAdapter(string keyDeviceID)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_24(null, new ManagementPath(smethod_0(keyDeviceID)), null);
		}

		public NetworkAdapter(ManagementScope mgmtScope, string keyDeviceID)
			: this()
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Expected O, but got Unknown
			method_24(mgmtScope, new ManagementPath(smethod_0(keyDeviceID)), null);
		}

		public NetworkAdapter(ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_24(null, path, getOptions);
		}

		public NetworkAdapter(ManagementScope mgmtScope, ManagementPath path)
			: this()
		{
			method_24(mgmtScope, path, null);
		}

		public NetworkAdapter(ManagementPath path)
			: this()
		{
			method_24(null, path, null);
		}

		public NetworkAdapter(ManagementScope mgmtScope, ManagementPath path, ObjectGetOptions getOptions)
			: this()
		{
			method_24(mgmtScope, path, getOptions);
		}

		public NetworkAdapter(ManagementObject theObject)
			: this()
		{
			method_23();
			if (!method_1((ManagementBaseObject)(object)theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public NetworkAdapter(ManagementBaseObject theObject)
			: this()
		{
			method_23();
			if (!method_1(theObject))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementBaseObject_0 = theObject;
			managementSystemProperties_0 = new ManagementSystemProperties(theObject);
			managementBaseObject_1 = managementBaseObject_0;
			bool_1 = true;
		}

		private bool method_0(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Expected O, but got Unknown
			if (managementPath_0 != null && string.Compare(managementPath_0.get_ClassName(), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			return method_1((ManagementBaseObject)new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0));
		}

		private bool method_1(ManagementBaseObject managementBaseObject_2)
		{
			if (managementBaseObject_2 != null && string.Compare(Conversions.ToString(managementBaseObject_2.get_Item("__CLASS")), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
			{
				return true;
			}
			Array array = (Array)managementBaseObject_2.get_Item("__DERIVATION");
			if (array != null)
			{
				int num = 0;
				for (num = 0; num < array.Length; num = checked(num + 1))
				{
					if (string.Compare(Conversions.ToString(array.GetValue(num)), ManagementClassName, ignoreCase: true, CultureInfo.InvariantCulture) == 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		private bool method_2()
		{
			if (!IsAdapterTypeIdNull)
			{
				return true;
			}
			return false;
		}

		private bool method_3()
		{
			if (!IsAutoSenseNull)
			{
				return true;
			}
			return false;
		}

		private bool method_4()
		{
			if (!IsAvailabilityNull)
			{
				return true;
			}
			return false;
		}

		private bool method_5()
		{
			if (!IsConfigManagerErrorCodeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_6()
		{
			if (!IsConfigManagerUserConfigNull)
			{
				return true;
			}
			return false;
		}

		private bool method_7()
		{
			if (!IsErrorClearedNull)
			{
				return true;
			}
			return false;
		}

		private bool method_8()
		{
			if (!IsIndexNull)
			{
				return true;
			}
			return false;
		}

		public static DateTime ToDateTime(string dmtfDate)
		{
			DateTime minValue = DateTime.MinValue;
			int num = minValue.Year;
			int num2 = minValue.Month;
			int num3 = minValue.Day;
			int num4 = minValue.Hour;
			int num5 = minValue.Minute;
			int num6 = minValue.Second;
			long num7 = 0L;
			DateTime minValue2 = DateTime.MinValue;
			string empty = string.Empty;
			if (dmtfDate == null)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length == 0)
			{
				throw new ArgumentOutOfRangeException();
			}
			if (dmtfDate.Length != 25)
			{
				throw new ArgumentOutOfRangeException();
			}
			checked
			{
				try
				{
					empty = dmtfDate.Substring(0, 4);
					if (Operators.CompareString("****", empty, false) != 0)
					{
						num = int.Parse(empty);
					}
					empty = dmtfDate.Substring(4, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num2 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(6, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num3 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(8, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num4 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(10, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num5 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(12, 2);
					if (Operators.CompareString("**", empty, false) != 0)
					{
						num6 = int.Parse(empty);
					}
					empty = dmtfDate.Substring(15, 6);
					if (Operators.CompareString("******", empty, false) != 0)
					{
						num7 = long.Parse(empty) * 10L;
					}
					if (num < 0 || num2 < 0 || num3 < 0 || num4 < 0 || num5 < 0 || num5 < 0 || num6 < 0 || num7 < 0L)
					{
						throw new ArgumentOutOfRangeException();
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					throw new ArgumentOutOfRangeException(null, ex2.Message);
				}
				minValue2 = new DateTime(num, num2, num3, num4, num5, num6, 0).AddTicks(num7);
				TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(minValue2);
				int num8 = 0;
				int num9 = 0;
				long num10 = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				empty = dmtfDate.Substring(22, 3);
				if (Operators.CompareString(empty, "******", false) != 0)
				{
					empty = dmtfDate.Substring(21, 4);
					try
					{
						num8 = int.Parse(empty);
					}
					catch (Exception ex3)
					{
						ProjectData.SetProjectError(ex3);
						Exception ex4 = ex3;
						throw new ArgumentOutOfRangeException(null, ex4.Message);
					}
					num9 = (int)(num10 - num8);
					minValue2 = minValue2.AddMinutes(num9);
				}
				return minValue2;
			}
		}

		public static string ToDmtfDateTime(DateTime date)
		{
			string empty = string.Empty;
			TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(date);
			checked
			{
				long value = (long)Math.Round((double)utcOffset.Ticks / 600000000.0);
				if (Math.Abs(value) > 999L)
				{
					date = date.ToUniversalTime();
					empty = "+000";
				}
				else if (utcOffset.Ticks >= 0L)
				{
					empty = "+" + ((long)Math.Round((double)utcOffset.Ticks / 600000000.0)).ToString().PadLeft(3, '0');
				}
				else
				{
					string text = value.ToString();
					empty = "-" + text.Substring(1, text.Length - 1).PadLeft(3, '0');
				}
				string str = string.Concat(string.Concat(string.Concat(string.Concat(string.Concat(date.Year.ToString().PadLeft(4, '0') + date.Month.ToString().PadLeft(2, '0'), date.Day.ToString().PadLeft(2, '0')), date.Hour.ToString().PadLeft(2, '0')), date.Minute.ToString().PadLeft(2, '0')), date.Second.ToString().PadLeft(2, '0')), ".");
				DateTime dateTime = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
				string text2 = ((long)Math.Round((double)((date.Ticks - dateTime.Ticks) * 1000L) / 10000.0)).ToString();
				if (text2.Length > 6)
				{
					text2 = text2.Substring(0, 6);
				}
				return string.Concat(str + text2.PadLeft(6, '0'), empty);
			}
		}

		private bool method_9()
		{
			if (!IsInstallDateNull)
			{
				return true;
			}
			return false;
		}

		private bool method_10()
		{
			if (!IsInstalledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_11()
		{
			if (!IsInterfaceIndexNull)
			{
				return true;
			}
			return false;
		}

		private bool method_12()
		{
			if (!IsLastErrorCodeNull)
			{
				return true;
			}
			return false;
		}

		private bool method_13()
		{
			if (!IsMaxNumberControlledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_14()
		{
			if (!IsMaxSpeedNull)
			{
				return true;
			}
			return false;
		}

		private void method_15()
		{
			managementBaseObject_1.set_Item("NetConnectionID", (object)null);
			if (!bool_1 && bool_0)
			{
				managementObject_0.Put();
			}
		}

		private bool method_16()
		{
			if (!IsNetConnectionStatusNull)
			{
				return true;
			}
			return false;
		}

		private bool method_17()
		{
			if (!IsNetEnabledNull)
			{
				return true;
			}
			return false;
		}

		private bool method_18()
		{
			if (!IsPhysicalAdapterNull)
			{
				return true;
			}
			return false;
		}

		private bool method_19()
		{
			if (!IsPowerManagementSupportedNull)
			{
				return true;
			}
			return false;
		}

		private bool method_20()
		{
			if (!IsSpeedNull)
			{
				return true;
			}
			return false;
		}

		private bool method_21()
		{
			if (!IsStatusInfoNull)
			{
				return true;
			}
			return false;
		}

		private bool method_22()
		{
			if (!IsTimeOfLastResetNull)
			{
				return true;
			}
			return false;
		}

		[Browsable(true)]
		public void CommitObject()
		{
			if (!bool_1)
			{
				managementObject_0.Put();
			}
		}

		[Browsable(true)]
		public void CommitObject(PutOptions putOptions)
		{
			if (!bool_1)
			{
				managementObject_0.Put(putOptions);
			}
		}

		private void method_23()
		{
			bool_0 = true;
			bool_1 = false;
		}

		private static string smethod_0(string string_2)
		{
			return string.Concat("root\\CimV2:Win32_NetworkAdapter", string.Concat(".DeviceID=", string.Concat("\"", string_2 + "\"")));
		}

		private void method_24(ManagementScope managementScope_1, ManagementPath managementPath_0, ObjectGetOptions objectGetOptions_0)
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Expected O, but got Unknown
			method_23();
			if (managementPath_0 != null && !method_0(managementScope_1, managementPath_0, objectGetOptions_0))
			{
				throw new ArgumentException("El nombre de clase no coincide.");
			}
			managementObject_0 = new ManagementObject(managementScope_1, managementPath_0, objectGetOptions_0);
			managementSystemProperties_0 = new ManagementSystemProperties((ManagementBaseObject)(object)managementObject_0);
			managementBaseObject_1 = (ManagementBaseObject)(object)managementObject_0;
		}

		public static NetworkAdapterCollection GetInstances()
		{
			return GetInstances(null, null, null);
		}

		public static NetworkAdapterCollection GetInstances(string condition)
		{
			return GetInstances(null, condition, null);
		}

		public static NetworkAdapterCollection GetInstances(string[] selectedProperties)
		{
			return GetInstances(null, null, selectedProperties);
		}

		public static NetworkAdapterCollection GetInstances(string condition, string[] selectedProperties)
		{
			return GetInstances(null, condition, selectedProperties);
		}

		public static NetworkAdapterCollection GetInstances(ManagementScope mgmtScope, EnumerationOptions enumOptions)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Expected O, but got Unknown
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Expected O, but got Unknown
			//IL_0052: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementPath val = new ManagementPath();
			val.set_ClassName("Win32_NetworkAdapter");
			val.set_NamespacePath("root\\CimV2");
			ManagementClass val2 = new ManagementClass(mgmtScope, val, (ObjectGetOptions)null);
			if (enumOptions == null)
			{
				enumOptions = new EnumerationOptions();
				enumOptions.set_EnsureLocatable(true);
			}
			return new NetworkAdapterCollection(val2.GetInstances(enumOptions));
		}

		public static NetworkAdapterCollection GetInstances(ManagementScope mgmtScope, string condition)
		{
			return GetInstances(mgmtScope, condition, null);
		}

		public static NetworkAdapterCollection GetInstances(ManagementScope mgmtScope, string[] selectedProperties)
		{
			return GetInstances(mgmtScope, null, selectedProperties);
		}

		public static NetworkAdapterCollection GetInstances(ManagementScope mgmtScope, string condition, string[] selectedProperties)
		{
			//IL_000a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Expected O, but got Unknown
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Expected O, but got Unknown
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Expected O, but got Unknown
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			if (mgmtScope == null)
			{
				if (managementScope_0 == null)
				{
					mgmtScope = new ManagementScope();
					mgmtScope.get_Path().set_NamespacePath("root\\CimV2");
				}
				else
				{
					mgmtScope = managementScope_0;
				}
			}
			ManagementObjectSearcher val = new ManagementObjectSearcher(mgmtScope, (ObjectQuery)new SelectQuery("Win32_NetworkAdapter", condition, selectedProperties));
			EnumerationOptions val2 = new EnumerationOptions();
			val2.set_EnsureLocatable(true);
			val.set_Options(val2);
			return new NetworkAdapterCollection(val.Get());
		}

		[Browsable(true)]
		public static NetworkAdapter CreateInstance()
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Expected O, but got Unknown
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Expected O, but got Unknown
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Expected O, but got Unknown
			ManagementScope val = null;
			if (managementScope_0 == null)
			{
				val = new ManagementScope();
				val.get_Path().set_NamespacePath(string_0);
			}
			else
			{
				val = managementScope_0;
			}
			ManagementPath val2 = new ManagementPath(string_1);
			ManagementClass val3 = new ManagementClass(val, val2, (ObjectGetOptions)null);
			return new NetworkAdapter(val3.CreateInstance());
		}

		[Browsable(true)]
		public void Delete()
		{
			managementObject_0.Delete();
		}

		public uint Disable()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("Disable", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint Enable()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("Enable", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint Reset()
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("Reset", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}

		public uint SetPowerState(ushort PowerState, DateTime Time)
		{
			if (!bool_1)
			{
				ManagementBaseObject val = null;
				val = managementObject_0.GetMethodParameters("SetPowerState");
				val.set_Item("PowerState", (object)PowerState);
				val.set_Item("Time", (object)ToDmtfDateTime(Time));
				return Convert.ToUInt32(RuntimeHelpers.GetObjectValue(managementObject_0.InvokeMethod("SetPowerState", val, (InvokeMethodOptions)null).get_Properties().get_Item("ReturnValue")
					.get_Value()));
			}
			return Convert.ToUInt32(0);
		}
	}
	public class SyncTime
	{
		private struct Struct7
		{
			public short short_0;

			public short short_1;

			public short short_2;

			public short short_3;

			public short short_4;

			public short short_5;

			public short short_6;

			public short short_7;
		}

		[CompilerGenerated]
		internal sealed class Class88
		{
			public Variables variables_0;

			internal void method_0()
			{
				smethod_4(ref variables_0);
			}
		}

		[DllImport("kernel32.dll")]
		private static extern bool SetLocalTime(ref Struct7 struct7_0);

		private static bool smethod_0(DateTime dateTime_0)
		{
			checked
			{
				Struct7 struct7_ = default(Struct7);
				struct7_.short_0 = (short)dateTime_0.Year;
				struct7_.short_1 = (short)dateTime_0.Month;
				struct7_.short_2 = (short)dateTime_0.DayOfWeek;
				struct7_.short_3 = (short)dateTime_0.Day;
				struct7_.short_4 = (short)dateTime_0.Hour;
				struct7_.short_5 = (short)dateTime_0.Minute;
				struct7_.short_6 = (short)dateTime_0.Second;
				struct7_.short_7 = (short)dateTime_0.Millisecond;
				return SetLocalTime(ref struct7_);
			}
		}

		private static DateTime smethod_1(ref Variables variables_0)
		{
			//IL_0123: Unknown result type (might be due to invalid IL or missing references)
			DateTime result = new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc);
			string empty = string.Empty;
			string[] array = new string[24]
			{
				"nist1-ny.ustiming.org",
				"nist1-nj.ustiming.org",
				"nist1-nj2.ustiming.org",
				"nist1-ny2.ustiming.org",
				"nist1-pa.ustiming.org",
				"time-c.nist.gov",
				"time-d.nist.gov",
				"nist1.aol-va.symmetricom.com",
				"nist1-atl.ustiming.org",
				"wolfnisttime.com",
				"nist1-chi.ustiming.org",
				"nist.time.nosc.us",
				"nist.expertsmi.com",
				"nist.netservicesgroup.com",
				"nist1-lnk.binary.net",
				"wwv.nist.gov",
				"time.nist.gov",
				"utcnist.colorado.edu",
				"utcnist2.colorado.edu",
				"ntp-nist.ldsbc.edu",
				"nist1-lv.ustiming.org",
				"nist-time-server.eoni.com",
				"nist1.symmetricom.com",
				"nist1-la.ustiming.org"
			};
			int num = array.Length;
			checked
			{
				for (int i = 0; i <= num; i++)
				{
					try
					{
						string string_ = array[Class2.smethod_2(0, array.Length)];
						int int_ = 13;
						if (TCP.smethod_0(ref string_, ref int_, ref variables_0))
						{
							StreamReader streamReader = new StreamReader((Stream)(object)new TcpClient(string_, int_).GetStream());
							empty = streamReader.ReadToEnd();
							streamReader.Close();
							if (empty.Length > 47 && empty.Substring(38, 9).Equals("UTC(NIST)") && Operators.CompareString(empty.Substring(30, 1), "0", false) == 0)
							{
								int num2 = int.Parse(empty.Substring(1, 5));
								if (num2 > 15020)
								{
									int num3 = int.Parse(empty.Substring(7, 2));
									int month = int.Parse(empty.Substring(10, 2));
									int day = int.Parse(empty.Substring(13, 2));
									int hour = int.Parse(empty.Substring(16, 2));
									int minute = int.Parse(empty.Substring(19, 2));
									int second = int.Parse(empty.Substring(22, 2));
									num3 = ((num2 <= 51544) ? (num3 + 1999) : (num3 + 2000));
									result = new DateTime(num3, month, day, hour, minute, second);
									return result;
								}
							}
						}
						if (i < 3)
						{
							Thread.Sleep(1000);
							continue;
						}
						return result;
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger = variables_0.Logger;
						string message = "Error: " + str;
						logger.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
				}
				return result;
			}
		}

		private static void smethod_2(ref Variables variables_0)
		{
			try
			{
				if (variables_0.InternetConnection)
				{
					FileLogger logger = variables_0.Logger;
					string message = "Synchronizing Time...";
					logger.LogMessage(ref message);
					message = "W32Time";
					bool bool_ = true;
					bool bool_2 = true;
					Class2.smethod_1(ref message, ref bool_, ref variables_0, ref bool_2);
					DateTime dateTime_ = smethod_1(ref variables_0);
					if (dateTime_.Year != 1900)
					{
						smethod_5(ref dateTime_);
						smethod_0(dateTime_);
						FileLogger logger2 = variables_0.Logger;
						message = "Time synchronized";
						logger2.LogMessage(ref message);
					}
					else
					{
						FileLogger logger3 = variables_0.Logger;
						message = "Error: No Server Time Found";
						logger3.LogMessage(ref message);
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger4 = variables_0.Logger;
				string message = "Error: " + str;
				logger4.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		internal static void smethod_3(ref Variables variables_0)
		{
			Thread thread = null;
			Variables variables_ = variables_0;
			new Thread((ThreadStart)delegate
			{
				smethod_4(ref variables_);
			})?.Start();
		}

		private static void smethod_4(ref Variables variables_0)
		{
			try
			{
				if (variables_0.InternetConnection)
				{
					FileLogger logger = variables_0.Logger;
					string message = "Synchronizing Time...";
					logger.LogMessage(ref message);
					message = "W32Time";
					bool bool_ = false;
					bool bool_2 = true;
					Class2.smethod_1(ref message, ref bool_, ref variables_0, ref bool_2);
					DateTime dateTime_ = smethod_6(ref variables_0);
					if (dateTime_.Year != 1900)
					{
						smethod_5(ref dateTime_);
						smethod_0(dateTime_);
						FileLogger logger2 = variables_0.Logger;
						message = "Time synchronized";
						logger2.LogMessage(ref message);
					}
					else
					{
						FileLogger logger3 = variables_0.Logger;
						message = "Error: No Server Time Found";
						logger3.LogMessage(ref message);
					}
					message = "W32Time";
					bool_2 = true;
					bool_ = true;
					Class2.smethod_1(ref message, ref bool_2, ref variables_0, ref bool_);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger4 = variables_0.Logger;
				string message = "Error: " + str;
				logger4.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		private static void smethod_5(ref DateTime dateTime_0)
		{
			dateTime_0 = TimeZoneInfo.ConvertTimeFromUtc(dateTime_0, TimeZoneInfo.Local);
		}

		private static DateTime smethod_6(ref Variables variables_0)
		{
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_007c: Unknown result type (might be due to invalid IL or missing references)
			DateTime result = new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc);
			try
			{
				string text = Conversions.ToString(Class2.smethod_2(0, 4)) + ".pool.ntp.org";
				byte[] array = new byte[48];
				array[0] = 27;
				IPAddress[] addressList = Dns.GetHostEntry(text).get_AddressList();
				if (addressList.Length > 0)
				{
					int num = Class2.smethod_2(0, addressList.Length);
					IPEndPoint val = new IPEndPoint(addressList[num], 123);
					Socket val2 = new Socket((AddressFamily)2, (SocketType)2, (ProtocolType)17);
					val2.Connect((EndPoint)(object)val);
					val2.Send(array);
					val2.Receive(array);
					val2.Close();
					long ulong_ = BitConverter.ToUInt32(array, 40);
					ulong ulong_2 = BitConverter.ToUInt32(array, 44);
					long value = smethod_7((ulong)ulong_);
					double value2 = Convert.ToDouble(decimal.Add(d2: decimal.Divide(decimal.Multiply(new decimal((ulong)smethod_7(ulong_2)), new decimal(1000L)), 4294967296m), d1: decimal.Multiply(new decimal((ulong)value), new decimal(1000L))));
					result = result.AddMilliseconds(value2);
					return result;
				}
				return result;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return result;
			}
		}

		private static uint smethod_7(ulong ulong_0)
		{
			return Convert.ToUInt32(decimal.Add(new decimal(checked((((long)ulong_0 & 0xFFL) << 24) + (((long)ulong_0 & 0xFF00L) << 8) + (((long)ulong_0 & 0xFF0000L) >> 8))), new decimal((ulong_0 & 0xFF000000L) >> 24)));
		}
	}
	public class TCP
	{
		[CompilerGenerated]
		internal sealed class Class89
		{
			public Variables variables_0;

			internal void method_0()
			{
				smethod_3(ref variables_0);
			}
		}

		internal static bool smethod_0(ref string string_0, ref int int_0, ref Variables variables_0)
		{
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ad: Expected O, but got Unknown
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b7: Expected O, but got Unknown
			FileLogger logger = variables_0.Logger;
			string message = "Checking Port: " + string_0 + ":" + Conversions.ToString(int_0) + "...";
			logger.LogMessage(ref message);
			Class3.smethod_24(ref variables_0, ref variables_0.AudioIncomingTransmission);
			bool flag = false;
			IPAddress val = null;
			try
			{
				val = Dns.GetHostAddresses(string_0)[0];
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			if (val != null)
			{
				IPEndPoint val2 = new IPEndPoint(val, int_0);
				Socket val3 = new Socket((AddressFamily)2, (SocketType)1, (ProtocolType)6);
				try
				{
					val3.Connect((EndPoint)(object)val2);
					if (val3.get_Connected())
					{
						flag = true;
					}
				}
				catch (Exception ex2)
				{
					ProjectData.SetProjectError(ex2);
					Exception exception_2 = ex2;
					string str2 = exception_2.Message + " " + Class2.smethod_4(ref exception_2);
					FileLogger logger3 = variables_0.Logger;
					message = "Error Checking host: " + str2;
					logger3.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
				val3.Close();
			}
			if (flag)
			{
				FileLogger logger4 = variables_0.Logger;
				message = "Port is Open: " + string_0 + ":" + Conversions.ToString(int_0);
				logger4.LogMessage(ref message);
			}
			else
			{
				FileLogger logger5 = variables_0.Logger;
				message = "Error: Port is Closed: " + string_0 + ":" + Conversions.ToString(int_0);
				logger5.LogMessage(ref message);
			}
			return flag;
		}

		internal static bool smethod_1(ref int int_0, ref Variables variables_0)
		{
			try
			{
				Class3.smethod_24(ref variables_0, ref variables_0.AudioProcessing);
				IPEndPoint[] activeTcpListeners = IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpListeners();
				for (int i = 0; i < activeTcpListeners.Length; i = checked(i + 1))
				{
					if (activeTcpListeners[i].get_Port() == int_0)
					{
						return true;
					}
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			return false;
		}

		internal static void smethod_2(ref Variables variables_0)
		{
			Variables variables_ = variables_0;
			new Thread((ThreadStart)delegate
			{
				smethod_3(ref variables_);
			}).Start();
		}

		internal static bool smethod_3(ref Variables variables_0)
		{
			FileLogger logger = variables_0.Logger;
			string message = "Checking Internet Connection...";
			logger.LogMessage(ref message);
			bool flag = false;
			try
			{
				if (!(flag = ((ServerComputer)Class79.smethod_0()).get_Network().Ping("8.8.8.8", 300)))
				{
					flag = ((ServerComputer)Class79.smethod_0()).get_Network().Ping("www.google.com", 1500);
				}
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				flag = false;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger2 = variables_0.Logger;
				message = "Error: " + str;
				logger2.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
			finally
			{
				if (flag)
				{
					FileLogger logger3 = variables_0.Logger;
					message = "Internet Connection Detected";
					logger3.LogMessage(ref message);
				}
				else
				{
					FileLogger logger4 = variables_0.Logger;
					message = "No Internet Connection Detected";
					logger4.LogMessage(ref message);
				}
			}
			variables_0.InternetConnection = flag;
			if (variables_0.InternetConnection)
			{
				SyncTime.smethod_3(ref variables_0);
			}
			return flag;
		}
	}
	public class WMINetWorkAdapter
	{
		private const string string_0 = "Win32_NetworkAdapterConfiguration";

		private const string string_1 = "Win32_NetworkAdapter";

		internal static void smethod_0(ref string string_2, ref string string_3, ref Variables variables_0)
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			if (!string.IsNullOrEmpty(string_2) && !string.IsNullOrEmpty(string_3))
			{
				string str = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Network\\{4D36E972-E325-11CE-BFC1-08002BE10318}\\";
				str = str + string_2 + "\\Connection";
				string text = "Name";
				object object_ = string_3;
				RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
				Class10.smethod_2(ref str, ref text, ref object_, ref registryValueKind_, ref variables_0);
				string_3 = Conversions.ToString(object_);
			}
		}

		internal static bool smethod_1(ref string string_2, ref int int_0, ref Variables variables_0)
		{
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			if (!string.IsNullOrEmpty(string_2))
			{
				try
				{
					RegistryKey val = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E972-E325-11CE-BFC1-08002BE10318}", true);
					string[] subKeyNames = val.GetSubKeyNames();
					foreach (string text in subKeyNames)
					{
						RegistryKey val2 = val.OpenSubKey(text);
						object objectValue = RuntimeHelpers.GetObjectValue(val2.GetValue("NetCfgInstanceId"));
						if (objectValue != null && string_2.Contains(objectValue.ToString()) && Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(val2.GetValue("MediaStatus")), (object)int_0, false))
						{
							string text2 = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E972-E325-11CE-BFC1-08002BE10318}\\" + text;
							string text3 = "MediaStatus";
							object object_ = int_0;
							RegistryValueKind registryValueKind_ = (RegistryValueKind)1;
							Class10.smethod_2(ref text2, ref text3, ref object_, ref registryValueKind_, ref variables_0);
							int_0 = Conversions.ToInteger(object_);
							return true;
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger = variables_0.Logger;
					string text3 = str + " " + exception_.Message;
					logger.LogMessage(ref text3);
					ProjectData.ClearProjectError();
				}
			}
			return false;
		}

		internal static string smethod_2(ref string string_2, ref Variables variables_0)
		{
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			string empty = string.Empty;
			ManagementObjectCollection val = smethod_8(ref string_2, ref variables_0);
			ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
			if (val != null && val.get_Count() > 0)
			{
				try
				{
					enumerator = val.GetEnumerator();
					if (enumerator.MoveNext())
					{
						return Conversions.ToString(((ManagementBaseObject)(ManagementObject)enumerator.get_Current()).GetPropertyValue("GUID"));
					}
					return empty;
				}
				finally
				{
					((IDisposable)enumerator)?.Dispose();
				}
			}
			return empty;
		}

		internal static string smethod_3()
		{
			RegistryKey val = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E972-E325-11CE-BFC1-08002BE10318}", true);
			string[] subKeyNames = val.GetSubKeyNames();
			string result = "";
			string[] array = subKeyNames;
			foreach (string text in array)
			{
				RegistryKey val2 = val.OpenSubKey(text);
				object objectValue = RuntimeHelpers.GetObjectValue(val2.GetValue("ComponentId"));
				if (objectValue != null && Operators.CompareString(objectValue.ToString(), "tap0901", false) == 0)
				{
					result = val2.GetValue("NetCfgInstanceId").ToString();
				}
			}
			return result;
		}

		internal static void smethod_4(ref string string_2, ref bool bool_0, ref Variables variables_0)
		{
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Expected O, but got Unknown
			//IL_0171: Unknown result type (might be due to invalid IL or missing references)
			ManagementObjectCollection val = smethod_7(ref string_2, ref variables_0);
			if (val == null || val.get_Count() <= 0)
			{
				return;
			}
			checked
			{
				ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
				try
				{
					enumerator = val.GetEnumerator();
					if (!enumerator.MoveNext())
					{
						return;
					}
					ManagementObject theObject = (ManagementObject)enumerator.get_Current();
					NetworkAdapter networkAdapter = new NetworkAdapter(theObject);
					int netConnectionStatus = networkAdapter.NetConnectionStatus;
					bool flag = false;
					if (netConnectionStatus == 7 || netConnectionStatus == 2)
					{
						flag = true;
						FileLogger logger = variables_0.Logger;
						string message = "TAP-Windows Adapter is enabled";
						logger.LogMessage(ref message);
					}
					if (bool_0 == flag)
					{
						return;
					}
					try
					{
						if (bool_0)
						{
							int num = (int)networkAdapter.Enable();
							FileLogger logger2 = variables_0.Logger;
							string message = "Enable " + Conversions.ToString(num);
							logger2.LogMessage(ref message);
						}
						else
						{
							int num = (int)networkAdapter.Disable();
							FileLogger logger3 = variables_0.Logger;
							string message = "Enable " + Conversions.ToString(num);
							logger3.LogMessage(ref message);
						}
					}
					catch (COMException ex)
					{
						ProjectData.SetProjectError((Exception)ex);
						COMException ex2 = ex;
						string message2 = ex2.Message;
						Exception exception_ = ex2;
						string str = Class2.smethod_4(ref exception_);
						ex2 = (COMException)exception_;
						string str2 = message2 + " " + str;
						FileLogger logger4 = variables_0.Logger;
						string message = "Error: " + str2 + " " + ex2.ErrorCode.ToString("X");
						logger4.LogMessage(ref message);
						FileLogger logger5 = variables_0.Logger;
						message = "TAP-Windows Adapter need be enabled";
						logger5.LogMessage(ref message);
						if (variables_0.IsGui)
						{
							variables_0.ShowMessage.Show("TAP-Windows Adapter need be enabled", "TAP Adaptar Disable", IFrmShowMessage.enumMessageIcon.Error, IFrmShowMessage.enumMessageButton.OK, variables_0.iactivateMetroForm_0);
						}
						Thread.Sleep(1000);
						ProjectData.ClearProjectError();
					}
				}
				finally
				{
					((IDisposable)enumerator)?.Dispose();
				}
			}
		}

		internal static void smethod_5(ref string string_2, ref string string_3, ref string string_4, ref string string_5, ref string string_6, ref Variables variables_0)
		{
			//IL_0060: Unknown result type (might be due to invalid IL or missing references)
			//IL_0067: Expected O, but got Unknown
			if (string.IsNullOrEmpty(string_4))
			{
				return;
			}
			FileLogger logger = variables_0.Logger;
			string message = "Setting IP TunnelTap...";
			logger.LogMessage(ref message);
			bool bool_ = true;
			smethod_4(ref string_2, ref bool_, ref variables_0);
			ManagementObjectCollection val = smethod_6(ref string_3, ref variables_0);
			if (val == null || val.get_Count() <= 0)
			{
				return;
			}
			checked
			{
				ManagementObjectEnumerator enumerator = default(ManagementObjectEnumerator);
				try
				{
					enumerator = val.GetEnumerator();
					if (!enumerator.MoveNext())
					{
						return;
					}
					ManagementObject theObject = (ManagementObject)enumerator.get_Current();
					NetworkAdapterConfiguration networkAdapterConfiguration = new NetworkAdapterConfiguration(theObject);
					try
					{
						if (!string.IsNullOrEmpty(string_4))
						{
							int num = (int)networkAdapterConfiguration.EnableStatic(new string[1]
							{
								string_4
							}, new string[1]
							{
								string_5
							});
							FileLogger logger2 = variables_0.Logger;
							message = "EnableStatic " + Conversions.ToString(num);
							logger2.LogMessage(ref message);
						}
					}
					catch (COMException ex)
					{
						ProjectData.SetProjectError((Exception)ex);
						COMException ex2 = ex;
						string message2 = ex2.Message;
						Exception exception_ = ex2;
						string str = Class2.smethod_4(ref exception_);
						ex2 = (COMException)exception_;
						string str2 = message2 + " " + str;
						FileLogger logger3 = variables_0.Logger;
						message = str2 + " " + ex2.ErrorCode.ToString("X");
						logger3.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
					try
					{
						if (!string.IsNullOrEmpty(string_6))
						{
							int num = (int)networkAdapterConfiguration.SetGateways(new string[1]
							{
								string_6
							}, new ushort[1]
							{
								1
							});
							FileLogger logger4 = variables_0.Logger;
							message = "SetGateways " + Conversions.ToString(num);
							logger4.LogMessage(ref message);
						}
					}
					catch (COMException ex3)
					{
						ProjectData.SetProjectError((Exception)ex3);
						COMException ex4 = ex3;
						string message3 = ex4.Message;
						Exception exception_ = ex4;
						string str3 = Class2.smethod_4(ref exception_);
						ex4 = (COMException)exception_;
						string str4 = message3 + " " + str3;
						FileLogger logger5 = variables_0.Logger;
						message = str4 + " " + ex4.ErrorCode.ToString("X");
						logger5.LogMessage(ref message);
						ProjectData.ClearProjectError();
					}
				}
				finally
				{
					((IDisposable)enumerator)?.Dispose();
				}
			}
		}

		private static ManagementObjectCollection smethod_6(ref string string_2, ref Variables variables_0)
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Expected O, but got Unknown
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Expected O, but got Unknown
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			ManagementObjectCollection val = null;
			try
			{
				SelectQuery val2 = new SelectQuery("Win32_NetworkAdapterConfiguration", "Description = '" + string_2 + "'");
				val = new ManagementObjectSearcher((ObjectQuery)(object)val2).Get();
				if (val.get_Count() == 0)
				{
					ObjectQuery val3 = new ObjectQuery("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE Description = '" + string_2 + "'");
					val = new ManagementObjectSearcher(variables_0.GObjWmiService, val3).Get();
					return val;
				}
				return val;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return val;
			}
		}

		private static ManagementObjectCollection smethod_7(ref string string_2, ref Variables variables_0)
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Expected O, but got Unknown
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Expected O, but got Unknown
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			ManagementObjectCollection val = null;
			try
			{
				SelectQuery val2 = new SelectQuery("Win32_NetworkAdapter", "GUID = '" + string_2 + "'");
				val = new ManagementObjectSearcher((ObjectQuery)(object)val2).Get();
				if (val.get_Count() == 0)
				{
					ObjectQuery val3 = new ObjectQuery("SELECT * FROM Win32_NetworkAdapter WHERE GUID = '" + string_2 + "'");
					val = new ManagementObjectSearcher(variables_0.GObjWmiService, val3).Get();
					return val;
				}
				return val;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return val;
			}
		}

		private static ManagementObjectCollection smethod_8(ref string string_2, ref Variables variables_0)
		{
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Expected O, but got Unknown
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Expected O, but got Unknown
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			ManagementObjectCollection val = null;
			try
			{
				SelectQuery val2 = new SelectQuery("Win32_NetworkAdapter", "Description = '" + string_2 + "'");
				val = new ManagementObjectSearcher((ObjectQuery)(object)val2).Get();
				if (val.get_Count() == 0)
				{
					ObjectQuery val3 = new ObjectQuery("SELECT * FROM Win32_NetworkAdapter WHERE Description = '" + string_2 + "'");
					val = new ManagementObjectSearcher(variables_0.GObjWmiService, val3).Get();
					return val;
				}
				return val;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return val;
			}
		}

		internal static void smethod_9(ref string string_2, ref Variables variables_0)
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Expected O, but got Unknown
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			FileLogger logger = variables_0.Logger;
			string message = "Installing certificate...";
			logger.LogMessage(ref message);
			try
			{
				X509Certificate2 val = new X509Certificate2(string_2);
				X509Store val2 = new X509Store((StoreName)8, (StoreLocation)2);
				val2.Open((OpenFlags)1);
				val2.Add(val);
				val2.Close();
				FileLogger logger2 = variables_0.Logger;
				message = "Certificated Installed";
				logger2.LogMessage(ref message);
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger3 = variables_0.Logger;
				message = "Error: " + str;
				logger3.LogMessage(ref message);
				ProjectData.ClearProjectError();
			}
		}

		internal static uint smethod_10(string string_2)
		{
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			//IL_000b: Expected O, but got Unknown
			Regex val = new Regex("^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))$");
			uint num = 0u;
			try
			{
				if (val.IsMatch(string_2))
				{
					string[] array = string_2.Split(new char[1]
					{
						'.'
					});
					ushort num2 = checked((ushort)(array.Length - 1));
					ushort num3 = num2;
					string[] array2 = array;
					foreach (string text in array2)
					{
						num = Conversions.ToUInteger(Operators.AddObject((object)num, Operators.MultiplyObject(Operators.ModObject(Conversion.Int((object)text), (object)256), (object)Math.Pow(256.0, (int)checked((ushort)unchecked((uint)(num2 - num3)))))));
						checked
						{
							num3 = (ushort)(unchecked((int)num3) - 1);
						}
					}
					return num;
				}
				return num;
			}
			catch (Exception projectError)
			{
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				return num;
			}
		}

		internal static bool smethod_11(ref IPAddress ipaddress_0)
		{
			if (Enumerable.Contains<IPAddress>((IEnumerable<IPAddress>)Dns.GetHostEntry(Dns.GetHostName()).get_AddressList(), ipaddress_0))
			{
				return true;
			}
			return false;
		}

		internal static bool smethod_12(ref string string_2)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Expected O, but got Unknown
			IPAddress ipaddress_ = new IPAddress((long)smethod_10(string_2));
			return smethod_11(ref ipaddress_);
		}

		internal static string smethod_13()
		{
			string text = Conversions.ToString(10);
			string text2 = Conversions.ToString(Class2.smethod_2(0, 254));
			string text3 = Conversions.ToString(Class2.smethod_2(0, 254));
			string text4 = Conversions.ToString(Class2.smethod_2(2, 254));
			return $"{text:D3}.{text2:D3}.{text3:D3}.{text4:D3}";
		}
	}
}
namespace AutoPico.Patcher
{
	public class FileNodo
	{
		[CompilerGenerated]
		private int int_0;

		[CompilerGenerated]
		private int int_1;

		[CompilerGenerated]
		private string string_0;

		[CompilerGenerated]
		private string[] string_1;

		public int Longitud
		{
			[CompilerGenerated]
			get
			{
				return int_0;
			}
			[CompilerGenerated]
			set
			{
				int_0 = value;
			}
		}

		public int Offset
		{
			[CompilerGenerated]
			get
			{
				return int_1;
			}
			[CompilerGenerated]
			set
			{
				int_1 = value;
			}
		}

		public string Hex
		{
			[CompilerGenerated]
			get
			{
				return string_0;
			}
			[CompilerGenerated]
			set
			{
				string_0 = value;
			}
		}

		public string[] RutaFile
		{
			[CompilerGenerated]
			get
			{
				return string_1;
			}
			[CompilerGenerated]
			set
			{
				string_1 = value;
			}
		}

		public FileNodo()
		{
			Longitud = 0;
			Offset = 0;
			Hex = string.Empty;
			RutaFile = new string[2]
			{
				string.Empty,
				string.Empty
			};
		}
	}
	public class PatchFile
	{
		internal static bool smethod_0(ref FileNodo fileNodo_0, ref bool bool_0, ref Variables variables_0)
		{
			_ = fileNodo_0.RutaFile[0] + "\\" + fileNodo_0.RutaFile[1];
			string message;
			if (smethod_1(fileNodo_0, ref bool_0, ref variables_0))
			{
				FileLogger logger = variables_0.Logger;
				message = "File patched: " + fileNodo_0.RutaFile[1];
				logger.LogMessage(ref message);
				return true;
			}
			FileLogger logger2 = variables_0.Logger;
			message = "Error, file no patched: " + fileNodo_0.RutaFile[1];
			logger2.LogMessage(ref message);
			return false;
		}

		private static bool smethod_1(FileNodo fileNodo_0, ref bool bool_0, ref Variables variables_0)
		{
			bool result = false;
			byte[] array = smethod_2(fileNodo_0.Hex, ref variables_0);
			string string_ = fileNodo_0.RutaFile[0] + "\\" + fileNodo_0.RutaFile[1];
			if (bool_0)
			{
				TakeOwner.smethod_1(ref string_, ref variables_0);
			}
			checked
			{
				string str = string_.Substring(0, string_.Length - 3);
				string text = string_;
				_ = str + "old." + text.Substring(text.Length - 3);
				if (array != null)
				{
					FileStream fileStream = null;
					try
					{
						FileLogger logger = variables_0.Logger;
						string message = "Patching File: " + string_;
						logger.LogMessage(ref message);
						if (File.Exists(string_))
						{
							fileStream = File.OpenWrite(string_);
							fileStream.Seek(fileNodo_0.Offset, SeekOrigin.Begin);
							fileStream.Write(array, 0, array.Length);
							fileStream.Flush();
							result = true;
							return result;
						}
						return result;
					}
					catch (Exception ex)
					{
						ProjectData.SetProjectError(ex);
						Exception exception_ = ex;
						string str2 = exception_.Message + " " + Class2.smethod_4(ref exception_);
						FileLogger logger2 = variables_0.Logger;
						string message = "Error: " + str2;
						logger2.LogMessage(ref message);
						ProjectData.ClearProjectError();
						return result;
					}
					finally
					{
						try
						{
							fileStream.Close();
						}
						catch (Exception projectError)
						{
							ProjectData.SetProjectError(projectError);
							ProjectData.ClearProjectError();
						}
					}
				}
				return result;
			}
		}

		private static byte[] smethod_2(string string_0, ref Variables variables_0)
		{
			byte[] result = null;
			try
			{
				if (!string.IsNullOrEmpty(string_0))
				{
					string[] array = string_0.Split(new char[1]
					{
						'-'
					});
					if (array.Length > 0)
					{
						Converter<string, byte> converter = smethod_4;
						result = Array.ConvertAll(array, converter);
						return result;
					}
					return result;
				}
				return result;
			}
			catch (Exception ex)
			{
				ProjectData.SetProjectError(ex);
				Exception exception_ = ex;
				string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
				FileLogger logger = variables_0.Logger;
				string message = "Error: " + str;
				logger.LogMessage(ref message);
				ProjectData.ClearProjectError();
				return result;
			}
		}

		internal static void smethod_3(string string_0, ref Variables variables_0)
		{
			TakeOwner.smethod_1(ref string_0, ref variables_0);
			checked
			{
				string text = string_0.Substring(0, string_0.Length - 3);
				string str = text;
				string text2 = string_0;
				text = str + "old." + text2.Substring(text2.Length - 3);
				try
				{
					string message;
					if (!File.Exists(text))
					{
						FileLogger logger = variables_0.Logger;
						message = "Creating backup in: " + text;
						logger.LogMessage(ref message);
						File.Move(string_0, text);
						File.Copy(text, string_0);
						FileLogger logger2 = variables_0.Logger;
						message = "Backup done";
						logger2.LogMessage(ref message);
						return;
					}
					text = string_0.Substring(0, string_0.Length - 3);
					string str2 = text;
					string text3 = string_0;
					text = str2 + "mod." + text3.Substring(text3.Length - 3);
					if (File.Exists(text))
					{
						File.Delete(text);
					}
					FileLogger logger3 = variables_0.Logger;
					message = "Creating backup in: " + text;
					logger3.LogMessage(ref message);
					File.Move(string_0, text);
					File.Copy(text, string_0);
					FileLogger logger4 = variables_0.Logger;
					message = "Backup done";
					logger4.LogMessage(ref message);
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str3 = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger5 = variables_0.Logger;
					string message = "Error: " + str3;
					logger5.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
			}
		}

		private static byte smethod_4(string string_0)
		{
			return Convert.ToByte(string_0, 16);
		}

		internal static int smethod_5(ref string string_0, ref string string_1, ref Variables variables_0, ref bool bool_0 = false)
		{
			checked
			{
				try
				{
					byte[] array = File.ReadAllBytes(string_1);
					byte[] bytes = Encoding.Unicode.GetBytes(string_0);
					bool flag = false;
					int num = array.Length;
					for (int i = 0; i <= num; i++)
					{
						if (array[i] != bytes[0])
						{
							continue;
						}
						bool flag2 = false;
						int num2 = bytes.Length - 1;
						for (int j = 1; j <= num2; j++)
						{
							if (array[i + j] == bytes[j])
							{
								flag2 = true;
								continue;
							}
							flag2 = false;
							break;
						}
						if (flag2)
						{
							if (!bool_0 || flag)
							{
								FileLogger logger = variables_0.Logger;
								string message = "Offset Found: " + Conversions.ToString(i) + " : " + string_0;
								logger.LogMessage(ref message);
								return i;
							}
							flag = true;
							flag2 = false;
						}
					}
				}
				catch (Exception ex)
				{
					ProjectData.SetProjectError(ex);
					Exception exception_ = ex;
					string str = exception_.Message + " " + Class2.smethod_4(ref exception_);
					FileLogger logger2 = variables_0.Logger;
					string message = "Error: " + str;
					logger2.LogMessage(ref message);
					ProjectData.ClearProjectError();
				}
				return -1;
			}
		}
	}
}
namespace AutoPico.RPC.Request
{
	public class RpcRequestClient : IMessageHandler
	{
		private IMessageHandler imessageHandler_0;

		public RpcRequestClient(IMessageHandler stream)
		{
			imessageHandler_0 = stream;
		}

		public byte[] HandleRequest(ref byte[] request)
		{
			byte[] request2 = smethod_0(request).method_24();
			return Class69.smethod_0(imessageHandler_0.HandleRequest(ref request2)).method_24();
		}

		public KMSResponse HandleRequest(ref KMSRequest request)
		{
			return null;
		}

		private static Class68 smethod_0(byte[] byte_0)
		{
			int num = byte_0.Length;
			Class68 @class = new Class68();
			@class.method_1(5);
			@class.method_3(0);
			@class.method_5(Enum1.const_0);
			@class.method_7(Enum0.flag_0 | Enum0.flag_1);
			@class.method_9(16u);
			checked
			{
				@class.method_11((ushort)(num + 24));
				@class.method_13(0);
				@class.method_15(2u);
				@class.method_23(byte_0);
				@class.method_17((uint)num);
				@class.method_19(0);
				@class.method_21(0);
				return @class;
			}
		}

		public byte[] HandleRequest1(byte[] request)
		{
			return null;
		}
	}
}
namespace AutoPico.RPC
{
	public class RpcMessageHandler : IMessageHandler
	{
		private readonly ILogger ilogger_0;

		private IMessageHandler imessageHandler_0;

		private IKMSServerSettings ikmsserverSettings_0;

		private IMessageHandler RequestMessageHandler
		{
			get
			{
				return imessageHandler_0;
			}
			set
			{
				imessageHandler_0 = value;
			}
		}

		private IKMSServerSettings Settings
		{
			get
			{
				return ikmsserverSettings_0;
			}
			set
			{
				ikmsserverSettings_0 = value;
			}
		}

		public RpcMessageHandler(IKMSServerSettings settings, IMessageHandler requestMessageHandler, ILogger logger)
		{
			RequestMessageHandler = requestMessageHandler;
			Settings = settings;
			ilogger_0 = logger;
		}

		public byte[] HandleRequest(ref byte[] request)
		{
			Enum1 enum1_ = (Enum1)request[2];
			return method_0(enum1_).HandleRequest(ref request);
		}

		public KMSResponse HandleRequest(ref KMSRequest request)
		{
			return null;
		}

		private IMessageHandler method_0(Enum1 enum1_0)
		{
			return enum1_0 switch
			{
				Enum1.const_11 => new Class60(Settings), 
				Enum1.const_0 => new Class73(RequestMessageHandler, ilogger_0), 
				_ => throw new ApplicationException(Conversions.ToString(Conversions.ToDouble("Unhandled packet type: ") + (double)(int)enum1_0)), 
			};
		}
	}
}
namespace AutoPico.My.Resources
{
	[CompilerGenerated]
	[DebuggerNonUserCode]
	[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
	[HideModuleName]
	[StandardModule]
	internal sealed class Resources
	{
		private static ResourceManager resourceManager_0;

		private static CultureInfo cultureInfo_0;

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static ResourceManager ResourceManager
		{
			get
			{
				if (object.ReferenceEquals(resourceManager_0, null))
				{
					resourceManager_0 = new ResourceManager("AutoPico.Resources", typeof(Resources).Assembly);
				}
				return resourceManager_0;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static CultureInfo Culture
		{
			get
			{
				return cultureInfo_0;
			}
			set
			{
				cultureInfo_0 = value;
			}
		}

		internal static string aquel => ResourceManager.GetString("aquel", cultureInfo_0);

		internal static string aquel32 => ResourceManager.GetString("aquel32", cultureInfo_0);

		internal static string aquel64 => ResourceManager.GetString("aquel64", cultureInfo_0);
	}
}
namespace AutoPico.My
{
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	[CompilerGenerated]
	[GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
	internal sealed class MySettings : ApplicationSettingsBase
	{
		private static MySettings mySettings_0 = (MySettings)(object)SettingsBase.Synchronized((SettingsBase)(object)new MySettings());

		public static MySettings Default => mySettings_0;

		public MySettings()
			: this()
		{
		}
	}
}
namespace NetFwTypeLib
{
	[ComImport]
	[TypeIdentifier]
	[CompilerGenerated]
	[Guid("B5E64FFA-C2C5-444E-A301-FB5E00018050")]
	public interface INetFwAuthorizedApplication
	{
		[DispId(1)]
		string Name
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(1)]
			[return: MarshalAs(UnmanagedType.BStr)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(1)]
			[param: In]
			[param: MarshalAs(UnmanagedType.BStr)]
			set;
		}

		[DispId(2)]
		string ProcessImageFileName
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(2)]
			[return: MarshalAs(UnmanagedType.BStr)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(2)]
			[param: In]
			[param: MarshalAs(UnmanagedType.BStr)]
			set;
		}
	}
	[ComImport]
	[CompilerGenerated]
	[TypeIdentifier]
	[Guid("644EFD52-CCF9-486C-97A2-39F352570B30")]
	public interface INetFwAuthorizedApplications : IEnumerable
	{
		override void _VtblGap1_1();

		[MethodImpl(MethodImplOptions.InternalCall)]
		[DispId(2)]
		void Add([In][MarshalAs(UnmanagedType.Interface)] INetFwAuthorizedApplication inetFwAuthorizedApplication_0);

		[MethodImpl(MethodImplOptions.InternalCall)]
		[DispId(3)]
		void Remove([In][MarshalAs(UnmanagedType.BStr)] string imageFileName);

		override void _VtblGap2_1();

		[MethodImpl(MethodImplOptions.InternalCall)]
		[DispId(-4)]
		[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler, CustomMarshalers, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
		new IEnumerator GetEnumerator();
	}
	[ComImport]
	[TypeIdentifier]
	[CompilerGenerated]
	[Guid("F7898AF5-CAC4-4632-A2EC-DA06E5111AF2")]
	public interface INetFwMgr
	{
		[DispId(1)]
		INetFwPolicy LocalPolicy
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(1)]
			[return: MarshalAs(UnmanagedType.Interface)]
			get;
		}
	}
	[ComImport]
	[Guid("E0483BA0-47FF-4D9C-A6D6-7741D0B195F7")]
	[TypeIdentifier]
	[CompilerGenerated]
	public interface INetFwOpenPort
	{
		[DispId(1)]
		string Name
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(1)]
			[return: MarshalAs(UnmanagedType.BStr)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(1)]
			[param: In]
			[param: MarshalAs(UnmanagedType.BStr)]
			set;
		}

		[DispId(3)]
		NET_FW_IP_PROTOCOL_ Protocol
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(3)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(3)]
			[param: In]
			set;
		}

		[DispId(4)]
		int Port
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(4)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(4)]
			[param: In]
			set;
		}

		override void _VtblGap1_2();
	}
	[ComImport]
	[TypeIdentifier]
	[CompilerGenerated]
	[Guid("C0E9D7FA-E07E-430A-B19A-090CE82D92E2")]
	public interface INetFwOpenPorts : IEnumerable
	{
		override void _VtblGap1_1();

		[MethodImpl(MethodImplOptions.InternalCall)]
		[DispId(2)]
		void Add([In][MarshalAs(UnmanagedType.Interface)] INetFwOpenPort Port);

		[MethodImpl(MethodImplOptions.InternalCall)]
		[DispId(3)]
		void Remove([In] int portNumber, [In] NET_FW_IP_PROTOCOL_ ipProtocol);

		override void _VtblGap2_1();

		[MethodImpl(MethodImplOptions.InternalCall)]
		[DispId(-4)]
		[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler, CustomMarshalers, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
		new IEnumerator GetEnumerator();
	}
	[ComImport]
	[TypeIdentifier]
	[CompilerGenerated]
	[Guid("D46D2478-9AC9-4008-9DC7-5563CE5536CC")]
	public interface INetFwPolicy
	{
		[DispId(1)]
		INetFwProfile CurrentProfile
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(1)]
			[return: MarshalAs(UnmanagedType.Interface)]
			get;
		}
	}
	[ComImport]
	[TypeIdentifier]
	[CompilerGenerated]
	[Guid("174A0DDA-E9F9-449D-993B-21AB667CA456")]
	public interface INetFwProfile
	{
		[DispId(2)]
		bool FirewallEnabled
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(2)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(2)]
			[param: In]
			set;
		}

		[DispId(8)]
		INetFwOpenPorts GloballyOpenPorts
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(8)]
			[return: MarshalAs(UnmanagedType.Interface)]
			get;
		}

		[DispId(10)]
		INetFwAuthorizedApplications AuthorizedApplications
		{
			[MethodImpl(MethodImplOptions.InternalCall)]
			[DispId(10)]
			[return: MarshalAs(UnmanagedType.Interface)]
			get;
		}

		override void _VtblGap1_1();

		override void _VtblGap2_8();

		override void _VtblGap3_1();
	}
	[CompilerGenerated]
	[TypeIdentifier("58fbcf7c-e7a9-467c-80b3-fc65e8fcca08", "NetFwTypeLib.NET_FW_IP_PROTOCOL_")]
	public enum NET_FW_IP_PROTOCOL_
	{
		NET_FW_IP_PROTOCOL_TCP = 6,
		NET_FW_IP_PROTOCOL_UDP = 17,
		NET_FW_IP_PROTOCOL_ANY = 0x100
	}
}
