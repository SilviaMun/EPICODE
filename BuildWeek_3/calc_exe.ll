source_filename = "test"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%0 = type { i32, i32, i32, i32 }
%tagPOINT = type { i32, i32 }
%tagWNDCLASSEXW = type { i32, i32, i32 (i32*, i32, i32, i32)*, i32, i32, i32*, i32*, i32*, i32*, i16*, i16*, i32* }

@global_var_101e238 = local_unnamed_addr constant i32 309
@global_var_1014008 = local_unnamed_addr global i32 32
@global_var_1014018 = global [8 x i16] %wide-string
@global_var_1014d14 = local_unnamed_addr global i32 0
@global_var_101afb8 = local_unnamed_addr constant i32 822083584
@global_var_1016c98 = local_unnamed_addr constant i32 10799103
@global_var_1014044 = local_unnamed_addr global i32 48
@global_var_1014d50 = local_unnamed_addr global i32 0
@global_var_1019c59 = constant i32 0
@global_var_1013110 = local_unnamed_addr constant [7 x i8] c"alSize\00"
@global_var_101906c = constant i32 0
@global_var_1014d80 = local_unnamed_addr global i32 0
@global_var_1014d4c = local_unnamed_addr global i32 0
@global_var_1014d7c = local_unnamed_addr global i32 0
@global_var_1001264 = constant i32 5046304
@global_var_1019984 = local_unnamed_addr constant i32 1587717810
@global_var_1017994 = local_unnamed_addr constant i32 10008059
@global_var_1014de0 = local_unnamed_addr global i32 0
@global_var_1014a48 = local_unnamed_addr global i32 0
@global_var_101406b = local_unnamed_addr global i32 -1
@global_var_1014d54 = global i32 0
@global_var_1014a2e = local_unnamed_addr global i32 0
@global_var_1014a10 = local_unnamed_addr global i32 0
@global_var_101402c = global i32 46
@global_var_1014eec = local_unnamed_addr global i32 0
@global_var_1014d58 = global i32 0
@global_var_1014dad = local_unnamed_addr global i32 0
@global_var_1014de9 = local_unnamed_addr global i32 0
@global_var_1014db8 = local_unnamed_addr global i32 0
@global_var_1014d5f = local_unnamed_addr global i32 0
@global_var_1014d8c = global i32 0
@global_var_1014d88 = local_unnamed_addr global i32 0
@global_var_1014ef4 = local_unnamed_addr global i32 0
@global_var_1014d60 = local_unnamed_addr global i32 0
@global_var_1014d32 = local_unnamed_addr global i32 0
@global_var_1017298 = local_unnamed_addr constant i32 -1
@global_var_1014d1b = local_unnamed_addr global i32 0
@global_var_101e226 = local_unnamed_addr constant i32 20119669
@global_var_1014d22 = local_unnamed_addr global i32 0
@global_var_1018164 = local_unnamed_addr constant i32 11057658
@global_var_10149e0 = local_unnamed_addr global i32 0
@global_var_101d647 = local_unnamed_addr constant [3 x i8] c"PX\00"
@global_var_1014d72 = local_unnamed_addr global i32 0
@global_var_1014490 = local_unnamed_addr global i32 0
@global_var_1014d90 = local_unnamed_addr global i32 0
@global_var_1014d9c = local_unnamed_addr global i32 0
@global_var_1014d5c = local_unnamed_addr global i32 0
@global_var_1014fb3 = local_unnamed_addr global i32 0
@global_var_1017b84 = local_unnamed_addr constant i32 11784959
@global_var_1014d41 = local_unnamed_addr global i32 0
@global_var_1018fef = local_unnamed_addr constant i32 -1699155201
@global_var_1014dc0 = local_unnamed_addr global i32 0
@global_var_1014da6 = local_unnamed_addr global i32 0
@global_var_101d794 = local_unnamed_addr constant i32 512
@global_var_1019384 = local_unnamed_addr constant i32 899522211
@global_var_1014d94 = local_unnamed_addr global i32 0
@global_var_1014c94 = local_unnamed_addr global i32 0
@global_var_1014ef0 = local_unnamed_addr global i32 0
@global_var_1014d11 = local_unnamed_addr global i32 0
@global_var_1014048 = local_unnamed_addr global i32 1
@global_var_1014d89 = global i32 0
@global_var_1014c1b = local_unnamed_addr global i32 0
@global_var_1014db7 = local_unnamed_addr global i32 0
@global_var_1017810 = local_unnamed_addr constant i32 255
@global_var_1014dd2 = local_unnamed_addr global i32 0
@global_var_1014f26 = local_unnamed_addr global i32 0
@global_var_1014d68 = local_unnamed_addr global i32 0
@global_var_101e8cf = local_unnamed_addr constant [418 x i8] c" type=\22win32\22/>\0D\0A<description>Windows Shell</description>\0D\0A<dependency>\0D\0A    <dependentAssembly>\0D\0A        <assemblyIdentity\0D\0A            type=\22win32\22\0D\0A            name=\22Microsoft.Windows.Common-Controls\22\0D\0A            version=\226.0.0.0\22\0D\0A            processorArchitecture=\22x86\22\0D\0A            publicKeyToken=\226595b64144ccf1df\22\0D\0A            language=\22*\22\0D\0A        />\0D\0A    </dependentAssembly>\0D\0A</dependency>\0D\0A</assembly>\0D\0AP\00"
@global_var_101e8af = local_unnamed_addr constant [450 x i8] c"x86\22\0D\0A    version=\225.1.0.0\22\0D\0A    type=\22win32\22/>\0D\0A<description>Windows Shell</description>\0D\0A<dependency>\0D\0A    <dependentAssembly>\0D\0A        <assemblyIdentity\0D\0A            type=\22win32\22\0D\0A            name=\22Microsoft.Windows.Common-Controls\22\0D\0A            version=\226.0.0.0\22\0D\0A            processorArchitecture=\22x86\22\0D\0A            publicKeyToken=\226595b64144ccf1df\22\0D\0A            language=\22*\22\0D\0A        />\0D\0A    </dependentAssembly>\0D\0A</dependency>\0D\0A</assembly>\0D\0AP\00"
@global_var_1014d62 = local_unnamed_addr global i32 0
@global_var_101b398 = local_unnamed_addr constant i32 -5650437
@global_var_1014df8 = local_unnamed_addr global i32 0
@global_var_1014f58 = local_unnamed_addr global i32 0
@global_var_1014efc = local_unnamed_addr global i32 0
@global_var_1014f9d = local_unnamed_addr global i32 0
@global_var_1012909 = local_unnamed_addr constant i32 -1191240268
@global_var_101b9b3 = local_unnamed_addr constant i32 1482318072
@global_var_1014d84 = local_unnamed_addr global i32 0
@global_var_1014d5e = local_unnamed_addr global i32 0
@global_var_1014d48 = local_unnamed_addr global i32 0
@global_var_10149d8 = local_unnamed_addr global i32 0
@global_var_1016a7c = local_unnamed_addr constant i32 10861309
@global_var_1014ddc = local_unnamed_addr global i32 0
@global_var_1014b10 = local_unnamed_addr global i32 0
@global_var_1014b9c = local_unnamed_addr global i32 0
@global_var_1014038 = local_unnamed_addr global i32 44
@global_var_1014b98 = local_unnamed_addr global i32 0
@global_var_1001580 = local_unnamed_addr constant i32 15794275
@global_var_1014d42 = local_unnamed_addr global i32 0
@global_var_101c46c = local_unnamed_addr constant i32 70451232
@global_var_101a810 = local_unnamed_addr constant i32 -2754561
@global_var_101e094 = local_unnamed_addr constant i32 72090683
@global_var_1014f20 = local_unnamed_addr global i32 0
@global_var_1014f18 = local_unnamed_addr global i32 0
@global_var_1014fc4 = local_unnamed_addr global i32 0
@global_var_101ac83 = local_unnamed_addr constant i32 124
@global_var_1014fc2 = local_unnamed_addr global i32 0
@global_var_1014f24 = local_unnamed_addr global i32 0
@global_var_1014f14 = local_unnamed_addr global i32 0
@global_var_10143eb = local_unnamed_addr global i32 256
@global_var_1016604 = local_unnamed_addr constant i32 16711680
@global_var_1014fce = local_unnamed_addr global i32 0
@global_var_101a08e = local_unnamed_addr constant i32 -1073741929
@global_var_1014790 = local_unnamed_addr global i32 1057927868
@global_var_1014f29 = local_unnamed_addr global i32 0
@global_var_1014de3 = global i32 0
@global_var_1013690 = local_unnamed_addr constant [3 x i8] c"tW\00"
@global_var_1012f90 = constant [3 x i8] c"XZ\00"
@global_var_1014f90 = local_unnamed_addr global i32 0
@global_var_1019d90 = local_unnamed_addr constant i32 -4860673
@global_var_1014fa7 = local_unnamed_addr global i32 0
@global_var_1014dfc = local_unnamed_addr global i32 0
@global_var_1014a6a = local_unnamed_addr global i32 0
@global_var_1014f30 = local_unnamed_addr global i32 0
@global_var_1014f28 = global i32 0
@global_var_101a260 = local_unnamed_addr constant i32 0
@global_var_1014f78 = local_unnamed_addr global i32 0
@global_var_101b193 = local_unnamed_addr constant i32 1854129151
@global_var_1014ff8 = local_unnamed_addr global i32 0
@global_var_1014ff6 = global i32 0
@global_var_1014f70 = local_unnamed_addr global i32 0
@global_var_101cb24 = local_unnamed_addr constant i32 1342177280
@global_var_1014fa0 = global i32 0
@global_var_10144cc = local_unnamed_addr global i32 1
@global_var_1014f31 = global i32 0
@global_var_1014f8c = local_unnamed_addr global i32 0
@global_var_1014f98 = local_unnamed_addr global i32 0
@global_var_101454c = global i32 1
@global_var_1014f9c = local_unnamed_addr global i32 0
@global_var_101458c = local_unnamed_addr global i32 6
@global_var_1014608 = global i32 1860424692
@global_var_1014664 = local_unnamed_addr global i32 6
@global_var_1014fb4 = local_unnamed_addr global i32 0
@global_var_1014fb8 = local_unnamed_addr global i32 0
@global_var_1014718 = local_unnamed_addr global i32 6
@global_var_1014fba = local_unnamed_addr global i32 0
@global_var_1014f62 = local_unnamed_addr global i32 0
@global_var_1014f1b = local_unnamed_addr global i32 0
@global_var_1014f50 = local_unnamed_addr global i32 0
@global_var_10147a8 = local_unnamed_addr global i32 6
@global_var_101b2cc = local_unnamed_addr constant i32 0
@global_var_1014fbc = global i32 0
@global_var_1014f71 = local_unnamed_addr global i32 0
@global_var_1014898 = local_unnamed_addr global i32 1
@global_var_1014fcc = local_unnamed_addr global i32 0
@global_var_10148b0 = local_unnamed_addr global i32 2147483647
@global_var_1014fe0 = local_unnamed_addr global i32 0
@global_var_101c5e8 = local_unnamed_addr constant i32 54
@global_var_1014ff4 = global i32 0
@global_var_1014ffd = local_unnamed_addr global i32 0
@global_var_1014f04 = global i32 0
@global_var_10148b8 = global i32 1
@global_var_1014f4c = local_unnamed_addr global i32 0
@global_var_1014f54 = local_unnamed_addr global i32 0
@global_var_1014fec = local_unnamed_addr global i32 0
@global_var_1014f7e = local_unnamed_addr global i32 0
@global_var_1014ea0 = local_unnamed_addr global i32 0
@global_var_1014fac = local_unnamed_addr global i32 0
@global_var_1014fa4 = local_unnamed_addr global i32 0
@global_var_101e5cc = local_unnamed_addr constant [20 x i16] %wide-string
@global_var_1014ffe = local_unnamed_addr global i32 0
@global_var_101c5f8 = local_unnamed_addr constant i32 71042124
@global_var_1014ff0 = global i32 0
@global_var_101dedc = local_unnamed_addr constant i32 72287288
@global_var_101c0fb = local_unnamed_addr constant i32 0
@global_var_1014fd6 = local_unnamed_addr global i32 0
@global_var_1014cbb = local_unnamed_addr global i32 0
@global_var_1017788 = local_unnamed_addr constant i32 255
@global_var_1014f7f = local_unnamed_addr global i32 0
@global_var_1014f10 = local_unnamed_addr global i32 0
@global_var_1014f35 = local_unnamed_addr global i32 0
@global_var_1014fd8 = local_unnamed_addr global i32 0
@global_var_1014fdc = local_unnamed_addr global i32 0
@global_var_1014fd4 = local_unnamed_addr global i32 0
@global_var_1015010 = local_unnamed_addr global i32 0
@global_var_1015018 = local_unnamed_addr global i32 0
@global_var_10149d0 = local_unnamed_addr global i32 1
@global_var_1015004 = local_unnamed_addr global i32 0
@global_var_1015000 = local_unnamed_addr global i32 0
@global_var_1005edd = constant i32 -895287178
@global_var_1012b64 = local_unnamed_addr constant i32 429065503
@0 = external global i32
@1 = internal constant [2 x i8] c"\0A\00"
@global_var_1014010 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@2 = internal constant [2 x i8] c"\93\00"
@global_var_1016b62 = local_unnamed_addr constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1014f84 = external global i8*
@global_var_1014d6c = external global i8*
@global_var_1014d74 = local_unnamed_addr global i8 0
@global_var_101dc2c = local_unnamed_addr constant i16 105
@global_var_1014d98 = external global i8*
@global_var_1014c70 = external global i8*
@global_var_1014d64 = local_unnamed_addr global i8 0
@3 = internal constant [17 x i8] c"\81ia\E6zid\D9[UT\B9\05\05\05\8C\00"
@global_var_101ad90 = local_unnamed_addr constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i32 0, i32 0)
@global_var_1014dca = local_unnamed_addr global i8 0
@global_var_101d390 = external local_unnamed_addr constant i8*
@global_var_1014d15 = local_unnamed_addr global i8 0
@global_var_101ca98 = local_unnamed_addr constant i8 48
@global_var_1014f88 = external global i8*
@global_var_1014300 = local_unnamed_addr global i8 -1
@global_var_1019818 = local_unnamed_addr constant i8 -1
@global_var_1014d78 = local_unnamed_addr global i8 0
@global_var_1014df3 = local_unnamed_addr global i64 0
@global_var_1014f38 = external local_unnamed_addr global i8*
@global_var_1014021 = global i16 27648
@global_var_1014f5c = local_unnamed_addr global i8 0
@global_var_101448d = global i16 0
@global_var_1014402 = external global i8*
@4 = internal constant [2 x i8] c"\01\00"
@global_var_10144e8 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0)
@global_var_101456c = local_unnamed_addr global i8 1
@global_var_1014fb0 = external local_unnamed_addr global i8*
@global_var_1014f80 = local_unnamed_addr global i8 0
@5 = internal constant [2 x i8] c"\01\00"
@global_var_10147c8 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0)
@6 = internal constant [2 x i8] c"\01\00"
@global_var_1014880 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0)
@global_var_1014fc8 = local_unnamed_addr global i8 0
@global_var_10148a5 = local_unnamed_addr global i8 -1
@global_var_10148f5 = external global i8*
@global_var_1014fe8 = external local_unnamed_addr global i8*
@7 = internal constant [81 x i8] c"\FF\B9\9C\FF\FF\B3\96\FF\C9\87q\FF\ED\B3\96\FF\FF\C7\A7\FF\ACxf\FF\A6rc\FF\B7xg\FF\B1vb\FF\D5\9B\82\FF\FF\C7\A7\FF\FF\C6\A7\FF\FF\C6\A7\FF\F6\BD\9F\FF\F3\B9\9C\FF\FF\C5\A6\FF\FF\C6\A7\FF\FF\C6\A7\FF\FF\C6\A9\FF\9Dzn\E9\00"
@global_var_1019230 = local_unnamed_addr constant i8* getelementptr inbounds ([81 x i8], [81 x i8]* @7, i32 0, i32 0)
@global_var_1014956 = external global i8*
@global_var_10148a8 = global i64* inttoptr (i32 2 to i64*)
@8 = internal constant [6 x i8] c"\FF\FF\FF\FF\02\00"
@global_var_10148a4 = global i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i32 0, i32 0)
@global_var_1014f94 = local_unnamed_addr global i8 0
@global_var_1014fa8 = local_unnamed_addr global i8 0
@global_var_1014fa9 = external global i8*
@global_var_1014f40 = external global i8*
@global_var_1014f64 = local_unnamed_addr global i8 0
@global_var_1014f60 = local_unnamed_addr global i8 0
@global_var_1014f86 = local_unnamed_addr global i8 0
@global_var_1014f7c = local_unnamed_addr global i16 0
@global_var_1014fe6 = local_unnamed_addr global i8 0

declare i32 @unknown_101() local_unnamed_addr

declare i32 @unknown_5c13(i16) local_unnamed_addr

declare i32 @unknown_669d() local_unnamed_addr

declare i32 @unknown_37bd1() local_unnamed_addr

declare i32 @unknown_4c2c0() local_unnamed_addr

declare i32 @unknown_c8d0c(i16) local_unnamed_addr

declare i32 @unknown_c8d54(i16) local_unnamed_addr

declare i32 @unknown_11f0e4(i32) local_unnamed_addr

declare i32 @unknown_127bfb(i32) local_unnamed_addr

declare i32 @unknown_1edd3c(i16) local_unnamed_addr

declare i32 @unknown_207bd1(i32, i32) local_unnamed_addr

declare i32 @unknown_21d9fb() local_unnamed_addr

declare i32 @unknown_2517a5(i32) local_unnamed_addr

declare i32 @unknown_26be29() local_unnamed_addr

declare i32 @unknown_287bb1() local_unnamed_addr

declare i32 @unknown_290254(i32) local_unnamed_addr

declare i32 @unknown_2d34c1(i32) local_unnamed_addr

declare i32 @unknown_3884c1(i32) local_unnamed_addr

declare i32 @unknown_3cf25c() local_unnamed_addr

declare i32 @unknown_3e0ee5(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_3f7bc1(i32) local_unnamed_addr

declare i32 @unknown_507c26() local_unnamed_addr

declare i32 @unknown_545c26() local_unnamed_addr

declare i32 @unknown_547c4c() local_unnamed_addr

declare i32 @unknown_62bd6f(i32, i32) local_unnamed_addr

declare i32 @unknown_650a33(i32) local_unnamed_addr

declare i32 @unknown_6686c8(i32) local_unnamed_addr

declare i32 @unknown_6a7bac() local_unnamed_addr

declare i32 @unknown_6b7bc1() local_unnamed_addr

declare i32 @unknown_6b7bd1(i32) local_unnamed_addr

declare i32 @unknown_6e81cc(i32) local_unnamed_addr

declare i32 @unknown_71bc54(i32, i32) local_unnamed_addr

declare i32 @unknown_73a5d1(i32) local_unnamed_addr

declare i32 @unknown_747b7a(i16, i32, i32, i32, i32*, i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_782cc1() local_unnamed_addr

declare i32 @unknown_787bfb() local_unnamed_addr

declare i32 @unknown_7b548f(i32) local_unnamed_addr

declare i32 @unknown_7e7ba9() local_unnamed_addr

declare i32 @unknown_7e8642(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_82dc58(i32) local_unnamed_addr

declare i32 @unknown_849632() local_unnamed_addr

declare i32 @unknown_8f00fb(i32) local_unnamed_addr

declare i32 @unknown_905132(i32) local_unnamed_addr

declare i32 @unknown_9185fe(i16) local_unnamed_addr

declare i32 @unknown_935454() local_unnamed_addr

declare i32 @unknown_947bfb(i32, i32) local_unnamed_addr

declare i32 @unknown_977bc1(i32) local_unnamed_addr

declare i32 @unknown_97c309(i32, i32) local_unnamed_addr

declare i32 @unknown_9961c1(i32) local_unnamed_addr

declare i32 @unknown_99bdb7() local_unnamed_addr

declare i32 @unknown_a21a3c(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_a25c15() local_unnamed_addr

declare i32 @unknown_a6ce2f() local_unnamed_addr

declare i32 @unknown_a77bc1() local_unnamed_addr

declare i32 @unknown_ae7c60(i32*, i32) local_unnamed_addr

declare i32 @unknown_b47bc1() local_unnamed_addr

declare i32 @unknown_bf7bd1(i32) local_unnamed_addr

declare i32 @unknown_c2e8d1(i32) local_unnamed_addr

declare i32 @unknown_c68cf0() local_unnamed_addr

declare i32 @unknown_cd7c4c() local_unnamed_addr

declare i32 @unknown_d17bd1() local_unnamed_addr

declare i32 @unknown_d57b9b() local_unnamed_addr

declare i32 @unknown_d74ab2(i32) local_unnamed_addr

declare i32 @unknown_dff0e8(i16, i32) local_unnamed_addr

declare i32 @unknown_e87b6f() local_unnamed_addr

declare i32 @unknown_e97c27() local_unnamed_addr

declare i32 @unknown_ed7bfb(i32) local_unnamed_addr

declare i32 @unknown_f272c1(i32) local_unnamed_addr

declare i32 @unknown_fbbf46(i32) local_unnamed_addr

declare i32 @unknown_fc724d(i32, i32, i32*) local_unnamed_addr

declare i32 @unknown_ffa178(i32) local_unnamed_addr

declare i32 @unknown_ffb7c1(i32) local_unnamed_addr

declare i32 @unknown_ffd1fb(i32) local_unnamed_addr

declare i32 @unknown_ffd5d1(i32) local_unnamed_addr

declare i32 @unknown_ffe3c1() local_unnamed_addr

declare i32 @unknown_ffe944() local_unnamed_addr

declare i32 @unknown_ffeec1(i32) local_unnamed_addr

declare i32 @unknown_fff4c1(i32) local_unnamed_addr

declare i32 @unknown_10001c1(i32) local_unnamed_addr

declare i32 @unknown_1000242() local_unnamed_addr

declare i32 @unknown_1000ac1(i32) local_unnamed_addr

declare i32 @unknown_1000b3f() local_unnamed_addr

declare i32 @unknown_1000cd1() local_unnamed_addr

declare i32 @unknown_1000db0() local_unnamed_addr

declare i32 @RegOpenKeyExA(i32*, i8*, i32, i32, i32**) local_unnamed_addr

declare i32 @SetTextColor(i32*, i32) local_unnamed_addr

declare i1 @GlobalUnlock(i32*) local_unnamed_addr

declare i32 @lstrlenW(i16*) local_unnamed_addr

declare i32* @LocalFree(i32*) local_unnamed_addr

declare i32* @LocalAlloc(i32, i32) local_unnamed_addr

declare i32* @GetMenu(i32*) local_unnamed_addr

declare i1 @HideCaret(i32*) local_unnamed_addr

declare i32 @GetDlgCtrlID(i32*) local_unnamed_addr

declare i32* @ChildWindowFromPoint(i32*, %tagPOINT) local_unnamed_addr

declare i32 @DefWindowProcW(i32*, i32, i32, i32) local_unnamed_addr

declare i1 @CheckRadioButton(i32*, i32, i32, i32) local_unnamed_addr

declare i16 @RegisterClassExW(%tagWNDCLASSEXW*) local_unnamed_addr

declare i32* @GetSysColorBrush(i32) local_unnamed_addr

declare i32* @LoadCursorW(i32*, i16*) local_unnamed_addr

declare i32 @SendMessageW(i32*, i32, i32, i32) local_unnamed_addr

declare i1 @CheckMenuRadioItem(i32*, i32, i32, i32, i32) local_unnamed_addr

declare i1 @EnableWindow(i32*, i1) local_unnamed_addr

declare i1 @GetProcessDefaultLayout(i32*) local_unnamed_addr

declare i16* @wcschr(i16*, i16) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i16* @_wcsrev(i32*) local_unnamed_addr

declare void @_initterm(void ()**, void ()**) local_unnamed_addr

declare i32 @"?terminate@@YAXXZ"() local_unnamed_addr

define i32 @function_100125b(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13, i32 %arg14, i32 %arg15, i32 %arg16, i32 %arg17, i32 %arg18, i32 %arg19, i32 %arg20, i32 %arg21, i32 %arg22, i32 %arg23) local_unnamed_addr {
dec_label_pc_100125b:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !0
  %edx.0.reg2mem = alloca i32, !insn.addr !0
  %.pre-phi.reg2mem = alloca i16, !insn.addr !0
  %.pre-phi12.reg2mem = alloca i8, !insn.addr !0
  %storemerge.reg2mem = alloca i32, !insn.addr !0
  %storemerge4.reg2mem = alloca i32, !insn.addr !0
  %edi = alloca i32, align 4
  %esi = alloca i32, align 4
  %ebp = alloca i32, align 4
  %ebx = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = call i16 @__decompiler_undefined_function_1()
  %stack_var_94 = alloca i32, align 4
  store i32 %arg21, i32* %stack_var_94, align 4
  %stack_var_62 = alloca i32, align 4
  %stack_var_34 = alloca i32, align 4
  store i32 %arg8, i32* %stack_var_34, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_4, align 4
  %3 = and i32 %1, 65280, !insn.addr !0
  %4 = load i32, i32* %eax, align 4, !insn.addr !0
  %5 = add i32 %4, %3
  %6 = bitcast i32* %ebx to i8*
  %7 = load i8, i8* %6, align 4, !insn.addr !1
  %8 = trunc i32 %4 to i8, !insn.addr !1
  %9 = add i8 %7, %8, !insn.addr !1
  %10 = load i32, i32* %ebx, align 4, !insn.addr !1
  %11 = inttoptr i32 %10 to i8*, !insn.addr !1
  store i8 %9, i8* %11, align 1, !insn.addr !1
  %12 = mul i32 %0, 257
  %13 = and i32 %12, 65280, !insn.addr !2
  %14 = and i32 %0, -65281, !insn.addr !2
  %15 = or i32 %13, %14, !insn.addr !2
  %16 = bitcast i32* %eax to i8*
  %17 = load i8, i8* %16, align 4, !insn.addr !3
  %18 = load i32, i32* %eax, align 4
  %19 = udiv i32 %18, 256, !insn.addr !3
  %20 = trunc i32 %19 to i8, !insn.addr !3
  %21 = add i8 %17, %20, !insn.addr !3
  %22 = inttoptr i32 %18 to i8*, !insn.addr !3
  store i8 %21, i8* %22, align 1, !insn.addr !3
  %23 = bitcast i32* %ebp to i8*
  %24 = load i8, i8* %23, align 4, !insn.addr !4
  %25 = trunc i32 %1 to i8, !insn.addr !4
  %26 = add i8 %24, %25, !insn.addr !4
  %27 = load i32, i32* %ebp, align 4, !insn.addr !4
  %28 = inttoptr i32 %27 to i8*, !insn.addr !4
  store i8 %26, i8* %28, align 1, !insn.addr !4
  %29 = bitcast i32* %edi to i8*
  %30 = load i8, i8* %29, align 4, !insn.addr !5
  %31 = add i8 %30, %25, !insn.addr !5
  %32 = load i32, i32* %edi, align 4, !insn.addr !5
  %33 = inttoptr i32 %32 to i8*, !insn.addr !5
  store i8 %31, i8* %33, align 1, !insn.addr !5
  %34 = load i8, i8* %6, align 4, !insn.addr !6
  %35 = udiv i32 %12, 256, !insn.addr !6
  %36 = trunc i32 %35 to i8, !insn.addr !6
  %37 = add i8 %34, %36, !insn.addr !6
  %38 = load i32, i32* %ebx, align 4, !insn.addr !6
  %39 = inttoptr i32 %38 to i8*, !insn.addr !6
  store i8 %37, i8* %39, align 1, !insn.addr !6
  %40 = inttoptr i32 %15 to i8*, !insn.addr !7
  %41 = load i8, i8* %40, align 1, !insn.addr !7
  %42 = add i8 %41, %36, !insn.addr !7
  store i8 %42, i8* %40, align 1, !insn.addr !7
  %43 = trunc i32 %15 to i16, !insn.addr !8
  %44 = load i32, i32* %esi, align 4, !insn.addr !8
  call void @__asm_outsd(i16 %43, i32 %44), !insn.addr !8
  %45 = load i8, i8* %23, align 4, !insn.addr !9
  %46 = add i8 %45, %36, !insn.addr !9
  %47 = load i32, i32* %ebp, align 4, !insn.addr !9
  %48 = inttoptr i32 %47 to i8*, !insn.addr !9
  store i8 %46, i8* %48, align 1, !insn.addr !9
  %49 = call i32 @__asm_int1(), !insn.addr !10
  %50 = bitcast i32* %esi to i8*
  %51 = load i8, i8* %50, align 4, !insn.addr !11
  %52 = udiv i32 %5, 256, !insn.addr !11
  %53 = trunc i32 %52 to i8, !insn.addr !11
  %54 = add i8 %51, %53, !insn.addr !11
  %55 = load i32, i32* %esi, align 4, !insn.addr !11
  %56 = inttoptr i32 %55 to i8*, !insn.addr !11
  store i8 %54, i8* %56, align 1, !insn.addr !11
  %57 = udiv i32 %49, 256, !insn.addr !12
  %58 = trunc i32 %57 to i8, !insn.addr !12
  %59 = add i8 %58, %53, !insn.addr !12
  %60 = and i8 %58, 15, !insn.addr !12
  %61 = and i8 %53, 15, !insn.addr !12
  %62 = add nuw nsw i8 %60, %61, !insn.addr !12
  %63 = icmp ugt i8 %62, 15, !insn.addr !12
  %64 = icmp ult i8 %59, %58, !insn.addr !12
  %65 = zext i8 %59 to i32, !insn.addr !12
  %66 = mul i32 %65, 256, !insn.addr !12
  %67 = and i32 %49, -65281, !insn.addr !12
  %68 = or i32 %66, %67, !insn.addr !12
  store i32 %68, i32* %eax, align 4, !insn.addr !12
  %69 = trunc i32 %49 to i8, !insn.addr !13
  %70 = and i8 %69, 14, !insn.addr !13
  %71 = icmp ugt i8 %70, 9, !insn.addr !13
  %72 = or i1 %71, %63, !insn.addr !13
  %73 = icmp ugt i8 %69, -103
  %74 = or i1 %73, %64
  br i1 %72, label %75, label %80, !insn.addr !13

; <label>:75:                                     ; preds = %dec_label_pc_100125b
  %.v3 = select i1 %74, i32 154, i32 250
  %76 = add i32 %.v3, %49, !insn.addr !13
  %77 = and i32 %76, 255, !insn.addr !13
  %78 = and i32 %68, -256, !insn.addr !13
  %79 = or i32 %77, %78, !insn.addr !13
  store i32 %79, i32* %storemerge4.reg2mem, !insn.addr !13
  br label %dec_label_pc_100128a, !insn.addr !13

; <label>:80:                                     ; preds = %dec_label_pc_100125b
  %81 = add i32 %49, 160, !insn.addr !13
  %82 = select i1 %74, i32 %81, i32 %49, !insn.addr !13
  %83 = and i32 %82, 255, !insn.addr !13
  %84 = and i32 %68, -256, !insn.addr !13
  %85 = or i32 %84, %83, !insn.addr !13
  store i32 %85, i32* %storemerge4.reg2mem, !insn.addr !13
  br label %dec_label_pc_100128a, !insn.addr !13

dec_label_pc_100128a:                             ; preds = %75, %80
  %86 = and i32 %5, 65280, !insn.addr !0
  %87 = and i32 %1, -65281, !insn.addr !0
  %88 = or i32 %86, %87, !insn.addr !0
  %storemerge4.reload = load i32, i32* %storemerge4.reg2mem
  store i32 %storemerge4.reload, i32* %eax, align 4
  %89 = inttoptr i32 %storemerge4.reload to i32*, !insn.addr !14
  %90 = load i32, i32* %89, align 4, !insn.addr !14
  %91 = xor i32 %90, %storemerge4.reload, !insn.addr !14
  %92 = inttoptr i32 %91 to i8*, !insn.addr !15
  %93 = load i8, i8* %92, align 1, !insn.addr !15
  %94 = trunc i32 %91 to i8, !insn.addr !15
  %95 = xor i8 %93, %94, !insn.addr !15
  %96 = add i8 %95, %94, !insn.addr !16
  store i8 %96, i8* %92, align 1, !insn.addr !16
  %97 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !17
  %98 = add i32 %88, 1964666624, !insn.addr !18
  %99 = inttoptr i32 %98 to i8*, !insn.addr !18
  %100 = load i8, i8* %99, align 1, !insn.addr !18
  %101 = add i8 %100, %36, !insn.addr !18
  store i8 %101, i8* %99, align 1, !insn.addr !18
  %102 = load i8, i8* %6, align 4, !insn.addr !19
  %103 = add i8 %102, %36, !insn.addr !19
  %104 = load i32, i32* %ebx, align 4, !insn.addr !19
  %105 = inttoptr i32 %104 to i8*, !insn.addr !19
  store i8 %103, i8* %105, align 1, !insn.addr !19
  %106 = load i32, i32* %stack_var_4, align 4, !insn.addr !20
  store i32 %97, i32* %edi, align 4, !insn.addr !20
  store i32 %106, i32* %esi, align 4, !insn.addr !20
  store i32 %arg3, i32* %ebp, align 4, !insn.addr !20
  store i32 %arg4, i32* %ebx, align 4, !insn.addr !20
  %107 = inttoptr i32 %106 to i8*, !insn.addr !21
  %108 = load i8, i8* %107, align 1, !insn.addr !21
  %109 = udiv i32 %arg6, 256, !insn.addr !21
  %110 = trunc i32 %109 to i8, !insn.addr !21
  %111 = add i8 %108, %110, !insn.addr !21
  store i8 %111, i8* %107, align 1, !insn.addr !21
  %112 = call i8 @__readfsbyte(i32 %arg7), !insn.addr !22
  %113 = trunc i32 %arg7 to i8, !insn.addr !22
  %114 = add i8 %112, %113, !insn.addr !22
  call void @__writefsbyte(i32 %arg7, i8 %114), !insn.addr !22
  %115 = inttoptr i32 %arg7 to i8*, !insn.addr !23
  %116 = load i8, i8* %115, align 1, !insn.addr !23
  %117 = add i8 %116, %113, !insn.addr !23
  store i8 %117, i8* %115, align 1, !insn.addr !23
  %118 = inttoptr i32 %arg7 to i32*, !insn.addr !24
  %119 = load i32, i32* %118, align 4, !insn.addr !24
  %120 = mul i32 %119, 110, !insn.addr !24
  store i32 %120, i32* %eax, align 4, !insn.addr !24
  %121 = add i32 %97, -16, !insn.addr !25
  %122 = inttoptr i32 %121 to i8*, !insn.addr !25
  %123 = load i8, i8* %122, align 4, !insn.addr !25
  %124 = udiv i32 %arg5, 256, !insn.addr !25
  %125 = trunc i32 %124 to i8, !insn.addr !25
  store i8 %125, i8* %122, align 4, !insn.addr !25
  %126 = inttoptr i32 %120 to i8*, !insn.addr !26
  %127 = load i8, i8* %126, align 2, !insn.addr !26
  %128 = trunc i32 %120 to i8, !insn.addr !26
  %factor = mul i8 %128, 2
  %129 = add i8 %127, %factor, !insn.addr !27
  store i8 %129, i8* %126, align 2, !insn.addr !27
  %130 = inttoptr i32 %arg4 to i8*, !insn.addr !28
  %131 = load i8, i8* %130, align 1, !insn.addr !28
  %132 = add i8 %131, %110, !insn.addr !28
  store i8 %132, i8* %130, align 1, !insn.addr !28
  %133 = add i32 %arg3, 101, !insn.addr !29
  %134 = add i32 %133, %97, !insn.addr !29
  %135 = inttoptr i32 %134 to i8*, !insn.addr !29
  %136 = load i8, i8* %135, align 1, !insn.addr !29
  %137 = add i8 %136, %128, !insn.addr !29
  %138 = xor i8 %137, %136, !insn.addr !29
  %139 = xor i8 %137, %128, !insn.addr !29
  %140 = and i8 %138, %139, !insn.addr !29
  %141 = icmp slt i8 %140, 0, !insn.addr !29
  %142 = icmp eq i8 %137, 0, !insn.addr !29
  %143 = icmp slt i8 %137, 0, !insn.addr !29
  store i8 %137, i8* %135, align 1, !insn.addr !29
  %144 = icmp eq i1 %143, %141, !insn.addr !30
  %145 = icmp eq i1 %142, false, !insn.addr !30
  %146 = icmp eq i1 %144, %145, !insn.addr !30
  br i1 %146, label %dec_label_pc_1001316, label %dec_label_pc_10012b3, !insn.addr !30

dec_label_pc_10012b3:                             ; preds = %dec_label_pc_100128a
  %147 = and i32 %arg1, 1024, !insn.addr !31
  %148 = icmp ne i32 %147, 0, !insn.addr !31
  %149 = zext i16 %2 to i32
  %150 = inttoptr i32 %149 to i32*, !insn.addr !32
  %151 = inttoptr i32 %arg6 to i8*, !insn.addr !33
  %152 = load i8, i8* %151, align 1, !insn.addr !33
  %153 = add i8 %152, %110, !insn.addr !33
  store i8 %153, i8* %151, align 1, !insn.addr !33
  %154 = load i32, i32* %eax, align 4
  %155 = inttoptr i32 %154 to i32*, !insn.addr !34
  %156 = load i32, i32* %155, align 4, !insn.addr !34
  %157 = and i32 %156, %154, !insn.addr !34
  store i32 %157, i32* %155, align 4, !insn.addr !34
  %158 = sext i16 %2 to i32, !insn.addr !35
  %159 = load i32, i32* %stack_var_34, align 4, !insn.addr !35
  store i32 %arg9, i32* %ebp, align 4, !insn.addr !35
  store i32 %arg10, i32* %ebx, align 4, !insn.addr !35
  store i32 %arg13, i32* %eax, align 4, !insn.addr !35
  %factor5 = mul i32 %arg13, 2
  %160 = add i32 %factor5, -109, !insn.addr !36
  %161 = inttoptr i32 %160 to i8*, !insn.addr !36
  %162 = load i8, i8* %161, align 1, !insn.addr !36
  %163 = udiv i32 %arg12, 256, !insn.addr !36
  %164 = trunc i32 %163 to i8, !insn.addr !36
  %165 = add i8 %162, %164, !insn.addr !36
  store i8 %165, i8* %161, align 1, !insn.addr !36
  %166 = inttoptr i32 %159 to i32*, !insn.addr !37
  %167 = load i32, i32* %166, align 4, !insn.addr !37
  store i32 %167, i32* %150, align 4, !insn.addr !37
  %168 = select i1 %148, i32 -4, i32 4, !insn.addr !37
  %169 = add nsw i32 %168, %158, !insn.addr !37
  store i32 %169, i32* %edi, align 4, !insn.addr !37
  %170 = and i32 %arg12, 65280, !insn.addr !38
  %171 = add i32 %170, %arg10
  %172 = and i32 %171, 65280, !insn.addr !38
  %173 = and i32 %arg12, -65281, !insn.addr !38
  %174 = or i32 %172, %173, !insn.addr !38
  %175 = inttoptr i32 %arg13 to i8*, !insn.addr !39
  %176 = load i8, i8* %175, align 1, !insn.addr !39
  %177 = trunc i32 %arg13 to i8, !insn.addr !39
  %178 = add i8 %176, %177, !insn.addr !39
  store i8 %178, i8* %175, align 1, !insn.addr !39
  %179 = inttoptr i32 %arg9 to i8*, !insn.addr !40
  %180 = load i8, i8* %179, align 1, !insn.addr !40
  %181 = trunc i32 %arg11 to i8
  %182 = add i8 %180, %181, !insn.addr !40
  store i8 %182, i8* %179, align 1, !insn.addr !40
  %183 = load i32, i32* %ebx, align 4, !insn.addr !41
  %184 = add i32 %183, -57, !insn.addr !41
  %185 = call i8 @__readgsbyte(i32 %184), !insn.addr !41
  %186 = add i8 %185, %181, !insn.addr !41
  %187 = load i32, i32* %ebx, align 4, !insn.addr !41
  %188 = add i32 %187, -57, !insn.addr !41
  call void @__writegsbyte(i32 %188, i8 %186), !insn.addr !41
  %189 = call i8 @__asm_in.1(i8 0), !insn.addr !42
  %190 = sext i8 %189 to i32, !insn.addr !42
  %191 = load i32, i32* %eax, align 4, !insn.addr !42
  %192 = and i32 %191, -256, !insn.addr !42
  %193 = or i32 %192, %190, !insn.addr !42
  store i32 %193, i32* %eax, align 4, !insn.addr !42
  store i32 %arg11, i32* %esi, align 4, !insn.addr !43
  %194 = inttoptr i32 %193 to i8*, !insn.addr !44
  %195 = load i8, i8* %194, align 1, !insn.addr !44
  %factor6 = mul i8 %189, 2
  %196 = add i8 %195, %factor6, !insn.addr !45
  store i8 %196, i8* %194, align 1, !insn.addr !45
  %197 = trunc i32 %arg11 to i16
  %198 = call i8 @__asm_insb(i16 %197), !insn.addr !46
  %199 = load i32, i32* %edi, align 4, !insn.addr !46
  %200 = inttoptr i32 %199 to i8*, !insn.addr !46
  store i8 %198, i8* %200, align 1, !insn.addr !46
  %201 = inttoptr i32 %174 to i8*, !insn.addr !47
  %202 = load i8, i8* %201, align 1, !insn.addr !47
  %203 = udiv i32 %193, 256, !insn.addr !47
  %204 = trunc i32 %203 to i8, !insn.addr !47
  %205 = add i8 %202, %204, !insn.addr !47
  %206 = icmp slt i8 %205, 0, !insn.addr !47
  store i8 %205, i8* %201, align 1, !insn.addr !47
  %207 = icmp eq i1 %206, false, !insn.addr !48
  br i1 %207, label %dec_label_pc_10012fd, label %dec_label_pc_10012da, !insn.addr !48

dec_label_pc_10012da:                             ; preds = %dec_label_pc_10012b3
  %208 = load i32, i32* %esi, align 4, !insn.addr !49
  %209 = inttoptr i32 %208 to i32*, !insn.addr !49
  %210 = load i32, i32* %209, align 4, !insn.addr !49
  call void @__asm_outsd(i16 %197, i32 %210), !insn.addr !49
  %211 = load i32, i32* %edi, align 4, !insn.addr !50
  %212 = add i32 %211, 29696, !insn.addr !50
  %213 = inttoptr i32 %212 to i8*, !insn.addr !50
  %214 = load i8, i8* %213, align 1, !insn.addr !50
  %215 = udiv i32 %171, 256, !insn.addr !50
  %216 = trunc i32 %215 to i8, !insn.addr !50
  %217 = add i8 %214, %216, !insn.addr !50
  store i8 %217, i8* %213, align 1, !insn.addr !50
  %218 = load i32, i32* %eax, align 4
  %219 = inttoptr i32 %218 to i8*, !insn.addr !51
  %220 = load i8, i8* %219, align 1, !insn.addr !51
  %221 = trunc i32 %218 to i8, !insn.addr !51
  %222 = add i8 %220, %221, !insn.addr !51
  store i8 %222, i8* %219, align 1, !insn.addr !51
  %223 = load i32, i32* %ebp, align 4
  %224 = inttoptr i32 %223 to i8*, !insn.addr !52
  %225 = load i8, i8* %224, align 1, !insn.addr !52
  %226 = load i32, i32* %eax, align 4, !insn.addr !52
  %227 = trunc i32 %226 to i8, !insn.addr !52
  %228 = add i8 %225, %227, !insn.addr !52
  store i8 %228, i8* %224, align 1, !insn.addr !52
  %229 = load i32, i32* %esi, align 4, !insn.addr !53
  %230 = inttoptr i32 %229 to i8*, !insn.addr !53
  %231 = load i8, i8* %230, align 1, !insn.addr !53
  %232 = load i32, i32* %ebx, align 4, !insn.addr !53
  %233 = udiv i32 %232, 256, !insn.addr !53
  %234 = trunc i32 %233 to i8, !insn.addr !53
  %235 = add i8 %231, %234, !insn.addr !53
  store i8 %235, i8* %230, align 1, !insn.addr !53
  %236 = load i32, i32* %eax, align 4
  %237 = inttoptr i32 %236 to i32*, !insn.addr !54
  %238 = load i32, i32* %237, align 4, !insn.addr !54
  store i32 %236, i32* %237, align 4, !insn.addr !54
  %239 = add i32 %238, -1, !insn.addr !55
  %240 = load i32, i32* %ebx, align 4, !insn.addr !56
  store i32 %239, i32* %ebx, align 4, !insn.addr !56
  %241 = inttoptr i32 %240 to i8*, !insn.addr !57
  %242 = load i8, i8* %241, align 1, !insn.addr !57
  %243 = trunc i32 %240 to i8, !insn.addr !57
  %244 = add i8 %242, %243, !insn.addr !57
  store i8 %244, i8* %241, align 1, !insn.addr !57
  store i32 %arg14, i32* %edi, align 4, !insn.addr !58
  store i32 %arg15, i32* %esi, align 4, !insn.addr !58
  store i32 %arg16, i32* %ebp, align 4, !insn.addr !58
  store i32 %arg17, i32* %ebx, align 4, !insn.addr !58
  store i32 %arg20, i32* %eax, align 4, !insn.addr !58
  %factor7 = mul i32 %arg20, 2
  %245 = add i32 %factor7, 99, !insn.addr !59
  %246 = inttoptr i32 %245 to i8*, !insn.addr !59
  %247 = load i8, i8* %246, align 1, !insn.addr !59
  %248 = udiv i32 %arg19, 256, !insn.addr !59
  %249 = trunc i32 %248 to i8, !insn.addr !59
  %250 = add i8 %247, %249, !insn.addr !59
  store i8 %250, i8* %246, align 1, !insn.addr !59
  %251 = inttoptr i32 %arg16 to i8*, !insn.addr !60
  %252 = load i8, i8* %251, align 1, !insn.addr !60
  %253 = trunc i32 %arg19 to i8, !insn.addr !60
  %254 = add i8 %252, %253, !insn.addr !60
  %255 = icmp ult i8 %254, %252, !insn.addr !60
  store i8 %254, i8* %251, align 1, !insn.addr !60
  %256 = icmp eq i1 %255, false, !insn.addr !61
  %257 = load i32, i32* %eax, align 4
  br i1 %256, label %dec_label_pc_1001364, label %dec_label_pc_10012fc, !insn.addr !61

dec_label_pc_10012fc:                             ; preds = %dec_label_pc_10012da
  ret i32 %257, !insn.addr !61

dec_label_pc_10012fd:                             ; preds = %dec_label_pc_10012b3
  %258 = load i32, i32* %eax, align 4, !insn.addr !62
  %259 = inttoptr i32 %258 to i8*, !insn.addr !62
  %260 = load i8, i8* %259, align 1, !insn.addr !62
  %261 = add i8 %260, %181, !insn.addr !62
  %262 = and i8 %260, 15, !insn.addr !62
  %263 = and i8 %181, 15, !insn.addr !62
  %264 = add nuw nsw i8 %262, %263, !insn.addr !62
  %265 = icmp ugt i8 %264, 15, !insn.addr !62
  %266 = icmp ult i8 %261, %260, !insn.addr !62
  store i8 %261, i8* %259, align 1, !insn.addr !62
  %267 = load i32, i32* %eax, align 4, !insn.addr !63
  %268 = trunc i32 %267 to i8, !insn.addr !63
  %269 = and i8 %268, 14, !insn.addr !63
  %270 = icmp ugt i8 %269, 9, !insn.addr !63
  %271 = or i1 %265, %270, !insn.addr !63
  %272 = icmp ugt i8 %268, -103
  %273 = or i1 %266, %272
  br i1 %271, label %274, label %279, !insn.addr !63

; <label>:274:                                    ; preds = %dec_label_pc_10012fd
  %.v = select i1 %273, i32 154, i32 250
  %275 = add i32 %.v, %267, !insn.addr !63
  %276 = and i32 %275, 255, !insn.addr !63
  %277 = and i32 %267, -256, !insn.addr !63
  %278 = or i32 %276, %277, !insn.addr !63
  store i32 %278, i32* %storemerge.reg2mem, !insn.addr !63
  br label %285, !insn.addr !63

; <label>:279:                                    ; preds = %dec_label_pc_10012fd
  %280 = add i32 %267, 160, !insn.addr !63
  %281 = select i1 %273, i32 %280, i32 %267, !insn.addr !63
  %282 = and i32 %281, 255, !insn.addr !63
  %283 = and i32 %267, -256, !insn.addr !63
  %284 = or i32 %282, %283, !insn.addr !63
  store i32 %284, i32* %storemerge.reg2mem, !insn.addr !63
  br label %285, !insn.addr !63

; <label>:285:                                    ; preds = %274, %279
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %storemerge.reload, i32* %eax, align 4
  %286 = load i32, i32* %ebp, align 4, !insn.addr !64
  %287 = inttoptr i32 %286 to i8*, !insn.addr !64
  %288 = load i8, i8* %287, align 1, !insn.addr !64
  %289 = udiv i32 %171, 256, !insn.addr !64
  %290 = trunc i32 %289 to i8, !insn.addr !64
  %291 = add i8 %288, %290, !insn.addr !64
  store i8 %291, i8* %287, align 1, !insn.addr !64
  %292 = icmp slt i8 %291, 1, !insn.addr !65
  store i8 %181, i8* %.pre-phi12.reg2mem, !insn.addr !65
  store i16 %197, i16* %.pre-phi.reg2mem, !insn.addr !65
  store i32 %arg11, i32* %edx.0.reg2mem, !insn.addr !65
  store i32* %stack_var_62, i32** %esp.0.in.reg2mem, !insn.addr !65
  br i1 %292, label %dec_label_pc_100132b, label %dec_label_pc_1001306, !insn.addr !65

dec_label_pc_1001306:                             ; preds = %285
  %293 = load i8, i8* %201, align 1, !insn.addr !66
  %294 = add i8 %293, %290, !insn.addr !66
  store i8 %294, i8* %201, align 1, !insn.addr !66
  %295 = load i8, i8* inttoptr (i32 6592366 to i8*), align 2, !insn.addr !67
  %296 = udiv i32 %arg11, 256, !insn.addr !67
  %297 = trunc i32 %296 to i8, !insn.addr !67
  %298 = add i8 %297, 110, !insn.addr !67
  %299 = add i8 %298, %290, !insn.addr !68
  %300 = add i8 %299, %295, !insn.addr !69
  store i8 %300, i8* inttoptr (i32 6592366 to i8*), align 2, !insn.addr !69
  ret i32 6592366, !insn.addr !69

dec_label_pc_1001316:                             ; preds = %dec_label_pc_100128a
  %301 = zext i8 %123 to i32, !insn.addr !25
  %302 = mul i32 %301, 256, !insn.addr !25
  %303 = and i32 %arg5, -65281, !insn.addr !25
  %304 = or i32 %302, %303, !insn.addr !25
  %305 = load i32, i32* %edi, align 4, !insn.addr !70
  %306 = add i32 %305, 536899072, !insn.addr !70
  %307 = inttoptr i32 %306 to i8*, !insn.addr !70
  %308 = load i8, i8* %307, align 1, !insn.addr !70
  %309 = trunc i32 %arg6 to i8, !insn.addr !70
  %310 = add i8 %308, %309, !insn.addr !70
  store i8 %310, i8* %307, align 1, !insn.addr !70
  %311 = load i32, i32* %ebp, align 4, !insn.addr !71
  %312 = inttoptr i32 %311 to i8*, !insn.addr !71
  %313 = load i8, i8* %312, align 1, !insn.addr !71
  %314 = add i8 %313, %123, !insn.addr !71
  store i8 %314, i8* %312, align 1, !insn.addr !71
  %315 = sext i16 %2 to i32, !insn.addr !72
  store i32 %315, i32* %eax, align 4, !insn.addr !72
  %316 = load i32, i32* %edi, align 4, !insn.addr !73
  %317 = add i32 %316, -67080704, !insn.addr !73
  %318 = inttoptr i32 %317 to i8*, !insn.addr !73
  %319 = load i8, i8* %318, align 1, !insn.addr !73
  %320 = load i32, i32* %ebx, align 4, !insn.addr !73
  %321 = udiv i32 %320, 256, !insn.addr !73
  %322 = trunc i32 %321 to i8, !insn.addr !73
  %323 = add i8 %319, %322, !insn.addr !73
  store i8 %323, i8* %318, align 1, !insn.addr !73
  %.pre = trunc i32 %304 to i16, !insn.addr !74
  %.pre11 = trunc i32 %arg5 to i8, !insn.addr !75
  store i8 %.pre11, i8* %.pre-phi12.reg2mem, !insn.addr !73
  store i16 %.pre, i16* %.pre-phi.reg2mem, !insn.addr !73
  store i32 %304, i32* %edx.0.reg2mem, !insn.addr !73
  store i32* %stack_var_34, i32** %esp.0.in.reg2mem, !insn.addr !73
  br label %dec_label_pc_100132b, !insn.addr !73

dec_label_pc_100132b:                             ; preds = %dec_label_pc_1001316, %285
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %.pre-phi.reload = load i16, i16* %.pre-phi.reg2mem
  %.pre-phi12.reload = load i8, i8* %.pre-phi12.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %324 = load i32, i32* %edi, align 4, !insn.addr !76
  %325 = add i32 %324, 14, !insn.addr !76
  %326 = inttoptr i32 %325 to i8*, !insn.addr !76
  %327 = load i8, i8* %326, align 1, !insn.addr !76
  %328 = udiv i32 %edx.0.reload, 256, !insn.addr !76
  %329 = trunc i32 %328 to i8, !insn.addr !76
  %330 = add i8 %327, %329, !insn.addr !76
  store i8 %330, i8* %326, align 1, !insn.addr !76
  %331 = load i32, i32* %esi, align 4, !insn.addr !74
  %332 = inttoptr i32 %331 to i8*, !insn.addr !74
  %333 = load i8, i8* %332, align 1, !insn.addr !74
  call void @__asm_outsb(i16 %.pre-phi.reload, i8 %333), !insn.addr !74
  %334 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !77
  %335 = load i8, i8* %334, align 1, !insn.addr !77
  %336 = add i8 %335, %329, !insn.addr !77
  store i8 %336, i8* %334, align 1, !insn.addr !77
  %337 = load i32, i32* %esi, align 4, !insn.addr !78
  %338 = inttoptr i32 %337 to i32*, !insn.addr !78
  %339 = load i32, i32* %338, align 4, !insn.addr !78
  call void @__asm_outsd(i16 %.pre-phi.reload, i32 %339), !insn.addr !78
  %340 = load i32, i32* %eax, align 4
  %factor10 = mul i32 %340, 2
  %341 = add i32 %factor10, 6815776, !insn.addr !75
  %342 = inttoptr i32 %341 to i8*, !insn.addr !75
  %343 = load i8, i8* %342, align 2, !insn.addr !75
  %344 = add i8 %343, %.pre-phi12.reload, !insn.addr !75
  store i8 %344, i8* %342, align 2, !insn.addr !75
  %345 = add i32 %esp.0, 4, !insn.addr !79
  %346 = add i32 %esp.0, 8, !insn.addr !79
  %347 = add i32 %esp.0, 16, !insn.addr !79
  %348 = add i32 %esp.0, 20, !insn.addr !79
  %349 = add i32 %esp.0, 24, !insn.addr !79
  %350 = add i32 %esp.0, 28, !insn.addr !79
  %351 = inttoptr i32 %345 to i32*, !insn.addr !79
  %352 = load i32, i32* %351, align 4, !insn.addr !79
  %353 = inttoptr i32 %346 to i32*, !insn.addr !79
  %354 = load i32, i32* %353, align 4, !insn.addr !79
  %355 = inttoptr i32 %347 to i32*, !insn.addr !79
  %356 = load i32, i32* %355, align 4, !insn.addr !79
  %357 = inttoptr i32 %348 to i32*, !insn.addr !79
  %358 = load i32, i32* %357, align 4, !insn.addr !79
  %359 = inttoptr i32 %349 to i32*, !insn.addr !79
  %360 = load i32, i32* %359, align 4, !insn.addr !79
  %361 = inttoptr i32 %350 to i32*, !insn.addr !79
  %362 = load i32, i32* %361, align 4, !insn.addr !79
  store i32 %352, i32* %esi, align 4, !insn.addr !79
  store i32 %354, i32* %ebp, align 4, !insn.addr !79
  store i32 %362, i32* %eax, align 4, !insn.addr !79
  %363 = inttoptr i32 %356 to i8*, !insn.addr !80
  %364 = load i8, i8* %363, align 1, !insn.addr !80
  %365 = udiv i32 %358, 256, !insn.addr !80
  %366 = trunc i32 %365 to i8, !insn.addr !80
  %367 = add i8 %364, %366, !insn.addr !80
  store i8 %367, i8* %363, align 1, !insn.addr !80
  %368 = add i32 %354, 6488175, !insn.addr !81
  %369 = inttoptr i32 %368 to i8*, !insn.addr !81
  %370 = load i8, i8* %369, align 1, !insn.addr !81
  %371 = and i8 %370, %366, !insn.addr !81
  store i8 %371, i8* %369, align 1, !insn.addr !81
  %372 = trunc i32 %358 to i16, !insn.addr !82
  %373 = load i32, i32* %eax, align 4, !insn.addr !82
  %374 = trunc i32 %373 to i8, !insn.addr !82
  call void @__asm_out(i16 %372, i8 %374), !insn.addr !82
  %375 = inttoptr i32 %358 to i8*, !insn.addr !83
  %376 = load i8, i8* %375, align 1, !insn.addr !83
  %377 = load i32, i32* %eax, align 4, !insn.addr !83
  %378 = udiv i32 %377, 256, !insn.addr !83
  %379 = trunc i32 %378 to i8, !insn.addr !83
  %380 = add i8 %376, %379, !insn.addr !83
  store i8 %380, i8* %375, align 1, !insn.addr !83
  %381 = load i32, i32* %esi, align 4
  %382 = call i8 @__readfsbyte(i32 %381), !insn.addr !84
  %383 = udiv i32 %360, 256, !insn.addr !84
  %384 = trunc i32 %383 to i8, !insn.addr !84
  %385 = add i8 %382, %384, !insn.addr !84
  call void @__writefsbyte(i32 %381, i8 %385), !insn.addr !84
  %386 = load i32, i32* %eax, align 4
  %387 = inttoptr i32 %386 to i8*, !insn.addr !85
  %388 = load i8, i8* %387, align 1, !insn.addr !85
  %389 = trunc i32 %386 to i8, !insn.addr !85
  %390 = add i8 %388, %389, !insn.addr !85
  store i8 %390, i8* %387, align 1, !insn.addr !85
  %391 = add i32 %358, 38, !insn.addr !86
  %392 = inttoptr i32 %391 to i8*, !insn.addr !86
  %393 = load i8, i8* %392, align 1, !insn.addr !86
  %394 = add i8 %393, %366, !insn.addr !86
  store i8 %394, i8* %392, align 1, !insn.addr !86
  %395 = load i32, i32* %esi, align 4, !insn.addr !87
  %396 = inttoptr i32 %395 to i32*, !insn.addr !87
  %397 = load i32, i32* %396, align 4, !insn.addr !87
  call void @__asm_outsd(i16 %372, i32 %397), !insn.addr !87
  %398 = add i32 %358, -119, !insn.addr !88
  %399 = inttoptr i32 %398 to i8*, !insn.addr !88
  %400 = load i8, i8* %399, align 1, !insn.addr !88
  %401 = add i8 %400, %366, !insn.addr !88
  store i8 %401, i8* %399, align 1, !insn.addr !88
  %402 = load i32, i32* %eax, align 4, !insn.addr !89
  call void @__asm_out.2(i16 %372, i32 %402), !insn.addr !89
  %403 = load i32, i32* %eax, align 4, !insn.addr !89
  ret i32 %403, !insn.addr !89

dec_label_pc_1001364:                             ; preds = %dec_label_pc_10012da
  %404 = inttoptr i32 %257 to i8*, !insn.addr !90
  %405 = load i8, i8* %404, align 1, !insn.addr !90
  %406 = trunc i32 %257 to i8, !insn.addr !90
  %407 = and i8 %405, %406, !insn.addr !90
  store i8 %407, i8* %404, align 1, !insn.addr !90
  %408 = load i32, i32* %eax, align 4
  %409 = inttoptr i32 %408 to i8*, !insn.addr !91
  %410 = load i8, i8* %409, align 1, !insn.addr !91
  %411 = trunc i32 %408 to i8, !insn.addr !91
  %412 = add i8 %410, %411, !insn.addr !91
  store i8 %412, i8* %409, align 1, !insn.addr !91
  %413 = load i32, i32* %ebx, align 4
  %414 = inttoptr i32 %413 to i8*, !insn.addr !92
  %415 = load i8, i8* %414, align 1, !insn.addr !92
  %416 = trunc i32 %413 to i8, !insn.addr !92
  %417 = add i8 %415, %416, !insn.addr !92
  store i8 %417, i8* %414, align 1, !insn.addr !92
  %418 = load i32, i32* %ebp, align 4, !insn.addr !93
  %419 = add i32 %418, -117, !insn.addr !93
  %420 = inttoptr i32 %419 to i8*, !insn.addr !93
  %421 = load i8, i8* %420, align 1, !insn.addr !93
  %422 = trunc i32 %arg18 to i8, !insn.addr !93
  %423 = add i8 %421, %422, !insn.addr !93
  store i8 %423, i8* %420, align 1, !insn.addr !93
  %424 = load i32, i32* %ebx, align 4
  %425 = mul i32 %424, 2, !insn.addr !94
  %426 = and i32 %425, 254, !insn.addr !94
  %427 = and i32 %424, -256, !insn.addr !94
  %428 = or i32 %426, %427, !insn.addr !94
  store i32 %428, i32* %ebx, align 4, !insn.addr !94
  %429 = load i32, i32* %eax, align 4
  %430 = inttoptr i32 %429 to i8*, !insn.addr !95
  %431 = load i8, i8* %430, align 1, !insn.addr !95
  %432 = trunc i32 %429 to i8, !insn.addr !95
  %433 = add i8 %431, %432, !insn.addr !95
  store i8 %433, i8* %430, align 1, !insn.addr !95
  %434 = mul i32 %arg18, 256
  %435 = and i32 %434, 65280
  %436 = xor i32 %435, %arg19, !insn.addr !96
  %437 = load i32, i32* %eax, align 4
  %438 = inttoptr i32 %437 to i8*, !insn.addr !97
  %439 = load i8, i8* %438, align 1, !insn.addr !97
  %440 = trunc i32 %437 to i8, !insn.addr !97
  %441 = add i8 %439, %440, !insn.addr !97
  store i8 %441, i8* %438, align 1, !insn.addr !97
  %442 = load i32, i32* %edi, align 4
  %443 = inttoptr i32 %442 to i8*, !insn.addr !98
  %444 = load i8, i8* %443, align 1, !insn.addr !98
  %445 = load i32, i32* %eax, align 4, !insn.addr !98
  %446 = trunc i32 %445 to i8, !insn.addr !98
  %447 = add i8 %444, %446, !insn.addr !98
  store i8 %447, i8* %443, align 1, !insn.addr !98
  %448 = load i32, i32* %eax, align 4
  %449 = inttoptr i32 %448 to i8*, !insn.addr !99
  %450 = load i8, i8* %449, align 1, !insn.addr !99
  %451 = trunc i32 %448 to i8, !insn.addr !99
  %452 = add i8 %450, %451, !insn.addr !99
  store i8 %452, i8* %449, align 1, !insn.addr !99
  %453 = load i32, i32* %edi, align 4, !insn.addr !100
  %454 = inttoptr i32 %453 to i8*, !insn.addr !100
  %455 = load i8, i8* %454, align 1, !insn.addr !100
  %456 = load i32, i32* %ebx, align 4, !insn.addr !100
  %457 = udiv i32 %456, 256, !insn.addr !100
  %458 = trunc i32 %457 to i8, !insn.addr !100
  %459 = add i8 %455, %458, !insn.addr !100
  store i8 %459, i8* %454, align 1, !insn.addr !100
  %460 = load i32, i32* %eax, align 4
  %461 = inttoptr i32 %460 to i8*, !insn.addr !101
  %462 = load i8, i8* %461, align 1, !insn.addr !101
  %463 = trunc i32 %460 to i8, !insn.addr !101
  %464 = add i8 %462, %463, !insn.addr !101
  store i8 %464, i8* %461, align 1, !insn.addr !101
  %465 = load i32, i32* %eax, align 4
  %466 = load i32, i32* %ebx, align 4, !insn.addr !102
  %467 = add i32 %466, -33490304, !insn.addr !102
  %468 = inttoptr i32 %467 to i8*, !insn.addr !102
  %469 = load i8, i8* %468, align 1, !insn.addr !102
  %470 = udiv i32 %436, 256, !insn.addr !102
  %471 = trunc i32 %470 to i8, !insn.addr !102
  %472 = add i8 %469, %471, !insn.addr !102
  store i8 %472, i8* %468, align 1, !insn.addr !102
  %473 = and i32 %arg18, -256, !insn.addr !103
  %474 = inttoptr i32 %465 to i8*, !insn.addr !104
  %475 = load i8, i8* %474, align 1, !insn.addr !104
  %476 = trunc i32 %465 to i8, !insn.addr !104
  %477 = add i8 %475, %476, !insn.addr !104
  store i8 %477, i8* %474, align 1, !insn.addr !104
  %478 = add i32 %465, -1, !insn.addr !105
  %479 = inttoptr i32 %478 to i8*, !insn.addr !106
  %480 = load i8, i8* %479, align 1, !insn.addr !106
  %481 = trunc i32 %478 to i8, !insn.addr !106
  %482 = add i8 %480, %481, !insn.addr !106
  store i8 %482, i8* %479, align 1, !insn.addr !106
  %483 = load i32, i32* %esi, align 4
  %484 = inttoptr i32 %483 to i8*, !insn.addr !107
  %485 = load i8, i8* %484, align 1, !insn.addr !107
  %486 = udiv i32 %arg18, 256, !insn.addr !107
  %487 = trunc i32 %486 to i8, !insn.addr !107
  %488 = add i8 %485, %487, !insn.addr !107
  store i8 %488, i8* %484, align 1, !insn.addr !107
  %489 = load i8, i8* %479, align 1, !insn.addr !108
  %490 = add i8 %489, %481, !insn.addr !108
  store i8 %490, i8* %479, align 1, !insn.addr !109
  %491 = trunc i32 %473 to i16, !insn.addr !110
  %492 = load i32, i32* %esi, align 4, !insn.addr !110
  %493 = inttoptr i32 %492 to i32*, !insn.addr !110
  %494 = load i32, i32* %493, align 4, !insn.addr !110
  call void @__asm_outsd(i16 %491, i32 %494), !insn.addr !110
  %495 = and i32 %478, 14
  %496 = icmp ugt i32 %495, 9, !insn.addr !111
  %497 = add i32 %465, 5, !insn.addr !111
  %498 = select i1 %496, i32 %497, i32 %478, !insn.addr !111
  %499 = zext i1 %496 to i32, !insn.addr !111
  %500 = and i32 %498, 15, !insn.addr !111
  %501 = and i32 %478, -65536, !insn.addr !111
  %502 = or i32 %500, %501, !insn.addr !111
  %503 = mul i32 %499, 256
  %504 = add i32 %503, %478
  %505 = and i32 %504, 65280, !insn.addr !111
  %506 = or i32 %502, %505, !insn.addr !111
  %507 = inttoptr i32 %506 to i8*, !insn.addr !112
  %508 = load i8, i8* %507, align 1, !insn.addr !112
  %509 = trunc i32 %500 to i8, !insn.addr !112
  %510 = add i8 %508, %509, !insn.addr !112
  store i8 %510, i8* %507, align 1, !insn.addr !112
  %511 = call i32 @__asm_hlt(), !insn.addr !113
  store i32 %511, i32* %eax, align 4, !insn.addr !113
  store i32 %arg22, i32* %ebp, align 4, !insn.addr !114
  %512 = inttoptr i32 %511 to i8*, !insn.addr !115
  %513 = load i8, i8* %512, align 1, !insn.addr !115
  %514 = trunc i32 %511 to i8, !insn.addr !115
  %factor8 = mul i8 %514, 2
  %515 = add i8 %513, %factor8, !insn.addr !116
  store i8 %515, i8* %512, align 1, !insn.addr !116
  %516 = load i32, i32* %edi, align 4, !insn.addr !117
  %517 = add i32 %516, 1, !insn.addr !117
  %518 = add i32 %arg22, -1459617792, !insn.addr !118
  %519 = inttoptr i32 %518 to i8*, !insn.addr !118
  %520 = load i8, i8* %519, align 1, !insn.addr !118
  %521 = add i8 %520, %514, !insn.addr !118
  store i8 %521, i8* %519, align 1, !insn.addr !118
  %522 = load i8, i8* %512, align 1, !insn.addr !119
  %523 = add i8 %522, %514, !insn.addr !119
  store i8 %523, i8* %512, align 1, !insn.addr !119
  %524 = load i32, i32* %esi, align 4
  %525 = add i32 %524, 1107296339, !insn.addr !120
  %526 = inttoptr i32 %525 to i8*, !insn.addr !120
  %527 = load i8, i8* %526, align 1, !insn.addr !120
  %528 = add i8 %527, %514, !insn.addr !120
  store i8 %528, i8* %526, align 1, !insn.addr !120
  %529 = load i8, i8* %512, align 1, !insn.addr !121
  %530 = add i8 %529, %514, !insn.addr !121
  store i8 %530, i8* %512, align 1, !insn.addr !121
  %531 = add i32 %516, 1133035749, !insn.addr !122
  %532 = inttoptr i32 %531 to i8*, !insn.addr !122
  %533 = load i8, i8* %532, align 1, !insn.addr !122
  %534 = add i8 %533, %514, !insn.addr !122
  store i8 %534, i8* %532, align 1, !insn.addr !122
  %535 = load i8, i8* %512, align 1, !insn.addr !123
  %536 = add i8 %535, %514, !insn.addr !123
  store i8 %536, i8* %512, align 1, !insn.addr !123
  %537 = add i32 %511, 1140850688, !insn.addr !124
  %538 = inttoptr i32 %537 to i8*, !insn.addr !124
  %539 = load i8, i8* %538, align 1, !insn.addr !124
  %540 = add i8 %539, %253, !insn.addr !124
  store i8 %540, i8* %538, align 1, !insn.addr !124
  %541 = load i8, i8* %512, align 1, !insn.addr !125
  %542 = add i8 %541, %514, !insn.addr !125
  store i8 %542, i8* %512, align 1, !insn.addr !125
  %543 = add i32 %436, 1160311808, !insn.addr !126
  %544 = inttoptr i32 %543 to i8*, !insn.addr !126
  %545 = load i8, i8* %544, align 1, !insn.addr !126
  %546 = add i8 %545, %253, !insn.addr !126
  store i8 %546, i8* %544, align 1, !insn.addr !126
  %547 = inttoptr i32 %517 to i8*, !insn.addr !127
  store i8 %514, i8* %547, align 1, !insn.addr !127
  %548 = select i1 %148, i32 -1, i32 1, !insn.addr !127
  %549 = add i32 %517, %548, !insn.addr !127
  %550 = add i32 %473, 1174405120, !insn.addr !128
  %551 = inttoptr i32 %550 to i8*, !insn.addr !128
  %552 = load i8, i8* %551, align 256, !insn.addr !128
  %553 = add i8 %552, %253, !insn.addr !128
  store i8 %553, i8* %551, align 256, !insn.addr !128
  %554 = load i32, i32* %ebx, align 4
  %555 = and i32 %554, 65280, !insn.addr !129
  %556 = add i32 %555, %511
  %557 = and i32 %556, 65280, !insn.addr !129
  %558 = and i32 %554, -65281, !insn.addr !129
  %559 = or i32 %557, %558, !insn.addr !129
  store i32 %559, i32* %ebx, align 4, !insn.addr !129
  %560 = add i32 %559, 654311424, !insn.addr !130
  %561 = inttoptr i32 %560 to i8*, !insn.addr !130
  %562 = load i8, i8* %561, align 1, !insn.addr !130
  %563 = add i8 %562, %253, !insn.addr !130
  store i8 %563, i8* %561, align 1, !insn.addr !130
  %564 = load i8, i8* %512, align 1, !insn.addr !131
  %565 = add i8 %564, %514, !insn.addr !131
  store i8 %565, i8* %512, align 1, !insn.addr !131
  %566 = inttoptr i32 %473 to i8*, !insn.addr !132
  %567 = load i8, i8* %566, align 256, !insn.addr !132
  %568 = add i8 %567, %471, !insn.addr !132
  store i8 %568, i8* %566, align 256, !insn.addr !132
  %569 = load i8, i8* %512, align 1, !insn.addr !133
  %570 = add i8 %569, %514, !insn.addr !133
  store i8 %570, i8* %512, align 1, !insn.addr !133
  %571 = load i8, i8* %566, align 256, !insn.addr !134
  %572 = add i8 %571, %253, !insn.addr !134
  store i8 %572, i8* %566, align 256, !insn.addr !134
  %573 = inttoptr i32 %549 to i8*, !insn.addr !135
  %574 = load i8, i8* %573, align 1, !insn.addr !135
  %575 = add i8 %574, %253, !insn.addr !135
  store i8 %575, i8* %573, align 1, !insn.addr !135
  %576 = load i8, i8* %512, align 1, !insn.addr !136
  %577 = add i8 %576, %514, !insn.addr !136
  %578 = icmp eq i8 %577, 0, !insn.addr !136
  store i8 %577, i8* %512, align 1, !insn.addr !136
  %579 = icmp eq i1 %578, false, !insn.addr !137
  br i1 %579, label %dec_label_pc_1001466, label %dec_label_pc_10013fe, !insn.addr !137

dec_label_pc_10013fe:                             ; preds = %dec_label_pc_1001364
  %580 = load i32, i32* %ebx, align 4
  %581 = inttoptr i32 %580 to i8*, !insn.addr !138
  %582 = load i8, i8* %581, align 1, !insn.addr !138
  %583 = udiv i32 %580, 256, !insn.addr !138
  %584 = trunc i32 %583 to i8, !insn.addr !138
  %585 = add i8 %582, %584, !insn.addr !138
  store i8 %585, i8* %581, align 1, !insn.addr !138
  %586 = ptrtoint i32* %stack_var_94 to i32, !insn.addr !139
  %587 = load i32, i32* %eax, align 4
  %factor9 = mul i32 %587, 2
  %588 = add i32 %factor9, 100, !insn.addr !140
  %589 = inttoptr i32 %588 to i8*, !insn.addr !140
  %590 = load i8, i8* %589, align 2, !insn.addr !140
  %591 = add i8 %590, %471, !insn.addr !140
  store i8 %591, i8* %589, align 2, !insn.addr !140
  %592 = load i32, i32* %eax, align 4
  %593 = inttoptr i32 %592 to i8*, !insn.addr !141
  %594 = load i8, i8* %593, align 1, !insn.addr !141
  %595 = trunc i32 %592 to i8, !insn.addr !141
  %596 = add i8 %594, %595, !insn.addr !141
  store i8 %596, i8* %593, align 1, !insn.addr !141
  %597 = load i32, i32* %esi, align 4, !insn.addr !142
  %598 = add i32 %597, 5963883, !insn.addr !142
  %599 = inttoptr i32 %598 to i8*, !insn.addr !142
  %600 = load i8, i8* %599, align 1, !insn.addr !142
  %601 = add i8 %600, %471, !insn.addr !142
  store i8 %601, i8* %599, align 1, !insn.addr !142
  %602 = load i32, i32* %eax, align 4, !insn.addr !143
  call void @__asm_out.2(i16 %491, i32 %602), !insn.addr !143
  %603 = load i32, i32* %eax, align 4
  %604 = inttoptr i32 %603 to i8*, !insn.addr !144
  %605 = load i8, i8* %604, align 1, !insn.addr !144
  %606 = add i8 %605, 1, !insn.addr !144
  store i8 %606, i8* %604, align 1, !insn.addr !144
  %607 = load i32, i32* %stack_var_94, align 4, !insn.addr !145
  store i32 %607, i32* %edi, align 4, !insn.addr !145
  %608 = load i32, i32* %ebx, align 4, !insn.addr !146
  %609 = inttoptr i32 %608 to i8*, !insn.addr !146
  %610 = load i8, i8* %609, align 1, !insn.addr !146
  %611 = load i32, i32* %eax, align 4, !insn.addr !146
  %612 = udiv i32 %611, 256, !insn.addr !146
  %613 = trunc i32 %612 to i8, !insn.addr !146
  %614 = add i8 %610, %613, !insn.addr !146
  store i8 %614, i8* %609, align 1, !insn.addr !146
  %615 = load i32, i32* %eax, align 4
  %616 = inttoptr i32 %615 to i8*, !insn.addr !147
  %617 = load i8, i8* %616, align 1, !insn.addr !147
  %618 = trunc i32 %615 to i8, !insn.addr !147
  store i8 %618, i8* %616, align 1, !insn.addr !147
  %619 = zext i8 %617 to i32, !insn.addr !147
  %620 = load i32, i32* %eax, align 4, !insn.addr !147
  %621 = and i32 %620, -256, !insn.addr !147
  %622 = or i32 %621, %619, !insn.addr !147
  %623 = add i32 %586, -14, !insn.addr !148
  %624 = inttoptr i32 %623 to i8*, !insn.addr !148
  %625 = load i8, i8* %624, align 2, !insn.addr !148
  %626 = udiv i32 %586, 256, !insn.addr !148
  %627 = trunc i32 %626 to i8, !insn.addr !148
  %628 = add i8 %625, %627, !insn.addr !148
  store i8 %628, i8* %624, align 2, !insn.addr !148
  %629 = inttoptr i32 %622 to i8*, !insn.addr !149
  %630 = load i8, i8* %629, align 1, !insn.addr !149
  %631 = add i8 %630, %617, !insn.addr !149
  store i8 %631, i8* %629, align 1, !insn.addr !149
  %632 = add i32 %622, 1, !insn.addr !150
  store i32 %632, i32* %eax, align 4, !insn.addr !150
  store i32 1291845632, i32* %stack_var_94, align 4, !insn.addr !151
  %633 = inttoptr i32 %632 to i8*, !insn.addr !152
  %634 = load i8, i8* %633, align 1, !insn.addr !152
  %635 = trunc i32 %632 to i8, !insn.addr !152
  %636 = add i8 %634, %635, !insn.addr !152
  %637 = add i8 %636, %635, !insn.addr !153
  %638 = icmp ult i8 %637, %636, !insn.addr !153
  store i8 %637, i8* %633, align 1, !insn.addr !153
  store i32 %473, i32* %stack_var_94, align 4, !insn.addr !154
  %639 = load i8, i8* %633, align 1, !insn.addr !155
  %640 = zext i1 %638 to i8, !insn.addr !155
  %641 = add i8 %639, %635, !insn.addr !155
  %642 = add i8 %641, %640, !insn.addr !155
  store i8 %642, i8* %633, align 1, !insn.addr !155
  %643 = load i32, i32* %stack_var_94, align 4, !insn.addr !156
  store i32 %643, i32* %esi, align 4, !insn.addr !156
  %644 = call i8 @__readgsbyte(i32 %632), !insn.addr !157
  %645 = add i8 %644, %635, !insn.addr !157
  call void @__writegsbyte(i32 %632, i8 %645), !insn.addr !157
  %646 = load i8, i8* %633, align 1, !insn.addr !158
  %647 = add i8 %646, %635, !insn.addr !158
  store i8 %647, i8* %633, align 1, !insn.addr !158
  %648 = and i32 %586, 28, !insn.addr !159
  %649 = icmp eq i32 %648, 0, !insn.addr !159
  br i1 %649, label %664, label %650, !insn.addr !159

; <label>:650:                                    ; preds = %dec_label_pc_10013fe
  %651 = load i32, i32* %ebp, align 4, !insn.addr !159
  %652 = icmp ult i8 %647, %646, !insn.addr !158
  %653 = zext i1 %652 to i32, !insn.addr !159
  %654 = shl i32 %651, %648, !insn.addr !159
  %655 = zext i32 %651 to i64, !insn.addr !159
  %656 = sub nsw i32 33, %648, !insn.addr !159
  %657 = zext i32 %656 to i64, !insn.addr !159
  %658 = lshr i64 %655, %657, !insn.addr !159
  %659 = add nsw i32 %648, -1, !insn.addr !159
  %660 = shl i32 %653, %659, !insn.addr !159
  %661 = trunc i64 %658 to i32
  %662 = or i32 %660, %654
  %663 = or i32 %662, %661, !insn.addr !159
  store i32 %663, i32* %ebp, align 4, !insn.addr !159
  br label %664, !insn.addr !159

; <label>:664:                                    ; preds = %dec_label_pc_10013fe, %650
  %665 = load i32, i32* %eax, align 4
  %666 = inttoptr i32 %665 to i8*, !insn.addr !160
  %667 = load i8, i8* %666, align 1, !insn.addr !160
  %668 = trunc i32 %665 to i8, !insn.addr !160
  %669 = add i8 %667, %668, !insn.addr !160
  store i8 %669, i8* %666, align 1, !insn.addr !160
  %670 = load i32, i32* %eax, align 4
  %671 = inttoptr i32 %670 to i8*, !insn.addr !161
  %672 = load i8, i8* %671, align 1, !insn.addr !161
  %673 = trunc i32 %670 to i8, !insn.addr !161
  %674 = add i8 %672, %673, !insn.addr !161
  store i8 %674, i8* %671, align 1, !insn.addr !161
  %675 = load i8, i8* inttoptr (i32 1476395008 to i8*), align 134217728, !insn.addr !162
  %676 = zext i8 %675 to i32, !insn.addr !162
  %677 = load i32, i32* %eax, align 4, !insn.addr !162
  %678 = and i32 %677, -256, !insn.addr !162
  %679 = or i32 %678, %676, !insn.addr !162
  %680 = inttoptr i32 %679 to i8*, !insn.addr !163
  %681 = load i8, i8* %680, align 1, !insn.addr !163
  %682 = add i8 %681, %675, !insn.addr !163
  store i8 %682, i8* %680, align 1, !insn.addr !163
  %683 = load i32, i32* %ebp, align 4, !insn.addr !164
  %684 = add i32 %683, -127, !insn.addr !164
  %685 = inttoptr i32 %684 to i8*, !insn.addr !164
  %686 = load i8, i8* %685, align 1, !insn.addr !164
  %687 = add i8 %686, 76, !insn.addr !164
  store i8 %687, i8* %685, align 1, !insn.addr !164
  %688 = load i32, i32* %edi, align 4
  %689 = add i32 %679, 7929856, !insn.addr !165
  %690 = add i32 %689, %688, !insn.addr !165
  %691 = inttoptr i32 %690 to i8*, !insn.addr !165
  %692 = load i8, i8* %691, align 1, !insn.addr !165
  %693 = add i8 %692, -56, !insn.addr !165
  store i8 %693, i8* %691, align 1, !insn.addr !165
  %694 = load i8, i8* %680, align 1, !insn.addr !166
  %695 = add i8 %694, %675, !insn.addr !166
  store i8 %695, i8* %680, align 1, !insn.addr !166
  %696 = xor i8 %675, -24, !insn.addr !167
  %697 = zext i8 %696 to i32, !insn.addr !167
  %698 = or i32 %678, %697, !insn.addr !167
  %699 = inttoptr i32 %698 to i8*, !insn.addr !168
  %700 = load i8, i8* %699, align 1, !insn.addr !168
  %701 = add i8 %700, %696, !insn.addr !168
  store i8 %701, i8* %699, align 1, !insn.addr !168
  ret i32 %698, !insn.addr !168

dec_label_pc_1001466:                             ; preds = %dec_label_pc_1001364
  %702 = load i32, i32* %eax, align 4
  %703 = inttoptr i32 %702 to i8*, !insn.addr !169
  %704 = load i8, i8* %703, align 1, !insn.addr !169
  %705 = trunc i32 %702 to i8, !insn.addr !169
  %706 = add i8 %704, %705, !insn.addr !169
  store i8 %706, i8* %703, align 1, !insn.addr !169
  %707 = call i8 @__asm_in.1(i8 0), !insn.addr !170
  %708 = call i32 @__asm_sti(), !insn.addr !171
  %709 = load i8, i8* %566, align 256, !insn.addr !172
  %710 = load i32, i32* %ebx, align 4, !insn.addr !172
  %711 = trunc i32 %710 to i8, !insn.addr !172
  %712 = add i8 %709, %711, !insn.addr !172
  store i8 %712, i8* %566, align 256, !insn.addr !172
  %713 = inttoptr i32 %708 to i8*, !insn.addr !173
  %714 = load i8, i8* %713, align 1, !insn.addr !173
  %715 = trunc i32 %708 to i8, !insn.addr !173
  %716 = add i8 %714, %715, !insn.addr !173
  store i8 %716, i8* %713, align 1, !insn.addr !173
  %717 = sub i8 0, %714, !insn.addr !174
  %718 = zext i8 %717 to i32, !insn.addr !174
  %719 = and i32 %708, -256, !insn.addr !174
  %720 = or i32 %719, %718, !insn.addr !174
  ret i32 %720, !insn.addr !175
}

define i32 @function_1001473(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
dec_label_pc_1001473:
  %edi = alloca i32, align 4
  %esi = alloca i32, align 4
  %ebp = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = select i1 %3, i32 255, i32 0, !insn.addr !176
  %5 = and i32 %2, -256, !insn.addr !176
  %6 = or i32 %4, %5, !insn.addr !176
  %7 = inttoptr i32 %6 to i8*, !insn.addr !177
  %8 = load i8, i8* %7, align 1, !insn.addr !177
  %9 = trunc i32 %4 to i8
  %10 = add i8 %8, %9, !insn.addr !177
  store i8 %10, i8* %7, align 1, !insn.addr !177
  %11 = load i8, i8* inttoptr (i32 -1795162112 to i8*), align 16777216, !insn.addr !178
  %12 = udiv i32 %2, 256, !insn.addr !178
  %13 = trunc i32 %12 to i8, !insn.addr !178
  %14 = add i8 %11, %13, !insn.addr !178
  store i8 %14, i8* inttoptr (i32 -1795162112 to i8*), align 16777216, !insn.addr !178
  %15 = load i8, i8* %7, align 1, !insn.addr !179
  %16 = add i8 %15, %9, !insn.addr !179
  store i8 %16, i8* %7, align 1, !insn.addr !179
  %17 = bitcast i32* %ebp to i8*
  %18 = load i8, i8* %17, align 4, !insn.addr !180
  %19 = trunc i32 %1 to i8, !insn.addr !180
  %20 = add i8 %18, %19, !insn.addr !180
  %21 = load i32, i32* %ebp, align 4, !insn.addr !180
  %22 = inttoptr i32 %21 to i8*, !insn.addr !180
  store i8 %20, i8* %22, align 1, !insn.addr !180
  %23 = load i8, i8* %7, align 1, !insn.addr !181
  %factor = mul i8 %9, 2
  %24 = add i8 %23, %factor, !insn.addr !182
  store i8 %24, i8* %7, align 1, !insn.addr !182
  %25 = load i8, i8* inttoptr (i32 1880621217 to i8*), align 1, !insn.addr !183
  %26 = udiv i32 %arg1, 256, !insn.addr !183
  %27 = trunc i32 %26 to i8, !insn.addr !183
  %28 = add i8 %25, %27, !insn.addr !183
  store i8 %28, i8* inttoptr (i32 1880621217 to i8*), align 1, !insn.addr !183
  %29 = bitcast i32* %edi to i8*
  %30 = load i8, i8* %29, align 4, !insn.addr !184
  %31 = add i8 %30, %13, !insn.addr !184
  %32 = load i32, i32* %edi, align 4, !insn.addr !184
  %33 = inttoptr i32 %32 to i8*, !insn.addr !184
  store i8 %31, i8* %33, align 1, !insn.addr !184
  %34 = inttoptr i32 %arg1 to i8*, !insn.addr !185
  %35 = load i8, i8* %34, align 1, !insn.addr !185
  %36 = udiv i32 %1, 256, !insn.addr !185
  %37 = trunc i32 %36 to i8, !insn.addr !185
  %38 = add i8 %35, %37, !insn.addr !185
  store i8 %38, i8* %34, align 1, !insn.addr !185
  %39 = load i8, i8* %7, align 1, !insn.addr !186
  %40 = add i8 %39, %9, !insn.addr !186
  store i8 %40, i8* %7, align 1, !insn.addr !186
  %41 = mul i32 %6, 2, !insn.addr !187
  %42 = inttoptr i32 %41 to i8*, !insn.addr !187
  %43 = load i8, i8* %42, align 2, !insn.addr !187
  %44 = trunc i32 %arg1 to i8, !insn.addr !187
  %45 = add i8 %43, %44, !insn.addr !187
  store i8 %45, i8* %42, align 2, !insn.addr !187
  %46 = bitcast i32* %esi to i8*
  %47 = load i8, i8* %46, align 4, !insn.addr !188
  %48 = add i8 %47, %13, !insn.addr !188
  %49 = load i32, i32* %esi, align 4, !insn.addr !188
  %50 = inttoptr i32 %49 to i8*, !insn.addr !188
  store i8 %48, i8* %50, align 1, !insn.addr !188
  %51 = load i8, i8* %7, align 1, !insn.addr !189
  %52 = add i8 %51, %9, !insn.addr !189
  store i8 %52, i8* %7, align 1, !insn.addr !189
  %53 = load i8, i8* %46, align 4, !insn.addr !190
  %54 = trunc i32 %0 to i8, !insn.addr !190
  %55 = add i8 %53, %54, !insn.addr !190
  %56 = load i32, i32* %esi, align 4, !insn.addr !190
  %57 = inttoptr i32 %56 to i8*, !insn.addr !190
  store i8 %55, i8* %57, align 1, !insn.addr !190
  %58 = load i8, i8* %7, align 1, !insn.addr !191
  %59 = add i8 %58, %9, !insn.addr !191
  store i8 %59, i8* %7, align 1, !insn.addr !191
  %sext = mul i32 %6, 65536
  %60 = sdiv i32 %sext, 65536, !insn.addr !192
  %61 = inttoptr i32 %60 to i8*, !insn.addr !193
  %62 = load i8, i8* %61, align 1, !insn.addr !193
  %63 = trunc i32 %60 to i8, !insn.addr !193
  %64 = add i8 %62, %factor, !insn.addr !194
  store i8 %64, i8* %61, align 1, !insn.addr !194
  %65 = load i8, i8* %46, align 4, !insn.addr !195
  %66 = add i8 %65, 87, !insn.addr !195
  %67 = load i32, i32* %esi, align 4, !insn.addr !195
  %68 = inttoptr i32 %67 to i8*, !insn.addr !195
  store i8 %66, i8* %68, align 1, !insn.addr !195
  %69 = load i8, i8* %61, align 1, !insn.addr !196
  %70 = add i8 %69, %63, !insn.addr !196
  store i8 %70, i8* %61, align 1, !insn.addr !196
  %71 = load i32, i32* %esi, align 4, !insn.addr !197
  %72 = add i32 %71, -126, !insn.addr !197
  %73 = inttoptr i32 %72 to i8*, !insn.addr !197
  %74 = load i8, i8* %73, align 1, !insn.addr !197
  %75 = add i8 %74, %27, !insn.addr !197
  store i8 %75, i8* %73, align 1, !insn.addr !197
  %76 = inttoptr i32 %arg3 to i8*, !insn.addr !198
  %77 = load i8, i8* %76, align 1, !insn.addr !198
  %78 = trunc i32 %arg3 to i8, !insn.addr !198
  %79 = add i8 %77, %78, !insn.addr !198
  store i8 %79, i8* %76, align 1, !insn.addr !198
  %80 = call i32 @__asm_int1(), !insn.addr !199
  %81 = inttoptr i32 %80 to i8*, !insn.addr !200
  %82 = load i8, i8* %81, align 1, !insn.addr !200
  %83 = udiv i32 %80, 256, !insn.addr !200
  %84 = trunc i32 %83 to i8, !insn.addr !200
  %85 = add i8 %82, %84, !insn.addr !200
  store i8 %85, i8* %81, align 1, !insn.addr !200
  %86 = add i32 %80, %arg8, !insn.addr !201
  %87 = and i32 %86, 255, !insn.addr !201
  %88 = and i32 %arg8, -65536, !insn.addr !201
  %89 = or i32 %87, %88, !insn.addr !201
  %90 = and i32 %arg8, 65280, !insn.addr !202
  %91 = add i32 %80, %90
  %92 = and i32 %91, 65280, !insn.addr !202
  %93 = or i32 %89, %92, !insn.addr !202
  %94 = load i8, i8* inttoptr (i32 671088640 to i8*), align 134217728, !insn.addr !203
  %95 = trunc i32 %arg9 to i8, !insn.addr !203
  %96 = add i8 %94, %95, !insn.addr !203
  store i8 %96, i8* inttoptr (i32 671088640 to i8*), align 134217728, !insn.addr !203
  %97 = load i8, i8* %81, align 1, !insn.addr !204
  %98 = trunc i32 %80 to i8, !insn.addr !204
  %99 = add i8 %97, %98, !insn.addr !204
  store i8 %99, i8* %81, align 1, !insn.addr !204
  %100 = inttoptr i32 %93 to i8*, !insn.addr !205
  %101 = load i8, i8* %100, align 1, !insn.addr !205
  %102 = udiv i32 %arg7, 256, !insn.addr !205
  %103 = trunc i32 %102 to i8, !insn.addr !205
  %104 = add i8 %101, %103, !insn.addr !205
  store i8 %104, i8* %100, align 1, !insn.addr !205
  %105 = load i8, i8* %81, align 1, !insn.addr !206
  %106 = add i8 %105, %98, !insn.addr !206
  store i8 %106, i8* %81, align 1, !insn.addr !206
  %107 = inttoptr i32 %80 to i32*, !insn.addr !207
  %108 = load i32, i32* %107, align 4, !insn.addr !207
  %109 = sub i32 %108, %80, !insn.addr !207
  store i32 %109, i32* %107, align 4, !insn.addr !207
  %110 = add i32 %arg6, 7209083, !insn.addr !208
  %111 = inttoptr i32 %110 to i8*, !insn.addr !208
  %112 = load i8, i8* %111, align 1, !insn.addr !208
  %113 = add i8 %112, %84, !insn.addr !208
  store i8 %113, i8* %111, align 1, !insn.addr !208
  %114 = load i8, i8* %81, align 1, !insn.addr !209
  %115 = add i8 %114, %98, !insn.addr !209
  store i8 %115, i8* %81, align 1, !insn.addr !209
  %116 = inttoptr i32 %arg9 to i8*, !insn.addr !210
  %117 = load i8, i8* %116, align 1, !insn.addr !210
  %118 = add i8 %117, %103, !insn.addr !210
  store i8 %118, i8* %116, align 1, !insn.addr !210
  %119 = call i32 @function_10065e3(i32 ptrtoint (i32* @0 to i32)), !insn.addr !211
  ret i32 %119, !insn.addr !211
}

define i32 @function_10014e3() local_unnamed_addr {
dec_label_pc_10014e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = add i32 %1, 34, !insn.addr !212
  %3 = inttoptr i32 %2 to i8*, !insn.addr !212
  %4 = load i8, i8* %3, align 1, !insn.addr !212
  %5 = trunc i32 %0 to i8, !insn.addr !212
  %6 = add i8 %4, %5, !insn.addr !212
  store i8 %6, i8* %3, align 1, !insn.addr !212
  %7 = bitcast i32* %eax to i8*
  %8 = load i8, i8* %7, align 4, !insn.addr !213
  %9 = load i32, i32* %eax, align 4
  %10 = trunc i32 %9 to i8, !insn.addr !213
  %11 = add i8 %8, %10, !insn.addr !213
  %12 = inttoptr i32 %9 to i8*, !insn.addr !213
  store i8 %11, i8* %12, align 1, !insn.addr !213
  %13 = load i8, i8* %7, align 4, !insn.addr !214
  %14 = load i32, i32* %eax, align 4
  %15 = trunc i32 %14 to i8, !insn.addr !214
  %16 = add i8 %13, %15, !insn.addr !214
  %17 = inttoptr i32 %14 to i8*, !insn.addr !214
  store i8 %16, i8* %17, align 1, !insn.addr !214
  %18 = load i8, i8* %7, align 4, !insn.addr !215
  %19 = load i32, i32* %eax, align 4
  %20 = trunc i32 %19 to i8, !insn.addr !215
  %21 = add i8 %18, %20, !insn.addr !215
  %22 = inttoptr i32 %19 to i8*, !insn.addr !215
  store i8 %21, i8* %22, align 1, !insn.addr !215
  %23 = load i8, i8* %7, align 4, !insn.addr !216
  %24 = load i32, i32* %eax, align 4
  %25 = trunc i32 %24 to i8, !insn.addr !216
  %26 = add i8 %23, %25, !insn.addr !216
  %27 = inttoptr i32 %24 to i8*, !insn.addr !216
  store i8 %26, i8* %27, align 1, !insn.addr !216
  %28 = load i32, i32* %eax, align 4
  %29 = mul i32 %28, 2, !insn.addr !217
  %30 = inttoptr i32 %29 to i8*, !insn.addr !217
  %31 = load i8, i8* %30, align 2, !insn.addr !217
  %32 = add i8 %31, %5, !insn.addr !217
  store i8 %32, i8* %30, align 2, !insn.addr !217
  %33 = mul i32 %1, 257
  %34 = and i32 %33, 65280, !insn.addr !218
  %35 = and i32 %1, -65281, !insn.addr !218
  %36 = or i32 %34, %35, !insn.addr !218
  %37 = load i8, i8* %7, align 4, !insn.addr !219
  %38 = load i32, i32* %eax, align 4
  %39 = trunc i32 %38 to i8, !insn.addr !219
  %40 = add i8 %37, %39, !insn.addr !219
  %41 = inttoptr i32 %38 to i8*, !insn.addr !219
  store i8 %40, i8* %41, align 1, !insn.addr !219
  %42 = load i8, i8* %7, align 4, !insn.addr !220
  %43 = load i32, i32* %eax, align 4
  %44 = trunc i32 %43 to i8, !insn.addr !220
  %45 = add i8 %42, %44, !insn.addr !220
  %46 = inttoptr i32 %43 to i8*, !insn.addr !220
  store i8 %45, i8* %46, align 1, !insn.addr !220
  %47 = load i32, i32* %eax, align 4
  %48 = add i32 %47, 115, !insn.addr !221
  %49 = and i32 %48, 255, !insn.addr !221
  %50 = and i32 %47, -256, !insn.addr !221
  %51 = or i32 %49, %50, !insn.addr !221
  %52 = inttoptr i32 %51 to i8*, !insn.addr !222
  %53 = load i8, i8* %52, align 1, !insn.addr !222
  %54 = trunc i32 %48 to i8, !insn.addr !222
  %55 = add i8 %53, %54, !insn.addr !222
  store i8 %55, i8* %52, align 1, !insn.addr !222
  %56 = mul i32 %51, 2, !insn.addr !223
  %57 = inttoptr i32 %56 to i8*, !insn.addr !223
  %58 = load i8, i8* %57, align 2, !insn.addr !223
  %59 = udiv i32 %0, 256, !insn.addr !223
  %60 = trunc i32 %59 to i8, !insn.addr !223
  %61 = add i8 %58, %60, !insn.addr !223
  store i8 %61, i8* %57, align 2, !insn.addr !223
  ret i32 %36, !insn.addr !224
}

define i32 @function_10015df() local_unnamed_addr {
dec_label_pc_10015df:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10015e4() local_unnamed_addr {
dec_label_pc_10015e4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !225
}

define i32 @function_1001624() local_unnamed_addr {
dec_label_pc_1001624:
  %0 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = bitcast i32* %eax to i8*
  %3 = trunc i32 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !226
  %5 = inttoptr i32 %1 to i8*, !insn.addr !226
  store i8 %4, i8* %5, align 1, !insn.addr !226
  %6 = load i8, i8* %2, align 4, !insn.addr !227
  %7 = load i32, i32* %eax, align 4
  %8 = trunc i32 %7 to i8, !insn.addr !227
  %9 = add i8 %6, %8, !insn.addr !227
  %10 = inttoptr i32 %7 to i8*, !insn.addr !227
  store i8 %9, i8* %10, align 1, !insn.addr !227
  %11 = load i8, i8* %2, align 4, !insn.addr !228
  %12 = load i32, i32* %eax, align 4
  %13 = trunc i32 %12 to i8, !insn.addr !228
  %14 = add i8 %11, %13, !insn.addr !228
  %15 = inttoptr i32 %12 to i8*, !insn.addr !228
  store i8 %14, i8* %15, align 1, !insn.addr !228
  %16 = load i8, i8* %2, align 4, !insn.addr !229
  %17 = load i32, i32* %eax, align 4
  %18 = trunc i32 %17 to i8, !insn.addr !229
  %19 = add i8 %16, %18, !insn.addr !229
  %20 = inttoptr i32 %17 to i8*, !insn.addr !229
  store i8 %19, i8* %20, align 1, !insn.addr !229
  %21 = load i8, i8* %2, align 4, !insn.addr !230
  %22 = load i32, i32* %eax, align 4
  %23 = trunc i32 %22 to i8, !insn.addr !230
  %24 = add i8 %21, %23, !insn.addr !230
  %25 = inttoptr i32 %22 to i8*, !insn.addr !230
  store i8 %24, i8* %25, align 1, !insn.addr !230
  %26 = load i8, i8* %2, align 4, !insn.addr !231
  %27 = load i32, i32* %eax, align 4
  %28 = trunc i32 %27 to i8, !insn.addr !231
  %29 = add i8 %26, %28, !insn.addr !231
  %30 = inttoptr i32 %27 to i8*, !insn.addr !231
  store i8 %29, i8* %30, align 1, !insn.addr !231
  %31 = call i32 @function_1001652(i32 %0), !insn.addr !232
  ret i32 %31, !insn.addr !232
}

define i32 @function_100164b() local_unnamed_addr {
dec_label_pc_100164b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i32, !insn.addr !233
  %3 = add i32 %0, 352359373, !insn.addr !233
  %4 = add i32 %3, %2, !insn.addr !233
  ret i32 %4, !insn.addr !234
}

define i32 @function_1001652(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001652:
  %0 = call i32 @function_10015df(), !insn.addr !235
  ret i32 %0, !insn.addr !235
}

define i32 @function_1001654(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001654:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !236
}

define i32 @function_1001657(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001657:
  %esp.1.reg2mem = alloca i32, !insn.addr !237
  %edx.0.reg2mem = alloca i32, !insn.addr !237
  %eax.1.reg2mem = alloca i32, !insn.addr !237
  %ebp.0.reg2mem = alloca i32, !insn.addr !237
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i128 @__decompiler_undefined_function_4()
  %stack_var_-8 = alloca i32, align 4
  %7 = call i8* @__decompiler_undefined_function_5()
  %8 = add i32 %3, -34, !insn.addr !238
  %9 = inttoptr i32 %8 to i8*, !insn.addr !238
  %10 = load i8, i8* %9, align 1, !insn.addr !238
  %11 = trunc i32 %3 to i8, !insn.addr !238
  %12 = xor i8 %10, %11, !insn.addr !238
  store i8 %12, i8* %9, align 1, !insn.addr !238
  %13 = add i32 %5, 16781452, !insn.addr !239
  %14 = inttoptr i32 %13 to i32*, !insn.addr !239
  %15 = load i32, i32* %14, align 4, !insn.addr !239
  %16 = add i32 %15, 1, !insn.addr !239
  store i32 %16, i32* %14, align 4, !insn.addr !239
  %17 = add i32 %5, 111, !insn.addr !240
  %18 = and i32 %17, 255, !insn.addr !240
  %19 = and i32 %5, -256, !insn.addr !240
  %20 = or i32 %18, %19, !insn.addr !240
  %21 = load i8, i8* %7, align 1, !insn.addr !241
  %22 = trunc i32 %17 to i8, !insn.addr !241
  %23 = inttoptr i32 %20 to i16*, !insn.addr !242
  %24 = load i16, i16* %23, align 2, !insn.addr !242
  %25 = udiv i32 %4, 256, !insn.addr !243
  %26 = or i32 %25, %2
  %27 = trunc i32 %26 to i8, !insn.addr !243
  %28 = inttoptr i32 %2 to i8*, !insn.addr !243
  store i8 %27, i8* %28, align 1, !insn.addr !243
  %29 = trunc i32 %4 to i16, !insn.addr !244
  call void @__asm_outsd(i16 %29, i32 %1), !insn.addr !244
  %30 = inttoptr i32 %20 to i8*, !insn.addr !245
  %31 = load i8, i8* %30, align 1, !insn.addr !245
  %32 = add i8 %31, %22, !insn.addr !245
  store i8 %32, i8* %30, align 1, !insn.addr !245
  %.mask = and i32 %0, 2147483647
  %33 = icmp eq i32 %.mask, 1, !insn.addr !246
  %34 = icmp eq i1 %33, false, !insn.addr !247
  br i1 %34, label %dec_label_pc_10016aa, label %dec_label_pc_100169e, !insn.addr !247

dec_label_pc_100169e:                             ; preds = %dec_label_pc_1001657
  %35 = add i32 %1, -125, !insn.addr !248
  %36 = inttoptr i32 %35 to i8*, !insn.addr !248
  %37 = load i8, i8* %36, align 1, !insn.addr !248
  %38 = udiv i32 %5, 256, !insn.addr !248
  %39 = trunc i32 %38 to i8, !insn.addr !248
  %40 = and i8 %37, %39, !insn.addr !248
  store i8 %40, i8* %36, align 1, !insn.addr !248
  ret i32 %20, !insn.addr !249

dec_label_pc_10016aa:                             ; preds = %dec_label_pc_1001657
  %41 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !250
  %42 = and i16 %24, 15, !insn.addr !251
  %43 = add nsw i16 %42, -2, !insn.addr !251
  %44 = icmp ugt i16 %43, 15, !insn.addr !251
  %45 = icmp ult i16 %24, 34, !insn.addr !251
  %46 = icmp eq i16 %24, 34, !insn.addr !251
  %47 = icmp eq i1 %46, false, !insn.addr !252
  %az.0 = icmp eq i1 %47, %44
  %cf.0 = icmp eq i1 %45, %47
  %48 = add i32 %41, -4, !insn.addr !253
  %49 = inttoptr i32 %48 to i32*, !insn.addr !253
  store i32 %20, i32* %49, align 4, !insn.addr !253
  %50 = and i8 %22, 14, !insn.addr !254
  %51 = icmp ugt i8 %50, 9, !insn.addr !254
  %52 = or i1 %51, %az.0, !insn.addr !254
  %53 = icmp ugt i8 %22, -103
  %54 = or i1 %53, %cf.0
  %.v = select i1 %54, i32 102, i32 6
  %55 = add i32 %.v, %17
  %56 = add i32 %5, 207
  %57 = select i1 %54, i32 %56, i32 %17
  %.pn.in = select i1 %52, i32 %55, i32 %57
  %.pn = and i32 %.pn.in, 255
  %storemerge = or i32 %.pn, %19
  %58 = inttoptr i32 %storemerge to i32*, !insn.addr !255
  %59 = load i32, i32* %58, align 4, !insn.addr !255
  %60 = trunc i32 %59 to i16, !insn.addr !256
  %61 = icmp eq i16 %60, 0, !insn.addr !256
  %62 = icmp eq i1 %61, false, !insn.addr !257
  br i1 %62, label %dec_label_pc_10016f4, label %dec_label_pc_10016c4, !insn.addr !257

dec_label_pc_10016c4:                             ; preds = %dec_label_pc_10016aa
  %63 = trunc i32 %59 to i8, !insn.addr !256
  %64 = call i8 @llvm.ctpop.i8(i8 %63), !range !258, !insn.addr !256
  %65 = and i8 %64, 1, !insn.addr !256
  %66 = icmp eq i8 %65, 0, !insn.addr !256
  %67 = icmp slt i16 %60, 0, !insn.addr !256
  %68 = zext i1 %66 to i32, !insn.addr !259
  %69 = zext i1 %61 to i32, !insn.addr !259
  %70 = zext i1 %67 to i32, !insn.addr !259
  %71 = mul i32 %68, 1024, !insn.addr !259
  %72 = mul i32 %69, 16384, !insn.addr !259
  %73 = mul i32 %70, 32768, !insn.addr !259
  %74 = and i32 %storemerge, -65281, !insn.addr !259
  %75 = or i32 %74, %72, !insn.addr !259
  %76 = or i32 %75, %73, !insn.addr !259
  %77 = or i32 %76, %71, !insn.addr !259
  %78 = or i32 %77, 512, !insn.addr !259
  %79 = inttoptr i32 %59 to i32*, !insn.addr !260
  %80 = load i32, i32* %79, align 4, !insn.addr !260
  %81 = add i32 %80, %48, !insn.addr !260
  %82 = inttoptr i32 %78 to i8*, !insn.addr !261
  %83 = load i8, i8* %82, align 1, !insn.addr !261
  %84 = trunc i32 %.pn.in to i8, !insn.addr !261
  %85 = add i8 %83, %84, !insn.addr !261
  store i8 %85, i8* %82, align 1, !insn.addr !261
  %86 = inttoptr i32 %81 to i32*, !insn.addr !262
  %87 = load i32, i32* %86, align 4, !insn.addr !262
  store i32 2, i32* %86, align 4, !insn.addr !263
  %88 = add i32 %2, 4, !insn.addr !264
  %89 = add i32 %2, 352321663, !insn.addr !265
  %90 = inttoptr i32 %89 to i128*, !insn.addr !265
  %91 = load i128, i128* %90, align 4, !insn.addr !265
  call void @__asm_comiss(i128 %6, i128 %91), !insn.addr !265
  %92 = mul i32 %4, 2, !insn.addr !266
  %93 = add i32 %4, 124, !insn.addr !266
  %94 = add i32 %93, %92, !insn.addr !266
  %95 = inttoptr i32 %94 to i64*, !insn.addr !266
  %96 = load i64, i64* %95, align 4, !insn.addr !266
  %97 = call i32 @__asm_bound(i64 %96), !insn.addr !266
  %98 = add i32 %87, 10868, !insn.addr !267
  %99 = and i32 %98, 65535, !insn.addr !267
  %100 = and i32 %87, -65536, !insn.addr !267
  %101 = or i32 %99, %100, !insn.addr !267
  %102 = icmp eq i32 %59, 105, !insn.addr !268
  store i32 %101, i32* %eax.1.reg2mem, !insn.addr !269
  store i32 %88, i32* %esp.1.reg2mem, !insn.addr !269
  br i1 %102, label %dec_label_pc_100178a, label %dec_label_pc_10016f1, !insn.addr !269

dec_label_pc_10016f1:                             ; preds = %dec_label_pc_10016c4
  %103 = add i32 %81, 2, !insn.addr !270
  %104 = inttoptr i32 %103 to i16*, !insn.addr !270
  ret i32 %101, !insn.addr !271

dec_label_pc_10016f4:                             ; preds = %dec_label_pc_10016aa
  %105 = add i32 %41, -8, !insn.addr !272
  %106 = inttoptr i32 %105 to i32*, !insn.addr !272
  store i32 -2051668503, i32* %106, align 4, !insn.addr !272
  %107 = inttoptr i32 %storemerge to i8*, !insn.addr !273
  %108 = load i8, i8* %107, align 1, !insn.addr !273
  %109 = trunc i32 %.pn.in to i8, !insn.addr !273
  %110 = add i8 %108, %109, !insn.addr !273
  store i8 %110, i8* %107, align 1, !insn.addr !273
  %111 = add i32 %41, -12, !insn.addr !274
  %112 = inttoptr i32 %111 to i32*, !insn.addr !274
  store i32 %storemerge, i32* %112, align 4, !insn.addr !274
  %113 = inttoptr i32 %storemerge to i16*, !insn.addr !275
  %114 = load i16, i16* %113, align 2, !insn.addr !275
  %115 = zext i16 %114 to i32, !insn.addr !275
  %116 = and i32 %59, -65536, !insn.addr !275
  %117 = or i32 %116, %115, !insn.addr !275
  %118 = icmp eq i32 %117, 0, !insn.addr !276
  br i1 %118, label %dec_label_pc_1001786, label %dec_label_pc_100171e, !insn.addr !276

dec_label_pc_100171e:                             ; preds = %dec_label_pc_10016f4
  %119 = add i32 %.pn.in, 64, !insn.addr !277
  %120 = and i32 %119, 255, !insn.addr !277
  %121 = or i32 %120, %19, !insn.addr !277
  %122 = inttoptr i32 %117 to i32*, !insn.addr !278
  %123 = load i32, i32* %122, align 4, !insn.addr !278
  %124 = add i32 %123, %121, !insn.addr !278
  store i32 %124, i32* %122, align 4, !insn.addr !278
  %125 = add i32 %41, -16, !insn.addr !279
  %126 = inttoptr i32 %125 to i32*, !insn.addr !279
  store i32 %121, i32* %126, align 4, !insn.addr !279
  %127 = call i32 @function_10017b3(), !insn.addr !280
  ret i32 %127, !insn.addr !280

dec_label_pc_1001786:                             ; preds = %dec_label_pc_10016f4
  %128 = add i32 %0, 574046, !insn.addr !281
  %129 = inttoptr i32 %128 to i32*, !insn.addr !281
  %130 = add i8 %21, %22, !insn.addr !241
  %131 = add i32 %4, -1, !insn.addr !282
  %132 = add i32 %2, 1, !insn.addr !283
  %133 = add i32 %41, -16, !insn.addr !284
  %134 = inttoptr i32 %133 to i32*, !insn.addr !284
  store i32 %131, i32* %134, align 4, !insn.addr !284
  %135 = add i32 %2, 12, !insn.addr !285
  %136 = inttoptr i32 %135 to i32*, !insn.addr !285
  %137 = load i32, i32* %136, align 4, !insn.addr !285
  %138 = or i32 %137, %1, !insn.addr !285
  store i32 %138, i32* %136, align 4, !insn.addr !285
  store i32 %132, i32* %ebp.0.reg2mem, !insn.addr !285
  store i32 %storemerge, i32* %eax.1.reg2mem, !insn.addr !285
  store i32 %131, i32* %edx.0.reg2mem, !insn.addr !285
  store i32 %133, i32* %esp.1.reg2mem, !insn.addr !285
  br label %dec_label_pc_100178a, !insn.addr !285

dec_label_pc_100178a:                             ; preds = %dec_label_pc_1001786, %dec_label_pc_10016c4
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %139 = add i32 %esp.1.reload, -4, !insn.addr !286
  %140 = inttoptr i32 %139 to i32*, !insn.addr !286
  store i32 %eax.1.reload, i32* %140, align 4, !insn.addr !286
  %141 = add i32 %ebp.0.reload, 1759729353, !insn.addr !287
  %142 = inttoptr i32 %141 to i8*, !insn.addr !287
  %143 = load i8, i8* %142, align 1, !insn.addr !287
  %144 = trunc i32 %eax.1.reload to i8, !insn.addr !287
  %145 = sub i8 %143, %144, !insn.addr !287
  store i8 %145, i8* %142, align 1, !insn.addr !287
  %146 = add i32 %eax.1.reload, 1, !insn.addr !288
  %147 = inttoptr i32 %146 to i8*, !insn.addr !288
  %148 = load i8, i8* %147, align 1, !insn.addr !288
  %149 = or i8 %148, %144, !insn.addr !288
  store i8 %149, i8* %147, align 1, !insn.addr !288
  %150 = add i32 %eax.1.reload, -24, !insn.addr !289
  %151 = inttoptr i32 %150 to i32*, !insn.addr !289
  %152 = load i32, i32* %151, align 4, !insn.addr !289
  %153 = add i32 %152, %edx.0.reload, !insn.addr !289
  store i32 %153, i32* %151, align 4, !insn.addr !289
  ret i32 %eax.1.reload, !insn.addr !290
}

define i32 @function_10017a0() local_unnamed_addr {
dec_label_pc_10017a0:
  %0 = call i32 @__decompiler_undefined_function_0()
  store i32 16095546, i32* @global_var_1014008, align 4, !insn.addr !291
  ret i32 %0, !insn.addr !291
}

define i32 @function_10017b3() local_unnamed_addr {
dec_label_pc_10017b3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 22, !insn.addr !292
  %3 = inttoptr i32 %2 to i16*, !insn.addr !292
  %4 = load i16, i16* %3, align 2, !insn.addr !292
  %5 = zext i16 %4 to i32, !insn.addr !292
  %6 = and i32 %1, -65536, !insn.addr !292
  %7 = or i32 %6, %5, !insn.addr !292
  %8 = add i32 %0, 2, !insn.addr !293
  %9 = inttoptr i32 %8 to i16*, !insn.addr !293
  ret i32 %7, !insn.addr !294
}

define i32 @function_10017d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10017d4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, 1, !insn.addr !295
  %5 = inttoptr i32 %4 to i8*, !insn.addr !295
  %6 = load i8, i8* %5, align 1, !insn.addr !295
  %7 = trunc i32 %2 to i8, !insn.addr !295
  %8 = and i8 %6, %7, !insn.addr !295
  store i8 %8, i8* %5, align 1, !insn.addr !295
  %9 = add i32 %3, 92, !insn.addr !296
  %10 = inttoptr i32 %9 to i32*, !insn.addr !296
  %11 = load i32, i32* %10, align 4, !insn.addr !296
  %12 = add i32 %11, %0, !insn.addr !296
  store i32 %12, i32* %10, align 4, !insn.addr !296
  ret i32 %3, !insn.addr !297
}

define i32 @function_10017ec() local_unnamed_addr {
dec_label_pc_10017ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10017ed() local_unnamed_addr {
dec_label_pc_10017ed:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call x86_fp80 @__decompiler_undefined_function_6()
  %8 = call i1 @__decompiler_undefined_function_2()
  %stack_var_0 = alloca i32, align 4
  %9 = add i32 %5, -62, !insn.addr !298
  %10 = inttoptr i32 %9 to i32*, !insn.addr !298
  %11 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !298
  store i32 %11, i32* %10, align 4, !insn.addr !298
  %12 = add i32 %5, -624436107, !insn.addr !299
  %13 = inttoptr i32 %12 to i32*, !insn.addr !299
  %14 = load i32, i32* %13, align 4, !insn.addr !299
  %15 = add i32 %14, %5, !insn.addr !299
  %16 = icmp eq i32 %15, 0, !insn.addr !299
  store i32 %15, i32* %13, align 4, !insn.addr !299
  %17 = icmp eq i32 %5, 1, !insn.addr !300
  %18 = or i1 %17, %16, !insn.addr !300
  br i1 %18, label %dec_label_pc_10017f8, label %dec_label_pc_1001816, !insn.addr !300

dec_label_pc_10017f8:                             ; preds = %dec_label_pc_10017ed
  %19 = load i8, i8* inttoptr (i32 -465204992 to i8*), align 256, !insn.addr !301
  %20 = udiv i32 %3, 256, !insn.addr !301
  %21 = trunc i32 %20 to i8, !insn.addr !301
  %22 = add i8 %19, %21, !insn.addr !301
  store i8 %22, i8* inttoptr (i32 -465204992 to i8*), align 256, !insn.addr !301
  %23 = add i32 %2, -24, !insn.addr !302
  %24 = inttoptr i32 %23 to i32*, !insn.addr !302
  %25 = inttoptr i32 %1 to i32*, !insn.addr !303
  %26 = call i32* @LoadCursorW(i32* %25, i16* inttoptr (i16 32512 to i16*)), !insn.addr !303
  %27 = ptrtoint i32* %26 to i32, !insn.addr !303
  ret i32 %27, !insn.addr !304

dec_label_pc_1001816:                             ; preds = %dec_label_pc_10017ed
  %28 = icmp ult i32 %15, %14, !insn.addr !299
  %29 = add i32 %2, 1, !insn.addr !305
  %30 = trunc i32 %4 to i16, !insn.addr !306
  %31 = call i8 @__asm_in.3(i16 %30), !insn.addr !306
  %32 = sext i8 %31 to i32, !insn.addr !306
  %33 = and i32 %6, -256, !insn.addr !306
  %34 = or i32 %33, %32, !insn.addr !306
  %35 = load i32, i32* inttoptr (i32 16781604 to i32*), align 4, !insn.addr !307
  %.neg = sext i1 %28 to i32
  %.neg3 = add i32 %4, %.neg, !insn.addr !307
  %36 = sub i32 %.neg3, %35, !insn.addr !307
  %37 = add i32 %36, -16, !insn.addr !308
  %38 = inttoptr i32 %37 to i32*, !insn.addr !308
  store i32 %34, i32* %38, align 4, !insn.addr !308
  %39 = add i32 %5, 36, !insn.addr !309
  %40 = and i32 %34, 65535
  %41 = inttoptr i32 %40 to %tagWNDCLASSEXW*, !insn.addr !310
  %42 = add i32 %2, -11, !insn.addr !311
  %43 = inttoptr i32 %42 to i32*, !insn.addr !311
  store i32 9437290, i32* %43, align 4, !insn.addr !311
  %44 = add i32 %2, -23, !insn.addr !312
  %45 = inttoptr i32 %44 to i32*, !insn.addr !312
  store i32 ptrtoint ([8 x i16]* @global_var_1014018 to i32), i32* %45, align 4, !insn.addr !312
  %46 = call i16 @RegisterClassExW(%tagWNDCLASSEXW* %41), !insn.addr !313
  %47 = sext i16 %46 to i32, !insn.addr !313
  %48 = icmp eq i16 %46, 0, !insn.addr !314
  %49 = icmp eq i1 %48, false, !insn.addr !315
  %spec.store.select = select i1 %49, i32 %47, i32 0
  %sext = mul i32 %34, 65536
  %50 = sdiv i32 %sext, 65536, !insn.addr !316
  %51 = inttoptr i32 %29 to i32*, !insn.addr !317
  %52 = load i32, i32* %51, align 4, !insn.addr !317
  %53 = mul i32 %spec.store.select, 2, !insn.addr !318
  %54 = inttoptr i32 %53 to i8*, !insn.addr !318
  %55 = load i8, i8* %54, align 2, !insn.addr !318
  %56 = add i8 %55, 1, !insn.addr !318
  store i8 %56, i8* %54, align 2, !insn.addr !318
  store i32 %39, i32* %51, align 4, !insn.addr !319
  %57 = trunc i32 %spec.store.select to i8, !insn.addr !320
  %58 = add nsw i32 %50, 21872744, !insn.addr !320
  %59 = inttoptr i32 %58 to i8*, !insn.addr !320
  store i8 %57, i8* %59, align 1, !insn.addr !320
  %60 = add i32 %spec.store.select, %52, !insn.addr !321
  %61 = getelementptr inbounds %tagWNDCLASSEXW, %tagWNDCLASSEXW* %41, i32 0, i32 0
  %62 = load i32, i32* %61, align 4, !insn.addr !322
  %63 = inttoptr i32 %0 to i32*, !insn.addr !322
  store i32 %62, i32* %63, align 4, !insn.addr !322
  %64 = select i1 %8, i32 -4, i32 4, !insn.addr !322
  %65 = add i32 %64, %0, !insn.addr !322
  %66 = mul i32 %60, 2, !insn.addr !323
  %67 = inttoptr i32 %66 to i32*, !insn.addr !323
  %68 = load i32, i32* %67, align 4, !insn.addr !323
  %69 = or i32 %68, %52, !insn.addr !323
  store i32 %69, i32* %67, align 4, !insn.addr !323
  %70 = load i32, i32* @global_var_1014d14, align 4, !insn.addr !324
  %71 = add i32 %2, -3, !insn.addr !324
  %72 = inttoptr i32 %71 to i32*, !insn.addr !324
  store i32 %70, i32* %72, align 4, !insn.addr !324
  store i32 1, i32* @global_var_101afb8, align 4, !insn.addr !325
  %73 = add i32 %36, 99, !insn.addr !326
  %74 = inttoptr i32 %73 to i32*, !insn.addr !326
  %75 = load i32, i32* %74, align 4, !insn.addr !326
  %76 = xor i32 %75, %71, !insn.addr !326
  store i32 %76, i32* %74, align 4, !insn.addr !326
  %77 = load i32, i32* %72, align 4, !insn.addr !327
  %78 = inttoptr i32 %39 to i8*, !insn.addr !328
  %79 = load i8, i8* %78, align 1, !insn.addr !328
  %80 = udiv i32 %36, 256, !insn.addr !328
  %81 = trunc i32 %80 to i8, !insn.addr !328
  %82 = add i8 %79, %81, !insn.addr !328
  store i8 %82, i8* %78, align 1, !insn.addr !328
  %83 = fptosi x86_fp80 %7 to i32, !insn.addr !329
  %84 = add i32 %5, 21873902, !insn.addr !329
  %85 = inttoptr i32 %84 to i32*, !insn.addr !329
  store i32 %83, i32* %85, align 4, !insn.addr !329
  %86 = add i32 %77, %52, !insn.addr !330
  %87 = trunc i32 %86 to i8, !insn.addr !331
  %88 = inttoptr i32 %65 to i8*, !insn.addr !331
  store i8 %87, i8* %88, align 1, !insn.addr !331
  %89 = inttoptr i32 %86 to i16*, !insn.addr !332
  %90 = load i16, i16* %89, align 2, !insn.addr !332
  %91 = trunc i32 %86 to i16, !insn.addr !332
  call void @__asm_arpl(i16 %90, i16 %91), !insn.addr !332
  %92 = add i32 %5, 820202932, !insn.addr !333
  %93 = inttoptr i32 %92 to i8*, !insn.addr !333
  %94 = load i8, i8* %93, align 1, !insn.addr !333
  %95 = udiv i32 %86, 256, !insn.addr !333
  %96 = trunc i32 %95 to i8, !insn.addr !333
  %97 = add i8 %94, %96, !insn.addr !333
  store i8 %97, i8* %93, align 1, !insn.addr !333
  %98 = inttoptr i32 %86 to i32*, !insn.addr !334
  %99 = load i32, i32* %98, align 4, !insn.addr !334
  store i32 %99, i32* %72, align 4, !insn.addr !334
  ret i32 %86, !insn.addr !334
}

define i32 @function_1001884() local_unnamed_addr {
dec_label_pc_1001884:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %5, %4, !insn.addr !335
  %7 = inttoptr i32 %4 to i32*, !insn.addr !335
  store i32 %6, i32* %7, align 4, !insn.addr !335
  %8 = add i32 %4, 21988513, !insn.addr !336
  %9 = inttoptr i32 %8 to i32*, !insn.addr !336
  %10 = add i32 %3, 74496000, !insn.addr !337
  %11 = inttoptr i32 %10 to i32*, !insn.addr !337
  %12 = load i32, i32* %11, align 4, !insn.addr !337
  %13 = add i32 %12, %4, !insn.addr !337
  store i32 %13, i32* %11, align 4, !insn.addr !337
  %14 = call i32 @unknown_f0b07bfb(), !insn.addr !338
  %15 = load i32, i32* inttoptr (i32 28790160 to i32*), align 16, !insn.addr !339
  %16 = call i32 @__asm_int3(), !insn.addr !340
  %17 = add i32 %15, 16881028, !insn.addr !341
  %18 = inttoptr i32 %17 to i32*, !insn.addr !341
  %19 = load i32, i32* %18, align 4, !insn.addr !341
  %20 = add i32 %19, %2, !insn.addr !341
  store i32 %20, i32* %18, align 4, !insn.addr !341
  %21 = add i32 %1, -1, !insn.addr !342
  %22 = add i32 %16, 161, !insn.addr !343
  %23 = and i32 %22, 255, !insn.addr !343
  %24 = and i32 %16, -256, !insn.addr !343
  %25 = or i32 %23, %24, !insn.addr !343
  %26 = inttoptr i32 %15 to i32*, !insn.addr !344
  %27 = load i32, i32* %26, align 4, !insn.addr !344
  %28 = add i32 %27, %25, !insn.addr !344
  store i32 %28, i32* %26, align 4, !insn.addr !344
  %29 = add i32 %3, 213391245, !insn.addr !345
  %30 = inttoptr i32 %29 to i32*, !insn.addr !345
  %31 = load i32, i32* %30, align 4, !insn.addr !345
  %32 = inttoptr i32 %25 to i8*, !insn.addr !346
  %33 = load i8, i8* %32, align 1, !insn.addr !346
  %34 = trunc i32 %22 to i8, !insn.addr !346
  %35 = add i8 %33, %34, !insn.addr !346
  store i8 %35, i8* %32, align 1, !insn.addr !346
  %36 = add i32 %31, 48873877, !insn.addr !347
  %37 = inttoptr i32 %36 to i8*, !insn.addr !347
  %38 = load i8, i8* %37, align 1, !insn.addr !347
  %39 = trunc i32 %15 to i8, !insn.addr !347
  %40 = add i8 %38, %39, !insn.addr !347
  store i8 %40, i8* %37, align 1, !insn.addr !347
  %41 = inttoptr i32 %21 to i8*, !insn.addr !348
  %42 = inttoptr i32 %0 to i8*, !insn.addr !348
  call void @__asm_rep_movsd_memcpy(i8* %42, i8* %41, i32 %15), !insn.addr !348
  call void @llvm.trap()
  unreachable
}

define i32 @function_1001924() local_unnamed_addr {
dec_label_pc_1001924:
  %0 = call i32 @function_e89b014d(), !insn.addr !349
  ret i32 %0, !insn.addr !349
}

define i32 @function_1001951() local_unnamed_addr {
dec_label_pc_1001951:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 8
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i128 @__decompiler_undefined_function_4()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = and i32 %1, 65280, !insn.addr !350
  %7 = add i32 %6, %1
  %8 = and i32 %7, 65280, !insn.addr !350
  %9 = and i32 %1, -65281, !insn.addr !350
  %10 = or i32 %8, %9, !insn.addr !350
  %11 = call i32 @__asm_sti(), !insn.addr !351
  %12 = load i32, i32* inttoptr (i32 -1962934174 to i32*), align 4, !insn.addr !352
  %13 = or i32 %12, -2046734952, !insn.addr !353
  %14 = add i32 %2, -95, !insn.addr !354
  %15 = inttoptr i32 %14 to i32*, !insn.addr !354
  %16 = inttoptr i32 %13 to i32 addrspace(258)*, !insn.addr !355
  %17 = load i32, i32 addrspace(258)* %16, align 4, !insn.addr !355
  %18 = add i32 %0, -1, !insn.addr !356
  %19 = add i32 %13, %3, !insn.addr !357
  %20 = inttoptr i32 %3 to i32*, !insn.addr !357
  store i32 %19, i32* %20, align 4, !insn.addr !357
  %21 = inttoptr i32 %13 to i32*, !insn.addr !358
  %22 = load i32, i32* %21, align 4, !insn.addr !358
  %23 = mul i32 %10, 2, !insn.addr !359
  %24 = add i32 %22, %23, !insn.addr !359
  %25 = inttoptr i32 %13 to i8*, !insn.addr !360
  %26 = load i8, i8* %25, align 1, !insn.addr !360
  %27 = trunc i32 %13 to i8, !insn.addr !360
  %28 = add i8 %26, %27, !insn.addr !360
  store i8 %28, i8* %25, align 1, !insn.addr !360
  %29 = bitcast i32* %edx to i128*
  %30 = load i128, i128* %29, align 8, !insn.addr !361
  %31 = call i128 @__asm_vpsubsw(i128 %4, i128 %30), !insn.addr !361
  %32 = inttoptr i32 %17 to i8*, !insn.addr !362
  %33 = inttoptr i32 %22 to i8*, !insn.addr !362
  call void @__asm_rep_movsd_memcpy(i8* %33, i8* %32, i32 %24), !insn.addr !362
  %34 = select i1 %5, i32 -4, i32 4, !insn.addr !362
  %35 = mul i32 %24, %34, !insn.addr !362
  %36 = add i32 %35, %22, !insn.addr !362
  %37 = inttoptr i32 %36 to i8*, !insn.addr !363
  call void @__asm_rep_movsb_memcpy(i8* %37, i8* %37, i32 0), !insn.addr !363
  %38 = load i32, i32* inttoptr (i32 10799107 to i32*), align 4, !insn.addr !364
  store i32 %38, i32* inttoptr (i32 -1734278070 to i32*), align 4, !insn.addr !364
  %39 = call i32 @unknown_ae00b2c1(), !insn.addr !365
  %40 = load i32, i32* inttoptr (i32 1912688024 to i32*), align 8, !insn.addr !366
  %41 = add i32 %40, 4, !insn.addr !367
  %42 = inttoptr i32 %41 to i32*, !insn.addr !367
  store i32 %10, i32* %42, align 4, !insn.addr !367
  %43 = load i32, i32* inttoptr (i32 19843460 to i32*), align 4, !insn.addr !368
  %44 = add i32 %43, 4, !insn.addr !369
  %45 = inttoptr i32 %44 to i32*, !insn.addr !369
  %46 = load i32, i32* %45, align 4, !insn.addr !369
  %47 = add i32 %46, 4, !insn.addr !370
  %48 = inttoptr i32 %47 to i32*, !insn.addr !370
  %49 = load i32, i32* %48, align 4, !insn.addr !370
  store i32 %49, i32* inttoptr (i32 -1734278074 to i32*), align 4, !insn.addr !370
  %50 = call i32 @function_1007c38(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !371
  %51 = load i32, i32* inttoptr (i32 -1175499368 to i32*), align 8, !insn.addr !372
  %52 = add i32 %51, 4, !insn.addr !373
  %53 = inttoptr i32 %52 to i32*, !insn.addr !373
  store i32 %50, i32* %53, align 4, !insn.addr !373
  store i32 %18, i32* inttoptr (i32 -1734278078 to i32*), align 4, !insn.addr !374
  %54 = add i32 %10, 1321282672, !insn.addr !375
  %55 = inttoptr i32 %54 to i32*, !insn.addr !375
  %56 = load i32, i32* %55, align 4, !insn.addr !375
  %57 = add i32 %56, %51, !insn.addr !375
  store i32 %57, i32* %55, align 4, !insn.addr !375
  %58 = add i32 %50, 161, !insn.addr !376
  %59 = and i32 %58, 255, !insn.addr !376
  %60 = and i32 %50, 65280, !insn.addr !376
  %61 = or i32 %59, %60, !insn.addr !376
  %sext = mul i32 %61, 65536
  %62 = sdiv i32 %sext, 65536, !insn.addr !377
  %63 = inttoptr i32 %51 to i32*, !insn.addr !378
  %64 = load i32, i32* %63, align 4, !insn.addr !378
  %65 = add i32 %64, %62, !insn.addr !378
  store i32 %65, i32* %63, align 4, !insn.addr !378
  %66 = call i32 @function_a5f302e9(), !insn.addr !379
  ret i32 %66, !insn.addr !379
}

define i32 @function_10019d9(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10019d9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_0 = alloca i32, align 4
  %7 = and i32 %4, 3, !insn.addr !380
  %8 = inttoptr i32 %1 to i8*, !insn.addr !381
  %9 = inttoptr i32 %0 to i8*, !insn.addr !381
  call void @__asm_rep_movsb_memcpy(i8* %9, i8* %8, i32 %7), !insn.addr !381
  %10 = select i1 %6, i32 -1, i32 1, !insn.addr !381
  %11 = mul nsw i32 %10, %7, !insn.addr !381
  %12 = add i32 %0, 1, !insn.addr !381
  %13 = add i32 %12, %11, !insn.addr !382
  %14 = load i32, i32* inttoptr (i32 51 to i32*), align 4, !insn.addr !383
  %15 = sub i32 %14, %2, !insn.addr !383
  store i32 %15, i32* inttoptr (i32 51 to i32*), align 4, !insn.addr !383
  %16 = inttoptr i32 %13 to i8*, !insn.addr !384
  call void @__asm_rep_stosd_memset(i8* %16, i32 %5, i32 0), !insn.addr !384
  store i32 4, i32* %stack_var_0, align 4, !insn.addr !385
  %17 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !385
  %18 = trunc i32 %3 to i8, !insn.addr !386
  %19 = mul i32 %arg1, 2, !insn.addr !386
  %20 = or i32 %17, 1, !insn.addr !386
  %21 = add i32 %20, %19, !insn.addr !386
  %22 = inttoptr i32 %21 to i8*, !insn.addr !386
  %23 = load i8, i8* %22, align 1, !insn.addr !386
  %24 = and i8 %23, %18, !insn.addr !386
  %25 = zext i8 %24 to i32, !insn.addr !386
  %26 = and i32 %3, 65280, !insn.addr !386
  %27 = or i32 %26, %25, !insn.addr !386
  %28 = trunc i32 %27 to i16, !insn.addr !387
  call void @__asm_out.2(i16 %28, i32 %5), !insn.addr !387
  call void @__asm_rep_stosd_memset(i8* %16, i32 %5, i32 %arg1), !insn.addr !388
  %29 = call i32* @LocalAlloc(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !389
  call void @llvm.trap()
  unreachable
}

define i32 @function_1001a38() local_unnamed_addr {
dec_label_pc_1001a38:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !390
}

define i32 @function_1001b4d() local_unnamed_addr {
dec_label_pc_1001b4d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !391
}

define i32 @function_1001bcc() local_unnamed_addr {
dec_label_pc_1001bcc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1001c2b(i8 %arg1) local_unnamed_addr {
dec_label_pc_1001c2b:
  %esp.2.reg2mem = alloca i32, !insn.addr !392
  %eax.0.reg2mem = alloca i32, !insn.addr !392
  %esp.1.reg2mem = alloca i32, !insn.addr !392
  %.pre-phi.reg2mem = alloca i16, !insn.addr !392
  %esp.0.reg2mem = alloca i32, !insn.addr !392
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-5 = alloca i32, align 4
  %stack_var_53 = alloca i32, align 4
  %stack_var_-67 = alloca i32, align 4
  %stack_var_-35 = alloca i32, align 4
  %8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-393 = alloca i8*, align 4
  %stack_var_-3 = alloca i32, align 4
  %stack_var_-389 = alloca i32, align 4
  %9 = mul i32 %5, 2, !insn.addr !392
  %10 = add i32 %2, 1, !insn.addr !392
  %11 = add i32 %10, %9, !insn.addr !392
  %12 = inttoptr i32 %11 to i32*, !insn.addr !392
  %13 = load i32, i32* %12, align 4, !insn.addr !392
  %14 = xor i32 %13, %2, !insn.addr !392
  store i32 %14, i32* %12, align 4, !insn.addr !392
  %15 = and i32 %3, -256, !insn.addr !393
  %16 = add i32 %15, %3
  %17 = and i32 %16, 65280, !insn.addr !393
  %18 = and i32 %3, -65281, !insn.addr !393
  %19 = or i32 %17, %18, !insn.addr !393
  %20 = ptrtoint i32* %stack_var_-389 to i32, !insn.addr !394
  %21 = add i32 %19, 123, !insn.addr !395
  %22 = inttoptr i32 %21 to i8*, !insn.addr !395
  %23 = load i8, i8* %22, align 1, !insn.addr !395
  %24 = udiv i32 %16, 256, !insn.addr !395
  %25 = trunc i32 %24 to i8, !insn.addr !395
  %26 = or i8 %23, %25, !insn.addr !395
  store i8 %26, i8* %22, align 1, !insn.addr !395
  %27 = mul i32 %4, 2, !insn.addr !396
  %28 = add i32 %0, 25, !insn.addr !396
  %29 = add i32 %28, %27, !insn.addr !396
  %30 = inttoptr i32 %29 to i8*, !insn.addr !396
  %31 = load i8, i8* %30, align 1, !insn.addr !396
  %32 = trunc i32 %3 to i8, !insn.addr !396
  %33 = add i8 %31, %32, !insn.addr !396
  %34 = icmp eq i8 %33, 0, !insn.addr !396
  store i8 %33, i8* %30, align 1, !insn.addr !396
  %35 = icmp eq i1 %34, false, !insn.addr !397
  store i32 %20, i32* %esp.0.reg2mem, !insn.addr !397
  br i1 %35, label %dec_label_pc_1001c49, label %dec_label_pc_1001c41, !insn.addr !397

dec_label_pc_1001c41:                             ; preds = %dec_label_pc_1001c2b
  %36 = load i8*, i8** @global_var_1014d6c, align 4
  %37 = ptrtoint i8* %36 to i32
  %38 = bitcast i8** %stack_var_-393 to i32*
  store i32 %37, i32* %38, align 4
  %39 = ptrtoint i8** %stack_var_-393 to i32, !insn.addr !398
  store i32 %39, i32* %esp.0.reg2mem, !insn.addr !399
  br label %dec_label_pc_1001c49, !insn.addr !399

dec_label_pc_1001c49:                             ; preds = %dec_label_pc_1001c41, %dec_label_pc_1001c2b
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %40 = inttoptr i32 %2 to i32*, !insn.addr !400
  %41 = call i1 @EnableWindow(i32* %40, i1 ptrtoint (i32* @0 to i1)), !insn.addr !400
  %42 = add i32 %19, 8, !insn.addr !401
  %43 = inttoptr i32 %42 to i32*, !insn.addr !401
  %44 = load i32, i32* %43, align 4, !insn.addr !401
  %45 = or i32 %44, 38, !insn.addr !401
  %46 = icmp slt i32 %45, 0, !insn.addr !401
  store i32 %45, i32* %43, align 4, !insn.addr !401
  br i1 %46, label %dec_label_pc_1001cc8, label %dec_label_pc_1001c59, !insn.addr !402

dec_label_pc_1001c59:                             ; preds = %dec_label_pc_1001c49
  %47 = ptrtoint i32* %stack_var_-3 to i32, !insn.addr !403
  %48 = add i32 %8, 1, !insn.addr !404
  %49 = mul i32 %47, 2, !insn.addr !405
  %50 = add i32 %5, -16711348, !insn.addr !405
  %51 = add i32 %50, %49, !insn.addr !405
  %52 = inttoptr i32 %51 to i32*, !insn.addr !405
  %53 = load i32, i32* %52, align 4, !insn.addr !405
  %54 = add i32 %53, -1, !insn.addr !405
  store i32 %54, i32* %52, align 4, !insn.addr !405
  %55 = add i32 %esp.0.reload, -8, !insn.addr !406
  %56 = inttoptr i32 %55 to i32*, !insn.addr !406
  store i32 84, i32* %56, align 4, !insn.addr !406
  %57 = call i32 @function_1006626(i32 %48), !insn.addr !407
  %58 = add i32 %5, 63, !insn.addr !408
  %59 = add i32 %58, %57, !insn.addr !409
  %60 = inttoptr i32 %59 to i32*, !insn.addr !409
  %61 = load i32, i32* %60, align 4, !insn.addr !409
  %62 = or i32 %61, 1, !insn.addr !409
  store i32 %62, i32* %60, align 4, !insn.addr !409
  %63 = trunc i32 %4 to i16
  call void @__asm_outsd(i16 %63, i32 %1), !insn.addr !410
  %64 = udiv i32 %57, 256, !insn.addr !411
  %65 = and i32 %64, %4
  %66 = trunc i32 %65 to i8, !insn.addr !411
  %67 = call i8 @llvm.ctpop.i8(i8 %66), !range !258, !insn.addr !411
  %68 = and i8 %67, 1, !insn.addr !411
  %69 = icmp eq i8 %68, 0, !insn.addr !411
  %70 = inttoptr i32 %4 to i8*, !insn.addr !411
  store i8 %66, i8* %70, align 1, !insn.addr !411
  %71 = icmp eq i1 %69, false, !insn.addr !412
  br i1 %71, label %dec_label_pc_1001cde, label %dec_label_pc_1001c76, !insn.addr !412

dec_label_pc_1001c76:                             ; preds = %dec_label_pc_1001c59
  call void @__asm_out.4(i32 147, i32 %57), !insn.addr !413
  %72 = inttoptr i32 %57 to i8*, !insn.addr !414
  %73 = load i8, i8* %72, align 1, !insn.addr !414
  %74 = trunc i32 %57 to i8, !insn.addr !414
  %75 = add i8 %73, %74, !insn.addr !414
  %76 = icmp ult i8 %75, %73, !insn.addr !414
  store i8 %75, i8* %72, align 1, !insn.addr !414
  %77 = add i32 %esp.0.reload, -12, !insn.addr !415
  %78 = inttoptr i32 %77 to i32*, !insn.addr !415
  %79 = select i1 %76, i32 255, i32 0, !insn.addr !416
  %80 = and i32 %57, -256, !insn.addr !416
  %81 = or i32 %79, %80, !insn.addr !416
  %82 = ptrtoint i32* %stack_var_-35 to i32, !insn.addr !417
  store i32 %82, i32* %78, align 4, !insn.addr !418
  %83 = add i32 %esp.0.reload, -16, !insn.addr !419
  %84 = inttoptr i32 %83 to i32*, !insn.addr !419
  store i32 %81, i32* %84, align 4, !insn.addr !419
  %85 = add i32 %esp.0.reload, -20, !insn.addr !420
  %86 = inttoptr i32 %85 to i32*, !insn.addr !420
  %87 = ptrtoint i32* %stack_var_-67 to i32, !insn.addr !420
  store i32 %87, i32* %86, align 4, !insn.addr !420
  %88 = load i8*, i8** @global_var_1014d6c, align 4, !insn.addr !421
  %89 = ptrtoint i8* %88 to i32, !insn.addr !421
  %90 = add i32 %esp.0.reload, -24, !insn.addr !421
  %91 = inttoptr i32 %90 to i32*, !insn.addr !421
  store i32 %89, i32* %91, align 4, !insn.addr !421
  store i16 %63, i16* %.pre-phi.reg2mem, !insn.addr !422
  store i32 %90, i32* %esp.1.reg2mem, !insn.addr !422
  br label %dec_label_pc_1001c9c, !insn.addr !422

dec_label_pc_1001c9c:                             ; preds = %dec_label_pc_1001cc8, %dec_label_pc_1001c76
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %.pre-phi.reload = load i16, i16* %.pre-phi.reg2mem
  %92 = add i32 %esp.1.reload, -4, !insn.addr !423
  %93 = inttoptr i32 %92 to i32*, !insn.addr !423
  store i32 2, i32* %93, align 4, !insn.addr !423
  %94 = ptrtoint i32* %stack_var_53 to i32, !insn.addr !424
  %95 = select i1 %6, i32 -1, i32 1, !insn.addr !425
  %96 = add i32 %95, %0, !insn.addr !425
  %97 = add i32 %esp.1.reload, -8, !insn.addr !426
  %98 = inttoptr i32 %97 to i32*, !insn.addr !426
  store i32 %96, i32* %98, align 4, !insn.addr !426
  %99 = call i32 @__asm_insd(i16 %.pre-phi.reload), !insn.addr !427
  %100 = inttoptr i32 %96 to i32*, !insn.addr !427
  store i32 %99, i32* %100, align 4, !insn.addr !427
  %101 = xor i32 %94, ptrtoint (i32* @global_var_1019c59 to i32), !insn.addr !428
  %102 = add i32 %esp.1.reload, -12, !insn.addr !429
  %103 = inttoptr i32 %102 to i32*, !insn.addr !429
  store i32 %97, i32* %103, align 4, !insn.addr !429
  %104 = add i32 %96, -125, !insn.addr !430
  %105 = inttoptr i32 %104 to i8*, !insn.addr !430
  %106 = load i8, i8* %105, align 1, !insn.addr !430
  %107 = add i8 %106, %25, !insn.addr !430
  store i8 %107, i8* %105, align 1, !insn.addr !430
  %108 = add i32 %101, -4, !insn.addr !431
  %109 = inttoptr i32 %108 to i32*, !insn.addr !431
  %110 = ptrtoint i32* %stack_var_-5 to i32, !insn.addr !431
  store i32 %110, i32* %109, align 4, !insn.addr !431
  %111 = add i32 %101, 1356386893, !insn.addr !432
  %112 = inttoptr i32 %111 to i32*, !insn.addr !432
  %113 = load i32, i32* %112, align 4, !insn.addr !432
  %114 = sub i32 0, %113, !insn.addr !432
  store i32 %114, i32* %112, align 4, !insn.addr !432
  ret i32 %102, !insn.addr !432

dec_label_pc_1001cc8:                             ; preds = %dec_label_pc_1001c49
  %115 = add i32 %esp.0.reload, -4, !insn.addr !433
  %116 = sext i1 %41 to i32, !insn.addr !400
  %117 = add nsw i32 %116, -1, !insn.addr !434
  %118 = inttoptr i32 %117 to i32*, !insn.addr !434
  %119 = load i32, i32* %118, align 4, !insn.addr !434
  %120 = sub i32 %4, %119, !insn.addr !434
  %121 = icmp ult i32 %4, %119, !insn.addr !434
  %122 = zext i1 %121 to i32, !insn.addr !435
  %123 = add nsw i32 %116, 16783512, !insn.addr !435
  %124 = add nsw i32 %123, %122, !insn.addr !435
  %125 = icmp eq i32 %124, 0, !insn.addr !435
  %.pre = trunc i32 %120 to i16
  store i16 %.pre, i16* %.pre-phi.reg2mem, !insn.addr !436
  store i32 %115, i32* %esp.1.reg2mem, !insn.addr !436
  br i1 %125, label %dec_label_pc_1001c9c, label %dec_label_pc_1001cd2, !insn.addr !436

dec_label_pc_1001cd2:                             ; preds = %dec_label_pc_1001cc8
  %126 = inttoptr i32 %115 to i32*, !insn.addr !433
  %127 = call i8 @__asm_in.3(i16 %.pre), !insn.addr !437
  %128 = sext i8 %127 to i32, !insn.addr !437
  %129 = and i32 %124, -256, !insn.addr !437
  %130 = or i32 %129, %128, !insn.addr !437
  %131 = sub i32 %130, %7, !insn.addr !438
  %132 = add i32 %esp.0.reload, -8, !insn.addr !439
  %133 = inttoptr i32 %132 to i32*, !insn.addr !439
  store i32 20, i32* %133, align 4, !insn.addr !439
  %134 = add i32 %esp.0.reload, -12, !insn.addr !440
  %135 = inttoptr i32 %134 to i32*, !insn.addr !440
  store i32 %131, i32* %135, align 4, !insn.addr !440
  ret i32 %131, !insn.addr !441

dec_label_pc_1001cde:                             ; preds = %dec_label_pc_1001c59
  %136 = icmp eq i8 %66, 0, !insn.addr !411
  %137 = icmp eq i32 %5, 2, !insn.addr !442
  %138 = or i1 %137, %136, !insn.addr !442
  br i1 %138, label %dec_label_pc_1001ce0, label %dec_label_pc_1001d30, !insn.addr !442

dec_label_pc_1001ce0:                             ; preds = %dec_label_pc_1001cde
  %139 = sext i8 %arg1 to i32, !insn.addr !443
  %140 = add i32 %esp.0.reload, -24, !insn.addr !443
  %141 = inttoptr i32 %140 to i32*, !insn.addr !443
  store i32 %139, i32* %141, align 4, !insn.addr !443
  %142 = call i32 @unknown_111691e(), !insn.addr !444
  %143 = add i32 %142, -109, !insn.addr !445
  %144 = inttoptr i32 %143 to i32*, !insn.addr !445
  %145 = load i32, i32* %144, align 4, !insn.addr !445
  %146 = add i32 %145, %47, !insn.addr !445
  store i32 %146, i32* %144, align 4, !insn.addr !445
  %147 = inttoptr i32 %142 to i32*, !insn.addr !446
  %148 = load i32, i32* %147, align 4, !insn.addr !446
  %149 = add i32 %148, %142, !insn.addr !446
  store i32 %149, i32* %147, align 4, !insn.addr !446
  %150 = xor i32 %142, ptrtoint (i8** @global_var_1014d6c to i32), !insn.addr !447
  %151 = add i32 %esp.0.reload, -28, !insn.addr !448
  %152 = inttoptr i32 %151 to i32*, !insn.addr !448
  store i32 -4, i32* %152, align 4, !insn.addr !448
  %153 = inttoptr i32 %150 to i8*, !insn.addr !449
  %154 = load i8, i8* %153, align 1, !insn.addr !449
  %155 = inttoptr i32 %0 to i8*, !insn.addr !449
  store i8 %154, i8* %155, align 1, !insn.addr !449
  %156 = select i1 %6, i32 -1, i32 1, !insn.addr !449
  %157 = add i32 %156, %0, !insn.addr !449
  %158 = call i32 @unknown_3a00031d(), !insn.addr !450
  %159 = icmp eq i32 %158, %157, !insn.addr !451
  store i32 %158, i32* bitcast ([7 x i8]* @global_var_1013110 to i32*), align 4, !insn.addr !452
  store i32 %157, i32* %eax.0.reg2mem, !insn.addr !453
  store i32 %151, i32* %esp.2.reg2mem, !insn.addr !453
  br i1 %159, label %dec_label_pc_1001d23, label %dec_label_pc_1001d15, !insn.addr !453

dec_label_pc_1001d15:                             ; preds = %dec_label_pc_1001ce0
  %160 = add i32 %150, %156, !insn.addr !449
  %161 = add i32 %esp.0.reload, -32, !insn.addr !454
  %162 = inttoptr i32 %161 to i32*, !insn.addr !454
  store i32 16803114, i32* %162, align 4, !insn.addr !454
  %163 = add i32 %esp.0.reload, -36, !insn.addr !455
  %164 = inttoptr i32 %163 to i32*, !insn.addr !455
  store i32 54, i32* %164, align 4, !insn.addr !455
  %165 = add i32 %esp.0.reload, -40, !insn.addr !456
  %166 = inttoptr i32 %165 to i32*, !insn.addr !456
  store i32 %160, i32* %166, align 4, !insn.addr !456
  %167 = call i32 @unknown_c4c7a877(), !insn.addr !457
  store i32 %167, i32* %eax.0.reg2mem, !insn.addr !457
  store i32 %165, i32* %esp.2.reg2mem, !insn.addr !457
  br label %dec_label_pc_1001d23, !insn.addr !457

dec_label_pc_1001d23:                             ; preds = %dec_label_pc_1001d15, %dec_label_pc_1001ce0
  %168 = add i32 %esp.0.reload, -12
  %169 = inttoptr i32 %168 to i32*
  %170 = add i32 %esp.0.reload, -16, !insn.addr !458
  %171 = inttoptr i32 %170 to i32*, !insn.addr !458
  %172 = add i32 %esp.0.reload, -20, !insn.addr !459
  %173 = inttoptr i32 %172 to i32*, !insn.addr !459
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %174 = add i32 %esp.2.reload, -4, !insn.addr !460
  %175 = inttoptr i32 %174 to i32*, !insn.addr !460
  ret i32 %eax.0.reload, !insn.addr !460

dec_label_pc_1001d30:                             ; preds = %dec_label_pc_1001cde
  ret i32 %57, !insn.addr !461
}

define i32 @function_1001d34() local_unnamed_addr {
dec_label_pc_1001d34:
  %esp.0.reg2mem = alloca i32, !insn.addr !462
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %2 = add i32 %1, 19971730, !insn.addr !463
  %3 = inttoptr i32 %2 to i8*, !insn.addr !463
  %4 = load i8, i8* %3, align 1, !insn.addr !463
  %5 = mul i8 %4, 2, !insn.addr !463
  %6 = or i8 %5, shl (i8 zext (i1 icmp ult (i32 ptrtoint (i32* @global_var_101906c to i32), i32 989039688) to i8), i8 0)
  store i8 %6, i8* %3, align 1, !insn.addr !463
  %7 = icmp slt i8 %4, 0, !insn.addr !463
  %8 = select i1 %7, i32 sub (i32 0, i32 add (i32 ptrtoint (i32* @global_var_101906c to i32), i32 1)), i32 sub (i32 0, i32 ptrtoint (i32* @global_var_101906c to i32)), !insn.addr !464
  store i32 %8, i32* @global_var_101906c, align 4, !insn.addr !464
  %9 = call i32 @__asm_insd(i16 trunc (i32 ashr (i32 ptrtoint (i32* @global_var_101906c to i32), i32 31) to i16)), !insn.addr !465
  %10 = inttoptr i32 %0 to i32*, !insn.addr !465
  store i32 %9, i32* %10, align 4, !insn.addr !465
  %11 = load i32, i32* inttoptr (i32 906062464 to i32*), align 128, !insn.addr !466
  store i32 %11, i32* %stack_var_-28, align 4, !insn.addr !466
  %12 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !466
  %13 = add i32 %1, -123
  %14 = inttoptr i32 %13 to i8*
  store i32 %12, i32* %esp.0.reg2mem, !insn.addr !467
  br label %dec_label_pc_1001d85, !insn.addr !467

dec_label_pc_1001d85:                             ; preds = %dec_label_pc_1001dc4, %dec_label_pc_1001d34
  %15 = load i32, i32* @global_var_1014d7c, align 4, !insn.addr !468
  %16 = icmp eq i32 %15, %0, !insn.addr !469
  br i1 %16, label %dec_label_pc_1001dc4, label %dec_label_pc_1001d8e, !insn.addr !470

dec_label_pc_1001d8e:                             ; preds = %dec_label_pc_1001d85
  ret i32 %15, !insn.addr !471

dec_label_pc_1001dc4:                             ; preds = %dec_label_pc_1001d85
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  store i32 -1, i32* inttoptr (i32 1845576824 to i32*), align 8, !insn.addr !472
  %17 = add i32 %esp.0.reload, -4, !insn.addr !473
  %18 = inttoptr i32 %17 to i32*, !insn.addr !473
  store i32 118, i32* %18, align 4, !insn.addr !473
  %19 = call i32 @function_100b05b(i32 ptrtoint (i32* @0 to i32)), !insn.addr !474
  %20 = load i32, i32* inttoptr (i32 1988119956 to i32*), align 4, !insn.addr !475
  %21 = add i32 %esp.0.reload, -8, !insn.addr !475
  %22 = inttoptr i32 %21 to i32*, !insn.addr !475
  store i32 %20, i32* %22, align 4, !insn.addr !475
  %23 = add i32 %esp.0.reload, -16, !insn.addr !476
  %24 = load i8, i8* %14, align 1, !insn.addr !477
  %25 = load i32, i32* %ecx, align 4, !insn.addr !477
  %26 = trunc i32 %25 to i8, !insn.addr !477
  %27 = add i8 %24, %26, !insn.addr !477
  %28 = xor i8 %27, %24, !insn.addr !477
  %29 = xor i8 %27, %26, !insn.addr !477
  %30 = and i8 %28, %29, !insn.addr !477
  %31 = icmp slt i8 %30, 0, !insn.addr !477
  store i8 %27, i8* %14, align 1, !insn.addr !477
  store i32 %23, i32* %esp.0.reg2mem, !insn.addr !478
  br i1 %31, label %dec_label_pc_1001de1, label %dec_label_pc_1001d85, !insn.addr !478

dec_label_pc_1001de1:                             ; preds = %dec_label_pc_1001dc4
  %32 = add i32 %esp.0.reload, -12, !insn.addr !479
  %33 = inttoptr i32 %32 to i32*, !insn.addr !479
  %34 = inttoptr i32 %23 to i32*, !insn.addr !476
  %35 = and i32 %19, -65281, !insn.addr !480
  %36 = or i32 %35, 34304, !insn.addr !480
  %37 = addrspacecast i32* %ecx to i32 addrspace(258)*
  %38 = load i32, i32 addrspace(258)* %37, align 4
  %39 = add i32 %38, %36, !insn.addr !481
  %40 = icmp eq i32 %39, 0, !insn.addr !481
  %41 = inttoptr i32 %38 to i32 addrspace(258)*, !insn.addr !481
  store i32 %39, i32 addrspace(258)* %41, align 4, !insn.addr !481
  %42 = icmp eq i1 %40, false, !insn.addr !482
  %spec.select = select i1 %42, i32 %36, i32 ptrtoint (i32* @global_var_1001264 to i32)
  %43 = add i32 %esp.0.reload, -20, !insn.addr !483
  %44 = inttoptr i32 %43 to i32*, !insn.addr !483
  store i32 %spec.select, i32* %44, align 4, !insn.addr !483
  %45 = add i32 %esp.0.reload, -24, !insn.addr !484
  %46 = inttoptr i32 %45 to i32*, !insn.addr !484
  store i32 401, i32* %46, align 4, !insn.addr !484
  %47 = load i8*, i8** @global_var_1014d6c, align 4, !insn.addr !485
  %48 = ptrtoint i8* %47 to i32, !insn.addr !485
  %49 = add i32 %esp.0.reload, -28, !insn.addr !485
  %50 = inttoptr i32 %49 to i32*, !insn.addr !485
  store i32 %48, i32* %50, align 4, !insn.addr !485
  ret i32 %spec.select, !insn.addr !485
}

define i32 @function_1001df8() local_unnamed_addr {
dec_label_pc_1001df8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = add i32 %1, 1745054295, !insn.addr !486
  %3 = inttoptr i32 %2 to i8*, !insn.addr !486
  %4 = load i8, i8* %3, align 1, !insn.addr !486
  %5 = trunc i32 %0 to i8, !insn.addr !486
  %6 = add i8 %4, %5, !insn.addr !486
  store i8 %6, i8* %3, align 1, !insn.addr !486
  %7 = bitcast i32* %eax to i8*
  %8 = load i8, i8* %7, align 4, !insn.addr !487
  %9 = load i32, i32* %eax, align 4
  %10 = trunc i32 %9 to i8, !insn.addr !487
  %11 = add i8 %8, %10, !insn.addr !487
  %12 = inttoptr i32 %9 to i8*, !insn.addr !487
  store i8 %11, i8* %12, align 1, !insn.addr !487
  %13 = load i8*, i8** @global_var_1014d6c, align 4
  %14 = ptrtoint i8* %13 to i32
  %15 = call i32 @function_1001e40(i32 %14), !insn.addr !488
  ret i32 %15, !insn.addr !488
}

define i32 @function_1001e2d() local_unnamed_addr {
dec_label_pc_1001e2d:
  %eax.0.reg2mem = alloca i32, !insn.addr !489
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -4, !insn.addr !489
  %3 = inttoptr i32 %2 to i32*, !insn.addr !489
  %4 = load i32, i32* %3, align 4, !insn.addr !489
  %5 = icmp eq i32 %4, %0, !insn.addr !489
  br i1 %5, label %6, label %dec_label_pc_1001e32, !insn.addr !490

; <label>:6:                                      ; preds = %dec_label_pc_1001e2d
  %7 = call i32 @function_1001e40(i32 ptrtoint (i32* @0 to i32)), !insn.addr !490
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !490
  br label %dec_label_pc_1001e32, !insn.addr !490

dec_label_pc_1001e32:                             ; preds = %6, %dec_label_pc_1001e2d
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %8 = add i32 %0, -115, !insn.addr !491
  %9 = inttoptr i32 %8 to i64*, !insn.addr !491
  %10 = load i64, i64* %9, align 4, !insn.addr !491
  %11 = call i32 @__asm_bound(i64 %10), !insn.addr !491
  %12 = xor i32 %eax.0.reload, ptrtoint (i8** @global_var_1014d6c to i32), !insn.addr !492
  ret i32 %12, !insn.addr !493
}

define i32 @function_1001e40(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001e40:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !494
}

define i32 @function_1001ec3() local_unnamed_addr {
dec_label_pc_1001ec3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = add i32 %6, 232, !insn.addr !495
  %9 = and i32 %8, 255, !insn.addr !495
  %10 = and i32 %6, -256, !insn.addr !495
  %11 = or i32 %9, %10, !insn.addr !495
  %12 = and i32 %2, 255
  %13 = xor i32 %3, %12, !insn.addr !496
  %14 = add i32 %13, 21861389, !insn.addr !497
  %15 = inttoptr i32 %14 to i8*, !insn.addr !497
  %16 = load i8, i8* %15, align 1, !insn.addr !497
  %17 = trunc i32 %5 to i8, !insn.addr !497
  %18 = add i8 %16, %17, !insn.addr !497
  store i8 %18, i8* %15, align 1, !insn.addr !497
  %19 = add i32 %5, 1334092266, !insn.addr !498
  %20 = inttoptr i32 %19 to i32*, !insn.addr !498
  %21 = load i32, i32* %20, align 4, !insn.addr !498
  %22 = add i32 %21, %5, !insn.addr !498
  store i32 %22, i32* %20, align 4, !insn.addr !498
  %23 = add i32 %4, -1804204978, !insn.addr !499
  %24 = inttoptr i32 %23 to i32*, !insn.addr !499
  %25 = load i32, i32* %24, align 4, !insn.addr !499
  %26 = sext i32 %25 to i64, !insn.addr !499
  %27 = mul nsw i64 %26, 77, !insn.addr !499
  %28 = trunc i64 %27 to i32, !insn.addr !499
  %29 = mul i64 %26, 330712481792
  %30 = sdiv i64 %29, 4294967296, !insn.addr !499
  %31 = icmp ne i64 %27, %30, !insn.addr !499
  %32 = inttoptr i32 %0 to i32*, !insn.addr !500
  store i32 %11, i32* %32, align 4, !insn.addr !500
  %33 = select i1 %7, i32 -4, i32 4, !insn.addr !500
  %34 = add i32 %33, %0, !insn.addr !500
  %35 = add i32 %13, -1928557256, !insn.addr !501
  %36 = inttoptr i32 %35 to i32*, !insn.addr !501
  %37 = load i32, i32* %36, align 4, !insn.addr !501
  %.neg1 = sext i1 %31 to i32
  %.neg2 = sub i32 %37, %28, !insn.addr !501
  %38 = add i32 %.neg2, %.neg1, !insn.addr !501
  store i32 %38, i32* %36, align 4, !insn.addr !501
  %39 = inttoptr i32 %11 to i8*, !insn.addr !502
  %40 = load i8, i8* %39, align 1, !insn.addr !502
  %41 = trunc i32 %8 to i8, !insn.addr !502
  %42 = add i8 %40, %41, !insn.addr !502
  store i8 %42, i8* %39, align 1, !insn.addr !502
  %43 = inttoptr i32 %1 to i8*, !insn.addr !503
  %44 = inttoptr i32 %34 to i8*, !insn.addr !503
  call void @__asm_rep_movsb_memcpy(i8* %44, i8* %43, i32 %28), !insn.addr !503
  call void @llvm.trap()
  unreachable
}

define i32 @function_1001f31() local_unnamed_addr {
dec_label_pc_1001f31:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = load i32, i32* inttoptr (i32 -1629925996 to i32*), align 4, !insn.addr !504
  %4 = add i32 %3, 4, !insn.addr !505
  %5 = inttoptr i32 %4 to i32*, !insn.addr !505
  %6 = load i32, i32* %5, align 4, !insn.addr !505
  %7 = mul i32 %1, 4, !insn.addr !506
  %8 = add i32 %7, 8972, !insn.addr !506
  %9 = udiv i32 %8, 4, !insn.addr !507
  %10 = inttoptr i32 %0 to i8*, !insn.addr !508
  %11 = inttoptr i32 %6 to i8*, !insn.addr !508
  call void @__asm_rep_movsd_memcpy(i8* %11, i8* %10, i32 %9), !insn.addr !508
  %12 = select i1 %2, i32 -4, i32 4, !insn.addr !508
  %13 = mul i32 %9, %12, !insn.addr !508
  %14 = add i32 %6, 1604645835, !insn.addr !508
  %15 = add i32 %14, %13, !insn.addr !509
  %16 = inttoptr i32 %15 to i32*, !insn.addr !509
  %17 = load i32, i32* %16, align 4, !insn.addr !509
  %18 = add i32 %17, -94, !insn.addr !509
  store i32 %18, i32* %16, align 4, !insn.addr !509
  ret i32 %8, !insn.addr !510
}

define i32 @function_1001f67(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001f67:
  %ebp.1.reg2mem = alloca i32, !insn.addr !511
  %esp.1.reg2mem = alloca i32, !insn.addr !511
  %eax.1.reg2mem = alloca i32, !insn.addr !511
  %ecx.1.reg2mem = alloca i32, !insn.addr !511
  %.pre-phi2.reg2mem = alloca i8, !insn.addr !511
  %edi.0.reg2mem = alloca i32, !insn.addr !511
  %ebp.0.reg2mem = alloca i32, !insn.addr !511
  %esp.0.reg2mem = alloca i32, !insn.addr !511
  %eax.0.reg2mem = alloca i32, !insn.addr !511
  %ecx.0.reg2mem = alloca i32, !insn.addr !511
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call x86_fp80 @__decompiler_undefined_function_6()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-32 = alloca i32, align 4
  %5 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !512
  %6 = fptosi x86_fp80 %3 to i32, !insn.addr !513
  %7 = inttoptr i32 %0 to i32*, !insn.addr !513
  store i32 %6, i32* %7, align 4, !insn.addr !513
  %8 = add i32 %1, -252, !insn.addr !514
  %9 = inttoptr i32 %8 to i32*, !insn.addr !514
  %10 = select i1 %4, i32 -4, i32 4, !insn.addr !515
  %11 = add i32 %2, 27846725
  %12 = inttoptr i32 %11 to i32*
  store i32 49, i32* %ecx.0.reg2mem, !insn.addr !514
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !514
  store i32 %5, i32* %esp.0.reg2mem, !insn.addr !514
  br label %dec_label_pc_1001f75, !insn.addr !514

dec_label_pc_1001f75:                             ; preds = %dec_label_pc_1001fd8, %dec_label_pc_1001f67
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %13 = add i32 %ebp.0.reload, -53498, !insn.addr !516
  %14 = inttoptr i32 %13 to i32*, !insn.addr !516
  %15 = load i32, i32* %14, align 4, !insn.addr !516
  %16 = add i32 %15, %edi.0.reload, !insn.addr !516
  %17 = and i32 %edi.0.reload, 15, !insn.addr !516
  %18 = and i32 %15, 15, !insn.addr !516
  %19 = add nuw nsw i32 %18, %17, !insn.addr !516
  %20 = icmp ugt i32 %19, 15, !insn.addr !516
  %21 = icmp ult i32 %16, %edi.0.reload, !insn.addr !516
  %22 = icmp eq i32 %16, 0, !insn.addr !516
  %23 = icmp slt i32 %16, 0, !insn.addr !516
  %24 = trunc i32 %16 to i8, !insn.addr !516
  %25 = call i8 @llvm.ctpop.i8(i8 %24), !range !258, !insn.addr !516
  %26 = and i8 %25, 1, !insn.addr !516
  %27 = icmp eq i8 %26, 0, !insn.addr !516
  %28 = zext i1 %21 to i32, !insn.addr !517
  %29 = zext i1 %27 to i32, !insn.addr !517
  %30 = zext i1 %20 to i32, !insn.addr !517
  %31 = zext i1 %22 to i32, !insn.addr !517
  %32 = zext i1 %23 to i32, !insn.addr !517
  %33 = mul i32 %29, 4, !insn.addr !517
  %34 = mul i32 %30, 16, !insn.addr !517
  %35 = mul i32 %31, 64, !insn.addr !517
  %36 = mul i32 %32, 128, !insn.addr !517
  %37 = or i32 %35, %28, !insn.addr !517
  %38 = or i32 %37, %36, !insn.addr !517
  %39 = or i32 %38, %34, !insn.addr !517
  %40 = or i32 %39, %33, !insn.addr !517
  %41 = mul i32 %40, 256, !insn.addr !517
  %42 = and i32 %eax.0.reload, -65281, !insn.addr !517
  %43 = or i32 %42, %41, !insn.addr !517
  %44 = or i32 %43, 512, !insn.addr !517
  %45 = inttoptr i32 %16 to i32*, !insn.addr !515
  store i32 %44, i32* %45, align 4, !insn.addr !515
  %46 = add i32 %16, %10, !insn.addr !515
  %47 = add i32 %ebp.0.reload, -104, !insn.addr !518
  %48 = add i32 %esp.0.reload, -4, !insn.addr !519
  %49 = inttoptr i32 %48 to i32*, !insn.addr !519
  store i32 %47, i32* %49, align 4, !insn.addr !519
  %50 = call i1 @GetProcessDefaultLayout(i32* nonnull @0), !insn.addr !520
  %51 = sext i1 %50 to i32, !insn.addr !520
  %52 = load i32, i32* %12, align 4, !insn.addr !521
  %53 = icmp eq i32 %ecx.0.reload, %52, !insn.addr !521
  br i1 %53, label %dec_label_pc_1001f75.dec_label_pc_1001fd8_crit_edge, label %dec_label_pc_1001f94, !insn.addr !522

dec_label_pc_1001f75.dec_label_pc_1001fd8_crit_edge: ; preds = %dec_label_pc_1001f75
  %.pre = udiv i32 %51, 256, !insn.addr !523
  %.pre1 = trunc i32 %.pre to i8, !insn.addr !523
  store i8 %.pre1, i8* %.pre-phi2.reg2mem
  store i32 0, i32* %ecx.1.reg2mem
  store i32 %51, i32* %eax.1.reg2mem
  store i32 %48, i32* %esp.1.reg2mem
  store i32 %ebp.0.reload, i32* %ebp.1.reg2mem
  br label %dec_label_pc_1001fd8

dec_label_pc_1001f94:                             ; preds = %dec_label_pc_1001f75
  store i32 36353, i32* @global_var_1014de0, align 4, !insn.addr !524
  %54 = add i32 %ebp.0.reload, 16, !insn.addr !525
  %55 = inttoptr i32 %54 to i32*, !insn.addr !525
  %56 = load i32, i32* %55, align 4, !insn.addr !525
  %57 = add i32 %esp.0.reload, -8, !insn.addr !525
  %58 = inttoptr i32 %57 to i32*, !insn.addr !525
  store i32 %56, i32* %58, align 4, !insn.addr !525
  %59 = add i32 %ebp.0.reload, 8, !insn.addr !526
  %60 = inttoptr i32 %59 to i32*, !insn.addr !526
  %61 = load i32, i32* %60, align 4, !insn.addr !526
  %62 = add i32 %ebp.0.reload, 12, !insn.addr !527
  %63 = inttoptr i32 %62 to i32*, !insn.addr !527
  %64 = load i32, i32* %63, align 4, !insn.addr !527
  %65 = add i32 %esp.0.reload, -12, !insn.addr !527
  %66 = inttoptr i32 %65 to i32*, !insn.addr !527
  store i32 %64, i32* %66, align 4, !insn.addr !527
  %67 = call i32 @function_10017ec(), !insn.addr !528
  %68 = icmp eq i32 %67, 0, !insn.addr !529
  br i1 %68, label %dec_label_pc_10020a8, label %dec_label_pc_1001fc8, !insn.addr !530

dec_label_pc_1001fc8:                             ; preds = %dec_label_pc_1001f94
  %69 = add i32 %ebp.0.reload, -1, !insn.addr !531
  %70 = add i32 %69, %61, !insn.addr !532
  %71 = add nsw i32 %51, 65535, !insn.addr !533
  %72 = inttoptr i32 %70 to i32*, !insn.addr !534
  %73 = load i32, i32* %72, align 4, !insn.addr !534
  %74 = add i32 %70, 4, !insn.addr !534
  %75 = add i32 %46, 1080688640, !insn.addr !535
  %76 = inttoptr i32 %75 to i8*, !insn.addr !535
  %77 = load i8, i8* %76, align 1, !insn.addr !535
  %78 = udiv i32 %71, 256
  %79 = trunc i32 %78 to i8
  %80 = add i8 %77, %79, !insn.addr !535
  store i8 %80, i8* %76, align 1, !insn.addr !535
  %81 = add i32 %73, -4, !insn.addr !536
  %82 = inttoptr i32 %81 to i32*, !insn.addr !536
  store i8 -1, i8* %.pre-phi2.reg2mem, !insn.addr !537
  store i32 %64, i32* %ecx.1.reg2mem, !insn.addr !537
  store i32 %67, i32* %eax.1.reg2mem, !insn.addr !537
  store i32 %74, i32* %esp.1.reg2mem, !insn.addr !537
  store i32 %73, i32* %ebp.1.reg2mem, !insn.addr !537
  br label %dec_label_pc_1001fd8, !insn.addr !537

dec_label_pc_1001fd8:                             ; preds = %dec_label_pc_1001f75.dec_label_pc_1001fd8_crit_edge, %dec_label_pc_1001fc8
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %.pre-phi2.reload = load i8, i8* %.pre-phi2.reg2mem
  %83 = and i32 %eax.1.reload, 256
  %84 = icmp ne i32 %83, 0, !insn.addr !538
  %85 = add i32 %ebp.1.reload, 1, !insn.addr !539
  %86 = add i32 %ebp.1.reload, 95, !insn.addr !523
  %87 = inttoptr i32 %86 to i8*, !insn.addr !523
  %88 = load i8, i8* %87, align 1, !insn.addr !523
  %89 = zext i1 %84 to i8, !insn.addr !523
  %90 = add i8 %88, %.pre-phi2.reload, !insn.addr !523
  %91 = add i8 %90, %89, !insn.addr !523
  store i8 %91, i8* %87, align 1, !insn.addr !523
  %92 = inttoptr i32 %46 to i32*, !insn.addr !540
  store i32 %eax.1.reload, i32* %92, align 4, !insn.addr !540
  %93 = add i32 %46, %10, !insn.addr !540
  %94 = icmp slt i8 %91, 1, !insn.addr !541
  store i32 %ecx.1.reload, i32* %ecx.0.reg2mem, !insn.addr !541
  store i32 %eax.1.reload, i32* %eax.0.reg2mem, !insn.addr !541
  store i32 %esp.1.reload, i32* %esp.0.reg2mem, !insn.addr !541
  store i32 %85, i32* %ebp.0.reg2mem, !insn.addr !541
  store i32 %93, i32* %edi.0.reg2mem, !insn.addr !541
  br i1 %94, label %dec_label_pc_1001f75, label %dec_label_pc_1001fe4, !insn.addr !541

dec_label_pc_1001fe4:                             ; preds = %dec_label_pc_1001fd8
  %95 = add i32 %ebp.1.reload, 13, !insn.addr !542
  %96 = inttoptr i32 %95 to i32*, !insn.addr !542
  %97 = load i32, i32* %96, align 4, !insn.addr !542
  %98 = icmp sgt i32 %97, 63, !insn.addr !543
  br i1 %98, label %dec_label_pc_1002049, label %dec_label_pc_1001ff8, !insn.addr !543

dec_label_pc_1001ff8:                             ; preds = %dec_label_pc_1001fe4
  %99 = load i32, i32* inttoptr (i32 37392 to i32*), align 16, !insn.addr !544
  %100 = add i32 %ebp.1.reload, -19, !insn.addr !545
  %101 = inttoptr i32 %100 to i32*, !insn.addr !545
  store i32 %99, i32* %101, align 4, !insn.addr !545
  ret i32 %eax.1.reload, !insn.addr !546

dec_label_pc_1002049:                             ; preds = %dec_label_pc_1001fe4
  %102 = add i32 %esp.1.reload, -4, !insn.addr !547
  %103 = inttoptr i32 %102 to i32*, !insn.addr !547
  store i32 2, i32* %103, align 4, !insn.addr !547
  %104 = mul i32 %2, 2, !insn.addr !548
  %105 = add i32 %esp.1.reload, -8, !insn.addr !549
  %106 = inttoptr i32 %105 to i32*, !insn.addr !549
  store i32 %104, i32* %106, align 4, !insn.addr !549
  %107 = add i32 %ebp.1.reload, 3, !insn.addr !550
  %108 = inttoptr i32 %107 to i32*, !insn.addr !550
  %109 = load i32, i32* %108, align 4, !insn.addr !550
  %110 = add i32 %esp.1.reload, -12, !insn.addr !550
  %111 = inttoptr i32 %110 to i32*, !insn.addr !550
  store i32 %109, i32* %111, align 4, !insn.addr !550
  ret i32 %104, !insn.addr !550

dec_label_pc_10020a8:                             ; preds = %dec_label_pc_1001f94
  %112 = call i32 @function_1f321f2(), !insn.addr !551
  ret i32 %112, !insn.addr !551
}

define i32 @function_10020fc() local_unnamed_addr {
dec_label_pc_10020fc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call x86_fp80 @__decompiler_undefined_function_6()
  %stack_var_-12 = alloca i32, align 4
  %4 = add i32 %1, 1086517, !insn.addr !552
  %5 = inttoptr i32 %4 to i32*, !insn.addr !552
  %6 = load i32, i32* %5, align 4, !insn.addr !552
  %7 = add i32 %6, -1, !insn.addr !552
  store i32 %7, i32* %5, align 4, !insn.addr !552
  %8 = add i32 %2, 1, !insn.addr !553
  %9 = inttoptr i32 %8 to i32*, !insn.addr !553
  %10 = load i32, i32* %9, align 4, !insn.addr !553
  %11 = add i32 %10, %0, !insn.addr !553
  store i32 %11, i32* %9, align 4, !insn.addr !553
  %12 = fptosi x86_fp80 %3 to i32, !insn.addr !554
  %13 = add i32 %1, 104, !insn.addr !554
  %14 = inttoptr i32 %13 to i32*, !insn.addr !554
  store i32 %12, i32* %14, align 4, !insn.addr !554
  %15 = call i32 @__asm_int1(), !insn.addr !555
  store i32 87, i32* %stack_var_-12, align 4, !insn.addr !556
  %16 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !556
  %17 = add i32 %1, ptrtoint (i32* @global_var_1014d54 to i32), !insn.addr !557
  %18 = inttoptr i32 %17 to i32*, !insn.addr !557
  %19 = load i32, i32* %18, align 4, !insn.addr !557
  %20 = add i32 %19, %16, !insn.addr !557
  store i32 %20, i32* %18, align 4, !insn.addr !557
  %21 = load i32, i32* %stack_var_-12, align 4, !insn.addr !558
  %22 = call i32 @unknown_fbbf46(i32 %21), !insn.addr !558
  %23 = trunc i32 %22 to i8, !insn.addr !559
  store i8 %23, i8* inttoptr (i32 16781728 to i8*), align 32, !insn.addr !559
  store i32 %22, i32* @global_var_101406b, align 4, !insn.addr !560
  %24 = xor i32 %22, 16778652, !insn.addr !561
  store i32 %24, i32* @global_var_1014a10, align 4, !insn.addr !562
  %25 = call i32 @function_10021a7(), !insn.addr !563
  ret i32 %25, !insn.addr !563
}

define i32 @function_1002149() local_unnamed_addr {
dec_label_pc_1002149:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = load i8, i8* @global_var_1014d74, align 1, !insn.addr !564
  %8 = trunc i32 %3 to i16, !insn.addr !565
  call void @__asm_outsd(i16 %8, i32 %0), !insn.addr !565
  br i1 %5, label %dec_label_pc_1002161, label %dec_label_pc_1002152, !insn.addr !566

dec_label_pc_1002152:                             ; preds = %dec_label_pc_1002149
  %9 = and i8 %7, 14, !insn.addr !567
  %10 = icmp ugt i8 %9, 9, !insn.addr !567
  %11 = or i1 %6, %10, !insn.addr !567
  %12 = add i8 %7, 10, !insn.addr !567
  %13 = select i1 %11, i8 %12, i8 %7, !insn.addr !567
  %14 = and i8 %13, 15, !insn.addr !567
  %15 = zext i8 %14 to i32, !insn.addr !567
  %16 = ashr i8 %7, 7, !insn.addr !567
  %17 = sext i1 %11 to i8, !insn.addr !567
  %18 = add nsw i8 %16, %17, !insn.addr !567
  %19 = zext i8 %18 to i32, !insn.addr !567
  %20 = mul i32 %19, 256, !insn.addr !567
  %21 = or i32 %20, %15, !insn.addr !567
  %sext = mul i32 %21, 65536
  %22 = sdiv i32 %sext, 65536, !insn.addr !568
  %23 = inttoptr i32 %22 to i32*, !insn.addr !569
  %24 = load i32, i32* %23, align 4, !insn.addr !569
  %25 = zext i1 %11 to i32, !insn.addr !569
  %26 = add nsw i32 %22, %25, !insn.addr !569
  %27 = add i32 %26, %24, !insn.addr !569
  store i32 %27, i32* %23, align 4, !insn.addr !569
  ret i32 %22, !insn.addr !569

dec_label_pc_1002161:                             ; preds = %dec_label_pc_1002149
  %28 = call i32 @unknown_2e36ed2(), !insn.addr !570
  %29 = call i32 @__asm_int3(), !insn.addr !571
  %30 = add i32 %29, %4, !insn.addr !572
  %31 = inttoptr i32 %4 to i32*, !insn.addr !572
  store i32 %30, i32* %31, align 4, !insn.addr !572
  %32 = and i32 %2, %1, !insn.addr !573
  %33 = icmp eq i32 %32, 0, !insn.addr !573
  %34 = icmp eq i1 %33, false, !insn.addr !574
  br i1 %34, label %35, label %dec_label_pc_1002193, !insn.addr !574

; <label>:35:                                     ; preds = %dec_label_pc_1002161
  %36 = call i32 @function_10021a7(), !insn.addr !574
  br label %dec_label_pc_1002193, !insn.addr !574

dec_label_pc_1002193:                             ; preds = %35, %dec_label_pc_1002161
  %37 = add i32 %1, -52, !insn.addr !575
  ret i32 %37, !insn.addr !576
}

define i32 @function_10021a7() local_unnamed_addr {
dec_label_pc_10021a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = select i1 %5, i32 255, i32 0, !insn.addr !577
  %7 = and i32 %3, -256, !insn.addr !577
  %8 = or i32 %6, %7, !insn.addr !577
  %9 = icmp eq i32 %8, 0, !insn.addr !578
  %10 = icmp eq i1 %9, false, !insn.addr !579
  br i1 %10, label %dec_label_pc_100220a, label %dec_label_pc_10021b4, !insn.addr !579

dec_label_pc_10021b4:                             ; preds = %dec_label_pc_10021a7
  %11 = inttoptr i32 %1 to i8*, !insn.addr !580
  %12 = add i32 %0, 8, !insn.addr !581
  %13 = inttoptr i32 %12 to i32*, !insn.addr !581
  %14 = load i32, i32* %13, align 4, !insn.addr !581
  %15 = inttoptr i32 %14 to i8*, !insn.addr !581
  %16 = call i32 @unknown_632677d3(i32 %14, i32 %1, i32 %1), !insn.addr !582
  %17 = add i32 %0, -12, !insn.addr !583
  %18 = inttoptr i32 %17 to i32*, !insn.addr !583
  %19 = load i32, i32* %18, align 4, !insn.addr !583
  %20 = inttoptr i32 %0 to i32*, !insn.addr !584
  store i32 %14, i32* %20, align 4, !insn.addr !584
  %21 = bitcast i32* %ebx to i8*
  %22 = load i8, i8* %21, align 4, !insn.addr !585
  %23 = trunc i32 %1 to i8, !insn.addr !585
  %24 = add i8 %22, %23, !insn.addr !585
  store i8 %24, i8* %11, align 1, !insn.addr !585
  %25 = load i8, i8* %15, align 1, !insn.addr !586
  %26 = icmp eq i8 %25, %23, !insn.addr !586
  br i1 %26, label %dec_label_pc_10021f9, label %dec_label_pc_10021d5, !insn.addr !587

dec_label_pc_10021d5:                             ; preds = %dec_label_pc_10021b4
  %27 = select i1 %4, i32 -1, i32 1, !insn.addr !586
  %28 = add i32 %14, %27, !insn.addr !586
  %29 = load i32, i32* %ebx, align 4
  %30 = and i32 %2, 255
  %31 = or i32 %29, %30, !insn.addr !588
  %32 = add i32 %1, 23, !insn.addr !589
  %33 = and i32 %1, -256, !insn.addr !589
  %34 = add i32 %0, -8, !insn.addr !590
  %35 = inttoptr i32 %34 to i32*, !insn.addr !590
  store i32 %28, i32* %35, align 4, !insn.addr !590
  store i32 21893913, i32* %18, align 4, !insn.addr !591
  %36 = and i32 %32, 53, !insn.addr !592
  %37 = or i32 %36, 202, !insn.addr !592
  %38 = or i32 %37, %33, !insn.addr !592
  %39 = inttoptr i32 %19 to i32*, !insn.addr !593
  store i32 458753, i32* %39, align 4, !insn.addr !593
  %40 = add i32 %0, -14, !insn.addr !594
  %41 = inttoptr i32 %40 to i16*, !insn.addr !594
  %42 = inttoptr i32 %38 to i8*, !insn.addr !595
  %43 = load i8, i8* %42, align 1, !insn.addr !595
  %44 = trunc i32 %37 to i8, !insn.addr !595
  %45 = add i8 %43, %44, !insn.addr !595
  store i8 %45, i8* %42, align 1, !insn.addr !595
  %46 = add i32 %28, -1, !insn.addr !596
  %47 = inttoptr i32 %46 to i32*, !insn.addr !596
  %48 = load i32, i32* %47, align 4, !insn.addr !596
  %49 = add i32 %48, %2, !insn.addr !596
  store i32 %49, i32* %47, align 4, !insn.addr !596
  %50 = add i32 %2, 13, !insn.addr !597
  %51 = add i32 %50, %38, !insn.addr !597
  %52 = inttoptr i32 %51 to i8*, !insn.addr !597
  %53 = load i8, i8* %52, align 1, !insn.addr !597
  %54 = udiv i32 %2, 256, !insn.addr !597
  %55 = trunc i32 %54 to i8, !insn.addr !597
  %56 = add i8 %53, %55, !insn.addr !597
  store i8 %56, i8* %52, align 1, !insn.addr !597
  %57 = add i32 %28, -72, !insn.addr !598
  %58 = inttoptr i32 %57 to i32*, !insn.addr !598
  %59 = load i32, i32* %58, align 4, !insn.addr !598
  %60 = add i32 %59, %31, !insn.addr !598
  store i32 %60, i32* %58, align 4, !insn.addr !598
  br label %dec_label_pc_10021f9, !insn.addr !598

dec_label_pc_10021f9:                             ; preds = %dec_label_pc_10021d5, %dec_label_pc_10021b4
  %61 = add i32 %0, -4, !insn.addr !599
  %62 = inttoptr i32 %61 to i32*, !insn.addr !599
  %63 = call i32 @function_924968f(), !insn.addr !600
  ret i32 %63, !insn.addr !600

dec_label_pc_100220a:                             ; preds = %dec_label_pc_10021a7
  ret i32 %8, !insn.addr !600
}

define i32 @function_100220c() local_unnamed_addr {
dec_label_pc_100220c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, 39046, !insn.addr !601
  %5 = inttoptr i32 %4 to i32*, !insn.addr !601
  %6 = load i32, i32* %5, align 4, !insn.addr !601
  %7 = add i32 %6, -1, !insn.addr !601
  store i32 %7, i32* %5, align 4, !insn.addr !601
  %8 = add i32 %3, -24, !insn.addr !602
  %9 = inttoptr i32 %8 to i8*, !insn.addr !602
  %10 = load i8, i8* %9, align 1, !insn.addr !602
  %11 = trunc i32 %2 to i8, !insn.addr !602
  %12 = add i8 %10, %11, !insn.addr !602
  %13 = icmp ult i8 %12, %10, !insn.addr !602
  store i8 %12, i8* %9, align 1, !insn.addr !602
  %14 = select i1 %13, i32 -2080426497, i32 -2080426752, !insn.addr !603
  %15 = add i32 %0, 4, !insn.addr !604
  %16 = inttoptr i32 %15 to i32*, !insn.addr !604
  store i32 -1, i32* %16, align 4, !insn.addr !604
  ret i32 %14, !insn.addr !605
}

define i32 @function_1002226(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1002226:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !606
  %eax.0.reg2mem = alloca i32, !insn.addr !606
  %of.0.reg2mem = alloca i1, !insn.addr !606
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %5 = trunc i32 %2 to i16, !insn.addr !606
  %6 = call i8 @__asm_in.3(i16 %5), !insn.addr !606
  %7 = add i32 %0, 12, !insn.addr !607
  %8 = inttoptr i32 %7 to i64*, !insn.addr !607
  %9 = load i64, i64* %8, align 4, !insn.addr !607
  %10 = call i32 @__asm_bound(i64 %9), !insn.addr !607
  br i1 %4, label %dec_label_pc_100227c, label %dec_label_pc_100222c, !insn.addr !608

dec_label_pc_100222c:                             ; preds = %dec_label_pc_1002226
  %11 = add i32 %1, 86, !insn.addr !609
  %12 = inttoptr i32 %11 to i8*, !insn.addr !609
  %13 = load i8, i8* %12, align 1, !insn.addr !609
  %14 = trunc i32 %2 to i8, !insn.addr !609
  %15 = add i8 %13, %14, !insn.addr !609
  store i8 %15, i8* %12, align 1, !insn.addr !609
  %16 = mul i32 %1, 8, !insn.addr !610
  %17 = add i32 %16, 20, !insn.addr !610
  %18 = inttoptr i32 %17 to i16*, !insn.addr !610
  store i16 0, i16* %18, align 4, !insn.addr !610
  %19 = inttoptr i32 %10 to i32*, !insn.addr !611
  %20 = load i32, i32* %19, align 4, !insn.addr !611
  %21 = icmp eq i32 %20, 0, !insn.addr !611
  store i1 false, i1* %of.0.reg2mem, !insn.addr !612
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !612
  store i32* %stack_var_-4, i32** %esp.0.in.reg2mem, !insn.addr !612
  br i1 %21, label %dec_label_pc_100224d, label %dec_label_pc_100223d, !insn.addr !612

dec_label_pc_100223d:                             ; preds = %dec_label_pc_100222c
  %22 = add i32 %10, 14721168, !insn.addr !613
  %23 = xor i32 %10, -2147483648
  %24 = and i32 %22, %23, !insn.addr !613
  %25 = icmp slt i32 %24, 0, !insn.addr !613
  call void @__asm_int(i32 141), !insn.addr !614
  store i8 0, i8* inttoptr (i32 637534208 to i8*), align 33554432, !insn.addr !615
  %26 = inttoptr i32 %22 to i32*, !insn.addr !616
  store i32 %22, i32* %26, align 4, !insn.addr !616
  store i32 0, i32* %stack_var_-8, align 4, !insn.addr !617
  store i1 %25, i1* %of.0.reg2mem, !insn.addr !617
  store i32 %22, i32* %eax.0.reg2mem, !insn.addr !617
  store i32* %stack_var_-8, i32** %esp.0.in.reg2mem, !insn.addr !617
  br label %dec_label_pc_100224d, !insn.addr !617

dec_label_pc_100224d:                             ; preds = %dec_label_pc_100223d, %dec_label_pc_100222c
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %27 = add i32 %esp.0, -4, !insn.addr !618
  %28 = inttoptr i32 %27 to i32*, !insn.addr !618
  store i32 0, i32* %28, align 4, !insn.addr !618
  %29 = add i32 %eax.0.reload, 156, !insn.addr !619
  %30 = inttoptr i32 %29 to i32*, !insn.addr !619
  %31 = load i32, i32* %30, align 4, !insn.addr !619
  %32 = add i32 %esp.0, -8, !insn.addr !619
  %33 = inttoptr i32 %32 to i32*, !insn.addr !619
  store i32 %31, i32* %33, align 4, !insn.addr !619
  %34 = add i32 %eax.0.reload, 20, !insn.addr !620
  %35 = add i32 %esp.0, -12, !insn.addr !621
  %36 = inttoptr i32 %35 to i32*, !insn.addr !621
  store i32 %34, i32* %36, align 4, !insn.addr !621
  br i1 %of.0.reload, label %dec_label_pc_10022ca, label %dec_label_pc_100225a, !insn.addr !622

dec_label_pc_100225a:                             ; preds = %dec_label_pc_100224d
  %37 = or i32 %eax.0.reload, 232, !insn.addr !623
  ret i32 %37, !insn.addr !624

dec_label_pc_100227c:                             ; preds = %dec_label_pc_1002226
  %38 = inttoptr i32 %arg7 to i8*, !insn.addr !625
  %39 = load i8, i8* %38, align 1, !insn.addr !625
  %40 = trunc i32 %arg7 to i8, !insn.addr !625
  %41 = add i8 %39, %40, !insn.addr !625
  %42 = xor i8 %41, %39, !insn.addr !625
  %43 = xor i8 %41, %40, !insn.addr !625
  %44 = and i8 %42, %43, !insn.addr !625
  %45 = icmp slt i8 %44, 0, !insn.addr !625
  store i8 %41, i8* %38, align 1, !insn.addr !625
  %46 = inttoptr i32 %arg4 to i32*, !insn.addr !626
  %47 = load i32, i32* %46, align 4, !insn.addr !626
  %48 = inttoptr i32 %47 to i32*, !insn.addr !627
  store i32 %arg1, i32* %48, align 4, !insn.addr !627
  %49 = inttoptr i32 %arg2 to i32*, !insn.addr !628
  %50 = load i32, i32* %49, align 4, !insn.addr !628
  br i1 %45, label %dec_label_pc_100228c, label %dec_label_pc_1002288, !insn.addr !629

dec_label_pc_1002288:                             ; preds = %dec_label_pc_100227c
  %51 = trunc i32 %arg5 to i16, !insn.addr !630
  %52 = inttoptr i32 %arg2 to i8*, !insn.addr !630
  %53 = load i8, i8* %52, align 1, !insn.addr !630
  call void @__asm_outsb(i16 %51, i8 %53), !insn.addr !630
  ret i32 %50, !insn.addr !630

dec_label_pc_100228c:                             ; preds = %dec_label_pc_100227c
  %54 = add i32 %arg4, -119, !insn.addr !631
  %55 = add i32 %54, %arg6, !insn.addr !631
  %56 = inttoptr i32 %55 to i8*, !insn.addr !631
  %57 = load i8, i8* %56, align 1, !insn.addr !631
  %58 = trunc i32 %arg6 to i8, !insn.addr !631
  %59 = add i8 %57, %58, !insn.addr !631
  store i8 %59, i8* %56, align 1, !insn.addr !631
  %60 = add i32 %arg4, 72256467, !insn.addr !632
  %61 = inttoptr i32 %60 to i32*, !insn.addr !632
  %62 = load i32, i32* %61, align 4, !insn.addr !632
  %63 = add i32 %62, %arg6, !insn.addr !632
  store i32 %63, i32* %61, align 4, !insn.addr !632
  %64 = and i8 %58, 31, !insn.addr !633
  %65 = icmp eq i8 %64, 0, !insn.addr !633
  br i1 %65, label %73, label %66, !insn.addr !633

; <label>:66:                                     ; preds = %dec_label_pc_100228c
  %67 = inttoptr i32 %arg4 to i8*, !insn.addr !633
  %68 = load i8, i8* %67, align 1, !insn.addr !633
  %69 = shl i8 %68, %64, !insn.addr !633
  %70 = sub nsw i8 8, %64, !insn.addr !633
  %71 = lshr i8 %68, %70, !insn.addr !633
  %72 = or i8 %71, %69, !insn.addr !633
  store i8 %72, i8* %67, align 1, !insn.addr !633
  br label %73, !insn.addr !633

; <label>:73:                                     ; preds = %dec_label_pc_100228c, %66
  %74 = inttoptr i32 %50 to i32*, !insn.addr !634
  %75 = load i32, i32* %74, align 4, !insn.addr !634
  %76 = or i32 %50, 141, !insn.addr !635
  %77 = load i8, i8* inttoptr (i32 -373178091 to i8*), align 1, !insn.addr !636
  %78 = udiv i32 %arg6, 256, !insn.addr !636
  %79 = trunc i32 %78 to i8, !insn.addr !636
  %80 = add i8 %77, %79, !insn.addr !636
  store i8 %80, i8* inttoptr (i32 -373178091 to i8*), align 1, !insn.addr !636
  %81 = load i32, i32* %49, align 4, !insn.addr !637
  %82 = inttoptr i32 %75 to i32*, !insn.addr !637
  store i32 %81, i32* %82, align 4, !insn.addr !637
  %83 = select i1 %3, i32 -4, i32 4, !insn.addr !637
  %84 = add i32 %75, %83, !insn.addr !637
  %85 = add i32 %84, -125, !insn.addr !638
  %86 = inttoptr i32 %85 to i32*, !insn.addr !638
  %87 = load i32, i32* %86, align 4, !insn.addr !638
  %88 = and i32 %87, %76, !insn.addr !638
  %89 = icmp eq i32 %88, 0, !insn.addr !638
  %90 = add i32 %arg6, -1, !insn.addr !639
  %91 = icmp ne i32 %90, 0, !insn.addr !639
  %92 = icmp eq i1 %91, %89, !insn.addr !639
  br i1 %92, label %dec_label_pc_10022b0, label %dec_label_pc_10022ad, !insn.addr !639

dec_label_pc_10022ad:                             ; preds = %73
  %93 = add i32 %83, %arg2, !insn.addr !637
  %94 = inttoptr i32 %93 to i8*, !insn.addr !640
  %95 = inttoptr i32 %84 to i8*, !insn.addr !640
  call void @__asm_rep_movsb_memcpy(i8* %95, i8* %94, i32 %90), !insn.addr !640
  ret i32 %76, !insn.addr !640

dec_label_pc_10022b0:                             ; preds = %73
  %96 = mul i32 %84, 2, !insn.addr !641
  %97 = xor i32 %96, %84, !insn.addr !641
  %98 = icmp slt i32 %97, 0, !insn.addr !641
  br i1 %98, label %dec_label_pc_10022b8, label %dec_label_pc_10022b4, !insn.addr !642

dec_label_pc_10022b4:                             ; preds = %dec_label_pc_10022b0
  %99 = add i32 %arg6, 101, !insn.addr !643
  %100 = inttoptr i32 %99 to i8*, !insn.addr !643
  %101 = load i8, i8* %100, align 1, !insn.addr !643
  %102 = trunc i32 %arg4 to i8
  %103 = add i8 %102, -1, !insn.addr !643
  %104 = or i8 %101, %103, !insn.addr !643
  store i8 %104, i8* %100, align 1, !insn.addr !643
  br label %dec_label_pc_10022b8, !insn.addr !643

dec_label_pc_10022b8:                             ; preds = %dec_label_pc_10022b4, %dec_label_pc_10022b0
  %105 = and i32 %50, 114, !insn.addr !644
  %106 = and i32 %50, -256, !insn.addr !644
  %107 = add i32 %arg4, 73433858, !insn.addr !645
  %108 = inttoptr i32 %107 to i8*, !insn.addr !645
  %109 = load i8, i8* %108, align 1, !insn.addr !645
  %110 = trunc i32 %90 to i8, !insn.addr !645
  %111 = add i8 %109, %110, !insn.addr !645
  store i8 %111, i8* %108, align 1, !insn.addr !645
  %112 = xor i32 %105, 6, !insn.addr !646
  %113 = add nuw nsw i32 %112, 127, !insn.addr !646
  %114 = and i32 %113, 119, !insn.addr !646
  %115 = or i32 %114, %106
  %116 = xor i32 %115, -1961069312, !insn.addr !646
  ret i32 %116, !insn.addr !647

dec_label_pc_10022ca:                             ; preds = %dec_label_pc_100224d
  ret i32 %eax.0.reload, !insn.addr !648
}

define i32 @function_1002326() local_unnamed_addr {
dec_label_pc_1002326:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = or i32 %0, 119, !insn.addr !649
  ret i32 %1, !insn.addr !650
}

define i32 @function_100232f() local_unnamed_addr {
dec_label_pc_100232f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100233e() local_unnamed_addr {
dec_label_pc_100233e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %0, 2, !insn.addr !651
  %3 = add i32 %1, -5767432, !insn.addr !651
  %4 = add i32 %3, %2, !insn.addr !651
  ret i32 %4, !insn.addr !652
}

define i32 @function_1002354(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1002354:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %5, 192, !insn.addr !653
  %7 = and i32 %6, 255, !insn.addr !653
  %8 = and i32 %5, -256, !insn.addr !653
  %9 = or i32 %7, %8, !insn.addr !653
  %10 = add i32 %0, -96, !insn.addr !654
  %11 = inttoptr i32 %10 to i32*, !insn.addr !654
  %12 = load i32, i32* %11, align 4, !insn.addr !654
  %13 = add i32 %12, %3, !insn.addr !654
  %14 = icmp ult i32 %13, %12, !insn.addr !654
  store i32 %13, i32* %11, align 4, !insn.addr !654
  %15 = mul i32 %0, 2, !insn.addr !655
  %16 = add i32 %2, %15
  %17 = add i32 %16, -359, !insn.addr !655
  %18 = inttoptr i32 %17 to i32*, !insn.addr !655
  %19 = load i32, i32* %18, align 4, !insn.addr !655
  %.neg1 = sext i1 %14 to i32
  %.neg2 = sub i32 %9, %19, !insn.addr !655
  %20 = add i32 %.neg2, %.neg1, !insn.addr !655
  %21 = inttoptr i32 %20 to i32*, !insn.addr !656
  %22 = load i32, i32* %21, align 4, !insn.addr !656
  %23 = icmp eq i32 %20, %22, !insn.addr !656
  br i1 %23, label %24, label %dec_label_pc_1002366, !insn.addr !657

; <label>:24:                                     ; preds = %dec_label_pc_1002354
  %25 = call i32 @function_100232f(), !insn.addr !657
  br label %dec_label_pc_1002366, !insn.addr !657

dec_label_pc_1002366:                             ; preds = %24, %dec_label_pc_1002354
  %26 = trunc i32 %4 to i16, !insn.addr !658
  %27 = call i32 @__asm_in.5(i16 %26), !insn.addr !658
  %28 = trunc i32 %27 to i16
  %29 = add i16 %28, 95, !insn.addr !659
  %30 = add i32 %16, -19617, !insn.addr !659
  %31 = inttoptr i32 %30 to i16*, !insn.addr !659
  store i16 %29, i16* %31, align 2, !insn.addr !659
  %32 = add i32 %27, -1543503583, !insn.addr !660
  %33 = inttoptr i32 %32 to i32*, !insn.addr !660
  %34 = load i32, i32* %33, align 4, !insn.addr !660
  %35 = icmp eq i32 %34, 0, !insn.addr !660
  br i1 %35, label %dec_label_pc_1002394, label %dec_label_pc_1002388, !insn.addr !661

dec_label_pc_1002388:                             ; preds = %dec_label_pc_1002366
  %36 = add i32 %16, -16580868, !insn.addr !662
  %37 = inttoptr i32 %36 to i16*, !insn.addr !662
  store i16 45, i16* %37, align 2, !insn.addr !662
  %38 = call i32 @function_10023e7(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !663
  ret i32 %38, !insn.addr !663

dec_label_pc_1002394:                             ; preds = %dec_label_pc_1002366
  %39 = add i32 %16, 1124073212, !insn.addr !664
  %40 = inttoptr i32 %39 to i16*, !insn.addr !664
  store i16 43, i16* %40, align 2, !insn.addr !664
  %41 = add i32 %1, 1207959716, !insn.addr !665
  ret i32 %41, !insn.addr !666
}

define i32 @function_10023ab() local_unnamed_addr {
dec_label_pc_10023ab:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, -1971716477, !insn.addr !667
  %5 = call i32 @unknown_890b8bff(i32 %4, i32 0, i32 %3), !insn.addr !668
  %factor = mul i32 %5, 2
  %6 = add i32 %factor, 2, !insn.addr !669
  %7 = xor i32 %6, 10, !insn.addr !670
  %8 = icmp eq i32 %7, 0, !insn.addr !671
  %9 = icmp eq i1 %8, false, !insn.addr !672
  br i1 %9, label %dec_label_pc_10023e4, label %dec_label_pc_10023d8, !insn.addr !672

dec_label_pc_10023d8:                             ; preds = %dec_label_pc_10023ab
  %10 = load i8, i8* inttoptr (i32 2055560587 to i8*), align 1, !insn.addr !673
  %11 = trunc i32 %2 to i8, !insn.addr !673
  %12 = sub i8 %10, %11, !insn.addr !673
  store i8 %12, i8* inttoptr (i32 2055560587 to i8*), align 1, !insn.addr !673
  %13 = add i32 %1, -4, !insn.addr !674
  %14 = inttoptr i32 %13 to i32*, !insn.addr !674
  store i32 %7, i32* %14, align 4, !insn.addr !674
  ret i32 %7, !insn.addr !674

dec_label_pc_10023e4:                             ; preds = %dec_label_pc_10023ab
  %15 = add i32 %0, 1, !insn.addr !675
  %16 = inttoptr i32 %15 to i8*, !insn.addr !675
  %17 = load i8, i8* %16, align 1, !insn.addr !675
  %18 = udiv i32 %2, 256, !insn.addr !675
  %19 = trunc i32 %18 to i8, !insn.addr !675
  %20 = add i8 %17, %19, !insn.addr !675
  store i8 %20, i8* %16, align 1, !insn.addr !675
  ret i32 %7, !insn.addr !675
}

define i32 @function_10023e7(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10023e7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %8 = add i32 %3, 109124165, !insn.addr !676
  %9 = inttoptr i32 %8 to i8*, !insn.addr !676
  %10 = load i8, i8* %9, align 1, !insn.addr !676
  %11 = trunc i32 %5 to i8, !insn.addr !676
  %12 = add i8 %10, %11, !insn.addr !676
  store i8 %12, i8* %9, align 1, !insn.addr !676
  %13 = add i32 %2, 91, !insn.addr !677
  %14 = inttoptr i32 %13 to i32*, !insn.addr !677
  %15 = load i32, i32* %14, align 4, !insn.addr !677
  %16 = icmp eq i32 %15, -93, !insn.addr !677
  br i1 %16, label %dec_label_pc_1002429, label %dec_label_pc_10023f5, !insn.addr !678

dec_label_pc_10023f5:                             ; preds = %dec_label_pc_10023e7
  %17 = add i32 %3, 133725604, !insn.addr !679
  %18 = inttoptr i32 %17 to i32*, !insn.addr !679
  %19 = load i32, i32* %18, align 4, !insn.addr !679
  %20 = inttoptr i32 %19 to i32*, !insn.addr !680
  %21 = load i32, i32* %20, align 4, !insn.addr !680
  %22 = sub i32 %21, %19, !insn.addr !680
  store i32 %22, i32* %20, align 4, !insn.addr !680
  ret i32 %19, !insn.addr !681

dec_label_pc_1002429:                             ; preds = %dec_label_pc_10023e7
  %23 = and i32 %4, -65281, !insn.addr !682
  %24 = zext i1 %6 to i32, !insn.addr !682
  %25 = mul i32 %24, 256
  %26 = add i32 %25, %3
  %27 = and i32 %26, 65280
  %28 = sub i32 %4, %27
  %29 = and i32 %28, 65280, !insn.addr !682
  %30 = or i32 %29, %23, !insn.addr !682
  %31 = inttoptr i32 %30 to i8*, !insn.addr !683
  %32 = load i8, i8* %31, align 1, !insn.addr !683
  %33 = add i8 %32, -1, !insn.addr !683
  store i8 %33, i8* %31, align 1, !insn.addr !683
  %34 = icmp eq i32 %0, 0, !insn.addr !684
  br i1 %34, label %dec_label_pc_1002449, label %dec_label_pc_100243e, !insn.addr !685

dec_label_pc_100243e:                             ; preds = %dec_label_pc_1002429
  %35 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !686
  %36 = add i32 %7, 1946449217, !insn.addr !687
  %37 = inttoptr i32 %36 to i32*, !insn.addr !687
  %38 = load i32, i32* %37, align 4, !insn.addr !687
  %39 = add i32 %38, %35, !insn.addr !687
  store i32 %39, i32* %37, align 4, !insn.addr !687
  %40 = add i32 %7, -1838052405, !insn.addr !688
  %41 = inttoptr i32 %40 to i8*, !insn.addr !688
  %42 = load i8, i8* %41, align 1, !insn.addr !688
  %43 = zext i8 %42 to i32, !insn.addr !688
  %44 = mul i32 %43, 4, !insn.addr !688
  ret i32 %44, !insn.addr !689

dec_label_pc_1002449:                             ; preds = %dec_label_pc_1002429
  %45 = icmp slt i8 %32, 1, !insn.addr !690
  %spec.select.v = select i1 %45, i32 48, i32 55
  %spec.select = add i32 %spec.select.v, %1
  %46 = inttoptr i32 %spec.select to i8*, !insn.addr !691
  %47 = load i8, i8* %46, align 1, !insn.addr !691
  %48 = trunc i32 %4 to i8, !insn.addr !691
  %49 = or i8 %47, %48, !insn.addr !691
  store i8 %49, i8* %46, align 1, !insn.addr !691
  ret i32 %7, !insn.addr !692
}

define i32 @function_1002460() local_unnamed_addr {
dec_label_pc_1002460:
  %.pre-phi.reg2mem = alloca i32, !insn.addr !693
  %eax.0.reg2mem = alloca i32, !insn.addr !693
  %ecx.0.reg2mem = alloca i32, !insn.addr !693
  %ebp.0.reg2mem = alloca i32, !insn.addr !693
  %esp.0.reg2mem = alloca i32, !insn.addr !693
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i32 @__decompiler_undefined_function_0()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = icmp eq i1 %9, %8, !insn.addr !693
  br i1 %10, label %dec_label_pc_10024b6, label %dec_label_pc_1002462, !insn.addr !693

dec_label_pc_1002462:                             ; preds = %dec_label_pc_1002460
  %11 = icmp eq i32 %5, 0, !insn.addr !694
  br i1 %11, label %dec_label_pc_10024ca, label %dec_label_pc_1002466, !insn.addr !695

dec_label_pc_1002466:                             ; preds = %dec_label_pc_1002462
  %12 = add i32 %6, 8, !insn.addr !696
  %13 = inttoptr i32 %12 to i64*, !insn.addr !696
  %14 = load i64, i64* %13, align 4, !insn.addr !696
  %15 = call i32 @__asm_bound(i64 %14), !insn.addr !696
  %16 = add i32 %4, 1099628567, !insn.addr !697
  %17 = inttoptr i32 %16 to i8*, !insn.addr !697
  %18 = load i8, i8* %17, align 1, !insn.addr !697
  %19 = trunc i32 %7 to i8, !insn.addr !697
  %20 = add i8 %18, %19, !insn.addr !697
  store i8 %20, i8* %17, align 1, !insn.addr !697
  %21 = add i32 %7, -119, !insn.addr !698
  %22 = inttoptr i32 %21 to i8*, !insn.addr !698
  %23 = load i8, i8* %22, align 1, !insn.addr !698
  %24 = or i8 %23, %19, !insn.addr !698
  store i8 %24, i8* %22, align 1, !insn.addr !698
  %25 = add i32 %6, 1, !insn.addr !699
  %26 = or i32 %7, 3, !insn.addr !700
  %27 = inttoptr i32 %15 to i32*, !insn.addr !701
  store i32 %25, i32* %27, align 4, !insn.addr !701
  %28 = inttoptr i32 %26 to i32*, !insn.addr !702
  %29 = load i32, i32* %28, align 4, !insn.addr !702
  %30 = add i32 %29, %25, !insn.addr !702
  %31 = icmp eq i32 %30, 0, !insn.addr !702
  store i32 %30, i32* %28, align 4, !insn.addr !702
  %32 = icmp eq i1 %31, false, !insn.addr !703
  store i32 %15, i32* %esp.0.reg2mem, !insn.addr !703
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !703
  store i32 %26, i32* %eax.0.reg2mem, !insn.addr !703
  br i1 %32, label %dec_label_pc_10024a0, label %dec_label_pc_1002480, !insn.addr !703

dec_label_pc_1002480:                             ; preds = %dec_label_pc_10024d2, %dec_label_pc_1002466
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %33 = icmp ult i32 %1, %eax.0.reload, !insn.addr !704
  %34 = inttoptr i32 %0 to i32*, !insn.addr !705
  store i32 %eax.0.reload, i32* %34, align 4, !insn.addr !705
  %35 = select i1 %33, i32 134, i32 133, !insn.addr !706
  %36 = sub i32 %eax.0.reload, %35, !insn.addr !706
  %37 = and i32 %36, 255, !insn.addr !706
  %38 = and i32 %eax.0.reload, -256, !insn.addr !706
  %39 = or i32 %37, %38, !insn.addr !706
  %40 = add i32 %ebp.0.reload, 24, !insn.addr !707
  %41 = inttoptr i32 %40 to i32*, !insn.addr !707
  %42 = load i32, i32* %41, align 4, !insn.addr !707
  %43 = add i32 %esp.0.reload, -4, !insn.addr !707
  %44 = inttoptr i32 %43 to i32*, !insn.addr !707
  store i32 %42, i32* %44, align 4, !insn.addr !707
  %45 = mul i32 %39, 3, !insn.addr !708
  %46 = inttoptr i32 %45 to i32*, !insn.addr !708
  %47 = load i32, i32* %46, align 4, !insn.addr !708
  %48 = sub i32 0, %47
  %49 = sub i32 %48, 1
  store i32 %49, i32* %46, align 4, !insn.addr !708
  %50 = add i32 %5, 3, !insn.addr !709
  %51 = inttoptr i32 %50 to i32*, !insn.addr !709
  %52 = load i32, i32* %51, align 4, !insn.addr !709
  %53 = add i32 %52, %ebp.0.reload, !insn.addr !709
  store i32 %53, i32* %51, align 4, !insn.addr !709
  %54 = ashr i32 %eax.0.reload, 31, !insn.addr !710
  %55 = load i32, i32* %44, align 4, !insn.addr !711
  %56 = zext i32 %39 to i64, !insn.addr !712
  %57 = zext i32 %54 to i64, !insn.addr !712
  %58 = mul i64 %57, 4294967296, !insn.addr !712
  %59 = or i64 %58, %56, !insn.addr !712
  %60 = zext i32 %55 to i64, !insn.addr !712
  %61 = srem i64 %59, %60, !insn.addr !712
  %62 = trunc i64 %61 to i32, !insn.addr !712
  %63 = add i32 %62, -1, !insn.addr !713
  %64 = icmp eq i32 %63, 0, !insn.addr !713
  br i1 %64, label %dec_label_pc_10024a8, label %dec_label_pc_1002496, !insn.addr !714

dec_label_pc_1002496:                             ; preds = %dec_label_pc_1002480
  %65 = icmp eq i32 %63, 1, !insn.addr !715
  %66 = icmp eq i1 %65, false, !insn.addr !716
  br i1 %66, label %dec_label_pc_10024a0, label %dec_label_pc_1002499, !insn.addr !716

dec_label_pc_1002499:                             ; preds = %dec_label_pc_1002496
  %67 = add i32 %ecx.0.reload, 12
  %68 = inttoptr i32 %67 to i16*, !insn.addr !717
  %69 = load i16, i16* %68, align 2, !insn.addr !717
  %70 = icmp ult i16 %69, 52
  store i32 %67, i32* %.pre-phi.reg2mem, !insn.addr !718
  br i1 %70, label %dec_label_pc_10024af, label %dec_label_pc_10024a0, !insn.addr !718

dec_label_pc_10024a0:                             ; preds = %dec_label_pc_10024a8, %dec_label_pc_1002499, %dec_label_pc_1002496, %dec_label_pc_1002466
  %71 = add i32 %4, -62, !insn.addr !719
  %72 = inttoptr i32 %71 to i8*, !insn.addr !719
  %73 = load i8, i8* %72, align 1, !insn.addr !719
  %74 = trunc i32 %4 to i8, !insn.addr !719
  %75 = xor i8 %73, %74, !insn.addr !719
  store i8 %75, i8* %72, align 1, !insn.addr !719
  ret i32 0, !insn.addr !719

dec_label_pc_10024a8:                             ; preds = %dec_label_pc_1002480
  %76 = add i32 %ecx.0.reload, 12
  %77 = inttoptr i32 %76 to i16*, !insn.addr !720
  %78 = load i16, i16* %77, align 2, !insn.addr !720
  %79 = icmp eq i16 %78, 49, !insn.addr !720
  %80 = icmp eq i1 %79, false, !insn.addr !721
  store i32 %76, i32* %.pre-phi.reg2mem, !insn.addr !721
  br i1 %80, label %dec_label_pc_10024a0, label %dec_label_pc_10024af, !insn.addr !721

dec_label_pc_10024af:                             ; preds = %dec_label_pc_10024a8, %dec_label_pc_1002499
  %81 = sdiv i64 %59, %60, !insn.addr !712
  %82 = trunc i64 %81 to i32, !insn.addr !712
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %83 = trunc i32 %4 to i16, !insn.addr !722
  %84 = mul i32 %1, 2, !insn.addr !722
  %85 = add i32 %.pre-phi.reload, %84, !insn.addr !722
  %86 = inttoptr i32 %85 to i16*, !insn.addr !722
  store i16 %83, i16* %86, align 2, !insn.addr !722
  ret i32 %82, !insn.addr !722

dec_label_pc_10024b6:                             ; preds = %dec_label_pc_1002460
  %87 = udiv i32 %5, 256, !insn.addr !723
  %88 = or i32 %87, %4
  %89 = trunc i32 %88 to i8, !insn.addr !723
  %90 = inttoptr i32 %4 to i8*, !insn.addr !723
  store i8 %89, i8* %90, align 1, !insn.addr !723
  %91 = add i32 %7, 14, !insn.addr !724
  %92 = inttoptr i32 %91 to i8*, !insn.addr !724
  %93 = load i8, i8* %92, align 1, !insn.addr !724
  %94 = mul i8 %93, 64, !insn.addr !724
  %95 = udiv i8 %93, 4, !insn.addr !724
  %96 = or i8 %95, %94, !insn.addr !724
  store i8 %96, i8* %92, align 1, !insn.addr !724
  %97 = add i32 %7, 8, !insn.addr !725
  %98 = inttoptr i32 %97 to i32*, !insn.addr !725
  %99 = load i32, i32* %98, align 4, !insn.addr !725
  %100 = icmp eq i32 %99, 0, !insn.addr !725
  br i1 %100, label %dec_label_pc_10024d2, label %dec_label_pc_10024c7, !insn.addr !726

dec_label_pc_10024c7:                             ; preds = %dec_label_pc_10024b6
  ret i32 %7, !insn.addr !726

dec_label_pc_10024ca:                             ; preds = %dec_label_pc_1002462
  %101 = add i32 %7, 156, !insn.addr !727
  %102 = inttoptr i32 %101 to i32*, !insn.addr !727
  %103 = call i32 @function_10024ef(), !insn.addr !728
  ret i32 %103, !insn.addr !728

dec_label_pc_10024d2:                             ; preds = %dec_label_pc_10024b6
  %104 = icmp eq i8 %89, 0, !insn.addr !723
  %105 = mul i32 %2, 8, !insn.addr !729
  %106 = add i32 %105, %0, !insn.addr !729
  %107 = inttoptr i32 %106 to i32*, !insn.addr !729
  %108 = load i32, i32* %107, align 4, !insn.addr !729
  %109 = select i1 %104, i32 %108, i32 %3, !insn.addr !729
  %110 = add i32 %1, -1955324103, !insn.addr !730
  %111 = inttoptr i32 %110 to i32*, !insn.addr !730
  %112 = load i32, i32* %111, align 4, !insn.addr !730
  %113 = xor i32 %112, %2, !insn.addr !730
  %114 = add i32 %7, -1275068260, !insn.addr !731
  %115 = inttoptr i32 %114 to i32*, !insn.addr !732
  %116 = load i32, i32* %115, align 4, !insn.addr !732
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, i32 %114, i32 %5, !insn.addr !733
  %119 = add i32 %109, -4, !insn.addr !734
  %120 = inttoptr i32 %119 to i32*, !insn.addr !734
  store i32 0, i32* %120, align 4, !insn.addr !734
  %121 = add i32 %109, -8, !insn.addr !735
  %122 = inttoptr i32 %121 to i32*, !insn.addr !735
  store i32 %119, i32* %122, align 4, !insn.addr !735
  store i32 %121, i32* %esp.0.reg2mem, !insn.addr !736
  store i32 %113, i32* %ebp.0.reg2mem, !insn.addr !736
  store i32 0, i32* %ecx.0.reg2mem, !insn.addr !736
  store i32 %118, i32* %eax.0.reg2mem, !insn.addr !736
  br label %dec_label_pc_1002480, !insn.addr !736
}

define i32 @function_10024e6() local_unnamed_addr {
dec_label_pc_10024e6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 12, !insn.addr !737
  %3 = inttoptr i32 %2 to i32*, !insn.addr !737
  ret i32 %1, !insn.addr !737
}

define i32 @function_10024ef() local_unnamed_addr {
dec_label_pc_10024ef:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !738
}

define i32 @function_10024f2() local_unnamed_addr {
dec_label_pc_10024f2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %2 = and i32 %1, -252, !insn.addr !739
  %3 = add i32 %2, 1952528515, !insn.addr !740
  %4 = add nsw i32 %2, 182, !insn.addr !741
  %5 = and i32 %4, 190, !insn.addr !741
  %6 = and i32 %3, -256, !insn.addr !741
  %7 = or i32 %6, %5, !insn.addr !741
  %8 = add nsw i32 %7, 16, !insn.addr !742
  %9 = inttoptr i32 %8 to i32*, !insn.addr !742
  %10 = load i32, i32* %9, align 4, !insn.addr !742
  %11 = inttoptr i32 %10 to i8*, !insn.addr !743
  %12 = load i8, i8* %11, align 1, !insn.addr !743
  %13 = udiv i32 %0, 256, !insn.addr !743
  %14 = trunc i32 %13 to i8, !insn.addr !743
  %15 = or i8 %12, %14, !insn.addr !743
  store i8 %15, i8* %11, align 1, !insn.addr !743
  %16 = add i32 %1, 4, !insn.addr !744
  %17 = inttoptr i32 %16 to i32*, !insn.addr !744
  %18 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !744
  store i32 %18, i32* %17, align 4, !insn.addr !744
  %19 = add i32 %10, 1, !insn.addr !745
  %20 = add nsw i32 %7, -78, !insn.addr !746
  %21 = inttoptr i32 %20 to i32*, !insn.addr !746
  store i32 %19, i32* %21, align 4, !insn.addr !746
  %22 = add nsw i32 %7, 4, !insn.addr !747
  %23 = inttoptr i32 %22 to i32*, !insn.addr !747
  %24 = load i32, i32* %23, align 4, !insn.addr !747
  %25 = and i32 %7, 65470, !insn.addr !748
  %26 = and i32 %24, -65536, !insn.addr !748
  %27 = or i32 %26, %25, !insn.addr !748
  %28 = add nsw i32 %2, 118, !insn.addr !749
  %29 = and i32 %28, 126, !insn.addr !749
  %30 = or i32 %29, %6, !insn.addr !749
  %31 = inttoptr i32 %27 to i32*, !insn.addr !750
  %32 = load i32, i32* %31, align 4, !insn.addr !750
  %33 = add i32 %32, %30, !insn.addr !750
  store i32 %33, i32* %31, align 4, !insn.addr !750
  %34 = trunc i32 %1 to i16, !insn.addr !751
  %35 = add i32 %27, -1070394296, !insn.addr !751
  %36 = inttoptr i32 %35 to i16*, !insn.addr !751
  store i16 %34, i16* %36, align 2, !insn.addr !751
  %37 = or i32 %30, 1, !insn.addr !752
  ret i32 %37, !insn.addr !753
}

define i32 @function_1002528(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002528:
  %merge.reg2mem = alloca i32, !insn.addr !754
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = trunc i32 %2 to i8
  %6 = sdiv i8 %5, 16, !insn.addr !755
  %.off = add i8 %5, 15
  %7 = icmp ult i8 %.off, 31
  %8 = inttoptr i32 %2 to i8*, !insn.addr !755
  store i8 %6, i8* %8, align 1, !insn.addr !755
  %9 = icmp eq i1 %7, false, !insn.addr !756
  br i1 %9, label %dec_label_pc_100253c, label %dec_label_pc_1002539, !insn.addr !756

dec_label_pc_1002539:                             ; preds = %dec_label_pc_1002528
  %10 = add i32 %3, 1, !insn.addr !757
  %11 = inttoptr i32 %arg1 to i32*, !insn.addr !758
  store i32 %10, i32* %11, align 4, !insn.addr !758
  br label %dec_label_pc_100253c, !insn.addr !758

dec_label_pc_100253c:                             ; preds = %dec_label_pc_1002539, %dec_label_pc_1002528
  %12 = add i32 %2, 4, !insn.addr !759
  %13 = inttoptr i32 %12 to i32*, !insn.addr !759
  %14 = load i32, i32* %13, align 4, !insn.addr !759
  %15 = load i32, i32* inttoptr (i32 872401919 to i32*), align 4, !insn.addr !760
  %16 = or i32 %15, 116, !insn.addr !760
  store i32 %16, i32* inttoptr (i32 872401919 to i32*), align 4, !insn.addr !760
  %17 = add i32 %0, 64904, !insn.addr !761
  %18 = inttoptr i32 %17 to i32*, !insn.addr !761
  %19 = load i32, i32* %18, align 4, !insn.addr !761
  %20 = zext i16 %4 to i32, !insn.addr !762
  %21 = mul i32 %20, 256
  %22 = add i32 %14, %21
  %23 = and i32 %22, 65280, !insn.addr !762
  %24 = and i32 %14, -65281, !insn.addr !762
  %25 = or i32 %23, %24, !insn.addr !762
  %26 = inttoptr i32 %25 to i32*, !insn.addr !763
  %27 = load i32, i32* %26, align 4, !insn.addr !763
  %28 = icmp eq i32 %27, %25, !insn.addr !763
  %29 = icmp eq i1 %28, false, !insn.addr !764
  br i1 %29, label %dec_label_pc_100255f, label %dec_label_pc_1002554, !insn.addr !764

dec_label_pc_1002554:                             ; preds = %dec_label_pc_100253c
  %30 = add i32 %25, -2080374624, !insn.addr !765
  %31 = inttoptr i32 %30 to i32*, !insn.addr !765
  %32 = load i32, i32* %31, align 4, !insn.addr !765
  %33 = add i32 %32, -1, !insn.addr !765
  store i32 %33, i32* %31, align 4, !insn.addr !765
  br label %dec_label_pc_1002591, !insn.addr !766

dec_label_pc_100255f:                             ; preds = %dec_label_pc_100253c
  store i32 0, i32* %26, align 4, !insn.addr !767
  br label %dec_label_pc_1002591, !insn.addr !768

dec_label_pc_1002591:                             ; preds = %dec_label_pc_1002554, %dec_label_pc_100255f
  %34 = sub i32 0, %19
  %35 = sub i32 %34, 1
  %36 = add i32 %2, %35, !insn.addr !769
  %37 = icmp eq i32 %36, 0, !insn.addr !769
  store i32 1, i32* %merge.reg2mem, !insn.addr !769
  br i1 %37, label %dec_label_pc_1002596, label %dec_label_pc_100259a, !insn.addr !769

dec_label_pc_1002596:                             ; preds = %dec_label_pc_100259a, %dec_label_pc_1002591
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !769

dec_label_pc_100259a:                             ; preds = %dec_label_pc_1002591
  %38 = add i32 %1, -125631328, !insn.addr !770
  %39 = inttoptr i32 %38 to i8*, !insn.addr !770
  %40 = load i8, i8* %39, align 1, !insn.addr !770
  %41 = trunc i32 %36 to i8, !insn.addr !770
  %42 = and i8 %40, %41, !insn.addr !770
  %43 = icmp eq i8 %42, 0, !insn.addr !770
  br i1 %43, label %dec_label_pc_1002596, label %dec_label_pc_10025a3, !insn.addr !771

dec_label_pc_10025a3:                             ; preds = %dec_label_pc_100259a
  %44 = call i8 @__asm_in.1(i8 -117), !insn.addr !772
  %45 = sext i8 %44 to i32, !insn.addr !772
  %46 = and i32 %0, -256, !insn.addr !772
  %47 = or i32 %46, %45, !insn.addr !772
  %48 = add i32 %47, ptrtoint (i32* @global_var_101402c to i32), !insn.addr !773
  %49 = icmp ult i32 %48, %47, !insn.addr !773
  %50 = inttoptr i32 %arg1 to i16*, !insn.addr !774
  %51 = load i16, i16* %50, align 2, !insn.addr !774
  %52 = trunc i32 %48 to i16, !insn.addr !774
  %53 = zext i1 %49 to i16, !insn.addr !774
  %54 = add i16 %51, %52, !insn.addr !774
  %55 = add i16 %54, %53, !insn.addr !774
  store i16 %55, i16* %50, align 2, !insn.addr !774
  ret i32 %48, !insn.addr !774
}

define i32 @function_10025b1(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10025b1:
  %storemerge1.reg2mem = alloca i32, !insn.addr !775
  %storemerge.reg2mem = alloca i32, !insn.addr !775
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = icmp eq i32 %arg2, 0, !insn.addr !776
  %3 = load i32, i32* @global_var_1014eec, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %2, label %dec_label_pc_10025d8, label %dec_label_pc_10025b9, !insn.addr !777

dec_label_pc_10025b9:                             ; preds = %dec_label_pc_10025b1
  %5 = icmp eq i1 %4, false, !insn.addr !778
  store i32 1, i32* %storemerge1.reg2mem, !insn.addr !778
  br i1 %5, label %dec_label_pc_1002601, label %dec_label_pc_10025c2, !insn.addr !778

dec_label_pc_10025c2:                             ; preds = %dec_label_pc_10025b9
  %6 = add i32 %1, 29235480, !insn.addr !779
  store i32 %6, i32* %storemerge.reg2mem, !insn.addr !780
  br label %dec_label_pc_10025ea, !insn.addr !780

dec_label_pc_10025d8:                             ; preds = %dec_label_pc_10025b1
  store i32 0, i32* %storemerge1.reg2mem, !insn.addr !781
  br i1 %4, label %dec_label_pc_1002601, label %dec_label_pc_10025e1, !insn.addr !781

dec_label_pc_10025e1:                             ; preds = %dec_label_pc_10025d8
  %7 = trunc i32 %0 to i8, !insn.addr !782
  store i8 %7, i8* inttoptr (i32 16781592 to i8*), align 8, !insn.addr !782
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !783
  br label %dec_label_pc_10025ea, !insn.addr !783

dec_label_pc_10025ea:                             ; preds = %dec_label_pc_10025e1, %dec_label_pc_10025c2
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %storemerge.reload, i32* inttoptr (i32 -117354772 to i32*), align 4, !insn.addr !784
  store i32 1, i32* %storemerge1.reg2mem, !insn.addr !785
  br label %dec_label_pc_1002601, !insn.addr !785

dec_label_pc_1002601:                             ; preds = %dec_label_pc_10025d8, %dec_label_pc_10025b9, %dec_label_pc_10025ea
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  ret i32 %storemerge1.reload, !insn.addr !786
}

define i32 @function_1002646(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002646:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100269d() local_unnamed_addr {
dec_label_pc_100269d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = sdiv i32 %0, 268435456, !insn.addr !787
  %5 = mul i32 %3, 2, !insn.addr !788
  %6 = inttoptr i32 %3 to i32*, !insn.addr !788
  store i32 %5, i32* %6, align 4, !insn.addr !788
  %7 = add nsw i32 %4, 43, !insn.addr !789
  %8 = inttoptr i32 %7 to i8*, !insn.addr !789
  %9 = load i8, i8* %8, align 1, !insn.addr !789
  %10 = udiv i32 %2, 256, !insn.addr !789
  %11 = trunc i32 %10 to i8, !insn.addr !789
  %12 = add i8 %9, %11, !insn.addr !789
  store i8 %12, i8* %8, align 1, !insn.addr !789
  %13 = mul i32 %2, 2, !insn.addr !790
  %14 = add i32 %13, %1, !insn.addr !790
  %15 = inttoptr i32 %14 to i32*, !insn.addr !790
  %16 = load i32, i32* %15, align 4, !insn.addr !790
  %17 = xor i32 %16, 116, !insn.addr !790
  store i32 %17, i32* %15, align 4, !insn.addr !790
  %18 = call i32 @function_4590831c(), !insn.addr !791
  ret i32 %18, !insn.addr !791
}

define i32 @function_1002807() local_unnamed_addr {
dec_label_pc_1002807:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i8*, !insn.addr !792
  store i8 0, i8* %1, align 1, !insn.addr !792
  ret i32 %0, !insn.addr !793
}

define i32 @function_100280f(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100280f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -4, !insn.addr !794
  %4 = inttoptr i32 %3 to i32*, !insn.addr !794
  store i32 -1, i32* %4, align 4, !insn.addr !794
  %5 = add i32 %0, 132906240, !insn.addr !795
  %6 = add i32 %5, %1, !insn.addr !795
  %7 = inttoptr i32 %6 to i64*, !insn.addr !795
  %8 = load i64, i64* %7, align 4, !insn.addr !795
  %9 = call i32 @__asm_bound(i64 %8), !insn.addr !795
  %10 = add i32 %9, -4, !insn.addr !796
  %11 = inttoptr i32 %10 to i32*, !insn.addr !796
  %12 = add i32 %9, -8, !insn.addr !797
  %13 = inttoptr i32 %12 to i32*, !insn.addr !797
  %14 = add i32 %9, -12, !insn.addr !798
  %15 = inttoptr i32 %14 to i32*, !insn.addr !798
  store i32 -503316340, i32* %15, align 4, !insn.addr !798
  %16 = add i32 %14, %2, !insn.addr !799
  %17 = inttoptr i32 %2 to i32*, !insn.addr !799
  store i32 %16, i32* %17, align 4, !insn.addr !799
  %18 = call i32 @function_100660d(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !800
  %19 = call i32 @function_10122eb(i32 ptrtoint (i32* @0 to i32)), !insn.addr !801
  ret i32 %19, !insn.addr !801
}

define i32 @function_100283f() local_unnamed_addr {
dec_label_pc_100283f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = call i1 @__decompiler_undefined_function_2()
  br i1 %4, label %5, label %dec_label_pc_1002848, !insn.addr !802

; <label>:5:                                      ; preds = %dec_label_pc_100283f
  %6 = call i32 @function_ea002dab(), !insn.addr !802
  store i32 %6, i32* %eax, align 4, !insn.addr !802
  br label %dec_label_pc_1002848, !insn.addr !802

dec_label_pc_1002848:                             ; preds = %5, %dec_label_pc_100283f
  %7 = add i32 %2, -417160865, !insn.addr !803
  %8 = inttoptr i32 %7 to i32*, !insn.addr !803
  %9 = load i32, i32* %8, align 4, !insn.addr !803
  %10 = or i32 %9, -49, !insn.addr !803
  store i32 %10, i32* %8, align 4, !insn.addr !803
  %11 = bitcast i32* %eax to i8*
  %12 = load i8, i8* %11, align 4, !insn.addr !804
  %13 = load i32, i32* %eax, align 4
  %14 = trunc i32 %13 to i8, !insn.addr !804
  %15 = add i8 %12, %14, !insn.addr !804
  %16 = inttoptr i32 %13 to i8*, !insn.addr !804
  store i8 %15, i8* %16, align 1, !insn.addr !804
  %17 = load i32, i32* inttoptr (i32 -1731113592 to i32*), align 8, !insn.addr !805
  %18 = icmp eq i32 %17, %1, !insn.addr !805
  br i1 %18, label %dec_label_pc_1002875, label %dec_label_pc_1002859, !insn.addr !806

dec_label_pc_1002859:                             ; preds = %dec_label_pc_1002848
  %19 = icmp ult i32 %17, %1, !insn.addr !805
  %20 = mul i32 %1, 2, !insn.addr !807
  %21 = add i32 %3, %20, !insn.addr !807
  %22 = inttoptr i32 %21 to i32*, !insn.addr !807
  %23 = load i32, i32* %22, align 4, !insn.addr !807
  %24 = select i1 %19, i32 118, i32 117, !insn.addr !807
  %25 = add i32 %23, %24, !insn.addr !807
  store i32 %25, i32* %22, align 4, !insn.addr !807
  %26 = call i32 @unknown_1d0660d(), !insn.addr !808
  store i32 %26, i32* %eax, align 4, !insn.addr !808
  %27 = add i32 %0, 114, !insn.addr !809
  %28 = inttoptr i32 %27 to i32*, !insn.addr !809
  store i32 7, i32* %28, align 4, !insn.addr !809
  br label %dec_label_pc_1002875, !insn.addr !809

dec_label_pc_1002875:                             ; preds = %dec_label_pc_1002859, %dec_label_pc_1002848
  %29 = load i32, i32* %eax, align 4, !insn.addr !810
  ret i32 %29, !insn.addr !810
}

define i32 @function_1002876() local_unnamed_addr {
dec_label_pc_1002876:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @unknown_840129c9(), !insn.addr !811
  %4 = icmp sgt i32 %3, 95, !insn.addr !812
  br i1 %4, label %dec_label_pc_100288f, label %dec_label_pc_1002884, !insn.addr !812

dec_label_pc_1002884:                             ; preds = %dec_label_pc_1002876
  %5 = add i32 %3, -385810099, !insn.addr !813
  %6 = inttoptr i32 %5 to i32*, !insn.addr !813
  store i32 %3, i32* %6, align 4, !insn.addr !813
  %7 = inttoptr i32 %1 to i32*, !insn.addr !814
  %8 = inttoptr i32 %3 to i8*, !insn.addr !815
  %9 = load i8, i8* %8, align 1, !insn.addr !815
  %10 = trunc i32 %3 to i8, !insn.addr !815
  %11 = add i8 %9, %10, !insn.addr !815
  store i8 %11, i8* %8, align 1, !insn.addr !815
  br label %dec_label_pc_100288f, !insn.addr !815

dec_label_pc_100288f:                             ; preds = %dec_label_pc_1002884, %dec_label_pc_1002876
  %12 = add i32 %0, 255524867, !insn.addr !816
  %13 = add i32 %12, %1, !insn.addr !816
  %14 = inttoptr i32 %13 to i32*, !insn.addr !816
  %15 = load i32, i32* %14, align 4, !insn.addr !816
  %16 = or i32 %15, %3, !insn.addr !816
  store i32 %16, i32* %14, align 4, !insn.addr !816
  %17 = add i32 %3, 1, !insn.addr !817
  %18 = add i32 %17, %2, !insn.addr !818
  %19 = inttoptr i32 %2 to i32*, !insn.addr !818
  store i32 %18, i32* %19, align 4, !insn.addr !818
  %20 = trunc i32 %1 to i16
  %21 = and i16 %20, 255
  %22 = or i16 %21, 5376, !insn.addr !819
  call void @__asm_outsd(i16 %22, i32 %0), !insn.addr !819
  %23 = load i32, i32* inttoptr (i32 397807376 to i32*), align 16, !insn.addr !820
  %24 = add i32 %23, -1, !insn.addr !820
  store i32 %24, i32* inttoptr (i32 397807376 to i32*), align 16, !insn.addr !820
  ret i32 %17, !insn.addr !821
}

define i32 @function_10028b1(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10028b1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = add i32 %5, 1, !insn.addr !822
  %8 = add i32 %7, %4, !insn.addr !823
  %9 = inttoptr i32 %4 to i32*, !insn.addr !823
  store i32 %8, i32* %9, align 4, !insn.addr !823
  %10 = add i32 %0, 1, !insn.addr !824
  %11 = trunc i32 %3 to i16, !insn.addr !825
  %12 = call i8 @__asm_insb(i16 %11), !insn.addr !825
  %13 = inttoptr i32 %10 to i8*, !insn.addr !825
  store i8 %12, i8* %13, align 1, !insn.addr !825
  %14 = trunc i32 %7 to i8, !insn.addr !826
  call void @__asm_out(i16 %11, i8 %14), !insn.addr !826
  %15 = load i32, i32* inttoptr (i32 16852832 to i32*), align 32, !insn.addr !827
  %16 = icmp eq i32 %15, %3, !insn.addr !828
  br i1 %16, label %dec_label_pc_10028d5, label %dec_label_pc_10028c8, !insn.addr !829

dec_label_pc_10028c8:                             ; preds = %dec_label_pc_10028b1
  %17 = call i32 @unknown_4e4d14b6(i16 %6), !insn.addr !830
  ret i32 %17, !insn.addr !830

dec_label_pc_10028d5:                             ; preds = %dec_label_pc_10028b1
  %18 = icmp eq i32 %10, 12, !insn.addr !831
  %19 = icmp eq i1 %18, false, !insn.addr !832
  br i1 %19, label %dec_label_pc_1002954, label %dec_label_pc_10028da, !insn.addr !832

dec_label_pc_10028da:                             ; preds = %dec_label_pc_10028d5
  %20 = load i8, i8* inttoptr (i32 16845645 to i8*), align 1, !insn.addr !833
  %21 = zext i8 %20 to i32, !insn.addr !833
  %22 = and i32 %3, -256, !insn.addr !833
  %23 = load i8, i8* inttoptr (i32 28524787 to i8*), align 1, !insn.addr !834
  %24 = icmp ugt i8 %20, %23
  br i1 %24, label %dec_label_pc_10028f3, label %dec_label_pc_10028ff, !insn.addr !835

dec_label_pc_10028f3:                             ; preds = %dec_label_pc_10028da
  %25 = and i8 %20, 15, !insn.addr !834
  %26 = and i8 %23, 15, !insn.addr !834
  %27 = sub nsw i8 %25, %26, !insn.addr !834
  %28 = icmp ugt i8 %27, 15, !insn.addr !834
  %29 = and i8 %20, 14, !insn.addr !836
  %30 = icmp ugt i8 %29, 9, !insn.addr !836
  %31 = or i1 %30, %28, !insn.addr !836
  %32 = icmp ugt i8 %20, -103
  %.v = select i1 %32, i32 154, i32 250
  %33 = add nuw nsw i32 %.v, %21
  %34 = add nuw nsw i32 %21, 160
  %35 = select i1 %32, i32 %34, i32 %21
  %.pn.in = select i1 %31, i32 %33, i32 %35
  %.pn = and i32 %.pn.in, 255
  %storemerge = or i32 %.pn, %22
  %36 = select i1 %32, i32 16849225, i32 16849224, !insn.addr !837
  %37 = sub i32 %storemerge, %36, !insn.addr !837
  %38 = inttoptr i32 %37 to i32*, !insn.addr !838
  %39 = load i32, i32* %38, align 4, !insn.addr !838
  %40 = add i32 %39, %37, !insn.addr !838
  store i32 %40, i32* %38, align 4, !insn.addr !838
  ret i32 %37, !insn.addr !838

dec_label_pc_10028ff:                             ; preds = %dec_label_pc_10028da
  %41 = or i32 %22, %21, !insn.addr !833
  %42 = inttoptr i32 %41 to i32*, !insn.addr !839
  %43 = load i32, i32* %42, align 4, !insn.addr !839
  %44 = xor i32 %43, %41, !insn.addr !839
  store i32 %44, i32* %42, align 4, !insn.addr !839
  ret i32 %41, !insn.addr !840

dec_label_pc_1002954:                             ; preds = %dec_label_pc_10028d5
  %45 = add i32 %0, -23, !insn.addr !841
  %46 = inttoptr i32 %45 to i8*, !insn.addr !841
  %47 = load i8, i8* %46, align 1, !insn.addr !841
  %48 = trunc i32 %3 to i8, !insn.addr !841
  %49 = add i8 %47, %48, !insn.addr !841
  store i8 %49, i8* %46, align 1, !insn.addr !841
  %50 = add i32 %1, -25, !insn.addr !842
  %51 = inttoptr i32 %50 to i32*, !insn.addr !842
  %52 = load i32, i32* %51, align 4, !insn.addr !842
  %53 = add i32 %52, %2, !insn.addr !842
  store i32 %53, i32* %51, align 4, !insn.addr !842
  %54 = inttoptr i32 %3 to i8*, !insn.addr !843
  %55 = load i8, i8* %54, align 1, !insn.addr !843
  %56 = add i8 %55, %48, !insn.addr !843
  store i8 %56, i8* %54, align 1, !insn.addr !843
  store i8* %54, i8** @global_var_1014d98, align 4, !insn.addr !844
  %57 = call i32 @unknown_11f7ba9(), !insn.addr !845
  call void @llvm.trap()
  unreachable
}

define i32 @function_1002ad1() local_unnamed_addr {
dec_label_pc_1002ad1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1002ad5(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002ad5:
  %ebp.0.reg2mem = alloca i32, !insn.addr !846
  %esp.0.reg2mem = alloca i32, !insn.addr !846
  %ebx.0.reg2mem = alloca i32, !insn.addr !846
  %eax.0.reg2mem = alloca i32, !insn.addr !846
  %.pre-phi2.reg2mem = alloca i32*, !insn.addr !846
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-290 = alloca i32, align 4
  %stack_var_7514 = alloca i32, align 4
  %stack_var_-287 = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %7 = load i32, i32* inttoptr (i32 26627389 to i32*), align 4, !insn.addr !846
  %8 = icmp sgt i32 %7, 27, !insn.addr !847
  br i1 %8, label %dec_label_pc_1002c71, label %dec_label_pc_1002ae3, !insn.addr !847

dec_label_pc_1002ae3:                             ; preds = %dec_label_pc_1002ad5
  %9 = add i32 %7, %5, !insn.addr !848
  %10 = inttoptr i32 %5 to i32*, !insn.addr !848
  store i32 %9, i32* %10, align 4, !insn.addr !848
  %11 = call i32 @unknown_22007bd1(i32 %1), !insn.addr !849
  %12 = call i32 @function_1005a26(), !insn.addr !850
  %13 = add i32 %5, -51, !insn.addr !851
  %14 = inttoptr i32 %13 to i32*, !insn.addr !851
  %15 = load i32, i32* %14, align 4, !insn.addr !851
  %16 = inttoptr i32 %15 to i32*, !insn.addr !852
  %17 = load i32, i32* %16, align 4, !insn.addr !852
  %18 = add i32 %17, %12, !insn.addr !852
  store i32 %18, i32* %16, align 4, !insn.addr !852
  %19 = load i32, i32* %16, align 4, !insn.addr !853
  %20 = add i32 %19, %12, !insn.addr !853
  store i32 %20, i32* %16, align 4, !insn.addr !853
  %21 = inttoptr i32 %12 to i32*, !insn.addr !854
  %22 = load i32, i32* %21, align 4, !insn.addr !854
  %23 = call i32 @unknown_f9007b5e(i32 %22), !insn.addr !855
  %24 = load i32, i32* inttoptr (i32 16857240 to i32*), align 8, !insn.addr !856
  %25 = add i32 %15, -123, !insn.addr !857
  %26 = inttoptr i32 %25 to i32*, !insn.addr !857
  %27 = load i32, i32* %26, align 4, !insn.addr !857
  %28 = add i32 %15, -873260919, !insn.addr !858
  %29 = inttoptr i32 %28 to i32*, !insn.addr !858
  %30 = load i32, i32* %29, align 4, !insn.addr !858
  %31 = add i32 %30, %4, !insn.addr !858
  store i32 %31, i32* %29, align 4, !insn.addr !858
  %32 = load i32, i32* %16, align 4, !insn.addr !859
  %33 = add i32 %32, %24, !insn.addr !859
  %34 = xor i32 %33, %32, !insn.addr !859
  %35 = xor i32 %33, %24, !insn.addr !859
  %36 = and i32 %34, %35, !insn.addr !859
  %37 = icmp slt i32 %36, 0, !insn.addr !859
  store i32 %33, i32* %16, align 4, !insn.addr !859
  br i1 %37, label %dec_label_pc_1002b30, label %dec_label_pc_1002b2c, !insn.addr !860

dec_label_pc_1002b2c:                             ; preds = %dec_label_pc_1002ae3
  ret i32 %24, !insn.addr !860

dec_label_pc_1002b30:                             ; preds = %dec_label_pc_1002ae3
  %38 = add i32 %27, -1, !insn.addr !861
  %39 = or i32 %3, 30961398, !insn.addr !862
  %40 = mul i32 %1, 4, !insn.addr !863
  %41 = add i32 %40, ptrtoint (i8** @global_var_1014c70 to i32), !insn.addr !863
  %42 = inttoptr i32 %41 to i32*, !insn.addr !863
  %43 = load i32, i32* %42, align 4, !insn.addr !863
  %44 = inttoptr i32 %43 to i32*, !insn.addr !864
  store i32 %39, i32* %44, align 4, !insn.addr !864
  %sext = mul i32 %39, 65536
  %45 = sdiv i32 %sext, 65536, !insn.addr !865
  store i32 %38, i32* %stack_var_-17, align 4, !insn.addr !866
  %46 = add i32 %43, 2130791780, !insn.addr !867
  %47 = inttoptr i32 %46 to i8*, !insn.addr !867
  %48 = load i8, i8* %47, align 1, !insn.addr !867
  %49 = and i8 %48, -117, !insn.addr !867
  store i8 %49, i8* %47, align 1, !insn.addr !867
  %50 = trunc i32 %45 to i8, !insn.addr !868
  %51 = add nsw i32 %45, 133, !insn.addr !868
  %52 = icmp ult i8 %50, -5, !insn.addr !868
  %53 = and i32 %51, 255, !insn.addr !868
  %54 = and i32 %45, -256, !insn.addr !868
  %55 = or i32 %53, %54, !insn.addr !868
  br i1 %52, label %dec_label_pc_1002b30.dec_label_pc_1002b9d_crit_edge, label %dec_label_pc_1002b51, !insn.addr !869

dec_label_pc_1002b30.dec_label_pc_1002b9d_crit_edge: ; preds = %dec_label_pc_1002b30
  %56 = mul i32 %5, 2, !insn.addr !870
  %57 = add i32 %56, ptrtoint (i8** @global_var_1014c70 to i32), !insn.addr !870
  %58 = inttoptr i32 %57 to i32*, !insn.addr !870
  %59 = mul i32 %15, 4, !insn.addr !871
  %60 = add i32 %2, 111, !insn.addr !871
  %61 = add i32 %60, %59, !insn.addr !871
  %62 = inttoptr i32 %61 to i32*, !insn.addr !871
  %63 = ptrtoint i32* %stack_var_-287 to i32, !insn.addr !866
  %64 = ptrtoint i32* %stack_var_-17 to i32, !insn.addr !866
  %.pre = add i32 %63, -4, !insn.addr !872
  %.pre1 = inttoptr i32 %.pre to i32*, !insn.addr !872
  store i32* %.pre1, i32** %.pre-phi2.reg2mem
  store i32 %55, i32* %eax.0.reg2mem
  store i32 %63, i32* %esp.0.reg2mem
  store i32 %64, i32* %ebp.0.reg2mem
  br label %dec_label_pc_1002b9d

dec_label_pc_1002b51:                             ; preds = %dec_label_pc_1002b30
  %65 = load i32, i32* %44, align 4, !insn.addr !873
  %66 = add i32 %65, %55, !insn.addr !873
  store i32 %66, i32* %44, align 4, !insn.addr !873
  %67 = call i32 @__asm_iretd(), !insn.addr !874
  %68 = add i32 %1, -1, !insn.addr !875
  %69 = add i32 %0, -117, !insn.addr !876
  %70 = inttoptr i32 %69 to i8*, !insn.addr !876
  %71 = load i8, i8* %70, align 1, !insn.addr !876
  %72 = trunc i32 %4 to i8, !insn.addr !876
  %73 = add i8 %71, %72, !insn.addr !876
  store i8 %73, i8* %70, align 1, !insn.addr !876
  %74 = add i32 %0, -1510800663, !insn.addr !877
  %75 = inttoptr i32 %74 to i32*, !insn.addr !877
  %76 = load i32, i32* %75, align 4, !insn.addr !877
  %77 = mul i32 %76, 2048, !insn.addr !877
  store i32 %77, i32* %75, align 4, !insn.addr !877
  %78 = ptrtoint i32* %stack_var_7514 to i32, !insn.addr !878
  %79 = add i32 %43, -1206301309, !insn.addr !879
  %80 = inttoptr i32 %79 to i32*, !insn.addr !879
  %81 = load i32, i32* %80, align 4, !insn.addr !879
  %82 = or i32 %81, %78, !insn.addr !879
  %83 = add i32 %68, %3, !insn.addr !880
  %84 = inttoptr i32 %83 to i32*, !insn.addr !880
  %85 = load i32, i32* %84, align 4, !insn.addr !880
  %86 = load i32, i32* %44, align 4, !insn.addr !881
  %87 = add i32 %86, %85, !insn.addr !881
  store i32 %87, i32* %44, align 4, !insn.addr !881
  %88 = ptrtoint i32* %stack_var_-290 to i32, !insn.addr !882
  %89 = add i32 %85, 232, !insn.addr !883
  %90 = and i32 %89, 255, !insn.addr !883
  %91 = and i32 %85, -256, !insn.addr !883
  %92 = or i32 %90, %91, !insn.addr !883
  %93 = add i32 %92, 1, !insn.addr !884
  %94 = add i32 %82, -4
  %95 = inttoptr i32 %94 to i32*
  store i32 %93, i32* %95, align 4, !insn.addr !885
  %96 = inttoptr i32 %93 to i8*, !insn.addr !886
  %97 = load i8, i8* %96, align 1, !insn.addr !886
  %98 = trunc i32 %93 to i8, !insn.addr !886
  %99 = add i8 %97, %98, !insn.addr !886
  store i8 %99, i8* %96, align 1, !insn.addr !886
  %100 = mul i32 %4, 4, !insn.addr !887
  %101 = add i32 %4, -1734278056, !insn.addr !887
  %102 = add i32 %101, %100, !insn.addr !887
  %103 = inttoptr i32 %102 to i32*, !insn.addr !887
  %104 = load i32, i32* %103, align 4, !insn.addr !887
  %105 = add i32 %104, %3, !insn.addr !887
  store i32 %105, i32* %103, align 4, !insn.addr !887
  %106 = load i32, i32* inttoptr (i32 20119670 to i32*), align 4, !insn.addr !888
  %107 = sub i32 %88, %106, !insn.addr !888
  %108 = load i32, i32* %95, align 4, !insn.addr !889
  store i32* %95, i32** %.pre-phi2.reg2mem, !insn.addr !889
  store i32 1909238031, i32* %eax.0.reg2mem, !insn.addr !889
  store i32 %108, i32* %ebx.0.reg2mem, !insn.addr !889
  store i32 %82, i32* %esp.0.reg2mem, !insn.addr !889
  store i32 %107, i32* %ebp.0.reg2mem, !insn.addr !889
  br label %dec_label_pc_1002b9d, !insn.addr !889

dec_label_pc_1002b9d:                             ; preds = %dec_label_pc_1002b30.dec_label_pc_1002b9d_crit_edge, %dec_label_pc_1002b51
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.pre-phi2.reload = load i32*, i32** %.pre-phi2.reg2mem
  store i32 %eax.0.reload, i32* %.pre-phi2.reload, align 4, !insn.addr !872
  %109 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !890
  %110 = load i8, i8* %109, align 1, !insn.addr !890
  %111 = trunc i32 %eax.0.reload to i8, !insn.addr !890
  %112 = add i8 %110, %111, !insn.addr !890
  store i8 %112, i8* %109, align 1, !insn.addr !890
  %113 = load i32, i32* @global_var_1014d22, align 4, !insn.addr !891
  %114 = inttoptr i32 %113 to i32*, !insn.addr !892
  %115 = load i32, i32* %114, align 4, !insn.addr !892
  %116 = add i32 %115, %eax.0.reload, !insn.addr !892
  %117 = icmp ult i32 %116, %115, !insn.addr !892
  store i32 %116, i32* %114, align 4, !insn.addr !892
  %118 = select i1 %6, i32 -4, i32 4, !insn.addr !893
  %119 = add nsw i32 %118, 76, !insn.addr !894
  %120 = add i32 %119, %eax.0.reload, !insn.addr !893
  %121 = add i32 %113, -95, !insn.addr !895
  %122 = inttoptr i32 %121 to i32*, !insn.addr !895
  %123 = load i32, i32* %122, align 4, !insn.addr !895
  %124 = select i1 %117, i32 -103, i32 -104, !insn.addr !895
  %125 = sub i32 %123, %124, !insn.addr !895
  store i32 %125, i32* %122, align 4, !insn.addr !895
  %126 = add i32 %ebx.0.reload, 1317733488, !insn.addr !896
  %127 = inttoptr i32 %126 to i32*, !insn.addr !896
  %128 = load i32, i32* %127, align 4, !insn.addr !896
  %129 = add i32 %128, %113, !insn.addr !896
  store i32 %129, i32* %127, align 4, !insn.addr !896
  %130 = load i8, i8* @global_var_1014d64, align 1, !insn.addr !897
  %131 = sext i8 %130 to i32, !insn.addr !897
  %132 = mul i32 %131, 4, !insn.addr !898
  %133 = add nsw i32 %132, -721307280, !insn.addr !898
  %134 = inttoptr i32 %133 to i32*, !insn.addr !898
  %135 = load i32, i32* %134, align 4, !insn.addr !898
  %136 = call i32 @__asm_vmread(i32 %135), !insn.addr !899
  %137 = mul i32 %113, 4, !insn.addr !899
  %138 = add i32 %137, 822540, !insn.addr !899
  %139 = inttoptr i32 %138 to i32*, !insn.addr !899
  store i32 %136, i32* %139, align 4, !insn.addr !899
  %140 = inttoptr i32 %135 to i8*, !insn.addr !900
  %141 = load i8, i8* %140, align 1, !insn.addr !900
  %142 = trunc i32 %135 to i8, !insn.addr !900
  %143 = add i8 %141, %142, !insn.addr !900
  store i8 %143, i8* %140, align 1, !insn.addr !900
  %144 = udiv i32 %113, 4, !insn.addr !901
  %145 = inttoptr i32 %120 to i8*, !insn.addr !902
  %146 = inttoptr i32 %0 to i8*, !insn.addr !902
  call void @__asm_rep_movsd_memcpy(i8* %146, i8* %145, i32 %144), !insn.addr !902
  %147 = mul i32 %144, %118, !insn.addr !902
  %148 = add i32 %147, %0, !insn.addr !902
  %149 = add i32 %ebx.0.reload, -1527514384, !insn.addr !903
  %150 = inttoptr i32 %149 to i32*, !insn.addr !903
  %151 = load i32, i32* %150, align 4, !insn.addr !903
  %152 = add i32 %151, -95, !insn.addr !903
  store i32 %152, i32* %150, align 4, !insn.addr !903
  %153 = add i32 %esp.0.reload, -8, !insn.addr !904
  %154 = add i32 %esp.0.reload, -12, !insn.addr !904
  %155 = add i32 %esp.0.reload, -16, !insn.addr !904
  %156 = add i32 %esp.0.reload, -20, !insn.addr !904
  %157 = add i32 %esp.0.reload, -24, !insn.addr !904
  %158 = add i32 %esp.0.reload, -28, !insn.addr !904
  %159 = add i32 %esp.0.reload, -32, !insn.addr !904
  store i32 %113, i32* %.pre-phi2.reload, align 4, !insn.addr !904
  %160 = inttoptr i32 %153 to i32*, !insn.addr !904
  store i32 0, i32* %160, align 4, !insn.addr !904
  %161 = inttoptr i32 %154 to i32*, !insn.addr !904
  store i32 %113, i32* %161, align 4, !insn.addr !904
  %162 = inttoptr i32 %155 to i32*, !insn.addr !904
  store i32 %ebx.0.reload, i32* %162, align 4, !insn.addr !904
  %163 = inttoptr i32 %156 to i32*, !insn.addr !904
  store i32 %esp.0.reload, i32* %163, align 4, !insn.addr !904
  %164 = inttoptr i32 %157 to i32*, !insn.addr !904
  store i32 %ebp.0.reload, i32* %164, align 4, !insn.addr !904
  %165 = inttoptr i32 %158 to i32*, !insn.addr !904
  store i32 %148, i32* %165, align 4, !insn.addr !904
  %166 = inttoptr i32 %159 to i32*, !insn.addr !904
  store i32 %148, i32* %166, align 4, !insn.addr !904
  %167 = icmp eq i32 %113, 0, !insn.addr !905
  %168 = icmp eq i1 %167, false, !insn.addr !906
  br i1 %168, label %dec_label_pc_1002c8f, label %dec_label_pc_1002c14, !insn.addr !906

dec_label_pc_1002c14:                             ; preds = %dec_label_pc_1002b9d
  %169 = call i32 @unknown_16945ef(), !insn.addr !907
  ret i32 %169, !insn.addr !908

dec_label_pc_1002c71:                             ; preds = %dec_label_pc_1002ad5
  %170 = inttoptr i32 %1 to i8*, !insn.addr !909
  %171 = inttoptr i32 %0 to i8*, !insn.addr !909
  call void @__asm_rep_movsd_memcpy(i8* %171, i8* %170, i32 %5), !insn.addr !909
  %172 = select i1 %6, i32 -4, i32 4, !insn.addr !909
  %173 = mul i32 %172, %5, !insn.addr !909
  %174 = add i32 %173, %0, !insn.addr !909
  %175 = inttoptr i32 %174 to i8*, !insn.addr !910
  call void @__asm_rep_movsb_memcpy(i8* %175, i8* %175, i32 0), !insn.addr !910
  unreachable

dec_label_pc_1002c8f:                             ; preds = %dec_label_pc_1002b9d
  %176 = load i32, i32* inttoptr (i32 11057658 to i32*), align 4, !insn.addr !911
  %177 = add i32 %176, %113, !insn.addr !911
  store i32 %177, i32* inttoptr (i32 11057658 to i32*), align 4, !insn.addr !911
  %178 = add i32 %113, 96, !insn.addr !912
  %179 = inttoptr i32 %178 to i32*, !insn.addr !912
  store i32 %ebx.0.reload, i32* %179, align 4, !insn.addr !912
  %180 = load i32, i32* inttoptr (i32 19352976 to i32*), align 16, !insn.addr !913
  %181 = add i32 %180, 4, !insn.addr !914
  %182 = inttoptr i32 %181 to i32*, !insn.addr !914
  %183 = load i32, i32* %182, align 4, !insn.addr !914
  ret i32 %183, !insn.addr !914
}

define i32 @function_1002c9d(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1002c9d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = trunc i32 %3 to i8
  %6 = mul i8 %5, 2, !insn.addr !915
  %7 = icmp ult i8 %6, %5, !insn.addr !915
  %8 = icmp slt i8 %6, 0, !insn.addr !915
  %9 = inttoptr i32 %3 to i8*, !insn.addr !915
  store i8 %6, i8* %9, align 1, !insn.addr !915
  %10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([17 x i8]* @3 to i32), i32 -85) to i32*), align 4, !insn.addr !916
  %11 = add i32 %1, 4, !insn.addr !917
  %12 = inttoptr i32 %11 to i32*, !insn.addr !917
  %13 = load i32, i32* %12, align 4, !insn.addr !917
  %14 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([17 x i8]* @3 to i32), i32 -1962868310) to i32*), align 4, !insn.addr !918
  %15 = zext i1 %7 to i32, !insn.addr !918
  %16 = udiv i32 %14, 2, !insn.addr !918
  %17 = shl nuw i32 %15, 31, !insn.addr !918
  %18 = or i32 %16, %17, !insn.addr !918
  store i32 %18, i32* inttoptr (i32 add (i32 ptrtoint ([17 x i8]* @3 to i32), i32 -1962868310) to i32*), align 4, !insn.addr !918
  br i1 %8, label %dec_label_pc_1002cc4, label %dec_label_pc_1002cc0, !insn.addr !919

dec_label_pc_1002cc0:                             ; preds = %dec_label_pc_1002c9d
  ret i32 or (i32 ptrtoint ([17 x i8]* @3 to i32), i32 162), !insn.addr !920

dec_label_pc_1002cc4:                             ; preds = %dec_label_pc_1002c9d
  store i8 add (i8 ptrtoint ([17 x i8]* @3 to i8), i8 -127), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i32 0, i32 0), align 16, !insn.addr !921
  %19 = add i32 %2, 46383553, !insn.addr !922
  %20 = inttoptr i32 %19 to i8*, !insn.addr !922
  %21 = load i8, i8* %20, align 1, !insn.addr !922
  %22 = trunc i32 %13 to i8, !insn.addr !922
  %23 = add i8 %21, %22, !insn.addr !922
  %24 = icmp ult i8 %23, %21, !insn.addr !922
  %25 = icmp eq i8 %23, 0, !insn.addr !922
  store i8 %23, i8* %20, align 1, !insn.addr !922
  %26 = or i1 %24, %25, !insn.addr !923
  br i1 %26, label %dec_label_pc_1002cce, label %dec_label_pc_1002d33, !insn.addr !923

dec_label_pc_1002cce:                             ; preds = %dec_label_pc_1002cc4
  %27 = add i32 %1, -111, !insn.addr !924
  %28 = inttoptr i32 %27 to i32*, !insn.addr !924
  %29 = add i32 %10, %2, !insn.addr !925
  %30 = inttoptr i32 %29 to i8*, !insn.addr !926
  %31 = load i8, i8* %30, align 1, !insn.addr !926
  %32 = inttoptr i32 %0 to i8*, !insn.addr !926
  store i8 %31, i8* %32, align 1, !insn.addr !926
  %33 = load i32, i32* @global_var_1014490, align 4, !insn.addr !927
  %34 = call i32 @function_1007b4d(i32 %33), !insn.addr !928
  %35 = trunc i32 %2 to i8, !insn.addr !929
  store i8 %35, i8* @global_var_1014dca, align 1, !insn.addr !929
  %36 = call i32 @function_1006b26(), !insn.addr !930
  store i32 %36, i32* inttoptr (i32 -2130621040 to i32*), align 16, !insn.addr !931
  %37 = call i32 @__asm_sti(), !insn.addr !932
  %38 = xor i32 %37, and (i32 lshr (i32 ptrtoint ([17 x i8]* @3 to i32), i32 8), i32 255), !insn.addr !933
  ret i32 %38, !insn.addr !934

dec_label_pc_1002d33:                             ; preds = %dec_label_pc_1002cc4
  %39 = inttoptr i32 %10 to i32*, !insn.addr !935
  %40 = load i32, i32* %39, align 4, !insn.addr !935
  %41 = inttoptr i32 %0 to i32*, !insn.addr !935
  store i32 %40, i32* %41, align 4, !insn.addr !935
  %42 = select i1 %4, i32 -4, i32 4, !insn.addr !935
  %43 = add i32 %42, %0, !insn.addr !935
  %44 = add i32 %10, %42, !insn.addr !935
  %45 = inttoptr i32 %44 to i8*, !insn.addr !936
  %46 = inttoptr i32 %43 to i8*, !insn.addr !936
  call void @__asm_rep_movsb_memcpy(i8* %46, i8* %45, i32 %13), !insn.addr !936
  call void @llvm.trap()
  unreachable
}

define i32 @function_1002daa(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002daa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_6()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %2, 1091526910, !insn.addr !937
  %8 = inttoptr i32 %7 to i8*, !insn.addr !937
  %9 = load i8, i8* %8, align 1, !insn.addr !937
  %10 = trunc i32 %4 to i8, !insn.addr !937
  %11 = add i8 %9, %10, !insn.addr !937
  store i8 %11, i8* %8, align 1, !insn.addr !937
  %12 = add i32 %1, -24969216, !insn.addr !938
  %13 = inttoptr i32 %12 to i32*, !insn.addr !938
  %14 = load i32, i32* %13, align 4, !insn.addr !938
  %15 = add i32 %14, 109, !insn.addr !938
  %16 = xor i32 %14, -2147483648
  %17 = and i32 %15, %16, !insn.addr !938
  %18 = icmp slt i32 %17, 0, !insn.addr !938
  %19 = icmp slt i32 %15, 0, !insn.addr !938
  store i32 %15, i32* %13, align 4, !insn.addr !938
  %20 = icmp eq i1 %19, %18, !insn.addr !939
  %21 = add i32 %3, 1, !insn.addr !939
  %22 = inttoptr i32 %21 to i32*, !insn.addr !939
  %23 = load i32, i32* %22, align 4, !insn.addr !939
  %24 = select i1 %20, i32 %0, i32 %23, !insn.addr !939
  %25 = bitcast i32* %eax to i8*
  %26 = load i8, i8* %25, align 4, !insn.addr !940
  %27 = load i32, i32* %eax, align 4
  %28 = trunc i32 %27 to i8, !insn.addr !940
  %29 = add i8 %26, %28, !insn.addr !940
  %30 = inttoptr i32 %27 to i8*, !insn.addr !940
  store i8 %29, i8* %30, align 1, !insn.addr !940
  %31 = trunc i32 %3 to i16, !insn.addr !941
  %32 = call i32 @__asm_insd(i16 %31), !insn.addr !941
  %33 = inttoptr i32 %24 to i32*, !insn.addr !941
  store i32 %32, i32* %33, align 4, !insn.addr !941
  %34 = call i32 @unknown_84012f11(), !insn.addr !942
  %35 = call i32 @llvm.bswap.i32(i32 %34), !insn.addr !943
  %36 = icmp sgt i32 %35, 95, !insn.addr !944
  br i1 %36, label %37, label %dec_label_pc_1002dd4, !insn.addr !944

; <label>:37:                                     ; preds = %dec_label_pc_1002daa
  %38 = call i32 @function_132ce93(), !insn.addr !944
  br label %dec_label_pc_1002dd4, !insn.addr !944

dec_label_pc_1002dd4:                             ; preds = %37, %dec_label_pc_1002daa
  %39 = call i32 @function_1007bd1(), !insn.addr !945
  store i32 %39, i32* @global_var_1014d90, align 4, !insn.addr !946
  %40 = inttoptr i32 %39 to i32*, !insn.addr !947
  %41 = load i32, i32* %40, align 4, !insn.addr !947
  %42 = call i32 @unknown_13c7b21(i32 %41), !insn.addr !948
  %43 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !949
  %44 = load i32, i32* inttoptr (i32 16904344 to i32*), align 8, !insn.addr !950
  %45 = inttoptr i32 %44 to i32*, !insn.addr !951
  %46 = load i32, i32* %45, align 4, !insn.addr !951
  %47 = add i32 %46, 4, !insn.addr !952
  %48 = inttoptr i32 %47 to i32*, !insn.addr !952
  %49 = load i32, i32* %48, align 4, !insn.addr !952
  %50 = call i32 @function_10042e3(i32 %49), !insn.addr !953
  %51 = load i32, i32* inttoptr (i32 22039869 to i32*), align 4, !insn.addr !954
  %52 = inttoptr i32 %51 to i32*, !insn.addr !955
  store i32 %50, i32* %52, align 4, !insn.addr !955
  %53 = load i8*, i8** @global_var_1014d98, align 4, !insn.addr !956
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4, !insn.addr !957
  %56 = add i32 %55, 4, !insn.addr !958
  %57 = inttoptr i32 %56 to i32*, !insn.addr !958
  %58 = load i32, i32* %57, align 4, !insn.addr !958
  %59 = mul i32 %58, 4, !insn.addr !959
  %60 = add i32 %59, 15174924, !insn.addr !959
  %61 = inttoptr i32 %60 to i32*, !insn.addr !959
  %62 = load i32, i32* %61, align 4, !insn.addr !959
  %63 = and i32 %2, 65280, !insn.addr !960
  %64 = add i32 %63, %2
  %65 = and i32 %64, 65280, !insn.addr !960
  %66 = and i32 %2, -65281, !insn.addr !960
  %67 = or i32 %65, %66, !insn.addr !960
  %68 = mul i32 %2, 256
  %69 = add i32 %3, %68
  %70 = and i32 %69, 65280, !insn.addr !961
  %71 = and i32 %3, -65281, !insn.addr !961
  %72 = or i32 %70, %71, !insn.addr !961
  %73 = inttoptr i32 %55 to i32*, !insn.addr !962
  %74 = load i32, i32* %73, align 4, !insn.addr !962
  store i32 %74, i32* %33, align 4, !insn.addr !962
  %75 = select i1 %6, i32 -4, i32 4, !insn.addr !962
  %76 = add i32 %24, %75, !insn.addr !962
  %77 = add i32 %55, %75, !insn.addr !962
  %78 = and i32 %62, 3, !insn.addr !963
  %79 = inttoptr i32 %77 to i8*, !insn.addr !964
  %80 = inttoptr i32 %76 to i8*, !insn.addr !964
  call void @__asm_rep_movsb_memcpy(i8* %80, i8* %79, i32 %78), !insn.addr !964
  %81 = load i8*, i8** @global_var_101d390, align 4, !insn.addr !965
  %82 = ptrtoint i8* %81 to i32, !insn.addr !965
  %83 = fptosi x86_fp80 %5 to i64, !insn.addr !966
  %84 = add i32 %72, 77, !insn.addr !966
  %85 = inttoptr i32 %84 to i64*, !insn.addr !966
  store i64 %83, i64* %85, align 4, !insn.addr !966
  %86 = load i8, i8* %81, align 1, !insn.addr !967
  %87 = trunc i32 %82 to i8, !insn.addr !967
  %88 = add i8 %86, %87, !insn.addr !967
  %89 = xor i8 %88, %86, !insn.addr !967
  %90 = xor i8 %88, %87, !insn.addr !967
  %91 = and i8 %89, %90, !insn.addr !967
  %92 = icmp slt i8 %91, 0, !insn.addr !967
  store i8 %88, i8* %81, align 1, !insn.addr !967
  %93 = load i32, i32* inttoptr (i32 1197165968 to i32*), align 16, !insn.addr !968
  %94 = add i32 %93, 22, !insn.addr !969
  %95 = inttoptr i32 %94 to i32*, !insn.addr !969
  store i32 %67, i32* %95, align 4, !insn.addr !969
  %96 = load i32, i32* inttoptr (i32 -922632613 to i32*), align 4, !insn.addr !970
  %97 = add i32 %96, 4, !insn.addr !971
  %98 = inttoptr i32 %97 to i32*, !insn.addr !971
  %99 = load i32, i32* %98, align 4, !insn.addr !971
  store i32 %99, i32* %eax, align 4, !insn.addr !971
  br i1 %92, label %dec_label_pc_1002e5e, label %dec_label_pc_1002e5a, !insn.addr !972

dec_label_pc_1002e5a:                             ; preds = %dec_label_pc_1002dd4
  ret i32 %99, !insn.addr !972

dec_label_pc_1002e5e:                             ; preds = %dec_label_pc_1002dd4
  %100 = inttoptr i32 %43 to i32*, !insn.addr !973
  %101 = inttoptr i32 %99 to i8*, !insn.addr !974
  %102 = load i8, i8* %101, align 1, !insn.addr !974
  %103 = udiv i32 %64, 256, !insn.addr !974
  %104 = trunc i32 %103 to i8, !insn.addr !974
  %105 = add i8 %102, %104, !insn.addr !974
  store i8 %105, i8* %101, align 1, !insn.addr !974
  call void @llvm.trap()
  unreachable
}

define i32 @function_10031f5(i32 %arg1) local_unnamed_addr {
dec_label_pc_10031f5:
  %0 = call i32 @__asm_sti(), !insn.addr !975
  ret i32 %0, !insn.addr !976
}

define i32 @function_100322d() local_unnamed_addr {
dec_label_pc_100322d:
  %0 = call i32 @function_8143408b(), !insn.addr !977
  ret i32 %0, !insn.addr !977
}

define i32 @function_1003232() local_unnamed_addr {
dec_label_pc_1003232:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1003235() local_unnamed_addr {
dec_label_pc_1003235:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = trunc i32 %1 to i8
  %4 = add i8 %2, 17, !insn.addr !978
  %5 = add i8 %4, %3, !insn.addr !978
  %6 = inttoptr i32 %0 to i8*, !insn.addr !978
  store i8 %5, i8* %6, align 1, !insn.addr !978
  %7 = call i32 @function_900042e5(), !insn.addr !979
  ret i32 %7, !insn.addr !979
}

define i32 @function_100323e() local_unnamed_addr {
dec_label_pc_100323e:
  %eax.1.reg2mem = alloca i32, !insn.addr !980
  %eax.0.reg2mem = alloca i32, !insn.addr !980
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = trunc i32 %3 to i16, !insn.addr !980
  %8 = call i32 @__asm_in.5(i16 %7), !insn.addr !980
  %9 = trunc i32 %8 to i8, !insn.addr !981
  call void @__asm_out(i16 %7, i8 %9), !insn.addr !981
  %10 = trunc i32 %1 to i8
  call void @__asm_outsb(i16 %7, i8 %10), !insn.addr !982
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !983
  br i1 %5, label %11, label %dec_label_pc_1003247, !insn.addr !983

; <label>:11:                                     ; preds = %dec_label_pc_100323e
  %12 = call i32 @function_100397b(), !insn.addr !983
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !983
  br label %dec_label_pc_1003247, !insn.addr !983

dec_label_pc_1003247:                             ; preds = %11, %dec_label_pc_100323e
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %13 = select i1 %6, i32 133, i32 132, !insn.addr !984
  %14 = sub i32 %eax.0.reload, %13, !insn.addr !984
  %15 = and i32 %14, 255, !insn.addr !984
  %16 = and i32 %eax.0.reload, -256, !insn.addr !984
  %17 = or i32 %15, %16, !insn.addr !984
  %18 = inttoptr i32 %17 to i8*, !insn.addr !985
  %19 = load i8, i8* %18, align 1, !insn.addr !985
  %20 = trunc i32 %14 to i8, !insn.addr !985
  %21 = add i8 %19, %20, !insn.addr !985
  store i8 %21, i8* %18, align 1, !insn.addr !985
  %22 = add i32 %1, 14, !insn.addr !986
  %23 = inttoptr i32 %22 to i8*, !insn.addr !986
  %24 = load i8, i8* %23, align 1, !insn.addr !986
  %25 = trunc i32 %4 to i8, !insn.addr !986
  %26 = add i8 %24, %25, !insn.addr !986
  store i8 %26, i8* %23, align 1, !insn.addr !986
  %27 = load i8, i8* %18, align 1, !insn.addr !987
  %28 = add i8 %27, %20, !insn.addr !987
  store i8 %28, i8* %18, align 1, !insn.addr !987
  %29 = icmp eq i32 %17, -335438700, !insn.addr !988
  %30 = call i32 @function_10093c3(i32 %0), !insn.addr !989
  %31 = call i32 @function_1003826(), !insn.addr !990
  store i32 %31, i32* @global_var_1014da6, align 4, !insn.addr !991
  store i32 %31, i32* %eax.1.reg2mem, !insn.addr !992
  br i1 %29, label %dec_label_pc_1003279, label %dec_label_pc_10032a9, !insn.addr !992

dec_label_pc_1003279:                             ; preds = %dec_label_pc_1003247
  %32 = add i32 %1, -2, !insn.addr !993
  %33 = call i32 @unknown_1e50bc1(), !insn.addr !994
  %34 = add i32 %0, -95, !insn.addr !995
  %35 = inttoptr i32 %34 to i32*, !insn.addr !995
  store i32 %32, i32* %35, align 4, !insn.addr !995
  %36 = add i32 %2, 74514176, !insn.addr !996
  %37 = inttoptr i32 %36 to i32*, !insn.addr !996
  %38 = load i32, i32* %37, align 4, !insn.addr !996
  %39 = add i32 %38, %4, !insn.addr !996
  store i32 %39, i32* %37, align 4, !insn.addr !996
  %40 = call i32 @unknown_1fb7bb7(), !insn.addr !997
  %41 = load i32, i32* inttoptr (i32 23317140 to i32*), align 4, !insn.addr !998
  %42 = inttoptr i32 %41 to i32*, !insn.addr !999
  store i32 %40, i32* %42, align 4, !insn.addr !999
  br label %dec_label_pc_10032a9, !insn.addr !1000

dec_label_pc_10032a9:                             ; preds = %dec_label_pc_1003247, %dec_label_pc_1003279
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !1001
}

define i32 @function_10032aa() local_unnamed_addr {
dec_label_pc_10032aa:
  %storemerge.reg2mem = alloca i32, !insn.addr !1002
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_6()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = add i32 %2, -1928557066, !insn.addr !1002
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1002
  %10 = load i32, i32* %9, align 4, !insn.addr !1002
  %11 = add i32 %10, %3, !insn.addr !1002
  %12 = and i32 %10, 15, !insn.addr !1002
  %13 = and i32 %3, 15, !insn.addr !1002
  %14 = add nuw nsw i32 %12, %13, !insn.addr !1002
  %15 = icmp ugt i32 %14, 15, !insn.addr !1002
  %16 = icmp ult i32 %11, %10, !insn.addr !1002
  store i32 %11, i32* %9, align 4, !insn.addr !1002
  %17 = trunc i32 %4 to i8, !insn.addr !1003
  %18 = and i8 %17, 14, !insn.addr !1003
  %19 = icmp ugt i8 %18, 9, !insn.addr !1003
  %20 = or i1 %19, %15, !insn.addr !1003
  %21 = icmp ugt i8 %17, -103
  %22 = or i1 %21, %16
  br i1 %20, label %23, label %28, !insn.addr !1003

; <label>:23:                                     ; preds = %dec_label_pc_10032aa
  %.v = select i1 %22, i32 102, i32 6
  %24 = add i32 %.v, %4, !insn.addr !1003
  %25 = and i32 %24, 255, !insn.addr !1003
  %26 = and i32 %4, -256, !insn.addr !1003
  %27 = or i32 %25, %26, !insn.addr !1003
  store i32 %27, i32* %storemerge.reg2mem, !insn.addr !1003
  br label %34, !insn.addr !1003

; <label>:28:                                     ; preds = %dec_label_pc_10032aa
  %29 = add i32 %4, 96, !insn.addr !1003
  %30 = select i1 %22, i32 %29, i32 %4, !insn.addr !1003
  %31 = and i32 %30, 255, !insn.addr !1003
  %32 = and i32 %4, -256, !insn.addr !1003
  %33 = or i32 %31, %32, !insn.addr !1003
  store i32 %33, i32* %storemerge.reg2mem, !insn.addr !1003
  br label %34, !insn.addr !1003

; <label>:34:                                     ; preds = %23, %28
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %35 = inttoptr i32 %storemerge.reload to i8*, !insn.addr !1004
  %36 = load i8, i8* %35, align 1, !insn.addr !1004
  %37 = trunc i32 %storemerge.reload to i8, !insn.addr !1004
  %38 = add i8 %36, %37, !insn.addr !1004
  store i8 %38, i8* %35, align 1, !insn.addr !1004
  %39 = add i32 %2, -63, !insn.addr !1005
  %40 = inttoptr i32 %39 to i8*, !insn.addr !1005
  %41 = load i8, i8* %40, align 1, !insn.addr !1005
  %42 = udiv i32 %storemerge.reload, 256, !insn.addr !1005
  %43 = trunc i32 %42 to i8, !insn.addr !1005
  %44 = add i8 %41, %43, !insn.addr !1005
  store i8 %44, i8* %40, align 1, !insn.addr !1005
  %45 = udiv i32 %3, 4, !insn.addr !1006
  %46 = and i32 %3, 2, !insn.addr !1006
  %47 = icmp eq i32 %46, 0, !insn.addr !1006
  %48 = inttoptr i32 %1 to i8*, !insn.addr !1007
  %49 = inttoptr i32 %0 to i8*, !insn.addr !1007
  call void @__asm_rep_movsd_memcpy(i8* %49, i8* %48, i32 %45), !insn.addr !1007
  %50 = add i32 %storemerge.reload, -1811684989, !insn.addr !1008
  %51 = inttoptr i32 %50 to i32*, !insn.addr !1008
  %52 = load i32, i32* %51, align 4, !insn.addr !1008
  %53 = add i32 %2, 1, !insn.addr !1009
  %54 = call i32 @unknown_5c7d7bcc(), !insn.addr !1010
  %55 = load i32, i32* @global_var_1014d94, align 4, !insn.addr !1011
  %56 = inttoptr i32 %52 to i32*, !insn.addr !1012
  %57 = load i32, i32* %56, align 4, !insn.addr !1012
  store i32 %55, i32* %56, align 4, !insn.addr !1012
  br i1 %47, label %dec_label_pc_10032de, label %dec_label_pc_100335c, !insn.addr !1013

dec_label_pc_10032de:                             ; preds = %34
  %58 = trunc i32 %57 to i8, !insn.addr !1014
  %59 = add i8 %58, -1, !insn.addr !1014
  %60 = xor i8 %59, %58, !insn.addr !1014
  %61 = sub i8 0, %58, !insn.addr !1014
  %62 = and i8 %60, %61, !insn.addr !1014
  %63 = icmp slt i8 %62, 0, !insn.addr !1014
  %64 = zext i8 %59 to i32, !insn.addr !1014
  %65 = and i32 %57, -256, !insn.addr !1014
  br i1 %63, label %dec_label_pc_10032e6, label %dec_label_pc_10032e2, !insn.addr !1015

dec_label_pc_10032e2:                             ; preds = %dec_label_pc_10032de
  %66 = icmp ne i8 %58, 0, !insn.addr !1014
  %67 = zext i1 %66 to i32, !insn.addr !1016
  %68 = add nuw nsw i32 %64, 73, !insn.addr !1016
  %69 = add nuw nsw i32 %68, %67, !insn.addr !1016
  %70 = and i32 %69, 255, !insn.addr !1016
  %71 = or i32 %70, %65, !insn.addr !1016
  ret i32 %71, !insn.addr !1016

dec_label_pc_10032e6:                             ; preds = %dec_label_pc_10032de
  %72 = select i1 %7, i32 -4, i32 4, !insn.addr !1007
  %73 = mul i32 %72, %45, !insn.addr !1007
  %74 = select i1 %7, i32 -1, i32 1, !insn.addr !1017
  %75 = add i32 %74, %0, !insn.addr !1007
  %76 = add i32 %75, %73, !insn.addr !1017
  %77 = add i32 %76, 1334092085, !insn.addr !1018
  %78 = inttoptr i32 %77 to i32*, !insn.addr !1018
  %79 = or i32 %65, %64, !insn.addr !1014
  %80 = add i32 %2, -498232306, !insn.addr !1019
  %81 = inttoptr i32 %80 to i8*, !insn.addr !1019
  %82 = load i8, i8* %81, align 1, !insn.addr !1019
  %83 = trunc i32 %52 to i8, !insn.addr !1019
  %84 = add i8 %82, %83, !insn.addr !1019
  store i8 %84, i8* %81, align 1, !insn.addr !1019
  %85 = add i32 %52, -2069796031, !insn.addr !1020
  %86 = inttoptr i32 %85 to i32*, !insn.addr !1020
  %87 = load i32, i32* %86, align 4, !insn.addr !1020
  %88 = add i32 %87, %52, !insn.addr !1020
  store i32 %88, i32* %86, align 4, !insn.addr !1020
  %89 = add i32 %76, -1, !insn.addr !1021
  %90 = load i32, i32* %56, align 4, !insn.addr !1022
  %91 = add i32 %90, %79, !insn.addr !1022
  store i32 %91, i32* %56, align 4, !insn.addr !1022
  %92 = add i32 %79, 4, !insn.addr !1023
  %93 = inttoptr i32 %92 to i32*, !insn.addr !1023
  %94 = load i32, i32* %93, align 4, !insn.addr !1023
  %95 = load i8, i8* @global_var_1014dca, align 1, !insn.addr !1024
  %96 = sext i8 %95 to i32, !insn.addr !1024
  %97 = fptrunc x86_fp80 %5 to float, !insn.addr !1025
  %98 = inttoptr i32 %53 to float*, !insn.addr !1025
  store float %97, float* %98, align 4, !insn.addr !1025
  %99 = add i8 %95, 13, !insn.addr !1026
  %100 = and i32 %96, -256, !insn.addr !1026
  %101 = or i8 %99, -115, !insn.addr !1027
  %102 = zext i8 %101 to i32, !insn.addr !1027
  %103 = or i32 %100, %102, !insn.addr !1028
  %104 = inttoptr i32 %103 to i8*, !insn.addr !1029
  %105 = load i8, i8* %104, align 1, !insn.addr !1029
  %106 = add i8 %105, %101, !insn.addr !1029
  store i8 %106, i8* %104, align 1, !insn.addr !1029
  %107 = inttoptr i32 %94 to i32*, !insn.addr !1030
  %108 = load i32, i32* %107, align 4, !insn.addr !1030
  %109 = inttoptr i32 %89 to i32*, !insn.addr !1030
  store i32 %108, i32* %109, align 4, !insn.addr !1030
  %110 = add i32 %89, %72, !insn.addr !1030
  %111 = add i32 %94, %72, !insn.addr !1030
  %112 = and i32 %103, -96, !insn.addr !1031
  %113 = inttoptr i32 %111 to i8*, !insn.addr !1032
  %114 = inttoptr i32 %110 to i8*, !insn.addr !1032
  call void @__asm_rep_movsb_memcpy(i8* %114, i8* %113, i32 %112), !insn.addr !1032
  %115 = load i32, i32* @global_var_1014c94, align 4, !insn.addr !1033
  %116 = call i32 @function_100bd61(i32 %115), !insn.addr !1034
  %117 = load i32, i32* inttoptr (i32 -1423034515 to i32*), align 4, !insn.addr !1035
  %118 = call i32 @unknown_d8000000(i32 %117, i32 402653585, i32 ptrtoint (i32* @global_var_1001264 to i32), i16 %6), !insn.addr !1036
  %119 = call i32 @function_10042e5(), !insn.addr !1037
  ret i32 %119, !insn.addr !1037

dec_label_pc_100335c:                             ; preds = %34
  %120 = inttoptr i32 %52 to i8*, !insn.addr !1038
  %121 = load i8, i8* %120, align 1, !insn.addr !1038
  %122 = trunc i32 %53 to i8, !insn.addr !1038
  %123 = add i8 %121, %122, !insn.addr !1038
  store i8 %123, i8* %120, align 1, !insn.addr !1038
  %124 = call i32 @function_1007bd1(), !insn.addr !1039
  store i32 %124, i32* inttoptr (i32 21860435 to i32*), align 4, !insn.addr !1040
  %125 = and i32 %124, 4764136, !insn.addr !1041
  %126 = add i32 %2, -1375646319, !insn.addr !1042
  %127 = inttoptr i32 %126 to i8*, !insn.addr !1042
  %128 = load i8, i8* %127, align 1, !insn.addr !1042
  %129 = udiv i32 %125, 256, !insn.addr !1042
  %130 = trunc i32 %129 to i8, !insn.addr !1042
  %131 = add i8 %128, %130, !insn.addr !1042
  store i8 %131, i8* %127, align 1, !insn.addr !1042
  %132 = inttoptr i32 %125 to i32*, !insn.addr !1043
  %133 = load i32, i32* %132, align 8, !insn.addr !1043
  %134 = call i32 @unknown_12661c1(i32 %133), !insn.addr !1044
  %135 = load i32, i32* inttoptr (i32 16908176 to i32*), align 16, !insn.addr !1045
  %136 = inttoptr i32 %135 to i32*, !insn.addr !1046
  store i32 %53, i32* %136, align 4, !insn.addr !1046
  %137 = load i32, i32* inttoptr (i32 16847256 to i32*), align 8, !insn.addr !1047
  ret i32 %137, !insn.addr !1048
}

define i32 @function_10033ba() local_unnamed_addr {
dec_label_pc_10033ba:
  %0 = call i32 @function_8ca60ec1(), !insn.addr !1049
  ret i32 %0, !insn.addr !1049
}

define i32 @function_10033ed() local_unnamed_addr {
dec_label_pc_10033ed:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1050
}

define i32 @function_10033fb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10033fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, 4, !insn.addr !1051
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1051
  %6 = load i32, i32* %5, align 4, !insn.addr !1051
  %7 = add i32 %1, -7498120, !insn.addr !1052
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1052
  %9 = load i32, i32* %8, align 4, !insn.addr !1052
  %10 = add i32 %9, %6, !insn.addr !1052
  store i32 %10, i32* %8, align 4, !insn.addr !1052
  %11 = add i32 %1, -1, !insn.addr !1053
  %12 = and i32 %2, 3, !insn.addr !1054
  %13 = inttoptr i32 %0 to i8*, !insn.addr !1055
  %14 = inttoptr i32 %arg1 to i8*, !insn.addr !1055
  call void @__asm_rep_movsb_memcpy(i8* %14, i8* %13, i32 %12), !insn.addr !1055
  %15 = load i32, i32* inttoptr (i32 -1421193888 to i32*), align 32, !insn.addr !1056
  %16 = icmp eq i32 %15, %11, !insn.addr !1056
  br i1 %16, label %17, label %dec_label_pc_1003427, !insn.addr !1057

; <label>:17:                                     ; preds = %dec_label_pc_10033fb
  %18 = inttoptr i32 %3 to i16*, !insn.addr !1058
  %19 = call i32 @function_1003671(), !insn.addr !1057
  br label %dec_label_pc_1003427, !insn.addr !1057

dec_label_pc_1003427:                             ; preds = %17, %dec_label_pc_10033fb
  %20 = mul nsw i32 %12, -1, !insn.addr !1055
  %21 = add i32 %20, %arg1, !insn.addr !1055
  %22 = call i32 @__asm_emms(), !insn.addr !1059
  %23 = inttoptr i32 %21 to i8*, !insn.addr !1060
  %24 = load i8, i8* %23, align 1, !insn.addr !1060
  %25 = trunc i32 %21 to i8, !insn.addr !1060
  %26 = add i8 %24, %25, !insn.addr !1060
  store i8 %26, i8* %23, align 1, !insn.addr !1060
  %27 = call i32 @function_1007bd1(), !insn.addr !1061
  %28 = and i32 %27, 21950493, !insn.addr !1062
  ret i32 %28, !insn.addr !1063
}

define i32 @function_1003447() local_unnamed_addr {
dec_label_pc_1003447:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1003465() local_unnamed_addr {
dec_label_pc_1003465:
  %0 = call i32 @function_1003447(), !insn.addr !1064
  ret i32 %0, !insn.addr !1064
}

define i32 @function_1003469() local_unnamed_addr {
dec_label_pc_1003469:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1065
}

define i32 @function_100347c() local_unnamed_addr {
dec_label_pc_100347c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !1066
  %4 = inttoptr i32 %1 to i8*, !insn.addr !1066
  store i8 %3, i8* %4, align 1, !insn.addr !1066
  %5 = add i32 %0, -1044280328, !insn.addr !1067
  %6 = inttoptr i32 %5 to i8*, !insn.addr !1067
  %7 = load i8, i8* %6, align 1, !insn.addr !1067
  %8 = add i8 %7, -115, !insn.addr !1067
  store i8 %8, i8* %6, align 1, !insn.addr !1067
  %9 = call i32 @function_52a62791(), !insn.addr !1068
  ret i32 %9, !insn.addr !1068
}

define i32 @entry_point() local_unnamed_addr {
dec_label_pc_10034ba:
  %0 = call i32 @__asm_wait(), !insn.addr !1069
  %1 = call i32 @__asm_wait(), !insn.addr !1070
  %2 = call i32 @__asm_wait(), !insn.addr !1071
  %3 = call i32 @__asm_wait(), !insn.addr !1072
  %4 = call i32 @__asm_wait(), !insn.addr !1073
  %5 = call i32 @__asm_wait(), !insn.addr !1074
  %6 = call i32 @__asm_wait(), !insn.addr !1075
  %7 = call i32 @function_1003e19(), !insn.addr !1076
  ret i32 %7, !insn.addr !1076
}

define i32 @function_1003543() local_unnamed_addr {
dec_label_pc_1003543:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = sub i32 0, %1
  %7 = and i32 %1, %6, !insn.addr !1077
  %8 = icmp slt i32 %7, 0, !insn.addr !1077
  br i1 %8, label %dec_label_pc_10035b3, label %dec_label_pc_1003554, !insn.addr !1078

dec_label_pc_1003554:                             ; preds = %dec_label_pc_1003543
  %9 = call i32 @unknown_58007b71(), !insn.addr !1079
  %10 = add i32 %9, 4, !insn.addr !1080
  %11 = inttoptr i32 %10 to i32*, !insn.addr !1080
  %12 = load i32, i32* @global_var_1014ef0, align 4, !insn.addr !1081
  %13 = add i32 %12, 4, !insn.addr !1082
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1082
  %15 = load i32, i32* %14, align 4, !insn.addr !1082
  %16 = load i32, i32* inttoptr (i32 -269595248 to i32*), align 16, !insn.addr !1083
  %17 = add i32 %16, 4, !insn.addr !1084
  %18 = inttoptr i32 %17 to i32*, !insn.addr !1084
  %19 = load i32, i32* %18, align 4, !insn.addr !1084
  %20 = inttoptr i32 %15 to i8*, !insn.addr !1085
  %21 = load i8, i8* %20, align 1, !insn.addr !1085
  %22 = inttoptr i32 %19 to i8*, !insn.addr !1085
  store i8 %21, i8* %22, align 1, !insn.addr !1085
  %23 = call i32 @function_8ca62886(), !insn.addr !1086
  ret i32 %23, !insn.addr !1086

dec_label_pc_10035b3:                             ; preds = %dec_label_pc_1003543
  %24 = call i32 @unknown_99a42bb8(), !insn.addr !1087
  %25 = add i32 %1, -2, !insn.addr !1088
  %26 = add i32 %24, %4, !insn.addr !1089
  %27 = inttoptr i32 %4 to i32*, !insn.addr !1089
  store i32 %26, i32* %27, align 4, !insn.addr !1089
  %28 = inttoptr i32 %25 to i32*, !insn.addr !1090
  %29 = load i32, i32* %28, align 4, !insn.addr !1090
  %30 = add i32 %29, 1, !insn.addr !1090
  store i32 %30, i32* %28, align 4, !insn.addr !1090
  %31 = add i32 %4, ptrtoint (i8** @global_var_1014d98 to i32), !insn.addr !1091
  %32 = inttoptr i32 %31 to i8*, !insn.addr !1091
  %33 = load i8, i8* %32, align 1, !insn.addr !1091
  %34 = udiv i32 %24, 256, !insn.addr !1091
  %35 = trunc i32 %34 to i8, !insn.addr !1091
  %36 = add i8 %33, %35, !insn.addr !1091
  store i8 %36, i8* %32, align 1, !insn.addr !1091
  %37 = trunc i32 %1 to i8
  %38 = add i8 %37, -3, !insn.addr !1092
  %39 = call i8 @llvm.ctpop.i8(i8 %38), !range !258, !insn.addr !1092
  %40 = and i8 %39, 1, !insn.addr !1092
  %41 = icmp eq i8 %40, 0, !insn.addr !1092
  %42 = icmp eq i1 %41, false, !insn.addr !1093
  br i1 %42, label %dec_label_pc_10035cf, label %dec_label_pc_10035ce, !insn.addr !1093

dec_label_pc_10035ce:                             ; preds = %dec_label_pc_10035b3
  ret i32 %0, !insn.addr !1093

dec_label_pc_10035cf:                             ; preds = %dec_label_pc_10035b3
  %43 = inttoptr i32 %24 to i32*, !insn.addr !1094
  %44 = select i1 %5, i32 -4, i32 4, !insn.addr !1095
  %45 = add i32 %44, %0, !insn.addr !1095
  %46 = and i32 %2, -256, !insn.addr !1096
  %47 = add i32 %46, %2
  %48 = and i32 %47, 65280, !insn.addr !1096
  %49 = and i32 %2, -65281, !insn.addr !1096
  %50 = or i32 %48, %49, !insn.addr !1096
  %51 = inttoptr i32 %45 to i8*, !insn.addr !1097
  %52 = load i8, i8* %51, align 1, !insn.addr !1097
  %53 = and i32 %0, -256, !insn.addr !1097
  %54 = add i8 %52, -24, !insn.addr !1098
  %55 = zext i8 %54 to i32, !insn.addr !1098
  %56 = or i32 %53, %55, !insn.addr !1098
  %57 = select i1 %5, i32 1, i32 3, !insn.addr !1097
  %58 = add i32 %45, %57, !insn.addr !1099
  %59 = add i32 %50, 21843873, !insn.addr !1100
  %60 = inttoptr i32 %59 to i8*, !insn.addr !1100
  %61 = load i8, i8* %60, align 1, !insn.addr !1100
  %62 = trunc i32 %4 to i8, !insn.addr !1100
  %63 = add i8 %61, %62, !insn.addr !1100
  store i8 %63, i8* %60, align 1, !insn.addr !1100
  %64 = add i32 %4, 1307025716, !insn.addr !1101
  %65 = inttoptr i32 %64 to i32*, !insn.addr !1101
  %66 = load i32, i32* %65, align 4, !insn.addr !1101
  %67 = add i32 %66, %4, !insn.addr !1101
  store i32 %67, i32* %65, align 4, !insn.addr !1101
  %68 = add i32 %4, 1717078272, !insn.addr !1102
  store i32 %68, i32* %27, align 4, !insn.addr !1102
  %69 = and i32 %3, -256, !insn.addr !1103
  %70 = add i32 %69, 210581685, !insn.addr !1104
  %71 = inttoptr i32 %70 to i32*, !insn.addr !1104
  %72 = load i32, i32* %71, align 4, !insn.addr !1104
  %73 = add i32 %72, %69, !insn.addr !1104
  store i32 %73, i32* %71, align 4, !insn.addr !1104
  %74 = load i8, i8* inttoptr (i32 -373208437 to i8*), align 1, !insn.addr !1105
  %75 = udiv i32 %47, 256, !insn.addr !1105
  %76 = trunc i32 %75 to i8, !insn.addr !1105
  %77 = add i8 %74, %76, !insn.addr !1105
  store i8 %77, i8* inttoptr (i32 -373208437 to i8*), align 1, !insn.addr !1105
  %78 = mul i32 %2, 256
  %79 = add i32 %3, %78
  %80 = and i32 %79, 65280, !insn.addr !1106
  %81 = and i32 %3, -65536, !insn.addr !1106
  %82 = or i32 %80, %81, !insn.addr !1106
  %83 = inttoptr i32 %58 to i32*, !insn.addr !1107
  %84 = load i32, i32* %83, align 4, !insn.addr !1107
  %85 = inttoptr i32 %56 to i32*, !insn.addr !1107
  store i32 %84, i32* %85, align 4, !insn.addr !1107
  %86 = inttoptr i32 %82 to i8*, !insn.addr !1108
  %87 = load i8, i8* %86, align 256, !insn.addr !1108
  %88 = add i8 %87, 24, !insn.addr !1108
  store i8 %88, i8* %86, align 256, !insn.addr !1108
  %89 = load i8*, i8** @global_var_1014d98, align 4, !insn.addr !1109
  %90 = ptrtoint i8* %89 to i32, !insn.addr !1109
  ret i32 %90, !insn.addr !1109
}

define i32 @function_100361a(i32 %arg1) local_unnamed_addr {
dec_label_pc_100361a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-83 = alloca i8, align 1
  %2 = call i8 @__decompiler_undefined_function_8()
  %3 = add i32 %1, 161, !insn.addr !1110
  %4 = and i32 %3, 255, !insn.addr !1110
  %5 = and i32 %1, -256, !insn.addr !1110
  %6 = or i32 %4, %5, !insn.addr !1110
  %7 = add i32 %6, %0, !insn.addr !1111
  %8 = inttoptr i32 %0 to i32*, !insn.addr !1111
  store i32 %7, i32* %8, align 4, !insn.addr !1111
  %9 = trunc i32 %3 to i8, !insn.addr !1112
  %10 = add i8 %9, 19, !insn.addr !1112
  %11 = xor i8 %9, -128
  %12 = and i8 %10, %11, !insn.addr !1112
  %13 = icmp slt i8 %12, 0, !insn.addr !1112
  %14 = zext i8 %10 to i32, !insn.addr !1112
  %15 = or i32 %5, %14, !insn.addr !1112
  br i1 %13, label %dec_label_pc_100362a, label %dec_label_pc_1003626, !insn.addr !1113

dec_label_pc_1003626:                             ; preds = %dec_label_pc_100361a
  ret i32 %15, !insn.addr !1113

dec_label_pc_100362a:                             ; preds = %dec_label_pc_100361a
  %16 = add i32 %0, -1868495807, !insn.addr !1114
  %17 = inttoptr i32 %16 to i32*, !insn.addr !1114
  %18 = load i32, i32* %17, align 4, !insn.addr !1114
  %19 = add i32 %18, %0, !insn.addr !1114
  store i32 %19, i32* %17, align 4, !insn.addr !1114
  %20 = add i32 %15, %0, !insn.addr !1115
  store i32 %20, i32* %8, align 4, !insn.addr !1115
  %21 = add i32 %15, 4, !insn.addr !1116
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1116
  %23 = load i32, i32* %22, align 4, !insn.addr !1116
  %24 = add i32 %23, 4, !insn.addr !1117
  %25 = inttoptr i32 %24 to i32*, !insn.addr !1117
  %26 = load i32, i32* %25, align 4, !insn.addr !1117
  %27 = load i8*, i8** @global_var_1014d98, align 4, !insn.addr !1118
  %28 = ptrtoint i8* %27 to i32, !insn.addr !1118
  %29 = add i32 %28, 108, !insn.addr !1119
  %30 = inttoptr i32 %29 to i32*, !insn.addr !1119
  %31 = load i32, i32* %30, align 4, !insn.addr !1119
  %32 = ptrtoint i8* %stack_var_-83 to i32, !insn.addr !1120
  %33 = trunc i32 %32 to i8, !insn.addr !1121
  %34 = add i8 %2, %33, !insn.addr !1121
  store i8 %34, i8* %stack_var_-83, align 1, !insn.addr !1121
  %35 = udiv i32 %26, 4, !insn.addr !1122
  %36 = inttoptr i32 %23 to i8*, !insn.addr !1123
  %37 = inttoptr i32 %31 to i8*, !insn.addr !1123
  call void @__asm_rep_movsd_memcpy(i8* %37, i8* %36, i32 %35), !insn.addr !1123
  ret i32 %26, !insn.addr !1123
}

define i32 @function_1003656() local_unnamed_addr {
dec_label_pc_1003656:
  %ebx.0.reg2mem = alloca i32, !insn.addr !1124
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %0, 34, !insn.addr !1125
  %5 = inttoptr i32 %4 to i16*, !insn.addr !1125
  %6 = load i16, i16* %5, align 2, !insn.addr !1125
  %7 = trunc i32 %2 to i16, !insn.addr !1125
  call void @__asm_arpl(i16 %6, i16 %7), !insn.addr !1125
  %8 = select i1 %3, i32 add (i32 ptrtoint (i32* @global_var_1014d8c to i32), i32 1), i32 ptrtoint (i32* @global_var_1014d8c to i32), !insn.addr !1126
  %9 = sub i32 %2, %8, !insn.addr !1126
  %10 = icmp eq i32 %9, 0, !insn.addr !1126
  %11 = icmp eq i1 %10, false, !insn.addr !1127
  br i1 %11, label %dec_label_pc_1003669, label %dec_label_pc_1003664, !insn.addr !1127

dec_label_pc_1003664:                             ; preds = %dec_label_pc_1003656
  %12 = add i32 %1, 124, !insn.addr !1128
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1128
  %14 = load i32, i32* %13, align 4, !insn.addr !1128
  %15 = and i32 %14, %1, !insn.addr !1128
  %16 = inttoptr i32 %9 to i8*, !insn.addr !1129
  %17 = load i8, i8* %16, align 1, !insn.addr !1129
  %18 = trunc i32 %9 to i8, !insn.addr !1129
  %19 = add i8 %17, %18, !insn.addr !1129
  store i8 %19, i8* %16, align 1, !insn.addr !1129
  store i32 %15, i32* %ebx.0.reg2mem, !insn.addr !1129
  br label %dec_label_pc_1003669, !insn.addr !1129

dec_label_pc_1003669:                             ; preds = %dec_label_pc_1003664, %dec_label_pc_1003656
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  store i32 %ebx.0.reload, i32* @global_var_1014048, align 4, !insn.addr !1130
  ret i32 %9, !insn.addr !1131
}

define i32 @function_1003671() local_unnamed_addr {
dec_label_pc_1003671:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, ptrtoint (i32* @global_var_1014d89 to i32), !insn.addr !1132
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1132
  %4 = load i32, i32* %3, align 4, !insn.addr !1132
  %5 = icmp eq i32 %4, %1, !insn.addr !1132
  %6 = icmp eq i1 %5, false, !insn.addr !1133
  br i1 %6, label %dec_label_pc_100367e, label %dec_label_pc_1003679, !insn.addr !1133

dec_label_pc_1003679:                             ; preds = %dec_label_pc_1003671
  %7 = call i32 @__asm_sldt(), !insn.addr !1134
  %8 = trunc i32 %7 to i16, !insn.addr !1134
  %9 = inttoptr i32 %7 to i16*, !insn.addr !1134
  store i16 %8, i16* %9, align 2, !insn.addr !1134
  br label %dec_label_pc_100367e, !insn.addr !1134

dec_label_pc_100367e:                             ; preds = %dec_label_pc_1003679, %dec_label_pc_1003671
  %10 = load i8, i8* @global_var_1014d64, align 1, !insn.addr !1135
  %11 = sext i8 %10 to i32, !insn.addr !1135
  ret i32 %11, !insn.addr !1136
}

define i32 @function_1003685() local_unnamed_addr {
dec_label_pc_1003685:
  %storemerge.reg2mem = alloca i32, !insn.addr !1137
  %esp.0.reg2mem = alloca i32, !insn.addr !1137
  %ebx.0.reg2mem = alloca i32, !insn.addr !1137
  %cf.0.reg2mem = alloca i1, !insn.addr !1137
  %ecx.0.reg2mem = alloca i32, !insn.addr !1137
  %az.0.reg2mem = alloca i1, !insn.addr !1137
  %eax.1.reg2mem = alloca i32, !insn.addr !1137
  %eax.0.reg2mem = alloca i32, !insn.addr !1137
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i8*, align 4
  br i1 %4, label %5, label %dec_label_pc_100368b, !insn.addr !1137

; <label>:5:                                      ; preds = %dec_label_pc_1003685
  %6 = call i32 @function_7e004061(), !insn.addr !1137
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !1137
  br label %dec_label_pc_100368b, !insn.addr !1137

dec_label_pc_100368b:                             ; preds = %5, %dec_label_pc_1003685
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %7 = load i32, i32* inttoptr (i32 31288904 to i32*), align 8, !insn.addr !1138
  %8 = icmp eq i32 %7, 1, !insn.addr !1138
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !1139
  br i1 %8, label %9, label %dec_label_pc_1003698, !insn.addr !1139

; <label>:9:                                      ; preds = %dec_label_pc_100368b
  %10 = call i32 @function_c600d9b8(), !insn.addr !1139
  store i32 %10, i32* %eax.1.reg2mem, !insn.addr !1139
  br label %dec_label_pc_1003698, !insn.addr !1139

dec_label_pc_1003698:                             ; preds = %9, %dec_label_pc_100368b
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %11 = load i8*, i8** @global_var_1014d98, align 4
  %12 = ptrtoint i8* %11 to i32
  %13 = bitcast i8** %stack_var_-4 to i32*
  store i32 %12, i32* %13, align 4
  %14 = add i32 %eax.1.reload, -1, !insn.addr !1140
  %15 = trunc i32 %14 to i8, !insn.addr !1141
  store i8 %15, i8* @global_var_1014d64, align 1, !insn.addr !1141
  %16 = mul i32 %14, 268435456, !insn.addr !1142
  %17 = icmp ult i32 %2, %0, !insn.addr !1143
  %18 = add i32 %3, 1, !insn.addr !1144
  %19 = add i32 %18, %16, !insn.addr !1144
  %20 = inttoptr i32 %19 to i8*, !insn.addr !1144
  %21 = load i8, i8* %20, align 1, !insn.addr !1144
  %22 = trunc i32 %3 to i8, !insn.addr !1144
  %23 = zext i1 %17 to i8, !insn.addr !1144
  %24 = add i8 %23, %22, !insn.addr !1144
  %25 = add i8 %24, %21, !insn.addr !1144
  %26 = icmp eq i8 %25, 0, !insn.addr !1144
  store i8 %25, i8* %20, align 1, !insn.addr !1144
  %27 = add i32 %3, -1, !insn.addr !1145
  %28 = icmp eq i32 %27, 0, !insn.addr !1145
  %29 = or i1 %28, %26, !insn.addr !1145
  br i1 %29, label %dec_label_pc_10036b1, label %dec_label_pc_10036fa, !insn.addr !1145

dec_label_pc_10036b1:                             ; preds = %dec_label_pc_1003698
  %30 = ptrtoint i8** %stack_var_-4 to i32, !insn.addr !1146
  %31 = inttoptr i32 %27 to i32*, !insn.addr !1147
  %32 = load i32, i32* %31, align 4, !insn.addr !1147
  %33 = add i32 %32, 778046857, !insn.addr !1147
  %34 = and i32 %32, 15, !insn.addr !1147
  %35 = icmp ugt i32 %34, 6, !insn.addr !1147
  %36 = icmp ugt i32 %32, -778046858, !insn.addr !1147
  %37 = icmp eq i32 %33, 0, !insn.addr !1147
  store i32 %33, i32* %31, align 4, !insn.addr !1147
  store i1 %35, i1* %az.0.reg2mem, !insn.addr !1148
  store i32 %27, i32* %ecx.0.reg2mem, !insn.addr !1148
  store i1 %36, i1* %cf.0.reg2mem, !insn.addr !1148
  store i32 %30, i32* %esp.0.reg2mem, !insn.addr !1148
  br i1 %37, label %dec_label_pc_1003773, label %dec_label_pc_10036bf, !insn.addr !1148

dec_label_pc_10036bf:                             ; preds = %dec_label_pc_10036b1
  %38 = xor i32 %32, -2147483648
  %39 = and i32 %33, %38, !insn.addr !1147
  %40 = icmp slt i32 %39, 0, !insn.addr !1147
  %41 = load i8*, i8** %stack_var_-4, align 4, !insn.addr !1149
  %42 = ptrtoint i8* %41 to i32, !insn.addr !1149
  %43 = call i32 @function_100f5d1(i32 %42), !insn.addr !1149
  %44 = inttoptr i32 %1 to i8*, !insn.addr !1150
  store i8* %44, i8** @global_var_1014d98, align 4, !insn.addr !1150
  store i32 %43, i32* inttoptr (i32 1451511192 to i32*), align 8, !insn.addr !1151
  %45 = inttoptr i32 %43 to i32*, !insn.addr !1152
  %46 = load i32, i32* %45, align 4, !insn.addr !1152
  store i32 %46, i32* %stack_var_-8, align 4, !insn.addr !1152
  %47 = call i32 @unknown_10136c1(i32 %46), !insn.addr !1153
  %48 = load i32, i32* inttoptr (i32 1375817112 to i32*), align 8, !insn.addr !1154
  %49 = load i32, i32* inttoptr (i32 23350628 to i32*), align 4, !insn.addr !1155
  %50 = trunc i32 %2 to i16, !insn.addr !1156
  call void @__asm_outsd(i16 %50, i32 %0), !insn.addr !1156
  br i1 %40, label %dec_label_pc_1003757, label %dec_label_pc_10036ec, !insn.addr !1157

dec_label_pc_10036ec:                             ; preds = %dec_label_pc_10036bf
  %51 = add i32 %49, %0, !insn.addr !1158
  %52 = inttoptr i32 %0 to i32*, !insn.addr !1158
  store i32 %51, i32* %52, align 4, !insn.addr !1158
  %53 = add i32 %49, 4, !insn.addr !1159
  %54 = inttoptr i32 %53 to i32*, !insn.addr !1159
  %55 = load i32, i32* %54, align 4, !insn.addr !1159
  %56 = call i32 @unknown_1737bfb(i32 %55), !insn.addr !1160
  ret i32 %56, !insn.addr !1160

dec_label_pc_10036fa:                             ; preds = %dec_label_pc_1003698
  %57 = add i32 %1, -95, !insn.addr !1161
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1161
  %59 = load i32, i32* @global_var_1014c1b, align 4, !insn.addr !1162
  %60 = inttoptr i32 %59 to i32*, !insn.addr !1163
  %61 = load i32, i32* %60, align 4, !insn.addr !1163
  %62 = add i32 %61, 4, !insn.addr !1164
  %63 = inttoptr i32 %62 to i32*, !insn.addr !1164
  %64 = load i32, i32* %63, align 4, !insn.addr !1164
  %65 = load i32, i32* inttoptr (i32 32984443 to i32*), align 4, !insn.addr !1165
  %66 = inttoptr i32 %65 to i32*, !insn.addr !1166
  %67 = load i32, i32* %66, align 4, !insn.addr !1166
  %68 = add i32 %65, -822540, !insn.addr !1167
  %69 = inttoptr i32 %68 to i8*, !insn.addr !1168
  %70 = load i8, i8* %69, align 1, !insn.addr !1168
  %71 = trunc i32 %68 to i8, !insn.addr !1168
  %72 = add i8 %70, %71, !insn.addr !1168
  store i8 %72, i8* %69, align 1, !insn.addr !1168
  %73 = udiv i32 %64, 268435456, !insn.addr !1169
  %74 = inttoptr i32 %61 to i8*, !insn.addr !1170
  %75 = inttoptr i32 %67 to i8*, !insn.addr !1170
  call void @__asm_rep_movsd_memcpy(i8* %75, i8* %74, i32 %73), !insn.addr !1170
  %76 = load i8*, i8** %stack_var_-4, align 4, !insn.addr !1171
  %77 = ptrtoint i8* %76 to i32, !insn.addr !1171
  ret i32 %77, !insn.addr !1172

dec_label_pc_1003757:                             ; preds = %dec_label_pc_10036bf
  %78 = inttoptr i32 %48 to i32*, !insn.addr !1173
  %79 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !1152
  %80 = trunc i32 %49 to i8, !insn.addr !1174
  %81 = inttoptr i32 %49 to i8*, !insn.addr !1174
  %82 = load i8, i8* %81, align 1, !insn.addr !1174
  %83 = sub i8 %80, %82, !insn.addr !1174
  %84 = and i8 %80, 15, !insn.addr !1174
  %85 = and i8 %82, 15, !insn.addr !1174
  %86 = sub nsw i8 %84, %85, !insn.addr !1174
  %87 = icmp ugt i8 %86, 15, !insn.addr !1174
  %88 = icmp ugt i8 %82, %80, !insn.addr !1174
  %89 = zext i8 %83 to i32, !insn.addr !1174
  %90 = and i32 %49, -256, !insn.addr !1174
  %91 = or i32 %90, %89, !insn.addr !1174
  %92 = load i32, i32* inttoptr (i32 18042264 to i32*), align 8, !insn.addr !1175
  %93 = add i32 %92, 4, !insn.addr !1176
  %94 = inttoptr i32 %93 to i32*, !insn.addr !1176
  store i32 %91, i32* %94, align 4, !insn.addr !1176
  store i1 %87, i1* %az.0.reg2mem, !insn.addr !1177
  store i32 %92, i32* %ecx.0.reg2mem, !insn.addr !1177
  store i1 %88, i1* %cf.0.reg2mem, !insn.addr !1177
  store i32 38291, i32* %ebx.0.reg2mem, !insn.addr !1177
  store i32 %79, i32* %esp.0.reg2mem, !insn.addr !1177
  br label %dec_label_pc_1003773, !insn.addr !1177

dec_label_pc_1003773:                             ; preds = %dec_label_pc_1003757, %dec_label_pc_10036b1
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %az.0.reload = load i1, i1* %az.0.reg2mem
  %95 = call i32 @function_1007c1d(), !insn.addr !1178
  store i32 %ebx.0.reload, i32* inttoptr (i32 -939438801 to i32*), align 4, !insn.addr !1179
  %96 = trunc i32 %95 to i8, !insn.addr !1180
  %97 = and i8 %96, 14, !insn.addr !1180
  %98 = icmp ugt i8 %97, 9, !insn.addr !1180
  %99 = or i1 %az.0.reload, %98, !insn.addr !1180
  %100 = icmp ugt i8 %96, -103
  %101 = or i1 %cf.0.reload, %100
  br i1 %99, label %102, label %107, !insn.addr !1180

; <label>:102:                                    ; preds = %dec_label_pc_1003773
  %.v = select i1 %101, i32 154, i32 250
  %103 = add i32 %.v, %95, !insn.addr !1180
  %104 = and i32 %103, 255, !insn.addr !1180
  %105 = and i32 %95, -256, !insn.addr !1180
  %106 = or i32 %104, %105, !insn.addr !1180
  store i32 %106, i32* %storemerge.reg2mem, !insn.addr !1180
  br label %113, !insn.addr !1180

; <label>:107:                                    ; preds = %dec_label_pc_1003773
  %108 = add i32 %95, 160, !insn.addr !1180
  %109 = select i1 %101, i32 %108, i32 %95, !insn.addr !1180
  %110 = and i32 %109, 255, !insn.addr !1180
  %111 = and i32 %95, -256, !insn.addr !1180
  %112 = or i32 %110, %111, !insn.addr !1180
  store i32 %112, i32* %storemerge.reg2mem, !insn.addr !1180
  br label %113, !insn.addr !1180

; <label>:113:                                    ; preds = %102, %107
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %storemerge.reload, i32* inttoptr (i32 -1560281020 to i32*), align 4, !insn.addr !1181
  %sext = mul i32 %storemerge.reload, 65536
  %114 = sdiv i32 %sext, 65536, !insn.addr !1182
  %115 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !1183
  %116 = load i32, i32* %115, align 4, !insn.addr !1183
  %117 = add i32 %116, %114, !insn.addr !1183
  store i32 %117, i32* %115, align 4, !insn.addr !1183
  %118 = inttoptr i32 %114 to i32*, !insn.addr !1184
  %119 = load i32, i32* %118, align 4, !insn.addr !1184
  %120 = add i32 %esp.0.reload, -4, !insn.addr !1184
  %121 = inttoptr i32 %120 to i32*, !insn.addr !1184
  store i32 %119, i32* %121, align 4, !insn.addr !1184
  %122 = call i32 @function_10089c1(), !insn.addr !1185
  %123 = load i32, i32* @global_var_1014db7, align 4, !insn.addr !1186
  ret i32 %123, !insn.addr !1187
}

define i32 @function_10037c8() local_unnamed_addr {
dec_label_pc_10037c8:
  %0 = call i32 @function_8ca62b04(), !insn.addr !1188
  ret i32 %0, !insn.addr !1188
}

define i32 @function_10037cd() local_unnamed_addr {
dec_label_pc_10037cd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1189
}

define i32 @function_10037e3() local_unnamed_addr {
dec_label_pc_10037e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10037fb() local_unnamed_addr {
dec_label_pc_10037fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100381e() local_unnamed_addr {
dec_label_pc_100381e:
  %0 = call i32 @function_8ca62b25(), !insn.addr !1190
  ret i32 %0, !insn.addr !1190
}

define i32 @function_1003826() local_unnamed_addr {
dec_label_pc_1003826:
  %eax.0.reg2mem = alloca i32, !insn.addr !1191
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %2, %1, !insn.addr !1191
  %6 = inttoptr i32 %5 to i8*, !insn.addr !1192
  %7 = load i8, i8* %6, align 1, !insn.addr !1192
  %8 = inttoptr i32 %0 to i8*, !insn.addr !1192
  store i8 %7, i8* %8, align 1, !insn.addr !1192
  %9 = select i1 %4, i32 -1, i32 1, !insn.addr !1192
  %10 = udiv i32 %3, 256, !insn.addr !1193
  %11 = trunc i32 %10 to i8, !insn.addr !1193
  %12 = mul i32 %3, 8, !insn.addr !1193
  %13 = add i32 %5, 1, !insn.addr !1192
  %14 = add i32 %13, %12, !insn.addr !1193
  %15 = add i32 %14, %9, !insn.addr !1193
  %16 = inttoptr i32 %15 to i8*, !insn.addr !1193
  %17 = load i8, i8* %16, align 1, !insn.addr !1193
  %18 = or i8 %17, %11, !insn.addr !1193
  %19 = zext i8 %18 to i32, !insn.addr !1193
  %20 = mul i32 %19, 256, !insn.addr !1193
  %21 = and i32 %3, -65281, !insn.addr !1193
  %22 = or i32 %20, %21, !insn.addr !1193
  %23 = add i32 %2, 1, !insn.addr !1194
  %24 = xor i32 %2, -2147483648
  %25 = and i32 %23, %24, !insn.addr !1194
  %26 = icmp slt i32 %25, 0, !insn.addr !1194
  %27 = icmp slt i32 %23, 0, !insn.addr !1194
  store i32 16589569, i32* @global_var_1014048, align 4, !insn.addr !1195
  %28 = icmp eq i1 %27, %26, !insn.addr !1196
  store i32 %22, i32* %eax.0.reg2mem, !insn.addr !1196
  br i1 %28, label %29, label %dec_label_pc_100383f, !insn.addr !1196

; <label>:29:                                     ; preds = %dec_label_pc_1003826
  %30 = call i32 @function_88003348(), !insn.addr !1196
  store i32 %30, i32* %eax.0.reg2mem, !insn.addr !1196
  br label %dec_label_pc_100383f, !insn.addr !1196

dec_label_pc_100383f:                             ; preds = %29, %dec_label_pc_1003826
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1197
}

define i32 @function_1003844() local_unnamed_addr {
dec_label_pc_1003844:
  %eax.0.reg2mem = alloca i32, !insn.addr !1198
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i32 @function_1003232(), !insn.addr !1199
  %6 = load i32, i32* inttoptr (i32 32132488 to i32*), align 8, !insn.addr !1200
  %7 = icmp ult i32 %6, %2, !insn.addr !1200
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !1201
  br i1 %7, label %8, label %dec_label_pc_100385f, !insn.addr !1201

; <label>:8:                                      ; preds = %dec_label_pc_1003844
  %9 = call i32 @function_10037e3(), !insn.addr !1201
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !1201
  br label %dec_label_pc_100385f, !insn.addr !1201

dec_label_pc_100385f:                             ; preds = %8, %dec_label_pc_1003844
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %10 = trunc i32 %eax.0.reload to i8
  %11 = trunc i32 %2 to i8, !insn.addr !1202
  %12 = add i8 %10, %11, !insn.addr !1202
  %13 = inttoptr i32 %2 to i8*, !insn.addr !1202
  store i8 %12, i8* %13, align 1, !insn.addr !1202
  %14 = udiv i32 %3, 256, !insn.addr !1203
  %15 = add i32 %14, %2, !insn.addr !1203
  %16 = and i32 %15, 255, !insn.addr !1203
  %17 = and i32 %2, -256, !insn.addr !1203
  %18 = or i32 %16, %17, !insn.addr !1203
  %19 = mul i32 %18, 907905280, !insn.addr !1204
  %20 = add i32 %19, %3, !insn.addr !1205
  %21 = inttoptr i32 %3 to i32*, !insn.addr !1205
  store i32 %20, i32* %21, align 4, !insn.addr !1205
  %22 = call i32 @function_1013026(), !insn.addr !1206
  %23 = add i32 %22, %3, !insn.addr !1207
  store i32 %23, i32* %21, align 4, !insn.addr !1207
  %24 = inttoptr i32 %22 to i32*, !insn.addr !1208
  %25 = load i32, i32* %24, align 4, !insn.addr !1208
  %26 = call i32 @function_1007bc1(i32 %25), !insn.addr !1209
  %27 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !1210
  %28 = inttoptr i32 %27 to i32*, !insn.addr !1211
  store i32 %eax.0.reload, i32* %28, align 4, !insn.addr !1211
  %29 = load i8, i8* inttoptr (i32 -873986960 to i8*), align 16, !insn.addr !1212
  %30 = add i8 %29, 112, !insn.addr !1212
  store i8 %30, i8* inttoptr (i32 -873986960 to i8*), align 16, !insn.addr !1212
  %31 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !1213
  %32 = inttoptr i32 %31 to i32*, !insn.addr !1214
  store i32 -873986960, i32* %32, align 4, !insn.addr !1214
  %33 = load i32, i32* @global_var_1014f26, align 4, !insn.addr !1215
  %34 = mul i32 %31, 4, !insn.addr !1216
  %35 = add i32 %eax.0.reload, -86, !insn.addr !1216
  %36 = add i32 %35, %34, !insn.addr !1216
  %37 = inttoptr i32 %36 to i32*, !insn.addr !1216
  %38 = load i32, i32* %37, align 4, !insn.addr !1216
  %39 = add i32 %38, %0, !insn.addr !1216
  store i32 %39, i32* %37, align 4, !insn.addr !1216
  %40 = add i32 %34, -657208820, !insn.addr !1217
  %41 = udiv i32 %40, 4, !insn.addr !1218
  %42 = icmp eq i32 %40, 0, !insn.addr !1218
  %43 = inttoptr i32 %1 to i8*, !insn.addr !1219
  %44 = inttoptr i32 %0 to i8*, !insn.addr !1219
  call void @__asm_rep_movsd_memcpy(i8* %44, i8* %43, i32 %41), !insn.addr !1219
  %45 = select i1 %4, i32 -4, i32 4, !insn.addr !1219
  %46 = mul i32 %41, %45, !insn.addr !1219
  %47 = add i32 %46, %0, !insn.addr !1219
  br i1 %42, label %dec_label_pc_10038c4, label %dec_label_pc_10038c1, !insn.addr !1220

dec_label_pc_10038c1:                             ; preds = %dec_label_pc_100385f
  %48 = inttoptr i32 %47 to i8*, !insn.addr !1221
  call void @__asm_rep_movsb_memcpy(i8* %48, i8* %48, i32 -1), !insn.addr !1221
  ret i32 %33, !insn.addr !1221

dec_label_pc_10038c4:                             ; preds = %dec_label_pc_100385f
  %49 = mul i32 %47, 2, !insn.addr !1222
  %50 = xor i32 %49, %47, !insn.addr !1222
  %51 = icmp slt i32 %50, 0, !insn.addr !1222
  br i1 %51, label %dec_label_pc_10038cf, label %dec_label_pc_10038cb, !insn.addr !1223

dec_label_pc_10038cb:                             ; preds = %dec_label_pc_10038c4
  ret i32 %33, !insn.addr !1223

dec_label_pc_10038cf:                             ; preds = %dec_label_pc_10038c4
  %52 = add i32 %eax.0.reload, 1, !insn.addr !1224
  %53 = load i8, i8* inttoptr (i32 -1795076721 to i8*), align 1, !insn.addr !1225
  %54 = udiv i32 %33, 256, !insn.addr !1225
  %55 = trunc i32 %54 to i8, !insn.addr !1225
  %56 = add i8 %53, %55, !insn.addr !1225
  store i8 %56, i8* inttoptr (i32 -1795076721 to i8*), align 1, !insn.addr !1225
  %57 = add i32 %33, -85, !insn.addr !1226
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1226
  store i32 %52, i32* %58, align 4, !insn.addr !1226
  %59 = call i32 @function_6900398e(), !insn.addr !1227
  ret i32 %59, !insn.addr !1227
}

define i32 @function_100392c() local_unnamed_addr {
dec_label_pc_100392c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 18173322, !insn.addr !1228
  %3 = inttoptr i32 %2 to i8*, !insn.addr !1228
  %4 = load i8, i8* %3, align 1, !insn.addr !1228
  %5 = udiv i32 %0, 256, !insn.addr !1228
  %6 = trunc i32 %5 to i8, !insn.addr !1228
  %7 = add i8 %4, %6, !insn.addr !1228
  store i8 %7, i8* %3, align 1, !insn.addr !1228
  ret i32 %1, !insn.addr !1229
}

define i32 @function_1003950() local_unnamed_addr {
dec_label_pc_1003950:
  %0 = call i32 @function_8c384357(), !insn.addr !1230
  ret i32 %0, !insn.addr !1230
}

define i32 @function_100395d() local_unnamed_addr {
dec_label_pc_100395d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, %2, !insn.addr !1231
  %5 = inttoptr i32 %2 to i32*, !insn.addr !1231
  store i32 %4, i32* %5, align 4, !insn.addr !1231
  %6 = add i32 %2, 66, !insn.addr !1232
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1232
  %8 = load i32, i32* %7, align 4, !insn.addr !1232
  %9 = or i32 %8, %1, !insn.addr !1232
  store i32 %9, i32* %7, align 4, !insn.addr !1232
  %10 = mul i32 %3, -95, !insn.addr !1233
  %11 = inttoptr i32 %0 to i32*, !insn.addr !1234
  %12 = load i32, i32* %11, align 4, !insn.addr !1234
  %13 = udiv i32 %12, 2, !insn.addr !1234
  %14 = shl i32 %12, 31, !insn.addr !1234
  %15 = or i32 %13, %14, !insn.addr !1234
  store i32 %15, i32* %11, align 4, !insn.addr !1234
  %16 = add i32 %2, -1534252401, !insn.addr !1235
  %17 = inttoptr i32 %16 to i32*, !insn.addr !1235
  %18 = load i32, i32* %17, align 4, !insn.addr !1235
  %19 = add i32 %18, %2, !insn.addr !1235
  store i32 %19, i32* %17, align 4, !insn.addr !1235
  %20 = add i32 %10, %2, !insn.addr !1236
  store i32 %20, i32* %5, align 4, !insn.addr !1236
  %21 = add i32 %10, -88, !insn.addr !1237
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1237
  %23 = load i32, i32* %22, align 4, !insn.addr !1237
  ret i32 %23, !insn.addr !1238
}

define i32 @function_100397b() local_unnamed_addr {
dec_label_pc_100397b:
  %eax.0.reg2mem = alloca i32, !insn.addr !1239
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i32 @function_100994f(), !insn.addr !1239
  %9 = icmp eq i1 %6, %4, !insn.addr !1240
  %10 = icmp eq i1 %7, false, !insn.addr !1240
  %11 = icmp eq i1 %9, %10, !insn.addr !1240
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !1240
  br i1 %11, label %12, label %dec_label_pc_1003982, !insn.addr !1240

; <label>:12:                                     ; preds = %dec_label_pc_100397b
  %13 = call i32 @function_100395d(), !insn.addr !1240
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !1240
  br label %dec_label_pc_1003982, !insn.addr !1240

dec_label_pc_1003982:                             ; preds = %12, %dec_label_pc_100397b
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %14 = add i32 %eax.0.reload, %3, !insn.addr !1241
  %15 = inttoptr i32 %3 to i32*, !insn.addr !1241
  store i32 %14, i32* %15, align 4, !insn.addr !1241
  %16 = trunc i32 %2 to i16, !insn.addr !1242
  call void @__asm_outsd(i16 %16, i32 %1), !insn.addr !1242
  %17 = add i32 %3, 1, !insn.addr !1243
  %18 = add i32 %eax.0.reload, 161, !insn.addr !1244
  %19 = and i32 %18, 255, !insn.addr !1244
  %20 = and i32 %eax.0.reload, -256, !insn.addr !1244
  %21 = or i32 %19, %20, !insn.addr !1244
  %22 = trunc i32 %1 to i8
  %23 = inttoptr i32 %0 to i8*, !insn.addr !1245
  store i8 %22, i8* %23, align 1, !insn.addr !1245
  %24 = select i1 %5, i32 -1, i32 1, !insn.addr !1245
  %25 = add i32 %24, %1, !insn.addr !1245
  %26 = inttoptr i32 %17 to i32*, !insn.addr !1246
  %27 = load i32, i32* %26, align 4, !insn.addr !1246
  %28 = add i32 %27, %21, !insn.addr !1246
  store i32 %28, i32* %26, align 4, !insn.addr !1246
  %29 = add i32 %21, -100, !insn.addr !1247
  %30 = inttoptr i32 %29 to i32*, !insn.addr !1247
  %31 = load i32, i32* %30, align 4, !insn.addr !1247
  %32 = and i32 %31, %25, !insn.addr !1247
  store i32 %32, i32* %30, align 4, !insn.addr !1247
  %33 = add i32 %eax.0.reload, 66, !insn.addr !1248
  %34 = and i32 %33, 255, !insn.addr !1248
  %35 = or i32 %34, %20, !insn.addr !1248
  call void @__asm_out.2(i16 %16, i32 %35), !insn.addr !1249
  %36 = mul i32 %2, 2, !insn.addr !1250
  %37 = inttoptr i32 %2 to i32*, !insn.addr !1250
  store i32 %36, i32* %37, align 4, !insn.addr !1250
  %38 = inttoptr i32 %35 to i8*, !insn.addr !1251
  %39 = load i8, i8* %38, align 1, !insn.addr !1251
  %40 = trunc i32 %33 to i8, !insn.addr !1251
  %41 = add i8 %39, %40, !insn.addr !1251
  store i8 %41, i8* %38, align 1, !insn.addr !1251
  %42 = call i32 @function_8ca62cad(), !insn.addr !1252
  ret i32 %42, !insn.addr !1252
}

define i32 @function_10039ab() local_unnamed_addr {
dec_label_pc_10039ab:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %4 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1253
  %5 = mul i32 %4, 8, !insn.addr !1254
  %6 = add i32 %3, 3086, !insn.addr !1254
  %7 = add i32 %6, %5, !insn.addr !1254
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1254
  %9 = load i32, i32* %8, align 4, !insn.addr !1254
  %10 = mul i32 %9, 2, !insn.addr !1254
  store i32 %10, i32* %8, align 4, !insn.addr !1254
  %11 = icmp eq i32 %2, 1, !insn.addr !1255
  br i1 %11, label %dec_label_pc_10039b8, label %dec_label_pc_10039d5, !insn.addr !1255

dec_label_pc_10039b8:                             ; preds = %dec_label_pc_10039ab
  %12 = add i32 %0, -23, !insn.addr !1256
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1256
  %14 = load i32, i32* %13, align 4, !insn.addr !1256
  %15 = add i32 %14, %1, !insn.addr !1256
  %16 = icmp ult i32 %15, %14, !insn.addr !1256
  store i32 %15, i32* %13, align 4, !insn.addr !1256
  %17 = load i32, i32* %stack_var_-4, align 4, !insn.addr !1257
  %18 = call i32 @unknown_33000058(i32 %17, i32 0), !insn.addr !1257
  %19 = select i1 %16, i32 1023495523, i32 1023495522, !insn.addr !1258
  %20 = sub i32 %18, %19, !insn.addr !1258
  %21 = icmp eq i32 %20, 0, !insn.addr !1258
  %22 = zext i1 %21 to i32, !insn.addr !1259
  %23 = and i32 %20, -256, !insn.addr !1259
  %24 = or i32 %23, %22, !insn.addr !1259
  store i32 %24, i32* @global_var_1014d68, align 4, !insn.addr !1260
  ret i32 %24, !insn.addr !1260

dec_label_pc_10039d5:                             ; preds = %dec_label_pc_10039ab
  ret i32 %3, !insn.addr !1261
}

define i32 @function_10039d7() local_unnamed_addr {
dec_label_pc_10039d7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = load i32, i32* inttoptr (i32 19156368 to i32*), align 16, !insn.addr !1262
  %3 = call i32 @function_1007bbf(i32 %2), !insn.addr !1263
  %4 = or i32 %1, %0, !insn.addr !1264
  %5 = inttoptr i32 %1 to i32*, !insn.addr !1264
  store i32 %4, i32* %5, align 4, !insn.addr !1264
  store i32 %3, i32* @global_var_1014d90, align 4, !insn.addr !1265
  ret i32 %3, !insn.addr !1266
}

define i32 @function_1003afb() local_unnamed_addr {
dec_label_pc_1003afb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1267
}

define i32 @function_1003b0f() local_unnamed_addr {
dec_label_pc_1003b0f:
  %eax.0.reg2mem = alloca i32, !insn.addr !1268
  %edi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = add i32 %2, -43, !insn.addr !1268
  %9 = add i32 %8, %5, !insn.addr !1268
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1268
  %11 = load i32, i32* %10, align 4, !insn.addr !1268
  %12 = zext i1 %7 to i32, !insn.addr !1268
  %13 = add i32 %0, %12, !insn.addr !1268
  %14 = sub i32 %11, %13, !insn.addr !1268
  %15 = sub i32 %14, %12, !insn.addr !1268
  %16 = icmp ult i32 %11, %15, !insn.addr !1268
  %17 = icmp ne i32 %13, -1, !insn.addr !1268
  %18 = or i1 %17, %16, !insn.addr !1268
  %19 = icmp ult i32 %11, %13, !insn.addr !1268
  %20 = select i1 %7, i1 %18, i1 %19, !insn.addr !1268
  store i32 %14, i32* %10, align 4, !insn.addr !1268
  %21 = select i1 %20, i32 142, i32 141, !insn.addr !1269
  %22 = sub i32 %6, %21, !insn.addr !1269
  %23 = and i32 %22, 255, !insn.addr !1269
  %24 = and i32 %6, -256, !insn.addr !1269
  %25 = or i32 %23, %24, !insn.addr !1269
  %26 = icmp eq i32 %1, 1, !insn.addr !1270
  %27 = icmp eq i1 %26, false, !insn.addr !1271
  store i32 %25, i32* %eax.0.reg2mem, !insn.addr !1271
  br i1 %27, label %28, label %dec_label_pc_1003b1f, !insn.addr !1271

; <label>:28:                                     ; preds = %dec_label_pc_1003b0f
  %29 = call i32 @unknown_849632(), !insn.addr !1271
  store i32 %29, i32* %eax.0.reg2mem, !insn.addr !1271
  br label %dec_label_pc_1003b1f, !insn.addr !1271

dec_label_pc_1003b1f:                             ; preds = %28, %dec_label_pc_1003b0f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %30 = bitcast i32* %edi to i8*
  %31 = load i8, i8* %30, align 4, !insn.addr !1272
  %32 = trunc i32 %5 to i8, !insn.addr !1272
  %33 = or i8 %31, %32, !insn.addr !1272
  %34 = load i32, i32* %edi, align 4, !insn.addr !1272
  %35 = inttoptr i32 %34 to i8*, !insn.addr !1272
  store i8 %33, i8* %35, align 1, !insn.addr !1272
  %36 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !1273
  %37 = load i8, i8* %36, align 1, !insn.addr !1273
  %38 = trunc i32 %eax.0.reload to i8, !insn.addr !1273
  %39 = add i8 %37, %38, !insn.addr !1273
  store i8 %39, i8* %36, align 1, !insn.addr !1273
  %40 = xor i32 %eax.0.reload, 133, !insn.addr !1274
  %41 = add i32 %5, 1, !insn.addr !1275
  %42 = add i32 %41, %40, !insn.addr !1275
  %43 = inttoptr i32 %42 to i8*, !insn.addr !1275
  %44 = load i8, i8* %43, align 1, !insn.addr !1275
  %45 = or i8 %44, %32, !insn.addr !1275
  store i8 %45, i8* %43, align 1, !insn.addr !1275
  %46 = call i8 @__asm_in.1(i8 -99), !insn.addr !1276
  %47 = sext i8 %46 to i32, !insn.addr !1276
  %48 = and i32 %eax.0.reload, -256, !insn.addr !1276
  %49 = or i32 %48, %47, !insn.addr !1276
  %50 = add i32 %49, 1, !insn.addr !1277
  %51 = inttoptr i32 %50 to i8*, !insn.addr !1278
  %52 = load i8, i8* %51, align 1, !insn.addr !1278
  %53 = trunc i32 %50 to i8, !insn.addr !1278
  %54 = add i8 %52, %53, !insn.addr !1278
  store i8 %54, i8* %51, align 1, !insn.addr !1278
  %55 = load i32, i32* @global_var_1014d5c, align 4, !insn.addr !1279
  %56 = add i32 %2, 1
  %57 = add i32 %55, %56, !insn.addr !1280
  %58 = inttoptr i32 %57 to i8*, !insn.addr !1281
  %59 = load i8, i8* %58, align 1, !insn.addr !1281
  %60 = trunc i32 %57 to i8, !insn.addr !1281
  %61 = add i8 %59, %60, !insn.addr !1281
  store i8 %61, i8* %58, align 1, !insn.addr !1281
  %62 = load i32, i32* inttoptr (i32 -520008244 to i32*), align 4, !insn.addr !1282
  %63 = mul i32 %62, 4, !insn.addr !1283
  %64 = add i32 %63, 16906760, !insn.addr !1283
  %65 = inttoptr i32 %64 to i32*, !insn.addr !1283
  store i32 %57, i32* %65, align 4, !insn.addr !1283
  %66 = inttoptr i32 %57 to i32*, !insn.addr !1284
  %67 = load i32, i32* %66, align 4, !insn.addr !1284
  %68 = call i32 @unknown_17b94c1(i32 %67, i32 %2), !insn.addr !1285
  %69 = load i32, i32* @global_var_1014d5c, align 4, !insn.addr !1286
  %70 = mul i32 %69, 4, !insn.addr !1287
  %71 = add i32 %70, 17861640, !insn.addr !1287
  %72 = inttoptr i32 %71 to i32*, !insn.addr !1287
  %73 = load i32, i32* %72, align 4, !insn.addr !1287
  %74 = inttoptr i32 %73 to i32*, !insn.addr !1288
  store i8 32, i8* inttoptr (i32 21847053 to i8*), align 1, !insn.addr !1289
  %75 = add i32 %62, %2, !insn.addr !1290
  %76 = mul i32 %4, 2, !insn.addr !1291
  %77 = add i32 %76, %56, !insn.addr !1291
  %78 = inttoptr i32 %77 to i8*, !insn.addr !1291
  %79 = load i8, i8* %78, align 1, !insn.addr !1291
  %80 = trunc i32 %75 to i8, !insn.addr !1291
  %81 = or i8 %79, %80, !insn.addr !1291
  store i8 %81, i8* %78, align 1, !insn.addr !1291
  %82 = inttoptr i32 %75 to i32*, !insn.addr !1292
  store i32 1887007917, i32* %82, align 4, !insn.addr !1292
  %83 = load i32, i32* @global_var_1014d62, align 4, !insn.addr !1293
  %84 = inttoptr i32 %83 to i32*, !insn.addr !1294
  %85 = load i32, i32* %84, align 4, !insn.addr !1294
  %86 = load i32, i32* %edi, align 4, !insn.addr !1295
  %87 = mul i32 %3, 8, !insn.addr !1295
  %88 = add i32 %86, %87, !insn.addr !1295
  %89 = inttoptr i32 %88 to i32*, !insn.addr !1295
  %90 = load i32, i32* %89, align 4, !insn.addr !1295
  %91 = add i32 %75, 1, !insn.addr !1296
  %92 = add i32 %91, %90, !insn.addr !1296
  %93 = inttoptr i32 %92 to i8*, !insn.addr !1296
  %94 = load i8, i8* %93, align 1, !insn.addr !1296
  %95 = or i8 %94, %80, !insn.addr !1296
  store i8 %95, i8* %93, align 1, !insn.addr !1296
  %96 = add i32 %85, 4, !insn.addr !1297
  %97 = inttoptr i32 %96 to i32*, !insn.addr !1297
  %98 = load i32, i32* %97, align 4, !insn.addr !1297
  %99 = add i32 %2, 3139596, !insn.addr !1298
  %100 = inttoptr i32 %99 to i16*, !insn.addr !1298
  %101 = load i32, i32* %edi, align 4, !insn.addr !1299
  %102 = load i8, i8* inttoptr (i32 -879297991 to i8*), align 1, !insn.addr !1300
  %103 = trunc i32 %98 to i8, !insn.addr !1300
  %104 = add i8 %102, %103, !insn.addr !1300
  store i8 %104, i8* inttoptr (i32 -879297991 to i8*), align 1, !insn.addr !1300
  %105 = inttoptr i32 %85 to i8*, !insn.addr !1301
  %106 = inttoptr i32 %90 to i8*, !insn.addr !1301
  call void @__asm_rep_movsd_memcpy(i8* %106, i8* %105, i32 %98), !insn.addr !1301
  ret i32 %101, !insn.addr !1302
}

define i32 @function_1003bae(i32 %arg1) local_unnamed_addr {
dec_label_pc_1003bae:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1303
}

define i32 @function_1003bcd(i32 %arg1) local_unnamed_addr {
dec_label_pc_1003bcd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1304
}

define i32 @function_1003bd9() local_unnamed_addr {
dec_label_pc_1003bd9:
  %edi.0.reg2mem = alloca i32, !insn.addr !1305
  %ecx.0.reg2mem = alloca i32, !insn.addr !1305
  %eax.0.reg2mem = alloca i32, !insn.addr !1305
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8, !insn.addr !1306
  %4 = add i8 %3, -1, !insn.addr !1306
  %5 = xor i8 %4, %3, !insn.addr !1306
  %6 = sub i8 0, %3, !insn.addr !1306
  %7 = and i8 %5, %6, !insn.addr !1306
  %8 = icmp slt i8 %7, 0, !insn.addr !1306
  %9 = zext i8 %4 to i32, !insn.addr !1306
  %10 = and i32 %2, -256, !insn.addr !1306
  %11 = or i32 %10, %9, !insn.addr !1306
  br i1 %8, label %dec_label_pc_1003be4, label %dec_label_pc_1003be0, !insn.addr !1307

dec_label_pc_1003be0:                             ; preds = %dec_label_pc_1003bd9
  ret i32 %11, !insn.addr !1307

dec_label_pc_1003be4:                             ; preds = %dec_label_pc_1003bd9
  %12 = add i32 %0, 21847175, !insn.addr !1308
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1308
  %14 = load i8, i8* %13, align 1, !insn.addr !1308
  %15 = trunc i32 %1 to i8, !insn.addr !1308
  %16 = add i8 %14, %15, !insn.addr !1308
  store i8 %16, i8* %13, align 1, !insn.addr !1308
  %17 = add i32 %0, 1275623656, !insn.addr !1309
  %18 = inttoptr i32 %17 to i32*, !insn.addr !1309
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !1308
  br label %dec_label_pc_1003bea, !insn.addr !1308

dec_label_pc_1003bea:                             ; preds = %dec_label_pc_1003bea, %dec_label_pc_1003be4
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %19 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !1310
  %20 = load i32, i32* %19, align 4, !insn.addr !1310
  %21 = add i32 %20, %eax.0.reload, !insn.addr !1310
  store i32 %21, i32* %19, align 4, !insn.addr !1310
  %22 = and i32 %eax.0.reload, 114, !insn.addr !1311
  %23 = or i32 %22, 141, !insn.addr !1311
  %24 = and i32 %eax.0.reload, -256, !insn.addr !1311
  %25 = or i32 %23, %24, !insn.addr !1311
  %.masked = and i32 %ecx.0.reload, 114
  %26 = or i32 %.masked, %23, !insn.addr !1312
  %27 = and i32 %ecx.0.reload, -256, !insn.addr !1312
  %28 = or i32 %26, %27, !insn.addr !1312
  %29 = inttoptr i32 %28 to i32*, !insn.addr !1313
  %30 = load i32, i32* %29, align 4, !insn.addr !1313
  %31 = add i32 %30, %25, !insn.addr !1313
  store i32 %31, i32* %29, align 4, !insn.addr !1313
  %32 = add i32 %28, 4, !insn.addr !1314
  %33 = inttoptr i32 %32 to i32*, !insn.addr !1314
  store i32 %25, i32* %33, align 4, !insn.addr !1314
  %34 = load i8, i8* @global_var_1014d15, align 1, !insn.addr !1315
  %35 = sext i8 %34 to i32, !insn.addr !1315
  %36 = add nsw i32 %35, 67, !insn.addr !1316
  %37 = inttoptr i32 %36 to i32*, !insn.addr !1316
  %38 = load i32, i32* %37, align 4, !insn.addr !1316
  %39 = add i32 %38, 4, !insn.addr !1317
  %40 = inttoptr i32 %39 to i8*, !insn.addr !1317
  %41 = load i8, i8* %40, align 1, !insn.addr !1317
  %42 = or i8 %41, -95, !insn.addr !1317
  store i8 %42, i8* %40, align 1, !insn.addr !1317
  %43 = inttoptr i32 %28 to i8*, !insn.addr !1318
  %44 = load i8, i8* %43, align 1, !insn.addr !1318
  %45 = sub i8 %44, %34, !insn.addr !1318
  store i8 %45, i8* %43, align 1, !insn.addr !1318
  %46 = load i32, i32* %18, align 4, !insn.addr !1309
  %47 = add i32 %46, %28, !insn.addr !1309
  store i32 %47, i32* %18, align 4, !insn.addr !1309
  %48 = load i32, i32* %29, align 4, !insn.addr !1319
  %49 = add i32 %48, %35, !insn.addr !1319
  store i32 %49, i32* %29, align 4, !insn.addr !1319
  %50 = inttoptr i32 %35 to i8*, !insn.addr !1320
  %51 = load i8, i8* %50, align 1, !insn.addr !1320
  %52 = add i8 %51, %34, !insn.addr !1320
  store i8 %52, i8* %50, align 1, !insn.addr !1320
  %53 = udiv i32 %28, 4, !insn.addr !1321
  %54 = inttoptr i32 %38 to i8*, !insn.addr !1322
  %55 = inttoptr i32 %edi.0.reload to i8*, !insn.addr !1322
  call void @__asm_rep_movsd_memcpy(i8* %55, i8* %54, i32 %53), !insn.addr !1322
  %56 = and i32 %28, -4, !insn.addr !1322
  %57 = add i32 %56, %edi.0.reload, !insn.addr !1322
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1323
  %59 = load i32, i32* %58, align 4, !insn.addr !1323
  %60 = inttoptr i32 %57 to i8*, !insn.addr !1324
  %61 = inttoptr i32 %59 to i8*, !insn.addr !1324
  call void @__asm_rep_movsb_memcpy(i8* %61, i8* %60, i32 0), !insn.addr !1324
  %62 = load i32, i32* inttoptr (i32 -351711904 to i32*), align 32, !insn.addr !1325
  %63 = load i32, i32* @global_var_1014d5c, align 4, !insn.addr !1326
  %64 = load i32, i32* inttoptr (i32 2070891868 to i32*), align 4, !insn.addr !1327
  %65 = add i32 %64, 1, !insn.addr !1327
  store i32 %65, i32* inttoptr (i32 2070891868 to i32*), align 4, !insn.addr !1327
  %sext = mul i32 %62, 65536
  %66 = sdiv i32 %sext, 65536, !insn.addr !1328
  %67 = mul i32 %63, 4, !insn.addr !1329
  %68 = add i32 %67, 27085728, !insn.addr !1329
  %69 = inttoptr i32 %68 to i32*, !insn.addr !1329
  store i32 %66, i32* %69, align 4, !insn.addr !1329
  store i32 %66, i32* %eax.0.reg2mem
  store i32 %63, i32* %ecx.0.reg2mem
  store i32 %59, i32* %edi.0.reg2mem
  br label %dec_label_pc_1003bea
}

define i32 @function_1003cff() local_unnamed_addr {
dec_label_pc_1003cff:
  %0 = call i32 @function_8ca63006(), !insn.addr !1330
  ret i32 %0, !insn.addr !1330
}

define i32 @function_1003d04() local_unnamed_addr {
dec_label_pc_1003d04:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %3, -1, !insn.addr !1331
  %8 = select i1 %6, i32 add (i32 ptrtoint (i32* @global_var_1014d58 to i32), i32 1), i32 ptrtoint (i32* @global_var_1014d58 to i32), !insn.addr !1332
  %9 = sub i32 %4, %8, !insn.addr !1332
  %10 = udiv i32 %7, 256, !insn.addr !1333
  %11 = add i32 %10, %7, !insn.addr !1333
  %12 = and i32 %11, 255, !insn.addr !1333
  %13 = and i32 %7, -256, !insn.addr !1333
  %14 = or i32 %12, %13, !insn.addr !1333
  %15 = trunc i32 %9 to i8, !insn.addr !1334
  %16 = inttoptr i32 %0 to i8*, !insn.addr !1334
  store i8 %15, i8* %16, align 1, !insn.addr !1334
  %17 = select i1 %5, i32 -1, i32 1, !insn.addr !1334
  %18 = add i32 %17, %0, !insn.addr !1334
  %19 = inttoptr i32 %18 to i32*, !insn.addr !1335
  %20 = load i32, i32* %19, align 4, !insn.addr !1335
  %21 = zext i32 %20 to i64, !insn.addr !1335
  %22 = zext i32 %9 to i64, !insn.addr !1335
  %23 = mul nuw i64 %21, %22, !insn.addr !1335
  %24 = icmp ugt i64 %23, 4294967295, !insn.addr !1335
  %25 = trunc i64 %23 to i32, !insn.addr !1336
  %sext = mul i32 %25, 65536
  %26 = sdiv i32 %sext, 65536, !insn.addr !1336
  %27 = inttoptr i32 %14 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %26, %28
  store i32 %29, i32* %27, align 4
  br i1 %24, label %dec_label_pc_1003d6f, label %dec_label_pc_1003d23, !insn.addr !1337

dec_label_pc_1003d23:                             ; preds = %dec_label_pc_1003d04
  %30 = inttoptr i32 %26 to i8*, !insn.addr !1338
  %31 = load i8, i8* %30, align 1, !insn.addr !1338
  %32 = trunc i32 %26 to i8, !insn.addr !1338
  %33 = add i8 %31, %32, !insn.addr !1338
  store i8 %33, i8* %30, align 1, !insn.addr !1338
  %34 = load i32, i32* %27, align 4, !insn.addr !1339
  %35 = add i32 %34, %26, !insn.addr !1339
  store i32 %35, i32* %27, align 4, !insn.addr !1339
  %36 = call i32 @unknown_e5007bd2(), !insn.addr !1340
  %37 = inttoptr i32 %36 to i8*, !insn.addr !1341
  store i8* %37, i8** @global_var_1014d98, align 4, !insn.addr !1341
  call void @__asm_out.4(i32 48, i32 %36), !insn.addr !1342
  %38 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1343
  %39 = load i32, i32* inttoptr (i32 1677806922 to i32*), align 4, !insn.addr !1344
  %40 = inttoptr i32 %39 to i32*, !insn.addr !1345
  store i32 %14, i32* %40, align 4, !insn.addr !1345
  %41 = load i32, i32* @global_var_1014da6, align 4, !insn.addr !1346
  %42 = mul i32 %41, 4, !insn.addr !1347
  %43 = add i32 %42, 419509104, !insn.addr !1347
  %44 = inttoptr i32 %43 to i32*, !insn.addr !1347
  %45 = load i32, i32* %44, align 4, !insn.addr !1347
  %46 = inttoptr i32 %45 to i32*, !insn.addr !1348
  %47 = load i32, i32* %46, align 4, !insn.addr !1348
  ret i32 %47, !insn.addr !1349

dec_label_pc_1003d6f:                             ; preds = %dec_label_pc_1003d04
  %48 = icmp slt i32 %9, 0, !insn.addr !1332
  %49 = sext i1 %48 to i32
  %ebp.0 = add i32 %2, %49
  %50 = sdiv i32 %sext, 16384, !insn.addr !1350
  %51 = add i32 %50, ptrtoint (i8** @global_var_1014c70 to i32), !insn.addr !1350
  %52 = inttoptr i32 %51 to i32*, !insn.addr !1350
  %53 = load i32, i32* %52, align 4, !insn.addr !1350
  %sext2 = mul i32 %53, 65536
  %54 = sdiv i32 %sext2, 65536, !insn.addr !1351
  %55 = add i32 %ebp.0, -1, !insn.addr !1352
  %56 = add i32 %54, %29, !insn.addr !1353
  store i32 %56, i32* %27, align 4, !insn.addr !1353
  %57 = inttoptr i32 %54 to i32*, !insn.addr !1354
  %58 = load i32, i32* %57, align 4, !insn.addr !1354
  %59 = mul i32 %14, 4, !insn.addr !1355
  %60 = add i32 %59, 12, !insn.addr !1355
  %61 = udiv i32 %60, 4, !insn.addr !1356
  %62 = inttoptr i32 %1 to i8*, !insn.addr !1357
  %63 = inttoptr i32 %58 to i8*, !insn.addr !1357
  call void @__asm_rep_movsd_memcpy(i8* %63, i8* %62, i32 %61), !insn.addr !1357
  %64 = load i32, i32* inttoptr (i32 -1828631144 to i32*), align 8, !insn.addr !1358
  %65 = sub i32 1, %ebp.0
  %66 = and i32 %55, %65, !insn.addr !1359
  %67 = icmp slt i32 %66, 0, !insn.addr !1359
  br i1 %67, label %dec_label_pc_1003da5, label %dec_label_pc_1003da1, !insn.addr !1360

dec_label_pc_1003da1:                             ; preds = %dec_label_pc_1003d6f
  ret i32 %64, !insn.addr !1360

dec_label_pc_1003da5:                             ; preds = %dec_label_pc_1003d6f
  %68 = udiv i32 %64, 256, !insn.addr !1361
  %69 = trunc i32 %68 to i8, !insn.addr !1361
  %70 = add i8 %69, 48, !insn.addr !1361
  store i8 %70, i8* @global_var_101ca98, align 1, !insn.addr !1361
  %71 = load i8, i8* @global_var_1014d64, align 1, !insn.addr !1362
  %72 = sext i8 %71 to i32, !insn.addr !1362
  %73 = mul i32 %72, 4, !insn.addr !1363
  %74 = add i32 %73, ptrtoint (i8** @global_var_1014c70 to i32), !insn.addr !1363
  %75 = inttoptr i32 %74 to i32*, !insn.addr !1363
  %76 = load i32, i32* %75, align 4, !insn.addr !1363
  %77 = trunc i32 %76 to i8, !insn.addr !1364
  %78 = add i8 %77, -1, !insn.addr !1364
  %79 = xor i8 %78, %77, !insn.addr !1364
  %80 = sub i8 0, %77, !insn.addr !1364
  %81 = and i8 %79, %80, !insn.addr !1364
  %82 = icmp slt i8 %81, 0, !insn.addr !1364
  %83 = zext i8 %78 to i32, !insn.addr !1364
  br i1 %82, label %dec_label_pc_1003dc4, label %dec_label_pc_1003dc0, !insn.addr !1365

dec_label_pc_1003dc0:                             ; preds = %dec_label_pc_1003da5
  %84 = add i32 %ebp.0, -2, !insn.addr !1359
  %85 = and i32 %76, 65280, !insn.addr !1364
  %86 = or i32 %85, %83, !insn.addr !1364
  %87 = inttoptr i32 %84 to i8*, !insn.addr !1366
  %88 = load i8, i8* %87, align 1, !insn.addr !1366
  %89 = trunc i32 %86 to i16, !insn.addr !1366
  %90 = zext i8 %88 to i16, !insn.addr !1366
  %91 = udiv i16 %89, %90, !insn.addr !1366
  %92 = and i32 %76, -65536, !insn.addr !1366
  %93 = urem i16 %89, %90, !insn.addr !1366
  %94 = mul i16 %93, 256
  %95 = zext i16 %94 to i32, !insn.addr !1366
  %96 = and i16 %91, 255
  %.masked = zext i16 %96 to i32
  %97 = or i32 %92, %.masked, !insn.addr !1366
  %98 = or i32 %97, %95, !insn.addr !1366
  ret i32 %98, !insn.addr !1366

dec_label_pc_1003dc4:                             ; preds = %dec_label_pc_1003da5
  %99 = add i32 %64, 4, !insn.addr !1367
  %100 = inttoptr i32 %99 to i32*, !insn.addr !1367
  %101 = call i8 @llvm.ctpop.i8(i8 %78), !range !258, !insn.addr !1364
  %102 = and i8 %101, 1, !insn.addr !1364
  %103 = icmp eq i8 %102, 0, !insn.addr !1364
  %104 = icmp slt i8 %78, 0, !insn.addr !1364
  %105 = icmp eq i8 %78, 0, !insn.addr !1364
  %106 = icmp ne i8 %77, 0, !insn.addr !1364
  %107 = and i8 %77, 15, !insn.addr !1364
  %108 = icmp ne i8 %107, 0, !insn.addr !1364
  %109 = zext i1 %106 to i32, !insn.addr !1368
  %110 = zext i1 %103 to i32, !insn.addr !1368
  %111 = zext i1 %108 to i32, !insn.addr !1368
  %112 = zext i1 %105 to i32, !insn.addr !1368
  %113 = zext i1 %104 to i32, !insn.addr !1368
  %114 = mul i32 %110, 4, !insn.addr !1368
  %115 = mul i32 %111, 16, !insn.addr !1368
  %116 = mul i32 %112, 64, !insn.addr !1368
  %117 = mul i32 %113, 128, !insn.addr !1368
  %118 = or i32 %115, %109, !insn.addr !1368
  %119 = or i32 %118, %116, !insn.addr !1368
  %120 = or i32 %119, %117, !insn.addr !1368
  %121 = or i32 %120, %114, !insn.addr !1368
  %122 = mul i32 %121, 256, !insn.addr !1368
  %123 = or i32 %122, %83, !insn.addr !1368
  %124 = load i16, i16* inttoptr (i32 -5650433 to i16*), align 2, !insn.addr !1369
  %125 = trunc i32 %123 to i16
  %126 = or i16 %125, 512, !insn.addr !1369
  call void @__asm_arpl(i16 %124, i16 %126), !insn.addr !1369
  %127 = call i32 @__asm_int1(), !insn.addr !1370
  %128 = call i32 @function_b6003e72(), !insn.addr !1371
  ret i32 %128, !insn.addr !1371
}

define i32 @function_1003df5() local_unnamed_addr {
dec_label_pc_1003df5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1003e04() local_unnamed_addr {
dec_label_pc_1003e04:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1003e0b() local_unnamed_addr {
dec_label_pc_1003e0b:
  %0 = call i1 @__decompiler_undefined_function_2()
  br i1 %0, label %1, label %dec_label_pc_1003e0d, !insn.addr !1372

; <label>:1:                                      ; preds = %dec_label_pc_1003e0b
  %2 = call i32 @function_1003df5(), !insn.addr !1372
  br label %dec_label_pc_1003e0d, !insn.addr !1372

dec_label_pc_1003e0d:                             ; preds = %1, %dec_label_pc_1003e0b
  %3 = call i32 @function_8b00003d(), !insn.addr !1373
  ret i32 %3, !insn.addr !1373
}

define i32 @function_1003e19() local_unnamed_addr {
dec_label_pc_1003e19:
  %0 = call i32 @function_1003e3a(), !insn.addr !1374
  ret i32 %0, !insn.addr !1374
}

define i32 @function_1003e2c() local_unnamed_addr {
dec_label_pc_1003e2c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i16, !insn.addr !1375
  %2 = call i8 @__asm_in.3(i16 %1), !insn.addr !1375
  %3 = load i32, i32* inttoptr (i32 -1907137541 to i32*), align 4, !insn.addr !1376
  ret i32 %3, !insn.addr !1376
}

define i32 @function_1003e3a() local_unnamed_addr {
dec_label_pc_1003e3a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %6 = call i32 @function_1004141(), !insn.addr !1377
  %7 = call i32 @function_1003e58(i32 %0, i32 %1, i32 %2, i32* nonnull %stack_var_0, i32 %3, i32 %4, i32 %5, i32 %6), !insn.addr !1378
  ret i32 %7, !insn.addr !1378
}

define i32 @function_1003e50() local_unnamed_addr {
dec_label_pc_1003e50:
  %0 = call i32 @__asm_wait(), !insn.addr !1379
  ret i32 %0, !insn.addr !1380
}

define i32 @function_1003e58(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_1003e58:
  %0 = call i32 @function_1003e67(), !insn.addr !1381
  ret i32 %0, !insn.addr !1381
}

define i32 @function_1003e5c() local_unnamed_addr {
dec_label_pc_1003e5c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1003e5d() local_unnamed_addr {
dec_label_pc_1003e5d:
  %0 = call i32 @function_1003e5c(), !insn.addr !1382
  ret i32 %0, !insn.addr !1382
}

define i32 @function_1003e66() local_unnamed_addr {
dec_label_pc_1003e66:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1003e67() local_unnamed_addr {
dec_label_pc_1003e67:
  %0 = call i32 @__readfsdword(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1383
  ret i32 %0, !insn.addr !1383
}

define i32 @function_1003e6b() local_unnamed_addr {
dec_label_pc_1003e6b:
  %0 = call i32 @function_a81a391e(), !insn.addr !1384
  ret i32 %0, !insn.addr !1384
}

define i32 @function_1003e75(i32 %Offset) local_unnamed_addr {
dec_label_pc_1003e75:
  %0 = call i32 @__readfsdword(i32 %Offset), !insn.addr !1385
  %1 = call i32 @function_1003e85(), !insn.addr !1386
  ret i32 %1, !insn.addr !1386
}

define i32 @function_1003e7b() local_unnamed_addr {
dec_label_pc_1003e7b:
  %eax.0.reg2mem = alloca i32, !insn.addr !1387
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = icmp eq i1 %1, %0, !insn.addr !1387
  br i1 %2, label %dec_label_pc_1003e7d, label %3, !insn.addr !1387

; <label>:3:                                      ; preds = %dec_label_pc_1003e7b
  %4 = call i32 @function_1003e04(), !insn.addr !1387
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !1387
  br label %dec_label_pc_1003e7d, !insn.addr !1387

dec_label_pc_1003e7d:                             ; preds = %dec_label_pc_1003e7b, %3
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1388
}

define i32 @function_1003e85() local_unnamed_addr {
dec_label_pc_1003e85:
  %0 = call i32 @function_1003e9e(), !insn.addr !1389
  ret i32 %0, !insn.addr !1389
}

define i32 @function_1003e8f() local_unnamed_addr {
dec_label_pc_1003e8f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %.mask1 = and i32 %1, 64
  %2 = icmp ne i32 %.mask1, 0, !insn.addr !1390
  %3 = icmp eq i1 %2, false, !insn.addr !1391
  br i1 %3, label %4, label %dec_label_pc_1003e95, !insn.addr !1391

; <label>:4:                                      ; preds = %dec_label_pc_1003e8f
  %5 = call i32 @function_1003e66(), !insn.addr !1391
  br label %dec_label_pc_1003e95, !insn.addr !1391

dec_label_pc_1003e95:                             ; preds = %4, %dec_label_pc_1003e8f
  %6 = call i32 @__asm_in(i32 152), !insn.addr !1392
  %7 = and i32 %0, 255, !insn.addr !1393
  %8 = and i32 %6, -256, !insn.addr !1393
  %9 = or i32 %8, %7, !insn.addr !1393
  ret i32 %9, !insn.addr !1394
}

define i32 @function_1003e9e() local_unnamed_addr {
dec_label_pc_1003e9e:
  %0 = call i32 @function_1003eb3(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1395
  ret i32 %0, !insn.addr !1395
}

define i32 @function_1003eab(i32 %arg1) local_unnamed_addr {
dec_label_pc_1003eab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1396
}

define i32 @function_1003eb3(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1003eb3:
  %ecx.0.reg2mem = alloca i32, !insn.addr !1397
  br label %dec_label_pc_1003eb6, !insn.addr !1398

dec_label_pc_1003eb6:                             ; preds = %dec_label_pc_1003eb6, %dec_label_pc_1003eb3
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %0 = add i32 %ecx.0.reload, -1, !insn.addr !1399
  %1 = icmp eq i32 %0, 0, !insn.addr !1399
  %2 = icmp eq i1 %1, false, !insn.addr !1400
  store i32 %0, i32* %ecx.0.reg2mem, !insn.addr !1400
  br i1 %2, label %dec_label_pc_1003eb6, label %dec_label_pc_1003f04, !insn.addr !1400

dec_label_pc_1003f04:                             ; preds = %dec_label_pc_1003eb6
  %3 = call i32 @function_1003f15(), !insn.addr !1401
  ret i32 %3, !insn.addr !1401
}

define i32 @function_1003f06() local_unnamed_addr {
dec_label_pc_1003f06:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1402
}

define i32 @function_1003f15() local_unnamed_addr {
dec_label_pc_1003f15:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @function_1003f36(i32 %0, i32 %1), !insn.addr !1403
  ret i32 %2, !insn.addr !1403
}

define i32 @function_1003f31(i32 %arg1) local_unnamed_addr {
dec_label_pc_1003f31:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1404
}

define i32 @function_1003f36(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1003f36:
  %0 = call i32 @function_1003f48(), !insn.addr !1405
  ret i32 %0, !insn.addr !1405
}

define i32 @function_1003f3b(i16 %arg1) local_unnamed_addr {
dec_label_pc_1003f3b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %0, 256
  %3 = and i32 %2, 65280
  %4 = or i32 %3, %1
  %5 = xor i32 %4, 186, !insn.addr !1406
  ret i32 %5, !insn.addr !1407
}

define i32 @function_1003f48() local_unnamed_addr {
dec_label_pc_1003f48:
  %0 = call i32 @function_1003f5b(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1408
  ret i32 %0, !insn.addr !1408
}

define i32 @function_1003f50() local_unnamed_addr {
dec_label_pc_1003f50:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__asm_wait(), !insn.addr !1409
  %4 = xor i32 %2, %1, !insn.addr !1410
  %5 = inttoptr i32 %2 to i32*, !insn.addr !1410
  store i32 %4, i32* %5, align 4, !insn.addr !1410
  %6 = udiv i32 %3, 256, !insn.addr !1411
  %7 = trunc i32 %6 to i8, !insn.addr !1411
  %8 = add i32 %0, 5, !insn.addr !1411
  %9 = inttoptr i32 %8 to i8*, !insn.addr !1411
  %10 = load i8, i8* %9, align 1, !insn.addr !1411
  %11 = add i8 %10, %7, !insn.addr !1411
  %12 = zext i8 %11 to i32, !insn.addr !1411
  %13 = mul i32 %12, 256, !insn.addr !1411
  %14 = and i32 %3, -65281, !insn.addr !1411
  %15 = or i32 %13, %14, !insn.addr !1411
  %16 = add i32 %15, -1, !insn.addr !1412
  ret i32 %16, !insn.addr !1413
}

define i32 @function_1003f5b(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
dec_label_pc_1003f5b:
  %edi.0.reg2mem = alloca i32, !insn.addr !1414
  %esi.0.reg2mem = alloca i32, !insn.addr !1414
  %ecx.0.reg2mem = alloca i32, !insn.addr !1414
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = icmp eq i32 %2, 0, !insn.addr !1414
  br i1 %4, label %dec_label_pc_10040ff, label %dec_label_pc_1003f72, !insn.addr !1415

dec_label_pc_1003f72:                             ; preds = %dec_label_pc_1003f5b
  %5 = add i32 %2, %1, !insn.addr !1416
  %6 = add i32 %5, 24, !insn.addr !1417
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1417
  %8 = load i32, i32* %7, align 4, !insn.addr !1417
  %9 = add i32 %5, 32, !insn.addr !1418
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1418
  %11 = load i32, i32* %10, align 4, !insn.addr !1418
  %12 = add i32 %11, %1, !insn.addr !1419
  %13 = select i1 %3, i32 -1, i32 1
  %14 = add i32 %0, -8
  %15 = inttoptr i32 %14 to i32*
  %16 = add i32 %0, 36
  %17 = inttoptr i32 %16 to i32*
  store i32 %8, i32* %ecx.0.reg2mem, !insn.addr !1420
  br label %dec_label_pc_1003f9b, !insn.addr !1420

dec_label_pc_1003f9b:                             ; preds = %dec_label_pc_1003ff7, %dec_label_pc_1003f72
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %18 = icmp eq i32 %ecx.0.reload, 0, !insn.addr !1421
  br i1 %18, label %dec_label_pc_10040ff, label %dec_label_pc_1003fb3, !insn.addr !1422

dec_label_pc_1003fb3:                             ; preds = %dec_label_pc_1003f9b
  %19 = add i32 %ecx.0.reload, -1, !insn.addr !1423
  %20 = mul i32 %19, 4, !insn.addr !1424
  %21 = add i32 %12, %20, !insn.addr !1424
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1424
  %23 = load i32, i32* %22, align 4, !insn.addr !1424
  %24 = add i32 %23, %1, !insn.addr !1425
  store i32 %24, i32* %esi.0.reg2mem, !insn.addr !1426
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !1426
  br label %dec_label_pc_1003fc9, !insn.addr !1426

dec_label_pc_1003fc9:                             ; preds = %dec_label_pc_1003fc9, %dec_label_pc_1003fb3
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %25 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !1427
  %26 = load i8, i8* %25, align 1, !insn.addr !1427
  %27 = zext i8 %26 to i32, !insn.addr !1427
  %28 = add i32 %esi.0.reload, %13, !insn.addr !1427
  %29 = udiv i32 %edi.0.reload, 8192, !insn.addr !1428
  %30 = mul i32 %edi.0.reload, 524288, !insn.addr !1428
  %31 = or i32 %29, %30, !insn.addr !1428
  %32 = add i32 %31, %27, !insn.addr !1429
  %33 = icmp eq i8 %26, 0, !insn.addr !1430
  %34 = icmp eq i1 %33, false, !insn.addr !1431
  store i32 %28, i32* %esi.0.reg2mem, !insn.addr !1431
  store i32 %32, i32* %edi.0.reg2mem, !insn.addr !1431
  br i1 %34, label %dec_label_pc_1003fc9, label %dec_label_pc_1003ff7, !insn.addr !1431

dec_label_pc_1003ff7:                             ; preds = %dec_label_pc_1003fc9
  %35 = load i32, i32* %15, align 4, !insn.addr !1432
  %36 = add i32 %35, %32, !insn.addr !1432
  %37 = load i32, i32* %17, align 4, !insn.addr !1433
  %38 = icmp eq i32 %36, %37, !insn.addr !1433
  %39 = icmp eq i1 %38, false, !insn.addr !1434
  store i32 %19, i32* %ecx.0.reg2mem, !insn.addr !1434
  br i1 %39, label %dec_label_pc_1003f9b, label %dec_label_pc_100401f, !insn.addr !1434

dec_label_pc_100401f:                             ; preds = %dec_label_pc_1003ff7
  %40 = add i32 %5, 36, !insn.addr !1435
  %41 = inttoptr i32 %40 to i32*, !insn.addr !1435
  %42 = load i32, i32* %41, align 4, !insn.addr !1435
  %43 = mul i32 %19, 2, !insn.addr !1436
  %44 = add i32 %43, %1, !insn.addr !1437
  %45 = add i32 %44, %42, !insn.addr !1436
  %46 = inttoptr i32 %45 to i16*, !insn.addr !1436
  %47 = load i16, i16* %46, align 2, !insn.addr !1436
  %48 = zext i16 %47 to i32, !insn.addr !1436
  %49 = and i32 %19, 1073676288, !insn.addr !1436
  %50 = or i32 %49, %48, !insn.addr !1436
  %51 = add i32 %5, 28, !insn.addr !1438
  %52 = inttoptr i32 %51 to i32*, !insn.addr !1438
  %53 = load i32, i32* %52, align 4, !insn.addr !1438
  %54 = add i32 %53, %1, !insn.addr !1439
  %55 = mul i32 %50, 4, !insn.addr !1440
  %56 = add i32 %54, %55, !insn.addr !1440
  %57 = inttoptr i32 %56 to i32*, !insn.addr !1440
  %58 = load i32, i32* %57, align 4, !insn.addr !1440
  %59 = add i32 %58, %1, !insn.addr !1441
  ret i32 %59, !insn.addr !1442

dec_label_pc_10040ff:                             ; preds = %dec_label_pc_1003f9b, %dec_label_pc_1003f5b
  %60 = call i32 @function_1004114(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1443
  ret i32 %60, !insn.addr !1443
}

define i32 @function_1004105() local_unnamed_addr {
dec_label_pc_1004105:
  %0 = call i32 @function_2b5d1885(), !insn.addr !1444
  ret i32 %0, !insn.addr !1444
}

define i32 @function_1004114(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1004114:
  %0 = call i32 @function_1004126(), !insn.addr !1445
  ret i32 %0, !insn.addr !1445
}

define i32 @function_100411b() local_unnamed_addr {
dec_label_pc_100411b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = icmp ne i32 %0, 1, !insn.addr !1446
  %3 = icmp eq i1 %2, %1, !insn.addr !1446
  br i1 %3, label %4, label %dec_label_pc_100411d, !insn.addr !1446

; <label>:4:                                      ; preds = %dec_label_pc_100411b
  %5 = call i32 @function_100413c(), !insn.addr !1446
  br label %dec_label_pc_100411d, !insn.addr !1446

dec_label_pc_100411d:                             ; preds = %4, %dec_label_pc_100411b
  %6 = load i32, i32* inttoptr (i32 -312469961 to i32*), align 4, !insn.addr !1447
  ret i32 %6, !insn.addr !1448
}

define i32 @function_1004126() local_unnamed_addr {
dec_label_pc_1004126:
  %0 = call i32 @function_100413c(), !insn.addr !1449
  ret i32 %0, !insn.addr !1449
}

define i32 @function_1004132() local_unnamed_addr {
dec_label_pc_1004132:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1450
}

define i32 @function_100413c() local_unnamed_addr {
dec_label_pc_100413c:
  %0 = call i32 @function_1003e9e(), !insn.addr !1451
  ret i32 %0, !insn.addr !1451
}

define i32 @function_1004141() local_unnamed_addr {
dec_label_pc_1004141:
  %0 = call i32 @function_1004150(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1452
  ret i32 %0, !insn.addr !1452
}

define i32 @function_100414e() local_unnamed_addr {
dec_label_pc_100414e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1004150(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004150:
  %0 = call i32 @function_1004164(), !insn.addr !1453
  ret i32 %0, !insn.addr !1453
}

define i32 @function_1004156() local_unnamed_addr {
dec_label_pc_1004156:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_6()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = and i32 %1, 14
  %5 = icmp ugt i32 %4, 9, !insn.addr !1454
  %6 = or i1 %5, %3, !insn.addr !1454
  %7 = add i32 %1, 6, !insn.addr !1454
  %8 = select i1 %6, i32 %7, i32 %1, !insn.addr !1454
  %9 = zext i1 %6 to i32, !insn.addr !1454
  %10 = and i32 %8, 15, !insn.addr !1454
  %11 = and i32 %1, -65536, !insn.addr !1454
  %12 = or i32 %10, %11, !insn.addr !1454
  %13 = mul i32 %9, 256
  %14 = add i32 %13, %1
  %15 = and i32 %14, 65280, !insn.addr !1454
  %16 = or i32 %12, %15, !insn.addr !1454
  %17 = fptosi x86_fp80 %2 to i16, !insn.addr !1455
  %18 = add i32 %0, 2039054742, !insn.addr !1455
  %19 = inttoptr i32 %18 to i16*, !insn.addr !1455
  store i16 %17, i16* %19, align 2, !insn.addr !1455
  ret i32 %16, !insn.addr !1456
}

define i32 @function_1004164() local_unnamed_addr {
dec_label_pc_1004164:
  %0 = call i32 @function_1004178(), !insn.addr !1457
  ret i32 %0, !insn.addr !1457
}

define i32 @function_1004169() local_unnamed_addr {
dec_label_pc_1004169:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = mul i32 %2, %0, !insn.addr !1458
  %4 = trunc i32 %1 to i8
  %5 = inttoptr i32 %0 to i8*, !insn.addr !1459
  store i8 %4, i8* %5, align 1, !insn.addr !1459
  %6 = trunc i32 %3 to i8, !insn.addr !1460
  %7 = icmp eq i8 %6, 15, !insn.addr !1460
  %8 = icmp eq i1 %7, false, !insn.addr !1461
  br i1 %8, label %9, label %dec_label_pc_1004170, !insn.addr !1461

; <label>:9:                                      ; preds = %dec_label_pc_1004169
  %10 = call i32 @function_100414e(), !insn.addr !1461
  br label %dec_label_pc_1004170, !insn.addr !1461

dec_label_pc_1004170:                             ; preds = %9, %dec_label_pc_1004169
  %11 = call i32 @unknown_53668edb(), !insn.addr !1462
  %sext = mul i32 %11, 65536
  %12 = sdiv i32 %sext, 65536, !insn.addr !1463
  %13 = and i32 %12, -256, !insn.addr !1464
  %14 = or i32 %13, 245, !insn.addr !1464
  ret i32 %14, !insn.addr !1464
}

define i32 @function_1004178() local_unnamed_addr {
dec_label_pc_1004178:
  %0 = call i32 @function_100418c(i32 64), !insn.addr !1465
  ret i32 %0, !insn.addr !1465
}

define i32 @function_1004184() local_unnamed_addr {
dec_label_pc_1004184:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_wait(), !insn.addr !1466
  %3 = sub i32 %0, %1, !insn.addr !1467
  %4 = inttoptr i32 %0 to i32*, !insn.addr !1467
  store i32 %3, i32* %4, align 4, !insn.addr !1467
  ret i32 %2, !insn.addr !1468
}

define i32 @function_100418c(i32 %arg1) local_unnamed_addr {
dec_label_pc_100418c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_10041d1(i32 -447503272, i32 0, i32 %0, i32 4096), !insn.addr !1469
  ret i32 %1, !insn.addr !1469
}

define i32 @function_10041c1() local_unnamed_addr {
dec_label_pc_10041c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10041c3(i16 %arg1) local_unnamed_addr {
dec_label_pc_10041c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %sext = mul i32 %0, 65536
  %1 = sdiv i32 %sext, 65536, !insn.addr !1470
  ret i32 %1, !insn.addr !1471
}

define i32 @function_10041d1(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10041d1:
  %0 = call i32 @function_10041e7(), !insn.addr !1472
  ret i32 %0, !insn.addr !1472
}

define i32 @function_10041e5() local_unnamed_addr {
dec_label_pc_10041e5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1473
}

define i32 @function_10041e7() local_unnamed_addr {
dec_label_pc_10041e7:
  %0 = call i32 @function_10041fe(), !insn.addr !1474
  ret i32 %0, !insn.addr !1474
}

define i32 @function_10041f0() local_unnamed_addr {
dec_label_pc_10041f0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_ff157ccd(i32 %0), !insn.addr !1475
  ret i32 %1, !insn.addr !1475
}

define i32 @function_10041fb() local_unnamed_addr {
dec_label_pc_10041fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10041fe() local_unnamed_addr {
dec_label_pc_10041fe:
  %0 = call i32 @function_1004331(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1476
  %1 = call i32 @function_1004214(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1477
  ret i32 %1, !insn.addr !1477
}

define i32 @function_100420a() local_unnamed_addr {
dec_label_pc_100420a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1478
}

define i32 @function_1004214(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004214:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %arg1 to i8*, !insn.addr !1479
  %2 = load i8, i8* %1, align 1, !insn.addr !1479
  %3 = inttoptr i32 %0 to i8*, !insn.addr !1479
  store i8 %2, i8* %3, align 1, !insn.addr !1479
  %4 = call i32 @function_1004235(), !insn.addr !1480
  ret i32 %4, !insn.addr !1480
}

define i32 @function_100422c(i32 %arg1) local_unnamed_addr {
dec_label_pc_100422c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1481
}

define i32 @function_1004235() local_unnamed_addr {
dec_label_pc_1004235:
  %0 = call i32 @function_10042fd(), !insn.addr !1482
  %1 = call i32 @function_1004248(), !insn.addr !1483
  ret i32 %1, !insn.addr !1483
}

define i32 @function_100423f() local_unnamed_addr {
dec_label_pc_100423f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %2, -65281, !insn.addr !1484
  %4 = or i32 %3, 2560, !insn.addr !1484
  %5 = inttoptr i32 %0 to i32*, !insn.addr !1485
  store i32 %4, i32* %5, align 4, !insn.addr !1485
  ret i32 %1, !insn.addr !1486
}

define i32 @function_1004248() local_unnamed_addr {
dec_label_pc_1004248:
  %0 = call i32 @function_1004266(i32 -1648519770), !insn.addr !1487
  ret i32 %0, !insn.addr !1487
}

define i32 @function_100425e() local_unnamed_addr {
dec_label_pc_100425e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -89665504, !insn.addr !1488
  %2 = add i32 %0, -89665625, !insn.addr !1489
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1489
  %4 = load i32, i32* %3, align 4, !insn.addr !1489
  %5 = sub i32 %1, %4, !insn.addr !1489
  ret i32 %5, !insn.addr !1489
}

define i32 @function_1004266(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004266:
  %0 = call i32 @function_1004279(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !1490
  ret i32 %0, !insn.addr !1490
}

define i32 @function_1004270() local_unnamed_addr {
dec_label_pc_1004270:
  %eax.0.reg2mem = alloca i32, !insn.addr !1491
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = and i32 %2, 14
  %5 = icmp ugt i32 %4, 9, !insn.addr !1491
  %6 = or i1 %3, %5, !insn.addr !1491
  %7 = sext i1 %6 to i32, !insn.addr !1491
  %8 = and i32 %2, -65536, !insn.addr !1491
  %9 = mul i32 %7, 256
  %10 = add i32 %9, %2
  %11 = and i32 %10, 65280, !insn.addr !1491
  %12 = trunc i32 %0 to i8
  %13 = add i8 %12, -1, !insn.addr !1492
  %14 = inttoptr i32 %0 to i8*, !insn.addr !1492
  store i8 %13, i8* %14, align 1, !insn.addr !1492
  %15 = and i32 %1, 255, !insn.addr !1493
  %16 = or i32 %8, %15, !insn.addr !1491
  %17 = or i32 %16, %11, !insn.addr !1493
  %18 = icmp eq i32 %1, 0, !insn.addr !1494
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !1494
  br i1 %18, label %19, label %dec_label_pc_1004277, !insn.addr !1494

; <label>:19:                                     ; preds = %dec_label_pc_1004270
  %20 = call i32 @function_10042f0(), !insn.addr !1494
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !1494
  br label %dec_label_pc_1004277, !insn.addr !1494

dec_label_pc_1004277:                             ; preds = %19, %dec_label_pc_1004270
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %21 = add i32 %eax.0.reload, 135, !insn.addr !1495
  %22 = and i32 %21, 255, !insn.addr !1495
  %23 = and i32 %eax.0.reload, -256, !insn.addr !1495
  %24 = or i32 %22, %23, !insn.addr !1495
  ret i32 %24, !insn.addr !1495
}

define i32 @function_1004279(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1004279:
  %0 = call i32 @function_10042e6(i32 0), !insn.addr !1496
  ret i32 %0, !insn.addr !1496
}

define i32 @function_10042e3(i32 %arg1) local_unnamed_addr {
dec_label_pc_10042e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10042e5() local_unnamed_addr {
dec_label_pc_10042e5:
  %storemerge.reg2mem = alloca i32, !insn.addr !1497
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = trunc i32 %0 to i8, !insn.addr !1497
  %4 = and i8 %3, 14, !insn.addr !1497
  %5 = icmp ugt i8 %4, 9, !insn.addr !1497
  %6 = or i1 %1, %5, !insn.addr !1497
  %7 = icmp ugt i8 %3, -103
  %8 = or i1 %7, %2
  br i1 %6, label %9, label %14, !insn.addr !1497

; <label>:9:                                      ; preds = %dec_label_pc_10042e5
  %.v = select i1 %8, i32 102, i32 6
  %10 = add i32 %.v, %0, !insn.addr !1497
  %11 = and i32 %10, 255, !insn.addr !1497
  %12 = and i32 %0, -256, !insn.addr !1497
  %13 = or i32 %11, %12, !insn.addr !1497
  store i32 %13, i32* %storemerge.reg2mem, !insn.addr !1497
  br label %20, !insn.addr !1497

; <label>:14:                                     ; preds = %dec_label_pc_10042e5
  %15 = add i32 %0, 96, !insn.addr !1497
  %16 = select i1 %8, i32 %15, i32 %0, !insn.addr !1497
  %17 = and i32 %16, 255, !insn.addr !1497
  %18 = and i32 %0, -256, !insn.addr !1497
  %19 = or i32 %17, %18, !insn.addr !1497
  store i32 %19, i32* %storemerge.reg2mem, !insn.addr !1497
  br label %20, !insn.addr !1497

; <label>:20:                                     ; preds = %9, %14
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !1497
}

define i32 @function_10042e6(i32 %arg1) local_unnamed_addr {
dec_label_pc_10042e6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_10042fb(i32 %0), !insn.addr !1498
  ret i32 %1, !insn.addr !1498
}

define i32 @function_10042f0() local_unnamed_addr {
dec_label_pc_10042f0:
  %eax.0.reg2mem = alloca i32, !insn.addr !1499
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !1499
  %3 = icmp ult i32 %2, %1, !insn.addr !1499
  %4 = icmp eq i32 %2, 0, !insn.addr !1499
  %5 = inttoptr i32 %1 to i32*, !insn.addr !1499
  store i32 %2, i32* %5, align 4, !insn.addr !1499
  %6 = or i1 %3, %4, !insn.addr !1500
  br i1 %6, label %7, label %dec_label_pc_10042f4, !insn.addr !1500

; <label>:7:                                      ; preds = %dec_label_pc_10042f0
  %8 = call i32 @function_1004321(), !insn.addr !1500
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !1500
  br label %dec_label_pc_10042f4, !insn.addr !1500

dec_label_pc_10042f4:                             ; preds = %7, %dec_label_pc_10042f0
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %9 = load i8, i8* inttoptr (i32 -284680383 to i8*), align 1, !insn.addr !1501
  %10 = zext i8 %9 to i32, !insn.addr !1501
  %11 = and i32 %eax.0.reload, -256, !insn.addr !1501
  %12 = or i32 %11, %10, !insn.addr !1501
  ret i32 %12, !insn.addr !1502
}

define i32 @function_10042fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_10042fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1503
}

define i32 @function_10042fd() local_unnamed_addr {
dec_label_pc_10042fd:
  %0 = call i32 @__readfsdword(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1504
  ret i32 %0, !insn.addr !1504
}

define i32 @function_1004307(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004307:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1505
}

define i32 @function_1004310(i32 %Offset) local_unnamed_addr {
dec_label_pc_1004310:
  %0 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 %Offset), !insn.addr !1506
  store i32 %1, i32* %stack_var_-4, align 4, !insn.addr !1506
  %2 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1506
  call void @__writefsdword(i32 %0, i32 %2), !insn.addr !1507
  %3 = call i32 @function_100432a(), !insn.addr !1508
  ret i32 %3, !insn.addr !1508
}

define i32 @function_1004321() local_unnamed_addr {
dec_label_pc_1004321:
  %storemerge.reg2mem = alloca i32, !insn.addr !1509
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %0, 256
  %2 = icmp ne i32 %1, 0, !insn.addr !1510
  %3 = and i32 %0, 4096
  %4 = icmp ne i32 %3, 0, !insn.addr !1510
  %5 = trunc i32 %0 to i8, !insn.addr !1511
  %6 = and i8 %5, 14, !insn.addr !1511
  %7 = icmp ugt i8 %6, 9, !insn.addr !1511
  %8 = or i1 %4, %7, !insn.addr !1511
  %9 = icmp ugt i8 %5, -103
  %10 = or i1 %9, %2
  br i1 %8, label %11, label %16, !insn.addr !1511

; <label>:11:                                     ; preds = %dec_label_pc_1004321
  %.v = select i1 %10, i32 102, i32 6
  %12 = add i32 %.v, %0, !insn.addr !1511
  %13 = and i32 %12, 255, !insn.addr !1511
  %14 = and i32 %0, -256, !insn.addr !1511
  %15 = or i32 %13, %14, !insn.addr !1511
  store i32 %15, i32* %storemerge.reg2mem, !insn.addr !1511
  br label %22, !insn.addr !1511

; <label>:16:                                     ; preds = %dec_label_pc_1004321
  %17 = add i32 %0, 96, !insn.addr !1511
  %18 = select i1 %10, i32 %17, i32 %0, !insn.addr !1511
  %19 = and i32 %18, 255, !insn.addr !1511
  %20 = and i32 %0, -256, !insn.addr !1511
  %21 = or i32 %19, %20, !insn.addr !1511
  store i32 %21, i32* %storemerge.reg2mem, !insn.addr !1511
  br label %22, !insn.addr !1511

; <label>:22:                                     ; preds = %11, %16
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %23 = and i32 %storemerge.reload, -45, !insn.addr !1512
  call void @__asm_int(i32 86), !insn.addr !1513
  ret i32 %23, !insn.addr !1513
}

define i32 @function_100432a() local_unnamed_addr {
dec_label_pc_100432a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1514
}

define i32 @function_1004331(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004331:
  %eax.0.reg2mem = alloca i32, !insn.addr !1515
  %ecx.0.reg2mem = alloca i32, !insn.addr !1515
  %esp.0.reg2mem = alloca i32, !insn.addr !1515
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_4 = alloca i32, align 4
  %3 = call i32 @__asm_fnstenv(), !insn.addr !1516
  %4 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !1517
  %5 = add i32 %arg1, 27, !insn.addr !1518
  %6 = inttoptr i32 %5 to i32*, !insn.addr !1518
  %7 = load i32, i32* %6, align 4, !insn.addr !1518
  %8 = xor i32 %7, %3, !insn.addr !1518
  store i32 %8, i32* %6, align 4, !insn.addr !1518
  store i32 %4, i32* %esp.0.reg2mem, !insn.addr !1518
  store i32 428, i32* %ecx.0.reg2mem, !insn.addr !1518
  br label %dec_label_pc_100434e, !insn.addr !1518

dec_label_pc_100434e:                             ; preds = %dec_label_pc_100434e, %dec_label_pc_1004331
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %9 = call i32 @__asm_in(i32 49), !insn.addr !1519
  %10 = add i32 %esp.0.reload, -1, !insn.addr !1520
  %11 = icmp eq i32 %10, 0, !insn.addr !1520
  %12 = add nsw i32 %ecx.0.reload, -1, !insn.addr !1521
  %13 = icmp eq i32 %12, 0, !insn.addr !1521
  %14 = or i1 %11, %13, !insn.addr !1521
  store i32 %10, i32* %esp.0.reg2mem, !insn.addr !1521
  store i32 %12, i32* %ecx.0.reg2mem, !insn.addr !1521
  br i1 %14, label %dec_label_pc_100435d, label %dec_label_pc_100434e, !insn.addr !1521

dec_label_pc_100435d:                             ; preds = %dec_label_pc_100434e
  %15 = xor i32 %2, %0, !insn.addr !1522
  %16 = inttoptr i32 %2 to i32*, !insn.addr !1522
  store i32 %15, i32* %16, align 4, !insn.addr !1522
  %17 = icmp eq i32 %0, %1, !insn.addr !1523
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !1524
  br i1 %17, label %dec_label_pc_1004364, label %18, !insn.addr !1524

; <label>:18:                                     ; preds = %dec_label_pc_100435d
  %19 = call i32 @function_10042fd(), !insn.addr !1524
  store i32 %19, i32* %eax.0.reg2mem, !insn.addr !1524
  br label %dec_label_pc_1004364, !insn.addr !1524

dec_label_pc_1004364:                             ; preds = %dec_label_pc_100435d, %18
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1525
}

define i32 @function_100436f(i32 %arg1) local_unnamed_addr {
dec_label_pc_100436f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = udiv i32 %2, 256, !insn.addr !1526
  %5 = trunc i32 %4 to i8, !insn.addr !1526
  %6 = mul i32 %3, 4, !insn.addr !1526
  %7 = add i32 %1, -780551114, !insn.addr !1526
  %8 = add i32 %7, %6, !insn.addr !1526
  %9 = inttoptr i32 %8 to i8*, !insn.addr !1526
  store i8 %5, i8* %9, align 1, !insn.addr !1526
  ret i32 %0, !insn.addr !1527
}

define i32 @function_1004383() local_unnamed_addr {
dec_label_pc_1004383:
  %eax.0.reg2mem = alloca i32, !insn.addr !1528
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_124 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %6 = icmp eq i1 %5, false, !insn.addr !1528
  br i1 %6, label %dec_label_pc_100439a, label %dec_label_pc_1004385, !insn.addr !1528

dec_label_pc_1004385:                             ; preds = %dec_label_pc_1004383
  %7 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !1529
  call void @__asm_into(i32 %4), !insn.addr !1530
  %8 = icmp ult i32 %3, -1735324899
  br i1 %8, label %dec_label_pc_10043b3, label %dec_label_pc_1004390, !insn.addr !1531

dec_label_pc_1004390:                             ; preds = %dec_label_pc_1004385
  %9 = and i32 %2, -256, !insn.addr !1532
  %10 = add i32 %3, %2, !insn.addr !1532
  %11 = and i32 %10, 255, !insn.addr !1532
  %12 = or i32 %11, %9, !insn.addr !1532
  %13 = call i8 @__asm_in.1(i8 -57), !insn.addr !1533
  %14 = sext i8 %13 to i32, !insn.addr !1533
  %15 = and i32 %7, -256, !insn.addr !1533
  %16 = or i32 %15, %14, !insn.addr !1533
  %17 = add i32 %3, -4, !insn.addr !1534
  %18 = inttoptr i32 %17 to i32*, !insn.addr !1534
  store i32 %12, i32* %18, align 4, !insn.addr !1534
  store i32 %16, i32* %eax.0.reg2mem, !insn.addr !1535
  br label %dec_label_pc_100439a, !insn.addr !1535

dec_label_pc_100439a:                             ; preds = %dec_label_pc_1004390, %dec_label_pc_1004383
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %19 = add i32 %0, -86, !insn.addr !1536
  %20 = inttoptr i32 %19 to i32*, !insn.addr !1536
  %21 = load i32, i32* %20, align 4, !insn.addr !1536
  %22 = add i32 %21, 1793904004, !insn.addr !1536
  store i32 %22, i32* %20, align 4, !insn.addr !1536
  ret i32 %eax.0.reload, !insn.addr !1537

dec_label_pc_10043b3:                             ; preds = %dec_label_pc_1004385
  %23 = trunc i32 %1 to i16, !insn.addr !1538
  %24 = call i8 @__asm_insb(i16 %23), !insn.addr !1538
  store i8 %24, i8* inttoptr (i32 -905191779 to i8*), align 1, !insn.addr !1538
  store i32 %7, i32* inttoptr (i32 -421510578 to i32*), align 4, !insn.addr !1539
  %25 = ptrtoint i32* %stack_var_124 to i32, !insn.addr !1540
  %26 = add i32 %3, -4, !insn.addr !1541
  %27 = inttoptr i32 %26 to i32*, !insn.addr !1541
  ret i32 %25, !insn.addr !1541
}

define i32 @function_10043ce(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10043ce:
  %eax.0.reg2mem = alloca i32, !insn.addr !1542
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call x86_fp80 @__decompiler_undefined_function_6()
  %7 = call i16 @__decompiler_undefined_function_1()
  %8 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %9 = select i1 %8, i32 -1, i32 1, !insn.addr !1542
  %10 = add i32 %9, %0, !insn.addr !1542
  %11 = udiv i32 %4, 256, !insn.addr !1543
  %12 = trunc i32 %11 to i8, !insn.addr !1543
  %13 = add i32 %2, -2052815924, !insn.addr !1543
  %14 = inttoptr i32 %13 to i8 addrspace(258)*, !insn.addr !1543
  store i8 %12, i8 addrspace(258)* %14, align 1, !insn.addr !1543
  %15 = select i1 %8, i32 -4, i32 4, !insn.addr !1544
  %16 = add i32 %15, %1, !insn.addr !1544
  %17 = icmp slt i32 %1, 0, !insn.addr !1545
  %18 = mul i32 %arg1, 256, !insn.addr !1546
  %19 = and i32 %18, 65280, !insn.addr !1546
  %20 = and i32 %arg1, -65281, !insn.addr !1546
  %21 = or i32 %19, %20, !insn.addr !1546
  %22 = icmp eq i1 %17, false, !insn.addr !1547
  br i1 %22, label %dec_label_pc_1004460, label %dec_label_pc_10043e3, !insn.addr !1547

dec_label_pc_10043e3:                             ; preds = %dec_label_pc_10043ce
  %23 = trunc i32 %21 to i16, !insn.addr !1548
  %24 = inttoptr i32 %16 to i32*, !insn.addr !1548
  %25 = load i32, i32* %24, align 4, !insn.addr !1548
  call void @__asm_outsd(i16 %23, i32 %25), !insn.addr !1548
  %26 = add i32 %21, -1646181780, !insn.addr !1549
  %27 = inttoptr i32 %26 to i8*, !insn.addr !1549
  %28 = load i8, i8* %27, align 1, !insn.addr !1549
  %29 = udiv i32 %5, 256, !insn.addr !1549
  %30 = trunc i32 %29 to i8, !insn.addr !1549
  %31 = and i8 %28, %30, !insn.addr !1549
  store i8 %31, i8* %27, align 1, !insn.addr !1549
  %32 = call i32 @__asm_vzeroupper(), !insn.addr !1550
  %33 = trunc i32 %3 to i8, !insn.addr !1551
  %34 = add i32 %16, 123, !insn.addr !1551
  %35 = inttoptr i32 %34 to i8*, !insn.addr !1551
  %36 = load i8, i8* %35, align 1, !insn.addr !1551
  %37 = icmp ugt i8 %36, %33, !insn.addr !1551
  %38 = sext i16 %7 to i32, !insn.addr !1552
  store i32 %38, i32* %eax.0.reg2mem, !insn.addr !1553
  br i1 %37, label %39, label %dec_label_pc_1004403, !insn.addr !1553

; <label>:39:                                     ; preds = %dec_label_pc_10043e3
  %40 = call i32 @function_1004383(), !insn.addr !1553
  store i32 %40, i32* %eax.0.reg2mem, !insn.addr !1553
  br label %dec_label_pc_1004403, !insn.addr !1553

dec_label_pc_1004403:                             ; preds = %39, %dec_label_pc_10043e3
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %41 = trunc i32 %arg4 to i16, !insn.addr !1554
  %42 = call i8 @__asm_insb(i16 %41), !insn.addr !1554
  %43 = inttoptr i32 %10 to i8*, !insn.addr !1554
  store i8 %42, i8* %43, align 1, !insn.addr !1554
  %44 = and i32 %eax.0.reload, -65281, !insn.addr !1555
  %45 = or i32 %44, 16384, !insn.addr !1555
  ret i32 %45, !insn.addr !1556

dec_label_pc_1004460:                             ; preds = %dec_label_pc_10043ce
  store i32 %16, i32* %stack_var_-4, align 4, !insn.addr !1557
  %46 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1557
  %47 = mul i32 %2, 8, !insn.addr !1558
  %48 = add i32 %47, %46, !insn.addr !1558
  %49 = inttoptr i32 %48 to i8*, !insn.addr !1558
  %50 = load i8, i8* %49, align 4, !insn.addr !1558
  %51 = trunc i32 %21 to i16, !insn.addr !1559
  %52 = call i32 @__asm_in.5(i16 %51), !insn.addr !1559
  %53 = udiv i32 %5, 256, !insn.addr !1560
  %54 = trunc i32 %53 to i8, !insn.addr !1560
  %55 = udiv i32 %1, 256, !insn.addr !1560
  %56 = trunc i32 %55 to i8, !insn.addr !1560
  %57 = sub i8 %54, %56, !insn.addr !1560
  %58 = xor i32 %53, %55
  %59 = trunc i32 %58 to i8, !insn.addr !1560
  %60 = xor i8 %57, %54, !insn.addr !1560
  %61 = and i8 %60, %59, !insn.addr !1560
  %62 = icmp slt i8 %61, 0, !insn.addr !1560
  %63 = add i32 %16, 548792082, !insn.addr !1561
  %64 = inttoptr i32 %63 to i64*, !insn.addr !1561
  %65 = load i64, i64* %64, align 4, !insn.addr !1561
  %66 = call i32 @__asm_bound(i64 %65), !insn.addr !1561
  %67 = inttoptr i32 %10 to i32*, !insn.addr !1562
  store i32 %52, i32* %67, align 4, !insn.addr !1562
  br i1 %62, label %dec_label_pc_10044b6, label %dec_label_pc_100447f, !insn.addr !1563

dec_label_pc_100447f:                             ; preds = %dec_label_pc_1004460
  %68 = trunc i32 %1 to i8, !insn.addr !1558
  %69 = xor i8 %50, %68, !insn.addr !1558
  %70 = or i8 %69, 126, !insn.addr !1564
  %71 = zext i16 %7 to i32, !insn.addr !1565
  %72 = and i32 %1, 1073741568, !insn.addr !1558
  %73 = zext i8 %70 to i32, !insn.addr !1564
  %74 = or i32 %72, %73, !insn.addr !1564
  %75 = add i32 %10, 4, !insn.addr !1562
  %76 = mul i32 %74, 4, !insn.addr !1566
  %77 = add i32 %76, %16, !insn.addr !1566
  %78 = inttoptr i32 %77 to i8*, !insn.addr !1566
  %79 = load i8, i8* %78, align 1, !insn.addr !1566
  %80 = trunc i32 %52 to i8, !insn.addr !1566
  %81 = add i8 %79, %80, !insn.addr !1566
  store i8 %81, i8* %78, align 1, !insn.addr !1566
  %82 = add nuw nsw i32 %71, 564803174, !insn.addr !1567
  %83 = inttoptr i32 %82 to i8*, !insn.addr !1567
  %84 = load i8, i8* %83, align 1, !insn.addr !1567
  store i8 %70, i8* %83, align 1, !insn.addr !1567
  %85 = add i32 %52, -59, !insn.addr !1568
  %86 = inttoptr i32 %85 to i32*, !insn.addr !1568
  %87 = load i32, i32* %86, align 4, !insn.addr !1568
  %88 = or i32 %87, %75, !insn.addr !1568
  %89 = trunc i32 %88 to i8, !insn.addr !1568
  %90 = call i8 @llvm.ctpop.i8(i8 %89), !range !258, !insn.addr !1568
  %91 = and i8 %90, 1, !insn.addr !1568
  %92 = icmp eq i8 %91, 0, !insn.addr !1568
  %93 = fptosi x86_fp80 %6 to i64, !insn.addr !1569
  %94 = add nsw i32 %71, -86, !insn.addr !1569
  %95 = inttoptr i32 %94 to i64*, !insn.addr !1569
  store i64 %93, i64* %95, align 4, !insn.addr !1569
  %96 = call i32 @__asm_int1(), !insn.addr !1570
  br i1 %92, label %dec_label_pc_10044e7, label %dec_label_pc_1004498, !insn.addr !1571

dec_label_pc_1004498:                             ; preds = %dec_label_pc_100447f
  %97 = add i32 %66, 18, !insn.addr !1572
  %98 = inttoptr i32 %97 to i32*, !insn.addr !1572
  %99 = load i32, i32* %98, align 4, !insn.addr !1572
  %100 = inttoptr i32 %99 to i32*, !insn.addr !1573
  %101 = load i32, i32* %100, align 4, !insn.addr !1573
  %102 = inttoptr i32 %88 to i32*, !insn.addr !1573
  store i32 %101, i32* %102, align 4, !insn.addr !1573
  %103 = call i32 @__asm_sti(), !insn.addr !1574
  %104 = and i32 %103, -105, !insn.addr !1575
  %105 = xor i32 %104, 148, !insn.addr !1576
  %106 = call i32 @__asm_hlt(), !insn.addr !1577
  %107 = add i32 %105, -8, !insn.addr !1578
  %108 = inttoptr i32 %107 to i32*, !insn.addr !1578
  %109 = load i32, i32* %108, align 4, !insn.addr !1578
  %110 = add i32 %109, %66, !insn.addr !1578
  store i32 %110, i32* %108, align 4, !insn.addr !1578
  %111 = add i32 %106, -124, !insn.addr !1579
  %112 = inttoptr i32 %111 to i32*, !insn.addr !1579
  %113 = load i32, i32* %112, align 4, !insn.addr !1579
  %114 = mul i32 %113, 32768, !insn.addr !1579
  store i32 %114, i32* %112, align 4, !insn.addr !1579
  ret i32 %106, !insn.addr !1579

dec_label_pc_10044b6:                             ; preds = %dec_label_pc_1004460
  %115 = and i32 %5, %21, !insn.addr !1580
  %116 = call i32 @__asm_hlt(), !insn.addr !1581
  %117 = trunc i32 %115 to i16, !insn.addr !1582
  %118 = trunc i32 %116 to i8, !insn.addr !1582
  call void @__asm_out(i16 %117, i8 %118), !insn.addr !1582
  ret i32 %116, !insn.addr !1583

dec_label_pc_10044e7:                             ; preds = %dec_label_pc_100447f
  %119 = and i32 %96, -256, !insn.addr !1584
  %120 = load i8, i8* inttoptr (i32 -520480342 to i8*), align 2, !insn.addr !1584
  %121 = zext i8 %120 to i32, !insn.addr !1584
  %122 = or i32 %119, %121, !insn.addr !1584
  %123 = add i32 %66, 151995873, !insn.addr !1585
  %124 = inttoptr i32 %123 to i8*, !insn.addr !1585
  %125 = load i8, i8* %124, align 1, !insn.addr !1585
  %126 = xor i8 %125, %84, !insn.addr !1585
  store i8 %126, i8* %124, align 1, !insn.addr !1585
  ret i32 %122, !insn.addr !1585
}

define i32 @function_10044f2() local_unnamed_addr {
dec_label_pc_10044f2:
  %edi.0.reg2mem = alloca i32, !insn.addr !1586
  %esp.0.reg2mem = alloca i32, !insn.addr !1586
  %edx.0.reg2mem = alloca i32, !insn.addr !1586
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_6()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %4 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !1586
  store i32 %4, i32* %stack_var_-4, align 4, !insn.addr !1586
  br i1 %2, label %dec_label_pc_1004543, label %dec_label_pc_10044f5, !insn.addr !1587

dec_label_pc_10044f5:                             ; preds = %dec_label_pc_10044f2
  ret i32 %0, !insn.addr !1588

dec_label_pc_1004543:                             ; preds = %dec_label_pc_10044f2
  %5 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1586
  call void @__asm_out.4(i32 199, i32 %0), !insn.addr !1589
  %6 = select i1 %3, i32 -1, i32 1
  store i32 %5, i32* %esp.0.reg2mem, !insn.addr !1589
  br label %dec_label_pc_1004545, !insn.addr !1589

dec_label_pc_1004545:                             ; preds = %dec_label_pc_100457d, %dec_label_pc_1004543
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %7 = trunc i32 %edx.0.reload to i16
  %8 = and i16 %7, 255
  %9 = or i16 %8, -16128, !insn.addr !1590
  %10 = call i32 @__asm_insd(i16 %9), !insn.addr !1590
  %11 = inttoptr i32 %edi.0.reload to i32*, !insn.addr !1590
  store i32 %10, i32* %11, align 4, !insn.addr !1590
  %12 = add i32 %esp.0.reload, 32, !insn.addr !1591
  %13 = add i32 %esp.0.reload, 36, !insn.addr !1592
  %14 = add i32 %esp.0.reload, 48, !insn.addr !1592
  %15 = add i32 %esp.0.reload, 52, !insn.addr !1592
  %16 = add i32 %esp.0.reload, 56, !insn.addr !1592
  %17 = inttoptr i32 %12 to i32*, !insn.addr !1592
  %18 = load i32, i32* %17, align 4, !insn.addr !1592
  %19 = inttoptr i32 %13 to i32*, !insn.addr !1592
  %20 = load i32, i32* %19, align 4, !insn.addr !1592
  %21 = inttoptr i32 %14 to i32*, !insn.addr !1592
  %22 = load i32, i32* %21, align 4, !insn.addr !1592
  %23 = inttoptr i32 %15 to i32*, !insn.addr !1592
  %24 = load i32, i32* %23, align 4, !insn.addr !1592
  %25 = inttoptr i32 %16 to i32*, !insn.addr !1592
  %26 = load i32, i32* %25, align 4, !insn.addr !1592
  %27 = inttoptr i32 %22 to i8*, !insn.addr !1593
  %28 = load i8, i8* %27, align 1, !insn.addr !1593
  %29 = add i8 %28, -92, !insn.addr !1593
  store i8 %29, i8* %27, align 1, !insn.addr !1593
  %30 = add i32 %20, %6, !insn.addr !1594
  %31 = call i32 @__asm_int3(), !insn.addr !1595
  %32 = inttoptr i32 %31 to i32*, !insn.addr !1596
  %33 = load i32, i32* %32, align 4, !insn.addr !1596
  %34 = udiv i32 %33, 2, !insn.addr !1596
  %35 = shl i32 %33, 31, !insn.addr !1596
  %36 = or i32 %34, %35, !insn.addr !1596
  store i32 %36, i32* %32, align 4, !insn.addr !1596
  %37 = and i32 %33, 1, !insn.addr !1596
  %38 = icmp ne i32 %37, 0, !insn.addr !1596
  %39 = add i32 %22, %18, !insn.addr !1597
  %40 = and i32 %39, 65535
  %41 = inttoptr i32 %40 to i8*, !insn.addr !1597
  %42 = load i8, i8* %41, align 1, !insn.addr !1597
  %43 = udiv i32 %26, 256, !insn.addr !1597
  %44 = trunc i32 %43 to i8, !insn.addr !1597
  %.neg1 = sext i1 %38 to i8
  %.neg2 = sub i8 %42, %44, !insn.addr !1597
  %45 = add i8 %.neg2, %.neg1, !insn.addr !1597
  store i8 %45, i8* %41, align 1, !insn.addr !1597
  %46 = add i32 %24, -186996800, !insn.addr !1598
  %47 = inttoptr i32 %46 to i32*, !insn.addr !1598
  %48 = load i32, i32* %47, align 4, !insn.addr !1598
  %49 = xor i32 %48, %22, !insn.addr !1598
  store i32 %49, i32* %47, align 4, !insn.addr !1598
  %50 = udiv i32 %24, 256, !insn.addr !1599
  %51 = trunc i32 %50 to i8, !insn.addr !1599
  %52 = add i32 %30, -461951648, !insn.addr !1599
  %53 = inttoptr i32 %52 to i8*, !insn.addr !1599
  %54 = load i8, i8* %53, align 1, !insn.addr !1599
  %55 = sub i8 %51, %54, !insn.addr !1599
  %56 = zext i8 %55 to i32, !insn.addr !1599
  %57 = mul i32 %56, 256, !insn.addr !1599
  %58 = and i32 %24, -65281, !insn.addr !1599
  %59 = or i32 %57, %58, !insn.addr !1599
  %60 = udiv i32 %22, 256, !insn.addr !1600
  %61 = trunc i32 %60 to i8, !insn.addr !1600
  %62 = add i32 %30, 1030496718, !insn.addr !1600
  %63 = inttoptr i32 %62 to i8*, !insn.addr !1600
  store i8 %61, i8* %63, align 1, !insn.addr !1600
  %64 = add i32 %esp.0.reload, 60, !insn.addr !1601
  %65 = inttoptr i32 %64 to i32*, !insn.addr !1601
  store i32 %59, i32* %65, align 4, !insn.addr !1601
  %66 = trunc i32 %59 to i16, !insn.addr !1602
  %67 = call i32 @__asm_in.5(i16 %66), !insn.addr !1602
  %68 = icmp eq i32 %26, 1, !insn.addr !1603
  br i1 %68, label %dec_label_pc_100457d.thread, label %dec_label_pc_100457d, !insn.addr !1603

dec_label_pc_100457d.thread:                      ; preds = %dec_label_pc_1004545
  %69 = add i32 %67, -9, !insn.addr !1604
  %70 = fptrunc x86_fp80 %1 to float, !insn.addr !1604
  %71 = inttoptr i32 %69 to float*, !insn.addr !1604
  store float %70, float* %71, align 4, !insn.addr !1604
  br label %dec_label_pc_100457f

dec_label_pc_100457d:                             ; preds = %dec_label_pc_1004545
  %72 = icmp ugt i8 %54, %51, !insn.addr !1599
  %73 = add i32 %18, -1, !insn.addr !1605
  store i32 %59, i32* %edx.0.reg2mem, !insn.addr !1606
  store i32 %64, i32* %esp.0.reg2mem, !insn.addr !1606
  store i32 %73, i32* %edi.0.reg2mem, !insn.addr !1606
  br i1 %72, label %dec_label_pc_1004545, label %dec_label_pc_100457f, !insn.addr !1606

dec_label_pc_100457f:                             ; preds = %dec_label_pc_100457d, %dec_label_pc_100457d.thread
  %74 = trunc i32 %67 to i8, !insn.addr !1607
  call void @__asm_out.6(i32 224, i8 %74), !insn.addr !1607
  store i8 %74, i8* inttoptr (i32 -1256509474 to i8*), align 2, !insn.addr !1608
  ret i32 %67, !insn.addr !1608
}

define i32 @function_10045ae() local_unnamed_addr {
dec_label_pc_10045ae:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10045c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10045c4:
  %0 = call i32 @__asm_int3(), !insn.addr !1609
  ret i32 %0, !insn.addr !1610
}

define i32 @function_10045c9(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10045c9:
  %eax.1.reg2mem = alloca i32, !insn.addr !1611
  %storemerge.reg2mem = alloca i32, !insn.addr !1611
  %eax.0.reg2mem = alloca i32, !insn.addr !1611
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_2 = alloca i16, align 2
  %8 = add i32 %0, -21, !insn.addr !1612
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1612
  %10 = load i32, i32* %9, align 4, !insn.addr !1612
  %11 = udiv i32 %10, 67108864, !insn.addr !1612
  %12 = icmp ult i32 %10, 67108864
  store i32 %11, i32* %9, align 4, !insn.addr !1612
  %13 = and i32 %10, 33554432, !insn.addr !1612
  %14 = icmp ne i32 %13, 0, !insn.addr !1612
  %15 = or i1 %14, %12, !insn.addr !1613
  store i32 %arg1, i32* %eax.0.reg2mem, !insn.addr !1613
  br i1 %15, label %dec_label_pc_10045d5, label %16, !insn.addr !1613

; <label>:16:                                     ; preds = %dec_label_pc_10045c9
  %17 = call i32 @function_10045ae(), !insn.addr !1613
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !1613
  br label %dec_label_pc_10045d5, !insn.addr !1613

dec_label_pc_10045d5:                             ; preds = %dec_label_pc_10045c9, %16
  %18 = icmp ne i32 %2, 1, !insn.addr !1614
  %19 = icmp eq i1 %18, %12, !insn.addr !1614
  br i1 %19, label %dec_label_pc_100461f, label %dec_label_pc_10045d7, !insn.addr !1614

dec_label_pc_10045d7:                             ; preds = %dec_label_pc_10045d5
  %20 = call i32 @function_44d716a7(), !insn.addr !1615
  ret i32 %20, !insn.addr !1615

dec_label_pc_10045fc:                             ; preds = %dec_label_pc_1004602
  %21 = add i32 %34, -28, !insn.addr !1616
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1616
  %23 = inttoptr i32 %42 to i32*, !insn.addr !1616
  %24 = zext i1 %6 to i32, !insn.addr !1617
  %25 = mul i32 %24, 256, !insn.addr !1617
  %26 = zext i1 %5 to i32, !insn.addr !1617
  %27 = mul i32 %26, 1024, !insn.addr !1617
  %28 = zext i1 %4 to i32, !insn.addr !1617
  %29 = mul i32 %28, 16384, !insn.addr !1617
  %30 = or i32 %29, %27, !insn.addr !1617
  %31 = or i32 %30, %25, !insn.addr !1617
  %32 = or i32 %31, 70, !insn.addr !1617
  %33 = inttoptr i32 %arg2 to i32*, !insn.addr !1617
  store i32 %32, i32* %33, align 4, !insn.addr !1617
  ret i32 %54, !insn.addr !1617

dec_label_pc_1004602:                             ; preds = %dec_label_pc_100461f
  %34 = ptrtoint i16* %stack_var_2 to i32, !insn.addr !1618
  %35 = add nsw i32 %67, 94, !insn.addr !1619
  %36 = inttoptr i32 %35 to i32*, !insn.addr !1619
  %37 = load i32, i32* %36, align 4, !insn.addr !1619
  %38 = or i32 %37, %67, !insn.addr !1619
  %39 = add i32 %34, -16, !insn.addr !1616
  %40 = add i32 %34, -20, !insn.addr !1616
  %41 = add i32 %34, -24, !insn.addr !1616
  %42 = add i32 %34, -32, !insn.addr !1616
  %43 = inttoptr i32 %39 to i32*, !insn.addr !1616
  store i32 524592249, i32* %43, align 4, !insn.addr !1616
  %44 = inttoptr i32 %40 to i32*, !insn.addr !1616
  store i32 %34, i32* %44, align 4, !insn.addr !1616
  %45 = inttoptr i32 %41 to i32*, !insn.addr !1616
  store i32 %arg2, i32* %45, align 4, !insn.addr !1616
  %46 = trunc i32 %38 to i8, !insn.addr !1620
  %47 = udiv i8 %46, 45, !insn.addr !1620
  %48 = urem i8 %46, 45, !insn.addr !1620
  %49 = zext i8 %48 to i32, !insn.addr !1620
  %50 = and i32 %38, -65536, !insn.addr !1620
  %51 = or i32 %50, %49, !insn.addr !1620
  %52 = zext i8 %47 to i32, !insn.addr !1620
  %53 = mul i32 %52, 256, !insn.addr !1620
  %54 = or i32 %51, %53, !insn.addr !1620
  %55 = or i32 %69, %eax.0.reload
  %56 = trunc i32 %55 to i8, !insn.addr !1621
  %57 = icmp eq i8 %56, 0, !insn.addr !1621
  %58 = add i32 %0, 884934220, !insn.addr !1622
  %59 = inttoptr i32 %58 to i32*, !insn.addr !1622
  %60 = load i32, i32* %59, align 4, !insn.addr !1622
  store i32 %42, i32* %59, align 4, !insn.addr !1622
  br i1 %57, label %dec_label_pc_10045fc, label %dec_label_pc_1004614, !insn.addr !1623

dec_label_pc_1004614:                             ; preds = %dec_label_pc_1004602
  %61 = add i32 %60, -4, !insn.addr !1624
  %62 = inttoptr i32 %61 to i32*, !insn.addr !1624
  store i32 %arg2, i32* %62, align 4, !insn.addr !1624
  ret i32 %54, !insn.addr !1625

dec_label_pc_100461f:                             ; preds = %dec_label_pc_10045d5
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %63 = zext i1 %7 to i32, !insn.addr !1626
  %64 = mul i32 %63, 4096, !insn.addr !1626
  %65 = and i32 %1, -65281, !insn.addr !1626
  %66 = or i32 %65, %64, !insn.addr !1626
  %67 = or i32 %66, 1536, !insn.addr !1626
  %68 = trunc i32 %eax.0.reload to i8, !insn.addr !1627
  %69 = udiv i32 %eax.0.reload, 256, !insn.addr !1627
  %70 = trunc i32 %69 to i8, !insn.addr !1627
  %71 = icmp eq i8 %68, %70, !insn.addr !1627
  %72 = icmp eq i32 %2, 2, !insn.addr !1628
  %73 = or i1 %72, %71, !insn.addr !1628
  br i1 %73, label %dec_label_pc_100462f, label %dec_label_pc_1004602, !insn.addr !1628

dec_label_pc_100462f:                             ; preds = %dec_label_pc_100461f
  %74 = call i32 @unknown_50d3d9ee(i16 %3, i32 %67), !insn.addr !1629
  %75 = icmp ult i8 %68, -92, !insn.addr !1630
  %76 = and i32 %eax.0.reload, 15, !insn.addr !1631
  %77 = icmp eq i32 %76, 15, !insn.addr !1631
  %78 = trunc i32 %arg2 to i8, !insn.addr !1632
  %79 = and i8 %78, 14, !insn.addr !1632
  %80 = icmp ugt i8 %79, 9, !insn.addr !1632
  %81 = or i1 %80, %77, !insn.addr !1632
  %82 = icmp ugt i8 %78, -103
  %83 = or i1 %82, %75
  br i1 %81, label %84, label %89, !insn.addr !1632

; <label>:84:                                     ; preds = %dec_label_pc_100462f
  %.v = select i1 %83, i32 102, i32 6
  %85 = add i32 %.v, %arg2, !insn.addr !1632
  %86 = and i32 %85, 255, !insn.addr !1632
  %87 = and i32 %arg2, -256, !insn.addr !1632
  %88 = or i32 %86, %87, !insn.addr !1632
  store i32 %88, i32* %storemerge.reg2mem, !insn.addr !1632
  br label %95, !insn.addr !1632

; <label>:89:                                     ; preds = %dec_label_pc_100462f
  %90 = add i32 %arg2, 96, !insn.addr !1632
  %91 = select i1 %83, i32 %90, i32 %arg2, !insn.addr !1632
  %92 = and i32 %91, 255, !insn.addr !1632
  %93 = and i32 %arg2, -256, !insn.addr !1632
  %94 = or i32 %92, %93, !insn.addr !1632
  store i32 %94, i32* %storemerge.reg2mem, !insn.addr !1632
  br label %95, !insn.addr !1632

; <label>:95:                                     ; preds = %84, %89
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %96 = add i32 %74, 45, !insn.addr !1633
  %97 = inttoptr i32 %96 to i8*, !insn.addr !1633
  %98 = load i8, i8* %97, align 1, !insn.addr !1633
  %99 = add i8 %68, 1, !insn.addr !1633
  %100 = add i8 %99, %98, !insn.addr !1633
  store i8 %100, i8* %97, align 1, !insn.addr !1633
  %101 = load i8, i8* inttoptr (i32 524592376 to i8*), align 8, !insn.addr !1634
  %102 = xor i8 %101, 48, !insn.addr !1634
  store i8 %102, i8* inttoptr (i32 524592376 to i8*), align 8, !insn.addr !1634
  %103 = trunc i32 %storemerge.reload to i8, !insn.addr !1635
  %104 = xor i8 %103, -56, !insn.addr !1635
  %105 = zext i8 %104 to i32, !insn.addr !1635
  %106 = and i32 %storemerge.reload, -256, !insn.addr !1635
  %107 = or i32 %106, %105, !insn.addr !1635
  %108 = icmp slt i8 %104, 1
  store i32 %107, i32* %eax.1.reg2mem, !insn.addr !1636
  br i1 %108, label %109, label %dec_label_pc_1004666, !insn.addr !1636

; <label>:109:                                    ; preds = %95
  %110 = call i32 @function_24642976(), !insn.addr !1636
  store i32 %110, i32* %eax.1.reg2mem, !insn.addr !1636
  br label %dec_label_pc_1004666, !insn.addr !1636

dec_label_pc_1004666:                             ; preds = %95, %109
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %111 = ashr i32 %eax.1.reload, 31, !insn.addr !1637
  %112 = trunc i32 %111 to i16, !insn.addr !1638
  call void @__asm_outsd(i16 %112, i32 %0), !insn.addr !1638
  %113 = trunc i32 %eax.1.reload to i8, !insn.addr !1639
  %114 = select i1 %5, i8* inttoptr (i32 -1452986486 to i8*), i8* inttoptr (i32 -1452986478 to i8*), !insn.addr !1639
  store i8 %113, i8* %114, align 2, !insn.addr !1639
  %115 = add i32 %2, -499475523, !insn.addr !1640
  %116 = inttoptr i32 %115 to i32*, !insn.addr !1640
  %117 = load i32, i32* %116, align 4, !insn.addr !1640
  %118 = mul i32 %117, 128, !insn.addr !1640
  %119 = udiv i32 %117, 33554432, !insn.addr !1640
  %120 = or i32 %119, %118, !insn.addr !1640
  store i32 %120, i32* %116, align 4, !insn.addr !1640
  ret i32 %eax.1.reload, !insn.addr !1640
}

define i32 @function_10047c1() local_unnamed_addr {
dec_label_pc_10047c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10047f6(i32 %arg1) local_unnamed_addr {
dec_label_pc_10047f6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = trunc i32 %1 to i8, !insn.addr !1641
  %4 = add i32 %0, 78, !insn.addr !1641
  %5 = add i32 %4, %1, !insn.addr !1641
  %6 = inttoptr i32 %5 to i8*, !insn.addr !1641
  %7 = load i8, i8* %6, align 1, !insn.addr !1641
  %8 = zext i1 %2 to i8, !insn.addr !1641
  %9 = add i8 %7, %3, !insn.addr !1641
  %10 = add i8 %9, %8, !insn.addr !1641
  %11 = zext i8 %10 to i32, !insn.addr !1641
  %12 = and i32 %1, -256, !insn.addr !1641
  %13 = or i32 %12, %11, !insn.addr !1641
  ret i32 %13, !insn.addr !1642
}

define i32 @function_100480b() local_unnamed_addr {
dec_label_pc_100480b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1004812() local_unnamed_addr {
dec_label_pc_1004812:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1004820() local_unnamed_addr {
dec_label_pc_1004820:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 1789077018, !insn.addr !1643
  ret i32 %1, !insn.addr !1644
}

define i32 @function_100483e(i32 %arg1) local_unnamed_addr {
dec_label_pc_100483e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1645
}

define i32 @function_100484b(i32 %arg1) local_unnamed_addr {
dec_label_pc_100484b:
  %eax.4.reg2mem = alloca i32, !insn.addr !1646
  %esp.2.in.reg2mem = alloca i32*, !insn.addr !1646
  %.reg2mem = alloca i32, !insn.addr !1646
  %storemerge.reg2mem = alloca i32, !insn.addr !1646
  %merge.reg2mem = alloca i32, !insn.addr !1646
  %ebp.1.reg2mem = alloca i32, !insn.addr !1646
  %esp.1.reg2mem = alloca i32, !insn.addr !1646
  %ecx.1.reg2mem = alloca i32, !insn.addr !1646
  %eax.3.reg2mem = alloca i32, !insn.addr !1646
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !1646
  %edi.0.reg2mem = alloca i32, !insn.addr !1646
  %ebp.0.reg2mem = alloca i32, !insn.addr !1646
  %esp.0.reg2mem = alloca i32, !insn.addr !1646
  %ecx.0.reg2mem = alloca i32, !insn.addr !1646
  %eax.2.reg2mem = alloca i32, !insn.addr !1646
  %zf.0.in.reg2mem = alloca i32, !insn.addr !1646
  %eax.1.reg2mem = alloca i32, !insn.addr !1646
  %eax.0.reg2mem = alloca i32, !insn.addr !1646
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_9()
  %6 = call x86_fp80 @__decompiler_undefined_function_6()
  %7 = call i16 @__decompiler_undefined_function_1()
  %8 = call i16 @__decompiler_undefined_function_1()
  %9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-65 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-47 = alloca i32, align 4
  %10 = ashr i32 %4, 31, !insn.addr !1647
  %11 = and i32 %10, -65281, !insn.addr !1648
  %12 = or i32 %11, 17920, !insn.addr !1648
  %13 = and i32 %4, -65281, !insn.addr !1649
  %14 = or i32 %13, 13824, !insn.addr !1649
  %15 = add i32 %12, %3, !insn.addr !1650
  %16 = icmp ult i32 %15, %3, !insn.addr !1650
  %17 = inttoptr i32 %3 to i32*, !insn.addr !1650
  store i32 %15, i32* %17, align 4, !insn.addr !1650
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !1651
  br i1 %16, label %18, label %dec_label_pc_1004862, !insn.addr !1651

; <label>:18:                                     ; preds = %dec_label_pc_100484b
  %19 = inttoptr i32 %0 to i32*, !insn.addr !1652
  %20 = call i32 @function_100480b(), !insn.addr !1651
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !1651
  br label %dec_label_pc_1004862, !insn.addr !1651

dec_label_pc_1004862:                             ; preds = %18, %dec_label_pc_100484b
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %21 = and i32 %eax.0.reload, -1126729586, !insn.addr !1653
  call void @__asm_int(i32 106), !insn.addr !1654
  %22 = add i32 %3, -1, !insn.addr !1655
  %23 = icmp eq i32 %22, 0, !insn.addr !1655
  store i32 %21, i32* %eax.1.reg2mem, !insn.addr !1655
  br i1 %23, label %dec_label_pc_100486c, label %24, !insn.addr !1655

; <label>:24:                                     ; preds = %dec_label_pc_1004862
  %25 = call i32 @function_1004812(), !insn.addr !1655
  store i32 %25, i32* %eax.1.reg2mem, !insn.addr !1655
  br label %dec_label_pc_100486c, !insn.addr !1655

dec_label_pc_100486c:                             ; preds = %dec_label_pc_1004862, %24
  %26 = icmp slt i32 %21, 0, !insn.addr !1653
  call void @__asm_into(i32 %9), !insn.addr !1656
  %27 = icmp eq i1 %26, false, !insn.addr !1657
  br i1 %27, label %dec_label_pc_10048a4, label %dec_label_pc_1004879, !insn.addr !1657

dec_label_pc_1004879:                             ; preds = %dec_label_pc_100486c
  %28 = add i32 %1, -8, !insn.addr !1658
  %29 = load i32, i32* inttoptr (i32 1000254699 to i32*), align 4, !insn.addr !1659
  %30 = add i32 %29, %22, !insn.addr !1659
  %31 = add i32 %2, -293948708, !insn.addr !1660
  %32 = inttoptr i32 %31 to i8*, !insn.addr !1660
  %33 = load i8, i8* %32, align 1, !insn.addr !1660
  %34 = trunc i32 %30 to i8, !insn.addr !1660
  %35 = or i8 %33, %34, !insn.addr !1660
  store i8 %35, i8* %32, align 1, !insn.addr !1660
  %36 = add i32 %1, 1551248902, !insn.addr !1661
  %37 = inttoptr i32 %36 to i32*, !insn.addr !1661
  %38 = load i32, i32* %37, align 4, !insn.addr !1661
  %39 = xor i32 %38, %30, !insn.addr !1661
  store i32 %39, i32* %37, align 4, !insn.addr !1661
  %40 = call i32 @__asm_hlt(), !insn.addr !1662
  %41 = inttoptr i32 %28 to i32*, !insn.addr !1663
  %42 = load i32, i32* %41, align 4, !insn.addr !1663
  %43 = and i32 %42, 2048, !insn.addr !1664
  %44 = or i32 %43, -2245, !insn.addr !1665
  call void @__asm_into(i32 %9), !insn.addr !1666
  ret i32 %44, !insn.addr !1666

dec_label_pc_10048a4:                             ; preds = %dec_label_pc_100486c
  %45 = add i32 %0, -4, !insn.addr !1652
  %46 = add i32 %1, -4, !insn.addr !1652
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %47 = and i32 %2, -256, !insn.addr !1667
  store i32 %47, i32* inttoptr (i32 -302334204 to i32*), align 4, !insn.addr !1668
  %48 = icmp ugt i32 %47, -1638426430, !insn.addr !1669
  %49 = inttoptr i32 %46 to i32*, !insn.addr !1670
  %50 = load i32, i32* %49, align 4, !insn.addr !1670
  %51 = inttoptr i32 %45 to i32*, !insn.addr !1670
  store i32 %50, i32* %51, align 4, !insn.addr !1670
  %52 = add i32 %0, -85, !insn.addr !1671
  %53 = inttoptr i32 %52 to i32*, !insn.addr !1671
  %54 = load i32, i32* %53, align 4, !insn.addr !1671
  %.neg = sext i1 %48 to i32
  %.neg4 = add i32 %0, -8, !insn.addr !1671
  %55 = add i32 %.neg4, %.neg, !insn.addr !1670
  %56 = sub i32 %55, %54, !insn.addr !1671
  %57 = load i64, i64* inttoptr (i32 1000254702 to i64*), align 4, !insn.addr !1672
  %58 = call i64 @__asm_pavgw(i64 %5, i64 %57), !insn.addr !1672
  %59 = call i32 @__asm_sti(), !insn.addr !1673
  %60 = and i32 %59, 14
  %61 = icmp ugt i32 %60, 9, !insn.addr !1674
  %62 = add i32 %59, 6, !insn.addr !1674
  %63 = select i1 %61, i32 %62, i32 %59, !insn.addr !1674
  %64 = zext i1 %61 to i32, !insn.addr !1674
  %65 = and i32 %63, 15, !insn.addr !1674
  %66 = and i32 %59, -65536, !insn.addr !1674
  %67 = mul i32 %64, 256
  %68 = add i32 %67, %59
  %69 = and i32 %68, 65280, !insn.addr !1674
  store i32 %56, i32* %stack_var_-47, align 4, !insn.addr !1675
  %70 = icmp eq i1 %61, false, !insn.addr !1676
  br i1 %70, label %dec_label_pc_1004940, label %dec_label_pc_10048e5, !insn.addr !1676

dec_label_pc_10048e5:                             ; preds = %dec_label_pc_10048a4
  %71 = or i32 %69, %66, !insn.addr !1674
  %72 = or i32 %71, %65, !insn.addr !1674
  %73 = add nsw i32 %12, -553674052, !insn.addr !1677
  %74 = inttoptr i32 %73 to i32*, !insn.addr !1677
  %75 = load i32, i32* %74, align 4, !insn.addr !1677
  %.neg5 = sext i1 %61 to i32
  %.neg7 = add i32 %56, %.neg5, !insn.addr !1677
  %76 = sub i32 %.neg7, %75, !insn.addr !1677
  %77 = inttoptr i32 %76 to i32*, !insn.addr !1678
  store i32 %72, i32* %77, align 4, !insn.addr !1678
  %78 = add i32 %12, -1576119825, !insn.addr !1679
  %79 = inttoptr i32 %78 to i8*, !insn.addr !1679
  %80 = load i8, i8* %79, align 1, !insn.addr !1679
  %81 = add i8 %80, 44, !insn.addr !1679
  store i8 %81, i8* %79, align 1, !insn.addr !1679
  %82 = call i32 @__asm_wait(), !insn.addr !1680
  %83 = load i32, i32* %stack_var_-47, align 4, !insn.addr !1681
  %sext2 = mul i32 %22, 16777216
  %84 = sdiv i32 %sext2, 16777216, !insn.addr !1681
  %85 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !1682
  %86 = add i32 %83, 1, !insn.addr !1683
  %87 = call i32 @unknown_f21cbaee(i16 %8), !insn.addr !1684
  %88 = call i8 @__asm_in.1(i8 65), !insn.addr !1685
  %89 = sext i8 %88 to i32, !insn.addr !1685
  %90 = and i32 %87, -256, !insn.addr !1685
  %91 = or i32 %90, %89, !insn.addr !1685
  %92 = fptosi x86_fp80 %6 to i64
  store i32 %86, i32* %zf.0.in.reg2mem, !insn.addr !1686
  store i32 %91, i32* %eax.2.reg2mem, !insn.addr !1686
  store i32 %84, i32* %ecx.0.reg2mem, !insn.addr !1686
  store i32 %85, i32* %esp.0.reg2mem, !insn.addr !1686
  store i32 -703218908, i32* %ebp.0.reg2mem, !insn.addr !1686
  store i32 %86, i32* %edi.0.reg2mem, !insn.addr !1686
  br label %dec_label_pc_100490b, !insn.addr !1686

dec_label_pc_100490b:                             ; preds = %dec_label_pc_100492d, %dec_label_pc_10048e5
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %zf.0.in.reload = load i32, i32* %zf.0.in.reg2mem
  %zf.0 = icmp eq i32 %zf.0.in.reload, 0
  store i32 %eax.2.reload, i32* %merge.reg2mem, !insn.addr !1687
  br i1 %zf.0, label %dec_label_pc_100493c, label %dec_label_pc_100490d, !insn.addr !1687

dec_label_pc_100490d:                             ; preds = %dec_label_pc_100490b
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %93 = trunc i32 %eax.2.reload to i8, !insn.addr !1688
  call void @__asm_out.6(i32 52, i8 %93), !insn.addr !1688
  %94 = add i32 %esp.0.reload, -4, !insn.addr !1689
  %95 = inttoptr i32 %94 to i32*
  store i32 %esp.0.reload, i32* %95, align 4, !insn.addr !1689
  %96 = add i32 %eax.2.reload, 69, !insn.addr !1690
  %97 = inttoptr i32 %96 to i32*, !insn.addr !1690
  %98 = load i32, i32* %97, align 4, !insn.addr !1690
  %99 = call i32 @__asm_wait(), !insn.addr !1691
  %100 = trunc i32 %ecx.0.reload to i8, !insn.addr !1692
  %101 = and i8 %100, 31, !insn.addr !1692
  %102 = icmp eq i8 %101, 0, !insn.addr !1692
  br i1 %102, label %108, label %103, !insn.addr !1692

; <label>:103:                                    ; preds = %dec_label_pc_100490d
  %104 = add i32 %99, 63, !insn.addr !1692
  %105 = inttoptr i32 %104 to i8*, !insn.addr !1692
  %106 = load i8, i8* %105, align 1, !insn.addr !1692
  %107 = shl i8 %106, %101, !insn.addr !1692
  store i8 %107, i8* %105, align 1, !insn.addr !1692
  br label %108, !insn.addr !1692

; <label>:108:                                    ; preds = %dec_label_pc_100490d, %103
  %109 = and i32 %98, %ebp.0.reload, !insn.addr !1690
  %110 = inttoptr i32 %edi.0.reload to i32*, !insn.addr !1693
  store i32 %99, i32* %110, align 4, !insn.addr !1693
  %111 = icmp eq i32 %ecx.0.reload, 0, !insn.addr !1694
  store i32* %95, i32** %.pre-phi.reg2mem, !insn.addr !1694
  store i32 %99, i32* %eax.3.reg2mem, !insn.addr !1694
  store i32 0, i32* %ecx.1.reg2mem, !insn.addr !1694
  store i32 %94, i32* %esp.1.reg2mem, !insn.addr !1694
  store i32 %109, i32* %ebp.1.reg2mem, !insn.addr !1694
  br i1 %111, label %dec_label_pc_100492d, label %dec_label_pc_100491c, !insn.addr !1694

dec_label_pc_100491c:                             ; preds = %108
  %112 = add i32 %109, 512883853, !insn.addr !1695
  %113 = add i32 %esp.0.reload, -2, !insn.addr !1696
  %114 = inttoptr i32 %113 to i16*, !insn.addr !1696
  %115 = add i32 %esp.0.reload, -6, !insn.addr !1697
  %116 = inttoptr i32 %115 to i32*, !insn.addr !1697
  store i32 %112, i32* %116, align 4, !insn.addr !1697
  %117 = add i32 %esp.0.reload, -10, !insn.addr !1698
  %118 = inttoptr i32 %117 to i32*
  store i32 %99, i32* %118, align 4, !insn.addr !1698
  %119 = call i32 @__asm_emms(), !insn.addr !1699
  store i32* %118, i32** %.pre-phi.reg2mem, !insn.addr !1700
  store i32 %ecx.0.reload, i32* %eax.3.reg2mem, !insn.addr !1700
  store i32 %119, i32* %ecx.1.reg2mem, !insn.addr !1700
  store i32 %117, i32* %esp.1.reg2mem, !insn.addr !1700
  store i32 %99, i32* %ebp.1.reg2mem, !insn.addr !1700
  br label %dec_label_pc_100492d, !insn.addr !1700

dec_label_pc_100492d:                             ; preds = %dec_label_pc_100491c, %108
  %120 = add i32 %edi.0.reload, -4, !insn.addr !1693
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.3.reload = load i32, i32* %eax.3.reg2mem
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %121 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !1701
  %122 = inttoptr i32 %121 to i64*, !insn.addr !1702
  store i64 %92, i64* %122, align 4, !insn.addr !1702
  %123 = sdiv i32 %121, 2, !insn.addr !1703
  %124 = and i32 %121, 1, !insn.addr !1703
  %125 = icmp eq i32 %124, 0, !insn.addr !1703
  %126 = add i32 %esp.1.reload, 8, !insn.addr !1704
  store i32 %123, i32* %zf.0.in.reg2mem, !insn.addr !1705
  store i32 %eax.3.reload, i32* %eax.2.reg2mem, !insn.addr !1705
  store i32 %ecx.1.reload, i32* %ecx.0.reg2mem, !insn.addr !1705
  store i32 %126, i32* %esp.0.reg2mem, !insn.addr !1705
  store i32 %ebp.1.reload, i32* %ebp.0.reg2mem, !insn.addr !1705
  store i32 %120, i32* %edi.0.reg2mem, !insn.addr !1705
  store i32 %eax.3.reload, i32* %merge.reg2mem, !insn.addr !1705
  br i1 %125, label %dec_label_pc_100493c, label %dec_label_pc_100490b, !insn.addr !1705

dec_label_pc_100493c:                             ; preds = %dec_label_pc_100490b, %dec_label_pc_100492d
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !1706

dec_label_pc_1004940:                             ; preds = %dec_label_pc_10048a4
  %127 = and i32 %63, 14
  %128 = icmp ugt i32 %127, 9, !insn.addr !1707
  br i1 %128, label %129, label %133, !insn.addr !1707

; <label>:129:                                    ; preds = %dec_label_pc_1004940
  %130 = add nuw nsw i32 %65, 6, !insn.addr !1707
  %131 = or i32 %69, %66, !insn.addr !1707
  %132 = or i32 %131, %130, !insn.addr !1707
  store i32 %132, i32* %storemerge.reg2mem, !insn.addr !1707
  br label %136, !insn.addr !1707

; <label>:133:                                    ; preds = %dec_label_pc_1004940
  %134 = or i32 %69, %66, !insn.addr !1707
  %135 = or i32 %134, %65, !insn.addr !1707
  store i32 %135, i32* %storemerge.reg2mem, !insn.addr !1707
  br label %136, !insn.addr !1707

; <label>:136:                                    ; preds = %129, %133
  %137 = icmp ult i32 %47, -1756524835, !insn.addr !1708
  %138 = zext i1 %137 to i32, !insn.addr !1709
  %139 = mul i32 %138, 256, !insn.addr !1709
  %140 = and i32 %eax.1.reload, 82837593, !insn.addr !1710
  %141 = or i32 %139, %140, !insn.addr !1709
  %142 = or i32 %141, -82839898, !insn.addr !1709
  %143 = add i32 %1, -8, !insn.addr !1670
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %144 = sext i16 %7 to i32, !insn.addr !1711
  store i32 %144, i32* %stack_var_-47, align 4, !insn.addr !1711
  %145 = trunc i32 %12 to i16, !insn.addr !1712
  %146 = inttoptr i32 %143 to i8*, !insn.addr !1712
  %147 = load i8, i8* %146, align 1, !insn.addr !1712
  call void @__asm_outsb(i16 %145, i8 %147), !insn.addr !1712
  %148 = and i32 %12, -47616, !insn.addr !1713
  %149 = or i32 %148, 1, !insn.addr !1713
  %150 = add nsw i32 %149, -67, !insn.addr !1714
  %151 = inttoptr i32 %150 to i8*, !insn.addr !1714
  %152 = load i8, i8* %151, align 2, !insn.addr !1714
  %153 = add nsw i32 %142, -995788138, !insn.addr !1715
  %154 = inttoptr i32 %153 to i32*, !insn.addr !1715
  %155 = load i32, i32* %154, align 4, !insn.addr !1715
  %156 = mul i32 %155, 128, !insn.addr !1715
  %157 = udiv i32 %155, 33554432, !insn.addr !1715
  %158 = or i32 %157, %156, !insn.addr !1715
  store i32 %158, i32* %154, align 4, !insn.addr !1715
  %159 = icmp eq i32 %56, 1, !insn.addr !1716
  %160 = add i32 %3, -2, !insn.addr !1717
  %161 = icmp eq i32 %160, 0, !insn.addr !1717
  %162 = or i1 %161, %159, !insn.addr !1717
  br i1 %162, label %dec_label_pc_100496b, label %dec_label_pc_10049ae, !insn.addr !1717

dec_label_pc_100496b:                             ; preds = %136
  %163 = add nsw i32 %142, 8, !insn.addr !1718
  %164 = and i32 %142, 200938240, !insn.addr !1718
  %165 = and i32 %163, 136, !insn.addr !1719
  %166 = or i32 %164, %165, !insn.addr !1719
  %167 = or i32 %166, -200940425, !insn.addr !1720
  %168 = load i8, i8* inttoptr (i32 -1357859527 to i8*), align 1, !insn.addr !1721
  call void @__asm_outsb(i16 -2247, i8 %168), !insn.addr !1721
  ret i32 %167, !insn.addr !1722

dec_label_pc_10049ae:                             ; preds = %136
  %169 = or i32 %148, -1357859527, !insn.addr !1723
  %170 = add nsw i32 %169, 2022025672, !insn.addr !1724
  %171 = inttoptr i32 %170 to i8*, !insn.addr !1724
  %172 = load i8, i8* %171, align 1, !insn.addr !1724
  %173 = xor i8 %172, -69, !insn.addr !1724
  %174 = icmp eq i8 %173, 0, !insn.addr !1724
  store i8 %173, i8* %171, align 1, !insn.addr !1724
  %175 = icmp eq i1 %174, false, !insn.addr !1725
  br i1 %175, label %dec_label_pc_10049c9, label %dec_label_pc_10049b3, !insn.addr !1725

dec_label_pc_10049b3:                             ; preds = %dec_label_pc_10049ae
  %176 = sub i8 36, %152, !insn.addr !1714
  %177 = zext i8 %176 to i32, !insn.addr !1714
  %178 = or i32 %177, -703218944, !insn.addr !1714
  %179 = fptrunc x86_fp80 %6 to double, !insn.addr !1726
  %180 = inttoptr i32 %160 to double*, !insn.addr !1726
  store double %179, double* %180, align 4, !insn.addr !1726
  ret i32 %178, !insn.addr !1727

dec_label_pc_10049c9:                             ; preds = %dec_label_pc_10049ae
  %181 = icmp ult i32 %storemerge.reload, 459957868, !insn.addr !1728
  %182 = zext i1 %181 to i32, !insn.addr !1729
  %183 = ptrtoint i32* %stack_var_-47 to i32, !insn.addr !1711
  %184 = call i32 @unknown_7442a2a4(i16 %8), !insn.addr !1730
  %185 = load i32, i32* inttoptr (i32 1166835004 to i32*), align 4, !insn.addr !1731
  %186 = or i32 %185, %183, !insn.addr !1731
  store i32 %186, i32* inttoptr (i32 1166835004 to i32*), align 4, !insn.addr !1731
  %187 = load i32, i32* inttoptr (i32 -2053436794 to i32*), align 4, !insn.addr !1732
  %188 = udiv i32 %187, 262144, !insn.addr !1732
  %189 = mul i32 %187, 32768, !insn.addr !1732
  %190 = or i32 %189, %188, !insn.addr !1732
  store i32 %190, i32* inttoptr (i32 -2053436794 to i32*), align 4, !insn.addr !1732
  %191 = udiv i32 %160, 2, !insn.addr !1733
  %192 = shl i32 %160, 31, !insn.addr !1733
  %193 = or i32 %191, %192, !insn.addr !1733
  %194 = and i32 %160, 1, !insn.addr !1733
  %195 = icmp eq i32 %194, 0, !insn.addr !1733
  %196 = select i1 %195, i32 95, i32 96, !insn.addr !1729
  %197 = add i32 %storemerge.reload, %196, !insn.addr !1734
  %198 = add i32 %197, %182, !insn.addr !1734
  %199 = trunc i32 %198 to i8
  %200 = add i8 %199, -1, !insn.addr !1735
  call void @__asm_out.6(i32 252, i8 %200), !insn.addr !1735
  store i32 1567294278, i32* %stack_var_-53, align 4, !insn.addr !1736
  %201 = load i32, i32* @global_var_1014efc, align 4, !insn.addr !1737
  %202 = call i32 @unknown_3777e730(i32 %201, i32 1567294278, i32 -2247), !insn.addr !1738
  %203 = inttoptr i32 %193 to i8*, !insn.addr !1739
  %204 = load i8, i8* %203, align 1, !insn.addr !1739
  %205 = trunc i32 %202 to i8
  %206 = add i8 %205, 1, !insn.addr !1739
  %207 = add i8 %206, %204, !insn.addr !1739
  store i8 %207, i8* %203, align 1, !insn.addr !1739
  %208 = load i32, i32* @global_var_1014f9d, align 4, !insn.addr !1740
  %209 = icmp eq i32 %208, -1357859526, !insn.addr !1741
  br i1 %209, label %dec_label_pc_10049c9.dec_label_pc_1004a38_crit_edge, label %dec_label_pc_1004a29, !insn.addr !1742

dec_label_pc_10049c9.dec_label_pc_1004a38_crit_edge: ; preds = %dec_label_pc_10049c9
  %.pre = load i32, i32* %stack_var_-53, align 4
  store i32 %.pre, i32* %.reg2mem
  store i32* %stack_var_-53, i32** %esp.2.in.reg2mem
  br label %dec_label_pc_1004a38

dec_label_pc_1004a29:                             ; preds = %dec_label_pc_10049c9
  store i32 5964049, i32* %stack_var_-65, align 4, !insn.addr !1743
  store i32 5964049, i32* %.reg2mem, !insn.addr !1744
  store i32* %stack_var_-65, i32** %esp.2.in.reg2mem, !insn.addr !1744
  br label %dec_label_pc_1004a38, !insn.addr !1744

dec_label_pc_1004a38:                             ; preds = %dec_label_pc_10049c9.dec_label_pc_1004a38_crit_edge, %dec_label_pc_1004a29
  %esp.2.in.reload = load i32*, i32** %esp.2.in.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !1745
  %210 = inttoptr i32 %193 to i32*, !insn.addr !1746
  %211 = load i32, i32* %210, align 4, !insn.addr !1746
  %212 = add i32 %211, %.reload, !insn.addr !1746
  %213 = icmp eq i32 %212, 0, !insn.addr !1746
  store i32 %212, i32* %210, align 4, !insn.addr !1746
  store i32 %.reload, i32* %eax.4.reg2mem, !insn.addr !1747
  br i1 %213, label %dec_label_pc_1004a47, label %dec_label_pc_1004a40, !insn.addr !1747

dec_label_pc_1004a40:                             ; preds = %dec_label_pc_1004a38
  store i32 5, i32* %esp.2.in.reload, align 4, !insn.addr !1748
  %214 = call i32 @function_1004a4d(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1749
  store i32 %214, i32* %eax.4.reg2mem, !insn.addr !1749
  br label %dec_label_pc_1004a47, !insn.addr !1749

dec_label_pc_1004a47:                             ; preds = %dec_label_pc_1004a40, %dec_label_pc_1004a38
  %215 = add i32 %56, -1, !insn.addr !1750
  %eax.4.reload = load i32, i32* %eax.4.reg2mem
  %216 = load i32, i32* inttoptr (i32 -1357859526 to i32*), align 4, !insn.addr !1751
  %217 = inttoptr i32 %215 to i32*, !insn.addr !1751
  store i32 %216, i32* %217, align 4, !insn.addr !1751
  ret i32 %eax.4.reload, !insn.addr !1752
}

define i32 @function_1004a4d(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004a4d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = select i1 %3, i32 57, i32 56, !insn.addr !1753
  %5 = sub i32 %2, %4, !insn.addr !1753
  %6 = and i32 %5, 255, !insn.addr !1753
  %7 = and i32 %2, -256, !insn.addr !1753
  %8 = or i32 %6, %7, !insn.addr !1753
  %9 = add i32 %0, 21871925, !insn.addr !1754
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1754
  %11 = load i32, i32* %10, align 4, !insn.addr !1754
  %12 = add i32 %11, %1, !insn.addr !1754
  store i32 %12, i32* %10, align 4, !insn.addr !1754
  %13 = add i32 %8, %0, !insn.addr !1755
  ret i32 %13, !insn.addr !1756
}

define i32 @function_1004a78(i32 %arg1) local_unnamed_addr {
dec_label_pc_1004a78:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @unknown_fb005a50(), !insn.addr !1757
  %4 = call i32 @__asm_wait(), !insn.addr !1758
  %5 = add i32 %2, 1, !insn.addr !1759
  %6 = icmp eq i32 %5, 0, !insn.addr !1759
  br i1 %6, label %dec_label_pc_1004a9b, label %dec_label_pc_1004af8, !insn.addr !1760

dec_label_pc_1004a9b:                             ; preds = %dec_label_pc_1004a78
  %7 = and i32 %4, -256, !insn.addr !1761
  %8 = load i8, i8* inttoptr (i32 1175320707 to i8*), align 1, !insn.addr !1761
  %9 = zext i8 %8 to i32, !insn.addr !1761
  %10 = or i32 %7, %9, !insn.addr !1761
  ret i32 %10, !insn.addr !1762

dec_label_pc_1004af8:                             ; preds = %dec_label_pc_1004a78
  %11 = xor i32 %1, %0, !insn.addr !1763
  %12 = call i32 @__asm_int1(), !insn.addr !1764
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1765
  %14 = load i8, i8* %13, align 1, !insn.addr !1765
  %15 = trunc i32 %12 to i8, !insn.addr !1765
  %16 = xor i8 %14, %15, !insn.addr !1765
  store i8 %16, i8* %13, align 1, !insn.addr !1765
  %17 = add i32 %11, 25758811, !insn.addr !1766
  %18 = inttoptr i32 %17 to i8*, !insn.addr !1766
  %19 = load i8, i8* %18, align 1, !insn.addr !1766
  %20 = trunc i32 %5 to i8, !insn.addr !1766
  %21 = add i8 %19, %20, !insn.addr !1766
  store i8 %21, i8* %18, align 1, !insn.addr !1766
  %22 = call i32 @function_d6783ab(), !insn.addr !1767
  ret i32 %22, !insn.addr !1767
}

define i32 @function_1004b28() local_unnamed_addr {
dec_label_pc_1004b28:
  %0 = call i32 @function_8c7bd7c0(), !insn.addr !1768
  ret i32 %0, !insn.addr !1768
}

define i32 @function_1004b48(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1004b48:
  %merge.reg2mem = alloca i32, !insn.addr !1769
  %eax.0.reg2mem = alloca i32, !insn.addr !1769
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %1, 1, !insn.addr !1769
  %6 = add i32 %5, %4, !insn.addr !1770
  %7 = trunc i32 %6 to i8, !insn.addr !1771
  %8 = add i8 %7, -1, !insn.addr !1771
  %9 = icmp eq i8 %8, 0, !insn.addr !1771
  %10 = zext i8 %8 to i32, !insn.addr !1771
  %11 = and i32 %6, -256, !insn.addr !1771
  %12 = or i32 %11, %10, !insn.addr !1771
  %13 = add i32 %2, 12, !insn.addr !1772
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1772
  %15 = load i32, i32* %14, align 4, !insn.addr !1772
  %16 = add i32 %15, 122, !insn.addr !1773
  %17 = inttoptr i32 %16 to i32*, !insn.addr !1773
  store i32 %12, i32* %17, align 4, !insn.addr !1773
  br i1 %9, label %dec_label_pc_1004be2, label %dec_label_pc_1004b6a, !insn.addr !1774

dec_label_pc_1004b6a:                             ; preds = %dec_label_pc_1004b48
  %18 = load i32, i32* inttoptr (i32 1482318003 to i32*), align 4, !insn.addr !1775
  %19 = add i32 %18, 4, !insn.addr !1776
  %20 = inttoptr i32 %19 to i32*, !insn.addr !1776
  %21 = load i32, i32* %20, align 4, !insn.addr !1776
  %22 = add i32 %21, 1, !insn.addr !1777
  %23 = and i32 %22, 3, !insn.addr !1778
  %24 = inttoptr i32 %18 to i8*, !insn.addr !1779
  %25 = inttoptr i32 %0 to i8*, !insn.addr !1779
  call void @__asm_rep_movsb_memcpy(i8* %25, i8* %24, i32 %23), !insn.addr !1779
  %26 = add i32 %3, 141, !insn.addr !1780
  %27 = and i32 %26, 255, !insn.addr !1780
  %28 = and i32 %3, -256, !insn.addr !1780
  %29 = or i32 %27, %28, !insn.addr !1780
  %30 = add i32 %2, 23, !insn.addr !1781
  %31 = inttoptr i32 %30 to i32*, !insn.addr !1781
  %32 = load i32, i32* %31, align 4, !insn.addr !1781
  %33 = add i32 %2, 59, !insn.addr !1782
  %34 = call i32 @unknown_bc33bd6f(i32 %33, i32 %32), !insn.addr !1783
  %35 = add i32 %34, -24, !insn.addr !1784
  %36 = inttoptr i32 %35 to i32*, !insn.addr !1784
  %37 = load i32, i32* %36, align 4, !insn.addr !1784
  %38 = add i32 %37, 1, !insn.addr !1784
  store i32 %38, i32* %36, align 4, !insn.addr !1784
  %39 = load i8, i8* inttoptr (i32 -1485439232 to i8*), align 256, !insn.addr !1785
  %40 = trunc i32 %34 to i8, !insn.addr !1785
  %41 = xor i8 %39, %40, !insn.addr !1785
  store i8 %41, i8* inttoptr (i32 -1485439232 to i8*), align 256, !insn.addr !1785
  %42 = add i32 %2, -8, !insn.addr !1786
  %43 = inttoptr i32 %42 to i32*, !insn.addr !1786
  store i32 %29, i32* %43, align 4, !insn.addr !1786
  %44 = call i32 @function_100bbd4(), !insn.addr !1787
  %45 = icmp eq i32 %44, -385875972, !insn.addr !1788
  %46 = icmp eq i1 %45, false, !insn.addr !1789
  store i32 %44, i32* %merge.reg2mem, !insn.addr !1789
  br i1 %46, label %dec_label_pc_1004c11, label %dec_label_pc_1004e78, !insn.addr !1789

dec_label_pc_1004be2:                             ; preds = %dec_label_pc_1004b48
  %47 = add i32 %2, 32, !insn.addr !1790
  %48 = inttoptr i32 %47 to i32*, !insn.addr !1790
  %49 = load i32, i32* %48, align 4, !insn.addr !1790
  %50 = add i32 %3, 24449085, !insn.addr !1791
  %51 = inttoptr i32 %50 to i8*, !insn.addr !1791
  %52 = load i8, i8* %51, align 1, !insn.addr !1791
  %53 = trunc i32 %49 to i8, !insn.addr !1791
  %54 = add i8 %52, %53, !insn.addr !1791
  %55 = icmp eq i8 %54, 0, !insn.addr !1791
  store i8 %54, i8* %51, align 1, !insn.addr !1791
  %56 = icmp eq i1 %55, false, !insn.addr !1792
  store i32 %49, i32* %eax.0.reg2mem, !insn.addr !1792
  br i1 %56, label %57, label %dec_label_pc_1004bf4, !insn.addr !1792

; <label>:57:                                     ; preds = %dec_label_pc_1004be2
  %58 = call i32 @function_13b4e95(), !insn.addr !1792
  store i32 %58, i32* %eax.0.reg2mem, !insn.addr !1792
  br label %dec_label_pc_1004bf4, !insn.addr !1792

dec_label_pc_1004bf4:                             ; preds = %57, %dec_label_pc_1004be2
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  call void @__asm_out.4(i32 66, i32 %eax.0.reload), !insn.addr !1793
  %59 = load i32, i32* inttoptr (i32 671179908 to i32*), align 4, !insn.addr !1794
  %60 = icmp eq i32 %59, %3, !insn.addr !1794
  store i32 %eax.0.reload, i32* %merge.reg2mem, !insn.addr !1795
  br i1 %60, label %dec_label_pc_1004c11, label %dec_label_pc_1004c04, !insn.addr !1795

dec_label_pc_1004c04:                             ; preds = %dec_label_pc_1004bf4
  %61 = add i32 %2, 79, !insn.addr !1796
  %62 = inttoptr i32 %61 to i32*, !insn.addr !1796
  %63 = load i32, i32* %62, align 4, !insn.addr !1796
  %64 = call i32 @unknown_fb0102e1(i32 %63), !insn.addr !1797
  %65 = call i32 @function_96004a19(), !insn.addr !1798
  ret i32 %65, !insn.addr !1798

dec_label_pc_1004c11:                             ; preds = %dec_label_pc_1004b6a, %dec_label_pc_1004bf4
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !1798

dec_label_pc_1004e78:                             ; preds = %dec_label_pc_1004b6a
  %66 = call i32 @unknown_fd34377d(), !insn.addr !1799
  ret i32 %66, !insn.addr !1799
}

define i32 @function_1004e7e() local_unnamed_addr {
dec_label_pc_1004e7e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1800
}

define i32 @function_1004e85() local_unnamed_addr {
dec_label_pc_1004e85:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !1801
  %3 = inttoptr i32 %0 to i8*, !insn.addr !1801
  store i8 %2, i8* %3, align 1, !insn.addr !1801
  ret i32 %0, !insn.addr !1802
}

define i32 @function_1004e8c() local_unnamed_addr {
dec_label_pc_1004e8c:
  %ebx.0.reg2mem = alloca i32, !insn.addr !1803
  %eax.0.reg2mem = alloca i32, !insn.addr !1803
  %esp.0.reg2mem = alloca i32, !insn.addr !1803
  %ecx.0.reg2mem = alloca i32, !insn.addr !1803
  %sf.0.in.reg2mem = alloca i32, !insn.addr !1803
  %of.0.reg2mem = alloca i1, !insn.addr !1803
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %4, 89, !insn.addr !1803
  %8 = add i32 %5, 1, !insn.addr !1804
  %9 = inttoptr i32 %7 to i32*, !insn.addr !1805
  %10 = load i32, i32* %9, align 4, !insn.addr !1805
  %11 = add i32 %10, %8, !insn.addr !1805
  %12 = icmp eq i32 %11, 0, !insn.addr !1805
  store i32 %11, i32* %9, align 4, !insn.addr !1805
  %13 = trunc i32 %3 to i16, !insn.addr !1806
  %14 = trunc i32 %8 to i8, !insn.addr !1806
  call void @__asm_out(i16 %13, i8 %14), !insn.addr !1806
  br i1 %12, label %dec_label_pc_1004ea1, label %dec_label_pc_1004e95, !insn.addr !1807

dec_label_pc_1004e95:                             ; preds = %dec_label_pc_1004e8c
  %15 = call i32 @unknown_d74ab2(i32 %2), !insn.addr !1808
  ret i32 %15, !insn.addr !1808

dec_label_pc_1004ea1:                             ; preds = %dec_label_pc_1004e8c
  %16 = add i32 %5, -150929074, !insn.addr !1809
  %17 = inttoptr i32 %16 to i8*, !insn.addr !1809
  %18 = load i8, i8* %17, align 1, !insn.addr !1809
  %19 = udiv i8 %18, 2, !insn.addr !1809
  %20 = shl i8 %18, 7, !insn.addr !1809
  %21 = or i8 %19, %20, !insn.addr !1809
  store i8 %21, i8* %17, align 1, !insn.addr !1809
  %22 = and i8 %18, 1, !insn.addr !1809
  %23 = lshr i8 %18, 7, !insn.addr !1809
  %24 = icmp ne i8 %22, %23, !insn.addr !1809
  %25 = add i32 %0, -94, !insn.addr !1810
  %26 = inttoptr i32 %25 to i16*, !insn.addr !1810
  %27 = call i32 @unknown_d5dd81c(), !insn.addr !1811
  %28 = add i32 %2, -396523028, !insn.addr !1812
  %29 = inttoptr i32 %28 to i32*, !insn.addr !1812
  store i32 %7, i32* %29, align 4, !insn.addr !1812
  %30 = add i32 %1, -41, !insn.addr !1813
  %31 = inttoptr i32 %30 to i8*, !insn.addr !1813
  store i8 5, i8* %31, align 1, !insn.addr !1813
  %32 = call i32 @function_100548f(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1814
  %33 = add i32 %1, 12, !insn.addr !1815
  %34 = inttoptr i32 %33 to i32*
  %35 = add i32 %1, 1
  %36 = and i32 %1, 15
  %37 = icmp eq i32 %36, 15
  %38 = add i32 %2, 4
  %39 = inttoptr i32 %38 to i32*
  %40 = xor i32 %1, -2147483648
  %41 = and i32 %35, %40
  %42 = icmp slt i32 %41, 0
  %43 = icmp sgt i32 %35, 0
  store i1 %24, i1* %of.0.reg2mem, !insn.addr !1814
  store i32 0, i32* %sf.0.in.reg2mem, !insn.addr !1814
  store i32 %7, i32* %ecx.0.reg2mem, !insn.addr !1814
  br label %dec_label_pc_1004ec7, !insn.addr !1814

dec_label_pc_1004ec7:                             ; preds = %dec_label_pc_1004f23, %dec_label_pc_1004ea1
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %sf.0.in.reload = load i32, i32* %sf.0.in.reg2mem
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %sf.0 = icmp slt i32 %sf.0.in.reload, 0
  %44 = load i32, i32* %34, align 4, !insn.addr !1815
  %45 = add i32 %esp.0.reload, -4, !insn.addr !1815
  %46 = inttoptr i32 %45 to i32*
  store i32 %44, i32* %46, align 4, !insn.addr !1815
  %47 = call i32 @function_1007bd1(), !insn.addr !1816
  %48 = icmp eq i1 %sf.0, %of.0.reload, !insn.addr !1817
  br i1 %48, label %dec_label_pc_1004ed4, label %dec_label_pc_1004f23, !insn.addr !1817

dec_label_pc_1004ed4:                             ; preds = %dec_label_pc_1004ec7
  %49 = add i32 %47, 2057895902, !insn.addr !1818
  %50 = udiv i32 %ecx.0.reload, 256, !insn.addr !1819
  %51 = trunc i32 %50 to i8, !insn.addr !1819
  %52 = icmp eq i8 %51, -1, !insn.addr !1819
  %53 = and i32 %50, 255, !insn.addr !1819
  %54 = and i32 %49, -256, !insn.addr !1819
  %55 = or i32 %54, %53
  %56 = xor i32 %55, 255, !insn.addr !1819
  %57 = add i32 %ecx.0.reload, -1, !insn.addr !1820
  %58 = icmp eq i32 %57, 0, !insn.addr !1820
  %59 = or i1 %58, %52, !insn.addr !1820
  store i32 %56, i32* %eax.0.reg2mem, !insn.addr !1820
  br i1 %59, label %dec_label_pc_1004edf, label %dec_label_pc_1004f0b, !insn.addr !1820

dec_label_pc_1004edf:                             ; preds = %dec_label_pc_1004ed4
  %60 = load i32, i32* inttoptr (i32 205163264 to i32*), align 256, !insn.addr !1821
  %61 = inttoptr i32 %60 to i32*, !insn.addr !1822
  %62 = load i32, i32* %39, align 4, !insn.addr !1823
  %63 = add i32 %esp.0.reload, -8, !insn.addr !1823
  %64 = inttoptr i32 %63 to i32*, !insn.addr !1823
  store i32 %62, i32* %64, align 4, !insn.addr !1823
  %65 = inttoptr i32 %2 to i32*, !insn.addr !1824
  %66 = load i32, i32* %65, align 4, !insn.addr !1824
  %67 = trunc i32 %2 to i8
  %68 = or i8 %67, -119, !insn.addr !1825
  store i8 %68, i8* inttoptr (i32 814416756 to i8*), align 4, !insn.addr !1825
  %69 = add i32 %66, 213695748, !insn.addr !1826
  %70 = inttoptr i32 %69 to i32*, !insn.addr !1826
  %71 = load i32, i32* %70, align 4, !insn.addr !1826
  call void @__asm_int(i32 56), !insn.addr !1827
  %72 = add i32 %71, -2, !insn.addr !1828
  %73 = inttoptr i32 %72 to i16*, !insn.addr !1828
  %74 = or i32 %2, 141, !insn.addr !1829
  store i32 %74, i32* %eax.0.reg2mem, !insn.addr !1829
  store i32 %66, i32* %ebx.0.reg2mem, !insn.addr !1829
  br label %dec_label_pc_1004f0b, !insn.addr !1829

dec_label_pc_1004f0b:                             ; preds = %dec_label_pc_1004ed4, %dec_label_pc_1004edf
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %75 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !1830
  %76 = load i8, i8* %75, align 1, !insn.addr !1830
  %77 = trunc i32 %eax.0.reload to i8, !insn.addr !1830
  %78 = add i8 %76, %77, !insn.addr !1830
  store i8 %78, i8* %75, align 1, !insn.addr !1830
  %79 = load i32, i32* %esi, align 4, !insn.addr !1831
  %80 = add i32 %79, %ebx.0.reload, !insn.addr !1831
  %81 = inttoptr i32 %80 to i8*, !insn.addr !1832
  %82 = load i8, i8* %81, align 1, !insn.addr !1832
  %83 = inttoptr i32 %0 to i8*, !insn.addr !1832
  store i8 %82, i8* %83, align 1, !insn.addr !1832
  ret i32 %57, !insn.addr !1833

dec_label_pc_1004f23:                             ; preds = %dec_label_pc_1004ec7
  %84 = add i32 %ecx.0.reload, %3, !insn.addr !1834
  %85 = and i32 %84, 255, !insn.addr !1834
  %86 = and i32 %ecx.0.reload, -256, !insn.addr !1834
  %87 = or i32 %85, %86, !insn.addr !1834
  %88 = and i32 %47, 14
  %89 = icmp ugt i32 %88, 9, !insn.addr !1835
  %90 = or i1 %37, %89, !insn.addr !1835
  %91 = add i32 %47, 6, !insn.addr !1835
  %92 = select i1 %90, i32 %91, i32 %47, !insn.addr !1835
  %93 = zext i1 %90 to i32, !insn.addr !1835
  %94 = and i32 %92, 15, !insn.addr !1835
  %95 = and i32 %47, -65536, !insn.addr !1835
  %96 = or i32 %94, %95, !insn.addr !1835
  %97 = mul i32 %93, 256
  %98 = add i32 %97, %47
  %99 = and i32 %98, 65280, !insn.addr !1835
  %100 = or i32 %96, %99, !insn.addr !1835
  %101 = add i32 %100, -88, !insn.addr !1836
  %102 = inttoptr i32 %101 to i32*, !insn.addr !1836
  store i32 0, i32* %102, align 4, !insn.addr !1836
  %103 = load i32, i32* %39, align 4, !insn.addr !1837
  %104 = add i32 %103, -99, !insn.addr !1838
  %105 = inttoptr i32 %104 to i32*, !insn.addr !1838
  %106 = load i32, i32* %105, align 4, !insn.addr !1838
  %107 = add i32 %esp.0.reload, -8, !insn.addr !1838
  %108 = inttoptr i32 %107 to i32*
  store i32 %106, i32* %108, align 4, !insn.addr !1838
  store i1 %42, i1* %of.0.reg2mem, !insn.addr !1839
  store i32 %87, i32* %ecx.0.reg2mem, !insn.addr !1839
  store i32 %45, i32* %esp.0.reg2mem, !insn.addr !1839
  br i1 %43, label %dec_label_pc_1004ec7, label %dec_label_pc_1004f3e, !insn.addr !1839

dec_label_pc_1004f3e:                             ; preds = %dec_label_pc_1004f23
  %109 = bitcast i32* %esi to i8*
  %110 = load i8, i8* %109, align 4, !insn.addr !1840
  call void @__asm_outsb(i16 %13, i8 %110), !insn.addr !1840
  %111 = load i32, i32* %39, align 4, !insn.addr !1841
  %112 = call i8 @__asm_in.3(i16 %13), !insn.addr !1842
  %113 = sext i8 %112 to i32, !insn.addr !1842
  %114 = and i32 %2, -256, !insn.addr !1842
  %115 = or i32 %114, %113, !insn.addr !1842
  %116 = add i32 %111, 3, !insn.addr !1843
  %117 = inttoptr i32 %116 to i32*, !insn.addr !1843
  %118 = load i32, i32* %117, align 4, !insn.addr !1843
  %119 = mul i32 %87, 4, !insn.addr !1844
  %120 = add i32 %119, 12, !insn.addr !1844
  %121 = udiv i32 %120, 4, !insn.addr !1845
  %122 = inttoptr i32 %115 to i8*, !insn.addr !1846
  %123 = inttoptr i32 %118 to i8*, !insn.addr !1846
  call void @__asm_rep_movsd_memcpy(i8* %123, i8* %122, i32 %121), !insn.addr !1846
  %124 = select i1 %6, i32 -4, i32 4, !insn.addr !1846
  %125 = mul i32 %121, %124, !insn.addr !1846
  %126 = add i32 %118, %125, !insn.addr !1846
  %127 = and i32 %120, -44, !insn.addr !1847
  %128 = inttoptr i32 %126 to i8*, !insn.addr !1848
  call void @__asm_rep_movsb_memcpy(i8* %128, i8* %128, i32 %127), !insn.addr !1848
  %129 = select i1 %6, i32 -1, i32 1, !insn.addr !1848
  %130 = mul i32 %127, %129, !insn.addr !1848
  %131 = add i32 %126, %130, !insn.addr !1848
  store i32 %131, i32* %esi, align 4, !insn.addr !1848
  %132 = add i32 %esp.0.reload, -12, !insn.addr !1849
  %133 = inttoptr i32 %132 to i32*, !insn.addr !1849
  store i32 %33, i32* %133, align 4, !insn.addr !1849
  %134 = call i32 @function_100be29(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1850
  %135 = call i32 @__asm_fnsave(), !insn.addr !1851
  %136 = sext i32 %135 to i864, !insn.addr !1851
  %137 = add i32 %1, -47, !insn.addr !1851
  %138 = inttoptr i32 %137 to i864*, !insn.addr !1851
  store i864 %136, i864* %138, align 4, !insn.addr !1851
  %139 = and i32 %131, %3, !insn.addr !1852
  %140 = add i32 %1, -20, !insn.addr !1853
  %141 = inttoptr i32 %140 to i32*, !insn.addr !1853
  %142 = load i32, i32* %141, align 4, !insn.addr !1853
  %143 = add i32 %142, -19, !insn.addr !1854
  %144 = inttoptr i32 %143 to i32*, !insn.addr !1854
  %145 = load i32, i32* %144, align 4, !insn.addr !1854
  %146 = add i32 %esp.0.reload, -16, !insn.addr !1854
  %147 = inttoptr i32 %146 to i32*, !insn.addr !1854
  store i32 %145, i32* %147, align 4, !insn.addr !1854
  %148 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !1855
  %149 = add i32 %1, -73, !insn.addr !1856
  %150 = inttoptr i32 %149 to i32*, !insn.addr !1856
  %151 = load i32, i32* %150, align 4, !insn.addr !1856
  %152 = add i32 %151, -109, !insn.addr !1857
  %153 = inttoptr i32 %152 to i32*, !insn.addr !1857
  %154 = load i32, i32* %153, align 4, !insn.addr !1857
  %155 = and i32 %154, 69, !insn.addr !1857
  store i32 %155, i32* %153, align 4, !insn.addr !1857
  %156 = add i32 %151, 111, !insn.addr !1858
  %157 = inttoptr i32 %156 to i32*, !insn.addr !1858
  %158 = load i32, i32* %157, align 4, !insn.addr !1858
  %159 = add i32 %esp.0.reload, -20, !insn.addr !1858
  %160 = inttoptr i32 %159 to i32*, !insn.addr !1858
  store i32 %158, i32* %160, align 4, !insn.addr !1858
  %161 = load i32, i32* %141, align 4, !insn.addr !1859
  %162 = add i32 %161, 4, !insn.addr !1860
  %163 = inttoptr i32 %162 to i32*, !insn.addr !1860
  store i32 %151, i32* %163, align 4, !insn.addr !1860
  %164 = load i32, i32* %34, align 4, !insn.addr !1861
  %165 = add i32 %164, 4, !insn.addr !1862
  %166 = inttoptr i32 %165 to i32*, !insn.addr !1862
  %167 = load i32, i32* %166, align 4, !insn.addr !1862
  store i32 %167, i32* %esi, align 4, !insn.addr !1862
  %168 = add i32 %167, -54, !insn.addr !1863
  %169 = inttoptr i32 %168 to i32*, !insn.addr !1863
  %170 = load i32, i32* %169, align 4, !insn.addr !1863
  %171 = load i32, i32* %141, align 4, !insn.addr !1864
  %172 = add i32 %171, -128, !insn.addr !1865
  %173 = inttoptr i32 %172 to i32*, !insn.addr !1865
  %174 = load i32, i32* %173, align 4, !insn.addr !1865
  %175 = inttoptr i32 %171 to i8*, !insn.addr !1866
  %176 = load i8, i8* %175, align 1, !insn.addr !1866
  %177 = trunc i32 %171 to i8, !insn.addr !1866
  %178 = add i8 %176, %177, !insn.addr !1866
  store i8 %178, i8* %175, align 1, !insn.addr !1866
  %179 = add i32 %170, -1510800664, !insn.addr !1867
  %180 = inttoptr i32 %179 to i32*, !insn.addr !1867
  %181 = load i32, i32* %180, align 4, !insn.addr !1867
  %182 = udiv i32 %181, 2048, !insn.addr !1867
  %183 = mul i32 %181, 2097152, !insn.addr !1867
  %184 = or i32 %182, %183, !insn.addr !1867
  store i32 %184, i32* %180, align 4, !insn.addr !1867
  %185 = add i32 %esp.0.reload, -24, !insn.addr !1868
  %186 = inttoptr i32 %185 to i32*, !insn.addr !1868
  store i32 -519284212, i32* %186, align 4, !insn.addr !1868
  %187 = add i32 %esp.0.reload, -17829, !insn.addr !1868
  %188 = and i32 %171, 14
  %189 = icmp ugt i32 %188, 9, !insn.addr !1869
  %190 = sext i1 %189 to i32, !insn.addr !1869
  %191 = and i32 %171, -65536, !insn.addr !1869
  %192 = mul i32 %190, 256
  %193 = add i32 %192, %171
  %194 = and i32 %193, 65280, !insn.addr !1869
  %195 = or i32 %194, %191, !insn.addr !1869
  %196 = mul i32 %167, 8, !insn.addr !1870
  %197 = add i32 %2, 654326316, !insn.addr !1870
  %198 = add i32 %197, %196, !insn.addr !1870
  %199 = inttoptr i32 %198 to i32*, !insn.addr !1870
  %200 = load i32, i32* %199, align 4, !insn.addr !1870
  %201 = add i32 %187, %200, !insn.addr !1870
  store i32 %201, i32* %199, align 4, !insn.addr !1870
  %202 = add i32 %esp.0.reload, -17833, !insn.addr !1871
  %203 = inttoptr i32 %202 to i16*, !insn.addr !1871
  %204 = trunc i32 %139 to i16, !insn.addr !1872
  %205 = call i8 @__asm_in.3(i16 %204), !insn.addr !1872
  %206 = sext i8 %205 to i32, !insn.addr !1872
  %207 = or i32 %195, %206, !insn.addr !1872
  %208 = inttoptr i32 %202 to i32*, !insn.addr !1873
  store i32 %207, i32* %208, align 4, !insn.addr !1873
  %209 = call i32 @function_100be30(), !insn.addr !1874
  %210 = add i32 %esp.0.reload, -151, !insn.addr !1875
  %211 = inttoptr i32 %210 to i32*, !insn.addr !1875
  %212 = load i32, i32* %211, align 4, !insn.addr !1875
  %213 = add i32 %esp.0.reload, -17837, !insn.addr !1875
  %214 = inttoptr i32 %213 to i32*, !insn.addr !1875
  store i32 %212, i32* %214, align 4, !insn.addr !1875
  %215 = sext i32 %212 to i64, !insn.addr !1876
  %216 = mul nsw i64 %215, -124, !insn.addr !1876
  %217 = trunc i64 %216 to i32, !insn.addr !1876
  %218 = mul i64 %215, -532575944704
  %219 = sdiv i64 %218, 4294967296, !insn.addr !1876
  %220 = icmp eq i64 %216, %219, !insn.addr !1876
  %221 = add i32 %217, -150929146, !insn.addr !1877
  %222 = inttoptr i32 %221 to i32*, !insn.addr !1877
  %223 = load i32, i32* %222, align 4, !insn.addr !1877
  %224 = add i32 %223, -1, !insn.addr !1877
  store i32 %224, i32* %222, align 4, !insn.addr !1877
  %225 = select i1 %220, i32 0, i32 255, !insn.addr !1878
  %226 = and i32 %217, -256, !insn.addr !1878
  %227 = or i32 %225, %226, !insn.addr !1878
  %228 = add i32 %227, -44, !insn.addr !1879
  %229 = add i32 %esp.0.reload, -47, !insn.addr !1880
  %230 = inttoptr i32 %229 to i32*, !insn.addr !1880
  store i32 %228, i32* %230, align 4, !insn.addr !1880
  %231 = trunc i32 %228 to i8, !insn.addr !1881
  store i8 %231, i8* inttoptr (i32 -397350881 to i8*), align 1, !insn.addr !1881
  %232 = and i32 %2, 65280, !insn.addr !1882
  %233 = add i32 %232, %2
  %234 = and i32 %233, 65280, !insn.addr !1882
  %235 = and i32 %2, -65281, !insn.addr !1882
  %236 = or i32 %234, %235, !insn.addr !1882
  %237 = call i8 @__asm_in.3(i16 %204), !insn.addr !1883
  %238 = call i32 @__asm_hlt(), !insn.addr !1884
  %239 = call i32 @unknown_5a00be0a(), !insn.addr !1885
  %240 = add i32 %174, -20, !insn.addr !1886
  %241 = inttoptr i32 %240 to i32*, !insn.addr !1886
  %242 = load i32, i32* %241, align 4, !insn.addr !1886
  %243 = add i32 %esp.0.reload, -51, !insn.addr !1886
  %244 = inttoptr i32 %243 to i32*, !insn.addr !1886
  store i32 %242, i32* %244, align 4, !insn.addr !1886
  %245 = mul i32 %174, 8, !insn.addr !1887
  %246 = add i32 %174, 117, !insn.addr !1887
  %247 = add i32 %246, %245, !insn.addr !1887
  %248 = inttoptr i32 %247 to i8*, !insn.addr !1887
  %249 = load i8, i8* %248, align 1, !insn.addr !1887
  %250 = trunc i32 %139 to i8, !insn.addr !1887
  %251 = add i8 %249, %250, !insn.addr !1887
  store i8 %251, i8* %248, align 1, !insn.addr !1887
  %252 = call i32 @unknown_510c9605(), !insn.addr !1888
  %253 = call i32 @unknown_3200bd6f(), !insn.addr !1889
  %254 = add i32 %174, 12, !insn.addr !1890
  %255 = inttoptr i32 %254 to i32*, !insn.addr !1890
  %256 = load i32, i32* %255, align 4, !insn.addr !1890
  %257 = add i32 %esp.0.reload, -55, !insn.addr !1890
  %258 = inttoptr i32 %257 to i32*, !insn.addr !1890
  store i32 %256, i32* %258, align 4, !insn.addr !1890
  %259 = add i32 %esp.0.reload, -59, !insn.addr !1891
  %260 = inttoptr i32 %259 to i32*, !insn.addr !1891
  store i32 %236, i32* %260, align 4, !insn.addr !1891
  ret i32 %253, !insn.addr !1891
}

define i32 @function_1005082() local_unnamed_addr {
dec_label_pc_1005082:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_into(i32 %2), !insn.addr !1892
  %3 = call i32 @unknown_b72b946c(), !insn.addr !1893
  %4 = add i32 %1, -16717723, !insn.addr !1894
  %5 = inttoptr i32 %4 to i8*, !insn.addr !1894
  %6 = load i8, i8* %5, align 1, !insn.addr !1894
  %7 = trunc i32 %3 to i8, !insn.addr !1894
  %8 = add i8 %6, %7, !insn.addr !1894
  store i8 %8, i8* %5, align 1, !insn.addr !1894
  %9 = and i32 %3, 23, !insn.addr !1895
  %10 = or i32 %9, 232, !insn.addr !1895
  %11 = and i32 %3, -256, !insn.addr !1895
  %12 = or i32 %10, %11, !insn.addr !1895
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1896
  %14 = load i8, i8* %13, align 1, !insn.addr !1896
  %15 = trunc i32 %10 to i8, !insn.addr !1896
  %16 = add i8 %14, %15, !insn.addr !1896
  store i8 %16, i8* %13, align 1, !insn.addr !1896
  %17 = add i32 %0, 12, !insn.addr !1897
  %18 = inttoptr i32 %17 to i32*, !insn.addr !1897
  store i32 0, i32* %18, align 4, !insn.addr !1897
  %19 = add i32 %0, -20, !insn.addr !1898
  %20 = inttoptr i32 %19 to i32*, !insn.addr !1898
  %21 = load i32, i32* %20, align 4, !insn.addr !1898
  %22 = call i32 @function_1ae14e0c(i32 %21), !insn.addr !1899
  ret i32 %22, !insn.addr !1899
}

define i32 @function_10050e6() local_unnamed_addr {
dec_label_pc_10050e6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @function_1012670(i32 %1), !insn.addr !1900
  %3 = and i32 %2, %0, !insn.addr !1901
  ret i32 %3, !insn.addr !1902
}

define i32 @function_10050f4() local_unnamed_addr {
dec_label_pc_10050f4:
  ret i32 16801202, !insn.addr !1903
}

define i32 @function_1005132() local_unnamed_addr {
dec_label_pc_1005132:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1005145() local_unnamed_addr {
dec_label_pc_1005145:
  %0 = call i32 @function_1005132(), !insn.addr !1904
  ret i32 %0, !insn.addr !1904
}

define i32 @function_1005148() local_unnamed_addr {
dec_label_pc_1005148:
  %0 = call i32 @unknown_4c2c0(), !insn.addr !1905
  ret i32 %0, !insn.addr !1905
}

define i32 @function_100514f(i16 %arg1) local_unnamed_addr {
dec_label_pc_100514f:
  %eax.1.reg2mem = alloca i32, !insn.addr !1906
  %.reg2mem72 = alloca i32, !insn.addr !1906
  %stack_var_-17.0.reg2mem = alloca i32, !insn.addr !1906
  %.pre.reg2mem = alloca i32, !insn.addr !1906
  %edx.0.reg2mem = alloca i32, !insn.addr !1906
  %eax.0.reg2mem = alloca i32, !insn.addr !1906
  %.reg2mem70 = alloca i32, !insn.addr !1906
  %.reg2mem = alloca i32, !insn.addr !1906
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = call i1 @__decompiler_undefined_function_2()
  %12 = call i1 @__decompiler_undefined_function_2()
  %13 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %14 = zext i1 %13 to i32, !insn.addr !1906
  %15 = zext i1 %12 to i32, !insn.addr !1906
  %16 = mul i32 %15, 4, !insn.addr !1906
  %17 = zext i1 %11 to i32, !insn.addr !1906
  %18 = mul i32 %17, 16, !insn.addr !1906
  %19 = zext i1 %10 to i32, !insn.addr !1906
  %20 = mul i32 %19, 64, !insn.addr !1906
  %21 = zext i1 %9 to i32, !insn.addr !1906
  %22 = mul i32 %21, 128, !insn.addr !1906
  %23 = zext i1 %8 to i32, !insn.addr !1906
  %24 = mul i32 %23, 256, !insn.addr !1906
  %25 = zext i1 %7 to i32, !insn.addr !1906
  %26 = mul i32 %25, 512, !insn.addr !1906
  %27 = zext i1 %6 to i32, !insn.addr !1906
  %28 = mul i32 %27, 1024, !insn.addr !1906
  %29 = zext i1 %5 to i32, !insn.addr !1906
  %30 = mul i32 %29, 2048, !insn.addr !1906
  %31 = zext i1 %4 to i32, !insn.addr !1906
  %32 = mul i32 %31, 16384, !insn.addr !1906
  %33 = or i32 %32, %30, !insn.addr !1906
  %34 = or i32 %33, %28, !insn.addr !1906
  %35 = or i32 %34, %26, !insn.addr !1906
  %36 = or i32 %35, %24, !insn.addr !1906
  %37 = or i32 %36, %22, !insn.addr !1906
  %38 = or i32 %37, %20, !insn.addr !1906
  %39 = or i32 %38, %18, !insn.addr !1906
  %40 = or i32 %39, %14, !insn.addr !1906
  %41 = or i32 %40, %16, !insn.addr !1906
  %42 = or i32 %41, 2, !insn.addr !1906
  store i32 %42, i32* %stack_var_-4, align 4, !insn.addr !1906
  %43 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1906
  %44 = add i32 %1, 117, !insn.addr !1907
  %45 = inttoptr i32 %44 to i32*, !insn.addr !1907
  %46 = load i32, i32* %45, align 4, !insn.addr !1907
  %47 = add i32 %46, %43, !insn.addr !1907
  store i32 %47, i32* %45, align 4, !insn.addr !1907
  %48 = call i32 @function_1005132(), !insn.addr !1908
  %49 = icmp eq i32 %48, 0, !insn.addr !1909
  br i1 %49, label %dec_label_pc_1005172, label %dec_label_pc_1005164, !insn.addr !1910

dec_label_pc_1005164:                             ; preds = %dec_label_pc_100514f
  %50 = load i32, i32* @global_var_1014d48, align 4, !insn.addr !1911
  %51 = icmp ne i32 %50, 0, !insn.addr !1911
  %52 = icmp slt i32 %50, 0, !insn.addr !1911
  %53 = icmp eq i1 %52, false, !insn.addr !1912
  %or.cond = icmp eq i1 %51, %53
  br i1 %or.cond, label %dec_label_pc_10051a4, label %dec_label_pc_1005164.dec_label_pc_1005179_crit_edge, !insn.addr !1913

dec_label_pc_1005164.dec_label_pc_1005179_crit_edge: ; preds = %dec_label_pc_1005164
  %.pre42 = load i32, i32* %ecx, align 4
  store i32 %.pre42, i32* %.reg2mem
  br label %dec_label_pc_1005179

dec_label_pc_1005172:                             ; preds = %dec_label_pc_100514f
  ret i32 0, !insn.addr !1914

dec_label_pc_1005179.loopexit:                    ; preds = %dec_label_pc_10051aa
  store i32 %.reload71, i32* %ecx, align 4
  store i32 %.reload71, i32* %.reg2mem
  br label %dec_label_pc_1005179

dec_label_pc_1005179:                             ; preds = %dec_label_pc_1005164.dec_label_pc_1005179_crit_edge, %dec_label_pc_1005179.loopexit
  %.reload = load i32, i32* %.reg2mem, !insn.addr !1915
  %54 = mul i32 %.reload, 8, !insn.addr !1915
  %55 = add i32 %54, 610549327, !insn.addr !1915
  %56 = inttoptr i32 %55 to i32*, !insn.addr !1915
  %57 = load i32, i32* %56, align 4, !insn.addr !1915
  ret i32 %57, !insn.addr !1916

dec_label_pc_10051a4:                             ; preds = %dec_label_pc_1005164
  %58 = trunc i32 %48 to i8, !insn.addr !1917
  %59 = udiv i32 %3, 256, !insn.addr !1917
  %60 = trunc i32 %59 to i8, !insn.addr !1917
  %61 = add i8 %58, %60, !insn.addr !1917
  %62 = icmp ult i8 %61, %58, !insn.addr !1917
  %63 = and i32 %48, -256, !insn.addr !1917
  %64 = zext i1 %62 to i8, !insn.addr !1918
  %65 = add i8 %61, 48, !insn.addr !1918
  %66 = add i8 %65, %64, !insn.addr !1918
  %67 = zext i8 %66 to i32, !insn.addr !1918
  %68 = or i32 %63, %67, !insn.addr !1918
  %69 = bitcast i32* %ecx to i8*
  %70 = load i8, i8* %69, align 4, !insn.addr !1919
  %71 = or i8 %70, %66, !insn.addr !1919
  %72 = load i32, i32* %ecx, align 4, !insn.addr !1919
  %73 = inttoptr i32 %72 to i8*, !insn.addr !1919
  store i8 %71, i8* %73, align 1, !insn.addr !1919
  %ecx.promoted = load i32, i32* %ecx, align 4
  store i32 %ecx.promoted, i32* %.reg2mem70, !insn.addr !1919
  store i32 %68, i32* %eax.0.reg2mem, !insn.addr !1919
  br label %dec_label_pc_10051aa, !insn.addr !1919

dec_label_pc_10051aa:                             ; preds = %dec_label_pc_10051c3, %dec_label_pc_10051a4
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.reload71 = load i32, i32* %.reg2mem70
  %74 = add i32 %eax.0.reload, 65, !insn.addr !1920
  %75 = icmp ult i32 %.reload71, %74, !insn.addr !1921
  br i1 %75, label %dec_label_pc_1005179.loopexit, label %dec_label_pc_10051b9, !insn.addr !1922

dec_label_pc_10051b9:                             ; preds = %dec_label_pc_10051aa
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %76 = and i32 %edx.0.reload, 65280, !insn.addr !1923
  %77 = add i32 %76, %.reload71
  %78 = icmp eq i32 %.reload71, %74, !insn.addr !1921
  br i1 %78, label %dec_label_pc_10051e1, label %dec_label_pc_10051bb, !insn.addr !1924

dec_label_pc_10051bb:                             ; preds = %dec_label_pc_10051b9
  %79 = icmp eq i32 %.reload71, 11908748, !insn.addr !1925
  br i1 %79, label %dec_label_pc_1005249.loopexit, label %dec_label_pc_10051c3, !insn.addr !1926

dec_label_pc_10051c3:                             ; preds = %dec_label_pc_10051bb
  %80 = and i32 %77, 65280, !insn.addr !1923
  %81 = and i32 %edx.0.reload, -65281, !insn.addr !1923
  %82 = or i32 %80, %81, !insn.addr !1923
  %83 = add i32 %.reload71, -11908749, !insn.addr !1927
  %84 = icmp eq i32 %83, 0, !insn.addr !1927
  store i32 0, i32* %.reg2mem70, !insn.addr !1928
  store i32 %74, i32* %eax.0.reg2mem, !insn.addr !1928
  store i32 %82, i32* %edx.0.reg2mem, !insn.addr !1928
  br i1 %84, label %dec_label_pc_10051aa, label %dec_label_pc_10051c6, !insn.addr !1928

dec_label_pc_10051c6:                             ; preds = %dec_label_pc_10051c3
  store i32 %83, i32* %ecx, align 4
  %85 = add i32 %.reload71, -795604249, !insn.addr !1929
  %86 = inttoptr i32 %85 to i8*, !insn.addr !1929
  %87 = load i8, i8* %86, align 1, !insn.addr !1929
  %88 = trunc i32 %edx.0.reload to i8, !insn.addr !1929
  %89 = add i8 %87, %88, !insn.addr !1929
  store i8 %89, i8* %86, align 1, !insn.addr !1929
  %.pre.pre = load i32, i32* %ecx, align 4
  store i32 %.pre.pre, i32* %.pre.reg2mem, !insn.addr !1930
  store i32 123, i32* %stack_var_-17.0.reg2mem, !insn.addr !1930
  br label %dec_label_pc_1005249, !insn.addr !1930

dec_label_pc_10051e1:                             ; preds = %dec_label_pc_10051b9
  store i32 %.reload71, i32* %ecx, align 4
  %90 = call i32 @__readfsdword(i32 %.reload71), !insn.addr !1931
  %91 = add i32 %90, %.reload71, !insn.addr !1931
  call void @__writefsdword(i32 %.reload71, i32 %91), !insn.addr !1931
  %92 = add i32 %0, 73, !insn.addr !1932
  %93 = add i32 %92, %.reload71, !insn.addr !1932
  %94 = inttoptr i32 %93 to i8*, !insn.addr !1932
  %95 = load i8, i8* %94, align 1, !insn.addr !1932
  %96 = udiv i32 %77, 256, !insn.addr !1932
  %97 = trunc i32 %96 to i8, !insn.addr !1932
  %98 = add i8 %95, %97, !insn.addr !1932
  store i8 %98, i8* %94, align 1, !insn.addr !1932
  ret i32 %.reload71, !insn.addr !1933

dec_label_pc_1005249.loopexit:                    ; preds = %dec_label_pc_10051bb
  store i32 0, i32* %ecx, align 4
  store i32 0, i32* %.pre.reg2mem
  store i32 125, i32* %stack_var_-17.0.reg2mem
  br label %dec_label_pc_1005249

dec_label_pc_1005249:                             ; preds = %dec_label_pc_1005249.loopexit, %dec_label_pc_10051c6
  %stack_var_-17.0.reload = load i32, i32* %stack_var_-17.0.reg2mem
  %.pre.reload = load i32, i32* %.pre.reg2mem
  %99 = add i32 %2, -1174133745, !insn.addr !1934
  %100 = inttoptr i32 %99 to i8*, !insn.addr !1934
  store i32 %.pre.reload, i32* %.reg2mem72, !insn.addr !1935
  store i32 %stack_var_-17.0.reload, i32* %eax.1.reg2mem, !insn.addr !1935
  br label %dec_label_pc_100524a, !insn.addr !1935

dec_label_pc_100524a:                             ; preds = %dec_label_pc_100524a, %dec_label_pc_1005249
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %.reload73 = load i32, i32* %.reg2mem72, !insn.addr !1934
  %101 = load i8, i8* %100, align 1, !insn.addr !1934
  %102 = trunc i32 %.reload73 to i8, !insn.addr !1934
  %103 = add i8 %101, %102, !insn.addr !1934
  store i8 %103, i8* %100, align 1, !insn.addr !1934
  %104 = trunc i32 %eax.1.reload to i8, !insn.addr !1936
  call void @__asm_out.6(i32 235, i8 %104), !insn.addr !1936
  %105 = add i32 %eax.1.reload, -47, !insn.addr !1937
  %106 = inttoptr i32 %105 to i32*, !insn.addr !1937
  %107 = load i32, i32* %106, align 4, !insn.addr !1937
  %108 = add i32 %107, %eax.1.reload, !insn.addr !1937
  %109 = load i32, i32* %ecx, align 4, !insn.addr !1938
  %110 = sdiv i32 %109, 2, !insn.addr !1938
  %.off = add i32 %109, 1
  %111 = icmp ult i32 %.off, 3
  store i32 %110, i32* %ecx, align 4, !insn.addr !1938
  store i32 0, i32* %.reg2mem72, !insn.addr !1939
  store i32 %108, i32* %eax.1.reg2mem, !insn.addr !1939
  br i1 %111, label %dec_label_pc_100524a, label %dec_label_pc_1005261, !insn.addr !1939

dec_label_pc_1005261:                             ; preds = %dec_label_pc_100524a
  %112 = udiv i32 %2, 256, !insn.addr !1940
  %113 = trunc i32 %112 to i8, !insn.addr !1940
  %114 = add i32 %110, 1090222329, !insn.addr !1940
  %115 = inttoptr i32 %114 to i8*, !insn.addr !1940
  store i8 %113, i8* %115, align 1, !insn.addr !1940
  ret i32 %108, !insn.addr !1941
}

define i32 @function_100526a() local_unnamed_addr {
dec_label_pc_100526a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, 0, !insn.addr !1942
  br i1 %1, label %dec_label_pc_1005299, label %dec_label_pc_100526c, !insn.addr !1942

dec_label_pc_100526c:                             ; preds = %dec_label_pc_100526a
  %2 = inttoptr i32 %0 to i32*, !insn.addr !1943
  %3 = call i32 @function_100526a(), !insn.addr !1944
  ret i32 %3, !insn.addr !1944

dec_label_pc_1005299:                             ; preds = %dec_label_pc_100526a
  call void @llvm.trap()
  unreachable
}

define i32 @function_10052a9() local_unnamed_addr {
dec_label_pc_10052a9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !1945
}

define i32 @function_10052b2(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10052b2:
  %0 = call i32 @unknown_165abdd(), !insn.addr !1946
  ret i32 %0, !insn.addr !1947
}

define i32 @function_100530e() local_unnamed_addr {
dec_label_pc_100530e:
  %0 = call i32 @function_8ca64615(), !insn.addr !1948
  ret i32 %0, !insn.addr !1948
}

define i32 @function_1005322() local_unnamed_addr {
dec_label_pc_1005322:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1005330() local_unnamed_addr {
dec_label_pc_1005330:
  %0 = call i32 @function_5fc52ca(), !insn.addr !1949
  ret i32 %0, !insn.addr !1949
}

define i32 @function_100535e() local_unnamed_addr {
dec_label_pc_100535e:
  %0 = call i32 @function_8ca64665(), !insn.addr !1950
  ret i32 %0, !insn.addr !1950
}

define i32 @function_1005380(i32 %arg1) local_unnamed_addr {
dec_label_pc_1005380:
  %storemerge.reg2mem = alloca i32, !insn.addr !1951
  %eax.0.reg2mem = alloca i32, !insn.addr !1951
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %6 = inttoptr i32 %5 to i8*, !insn.addr !1951
  store i8 0, i8* %6, align 1, !insn.addr !1951
  %7 = add i32 %4, -205062372, !insn.addr !1952
  %8 = inttoptr i32 %7 to i8*, !insn.addr !1952
  %9 = load i8, i8* %8, align 1, !insn.addr !1952
  %10 = trunc i32 %4 to i8, !insn.addr !1952
  %11 = add i8 %9, %10, !insn.addr !1952
  store i8 %11, i8* %8, align 1, !insn.addr !1952
  %12 = and i32 %5, -1962934166, !insn.addr !1953
  %13 = add i32 %2, 1166737440, !insn.addr !1954
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1954
  %15 = load i32, i32* %14, align 4, !insn.addr !1954
  %16 = add i32 %15, 1, !insn.addr !1954
  %17 = xor i32 %15, -2147483648
  %18 = and i32 %16, %17, !insn.addr !1954
  %19 = icmp slt i32 %18, 0, !insn.addr !1954
  %20 = icmp slt i32 %16, 0, !insn.addr !1954
  store i32 %16, i32* %14, align 4, !insn.addr !1954
  %21 = icmp eq i1 %20, %19, !insn.addr !1955
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !1955
  br i1 %21, label %22, label %dec_label_pc_1005395, !insn.addr !1955

; <label>:22:                                     ; preds = %dec_label_pc_1005380
  %23 = call i32 @function_1005322(), !insn.addr !1955
  store i32 %23, i32* %eax.0.reg2mem, !insn.addr !1955
  br label %dec_label_pc_1005395, !insn.addr !1955

dec_label_pc_1005395:                             ; preds = %22, %dec_label_pc_1005380
  %24 = udiv i32 %2, 256, !insn.addr !1956
  %25 = mul i32 %24, 2
  %26 = xor i32 %25, %24
  %27 = trunc i32 %26 to i8, !insn.addr !1956
  %28 = icmp slt i8 %27, 0, !insn.addr !1956
  br i1 %28, label %dec_label_pc_100539d, label %dec_label_pc_1005399, !insn.addr !1957

dec_label_pc_1005399:                             ; preds = %dec_label_pc_1005395
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !1957

dec_label_pc_100539d:                             ; preds = %dec_label_pc_1005395
  %29 = mul i32 %24, 512, !insn.addr !1956
  %30 = and i32 %29, 65024, !insn.addr !1956
  %31 = and i32 %2, -65281, !insn.addr !1956
  %32 = or i32 %30, %31, !insn.addr !1956
  %33 = add i32 %32, -1962862581, !insn.addr !1958
  %34 = inttoptr i32 %33 to i8*, !insn.addr !1958
  %35 = load i8, i8* %34, align 1, !insn.addr !1958
  %36 = add i8 %35, %10, !insn.addr !1958
  store i8 %36, i8* %34, align 1, !insn.addr !1958
  %37 = inttoptr i32 %32 to i32*, !insn.addr !1959
  %38 = load i32, i32* %37, align 4, !insn.addr !1959
  %39 = add i32 %38, -100472383, !insn.addr !1960
  %40 = inttoptr i32 %39 to i32*, !insn.addr !1960
  %41 = load i32, i32* %40, align 4, !insn.addr !1960
  %42 = add i32 %0, 4, !insn.addr !1961
  %43 = add i32 %1, 4, !insn.addr !1961
  %44 = and i32 %41, 3, !insn.addr !1962
  %45 = inttoptr i32 %43 to i8*, !insn.addr !1963
  %46 = inttoptr i32 %42 to i8*, !insn.addr !1963
  call void @__asm_rep_movsb_memcpy(i8* %46, i8* %45, i32 %44), !insn.addr !1963
  %47 = add i32 %44, %42, !insn.addr !1963
  %48 = and i32 %3, -256, !insn.addr !1964
  %49 = or i32 %48, 112, !insn.addr !1964
  %50 = call i32 @function_100d1c1(), !insn.addr !1965
  %51 = load i32, i32* %37, align 4, !insn.addr !1966
  %52 = load i32, i32* inttoptr (i32 72256135 to i32*), align 4, !insn.addr !1967
  %53 = add i32 %52, 4, !insn.addr !1968
  %54 = inttoptr i32 %53 to i32*, !insn.addr !1968
  %55 = load i32, i32* %54, align 4, !insn.addr !1968
  %56 = add i32 %55, 4, !insn.addr !1969
  %57 = inttoptr i32 %56 to i32*, !insn.addr !1969
  %58 = load i32, i32* %57, align 4, !insn.addr !1969
  %59 = call i32 @unknown_1027bfb(i32 %58, i32 %47, i32 %47, i32 72256261, i32* nonnull %stack_var_0, i32 %32, i32 %49, i32 0, i32 %51), !insn.addr !1970
  %60 = load i32, i32* %37, align 4, !insn.addr !1971
  %61 = add i32 %60, 91, !insn.addr !1972
  %62 = inttoptr i32 %61 to i32*, !insn.addr !1972
  store i32 %59, i32* %62, align 4, !insn.addr !1972
  %63 = load i32, i32* inttoptr (i32 72256357 to i32*), align 4, !insn.addr !1973
  %64 = add i32 %63, 4, !insn.addr !1974
  %65 = inttoptr i32 %64 to i32*, !insn.addr !1974
  %66 = load i32, i32* %65, align 4, !insn.addr !1974
  %67 = load i32, i32* %37, align 4, !insn.addr !1975
  %68 = add i32 %67, 81, !insn.addr !1976
  %69 = inttoptr i32 %68 to i32*, !insn.addr !1976
  %70 = load i32, i32* %69, align 4, !insn.addr !1976
  %71 = load i32, i32* inttoptr (i32 72256263 to i32*), align 4, !insn.addr !1977
  %72 = mul i32 %71, 128, !insn.addr !1977
  %73 = udiv i32 %71, 33554432, !insn.addr !1977
  %74 = or i32 %73, %72, !insn.addr !1977
  store i32 %74, i32* inttoptr (i32 72256263 to i32*), align 4, !insn.addr !1977
  %75 = inttoptr i32 %66 to i32*, !insn.addr !1978
  %76 = load i32, i32* %75, align 4, !insn.addr !1978
  %77 = inttoptr i32 %70 to i32*, !insn.addr !1978
  store i32 %76, i32* %77, align 4, !insn.addr !1978
  %78 = add i32 %70, 4, !insn.addr !1978
  %79 = add i32 %66, 4, !insn.addr !1978
  %80 = and i32 %67, -65281, !insn.addr !1979
  %81 = or i32 %80, 57600, !insn.addr !1979
  %82 = add i32 %79, %32, !insn.addr !1980
  %83 = and i32 %79, 15, !insn.addr !1980
  %84 = and i32 %2, 15, !insn.addr !1980
  %85 = add nuw nsw i32 %83, %84, !insn.addr !1980
  %86 = icmp ugt i32 %85, 15, !insn.addr !1980
  %87 = icmp ult i32 %82, %79, !insn.addr !1980
  %88 = inttoptr i32 %82 to i8*, !insn.addr !1981
  %89 = load i8, i8* %88, align 1, !insn.addr !1981
  %90 = inttoptr i32 %78 to i8*, !insn.addr !1981
  store i8 %89, i8* %90, align 1, !insn.addr !1981
  %91 = trunc i32 %67 to i8, !insn.addr !1982
  %92 = and i8 %91, 14, !insn.addr !1982
  %93 = icmp ugt i8 %92, 9, !insn.addr !1982
  %94 = or i1 %93, %86, !insn.addr !1982
  %95 = icmp ugt i8 %91, -103
  %96 = or i1 %95, %87
  br i1 %94, label %97, label %103, !insn.addr !1982

; <label>:97:                                     ; preds = %dec_label_pc_100539d
  %98 = inttoptr i32 %0 to i32*, !insn.addr !1961
  %.v = select i1 %96, i32 102, i32 6
  %99 = add i32 %.v, %67, !insn.addr !1982
  %100 = and i32 %99, 255, !insn.addr !1982
  %101 = and i32 %81, -7936, !insn.addr !1982
  %102 = or i32 %100, %101, !insn.addr !1982
  store i32 %102, i32* %storemerge.reg2mem, !insn.addr !1982
  br label %109, !insn.addr !1982

; <label>:103:                                    ; preds = %dec_label_pc_100539d
  %104 = add i32 %67, 96, !insn.addr !1982
  %105 = select i1 %96, i32 %104, i32 %67, !insn.addr !1982
  %106 = and i32 %105, 255, !insn.addr !1982
  %107 = and i32 %81, -7936, !insn.addr !1982
  %108 = or i32 %106, %107, !insn.addr !1982
  store i32 %108, i32* %storemerge.reg2mem, !insn.addr !1982
  br label %109, !insn.addr !1982

; <label>:109:                                    ; preds = %97, %103
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %110 = inttoptr i32 %storemerge.reload to i8*, !insn.addr !1983
  %111 = load i8, i8* %110, align 1, !insn.addr !1983
  %112 = trunc i32 %storemerge.reload to i8, !insn.addr !1983
  %113 = add i8 %111, %112, !insn.addr !1983
  store i8 %113, i8* %110, align 1, !insn.addr !1983
  ret i32 %storemerge.reload, !insn.addr !1984
}

define i32 @function_1005418(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1005418:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = load i8*, i8** @global_var_1014010, align 4, !insn.addr !1985
  %4 = icmp eq i8* %3, inttoptr (i32 10 to i8*), !insn.addr !1985
  %5 = icmp eq i1 %4, false, !insn.addr !1986
  br i1 %5, label %dec_label_pc_1005441, label %dec_label_pc_1005421, !insn.addr !1986

dec_label_pc_1005421:                             ; preds = %dec_label_pc_1005418
  %6 = call i32 @unknown_1ff8a62(i32 %arg1, i32 %0), !insn.addr !1987
  %7 = call i32 @function_100bc54(), !insn.addr !1988
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1989
  %9 = load i32, i32* %8, align 4, !insn.addr !1989
  %10 = inttoptr i32 %9 to i32*, !insn.addr !1990
  %11 = load i32, i32* %10, align 4, !insn.addr !1990
  %12 = sub i32 0, %11, !insn.addr !1990
  store i32 %12, i32* %10, align 4, !insn.addr !1990
  ret i32 %9, !insn.addr !1991

dec_label_pc_1005441:                             ; preds = %dec_label_pc_1005418
  %13 = add i32 %1, 1, !insn.addr !1992
  %14 = inttoptr i32 %1 to i32*, !insn.addr !1992
  store i32 %13, i32* %14, align 4, !insn.addr !1992
  %15 = load i32, i32* inttoptr (i32 16843856 to i32*), align 16, !insn.addr !1993
  %16 = call i32 @function_1007cfa(i32 %2, i32 %15, i32 %arg2), !insn.addr !1994
  ret i32 %16, !insn.addr !1995
}

define i32 @function_100546c() local_unnamed_addr {
dec_label_pc_100546c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = trunc i32 %2 to i16, !insn.addr !1996
  %5 = call i32 @__asm_in.5(i16 %4), !insn.addr !1996
  %6 = add i32 %1, 1, !insn.addr !1997
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1997
  %8 = load i32, i32* %7, align 4, !insn.addr !1997
  %9 = sub i32 %8, %3, !insn.addr !1997
  store i32 %9, i32* %7, align 4, !insn.addr !1997
  %10 = mul i32 %0, 16, !insn.addr !1998
  %11 = add i32 %1, -67, !insn.addr !1998
  %12 = add i32 %11, %10, !insn.addr !1998
  %13 = inttoptr i32 %12 to i8*, !insn.addr !1998
  %14 = load i8, i8* %13, align 1, !insn.addr !1998
  %15 = udiv i32 %3, 256, !insn.addr !1998
  %16 = trunc i32 %15 to i8, !insn.addr !1998
  %17 = or i8 %14, %16, !insn.addr !1998
  store i8 %17, i8* %13, align 1, !insn.addr !1998
  %18 = bitcast i32* %ebx to i8*
  %19 = load i8, i8* %18, align 4, !insn.addr !1999
  %20 = trunc i32 %3 to i8, !insn.addr !1999
  %21 = add i8 %19, %20, !insn.addr !1999
  %22 = load i32, i32* %ebx, align 4, !insn.addr !1999
  %23 = inttoptr i32 %22 to i8*, !insn.addr !1999
  store i8 %21, i8* %23, align 1, !insn.addr !1999
  ret i32 %5, !insn.addr !2000
}

define i32 @function_100547d() local_unnamed_addr {
dec_label_pc_100547d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = mul i32 %0, 2, !insn.addr !2001
  %4 = add i32 %3, 77, !insn.addr !2001
  %5 = add i32 %4, %2, !insn.addr !2001
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2001
  %7 = load i32, i32* %6, align 4, !insn.addr !2001
  %8 = add i32 %2, %1, !insn.addr !2002
  %9 = inttoptr i32 %1 to i32*, !insn.addr !2002
  store i32 %8, i32* %9, align 4, !insn.addr !2002
  %10 = call i32 @function_1011502(i32 %7), !insn.addr !2003
  ret i32 %10, !insn.addr !2004
}

define i32 @function_100548f(i32 %arg1) local_unnamed_addr {
dec_label_pc_100548f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @unknown_2aba81cc(i32 %arg1, i32 %0, i32 %1, i32 %3, i32 %2), !insn.addr !2005
  ret i32 %4, !insn.addr !2006
}

define i32 @function_10054d1(i32 %arg1) local_unnamed_addr {
dec_label_pc_10054d1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1005517() local_unnamed_addr {
dec_label_pc_1005517:
  %0 = call i32 @function_c0a64830(), !insn.addr !2007
  ret i32 %0, !insn.addr !2007
}

define i32 @function_100553d() local_unnamed_addr {
dec_label_pc_100553d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2008
}

define i32 @function_1005546(i32 %arg1) local_unnamed_addr {
dec_label_pc_1005546:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2009
}

define i32 @function_1005563() local_unnamed_addr {
dec_label_pc_1005563:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !2010
  %4 = inttoptr i32 %0 to i8*, !insn.addr !2010
  store i8 %3, i8* %4, align 1, !insn.addr !2010
  ret i32 %1, !insn.addr !2011
}

define i32 @function_10055a7() local_unnamed_addr {
dec_label_pc_10055a7:
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -393150717, !insn.addr !2012
  %4 = inttoptr i32 %3 to i8*, !insn.addr !2012
  %5 = load i8, i8* %4, align 1, !insn.addr !2012
  %6 = trunc i32 %1 to i8, !insn.addr !2012
  %7 = add i8 %5, %6, !insn.addr !2012
  %8 = icmp ult i8 %7, %5, !insn.addr !2012
  store i8 %7, i8* %4, align 1, !insn.addr !2012
  %9 = bitcast i32* %esi to i8*
  %10 = load i8, i8* %9, align 4, !insn.addr !2013
  %11 = udiv i32 %2, 256, !insn.addr !2013
  %12 = trunc i32 %11 to i8, !insn.addr !2013
  %13 = zext i1 %8 to i8, !insn.addr !2013
  %14 = add i8 %10, %12, !insn.addr !2013
  %15 = add i8 %14, %13, !insn.addr !2013
  %16 = load i32, i32* %esi, align 4, !insn.addr !2013
  %17 = inttoptr i32 %16 to i8*, !insn.addr !2013
  store i8 %15, i8* %17, align 1, !insn.addr !2013
  %18 = bitcast i32* %edx to i8*
  %19 = load i8, i8* %18, align 4, !insn.addr !2014
  %20 = trunc i32 %0 to i8, !insn.addr !2014
  %21 = add i8 %19, %20, !insn.addr !2014
  %22 = load i32, i32* %edx, align 4, !insn.addr !2014
  %23 = inttoptr i32 %22 to i8*, !insn.addr !2014
  store i8 %21, i8* %23, align 1, !insn.addr !2014
  %24 = call i32 @function_8b308903(), !insn.addr !2015
  ret i32 %24, !insn.addr !2015
}

define i32 @function_10055e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10055e8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = trunc i32 %3 to i8, !insn.addr !2016
  %7 = add i8 %6, -4, !insn.addr !2016
  %8 = and i8 %6, 15, !insn.addr !2016
  %9 = add nsw i8 %8, -4, !insn.addr !2016
  %10 = icmp ugt i8 %9, 15, !insn.addr !2016
  %11 = icmp ult i8 %6, 4, !insn.addr !2016
  %12 = icmp eq i8 %7, 0, !insn.addr !2016
  %13 = icmp slt i8 %7, 0, !insn.addr !2016
  %14 = call i8 @llvm.ctpop.i8(i8 %7), !range !258, !insn.addr !2016
  %15 = and i8 %14, 1, !insn.addr !2016
  %16 = icmp eq i8 %15, 0, !insn.addr !2016
  %17 = call i32 @unknown_12c7b5f(), !insn.addr !2017
  %18 = zext i1 %11 to i32, !insn.addr !2018
  %19 = zext i1 %16 to i32, !insn.addr !2018
  %20 = zext i1 %10 to i32, !insn.addr !2018
  %21 = zext i1 %12 to i32, !insn.addr !2018
  %22 = zext i1 %13 to i32, !insn.addr !2018
  %23 = mul i32 %19, 4, !insn.addr !2018
  %24 = mul i32 %20, 16, !insn.addr !2018
  %25 = mul i32 %21, 64, !insn.addr !2018
  %26 = mul i32 %22, 128, !insn.addr !2018
  %27 = or i32 %25, %18, !insn.addr !2018
  %28 = or i32 %27, %26, !insn.addr !2018
  %29 = or i32 %28, %24, !insn.addr !2018
  %30 = or i32 %29, %23, !insn.addr !2018
  %31 = mul i32 %30, 256, !insn.addr !2018
  %32 = and i32 %1, -65536, !insn.addr !2018
  %33 = add i32 %1, 4, !insn.addr !2019
  %34 = and i32 %33, 255, !insn.addr !2019
  %35 = or i32 %32, %34, !insn.addr !2018
  %36 = or i32 %35, %31, !insn.addr !2018
  %37 = or i32 %36, 512, !insn.addr !2019
  %38 = add i32 %1, 1082915909, !insn.addr !2020
  %39 = inttoptr i32 %38 to i8*, !insn.addr !2020
  %40 = load i8, i8* %39, align 1, !insn.addr !2020
  %41 = trunc i32 %2 to i8, !insn.addr !2020
  %42 = add i8 %40, %41, !insn.addr !2020
  store i8 %42, i8* %39, align 1, !insn.addr !2020
  %43 = add nsw i32 %37, -19, !insn.addr !2021
  %44 = inttoptr i32 %43 to i32*, !insn.addr !2021
  %45 = load i32, i32* %44, align 4, !insn.addr !2021
  %46 = call i32 @unknown_12007bfb(i32 %45), !insn.addr !2022
  %47 = add i32 %2, 1, !insn.addr !2023
  %48 = add i32 %46, 139, !insn.addr !2024
  %49 = and i32 %48, 255, !insn.addr !2024
  %50 = and i32 %46, -256, !insn.addr !2024
  %51 = or i32 %49, %50, !insn.addr !2024
  %52 = select i1 %4, i32 -4, i32 4, !insn.addr !2025
  %53 = add i32 %52, %0, !insn.addr !2025
  %54 = add i32 %51, 4, !insn.addr !2026
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2026
  %56 = load i32, i32* %55, align 4, !insn.addr !2026
  %57 = mul i32 %47, 4, !insn.addr !2027
  %58 = add i32 %57, 12, !insn.addr !2027
  %59 = inttoptr i32 %58 to i8*, !insn.addr !2027
  %60 = load i8, i8* %59, align 4, !insn.addr !2027
  %61 = or i8 %60, -117, !insn.addr !2027
  store i8 %61, i8* %59, align 4, !insn.addr !2027
  %62 = mul i32 %47, 512, !insn.addr !2028
  %63 = udiv i32 %47, 8388608, !insn.addr !2028
  %64 = or i32 %63, %62, !insn.addr !2028
  %65 = inttoptr i32 %53 to i32*, !insn.addr !2029
  %66 = load i32, i32* %65, align 4, !insn.addr !2029
  %67 = inttoptr i32 %56 to i32*, !insn.addr !2029
  store i32 %66, i32* %67, align 4, !insn.addr !2029
  %68 = add i32 %56, %52, !insn.addr !2029
  %69 = inttoptr i32 %51 to i8*, !insn.addr !2030
  %70 = inttoptr i32 %68 to i8*, !insn.addr !2030
  call void @__asm_rep_movsb_memcpy(i8* %70, i8* %69, i32 %64), !insn.addr !2030
  %71 = call i32 @function_1007bd1(), !insn.addr !2031
  store i32 73, i32* inttoptr (i32 8716288 to i32*), align 65536, !insn.addr !2032
  store i32 0, i32* inttoptr (i32 8716284 to i32*), align 4, !insn.addr !2033
  %72 = load i32, i32* inttoptr (i32 17064852 to i32*), align 4, !insn.addr !2034
  store i32 %72, i32* inttoptr (i32 8716280 to i32*), align 8, !insn.addr !2034
  %73 = or i32 %71, 21875509, !insn.addr !2035
  %74 = mul i32 %5, 2, !insn.addr !2036
  %75 = icmp ult i32 %74, %5, !insn.addr !2036
  %76 = zext i1 %75 to i32, !insn.addr !2037
  %77 = add i32 %73, 16781591, !insn.addr !2037
  %78 = or i32 %77, %76, !insn.addr !2037
  ret i32 %78, !insn.addr !2038
}

define i32 @function_100565b(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100565b:
  %eax.4.reg2mem = alloca i32, !insn.addr !2039
  %eax.1.reg2mem = alloca i32, !insn.addr !2039
  %eax.0.reg2mem = alloca i32, !insn.addr !2039
  %.pre-phi.reg2mem = alloca i8, !insn.addr !2039
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %2 = call x86_fp80 @__decompiler_undefined_function_6()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-548 = alloca i32, align 4
  %sext = mul i32 %arg2, 65536
  %4 = sdiv i32 %sext, 65536, !insn.addr !2040
  %5 = inttoptr i32 %4 to i8*, !insn.addr !2041
  %6 = load i8, i8* %5, align 1, !insn.addr !2041
  %7 = trunc i32 %4 to i8
  %8 = add i8 %6, %7, !insn.addr !2041
  store i8 %8, i8* %5, align 1, !insn.addr !2041
  %9 = icmp eq i32 %sext, 17825792, !insn.addr !2042
  store i8 %7, i8* %.pre-phi.reg2mem, !insn.addr !2043
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !2043
  br i1 %9, label %10, label %dec_label_pc_1005680, !insn.addr !2043

; <label>:10:                                     ; preds = %dec_label_pc_100565b
  %11 = call i32 @function_bd0057b9(), !insn.addr !2043
  %.pre = trunc i32 %11 to i8, !insn.addr !2044
  store i8 %.pre, i8* %.pre-phi.reg2mem, !insn.addr !2043
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !2043
  br label %dec_label_pc_1005680, !insn.addr !2043

dec_label_pc_1005680:                             ; preds = %10, %dec_label_pc_100565b
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %12 = udiv i32 %eax.0.reload, 256, !insn.addr !2045
  %13 = trunc i32 %12 to i8, !insn.addr !2045
  %14 = add i32 %0, 1, !insn.addr !2045
  %15 = inttoptr i32 %14 to i8*, !insn.addr !2045
  %16 = load i8, i8* %15, align 1, !insn.addr !2045
  %17 = add i8 %16, %13, !insn.addr !2045
  %18 = zext i8 %17 to i32, !insn.addr !2045
  %19 = mul i32 %18, 256, !insn.addr !2045
  %20 = and i32 %eax.0.reload, -65281, !insn.addr !2045
  %21 = or i32 %19, %20, !insn.addr !2045
  %22 = inttoptr i32 %21 to i8*, !insn.addr !2044
  %23 = load i8, i8* %22, align 1, !insn.addr !2044
  %24 = add i8 %23, %.pre-phi.reload, !insn.addr !2044
  %25 = icmp eq i8 %24, 0, !insn.addr !2044
  store i8 %24, i8* %22, align 1, !insn.addr !2044
  store i32 %21, i32* %eax.1.reg2mem, !insn.addr !2046
  br i1 %25, label %26, label %dec_label_pc_100568b, !insn.addr !2046

; <label>:26:                                     ; preds = %dec_label_pc_1005680
  %27 = call i32 @function_1985792(), !insn.addr !2046
  store i32 %27, i32* %eax.1.reg2mem, !insn.addr !2046
  br label %dec_label_pc_100568b, !insn.addr !2046

dec_label_pc_100568b:                             ; preds = %26, %dec_label_pc_1005680
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %28 = icmp eq i32 %eax.1.reload, 2359689, !insn.addr !2047
  br i1 %28, label %dec_label_pc_1005698.thread, label %dec_label_pc_1005698, !insn.addr !2048

dec_label_pc_1005698.thread:                      ; preds = %dec_label_pc_100568b
  %29 = call i32 @function_1655726(), !insn.addr !2048
  br label %dec_label_pc_100569e

dec_label_pc_1005698:                             ; preds = %dec_label_pc_100568b
  %30 = icmp ult i32 %eax.1.reload, 2359690
  br i1 %30, label %dec_label_pc_100569e, label %dec_label_pc_10056a5.thread, !insn.addr !2049

dec_label_pc_100569e:                             ; preds = %dec_label_pc_1005698, %dec_label_pc_1005698.thread
  %31 = call i32 @function_3b0059bb(), !insn.addr !2049
  %32 = icmp ult i32 %31, 306
  br i1 %32, label %dec_label_pc_10056cb, label %dec_label_pc_10056a5, !insn.addr !2050

dec_label_pc_10056a5:                             ; preds = %dec_label_pc_100569e
  %33 = icmp eq i32 %31, 317, !insn.addr !2051
  %34 = icmp eq i1 %33, false, !insn.addr !2052
  store i32 %31, i32* %eax.4.reg2mem, !insn.addr !2052
  br i1 %34, label %dec_label_pc_10056a5.thread, label %dec_label_pc_10056b0, !insn.addr !2052

dec_label_pc_10056a5.thread:                      ; preds = %dec_label_pc_1005698, %dec_label_pc_10056a5
  %35 = call i32 @function_1005a73(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2052
  store i32 %35, i32* %eax.4.reg2mem, !insn.addr !2052
  br label %dec_label_pc_10056b0, !insn.addr !2052

dec_label_pc_10056b0:                             ; preds = %dec_label_pc_10056a5.thread, %dec_label_pc_10056a5
  %eax.4.reload = load i32, i32* %eax.4.reg2mem
  %36 = fptosi x86_fp80 %2 to i32, !insn.addr !2053
  %37 = add i32 %0, 83, !insn.addr !2053
  %38 = inttoptr i32 %37 to i32*, !insn.addr !2053
  store i32 %36, i32* %38, align 4, !insn.addr !2053
  %39 = load i32, i32* inttoptr (i32 1359064984 to i32*), align 8, !insn.addr !2054
  store i32 %eax.4.reload, i32* %stack_var_-548, align 4, !insn.addr !2055
  %40 = call i32 @unknown_d6007b0e(i32 %eax.4.reload, i32 %39, i32 %eax.4.reload), !insn.addr !2056
  %41 = sub i32 0, %0, !insn.addr !2057
  %42 = icmp eq i32 %1, %41, !insn.addr !2057
  br i1 %42, label %dec_label_pc_10059e7, label %dec_label_pc_10059df, !insn.addr !2058

dec_label_pc_10056cb:                             ; preds = %dec_label_pc_100569e
  %43 = load i32, i32* inttoptr (i32 2359689 to i32*), align 4, !insn.addr !2059
  %44 = and i32 %43, -256, !insn.addr !2060
  %45 = or i32 %44, 208, !insn.addr !2060
  ret i32 %45, !insn.addr !2061

dec_label_pc_100599d:                             ; preds = %dec_label_pc_1005a0f
  %46 = call i32 @__asm_sti(), !insn.addr !2062
  %47 = add i32 %40, -6, !insn.addr !2063
  %48 = inttoptr i32 %47 to i16*, !insn.addr !2063
  %49 = add i32 %40, -10, !insn.addr !2064
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2064
  store i32 670953605, i32* %50, align 4, !insn.addr !2064
  ret i32 %46, !insn.addr !2064

dec_label_pc_10059a1:                             ; preds = %dec_label_pc_10059e7
  %51 = inttoptr i32 %79 to i16*, !insn.addr !2065
  %52 = add i32 %40, -8, !insn.addr !2066
  %53 = inttoptr i32 %52 to i32*, !insn.addr !2066
  store i32 %83, i32* %53, align 4, !insn.addr !2066
  %54 = add i32 %40, -12, !insn.addr !2067
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2067
  store i32 %62, i32* %55, align 4, !insn.addr !2067
  %56 = add i32 %40, -16, !insn.addr !2068
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2068
  store i32 273, i32* %57, align 4, !insn.addr !2068
  %58 = load i32, i32* inttoptr (i32 16844140 to i32*), align 4, !insn.addr !2069
  %59 = add i32 %40, -20, !insn.addr !2069
  %60 = inttoptr i32 %59 to i32*, !insn.addr !2069
  store i32 %58, i32* %60, align 4, !insn.addr !2069
  %61 = call i32 @__asm_hlt(), !insn.addr !2070
  ret i32 %61, !insn.addr !2070

dec_label_pc_10059df:                             ; preds = %dec_label_pc_10056b0
  ret i32 %40, !insn.addr !2071

dec_label_pc_10059e7:                             ; preds = %dec_label_pc_10056b0
  %62 = ptrtoint i32* %stack_var_-5 to i32, !insn.addr !2072
  %63 = ptrtoint i32* %stack_var_-548 to i32, !insn.addr !2073
  %64 = trunc i32 %63 to i8, !insn.addr !2074
  %65 = bitcast i32* %ecx to i8*
  %66 = load i8, i8* %65, align 4, !insn.addr !2074
  %67 = add i8 %66, %64, !insn.addr !2074
  %68 = zext i8 %67 to i32, !insn.addr !2074
  %69 = and i32 %63, -256, !insn.addr !2074
  %70 = or i32 %69, %68, !insn.addr !2074
  %71 = add i32 %70, %62, !insn.addr !2075
  %72 = icmp ult i32 %71, %70, !insn.addr !2075
  %73 = udiv i32 %71, 256, !insn.addr !2076
  %74 = mul nuw i32 %73, 249, !insn.addr !2076
  %75 = add i32 %74, %71, !insn.addr !2076
  %76 = and i32 %75, 255, !insn.addr !2076
  %77 = and i32 %71, -65536, !insn.addr !2076
  %78 = or i32 %76, %77, !insn.addr !2076
  %79 = add i32 %40, -4, !insn.addr !2065
  %80 = load i32, i32* inttoptr (i32 -1895740069 to i32*), align 4, !insn.addr !2077
  %81 = inttoptr i32 %79 to i32*, !insn.addr !2077
  store i32 %80, i32* %81, align 4, !insn.addr !2077
  %82 = select i1 %72, i32 16779387, i32 16779386, !insn.addr !2078
  %83 = add i32 %78, %82, !insn.addr !2078
  %84 = load i32, i32* inttoptr (i32 1073827256 to i32*), align 8, !insn.addr !2079
  %85 = icmp eq i32 %84, 670953605, !insn.addr !2079
  br i1 %85, label %dec_label_pc_10059a1, label %dec_label_pc_1005a0f, !insn.addr !2080

dec_label_pc_1005a0f:                             ; preds = %dec_label_pc_10059e7
  %86 = load i32, i32* @global_var_1014d54, align 4, !insn.addr !2081
  %87 = icmp eq i32 %86, -86, !insn.addr !2081
  %88 = icmp eq i1 %87, false, !insn.addr !2082
  br i1 %88, label %dec_label_pc_100599d, label %dec_label_pc_1005a18, !insn.addr !2082

dec_label_pc_1005a18:                             ; preds = %dec_label_pc_1005a0f
  %89 = mul i32 %3, 2, !insn.addr !2083
  %90 = lshr i32 %3, 31, !insn.addr !2083
  %91 = or i32 %90, %89, !insn.addr !2083
  %92 = add i32 %40, -8, !insn.addr !2084
  %93 = inttoptr i32 %92 to i32*, !insn.addr !2084
  store i32 %83, i32* %93, align 4, !insn.addr !2084
  %94 = inttoptr i32 %91 to i16*, !insn.addr !2085
  %95 = call i32 @lstrlenW(i16* %94), !insn.addr !2085
  ret i32 %95, !insn.addr !2086
}

define i32 @function_1005a26() local_unnamed_addr {
dec_label_pc_1005a26:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2087
}

define i32 @function_1005a73(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1005a73:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2088
}

define i32 @function_1005a76() local_unnamed_addr {
dec_label_pc_1005a76:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2089
}

define i32 @function_1005a7a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1005a7a:
  %eax.0.reg2mem = alloca i32, !insn.addr !2090
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_16751 = alloca i32, align 4
  %6 = call i32 @unknown_1a92650(), !insn.addr !2091
  %7 = and i32 %5, -256, !insn.addr !2092
  %8 = or i32 %7, 127, !insn.addr !2092
  %9 = add i32 %8, 101156227, !insn.addr !2093
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2093
  %11 = load i8, i8* %10, align 2, !insn.addr !2093
  %12 = add i8 %11, 127, !insn.addr !2093
  store i8 %12, i8* %10, align 2, !insn.addr !2093
  %13 = call i32 @unknown_fb846a05(i32 0, i32 %2, i32 %1, i32 %3), !insn.addr !2094
  %14 = inttoptr i32 %8 to i32*, !insn.addr !2095
  %15 = load i32, i32* %14, align 4, !insn.addr !2095
  %16 = add i32 %15, %3, !insn.addr !2095
  store i32 %16, i32* %14, align 4, !insn.addr !2095
  %17 = add i32 %13, 20, !insn.addr !2096
  %18 = inttoptr i32 %17 to i8*, !insn.addr !2096
  %19 = load i8, i8* %18, align 1, !insn.addr !2096
  %20 = add i8 %19, 127, !insn.addr !2096
  store i8 %20, i8* %18, align 1, !insn.addr !2096
  %21 = inttoptr i32 %13 to i8*, !insn.addr !2097
  %22 = load i8, i8* %21, align 1, !insn.addr !2097
  %23 = trunc i32 %13 to i8, !insn.addr !2097
  %24 = add i8 %22, %23, !insn.addr !2097
  store i8 %24, i8* %21, align 1, !insn.addr !2097
  %25 = add i32 %13, -1, !insn.addr !2098
  %26 = icmp eq i32 %25, 0, !insn.addr !2098
  store i32 %25, i32* %eax.0.reg2mem, !insn.addr !2099
  br i1 %26, label %27, label %dec_label_pc_1005ac7, !insn.addr !2099

; <label>:27:                                     ; preds = %dec_label_pc_1005a7a
  %28 = call i32 @function_101120a(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2099
  store i32 %28, i32* %eax.0.reg2mem, !insn.addr !2099
  br label %dec_label_pc_1005ac7, !insn.addr !2099

dec_label_pc_1005ac7:                             ; preds = %27, %dec_label_pc_1005a7a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %29 = icmp eq i32 %eax.0.reload, 1, !insn.addr !2100
  %30 = icmp eq i1 %29, false, !insn.addr !2101
  br i1 %30, label %dec_label_pc_1006049, label %dec_label_pc_1005ace, !insn.addr !2101

dec_label_pc_1005ace:                             ; preds = %dec_label_pc_1005ac7
  %31 = add i32 %0, 1, !insn.addr !2102
  %32 = add i32 %4, -1, !insn.addr !2103
  %33 = mul i32 %32, 257
  %34 = and i32 %33, 65280, !insn.addr !2104
  %35 = and i32 %32, 255, !insn.addr !2104
  %36 = or i32 %34, %35, !insn.addr !2104
  %37 = trunc i32 %36 to i16, !insn.addr !2105
  %38 = call i8 @__asm_in.3(i16 %37), !insn.addr !2105
  %39 = call i32 @function_1007c26(), !insn.addr !2106
  %40 = sext i32 %39 to i64, !insn.addr !2107
  %41 = bitcast i64 %40 to double, !insn.addr !2107
  %42 = fptrunc double %41 to float, !insn.addr !2108
  %43 = bitcast float %42 to i32, !insn.addr !2108
  %44 = call i32 @function_1007bc1(i32 %43), !insn.addr !2108
  %45 = load i32, i32* inttoptr (i32 12 to i32*), align 4, !insn.addr !2109
  %46 = ptrtoint i32* %stack_var_16751 to i32, !insn.addr !2110
  %47 = add i32 %3, -16741629, !insn.addr !2111
  %48 = inttoptr i32 %47 to i8*, !insn.addr !2111
  %49 = load i8, i8* %48, align 1, !insn.addr !2111
  %50 = trunc i32 %45 to i8, !insn.addr !2111
  %51 = xor i8 %49, %50, !insn.addr !2111
  store i8 %51, i8* %48, align 1, !insn.addr !2111
  %52 = mul i32 %31, 2, !insn.addr !2112
  %53 = add i32 %52, %46, !insn.addr !2112
  %54 = inttoptr i32 %53 to i32*, !insn.addr !2112
  %55 = load i32, i32* %54, align 4, !insn.addr !2112
  %56 = mul i32 %55, 303635964, !insn.addr !2112
  %57 = load i32, i32* %stack_var_16751, align 4, !insn.addr !2113
  %58 = and i32 %57, 1024, !insn.addr !2113
  %59 = icmp eq i32 %58, 0, !insn.addr !2113
  %60 = add i32 %56, -1416952754, !insn.addr !2114
  %61 = inttoptr i32 %60 to i8*, !insn.addr !2114
  %62 = load i8, i8* %61, align 2, !insn.addr !2114
  %63 = trunc i32 %32 to i8, !insn.addr !2114
  %64 = xor i8 %62, %63, !insn.addr !2114
  store i8 %64, i8* %61, align 2, !insn.addr !2114
  %65 = call i8 @__asm_in.3(i16 %37), !insn.addr !2115
  %66 = sext i8 %65 to i32, !insn.addr !2115
  %67 = and i32 %56, -256, !insn.addr !2115
  %68 = or i32 %67, %66, !insn.addr !2115
  %69 = add i32 %3, 3213, !insn.addr !2116
  %70 = add i32 %3, 48873921, !insn.addr !2117
  %71 = inttoptr i32 %70 to i8*, !insn.addr !2117
  %72 = load i8, i8* %71, align 1, !insn.addr !2117
  %73 = trunc i32 %69 to i8, !insn.addr !2117
  %74 = add i8 %72, %73, !insn.addr !2117
  store i8 %74, i8* %71, align 1, !insn.addr !2117
  %75 = inttoptr i32 %3 to i8*, !insn.addr !2118
  %76 = inttoptr i32 %31 to i8*, !insn.addr !2118
  call void @__asm_rep_movsd_memcpy(i8* %76, i8* %75, i32 %69), !insn.addr !2118
  %77 = select i1 %59, i32 4, i32 -4, !insn.addr !2118
  %78 = mul i32 %77, %69, !insn.addr !2118
  %79 = add i32 %78, %31, !insn.addr !2118
  %80 = add i32 %79, -454982676, !insn.addr !2119
  %81 = inttoptr i32 %80 to i32*, !insn.addr !2119
  store i32 %79, i32* %81, align 4, !insn.addr !2119
  ret i32 %68, !insn.addr !2120

dec_label_pc_1006049:                             ; preds = %dec_label_pc_1005ac7
  %82 = load i32, i32* inttoptr (i32 -2079391508 to i32*), align 4, !insn.addr !2121
  %83 = add i32 %82, -62, !insn.addr !2121
  store i32 %83, i32* inttoptr (i32 -2079391508 to i32*), align 4, !insn.addr !2121
  %84 = call i32 @__asm_sti(), !insn.addr !2122
  ret i32 %84, !insn.addr !2122
}

define i32 @function_1006059() local_unnamed_addr {
dec_label_pc_1006059:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !2123
  %4 = inttoptr i32 %1 to i8*, !insn.addr !2123
  store i8 %3, i8* %4, align 1, !insn.addr !2123
  %5 = add i32 %0, -20, !insn.addr !2124
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2124
  store i32 2080374784, i32* %6, align 4, !insn.addr !2124
  %7 = call i32 @unknown_a25c15(), !insn.addr !2125
  ret i32 %7, !insn.addr !2125
}

define i32 @function_1006083(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006083:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = or i32 %0, 232, !insn.addr !2126
  ret i32 %1, !insn.addr !2127
}

define i32 @function_100608d(i32 %arg1) local_unnamed_addr {
dec_label_pc_100608d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = udiv i32 %2, 256, !insn.addr !2128
  %8 = zext i1 %6 to i8, !insn.addr !2128
  %.tr = trunc i32 %7 to i8
  %9 = mul i8 %.tr, 2, !insn.addr !2128
  %10 = or i8 %9, %8, !insn.addr !2128
  %11 = icmp eq i8 %10, 0, !insn.addr !2128
  %12 = icmp eq i1 %11, false, !insn.addr !2129
  br i1 %12, label %dec_label_pc_10060a0, label %dec_label_pc_1006094, !insn.addr !2129

dec_label_pc_1006094:                             ; preds = %dec_label_pc_100608d
  %13 = call i32 @unknown_5c13(i16 %5), !insn.addr !2130
  ret i32 %13, !insn.addr !2130

dec_label_pc_10060a0:                             ; preds = %dec_label_pc_100608d
  %14 = add i8 %10, %8, !insn.addr !2128
  %15 = trunc i32 %7 to i8, !insn.addr !2128
  %16 = xor i8 %14, %15, !insn.addr !2128
  %17 = icmp slt i8 %16, 0, !insn.addr !2128
  %18 = trunc i32 %3 to i16, !insn.addr !2131
  %19 = call i8 @__asm_in.3(i16 %18), !insn.addr !2131
  %20 = icmp eq i1 %17, false, !insn.addr !2132
  br i1 %20, label %dec_label_pc_1006117, label %dec_label_pc_10060a3, !insn.addr !2132

dec_label_pc_10060a3:                             ; preds = %dec_label_pc_10060a0
  %21 = call i32 @__asm_ud0(), !insn.addr !2133
  %22 = call i32 @function_1007bd1(), !insn.addr !2134
  %23 = add i32 %1, -20, !insn.addr !2135
  %24 = inttoptr i32 %23 to i32*, !insn.addr !2135
  store i32 1127809024, i32* %24, align 4, !insn.addr !2135
  ret i32 16808469, !insn.addr !2136

dec_label_pc_1006117:                             ; preds = %dec_label_pc_10060a0
  %25 = sext i8 %19 to i32, !insn.addr !2131
  %26 = and i32 %4, -256, !insn.addr !2131
  %27 = or i32 %26, %25, !insn.addr !2131
  %28 = add i32 %0, -117, !insn.addr !2137
  %29 = inttoptr i32 %28 to i8*, !insn.addr !2137
  %30 = load i8, i8* %29, align 1, !insn.addr !2137
  %31 = udiv i32 %27, 256, !insn.addr !2137
  %32 = trunc i32 %31 to i8, !insn.addr !2137
  %33 = add i8 %30, %32, !insn.addr !2137
  store i8 %33, i8* %29, align 1, !insn.addr !2137
  %34 = call i8 @__asm_in.3(i16 %18), !insn.addr !2138
  %35 = sext i8 %34 to i32, !insn.addr !2138
  %36 = and i32 %27, -256, !insn.addr !2138
  %37 = or i32 %36, %35, !insn.addr !2138
  ret i32 %37, !insn.addr !2138
}

define i32 @function_100611c() local_unnamed_addr {
dec_label_pc_100611c:
  %eax.0.reg2mem = alloca i32, !insn.addr !2139
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_9()
  %4 = call i64 @__decompiler_undefined_function_9()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = trunc i32 %1 to i16, !insn.addr !2139
  %7 = call i8 @__asm_in.3(i16 %6), !insn.addr !2139
  %8 = sext i8 %7 to i32, !insn.addr !2139
  %9 = and i32 %2, -256, !insn.addr !2139
  %10 = or i32 %9, %8, !insn.addr !2139
  %11 = add i32 %0, 86, !insn.addr !2140
  %12 = inttoptr i32 %11 to i8*, !insn.addr !2140
  %13 = load i8, i8* %12, align 1, !insn.addr !2140
  %14 = trunc i32 %1 to i8, !insn.addr !2140
  %15 = zext i1 %5 to i8, !insn.addr !2140
  %16 = add i8 %13, %14, !insn.addr !2140
  %17 = add i8 %16, %15, !insn.addr !2140
  %18 = icmp ule i8 %17, %13, !insn.addr !2140
  %19 = icmp ult i8 %16, %13, !insn.addr !2140
  %20 = select i1 %5, i1 %18, i1 %19, !insn.addr !2140
  store i8 %17, i8* %12, align 1, !insn.addr !2140
  %21 = load i32, i32* inttoptr (i32 -1170731112 to i32*), align 8, !insn.addr !2141
  %22 = zext i1 %20 to i32, !insn.addr !2141
  %23 = add i32 %21, 2, !insn.addr !2141
  %24 = add i32 %23, %22, !insn.addr !2141
  store i32 %24, i32* inttoptr (i32 -1170731112 to i32*), align 8, !insn.addr !2141
  %25 = inttoptr i32 %10 to i8*, !insn.addr !2142
  %26 = load i8, i8* %25, align 1, !insn.addr !2142
  %27 = add i8 %26, %7, !insn.addr !2142
  %28 = icmp eq i8 %27, 0, !insn.addr !2142
  store i8 %27, i8* %25, align 1, !insn.addr !2142
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !2143
  br i1 %28, label %29, label %dec_label_pc_1006133, !insn.addr !2143

; <label>:29:                                     ; preds = %dec_label_pc_100611c
  %30 = call i32 @function_11e6336(), !insn.addr !2143
  store i32 %30, i32* %eax.0.reg2mem, !insn.addr !2143
  br label %dec_label_pc_1006133, !insn.addr !2143

dec_label_pc_1006133:                             ; preds = %29, %dec_label_pc_100611c
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %31 = add i32 %eax.0.reload, 22119439, !insn.addr !2144
  %32 = call i64 @__asm_psubb(i64 %3, i64 %4), !insn.addr !2145
  %33 = inttoptr i32 %31 to i8*, !insn.addr !2146
  %34 = load i8, i8* %33, align 1, !insn.addr !2146
  %35 = trunc i32 %31 to i8, !insn.addr !2146
  %36 = add i8 %34, %35, !insn.addr !2146
  store i8 %36, i8* %33, align 1, !insn.addr !2146
  %37 = add i32 %0, -2012265279, !insn.addr !2147
  %38 = inttoptr i32 %37 to i8*, !insn.addr !2147
  %39 = load i8, i8* %38, align 1, !insn.addr !2147
  %40 = add i8 %39, %35, !insn.addr !2147
  store i8 %40, i8* %38, align 1, !insn.addr !2147
  store i32 %31, i32* inttoptr (i32 -2094773426 to i32*), align 4, !insn.addr !2148
  %41 = load i32, i32* @global_var_1014b98, align 4, !insn.addr !2149
  store i8 %35, i8* inttoptr (i32 -1377967083 to i8*), align 1, !insn.addr !2150
  %sext = mul i32 %31, 65536
  %42 = sdiv i32 %sext, 65536, !insn.addr !2151
  %43 = call i32 @function_1007b0e(i32 %42, i32 %41), !insn.addr !2152
  %44 = call i32 @function_1006521(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2153
  ret i32 %44, !insn.addr !2153
}

define i32 @function_1006177() local_unnamed_addr {
dec_label_pc_1006177:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 20, !insn.addr !2154
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2154
  %5 = load i32, i32* %4, align 4, !insn.addr !2154
  %6 = add i32 %5, 8, !insn.addr !2155
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2155
  %8 = load i32, i32* %7, align 4, !insn.addr !2155
  %9 = icmp eq i32 %8, -12, !insn.addr !2155
  %10 = icmp eq i1 %9, false, !insn.addr !2156
  br i1 %10, label %11, label %dec_label_pc_1006187, !insn.addr !2156

; <label>:11:                                     ; preds = %dec_label_pc_1006177
  %12 = call i32 @function_dc826521(), !insn.addr !2156
  br label %dec_label_pc_1006187, !insn.addr !2156

dec_label_pc_1006187:                             ; preds = %11, %dec_label_pc_1006177
  %13 = call i32 @unknown_905132(i32 %2), !insn.addr !2157
  %14 = inttoptr i32 %0 to i32*, !insn.addr !2158
  store i32 %13, i32* %14, align 4, !insn.addr !2158
  %15 = call i32 @function_1006201(i32 -72), !insn.addr !2159
  ret i32 %15, !insn.addr !2159
}

define i32 @function_10061a1() local_unnamed_addr {
dec_label_pc_10061a1:
  %eax.2.reg2mem = alloca i32, !insn.addr !2160
  %eax.1.reg2mem = alloca i32, !insn.addr !2160
  %eax.0.reg2mem = alloca i32, !insn.addr !2160
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %7 = icmp eq i32 %6, 0, !insn.addr !2160
  %8 = trunc i32 %6 to i8, !insn.addr !2161
  %9 = add i32 %2, 14025683, !insn.addr !2161
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2161
  %11 = load i8, i8* %10, align 1, !insn.addr !2161
  %12 = zext i1 %7 to i8, !insn.addr !2161
  %13 = add i8 %11, %8, !insn.addr !2161
  %14 = add i8 %13, %12, !insn.addr !2161
  %15 = icmp ule i8 %14, %8, !insn.addr !2161
  %16 = icmp ult i8 %13, %8, !insn.addr !2161
  %17 = select i1 %7, i1 %15, i1 %16, !insn.addr !2161
  %18 = zext i8 %14 to i32, !insn.addr !2161
  %19 = and i32 %6, -256, !insn.addr !2161
  %20 = or i32 %19, %18, !insn.addr !2161
  %21 = add i32 %3, 24, !insn.addr !2162
  %22 = inttoptr i32 %21 to i32*, !insn.addr !2162
  %23 = load i32, i32* %22, align 4, !insn.addr !2162
  %24 = inttoptr i32 %20 to i8*, !insn.addr !2163
  %25 = load i8, i8* %24, align 1, !insn.addr !2163
  %26 = zext i1 %17 to i8, !insn.addr !2163
  %27 = add i8 %25, %14, !insn.addr !2163
  %28 = add i8 %27, %26, !insn.addr !2163
  %29 = icmp ule i8 %28, %25, !insn.addr !2163
  %30 = icmp ult i8 %27, %25, !insn.addr !2163
  %31 = select i1 %17, i1 %29, i1 %30, !insn.addr !2163
  store i8 %28, i8* %24, align 1, !insn.addr !2163
  %32 = add i32 %23, -41, !insn.addr !2164
  %33 = inttoptr i32 %32 to i8*, !insn.addr !2164
  %34 = load i8, i8* %33, align 1, !insn.addr !2164
  %35 = udiv i32 %4, 256, !insn.addr !2164
  %36 = trunc i32 %35 to i8, !insn.addr !2164
  %37 = zext i1 %31 to i8, !insn.addr !2164
  %38 = add i8 %34, %36, !insn.addr !2164
  %39 = add i8 %38, %37, !insn.addr !2164
  store i8 %39, i8* %33, align 1, !insn.addr !2164
  %40 = add i32 %20, -119, !insn.addr !2165
  %41 = inttoptr i32 %40 to i8*, !insn.addr !2165
  %42 = load i8, i8* %41, align 1, !insn.addr !2165
  %43 = sub i8 %42, %14, !insn.addr !2165
  %44 = icmp ult i8 %42, %14, !insn.addr !2165
  store i8 %43, i8* %41, align 1, !insn.addr !2165
  %45 = add i32 %23, 1225825540, !insn.addr !2166
  %46 = inttoptr i32 %45 to i8*, !insn.addr !2166
  %47 = load i8, i8* %46, align 1, !insn.addr !2166
  %48 = trunc i32 %5 to i8, !insn.addr !2166
  %49 = zext i1 %44 to i8, !insn.addr !2166
  %50 = add i8 %47, %48, !insn.addr !2166
  %51 = add i8 %50, %49, !insn.addr !2166
  store i8 %51, i8* %46, align 1, !insn.addr !2166
  %52 = add i32 %20, %5, !insn.addr !2167
  %53 = icmp eq i32 %52, 0, !insn.addr !2167
  %54 = inttoptr i32 %5 to i32*, !insn.addr !2167
  store i32 %52, i32* %54, align 4, !insn.addr !2167
  %55 = add i32 %2, 21, !insn.addr !2168
  %56 = inttoptr i32 %55 to i32*, !insn.addr !2168
  store i32 %20, i32* %56, align 4, !insn.addr !2168
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !2169
  br i1 %53, label %dec_label_pc_10061d3, label %dec_label_pc_10061d9, !insn.addr !2169

dec_label_pc_10061d3:                             ; preds = %dec_label_pc_10061a1
  %57 = call i32 @unknown_fc724d(i32 %23, i32 %20, i32* nonnull %stack_var_0), !insn.addr !2170
  store i32 %57, i32* %eax.0.reg2mem, !insn.addr !2170
  br label %dec_label_pc_10061d9, !insn.addr !2170

dec_label_pc_10061d9:                             ; preds = %dec_label_pc_10061a1, %dec_label_pc_10061d3
  %58 = icmp ult i32 %52, %5, !insn.addr !2167
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %59 = zext i1 %58 to i32, !insn.addr !2171
  %60 = mul i32 %0, 2, !insn.addr !2171
  %61 = or i32 %60, %59, !insn.addr !2171
  %62 = icmp eq i32 %61, 0, !insn.addr !2171
  %63 = icmp ule i32 %61, %0, !insn.addr !2171
  %64 = icmp ult i32 %60, %0, !insn.addr !2171
  %65 = select i1 %58, i1 %63, i1 %64, !insn.addr !2171
  %66 = or i1 %62, %65, !insn.addr !2172
  br i1 %66, label %dec_label_pc_10061ed, label %dec_label_pc_10061dd, !insn.addr !2172

dec_label_pc_10061dd:                             ; preds = %dec_label_pc_10061d9
  %67 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2173
  %68 = add i32 %4, %67, !insn.addr !2174
  %69 = add i32 %68, -4, !insn.addr !2175
  %70 = inttoptr i32 %69 to i32*, !insn.addr !2175
  store i32 %eax.0.reload, i32* %70, align 4, !insn.addr !2175
  %71 = add i32 %68, -8, !insn.addr !2176
  %72 = inttoptr i32 %71 to i32*, !insn.addr !2176
  store i32 -1, i32* %72, align 4, !insn.addr !2176
  ret i32 %eax.0.reload, !insn.addr !2177

dec_label_pc_10061ed:                             ; preds = %dec_label_pc_10061d9
  %73 = trunc i32 %eax.0.reload to i8, !insn.addr !2178
  %not. = icmp ne i1 %65, true
  %74 = sext i1 %not. to i8, !insn.addr !2178
  %75 = add i8 %73, %74, !insn.addr !2178
  %76 = icmp eq i8 %75, 0, !insn.addr !2178
  %77 = icmp ule i8 %75, %73, !insn.addr !2178
  %78 = icmp ne i8 %73, 0, !insn.addr !2178
  %79 = select i1 %65, i1 %77, i1 %78, !insn.addr !2178
  %80 = zext i8 %75 to i32, !insn.addr !2178
  %81 = and i32 %eax.0.reload, -256, !insn.addr !2178
  %82 = or i32 %81, %80, !insn.addr !2178
  %83 = or i1 %76, %79, !insn.addr !2179
  store i32 %82, i32* %eax.1.reg2mem, !insn.addr !2179
  br i1 %83, label %84, label %dec_label_pc_10061f1, !insn.addr !2179

; <label>:84:                                     ; preds = %dec_label_pc_10061ed
  %85 = call i32 @function_1006201(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2179
  store i32 %85, i32* %eax.1.reg2mem, !insn.addr !2179
  br label %dec_label_pc_10061f1, !insn.addr !2179

dec_label_pc_10061f1:                             ; preds = %84, %dec_label_pc_10061ed
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %86 = and i32 %eax.1.reload, 255, !insn.addr !2180
  %87 = add i32 %86, %23, !insn.addr !2180
  %88 = inttoptr i32 %87 to i8*, !insn.addr !2180
  %89 = load i8, i8* %88, align 1, !insn.addr !2180
  %90 = zext i8 %89 to i32, !insn.addr !2180
  %91 = and i32 %eax.1.reload, -256, !insn.addr !2180
  %92 = or i32 %91, %90, !insn.addr !2180
  %93 = icmp eq i1 %76, false, !insn.addr !2181
  store i32 %92, i32* %eax.2.reg2mem, !insn.addr !2181
  br i1 %93, label %94, label %dec_label_pc_10061fa, !insn.addr !2181

; <label>:94:                                     ; preds = %dec_label_pc_10061f1
  %95 = call i32 @function_1006252(), !insn.addr !2181
  store i32 %95, i32* %eax.2.reg2mem, !insn.addr !2181
  br label %dec_label_pc_10061fa, !insn.addr !2181

dec_label_pc_10061fa:                             ; preds = %94, %dec_label_pc_10061f1
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %96 = add i32 %1, 16, !insn.addr !2182
  %97 = inttoptr i32 %96 to i32*, !insn.addr !2182
  %98 = load i32, i32* %97, align 4, !insn.addr !2182
  store i32 %98, i32* %stack_var_-16, align 4, !insn.addr !2182
  %99 = and i32 %eax.2.reload, 255, !insn.addr !2183
  %100 = add i32 %99, %23, !insn.addr !2183
  %101 = inttoptr i32 %100 to i8*, !insn.addr !2183
  %102 = load i8, i8* %101, align 1, !insn.addr !2183
  %103 = zext i8 %102 to i32, !insn.addr !2183
  %104 = and i32 %eax.2.reload, -256, !insn.addr !2183
  %105 = or i32 %104, %103, !insn.addr !2183
  ret i32 %105, !insn.addr !2184
}

define i32 @function_1006201(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006201:
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = add i32 %arg1, -1, !insn.addr !2185
  %.neg = select i1 %0, i32 252, i32 253, !insn.addr !2186
  %2 = and i32 %1, -256, !insn.addr !2186
  %3 = load i8, i8* inttoptr (i32 -130426061 to i8*), align 1, !insn.addr !2187
  %4 = udiv i32 %1, 256, !insn.addr !2187
  %5 = trunc i32 %4 to i8, !insn.addr !2187
  %6 = add i8 %3, %5, !insn.addr !2187
  %7 = icmp ult i8 %6, %3, !insn.addr !2187
  store i8 %6, i8* inttoptr (i32 -130426061 to i8*), align 1, !insn.addr !2187
  %8 = zext i1 %7 to i32, !insn.addr !2188
  %9 = add i32 %arg1, 115, !insn.addr !2186
  %10 = add i32 %9, %.neg, !insn.addr !2188
  %11 = add i32 %10, %8, !insn.addr !2188
  %12 = and i32 %11, 255, !insn.addr !2188
  %13 = or i32 %12, %2, !insn.addr !2188
  ret i32 %13, !insn.addr !2189
}

define i32 @function_1006221(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006221:
  %eax.0.reg2mem = alloca i32, !insn.addr !2190
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = udiv i32 %0, 256, !insn.addr !2190
  %4 = trunc i32 %3 to i8, !insn.addr !2190
  %5 = trunc i32 %0 to i8, !insn.addr !2190
  %6 = add i8 %4, %5, !insn.addr !2190
  %7 = sext i1 %2 to i8, !insn.addr !2190
  %8 = icmp eq i8 %6, %7, !insn.addr !2190
  %9 = icmp eq i1 %8, false, !insn.addr !2191
  br i1 %9, label %dec_label_pc_100623e, label %dec_label_pc_100622a, !insn.addr !2191

dec_label_pc_100622a:                             ; preds = %dec_label_pc_1006221
  %10 = load i8, i8* inttoptr (i32 -3866606 to i8*), align 2, !insn.addr !2192
  %11 = zext i8 %10 to i32, !insn.addr !2192
  %12 = and i32 %1, -256, !insn.addr !2192
  %13 = or i32 %12, %11, !insn.addr !2192
  %14 = and i32 %11, 192
  %15 = icmp eq i32 %14, 0, !insn.addr !2193
  %16 = icmp eq i1 %15, false, !insn.addr !2194
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !2194
  br i1 %16, label %17, label %dec_label_pc_1006234, !insn.addr !2194

; <label>:17:                                     ; preds = %dec_label_pc_100622a
  %18 = call i32 @function_734ac721(), !insn.addr !2194
  store i32 %18, i32* %eax.0.reg2mem, !insn.addr !2194
  br label %dec_label_pc_1006234, !insn.addr !2194

dec_label_pc_1006234:                             ; preds = %17, %dec_label_pc_100622a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !2195

dec_label_pc_100623e:                             ; preds = %dec_label_pc_1006221
  %19 = call i32 @__asm_wait(), !insn.addr !2196
  %20 = load i8, i8* @global_var_1014d74, align 1, !insn.addr !2197
  %21 = sext i8 %20 to i32, !insn.addr !2197
  ret i32 %21, !insn.addr !2198
}

define i32 @function_1006252() local_unnamed_addr {
dec_label_pc_1006252:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = zext i1 %5 to i32, !insn.addr !2199
  %7 = mul i32 %4, 2, !insn.addr !2199
  %8 = or i32 %7, %6, !insn.addr !2199
  %9 = inttoptr i32 %4 to i32*, !insn.addr !2199
  store i32 %8, i32* %9, align 4, !insn.addr !2199
  %10 = add i32 %3, 21883933, !insn.addr !2200
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2200
  %12 = load i32, i32* %11, align 4, !insn.addr !2200
  %13 = add i32 %12, %3, !insn.addr !2200
  %14 = icmp ult i32 %13, %12, !insn.addr !2200
  store i32 %13, i32* %11, align 4, !insn.addr !2200
  %15 = trunc i32 %2 to i16, !insn.addr !2201
  %16 = call i8 @__asm_insb(i16 %15), !insn.addr !2201
  %17 = inttoptr i32 %0 to i8*, !insn.addr !2201
  store i8 %16, i8* %17, align 1, !insn.addr !2201
  %18 = add i32 %1, 108, !insn.addr !2202
  %19 = inttoptr i32 %18 to i32*, !insn.addr !2202
  %20 = load i32, i32* %19, align 4, !insn.addr !2202
  %21 = add i32 %20, -1, !insn.addr !2202
  store i32 %21, i32* %19, align 4, !insn.addr !2202
  %22 = zext i1 %14 to i32, !insn.addr !2203
  %23 = add i32 %4, %3, !insn.addr !2203
  %24 = add i32 %23, %22, !insn.addr !2203
  %25 = icmp ule i32 %24, %4, !insn.addr !2203
  %26 = icmp ult i32 %23, %4, !insn.addr !2203
  %27 = select i1 %14, i1 %25, i1 %26, !insn.addr !2203
  %28 = add i32 %1, -1325340671, !insn.addr !2204
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2204
  %30 = load i32, i32* %29, align 4, !insn.addr !2204
  %31 = zext i1 %27 to i32, !insn.addr !2204
  %32 = add i32 %30, %24, !insn.addr !2204
  %33 = add i32 %32, %31, !insn.addr !2204
  store i32 %33, i32* %29, align 4, !insn.addr !2204
  ret i32 %24, !insn.addr !2204
}

define i32 @function_100629e() local_unnamed_addr {
dec_label_pc_100629e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !2205
  ret i32 %2, !insn.addr !2206
}

define i32 @function_10062d1(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10062d1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10062e7(i16 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_10062e7:
  %esp.1.reg2mem = alloca i32, !insn.addr !2207
  %ebp.1.reg2mem = alloca i32, !insn.addr !2207
  %esp.0.reg2mem = alloca i32, !insn.addr !2207
  %eax.0.reg2mem = alloca i32, !insn.addr !2207
  %cf.0.reg2mem = alloca i1, !insn.addr !2207
  %ebp.0.reg2mem = alloca i32, !insn.addr !2207
  %ecx.0.reg2mem = alloca i32, !insn.addr !2207
  %merge.reg2mem = alloca i32, !insn.addr !2207
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i16 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32*, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-13 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %8 = add i32 %1, -1, !insn.addr !2207
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2207
  %10 = load i32, i32* %9, align 4, !insn.addr !2207
  %11 = add i32 %10, %4, !insn.addr !2207
  %12 = icmp ult i32 %11, %10, !insn.addr !2207
  store i32 %11, i32* %9, align 4, !insn.addr !2207
  %13 = zext i1 %12 to i32, !insn.addr !2208
  %14 = add i32 %2, %1, !insn.addr !2208
  %15 = add i32 %14, %13, !insn.addr !2208
  %16 = mul i32 %0, 4, !insn.addr !2209
  %17 = add i32 %16, -59405442, !insn.addr !2209
  %18 = add i32 %17, %6, !insn.addr !2209
  %19 = inttoptr i32 %18 to i32*, !insn.addr !2209
  %20 = load i32, i32* %19, align 4, !insn.addr !2209
  %21 = add i32 %20, %5, !insn.addr !2209
  %22 = icmp eq i32 %21, 0, !insn.addr !2209
  store i32 %21, i32* %19, align 4, !insn.addr !2209
  %23 = add i32 %3, 16, !insn.addr !2210
  %24 = inttoptr i32 %23 to i32*, !insn.addr !2210
  %25 = load i32, i32* %24, align 4, !insn.addr !2210
  %26 = udiv i32 %25, 2048, !insn.addr !2210
  %27 = mul i32 %25, 2097152, !insn.addr !2210
  %28 = or i32 %26, %27, !insn.addr !2210
  store i32 %28, i32* %24, align 4, !insn.addr !2210
  %29 = and i32 %25, 1024, !insn.addr !2210
  %30 = icmp ne i32 %29, 0, !insn.addr !2210
  %31 = icmp ne i1 %30, true, !insn.addr !2211
  store i32 %15, i32* %ebp.0.reg2mem, !insn.addr !2212
  store i1 %31, i1* %cf.0.reg2mem, !insn.addr !2212
  br i1 %22, label %dec_label_pc_100635d, label %dec_label_pc_1006300, !insn.addr !2212

dec_label_pc_1006300:                             ; preds = %dec_label_pc_10062e7
  %32 = call i32 @__asm_hlt(), !insn.addr !2213
  store i32 22, i32* %stack_var_-12, align 4, !insn.addr !2214
  %33 = add i32 %15, -7, !insn.addr !2215
  %34 = inttoptr i32 %33 to i32*, !insn.addr !2215
  %35 = load i32, i32* %34, align 4, !insn.addr !2215
  %36 = add i32 %35, 1397969136, !insn.addr !2216
  %37 = xor i32 %36, ptrtoint (i8** @global_var_1014d6c to i32), !insn.addr !2217
  %38 = add i32 %37, -375652335, !insn.addr !2218
  %39 = inttoptr i32 %38 to i8*, !insn.addr !2218
  %40 = load i8, i8* %39, align 1, !insn.addr !2218
  %41 = udiv i32 %5, 256, !insn.addr !2218
  %42 = trunc i32 %41 to i8, !insn.addr !2218
  %43 = add i8 %40, %42, !insn.addr !2218
  %44 = icmp eq i8 %43, 0, !insn.addr !2218
  store i8 %43, i8* %39, align 1, !insn.addr !2218
  %45 = icmp eq i1 %44, false, !insn.addr !2219
  store i32 %37, i32* %merge.reg2mem, !insn.addr !2219
  br i1 %45, label %dec_label_pc_1006335, label %dec_label_pc_1006334, !insn.addr !2219

dec_label_pc_1006334:                             ; preds = %dec_label_pc_100635d, %dec_label_pc_1006300
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2219

dec_label_pc_1006335:                             ; preds = %dec_label_pc_1006300
  %46 = add i32 %3, -710864802, !insn.addr !2220
  %47 = inttoptr i32 %46 to i8*, !insn.addr !2220
  %48 = load i8, i8* %47, align 1, !insn.addr !2220
  %49 = trunc i32 %5 to i8, !insn.addr !2220
  %50 = add i8 %48, %49, !insn.addr !2220
  store i8 %50, i8* %47, align 1, !insn.addr !2220
  %51 = load i32, i32* inttoptr (i32 1032567867 to i32*), align 4, !insn.addr !2221
  %52 = add i32 %51, %4, !insn.addr !2221
  %53 = icmp eq i32 %52, 0, !insn.addr !2221
  store i32 %52, i32* inttoptr (i32 1032567867 to i32*), align 4, !insn.addr !2221
  store i32 %15, i32* %stack_var_-12, align 4, !insn.addr !2222
  %54 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !2222
  %55 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !2222
  %56 = icmp eq i1 %53, false, !insn.addr !2223
  store i32 %37, i32* %eax.0.reg2mem, !insn.addr !2223
  store i32 %55, i32* %esp.0.reg2mem, !insn.addr !2223
  store i32 %54, i32* %ebp.1.reg2mem, !insn.addr !2223
  br i1 %56, label %dec_label_pc_100638b, label %dec_label_pc_1006348, !insn.addr !2223

dec_label_pc_1006348:                             ; preds = %dec_label_pc_1006335
  %57 = sext i16 %arg2 to i32, !insn.addr !2224
  %58 = ptrtoint i32* %stack_var_-13 to i32, !insn.addr !2225
  %59 = trunc i32 %37 to i8, !insn.addr !2226
  %60 = icmp ult i8 %59, 56, !insn.addr !2226
  store i32 %57, i32* %ecx.0.reg2mem, !insn.addr !2227
  store i32 %58, i32* %ebp.0.reg2mem, !insn.addr !2227
  store i1 %60, i1* %cf.0.reg2mem, !insn.addr !2227
  br label %dec_label_pc_100635d, !insn.addr !2227

dec_label_pc_100635d:                             ; preds = %dec_label_pc_1006348, %dec_label_pc_10062e7
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %61 = call i32 @__asm_int3(), !insn.addr !2228
  %62 = add i32 %61, %ecx.0.reload, !insn.addr !2229
  %63 = inttoptr i32 %62 to i8*, !insn.addr !2229
  %64 = load i8, i8* %63, align 1, !insn.addr !2229
  %65 = trunc i32 %4 to i8, !insn.addr !2229
  %66 = zext i1 %cf.0.reload to i8, !insn.addr !2229
  %67 = add i8 %66, %65, !insn.addr !2229
  %68 = add i8 %67, %64, !insn.addr !2229
  store i8 %68, i8* %63, align 1, !insn.addr !2229
  %69 = add i32 %ebp.0.reload, -8, !insn.addr !2230
  %70 = inttoptr i32 %69 to i32*, !insn.addr !2230
  %71 = load i32, i32* %70, align 4, !insn.addr !2230
  store i32 %71, i32* %stack_var_-44, align 4, !insn.addr !2230
  %72 = zext i16 %7 to i32
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2231
  store i32* %73, i32** %stack_var_-48, align 4, !insn.addr !2231
  %74 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !2232
  %75 = load i32, i32* %74, align 4, !insn.addr !2232
  %76 = add i32 %75, %61, !insn.addr !2232
  store i32 %76, i32* %74, align 4, !insn.addr !2232
  %77 = load i32*, i32** %stack_var_-48, align 4, !insn.addr !2233
  %78 = load i32, i32* %stack_var_-44, align 4, !insn.addr !2233
  %79 = insertvalue %tagPOINT undef, i32 %78, 0, !insn.addr !2233
  %80 = call i32* @ChildWindowFromPoint(i32* %77, %tagPOINT %79), !insn.addr !2233
  %81 = ptrtoint i32* %80 to i32, !insn.addr !2233
  %82 = icmp eq i32* %80, null, !insn.addr !2234
  store i32 %81, i32* %merge.reg2mem, !insn.addr !2235
  br i1 %82, label %dec_label_pc_1006334, label %dec_label_pc_1006379, !insn.addr !2235

dec_label_pc_1006379:                             ; preds = %dec_label_pc_100635d
  %83 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !2230
  %84 = load i8*, i8** @global_var_1014d6c, align 4, !insn.addr !2236
  %85 = bitcast i8* %84 to i32*
  %86 = icmp eq i32* %80, %85, !insn.addr !2236
  store i32 %83, i32* %esp.1.reg2mem, !insn.addr !2237
  br i1 %86, label %dec_label_pc_10063c5, label %dec_label_pc_1006381, !insn.addr !2237

dec_label_pc_1006381:                             ; preds = %dec_label_pc_1006379
  %87 = add i32 %ebp.0.reload, -1, !insn.addr !2238
  %88 = and i32 %81, 65535
  %89 = inttoptr i32 %88 to i32*, !insn.addr !2239
  store i32* %89, i32** %stack_var_-48, align 4, !insn.addr !2239
  %90 = ptrtoint i32** %stack_var_-48 to i32, !insn.addr !2239
  %91 = icmp eq i32* %80, inttoptr (i32 -1 to i32*), !insn.addr !2240
  store i32 %81, i32* %eax.0.reg2mem, !insn.addr !2241
  store i32 %90, i32* %esp.0.reg2mem, !insn.addr !2241
  store i32 %87, i32* %ebp.1.reg2mem, !insn.addr !2241
  store i32 %90, i32* %esp.1.reg2mem, !insn.addr !2241
  br i1 %91, label %dec_label_pc_10063c5, label %dec_label_pc_100638b, !insn.addr !2241

dec_label_pc_100638b:                             ; preds = %dec_label_pc_1006381, %dec_label_pc_1006335
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %92 = add i32 %ebp.1.reload, 20, !insn.addr !2242
  %93 = inttoptr i32 %92 to i32*, !insn.addr !2242
  %94 = load i32, i32* %93, align 4, !insn.addr !2242
  %95 = add i32 %esp.0.reload, -4, !insn.addr !2242
  %96 = inttoptr i32 %95 to i32*, !insn.addr !2242
  store i32 %94, i32* %96, align 4, !insn.addr !2242
  %97 = load i32, i32* inttoptr (i32 -1224652216 to i32*), align 8, !insn.addr !2243
  %98 = add i32 %esp.0.reload, -8, !insn.addr !2243
  %99 = inttoptr i32 %98 to i32*, !insn.addr !2243
  store i32 %97, i32* %99, align 4, !insn.addr !2243
  ret i32 %eax.0.reload, !insn.addr !2244

dec_label_pc_10063c5:                             ; preds = %dec_label_pc_1006381, %dec_label_pc_1006379
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %100 = add i32 %esp.1.reload, -4, !insn.addr !2245
  %101 = inttoptr i32 %100 to i32*, !insn.addr !2245
  store i32 123, i32* %101, align 4, !insn.addr !2245
  %102 = call i32 @DefWindowProcW(i32* nonnull @0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2246
  ret i32 %102, !insn.addr !2246
}

define i32 @function_10063cd() local_unnamed_addr {
dec_label_pc_10063cd:
  %.reg2mem = alloca i32, !insn.addr !2247
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = and i32 %5, %0, !insn.addr !2247
  %7 = xor i32 %4, %3, !insn.addr !2248
  %8 = inttoptr i32 %4 to i32*, !insn.addr !2248
  store i32 %7, i32* %8, align 4, !insn.addr !2248
  %9 = load i32, i32* %eax, align 4
  %10 = mul i32 %9, 2, !insn.addr !2249
  %11 = inttoptr i32 %9 to i32*, !insn.addr !2249
  store i32 %10, i32* %11, align 4, !insn.addr !2249
  %12 = inttoptr i32 %6 to i8*, !insn.addr !2250
  %13 = load i8, i8* %12, align 1, !insn.addr !2250
  %14 = trunc i32 %4 to i8, !insn.addr !2250
  %15 = add i8 %13, %14, !insn.addr !2250
  store i8 %15, i8* %12, align 1, !insn.addr !2250
  %16 = add i32 %1, -2079381504, !insn.addr !2251
  %17 = inttoptr i32 %16 to i8*, !insn.addr !2251
  %18 = load i8, i8* %17, align 1, !insn.addr !2251
  %19 = udiv i32 %4, 256, !insn.addr !2251
  %20 = trunc i32 %19 to i8, !insn.addr !2251
  %21 = add i8 %18, %20, !insn.addr !2251
  store i8 %21, i8* %17, align 1, !insn.addr !2251
  %22 = bitcast i32* %eax to i8*
  %23 = load i8, i8* %22, align 4, !insn.addr !2252
  %24 = load i32, i32* %eax, align 4
  %25 = trunc i32 %24 to i8, !insn.addr !2252
  %26 = add i8 %23, %25, !insn.addr !2252
  %27 = inttoptr i32 %24 to i8*, !insn.addr !2252
  store i8 %26, i8* %27, align 1, !insn.addr !2252
  %28 = add i32 %2, -663485002, !insn.addr !2253
  %29 = inttoptr i32 %28 to i8*, !insn.addr !2253
  %30 = load i8, i8* %29, align 1, !insn.addr !2253
  %31 = load i32, i32* %eax, align 4, !insn.addr !2253
  %32 = trunc i32 %31 to i8, !insn.addr !2253
  %33 = add i8 %30, %32, !insn.addr !2253
  store i8 %33, i8* %29, align 1, !insn.addr !2253
  %34 = load i32, i32* %eax, align 4, !insn.addr !2254
  %35 = add i32 %34, 101, !insn.addr !2254
  %36 = icmp eq i32 %35, 0, !insn.addr !2254
  store i32 %35, i32* %eax, align 4, !insn.addr !2254
  store i32 %35, i32* %.reg2mem, !insn.addr !2255
  br i1 %36, label %37, label %dec_label_pc_10063eb, !insn.addr !2255

; <label>:37:                                     ; preds = %dec_label_pc_10063cd
  %38 = call i32 @function_1006400(), !insn.addr !2255
  store i32 %38, i32* %eax, align 4, !insn.addr !2255
  store i32 %38, i32* %.reg2mem, !insn.addr !2255
  br label %dec_label_pc_10063eb, !insn.addr !2255

dec_label_pc_10063eb:                             ; preds = %37, %dec_label_pc_10063cd
  %39 = icmp ult i32 %34, -101, !insn.addr !2254
  %.reload = load i32, i32* %.reg2mem
  %40 = select i1 %39, i32 0, i32 255, !insn.addr !2256
  %41 = add i32 %.reload, %40, !insn.addr !2256
  %42 = and i32 %41, 255, !insn.addr !2256
  %43 = and i32 %.reload, -256, !insn.addr !2256
  %44 = or i32 %42, %43, !insn.addr !2256
  ret i32 %44, !insn.addr !2257
}

define i32 @function_10063f2(i32* %hWnd, i32 %Msg, i32 %wParam, i32 %lParam) local_unnamed_addr {
dec_label_pc_10063f2:
  %0 = call i32 @DefWindowProcW(i32* %hWnd, i32 %Msg, i32 %wParam, i32 %lParam), !insn.addr !2258
  ret i32 %0, !insn.addr !2259
}

define i32 @function_1006400() local_unnamed_addr {
dec_label_pc_1006400:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 20, !insn.addr !2260
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2260
  %5 = load i32, i32* %4, align 4, !insn.addr !2260
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2261
  %7 = call i32 @GetDlgCtrlID(i32* %6), !insn.addr !2261
  %8 = add i32 %0, 51, !insn.addr !2262
  %9 = inttoptr i32 %8 to i8*, !insn.addr !2262
  %10 = load i8, i8* %9, align 1, !insn.addr !2262
  %11 = udiv i32 %2, 256, !insn.addr !2262
  %12 = trunc i32 %11 to i8, !insn.addr !2262
  %13 = add i8 %10, %12, !insn.addr !2262
  %14 = icmp ult i8 %13, %10, !insn.addr !2262
  store i8 %13, i8* %9, align 1, !insn.addr !2262
  %15 = call i32* @GetSysColorBrush(i32 5), !insn.addr !2263
  %16 = ptrtoint i32* %15 to i32, !insn.addr !2263
  %17 = icmp eq i1 %14, false, !insn.addr !2264
  %18 = icmp eq i1 %17, false, !insn.addr !2265
  br i1 %18, label %dec_label_pc_10064a1, label %dec_label_pc_1006428, !insn.addr !2265

dec_label_pc_1006428:                             ; preds = %dec_label_pc_1006400
  %19 = udiv i32 %1, 256, !insn.addr !2264
  %20 = trunc i32 %19 to i8, !insn.addr !2264
  %21 = zext i1 %14 to i8, !insn.addr !2264
  %22 = add i8 %21, %20, !insn.addr !2264
  %23 = sext i1 %14 to i8, !insn.addr !2264
  %24 = sub nsw i8 %23, %21, !insn.addr !2264
  %25 = icmp ugt i8 %24, %20, !insn.addr !2264
  %26 = icmp ne i8 %22, -1, !insn.addr !2264
  %27 = or i1 %25, %26, !insn.addr !2264
  %28 = icmp ugt i8 %22, %20, !insn.addr !2264
  %29 = select i1 %14, i1 %27, i1 %28, !insn.addr !2264
  %30 = load i32, i32* %15, align 4, !insn.addr !2266
  %31 = add i32 %30, -1, !insn.addr !2266
  store i32 %31, i32* %15, align 4, !insn.addr !2266
  %32 = bitcast i32* %15 to i8*, !insn.addr !2267
  %33 = trunc i32 %31 to i8
  %34 = trunc i32 %2 to i8, !insn.addr !2267
  %35 = zext i1 %29 to i8, !insn.addr !2267
  %36 = add i8 %35, %34, !insn.addr !2267
  %37 = add i8 %36, %33, !insn.addr !2267
  store i8 %37, i8* %32, align 1, !insn.addr !2267
  %38 = add i32 %16, -687929277, !insn.addr !2268
  %39 = inttoptr i32 %38 to i8*, !insn.addr !2268
  %40 = load i8, i8* %39, align 1, !insn.addr !2268
  %41 = trunc i32 %16 to i8, !insn.addr !2268
  %42 = add i8 %40, %41, !insn.addr !2268
  store i8 %42, i8* %39, align 1, !insn.addr !2268
  %43 = add i32 %0, -41, !insn.addr !2269
  %44 = inttoptr i32 %43 to i32*, !insn.addr !2269
  %45 = load i32, i32* %44, align 4, !insn.addr !2269
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2270
  %47 = call i32 @SetTextColor(i32* %46, i32 %16), !insn.addr !2270
  %48 = add i32 %16, 57321, !insn.addr !2271
  %49 = inttoptr i32 %48 to i32*, !insn.addr !2271
  %50 = load i32, i32* %49, align 4, !insn.addr !2271
  %51 = and i32 %50, 32512
  %52 = icmp eq i32 %51, 0, !insn.addr !2272
  %53 = icmp eq i1 %52, false, !insn.addr !2273
  br i1 %53, label %dec_label_pc_1006473, label %dec_label_pc_1006446, !insn.addr !2273

dec_label_pc_1006446:                             ; preds = %dec_label_pc_1006428
  %54 = add i32 %0, -45, !insn.addr !2274
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2274
  %56 = load i32, i32* %55, align 4, !insn.addr !2274
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2275
  %58 = call i32 @DefWindowProcW(i32* %57, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2275
  ret i32 %58, !insn.addr !2275

dec_label_pc_1006473:                             ; preds = %dec_label_pc_1006428
  %59 = call i32 @function_1146521(), !insn.addr !2276
  ret i32 %59, !insn.addr !2276

dec_label_pc_10064a1:                             ; preds = %dec_label_pc_1006400
  ret i32 %16, !insn.addr !2277
}

define i32 @function_10064a7() local_unnamed_addr {
dec_label_pc_10064a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %0, 340601694, !insn.addr !2278
  %6 = inttoptr i32 %5 to i16*, !insn.addr !2278
  %7 = load i16, i16* %6, align 2, !insn.addr !2278
  %8 = icmp ult i16 %7, 117, !insn.addr !2278
  %9 = trunc i32 %3 to i8
  %10 = udiv i32 %4, 256, !insn.addr !2279
  %11 = trunc i32 %10 to i8, !insn.addr !2279
  %12 = zext i1 %8 to i8, !insn.addr !2279
  %13 = add i8 %11, %9, !insn.addr !2279
  %14 = add i8 %13, %12, !insn.addr !2279
  %15 = inttoptr i32 %3 to i8*, !insn.addr !2279
  store i8 %14, i8* %15, align 1, !insn.addr !2279
  %16 = add i32 %2, -91, !insn.addr !2280
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2280
  %18 = load i32, i32* %17, align 4, !insn.addr !2280
  %19 = add i32 %18, %1, !insn.addr !2280
  store i32 %19, i32* %17, align 4, !insn.addr !2280
  %20 = add i32 %2, 20, !insn.addr !2281
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2281
  store i32 -1761607571, i32* %21, align 4, !insn.addr !2281
  %22 = and i32 %4, -65536
  %23 = icmp eq i32 %22, 65536
  %24 = icmp eq i1 %23, false, !insn.addr !2282
  br i1 %24, label %dec_label_pc_1006503, label %dec_label_pc_10064cb, !insn.addr !2282

dec_label_pc_10064cb:                             ; preds = %dec_label_pc_10064a7
  %25 = udiv i32 %4, 65536, !insn.addr !2283
  %26 = mul i32 %0, 2, !insn.addr !2284
  %27 = icmp ult i32 %26, %0, !insn.addr !2284
  %28 = select i1 %27, i32 -922742426, i32 -922742427, !insn.addr !2285
  %29 = add nsw i32 %25, %28, !insn.addr !2285
  %30 = load i32, i32* inttoptr (i32 16781628 to i32*), align 4, !insn.addr !2286
  %31 = add i32 %30, 1792475081, !insn.addr !2287
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2287
  %33 = add nsw i32 %29, 255, !insn.addr !2288
  %34 = and i32 %33, 255, !insn.addr !2288
  %35 = and i32 %29, -922616064, !insn.addr !2288
  %36 = or i32 %34, %35, !insn.addr !2288
  %37 = inttoptr i32 %36 to i8*, !insn.addr !2289
  %38 = load i8, i8* %37, align 1, !insn.addr !2289
  %39 = trunc i32 %4 to i8, !insn.addr !2289
  %40 = add i8 %38, %39, !insn.addr !2289
  store i8 %40, i8* %37, align 1, !insn.addr !2289
  %41 = call i32 @__asm_iretd(), !insn.addr !2290
  %42 = add i32 %2, 16, !insn.addr !2291
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2291
  %44 = load i32, i32* %43, align 4, !insn.addr !2291
  %45 = inttoptr i32 %44 to i32*, !insn.addr !2292
  %46 = call i32 @SendMessageW(i32* %45, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2292
  br label %dec_label_pc_1006503, !insn.addr !2292

dec_label_pc_1006503:                             ; preds = %dec_label_pc_10064cb, %dec_label_pc_10064a7
  %47 = call i32 @unknown_669d(), !insn.addr !2293
  ret i32 %47, !insn.addr !2293
}

define i32 @function_1006521(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1006521:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = or i32 %0, 192, !insn.addr !2294
  ret i32 %1, !insn.addr !2295
}

define i32 @function_1006538() local_unnamed_addr {
dec_label_pc_1006538:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = inttoptr i32 %0 to i32*, !insn.addr !2296
  %3 = inttoptr i32 %1 to i16*, !insn.addr !2297
  %4 = call i32 @function_1006564(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2298
  ret i32 %4, !insn.addr !2298
}

define i32 @function_1006564(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006564:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2299
}

define i32 @function_1006580() local_unnamed_addr {
dec_label_pc_1006580:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %3 = add i32 %1, 1142813, !insn.addr !2300
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2300
  %5 = load i32, i32* %4, align 4, !insn.addr !2300
  %6 = add i32 %5, -1, !insn.addr !2300
  store i32 %6, i32* %4, align 4, !insn.addr !2300
  %7 = add i32 %2, %0, !insn.addr !2301
  %8 = inttoptr i32 %0 to i32*, !insn.addr !2301
  store i32 %7, i32* %8, align 4, !insn.addr !2301
  %9 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !2302
  ret i32 %9, !insn.addr !2303
}

define i32 @function_1006597() local_unnamed_addr {
dec_label_pc_1006597:
  %0 = call i32 @function_6319e274(), !insn.addr !2304
  ret i32 %0, !insn.addr !2304
}

define i32 @function_10065a4() local_unnamed_addr {
dec_label_pc_10065a4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10065e3(i32 %arg1) local_unnamed_addr {
dec_label_pc_10065e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = and i32 %2, 31, !insn.addr !2305
  %6 = icmp eq i32 %5, 0, !insn.addr !2305
  br i1 %6, label %35, label %7, !insn.addr !2305

; <label>:7:                                      ; preds = %dec_label_pc_10065e3
  %8 = trunc i32 %3 to i8, !insn.addr !2306
  %9 = add i32 %1, 1584021190, !insn.addr !2306
  %10 = inttoptr i32 %9 to i8*, !insn.addr !2306
  %11 = load i8, i8* %10, align 1, !insn.addr !2306
  %12 = zext i1 %4 to i8, !insn.addr !2306
  %13 = add i8 %11, %12, !insn.addr !2306
  %14 = add i32 %1, -1, !insn.addr !2305
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2305
  %16 = load i32, i32* %15, align 4, !insn.addr !2305
  %.neg1 = sext i1 %4 to i8
  %17 = add i8 %.neg1, %8, !insn.addr !2306
  %18 = sub i8 %17, %13, !insn.addr !2306
  %19 = icmp ugt i8 %18, %8, !insn.addr !2306
  %20 = icmp ne i8 %13, -1, !insn.addr !2306
  %21 = or i1 %20, %19, !insn.addr !2306
  %22 = icmp ugt i8 %13, %8, !insn.addr !2306
  %23 = select i1 %4, i1 %21, i1 %22, !insn.addr !2306
  %24 = zext i1 %23 to i32, !insn.addr !2305
  %25 = shl i32 %16, %5, !insn.addr !2305
  %26 = zext i32 %16 to i64, !insn.addr !2305
  %27 = sub nsw i32 33, %5, !insn.addr !2305
  %28 = zext i32 %27 to i64, !insn.addr !2305
  %29 = lshr i64 %26, %28, !insn.addr !2305
  %30 = add nsw i32 %5, -1, !insn.addr !2305
  %31 = shl i32 %24, %30, !insn.addr !2305
  %32 = trunc i64 %29 to i32
  %33 = or i32 %25, %32
  %34 = or i32 %33, %31, !insn.addr !2305
  store i32 %34, i32* %15, align 4, !insn.addr !2305
  br label %35, !insn.addr !2305

; <label>:35:                                     ; preds = %dec_label_pc_10065e3, %7
  %36 = mul i32 %0, 8, !insn.addr !2307
  %37 = add i32 %36, 95, !insn.addr !2307
  %38 = add i32 %37, %2, !insn.addr !2307
  %39 = inttoptr i32 %38 to i8*, !insn.addr !2307
  %40 = load i8, i8* %39, align 1, !insn.addr !2307
  %41 = add i8 %40, -116, !insn.addr !2307
  store i8 %41, i8* %39, align 1, !insn.addr !2307
  %42 = load i8*, i8** @global_var_1014010, align 4, !insn.addr !2308
  %43 = ptrtoint i8* %42 to i32, !insn.addr !2308
  store i8* %42, i8** @global_var_1016b62, align 4, !insn.addr !2309
  ret i32 %43, !insn.addr !2310
}

define i32 @function_100660d(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100660d:
  %0 = and i32 %arg2, 65535, !insn.addr !2311
  ret i32 %0, !insn.addr !2312
}

define i32 @function_1006626(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006626:
  %edi.0.reg2mem = alloca i32, !insn.addr !2313
  %esi.0.reg2mem = alloca i32, !insn.addr !2313
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !2313
  %eax.0.reg2mem = alloca i32, !insn.addr !2313
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %9 = icmp eq i32 %arg1, 10, !insn.addr !2313
  %10 = icmp eq i1 %9, false, !insn.addr !2314
  br i1 %10, label %dec_label_pc_1006682, label %dec_label_pc_100663b, !insn.addr !2314

dec_label_pc_100663b:                             ; preds = %dec_label_pc_1006626
  %11 = and i32 %6, -256, !insn.addr !2315
  %12 = or i32 %11, 128, !insn.addr !2315
  call void @__asm_out.4(i32 1, i32 %12), !insn.addr !2316
  %13 = add i32 %8, 334, !insn.addr !2317
  %14 = trunc i32 %4 to i16, !insn.addr !2318
  %15 = call i8 @__asm_in.3(i16 %14), !insn.addr !2318
  %16 = sext i8 %15 to i32, !insn.addr !2318
  %17 = or i32 %6, %16, !insn.addr !2318
  %18 = and i8 %15, 24, !insn.addr !2319
  %19 = icmp eq i8 %18, 0, !insn.addr !2319
  %20 = zext i8 %18 to i32, !insn.addr !2319
  %21 = and i32 %17, -256, !insn.addr !2319
  %22 = or i32 %21, %20, !insn.addr !2319
  store i32 %22, i32* %eax.0.reg2mem, !insn.addr !2320
  store i32* %stack_var_-12, i32** %esp.0.in.reg2mem, !insn.addr !2320
  store i32 %13, i32* %esi.0.reg2mem, !insn.addr !2320
  br i1 %19, label %dec_label_pc_100665f, label %dec_label_pc_1006652, !insn.addr !2320

dec_label_pc_1006652:                             ; preds = %dec_label_pc_100663b
  %23 = load i32, i32* inttoptr (i32 421 to i32*), align 4, !insn.addr !2321
  store i32 %23, i32* %stack_var_-20, align 4, !insn.addr !2321
  %24 = add i32 %13, %0, !insn.addr !2322
  %25 = icmp ult i32 %24, %0, !insn.addr !2322
  %26 = inttoptr i32 %0 to i32*, !insn.addr !2322
  store i32 %24, i32* %26, align 4, !insn.addr !2322
  %27 = inttoptr i32 %13 to i32*, !insn.addr !2323
  %28 = load i32, i32* %27, align 4, !insn.addr !2323
  store i32 %28, i32* %26, align 4, !insn.addr !2323
  %29 = select i1 %7, i32 -4, i32 4, !insn.addr !2323
  %30 = add i32 %29, %0, !insn.addr !2323
  %31 = add i32 %13, %29, !insn.addr !2323
  %32 = zext i1 %25 to i32, !insn.addr !2324
  %33 = add i32 %22, -122023556, !insn.addr !2324
  %34 = or i32 %33, %32, !insn.addr !2324
  store i32 %34, i32* %eax.0.reg2mem, !insn.addr !2324
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !2324
  store i32 %31, i32* %esi.0.reg2mem, !insn.addr !2324
  store i32 %30, i32* %edi.0.reg2mem, !insn.addr !2324
  br label %dec_label_pc_100665f, !insn.addr !2324

dec_label_pc_100665f:                             ; preds = %dec_label_pc_1006652, %dec_label_pc_100663b
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %35 = add i32 %esi.0.reload, 128190, !insn.addr !2325
  %36 = inttoptr i32 %35 to i8*, !insn.addr !2325
  %37 = load i8, i8* %36, align 1, !insn.addr !2325
  %38 = add i8 %37, 1, !insn.addr !2325
  store i8 %38, i8* %36, align 1, !insn.addr !2325
  %39 = add i32 %eax.0.reload, -65, !insn.addr !2326
  %40 = inttoptr i32 %39 to i32*, !insn.addr !2326
  %41 = load i32, i32* %40, align 4, !insn.addr !2326
  %42 = or i32 %41, %5, !insn.addr !2326
  store i32 %42, i32* %40, align 4, !insn.addr !2326
  %43 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2327
  %44 = load i8, i8* %43, align 1, !insn.addr !2327
  %45 = trunc i32 %eax.0.reload to i8, !insn.addr !2327
  %46 = add i8 %44, %45, !insn.addr !2327
  store i8 %46, i8* %43, align 1, !insn.addr !2327
  %47 = add i32 %esp.0, -3, !insn.addr !2328
  %48 = inttoptr i32 %47 to i32*, !insn.addr !2328
  store i32 %edi.0.reload, i32* %48, align 4, !insn.addr !2328
  %49 = load i32, i32* @global_var_1014d80, align 4, !insn.addr !2329
  %50 = add i32 %esp.0, -7, !insn.addr !2329
  %51 = inttoptr i32 %50 to i32*, !insn.addr !2329
  store i32 %49, i32* %51, align 4, !insn.addr !2329
  %52 = call i1 @CheckMenuRadioItem(i32* nonnull @0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2330
  %53 = sext i1 %52 to i32, !insn.addr !2330
  %54 = and i32 %53, 16384
  %55 = icmp eq i32 %54, 0, !insn.addr !2331
  br i1 %55, label %dec_label_pc_100667d, label %dec_label_pc_10066a1, !insn.addr !2332

dec_label_pc_100667d:                             ; preds = %dec_label_pc_100665f
  %56 = call i8 @__asm_in.1(i8 49), !insn.addr !2333
  %57 = sext i8 %56 to i32, !insn.addr !2333
  %58 = and i32 %53, -256, !insn.addr !2333
  %59 = or i32 %58, %57, !insn.addr !2333
  ret i32 %59, !insn.addr !2334

dec_label_pc_1006682:                             ; preds = %dec_label_pc_1006626
  %60 = load i32, i32* @global_var_1014d7c, align 4, !insn.addr !2335
  %61 = icmp eq i32 %60, 0, !insn.addr !2336
  br i1 %61, label %dec_label_pc_10066a2, label %dec_label_pc_1006695, !insn.addr !2337

dec_label_pc_1006695:                             ; preds = %dec_label_pc_1006682
  %62 = load i8, i8* inttoptr (i32 -1560188308 to i8*), align 4, !insn.addr !2338
  %63 = udiv i32 %4, 256, !insn.addr !2338
  %64 = trunc i32 %63 to i8, !insn.addr !2338
  %65 = sub i8 %62, %64, !insn.addr !2338
  store i8 %65, i8* inttoptr (i32 -1560188308 to i8*), align 4, !insn.addr !2338
  ret i32 %60, !insn.addr !2338

dec_label_pc_10066a1:                             ; preds = %dec_label_pc_100665f
  ret i32 %53, !insn.addr !2339

dec_label_pc_10066a2:                             ; preds = %dec_label_pc_1006682
  %66 = add i32 %1, -247544010, !insn.addr !2340
  store i32 %66, i32* %stack_var_-20, align 4, !insn.addr !2341
  %67 = call i32 @unknown_ffa4f303(i32 0, i32 310, i32 313, i32 %66, i32 0, i32 %1, i32 %2, i32 %3), !insn.addr !2342
  %68 = load i32, i32* @global_var_1014d42, align 4, !insn.addr !2343
  store i32 %68, i32* %stack_var_-48, align 4, !insn.addr !2343
  %69 = load i32, i32* inttoptr (i32 16781890 to i32*), align 4, !insn.addr !2344
  %70 = add i32 %69, 1, !insn.addr !2344
  store i32 %70, i32* inttoptr (i32 16781890 to i32*), align 4, !insn.addr !2344
  %71 = icmp ne i32 %66, 10, !insn.addr !2345
  %72 = load i32, i32* inttoptr (i32 1 to i32*), align 4, !insn.addr !2346
  %73 = zext i1 %71 to i32, !insn.addr !2346
  %74 = add i32 %72, %73, !insn.addr !2346
  %75 = sub i32 %5, %74, !insn.addr !2346
  %76 = sub i32 %75, %73, !insn.addr !2346
  %77 = icmp ult i32 %5, %76, !insn.addr !2346
  %78 = icmp ne i32 %74, -1, !insn.addr !2346
  %79 = or i1 %78, %77, !insn.addr !2346
  %80 = icmp ult i32 %5, %74, !insn.addr !2346
  %81 = select i1 %71, i1 %79, i1 %80, !insn.addr !2346
  %82 = zext i1 %81 to i32, !insn.addr !2347
  %83 = add i32 %75, 78, !insn.addr !2347
  %84 = add i32 %83, %82, !insn.addr !2347
  %85 = icmp ule i32 %84, %75, !insn.addr !2347
  %86 = icmp ugt i32 %75, -79, !insn.addr !2347
  %87 = select i1 %81, i1 %85, i1 %86, !insn.addr !2347
  %88 = select i1 %87, i32 -1944574906, i32 -1944574907, !insn.addr !2348
  %89 = add i32 %0, -1, !insn.addr !2349
  %90 = inttoptr i32 %89 to i8*, !insn.addr !2349
  %91 = load i8, i8* %90, align 1, !insn.addr !2349
  %92 = trunc i32 %4 to i8, !insn.addr !2349
  %93 = sub i8 %91, %92, !insn.addr !2349
  store i8 %93, i8* %90, align 1, !insn.addr !2349
  %94 = inttoptr i32 %4 to i32*, !insn.addr !2350
  %95 = ptrtoint i32* %stack_var_-48 to i32, !insn.addr !2350
  store i32 %95, i32* %94, align 4, !insn.addr !2350
  %96 = inttoptr i32 %84 to i32*, !insn.addr !2351
  %97 = load i32, i32* %96, align 4, !insn.addr !2351
  %98 = and i32 %88, %97, !insn.addr !2351
  store i32 %98, i32* %96, align 4, !insn.addr !2351
  %99 = load i32, i32* %stack_var_-48, align 4, !insn.addr !2352
  %100 = call i32 @unknown_ce77c0cf(i32 %99, i32 310, i32 313, i32 %66), !insn.addr !2352
  %101 = add i32 %100, 16781814, !insn.addr !2353
  %102 = and i32 %101, 255, !insn.addr !2354
  %103 = add i32 %102, %0, !insn.addr !2354
  %104 = inttoptr i32 %103 to i8*, !insn.addr !2354
  %105 = load i8, i8* %104, align 1, !insn.addr !2354
  %106 = zext i8 %105 to i32, !insn.addr !2354
  %107 = and i32 %101, -256, !insn.addr !2354
  %108 = or i32 %107, %106, !insn.addr !2354
  ret i32 %108, !insn.addr !2355
}

define i32 @function_1006793(i8 %arg1) local_unnamed_addr {
dec_label_pc_1006793:
  %eax.0.reg2mem = alloca i32, !insn.addr !2356
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %7 = add i32 %4, -1, !insn.addr !2357
  %8 = icmp eq i32 %7, 0, !insn.addr !2357
  %9 = or i1 %8, %6, !insn.addr !2357
  br i1 %9, label %dec_label_pc_1006797, label %dec_label_pc_1006799, !insn.addr !2357

dec_label_pc_1006797:                             ; preds = %dec_label_pc_1006793
  ret i32 %5, !insn.addr !2357

dec_label_pc_1006799:                             ; preds = %dec_label_pc_1006793
  %10 = and i32 %7, 31, !insn.addr !2358
  %11 = icmp eq i32 %10, 0, !insn.addr !2358
  br i1 %11, label %15, label %12, !insn.addr !2358

; <label>:12:                                     ; preds = %dec_label_pc_1006799
  %13 = lshr i32 %3, %10, !insn.addr !2358
  %14 = inttoptr i32 %3 to i32*, !insn.addr !2358
  store i32 %13, i32* %14, align 4, !insn.addr !2358
  br label %15, !insn.addr !2358

; <label>:15:                                     ; preds = %dec_label_pc_1006799, %12
  %16 = add i32 %2, %1, !insn.addr !2359
  %17 = inttoptr i32 %2 to i32*, !insn.addr !2359
  store i32 %16, i32* %17, align 4, !insn.addr !2359
  %18 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2360
  %19 = xor i32 %2, %18, !insn.addr !2361
  %20 = load i32, i32* inttoptr (i32 347 to i32*), align 4, !insn.addr !2362
  %21 = trunc i32 %3 to i16, !insn.addr !2363
  %22 = bitcast i32* %esi to i8*
  %23 = load i8, i8* %22, align 4, !insn.addr !2363
  call void @__asm_outsb(i16 %21, i8 %23), !insn.addr !2363
  %24 = trunc i32 %7 to i8, !insn.addr !2364
  %25 = add i32 %19, 637730811, !insn.addr !2364
  %26 = inttoptr i32 %25 to i8*, !insn.addr !2364
  %27 = load i8, i8* %26, align 1, !insn.addr !2364
  %28 = add i8 %27, %24, !insn.addr !2364
  %29 = zext i8 %28 to i32, !insn.addr !2364
  %30 = and i32 %7, -256, !insn.addr !2364
  %31 = or i32 %30, %29, !insn.addr !2364
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2365
  %33 = load i32, i32* %32, align 4, !insn.addr !2365
  %34 = add i32 %33, %20, !insn.addr !2365
  %35 = xor i32 %34, %33, !insn.addr !2365
  %36 = xor i32 %34, %20, !insn.addr !2365
  %37 = and i32 %35, %36, !insn.addr !2365
  %38 = icmp slt i32 %37, 0, !insn.addr !2365
  store i32 %34, i32* %32, align 4, !insn.addr !2365
  %39 = load i32, i32* %esi, align 4, !insn.addr !2366
  %40 = call i32 @unknown_f2126626(i32 %39, i32 -1962968831), !insn.addr !2367
  %41 = icmp eq i1 %38, false, !insn.addr !2368
  br i1 %41, label %dec_label_pc_100681a, label %dec_label_pc_10067c7, !insn.addr !2368

dec_label_pc_10067c7:                             ; preds = %15
  %42 = icmp slt i32 %34, 0, !insn.addr !2365
  %43 = call i8 @__asm_in.3(i16 %21), !insn.addr !2369
  %44 = sext i8 %43 to i32, !insn.addr !2369
  %45 = and i32 %40, -256, !insn.addr !2369
  %46 = or i32 %45, %44, !insn.addr !2369
  %47 = icmp eq i1 %42, %38, !insn.addr !2370
  store i32 %46, i32* %eax.0.reg2mem, !insn.addr !2370
  br i1 %47, label %dec_label_pc_10067d6, label %dec_label_pc_10067cc, !insn.addr !2370

dec_label_pc_10067cc:                             ; preds = %dec_label_pc_10067c7
  %48 = call i32* @GetMenu(i32* undef), !insn.addr !2371
  %49 = ptrtoint i32* %48 to i32, !insn.addr !2371
  store i32 %49, i32* %eax.0.reg2mem, !insn.addr !2371
  br label %dec_label_pc_10067d6, !insn.addr !2371

dec_label_pc_10067d6:                             ; preds = %dec_label_pc_10067cc, %dec_label_pc_10067c7
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %50 = load i8, i8* inttoptr (i32 16781576 to i8*), align 8, !insn.addr !2372
  %51 = trunc i32 %3 to i8, !insn.addr !2372
  %52 = add i8 %50, %51, !insn.addr !2372
  store i8 %52, i8* inttoptr (i32 16781576 to i8*), align 8, !insn.addr !2372
  %53 = inttoptr i32 %0 to i32*, !insn.addr !2373
  store i32 %eax.0.reload, i32* %53, align 4, !insn.addr !2373
  %54 = load i32, i32* inttoptr (i32 30014060 to i32*), align 4, !insn.addr !2374
  %55 = inttoptr i32 %54 to i32*, !insn.addr !2375
  %56 = call i1 @CheckRadioButton(i32* %55, i32 %18, i32 %0, i32 %eax.0.reload), !insn.addr !2375
  %57 = load i32, i32* %esi, align 4, !insn.addr !2376
  store i32 %57, i32* @global_var_101a810, align 4, !insn.addr !2376
  %58 = call i32 @unknown_56005291(), !insn.addr !2377
  %59 = call i32 @function_10065a4(), !insn.addr !2378
  %60 = call i32 @function_10045c4(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2379
  %61 = add i32 %19, -62, !insn.addr !2380
  %62 = inttoptr i32 %61 to i16*, !insn.addr !2380
  ret i32 %31, !insn.addr !2381

dec_label_pc_100681a:                             ; preds = %15
  %63 = add i32 %40, 96, !insn.addr !2382
  %64 = add i32 %40, 100, !insn.addr !2383
  %65 = and i32 %64, 255, !insn.addr !2383
  %66 = and i32 %63, -256, !insn.addr !2383
  %67 = or i32 %66, %65, !insn.addr !2383
  %68 = load i32, i32* %32, align 4, !insn.addr !2384
  %69 = add i32 %68, %67, !insn.addr !2384
  store i32 %69, i32* %32, align 4, !insn.addr !2384
  %70 = inttoptr i32 %63 to i32*, !insn.addr !2385
  %71 = call i1 @HideCaret(i32* %70), !insn.addr !2385
  %72 = sext i1 %71 to i32, !insn.addr !2385
  store i32 %72, i32* inttoptr (i32 -83800225 to i32*), align 4, !insn.addr !2386
  %73 = call i32 @function_1006856(), !insn.addr !2387
  ret i32 %73, !insn.addr !2387
}

define i32 @function_100683d() local_unnamed_addr {
dec_label_pc_100683d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2388
}

define i32 @function_1006856() local_unnamed_addr {
dec_label_pc_1006856:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_into(i32 %1), !insn.addr !2389
  %2 = trunc i32 %0 to i8
  %3 = inttoptr i32 %0 to i8*, !insn.addr !2390
  store i8 %2, i8* %3, align 1, !insn.addr !2390
  ret i32 %0, !insn.addr !2390
}

define i32 @function_1006859(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1006859:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, 1693216492, !insn.addr !2391
  %5 = icmp ugt i32 %3, -1693216493, !insn.addr !2391
  %6 = add i32 %0, 4, !insn.addr !2392
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2392
  %8 = load i32, i32* %7, align 4, !insn.addr !2392
  %9 = add i32 %8, -1, !insn.addr !2392
  store i32 %9, i32* %7, align 4, !insn.addr !2392
  %10 = inttoptr i32 %4 to i32*, !insn.addr !2393
  %11 = load i32, i32* %10, align 4, !insn.addr !2393
  %12 = zext i1 %5 to i32, !insn.addr !2393
  %13 = add i32 %4, %12, !insn.addr !2393
  %14 = add i32 %13, %11, !insn.addr !2393
  store i32 %14, i32* %10, align 4, !insn.addr !2393
  %15 = add i32 %1, -99, !insn.addr !2394
  %16 = inttoptr i32 %15 to i32*, !insn.addr !2395
  %17 = load i32, i32* %16, align 4, !insn.addr !2395
  %18 = add i32 %17, %15, !insn.addr !2395
  store i32 %18, i32* %16, align 4, !insn.addr !2395
  %19 = add i32 %0, -61, !insn.addr !2396
  %20 = inttoptr i32 %19 to i32*, !insn.addr !2396
  %21 = load i32, i32* %20, align 4, !insn.addr !2396
  %22 = add i32 %21, %2, !insn.addr !2396
  store i32 %22, i32* %20, align 4, !insn.addr !2396
  ret i32 %15, !insn.addr !2396
}

define i32 @function_1006893(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006893:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, %arg1, !insn.addr !2397
  br i1 %1, label %dec_label_pc_1006904, label %dec_label_pc_100689d, !insn.addr !2398

dec_label_pc_100689d:                             ; preds = %dec_label_pc_1006893
  call void @llvm.trap()
  unreachable

dec_label_pc_1006904:                             ; preds = %dec_label_pc_1006893
  %2 = load i8, i8* @global_var_1014d74, align 1, !insn.addr !2399
  %3 = sext i8 %2 to i32, !insn.addr !2399
  ret i32 %3, !insn.addr !2400
}

define i32 @function_1006a55(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006a55:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_9()
  %2 = call i1 @__decompiler_undefined_function_2()
  br i1 %2, label %3, label %dec_label_pc_1006a61, !insn.addr !2401

; <label>:3:                                      ; preds = %dec_label_pc_1006a55
  %4 = call i32 @function_1036cb2(), !insn.addr !2401
  br label %dec_label_pc_1006a61, !insn.addr !2401

dec_label_pc_1006a61:                             ; preds = %3, %dec_label_pc_1006a55
  %5 = load i32, i32* inttoptr (i32 817936357 to i32*), align 4, !insn.addr !2402
  %6 = load i32, i32* @global_var_1014fc2, align 4, !insn.addr !2403
  %7 = add i32 %6, -1, !insn.addr !2403
  store i32 %7, i32* @global_var_1014fc2, align 4, !insn.addr !2403
  %8 = add i32 %0, 1, !insn.addr !2404
  %9 = inttoptr i32 %8 to i64*, !insn.addr !2404
  %10 = load i64, i64* %9, align 4, !insn.addr !2404
  %11 = call i64 @__asm_pmaddwd(i64 %1, i64 %10), !insn.addr !2404
  %12 = load i32, i32* inttoptr (i32 26690304 to i32*), align 256, !insn.addr !2405
  %13 = icmp slt i32 %12, %5, !insn.addr !2406
  br i1 %13, label %dec_label_pc_1006a8d, label %dec_label_pc_1006a89, !insn.addr !2406

dec_label_pc_1006a89:                             ; preds = %dec_label_pc_1006a61
  ret i32 -818216958, !insn.addr !2407

dec_label_pc_1006a8d:                             ; preds = %dec_label_pc_1006a61
  %14 = add i32 %12, 1, !insn.addr !2408
  %15 = and i32 %14, 65535, !insn.addr !2409
  %16 = add nsw i32 %15, -1, !insn.addr !2410
  ret i32 %16, !insn.addr !2411
}

define i32 @function_1006abd() local_unnamed_addr {
dec_label_pc_1006abd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1006b26() local_unnamed_addr {
dec_label_pc_1006b26:
  %eax.0.lcssa.reg2mem = alloca i32, !insn.addr !2412
  %esi.0.lcssa.reg2mem = alloca i32, !insn.addr !2412
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = load i32, i32* @global_var_1014f18, align 4, !insn.addr !2413
  %6 = add i32 %5, %1, !insn.addr !2414
  %7 = add i32 %6, 4, !insn.addr !2415
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2415
  %9 = load i32, i32* %8, align 4, !insn.addr !2415
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2416
  %11 = load i32, i32* %10, align 4, !insn.addr !2416
  %12 = add i32 %2, -117, !insn.addr !2417
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2417
  %14 = load i32, i32* %13, align 4, !insn.addr !2417
  %15 = add i32 %11, -1
  %16 = add i32 %6, 139, !insn.addr !2418
  %17 = and i32 %16, 255, !insn.addr !2418
  %18 = and i32 %6, -256, !insn.addr !2418
  %19 = or i32 %17, %18, !insn.addr !2418
  %20 = inttoptr i32 %19 to i8*, !insn.addr !2419
  %21 = load i8, i8* %20, align 1, !insn.addr !2419
  %22 = trunc i32 %16 to i8, !insn.addr !2419
  %23 = add i8 %21, %22, !insn.addr !2419
  store i8 %23, i8* %20, align 1, !insn.addr !2419
  %24 = icmp ult i32 %14, 4
  %.pre = select i1 %4, i32 -1, i32 1
  store i32 %15, i32* %esi.0.lcssa.reg2mem, !insn.addr !2420
  store i32 %14, i32* %eax.0.lcssa.reg2mem, !insn.addr !2420
  br i1 %24, label %dec_label_pc_1006b26._crit_edge, label %.lr.ph, !insn.addr !2420

.lr.ph:                                           ; preds = %dec_label_pc_1006b26
  %25 = udiv i32 %14, 4, !insn.addr !2421
  %26 = add nsw i32 %25, -1
  %27 = mul i32 %.pre, %26
  %28 = add i32 %11, %27
  %29 = mul nsw i32 %25, %.pre
  %30 = add i32 %28, -1
  %31 = inttoptr i32 %30 to i8*, !insn.addr !2420
  %32 = load i8, i8* %31, align 1, !insn.addr !2420
  %33 = zext i8 %32 to i32, !insn.addr !2420
  %34 = add i32 %15, %29
  store i32 %34, i32* %esi.0.lcssa.reg2mem
  store i32 %33, i32* %eax.0.lcssa.reg2mem
  br label %dec_label_pc_1006b26._crit_edge

dec_label_pc_1006b26._crit_edge:                  ; preds = %dec_label_pc_1006b26, %.lr.ph
  %35 = inttoptr i32 %3 to i32*, !insn.addr !2412
  %eax.0.lcssa.reload = load i32, i32* %eax.0.lcssa.reg2mem
  %esi.0.lcssa.reload = load i32, i32* %esi.0.lcssa.reg2mem
  %36 = and i32 %eax.0.lcssa.reload, 91, !insn.addr !2422
  %37 = inttoptr i32 %esi.0.lcssa.reload to i8*, !insn.addr !2423
  %38 = inttoptr i32 %0 to i8*, !insn.addr !2423
  call void @__asm_rep_movsb_memcpy(i8* %38, i8* %37, i32 %36), !insn.addr !2423
  %39 = mul nsw i32 %36, %.pre, !insn.addr !2423
  %40 = add i32 %39, %0, !insn.addr !2423
  %41 = load i32, i32* inttoptr (i32 -536785008 to i32*), align 16, !insn.addr !2424
  %42 = add i32 %41, %1, !insn.addr !2425
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2425
  %44 = load i32, i32* %43, align 4, !insn.addr !2425
  %45 = add i32 %44, 4, !insn.addr !2426
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2426
  %47 = load i32, i32* %46, align 4, !insn.addr !2426
  %48 = call i32 @function_1007b91(i32 %47), !insn.addr !2427
  %49 = load i32, i32* inttoptr (i32 16858904 to i32*), align 8, !insn.addr !2428
  %50 = load i8, i8* inttoptr (i32 16851494 to i8*), align 2, !insn.addr !2429
  %51 = udiv i32 %49, 256, !insn.addr !2429
  %52 = trunc i32 %51 to i8, !insn.addr !2429
  %53 = add i8 %50, %52, !insn.addr !2429
  %54 = icmp ult i8 %53, %50, !insn.addr !2429
  store i8 %53, i8* inttoptr (i32 16851494 to i8*), align 2, !insn.addr !2429
  %55 = udiv i32 %1, 256, !insn.addr !2430
  %56 = trunc i32 %55 to i8, !insn.addr !2430
  %57 = zext i1 %54 to i8, !insn.addr !2430
  %58 = add i8 %57, %56, !insn.addr !2430
  %59 = sext i1 %54 to i8, !insn.addr !2430
  %60 = sub nsw i8 %59, %57, !insn.addr !2430
  %61 = icmp ugt i8 %60, %56, !insn.addr !2430
  %62 = icmp ne i8 %58, -1, !insn.addr !2430
  %63 = or i1 %61, %62, !insn.addr !2430
  %64 = icmp ugt i8 %58, %56, !insn.addr !2430
  %65 = select i1 %54, i1 %63, i1 %64, !insn.addr !2430
  %66 = zext i8 %59 to i32, !insn.addr !2430
  %67 = mul i32 %66, 256, !insn.addr !2430
  %68 = and i32 %1, -65281, !insn.addr !2430
  %69 = or i32 %67, %68, !insn.addr !2430
  %70 = call i32 @function_100cdfb(), !insn.addr !2431
  %71 = mul i32 %40, 8, !insn.addr !2432
  %72 = add i32 %71, -1593556599, !insn.addr !2432
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2432
  %74 = load i32, i32* %73, align 4, !insn.addr !2432
  %75 = add i32 %40, 1, !insn.addr !2433
  %76 = inttoptr i32 %75 to i8*, !insn.addr !2433
  %77 = load i8, i8* %76, align 1, !insn.addr !2433
  %78 = trunc i32 %74 to i8, !insn.addr !2433
  %.neg1 = sext i1 %65 to i8
  %.neg2 = sub i8 %77, %78, !insn.addr !2433
  %79 = add i8 %.neg2, %.neg1, !insn.addr !2433
  store i8 %79, i8* %76, align 1, !insn.addr !2433
  %80 = inttoptr i32 %69 to i32*, !insn.addr !2434
  %81 = load i32, i32* %80, align 4, !insn.addr !2434
  %82 = add i32 %81, %70, !insn.addr !2434
  store i32 %82, i32* %80, align 4, !insn.addr !2434
  %83 = mul i32 %74, 4, !insn.addr !2435
  %84 = add i32 %83, 12, !insn.addr !2435
  %85 = udiv i32 %84, 4, !insn.addr !2436
  %86 = add i32 %69, %84, !insn.addr !2437
  %87 = inttoptr i32 %86 to i8*, !insn.addr !2437
  %88 = load i8, i8* %87, align 1, !insn.addr !2437
  store i8 %59, i8* %87, align 1, !insn.addr !2437
  %89 = zext i8 %88 to i32, !insn.addr !2437
  %90 = mul i32 %89, 256, !insn.addr !2437
  %91 = or i32 %90, %68, !insn.addr !2437
  %92 = add i32 %91, -1527574457, !insn.addr !2438
  %93 = inttoptr i32 %92 to i8*, !insn.addr !2438
  %94 = load i8, i8* %93, align 1, !insn.addr !2438
  %95 = trunc i32 %85 to i8, !insn.addr !2438
  %96 = add i8 %94, %95, !insn.addr !2438
  store i8 %96, i8* %93, align 1, !insn.addr !2438
  ret i32 %84, !insn.addr !2438
}

define i32 @function_1006bbe() local_unnamed_addr {
dec_label_pc_1006bbe:
  %0 = call i32 @function_1006abd(), !insn.addr !2439
  ret i32 %0, !insn.addr !2439
}

define i32 @function_1006bc3() local_unnamed_addr {
dec_label_pc_1006bc3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-32 = alloca i32, align 4
  %5 = load i32, i32* inttoptr (i32 23547256 to i32*), align 8, !insn.addr !2440
  %6 = add i32 %1, 8, !insn.addr !2441
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2441
  %8 = load i32, i32* %7, align 4, !insn.addr !2441
  %9 = load i32, i32* @global_var_1014f20, align 4, !insn.addr !2442
  store i32 %9, i32* %stack_var_-32, align 4, !insn.addr !2442
  %10 = call i32 @unknown_8101014d(i32 %9, i32 %8, i32 408, i32 0, i32 %5, i32 388, i32 0, i32 0), !insn.addr !2443
  %11 = xor i32 %2, %0, !insn.addr !2444
  store i32 %10, i32* inttoptr (i32 16847640 to i32*), align 8, !insn.addr !2445
  %12 = xor i32 %0, 176, !insn.addr !2446
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2447
  %14 = load i32, i32* %13, align 4, !insn.addr !2447
  %15 = and i32 %14, %12, !insn.addr !2447
  %16 = add i32 %3, 1375817496, !insn.addr !2448
  %17 = inttoptr i32 %16 to i8*, !insn.addr !2448
  %18 = load i8, i8* %17, align 1, !insn.addr !2448
  %19 = udiv i32 %15, 256, !insn.addr !2448
  %20 = trunc i32 %19 to i8, !insn.addr !2448
  %21 = add i8 %18, %20, !insn.addr !2448
  store i8 %21, i8* %17, align 1, !insn.addr !2448
  %22 = add i32 %11, 1144757653, !insn.addr !2449
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2449
  %24 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !2449
  store i32 %24, i32* %23, align 4, !insn.addr !2449
  %25 = and i32 %15, -177, !insn.addr !2450
  %26 = add i32 %25, %3, !insn.addr !2451
  %27 = xor i32 %26, %3, !insn.addr !2451
  %28 = xor i32 %26, %15, !insn.addr !2451
  %29 = and i32 %27, %28, !insn.addr !2451
  %30 = icmp slt i32 %29, 0, !insn.addr !2451
  %31 = icmp slt i32 %26, 0, !insn.addr !2451
  %32 = inttoptr i32 %3 to i32*, !insn.addr !2451
  store i32 %26, i32* %32, align 4, !insn.addr !2451
  %33 = icmp eq i1 %31, %30, !insn.addr !2452
  br i1 %33, label %dec_label_pc_1006c1d, label %dec_label_pc_1006c6f, !insn.addr !2452

dec_label_pc_1006c1d:                             ; preds = %dec_label_pc_1006bc3
  %34 = select i1 %4, i32 -4, i32 4, !insn.addr !2453
  %35 = add i32 %34, %0, !insn.addr !2453
  %36 = load i32, i32* inttoptr (i32 21647136 to i32*), align 32, !insn.addr !2454
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2455
  %38 = call i1 @GlobalUnlock(i32* %37), !insn.addr !2455
  %39 = sext i1 %38 to i32, !insn.addr !2455
  %40 = add nsw i32 %39, -64, !insn.addr !2456
  %41 = inttoptr i32 %40 to i32*, !insn.addr !2456
  %42 = load i32, i32* %41, align 4, !insn.addr !2456
  %43 = add i32 %3, %39, !insn.addr !2457
  store i32 %43, i32* %32, align 4, !insn.addr !2457
  %44 = call i32 @unknown_d3f5cb77(i32 %42), !insn.addr !2458
  %45 = inttoptr i32 %44 to i32*, !insn.addr !2459
  store i32 %35, i32* %45, align 4, !insn.addr !2459
  %46 = and i32 %44, -177, !insn.addr !2460
  %47 = add i32 %46, %3, !insn.addr !2461
  store i32 %47, i32* %32, align 4, !insn.addr !2461
  %48 = call i32 @function_1006c99(), !insn.addr !2462
  ret i32 %48, !insn.addr !2462

dec_label_pc_1006c6f:                             ; preds = %dec_label_pc_1006bc3
  %49 = icmp ult i32 %26, %3, !insn.addr !2451
  %50 = inttoptr i32 %25 to i8*, !insn.addr !2463
  %51 = load i8, i8* %50, align 1, !insn.addr !2463
  %52 = trunc i32 %25 to i8, !insn.addr !2463
  %53 = zext i1 %49 to i8, !insn.addr !2463
  %54 = add nuw nsw i8 %53, %52, !insn.addr !2463
  %55 = add i8 %54, %51, !insn.addr !2463
  store i8 %55, i8* %50, align 1, !insn.addr !2463
  %56 = load i32, i32* inttoptr (i32 1349753997 to i32*), align 4, !insn.addr !2464
  %57 = add i32 %56, %3, !insn.addr !2464
  store i32 %57, i32* inttoptr (i32 1349753997 to i32*), align 4, !insn.addr !2464
  store i32 %26, i32* %32, align 4, !insn.addr !2465
  %58 = call i32 @function_944f5cfc(), !insn.addr !2466
  ret i32 %58, !insn.addr !2466
}

define i32 @function_1006c97() local_unnamed_addr {
dec_label_pc_1006c97:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2467
}

define i32 @function_1006c99() local_unnamed_addr {
dec_label_pc_1006c99:
  %eax.0.reg2mem = alloca i32, !insn.addr !2468
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8
  %4 = trunc i32 %2 to i8, !insn.addr !2468
  %5 = add i8 %4, %3, !insn.addr !2468
  %6 = inttoptr i32 %1 to i8*, !insn.addr !2468
  store i8 %5, i8* %6, align 1, !insn.addr !2468
  %7 = icmp eq i32 %2, %0, !insn.addr !2469
  br i1 %7, label %8, label %dec_label_pc_1006ca8, !insn.addr !2470

; <label>:8:                                      ; preds = %dec_label_pc_1006c99
  %9 = call i32 @function_1008c45(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2470
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !2470
  br label %dec_label_pc_1006ca8, !insn.addr !2470

dec_label_pc_1006ca8:                             ; preds = %8, %dec_label_pc_1006c99
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 %eax.0.reload, i32* @global_var_1014f20, align 4, !insn.addr !2471
  %10 = call i32 @function_1006e66(), !insn.addr !2472
  ret i32 %10, !insn.addr !2472
}

define i32 @function_1006cb2() local_unnamed_addr {
dec_label_pc_1006cb2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_28006e08(i32 %0), !insn.addr !2473
  ret i32 %1, !insn.addr !2473
}

define i32 @function_1006cf1() local_unnamed_addr {
dec_label_pc_1006cf1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %1, -125, !insn.addr !2474
  %6 = inttoptr i32 %5 to i8*, !insn.addr !2474
  %7 = load i8, i8* %6, align 1, !insn.addr !2474
  %8 = trunc i32 %4 to i8, !insn.addr !2474
  %9 = add i8 %7, %8, !insn.addr !2474
  store i8 %9, i8* %6, align 1, !insn.addr !2474
  %10 = add i32 %3, 57988, !insn.addr !2475
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2475
  %12 = load i32, i32* %11, align 4, !insn.addr !2475
  %13 = add i32 %12, 1, !insn.addr !2475
  store i32 %13, i32* %11, align 4, !insn.addr !2475
  %14 = call i32 @function_1007bd1(), !insn.addr !2476
  %15 = add i32 %2, -1, !insn.addr !2477
  %16 = udiv i32 %14, 256, !insn.addr !2478
  %17 = trunc i32 %16 to i8, !insn.addr !2478
  %.tr = trunc i32 %16 to i8
  %18 = mul i8 %.tr, 2, !insn.addr !2478
  %19 = icmp ult i8 %18, %17, !insn.addr !2478
  %20 = mul i32 %16, 512, !insn.addr !2478
  %21 = and i32 %20, 65024, !insn.addr !2478
  %22 = and i32 %14, -65281, !insn.addr !2478
  %23 = or i32 %21, %22, !insn.addr !2478
  store i32 %23, i32* inttoptr (i32 21187984 to i32*), align 16, !insn.addr !2479
  %24 = inttoptr i32 %23 to i32*, !insn.addr !2480
  %25 = load i32, i32* %24, align 4, !insn.addr !2480
  %26 = call i32 @function_1007bc1(i32 %25), !insn.addr !2481
  %27 = load i8, i8* @global_var_1014300, align 1, !insn.addr !2482
  %28 = add i32 %2, -96, !insn.addr !2483
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2483
  store i32 %15, i32* %29, align 4, !insn.addr !2483
  %30 = add i32 %0, -83, !insn.addr !2484
  %31 = inttoptr i32 %30 to i8*, !insn.addr !2484
  %32 = load i8, i8* %31, align 1, !insn.addr !2484
  %.neg1 = sext i1 %19 to i8
  %.neg2 = sub i8 %.neg1, %27, !insn.addr !2484
  %33 = add i8 %.neg2, %32, !insn.addr !2484
  store i8 %33, i8* %31, align 1, !insn.addr !2484
  %34 = call i32 @__asm_wait(), !insn.addr !2485
  %35 = mul i32 %15, 2, !insn.addr !2486
  %36 = add i32 %35, %0, !insn.addr !2486
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2486
  %38 = load i32, i32* %37, align 4, !insn.addr !2486
  %39 = inttoptr i32 %38 to i32*, !insn.addr !2487
  %40 = load i32, i32* %39, align 4, !insn.addr !2487
  ret i32 %40, !insn.addr !2487
}

define i32 @function_1006d38(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1006d38:
  %ebx.0.reg2mem = alloca i32, !insn.addr !2488
  %eax.0.reg2mem = alloca i32, !insn.addr !2488
  %merge.reg2mem = alloca i32, !insn.addr !2488
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i8* @__decompiler_undefined_function_5()
  %7 = icmp eq i1 %5, false, !insn.addr !2488
  br i1 %7, label %dec_label_pc_1006d3e, label %dec_label_pc_1006d3a, !insn.addr !2488

dec_label_pc_1006d3a:                             ; preds = %57, %dec_label_pc_1006d61, %dec_label_pc_1006d38
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2488

dec_label_pc_1006d3e:                             ; preds = %dec_label_pc_1006d38
  %8 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !2489
  %9 = icmp eq i32 %8, 0, !insn.addr !2490
  br i1 %9, label %dec_label_pc_1006d61, label %dec_label_pc_1006d49, !insn.addr !2490

dec_label_pc_1006d49:                             ; preds = %dec_label_pc_1006d3e
  %10 = inttoptr i32 %8 to i32*, !insn.addr !2491
  %11 = add i32 %0, -1, !insn.addr !2492
  %12 = add i32 %0, 1124076938, !insn.addr !2493
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2493
  %14 = load i32, i32* %13, align 4, !insn.addr !2493
  %15 = add i32 %14, %2, !insn.addr !2493
  store i32 %15, i32* %13, align 4, !insn.addr !2493
  %16 = load i32, i32* %10, align 4, !insn.addr !2494
  %17 = or i32 %16, %3, !insn.addr !2494
  store i32 %17, i32* %10, align 4, !insn.addr !2494
  %18 = inttoptr i32 %11 to i32*, !insn.addr !2495
  %19 = load i32, i32* %18, align 4, !insn.addr !2495
  %20 = udiv i32 %19, 256, !insn.addr !2496
  %21 = trunc i32 %20 to i8, !insn.addr !2496
  %22 = add i32 %1, 102, !insn.addr !2496
  %23 = add i32 %22, %3, !insn.addr !2496
  %24 = inttoptr i32 %23 to i8*, !insn.addr !2496
  store i8 %21, i8* %24, align 1, !insn.addr !2496
  %25 = add i32 %3, 161, !insn.addr !2497
  %26 = and i32 %25, 255, !insn.addr !2497
  %27 = and i32 %3, -256, !insn.addr !2497
  %28 = or i32 %26, %27, !insn.addr !2497
  %29 = load i32, i32* %10, align 4, !insn.addr !2498
  %30 = add i32 %29, %28, !insn.addr !2498
  store i32 %30, i32* %10, align 4, !insn.addr !2498
  store i32 %28, i32* %eax.0.reg2mem, !insn.addr !2499
  store i32 %19, i32* %ebx.0.reg2mem, !insn.addr !2499
  br label %dec_label_pc_1006d61, !insn.addr !2499

dec_label_pc_1006d61:                             ; preds = %dec_label_pc_1006d49, %dec_label_pc_1006d3e
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %31 = inttoptr i32 %ebx.0.reload to i8*, !insn.addr !2500
  %32 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2501
  %33 = load i8, i8* %32, align 1, !insn.addr !2501
  %34 = trunc i32 %eax.0.reload to i8, !insn.addr !2501
  %35 = add i8 %33, %34, !insn.addr !2501
  store i8 %35, i8* %32, align 1, !insn.addr !2501
  %36 = add i32 %arg1, -23, !insn.addr !2502
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2502
  %38 = load i32, i32* %37, align 4, !insn.addr !2502
  %39 = mul i32 %38, 4, !insn.addr !2502
  %40 = udiv i32 %38, 1073741824, !insn.addr !2502
  %41 = or i32 %40, %39, !insn.addr !2502
  store i32 %41, i32* %37, align 4, !insn.addr !2502
  call void @__asm_rep_movsd_memcpy(i8* %31, i8* %6, i32 %arg4), !insn.addr !2503
  %42 = select i1 %4, i32 -4, i32 4, !insn.addr !2503
  %43 = mul i32 %42, %arg4, !insn.addr !2503
  %44 = add i32 %ebx.0.reload, %43, !insn.addr !2503
  %45 = add i32 %arg5, -1582959869, !insn.addr !2504
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2504
  %47 = load i32, i32* %46, align 4, !insn.addr !2504
  %48 = add i32 %47, -112, !insn.addr !2504
  store i32 %48, i32* %46, align 4, !insn.addr !2504
  %49 = inttoptr i32 %arg2 to i32*, !insn.addr !2505
  %50 = load i32, i32* %49, align 4, !insn.addr !2505
  %51 = add i32 %50, %arg2, !insn.addr !2505
  store i32 %51, i32* %49, align 4, !insn.addr !2505
  %52 = inttoptr i32 %44 to i8*, !insn.addr !2506
  %53 = load i8, i8* %52, align 1, !insn.addr !2506
  %54 = trunc i32 %arg2 to i8, !insn.addr !2506
  %55 = and i8 %54, 31, !insn.addr !2506
  %56 = icmp eq i8 %55, 0, !insn.addr !2506
  store i32 %arg2, i32* %merge.reg2mem, !insn.addr !2506
  br i1 %56, label %dec_label_pc_1006d3a, label %57, !insn.addr !2506

; <label>:57:                                     ; preds = %dec_label_pc_1006d61
  %58 = lshr i8 %53, %55, !insn.addr !2506
  %59 = sub nsw i8 8, %55, !insn.addr !2506
  %60 = shl i8 %53, %59, !insn.addr !2506
  %61 = or i8 %58, %60, !insn.addr !2506
  store i8 %61, i8* %52, align 1, !insn.addr !2506
  store i32 %arg2, i32* %merge.reg2mem, !insn.addr !2506
  br label %dec_label_pc_1006d3a, !insn.addr !2506
}

define i32 @function_1006de0() local_unnamed_addr {
dec_label_pc_1006de0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2507
}

define i32 @function_1006de7(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006de7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_4c0045c4(), !insn.addr !2508
  %3 = inttoptr i32 %2 to i32*, !insn.addr !2509
  %4 = load i32, i32* %3, align 4, !insn.addr !2509
  %5 = add i32 %4, %0, !insn.addr !2509
  store i32 %5, i32* %3, align 4, !insn.addr !2509
  %6 = udiv i32 %1, 256, !insn.addr !2510
  %7 = trunc i32 %6 to i8, !insn.addr !2510
  %8 = sub i8 0, %7
  %9 = sub i8 %8, 1
  %10 = icmp ult i8 %9, %7, !insn.addr !2510
  %11 = zext i1 %10 to i32, !insn.addr !2511
  %12 = add i32 %2, 80, !insn.addr !2511
  %13 = add i32 %12, %11, !insn.addr !2511
  %14 = add i32 %arg1, 8, !insn.addr !2512
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2512
  %16 = load i32, i32* %15, align 4, !insn.addr !2512
  %17 = trunc i32 %13 to i8, !insn.addr !2513
  store i8 %17, i8* @global_var_1014d78, align 1, !insn.addr !2513
  %18 = call i32 @function_1006e2a(i32 %16, i32 407), !insn.addr !2514
  ret i32 %18, !insn.addr !2514
}

define i32 @function_1006e22() local_unnamed_addr {
dec_label_pc_1006e22:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 905906794, !insn.addr !2515
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2515
  %5 = load i32, i32* %4, align 4, !insn.addr !2515
  %6 = add i32 %5, %1, !insn.addr !2515
  store i32 %6, i32* %4, align 4, !insn.addr !2515
  ret i32 %2, !insn.addr !2515
}

define i32 @function_1006e2a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1006e2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %.mask = and i32 %0, 2147483647
  %5 = icmp eq i32 %.mask, 0, !insn.addr !2516
  %6 = icmp eq i1 %5, false, !insn.addr !2517
  br i1 %6, label %dec_label_pc_1006e41, label %dec_label_pc_1006e31, !insn.addr !2517

dec_label_pc_1006e31:                             ; preds = %dec_label_pc_1006e2a
  %7 = load i32, i32* inttoptr (i32 -15448693 to i32*), align 4, !insn.addr !2518
  %8 = xor i32 %7, %2, !insn.addr !2518
  store i32 %8, i32* inttoptr (i32 -15448693 to i32*), align 4, !insn.addr !2518
  ret i32 %4, !insn.addr !2519

dec_label_pc_1006e41:                             ; preds = %dec_label_pc_1006e2a
  %9 = add i32 %2, 36, !insn.addr !2520
  %10 = inttoptr i32 %9 to i16*, !insn.addr !2520
  %11 = add i32 %4, -33, !insn.addr !2521
  %12 = inttoptr i32 %11 to i32*, !insn.addr !2521
  %13 = load i32, i32* %12, align 4, !insn.addr !2521
  %14 = add i32 %13, %1, !insn.addr !2521
  store i32 %14, i32* %12, align 4, !insn.addr !2521
  %15 = add i32 %4, %3, !insn.addr !2522
  %16 = inttoptr i32 %3 to i32*, !insn.addr !2522
  store i32 %15, i32* %16, align 4, !insn.addr !2522
  %17 = call i32 @function_1006e66(), !insn.addr !2523
  ret i32 %17, !insn.addr !2523
}

define i32 @function_1006e58(i32 %arg1) local_unnamed_addr {
dec_label_pc_1006e58:
  %stack_var_4 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !2524
  ret i32 %0, !insn.addr !2525
}

define i32 @function_1006e66() local_unnamed_addr {
dec_label_pc_1006e66:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %4, -1034069154, !insn.addr !2526
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2526
  %8 = load i32, i32* %7, align 4, !insn.addr !2526
  %9 = sdiv i32 %8, 2, !insn.addr !2526
  store i32 %9, i32* %7, align 4, !insn.addr !2526
  %10 = inttoptr i32 %0 to i32*, !insn.addr !2527
  store i32 0, i32* %10, align 4, !insn.addr !2527
  %11 = call i32 @__asm_hlt(), !insn.addr !2528
  %12 = add i32 %2, 8, !insn.addr !2529
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2529
  %14 = load i32, i32* %13, align 4, !insn.addr !2529
  %15 = inttoptr i32 %14 to i8*, !insn.addr !2530
  %16 = load i8, i8* %15, align 1, !insn.addr !2530
  %17 = trunc i32 %14 to i8, !insn.addr !2530
  %18 = add i8 %16, %17, !insn.addr !2530
  store i8 %18, i8* %15, align 1, !insn.addr !2530
  %19 = call i32 @__asm_invd(i32 %1, i32 %3), !insn.addr !2531
  %20 = or i32 %19, -2097151991, !insn.addr !2532
  %21 = trunc i32 %20 to i8, !insn.addr !2533
  %22 = add i8 %21, 120, !insn.addr !2533
  %23 = icmp slt i8 %22, 0, !insn.addr !2533
  %24 = icmp eq i1 %23, false, !insn.addr !2534
  br i1 %24, label %dec_label_pc_1006eaa, label %dec_label_pc_1006e9b, !insn.addr !2534

dec_label_pc_1006e9b:                             ; preds = %dec_label_pc_1006e66
  %25 = call i32 @function_25a16ea2(), !insn.addr !2535
  ret i32 %25, !insn.addr !2535

dec_label_pc_1006eaa:                             ; preds = %dec_label_pc_1006e66
  %26 = select i1 %5, i32 -4, i32 4, !insn.addr !2527
  %27 = add i32 %26, %0, !insn.addr !2527
  %28 = zext i8 %22 to i32, !insn.addr !2533
  %29 = and i32 %20, -256, !insn.addr !2533
  %30 = or i32 %29, %28, !insn.addr !2533
  %31 = inttoptr i32 %27 to i32*, !insn.addr !2536
  %32 = load i32, i32* %31, align 4, !insn.addr !2536
  %33 = add i32 %32, %27, !insn.addr !2536
  store i32 %33, i32* %31, align 4, !insn.addr !2536
  %34 = mul i32 %33, %27, !insn.addr !2537
  %35 = inttoptr i32 %27 to i8*, !insn.addr !2538
  %36 = load i8, i8* %35, align 1, !insn.addr !2538
  %37 = trunc i32 %34 to i8
  %38 = add i8 %36, 48, !insn.addr !2538
  %39 = add i8 %38, %37, !insn.addr !2538
  store i8 %39, i8* %35, align 1, !insn.addr !2538
  %40 = call i32 @__asm_iretd(), !insn.addr !2539
  %41 = add i32 %2, -13161006, !insn.addr !2540
  %42 = inttoptr i32 %41 to i32*, !insn.addr !2540
  %43 = load i32, i32* %42, align 4, !insn.addr !2540
  %44 = add i32 %43, 1, !insn.addr !2540
  store i32 %44, i32* %42, align 4, !insn.addr !2540
  %45 = trunc i32 %27 to i8, !insn.addr !2541
  %46 = add nsw i32 %30, 1, !insn.addr !2541
  %47 = inttoptr i32 %46 to i8*, !insn.addr !2541
  store i8 %45, i8* %47, align 1, !insn.addr !2541
  %48 = mul i32 %30, 2, !insn.addr !2542
  %49 = icmp ult i32 %48, %30, !insn.addr !2542
  %50 = inttoptr i32 %40 to i8*, !insn.addr !2543
  %51 = load i8, i8* %50, align 1, !insn.addr !2543
  %52 = trunc i32 %40 to i8, !insn.addr !2543
  %53 = zext i1 %49 to i8, !insn.addr !2543
  %54 = add i8 %52, %53, !insn.addr !2543
  %55 = add i8 %54, %51, !insn.addr !2543
  store i8 %55, i8* %50, align 1, !insn.addr !2543
  %56 = add i32 %3, -40, !insn.addr !2544
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2544
  %58 = load i32, i32* %57, align 4, !insn.addr !2544
  %59 = add i32 %58, %40, !insn.addr !2544
  store i32 %59, i32* %57, align 4, !insn.addr !2544
  ret i32 %40, !insn.addr !2545
}

define i32 @function_1006f1e() local_unnamed_addr {
dec_label_pc_1006f1e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2546
}

define i32 @function_1006f2f() local_unnamed_addr {
dec_label_pc_1006f2f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_9()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-44 = alloca i32, align 4
  br i1 %6, label %7, label %dec_label_pc_1006f35, !insn.addr !2547

; <label>:7:                                      ; preds = %dec_label_pc_1006f2f
  %8 = call i32 @function_1009363(), !insn.addr !2547
  br label %dec_label_pc_1006f35, !insn.addr !2547

dec_label_pc_1006f35:                             ; preds = %7, %dec_label_pc_1006f2f
  %9 = call i32 @__asm_pextrw(i64 %4, i32 233), !insn.addr !2548
  %10 = udiv i32 %2, 256, !insn.addr !2549
  %11 = trunc i32 %10 to i8, !insn.addr !2549
  %12 = load i8, i8* @global_var_1014d78, align 1, !insn.addr !2549
  %13 = sub i8 0, %11
  %14 = sub i8 %13, 1
  %15 = icmp ugt i8 %12, %14, !insn.addr !2549
  %16 = zext i1 %15 to i32, !insn.addr !2550
  %17 = add i32 %9, 16781781, !insn.addr !2550
  %18 = add i32 %17, %16, !insn.addr !2550
  %19 = icmp ule i32 %18, %9, !insn.addr !2550
  %20 = icmp ugt i32 %9, -16781782, !insn.addr !2550
  %21 = select i1 %15, i1 %19, i1 %20, !insn.addr !2550
  store i32 %18, i32* inttoptr (i32 22004493 to i32*), align 4, !insn.addr !2551
  %22 = add i32 %0, 1, !insn.addr !2552
  %23 = inttoptr i32 %22 to i8*, !insn.addr !2552
  %24 = load i8, i8* %23, align 1, !insn.addr !2552
  %25 = trunc i32 %3 to i8, !insn.addr !2552
  %.neg3 = sext i1 %21 to i8
  %.neg4 = sub i8 %24, %25, !insn.addr !2552
  %26 = add i8 %.neg4, %.neg3, !insn.addr !2552
  store i8 %26, i8* %23, align 1, !insn.addr !2552
  %27 = mul i32 %0, 2, !insn.addr !2553
  %28 = call i32 @function_1007bd1(), !insn.addr !2554
  %29 = load i32, i32* @global_var_1014f18, align 4, !insn.addr !2555
  %30 = load i32, i32* @global_var_1014f24, align 4, !insn.addr !2556
  %31 = add i32 %30, -1962934004, !insn.addr !2557
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2557
  %33 = load i32, i32* %32, align 4, !insn.addr !2557
  %34 = sext i32 %33 to i64, !insn.addr !2557
  %35 = mul nsw i64 %34, 13, !insn.addr !2557
  %36 = trunc i64 %35 to i32, !insn.addr !2557
  %37 = mul i64 %34, 55834574848
  %38 = sdiv i64 %37, 4294967296, !insn.addr !2557
  %39 = icmp ne i64 %35, %38, !insn.addr !2557
  %40 = or i32 %27, 1, !insn.addr !2558
  %41 = inttoptr i32 %40 to i8*, !insn.addr !2558
  %42 = load i8, i8* %41, align 1, !insn.addr !2558
  %43 = trunc i32 %30 to i8, !insn.addr !2558
  %.neg6 = sext i1 %39 to i8
  %.neg7 = sub i8 %42, %43, !insn.addr !2558
  %44 = add i8 %.neg7, %.neg6, !insn.addr !2558
  store i8 %44, i8* %41, align 1, !insn.addr !2558
  %45 = add i32 %30, 413241604, !insn.addr !2559
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2559
  %47 = load i32, i32* %46, align 4, !insn.addr !2559
  %48 = add i32 %47, %30, !insn.addr !2559
  store i32 %48, i32* %46, align 4, !insn.addr !2559
  %49 = inttoptr i32 %30 to i32*, !insn.addr !2560
  %50 = load i32, i32* %49, align 4, !insn.addr !2560
  %51 = add i32 %50, 101, !insn.addr !2560
  store i32 %51, i32* %49, align 4, !insn.addr !2560
  %52 = load i8, i8* bitcast (i32* @global_var_1014f24 to i8*), align 4, !insn.addr !2561
  %53 = zext i8 %52 to i32, !insn.addr !2561
  %54 = and i32 %29, -256, !insn.addr !2561
  %55 = or i32 %54, %53, !insn.addr !2561
  %56 = add i32 %36, -14, !insn.addr !2562
  %57 = inttoptr i32 %56 to i8*, !insn.addr !2562
  %58 = load i8, i8* %57, align 1, !insn.addr !2562
  %59 = zext i8 %58 to i32, !insn.addr !2562
  %60 = and i32 %1, -256, !insn.addr !2562
  %61 = or i32 %60, %59, !insn.addr !2562
  %62 = inttoptr i32 %55 to i32*, !insn.addr !2563
  %63 = load i32, i32* %62, align 4, !insn.addr !2563
  %64 = inttoptr i32 %63 to i8*, !insn.addr !2563
  %65 = call i32 @function_1014bc1(i32 %63), !insn.addr !2564
  %66 = load i32, i32* @global_var_1014f24, align 4, !insn.addr !2565
  %67 = mul i32 %66, 4, !insn.addr !2566
  %68 = add i32 %67, -1868490615, !insn.addr !2566
  %69 = inttoptr i32 %68 to i32*, !insn.addr !2566
  %70 = load i32, i32* %69, align 4, !insn.addr !2566
  %71 = inttoptr i32 %66 to i32*, !insn.addr !2567
  %72 = load i32, i32* %71, align 4, !insn.addr !2567
  %73 = add i32 %72, %70, !insn.addr !2567
  store i32 %73, i32* %71, align 4, !insn.addr !2567
  %74 = inttoptr i32 %70 to i32*, !insn.addr !2568
  %75 = load i32, i32* %74, align 4, !insn.addr !2568
  %76 = mul i32 %75, 2, !insn.addr !2569
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2569
  %78 = load i32, i32* %77, align 4, !insn.addr !2569
  %79 = icmp ult i32 %66, %78, !insn.addr !2569
  %80 = icmp ne i1 %79, true, !insn.addr !2570
  %81 = add i32 %75, 1, !insn.addr !2571
  %82 = inttoptr i32 %81 to i8*, !insn.addr !2571
  %83 = load i8, i8* %82, align 1, !insn.addr !2571
  %84 = trunc i32 %66 to i8, !insn.addr !2571
  %.neg9 = sext i1 %80 to i8
  %.neg10 = sub i8 %83, %84, !insn.addr !2571
  %85 = add i8 %.neg10, %.neg9, !insn.addr !2571
  store i8 %85, i8* %82, align 1, !insn.addr !2571
  %86 = add i32 %61, 25811468, !insn.addr !2572
  %87 = inttoptr i32 %86 to i32*, !insn.addr !2572
  %88 = load i32, i32* %87, align 4, !insn.addr !2572
  %89 = add i32 %88, %66, !insn.addr !2572
  store i32 %89, i32* %87, align 4, !insn.addr !2572
  %90 = load i32, i32* inttoptr (i32 32591640 to i32*), align 8, !insn.addr !2573
  %91 = inttoptr i32 %90 to i32*, !insn.addr !2574
  %92 = load i32, i32* %91, align 4, !insn.addr !2574
  %93 = add i32 %90, %61, !insn.addr !2575
  %94 = add i32 %61, 48873921, !insn.addr !2576
  %95 = inttoptr i32 %94 to i8*, !insn.addr !2576
  %96 = load i8, i8* %95, align 1, !insn.addr !2576
  %97 = trunc i32 %93 to i8, !insn.addr !2576
  %98 = add i8 %96, %97, !insn.addr !2576
  store i8 %98, i8* %95, align 1, !insn.addr !2576
  %99 = inttoptr i32 %92 to i8*, !insn.addr !2577
  call void @__asm_rep_movsd_memcpy(i8* %99, i8* %64, i32 %93), !insn.addr !2577
  %100 = select i1 %5, i32 -4, i32 4, !insn.addr !2577
  %101 = mul i32 %93, %100, !insn.addr !2577
  %102 = add i32 %101, %92, !insn.addr !2577
  %103 = inttoptr i32 %102 to i8*, !insn.addr !2578
  call void @__asm_rep_movsb_memcpy(i8* %103, i8* %103, i32 3), !insn.addr !2578
  %104 = select i1 %5, i32 -3, i32 3, !insn.addr !2578
  %105 = add i32 %102, %104, !insn.addr !2578
  store i32 %105, i32* %stack_var_-44, align 4, !insn.addr !2579
  %106 = add i32 %61, 21963789, !insn.addr !2580
  %107 = add i32 %61, 1917945860, !insn.addr !2581
  %108 = inttoptr i32 %107 to i32*, !insn.addr !2581
  %109 = load i32, i32* %108, align 4, !insn.addr !2581
  %110 = add i32 %106, %109, !insn.addr !2581
  store i32 %110, i32* %108, align 4, !insn.addr !2581
  %111 = add i32 %105, 232, !insn.addr !2582
  %112 = and i32 %111, 255, !insn.addr !2582
  %113 = and i32 %105, -256, !insn.addr !2582
  %114 = or i32 %112, %113, !insn.addr !2582
  %115 = inttoptr i32 %105 to i32*, !insn.addr !2583
  store i32 %114, i32* %115, align 4, !insn.addr !2583
  %116 = add i32 %105, %100, !insn.addr !2583
  %117 = inttoptr i32 %114 to i32*, !insn.addr !2584
  %118 = load i32, i32* %117, align 4, !insn.addr !2584
  %119 = or i32 %118, %105, !insn.addr !2584
  %120 = add i32 %61, 38826789, !insn.addr !2585
  %121 = inttoptr i32 %120 to i8*, !insn.addr !2585
  %122 = load i8, i8* %121, align 1, !insn.addr !2585
  %123 = udiv i32 %119, 256, !insn.addr !2585
  %124 = trunc i32 %123 to i8, !insn.addr !2585
  %125 = add i8 %122, %124, !insn.addr !2585
  store i8 %125, i8* %121, align 1, !insn.addr !2585
  %126 = icmp eq i32 %61, -21963788, !insn.addr !2586
  br i1 %126, label %dec_label_pc_100702a, label %dec_label_pc_1007077, !insn.addr !2586

dec_label_pc_100702a:                             ; preds = %dec_label_pc_1006f35
  %127 = trunc i64 %35 to i8
  %128 = add i8 %127, -1, !insn.addr !2587
  %129 = sext i8 %128 to i32, !insn.addr !2588
  %130 = and i32 %129, -256, !insn.addr !2589
  %131 = add i8 %127, -96, !insn.addr !2589
  %132 = zext i8 %131 to i32, !insn.addr !2589
  %133 = or i32 %130, %132, !insn.addr !2589
  %134 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !2588
  %135 = load i32, i32* inttoptr (i32 -21963788 to i32*), align 4, !insn.addr !2590
  %136 = add i32 %135, %134, !insn.addr !2590
  store i32 %136, i32* inttoptr (i32 -21963788 to i32*), align 4, !insn.addr !2590
  %137 = add nsw i32 %133, 1, !insn.addr !2591
  %138 = trunc i32 %137 to i8, !insn.addr !2592
  %139 = add i8 %138, -1, !insn.addr !2592
  %140 = xor i8 %139, %138, !insn.addr !2592
  %141 = sub i8 0, %138, !insn.addr !2592
  %142 = and i8 %140, %141, !insn.addr !2592
  %143 = icmp slt i8 %142, 0, !insn.addr !2592
  %144 = zext i8 %139 to i32, !insn.addr !2592
  %145 = and i32 %137, -256, !insn.addr !2592
  %146 = or i32 %145, %144, !insn.addr !2592
  br i1 %143, label %dec_label_pc_1007036, label %dec_label_pc_1007032, !insn.addr !2593

dec_label_pc_1007032:                             ; preds = %dec_label_pc_100702a
  ret i32 %146, !insn.addr !2593

dec_label_pc_1007036:                             ; preds = %dec_label_pc_100702a
  %147 = mul i32 %30, 4, !insn.addr !2594
  %148 = add i32 %147, %29, !insn.addr !2594
  %149 = inttoptr i32 %148 to i32*, !insn.addr !2594
  %150 = mul i32 %90, 4, !insn.addr !2595
  %151 = inttoptr i32 %150 to i32*, !insn.addr !2595
  %152 = load i32, i32* %151, align 4, !insn.addr !2595
  %153 = add i32 %152, 4, !insn.addr !2596
  %154 = inttoptr i32 %153 to i32*, !insn.addr !2596
  store i32 %146, i32* %154, align 4, !insn.addr !2596
  %155 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !2597
  %156 = add i32 %155, 36, !insn.addr !2598
  %157 = inttoptr i32 %156 to i32*, !insn.addr !2598
  %158 = load i32, i32* %157, align 4, !insn.addr !2598
  %159 = call i32 @__asm_in(i32 12), !insn.addr !2599
  %160 = mul i32 %159, 2, !insn.addr !2600
  %161 = udiv i32 %159, 2
  %162 = and i32 %161, 1073741823, !insn.addr !2601
  %163 = inttoptr i32 %158 to i8*, !insn.addr !2602
  %164 = inttoptr i32 %116 to i8*, !insn.addr !2602
  call void @__asm_rep_movsd_memcpy(i8* %164, i8* %163, i32 %162), !insn.addr !2602
  ret i32 %160, !insn.addr !2603

dec_label_pc_1007077:                             ; preds = %dec_label_pc_1006f35
  %165 = or i32 %90, 195, !insn.addr !2604
  %166 = add i32 %165, %61, !insn.addr !2605
  %167 = inttoptr i32 %166 to i8*, !insn.addr !2606
  %168 = load i8, i8* %167, align 1, !insn.addr !2606
  %169 = inttoptr i32 %116 to i8*, !insn.addr !2606
  store i8 %168, i8* %169, align 1, !insn.addr !2606
  %170 = load i32, i32* @global_var_1014f24, align 4, !insn.addr !2607
  %171 = add i32 %170, 1, !insn.addr !2607
  store i32 %171, i32* @global_var_1014f24, align 4, !insn.addr !2607
  %172 = load i32, i32* inttoptr (i32 29642100 to i32*), align 4, !insn.addr !2608
  %173 = sext i8 %58 to i32, !insn.addr !2609
  %174 = call i32 @unknown_f177e736(i32 %172, i32 5302168, i32 -1073741929, i32 %173), !insn.addr !2609
  %175 = call i32 @function_1015257(), !insn.addr !2610
  ret i32 %175, !insn.addr !2610
}

define i32 @function_100709d() local_unnamed_addr {
dec_label_pc_100709d:
  %0 = call i32 @unknown_47026859(), !insn.addr !2611
  %1 = call i32 @function_1007a63(), !insn.addr !2612
  ret i32 %1, !insn.addr !2612
}

define i32 @function_10070a7(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10070a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %3 = call i64 @__decompiler_undefined_function_9()
  %4 = call i64 @__decompiler_undefined_function_9()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = add i32 %1, 8, !insn.addr !2613
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2613
  store i32 0, i32* %8, align 4, !insn.addr !2613
  %9 = add i32 %arg2, -8, !insn.addr !2614
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2614
  store i32 0, i32* %10, align 4, !insn.addr !2614
  %11 = call i64 @__asm_pcmpeqb(i64 %4, i64 %3), !insn.addr !2615
  %12 = bitcast i32* %eax to i8*
  %13 = load i8, i8* %12, align 4, !insn.addr !2616
  %14 = load i32, i32* %eax, align 4
  %15 = trunc i32 %14 to i8, !insn.addr !2616
  %16 = add i8 %13, %15, !insn.addr !2616
  %17 = icmp ult i8 %16, %13, !insn.addr !2616
  %18 = inttoptr i32 %14 to i8*, !insn.addr !2616
  store i8 %16, i8* %18, align 1, !insn.addr !2616
  %19 = call i32 @function_1007bd1(), !insn.addr !2617
  store i32 0, i32* inttoptr (i32 -1761484708 to i32*), align 4, !insn.addr !2618
  %20 = call i32 @function_1007c26(), !insn.addr !2619
  store i32 %20, i32* inttoptr (i32 -671003203 to i32*), align 4, !insn.addr !2620
  %21 = add i32 %0, -1274355480, !insn.addr !2621
  %22 = inttoptr i32 %21 to i32*, !insn.addr !2621
  %23 = load i32, i32* %22, align 4, !insn.addr !2621
  %.neg = sext i1 %17 to i32
  %.neg2 = add i32 %.neg, %arg1, !insn.addr !2621
  %24 = sub i32 %.neg2, %23, !insn.addr !2621
  %25 = add i32 %2, 268521360, !insn.addr !2622
  %26 = inttoptr i32 %25 to i8*, !insn.addr !2622
  %27 = load i8, i8* %26, align 1, !insn.addr !2622
  %28 = udiv i32 %20, 256, !insn.addr !2622
  %29 = trunc i32 %28 to i8, !insn.addr !2622
  %30 = add i8 %27, %29, !insn.addr !2622
  store i8 %30, i8* %26, align 1, !insn.addr !2622
  %31 = load i32, i32* %esi, align 4, !insn.addr !2623
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2623
  store i32 %24, i32* %32, align 4, !insn.addr !2623
  %33 = load i32, i32* inttoptr (i32 28921732 to i32*), align 4, !insn.addr !2624
  %34 = inttoptr i32 %33 to i32*, !insn.addr !2625
  %35 = load i32, i32* %34, align 4, !insn.addr !2625
  %36 = load i32, i32* %esi, align 4
  %37 = add i32 %36, -1, !insn.addr !2626
  %38 = inttoptr i32 %36 to i32*, !insn.addr !2626
  store i32 %37, i32* %38, align 4, !insn.addr !2626
  %39 = bitcast i32* %esi to i8*
  %40 = load i8, i8* %39, align 4, !insn.addr !2627
  %41 = and i32 %35, -256, !insn.addr !2627
  %42 = load i32, i32* %esi, align 4, !insn.addr !2627
  %43 = add i32 %42, 1, !insn.addr !2627
  call void @__asm_into(i32 %6), !insn.addr !2628
  %44 = add i8 %40, 11, !insn.addr !2629
  %45 = zext i8 %44 to i32, !insn.addr !2629
  %46 = or i32 %41, %45, !insn.addr !2629
  %47 = inttoptr i32 %46 to i8*, !insn.addr !2630
  %48 = load i8, i8* %47, align 1, !insn.addr !2630
  %49 = add i8 %48, %44, !insn.addr !2630
  store i8 %49, i8* %47, align 1, !insn.addr !2630
  %50 = load i32, i32* inttoptr (i32 19668368 to i32*), align 16, !insn.addr !2631
  %51 = inttoptr i32 %50 to i32*, !insn.addr !2632
  store i32 %46, i32* %51, align 4, !insn.addr !2632
  %52 = call i32 @__asm_int3(), !insn.addr !2633
  %53 = load i32, i32* inttoptr (i32 72236336 to i32*), align 16, !insn.addr !2634
  %54 = add i32 %53, %50, !insn.addr !2634
  store i32 %54, i32* inttoptr (i32 72236336 to i32*), align 16, !insn.addr !2634
  %55 = mul i32 %50, 4, !insn.addr !2635
  %56 = add i32 %55, 12, !insn.addr !2635
  %57 = udiv i32 %56, 16777216, !insn.addr !2636
  %58 = inttoptr i32 %43 to i8*, !insn.addr !2637
  %59 = load i8, i8* %58, align 1, !insn.addr !2637
  %60 = inttoptr i32 %0 to i8*, !insn.addr !2637
  store i8 %59, i8* %60, align 1, !insn.addr !2637
  %61 = add i32 %0, 1, !insn.addr !2637
  %62 = add i32 %42, 2, !insn.addr !2637
  %63 = inttoptr i32 %62 to i32*, !insn.addr !2638
  %64 = load i32, i32* %63, align 4, !insn.addr !2638
  %65 = inttoptr i32 %61 to i32*, !insn.addr !2638
  store i32 %64, i32* %65, align 4, !insn.addr !2638
  %66 = udiv i32 %arg2, 256, !insn.addr !2639
  %67 = sub nsw i32 %57, %66, !insn.addr !2639
  %68 = and i32 %67, 255, !insn.addr !2639
  %69 = add nuw nsw i32 %68, 29666192, !insn.addr !2640
  %70 = inttoptr i32 %69 to i864*, !insn.addr !2640
  %71 = load i864, i864* %70, align 4, !insn.addr !2640
  call void @__asm_frstor(i864 %71), !insn.addr !2640
  %72 = call i32 @unknown_12007bc1(i16 %5), !insn.addr !2641
  store i32 %68, i32* inttoptr (i32 -78 to i32*), align 4, !insn.addr !2642
  %73 = load i32, i32* inttoptr (i32 21122948 to i32*), align 4, !insn.addr !2643
  %74 = add i32 %73, 12, !insn.addr !2644
  %75 = inttoptr i32 %74 to i32*, !insn.addr !2644
  %76 = load i32, i32* %75, align 4, !insn.addr !2644
  %77 = add i32 %76, -10, !insn.addr !2645
  %78 = inttoptr i32 %77 to i32*, !insn.addr !2645
  %79 = load i32, i32* %78, align 4, !insn.addr !2645
  %sext = mul i32 %79, 65536
  %80 = sdiv i32 %sext, 65536, !insn.addr !2646
  %81 = call i32 @function_100fffb(i32 %80), !insn.addr !2646
  %82 = load i32, i32* @global_var_1014790, align 4, !insn.addr !2647
  %83 = load i32, i32* inttoptr (i32 1317733395 to i32*), align 4, !insn.addr !2648
  %84 = add i32 %83, %82, !insn.addr !2648
  store i32 %84, i32* inttoptr (i32 1317733395 to i32*), align 4, !insn.addr !2648
  call void @llvm.trap()
  unreachable
}

define i32 @function_10071b9(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10071b9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_0, align 4
  %8 = trunc i32 %3 to i8
  %9 = trunc i32 %4 to i8, !insn.addr !2649
  %.neg3 = sext i1 %7 to i8
  %.neg4 = sub i8 %8, %9, !insn.addr !2649
  %10 = add i8 %.neg4, %.neg3, !insn.addr !2649
  %11 = inttoptr i32 %3 to i8*, !insn.addr !2649
  store i8 %10, i8* %11, align 1, !insn.addr !2649
  %12 = add i32 %0, -117, !insn.addr !2650
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2650
  %14 = load i32, i32* %13, align 4, !insn.addr !2650
  %15 = add i32 %14, %2, !insn.addr !2650
  store i32 %15, i32* %13, align 4, !insn.addr !2650
  %16 = add i32 %0, 112, !insn.addr !2651
  %17 = inttoptr i32 %16 to i8*, !insn.addr !2651
  %18 = load i8, i8* %17, align 1, !insn.addr !2651
  %19 = udiv i32 %3, 256, !insn.addr !2651
  %20 = trunc i32 %19 to i8, !insn.addr !2651
  %21 = add i8 %18, %20, !insn.addr !2651
  store i8 %21, i8* %17, align 1, !insn.addr !2651
  %22 = add i32 %5, 232, !insn.addr !2652
  %23 = and i32 %22, 255, !insn.addr !2652
  %24 = and i32 %5, -256, !insn.addr !2652
  %25 = or i32 %23, %24, !insn.addr !2652
  %26 = bitcast i32* %edx to i8*
  %27 = load i8, i8* %26, align 4, !insn.addr !2653
  %28 = xor i8 %27, %9, !insn.addr !2653
  %29 = zext i8 %28 to i32, !insn.addr !2653
  %30 = and i32 %4, -256, !insn.addr !2653
  %31 = or i32 %30, %29, !insn.addr !2653
  %32 = inttoptr i32 %25 to i8*, !insn.addr !2654
  %33 = load i8, i8* %32, align 1, !insn.addr !2654
  %34 = trunc i32 %22 to i8, !insn.addr !2654
  %35 = add i8 %33, %34, !insn.addr !2654
  store i8 %35, i8* %32, align 1, !insn.addr !2654
  %36 = inttoptr i32 %31 to i32*, !insn.addr !2655
  %37 = mul i32 %25, 2, !insn.addr !2656
  store i32 %37, i32* %36, align 4, !insn.addr !2656
  %38 = add i32 %1, -1, !insn.addr !2657
  %39 = add i32 %31, ptrtoint (i32* @global_var_1014de3 to i32), !insn.addr !2658
  %40 = inttoptr i32 %39 to i32*, !insn.addr !2658
  %41 = load i32, i32* %40, align 4, !insn.addr !2658
  %42 = mul i32 %41, %25, !insn.addr !2658
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2659
  %44 = load i32, i32* %43, align 4, !insn.addr !2659
  %45 = inttoptr i32 %38 to i32*, !insn.addr !2660
  %46 = load i32, i32* %45, align 4, !insn.addr !2660
  %47 = inttoptr i32 %44 to i32*, !insn.addr !2660
  store i32 %46, i32* %47, align 4, !insn.addr !2660
  %48 = select i1 %6, i32 -4, i32 4, !insn.addr !2660
  %49 = add i32 %44, %48, !insn.addr !2660
  %50 = add i32 %48, %38, !insn.addr !2660
  %51 = and i32 %42, 112, !insn.addr !2661
  %52 = and i32 %42, -256, !insn.addr !2661
  %53 = or i32 %51, 143, !insn.addr !2662
  %54 = or i32 %53, %52, !insn.addr !2662
  %55 = inttoptr i32 %54 to i8*, !insn.addr !2663
  %56 = load i8, i8* %55, align 1, !insn.addr !2663
  %57 = trunc i32 %53 to i8, !insn.addr !2663
  %58 = add i8 %56, %57, !insn.addr !2663
  store i8 %58, i8* %55, align 1, !insn.addr !2663
  %59 = udiv i32 %4, 1024, !insn.addr !2664
  %60 = inttoptr i32 %50 to i8*, !insn.addr !2665
  %61 = inttoptr i32 %49 to i8*, !insn.addr !2665
  call void @__asm_rep_movsd_memcpy(i8* %61, i8* %60, i32 %59), !insn.addr !2665
  %62 = mul nsw i32 %48, %59, !insn.addr !2665
  %63 = add i32 %49, %62, !insn.addr !2665
  %64 = and i32 %29, 3, !insn.addr !2666
  %65 = inttoptr i32 %63 to i8*, !insn.addr !2667
  call void @__asm_rep_movsb_memcpy(i8* %65, i8* %65, i32 %64), !insn.addr !2667
  %66 = load i32, i32* inttoptr (i32 22392 to i32*), align 8, !insn.addr !2668
  store i32 %66, i32* %stack_var_0, align 4, !insn.addr !2668
  %67 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !2668
  %68 = load i32, i32* inttoptr (i32 1291931024 to i32*), align 16, !insn.addr !2669
  %69 = add i32 %67, -77, !insn.addr !2670
  %70 = add i32 %69, %68, !insn.addr !2670
  %71 = inttoptr i32 %70 to i32*, !insn.addr !2670
  call void @llvm.trap()
  unreachable
}

define i32 @function_1007305() local_unnamed_addr {
dec_label_pc_1007305:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007307() local_unnamed_addr {
dec_label_pc_1007307:
  %0 = call i32 @__asm_hlt(), !insn.addr !2671
  ret i32 %0, !insn.addr !2671
}

define i32 @function_1007308() local_unnamed_addr {
dec_label_pc_1007308:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = call i1 @__decompiler_undefined_function_2()
  %12 = add i32 %2, -4, !insn.addr !2672
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2672
  %14 = load i32, i32* %13, align 4, !insn.addr !2672
  %15 = call i32 @unknown_12007bd1(i32 %14), !insn.addr !2673
  %16 = add i32 %3, -4, !insn.addr !2674
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2674
  %18 = call i32 @unknown_14d7c26(), !insn.addr !2675
  %19 = add i32 %0, -1274019844, !insn.addr !2676
  %20 = inttoptr i32 %19 to i32*, !insn.addr !2676
  %21 = zext i1 %11 to i32, !insn.addr !2677
  %22 = zext i1 %10 to i32, !insn.addr !2677
  %23 = zext i1 %9 to i32, !insn.addr !2677
  %24 = zext i1 %8 to i32, !insn.addr !2677
  %25 = zext i1 %7 to i32, !insn.addr !2677
  %26 = mul i32 %22, 4, !insn.addr !2677
  %27 = mul i32 %23, 16, !insn.addr !2677
  %28 = mul i32 %24, 64, !insn.addr !2677
  %29 = mul i32 %25, 128, !insn.addr !2677
  %30 = or i32 %28, %29, !insn.addr !2677
  %31 = or i32 %30, %27, !insn.addr !2677
  %32 = or i32 %31, %21, !insn.addr !2677
  %33 = or i32 %32, %26, !insn.addr !2677
  %34 = mul i32 %33, 256, !insn.addr !2677
  %35 = and i32 %18, -65281, !insn.addr !2677
  %36 = or i32 %34, %35, !insn.addr !2677
  %37 = or i32 %36, 512, !insn.addr !2677
  %38 = load i8, i8* inttoptr (i32 -55670016 to i8*), align 256, !insn.addr !2678
  %39 = trunc i32 %18 to i8, !insn.addr !2678
  %40 = or i8 %38, %39, !insn.addr !2678
  store i8 %40, i8* inttoptr (i32 -55670016 to i8*), align 256, !insn.addr !2678
  %41 = inttoptr i32 %37 to i32*, !insn.addr !2679
  %42 = load i32, i32* inttoptr (i32 16853774 to i32*), align 4, !insn.addr !2680
  %43 = mul i32 %1, 4, !insn.addr !2681
  %44 = add i32 %42, %43, !insn.addr !2681
  %45 = inttoptr i32 %44 to i32*, !insn.addr !2681
  %46 = load i32, i32* %45, align 4, !insn.addr !2681
  %47 = inttoptr i32 %46 to i32*, !insn.addr !2682
  %48 = load i32, i32* %47, align 4, !insn.addr !2682
  %49 = add i32 %48, 4, !insn.addr !2683
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2683
  %51 = load i32, i32* %50, align 4, !insn.addr !2683
  %52 = call i32 @unknown_1997bfb(i32 %51), !insn.addr !2684
  %53 = load i32, i32* %13, align 4, !insn.addr !2685
  %54 = or i32 %53, 413204873, !insn.addr !2685
  store i32 %54, i32* %13, align 4, !insn.addr !2685
  %55 = add i32 %0, -1, !insn.addr !2686
  %56 = add i32 %52, %5, !insn.addr !2687
  %57 = inttoptr i32 %5 to i32*, !insn.addr !2687
  store i32 %56, i32* %57, align 4, !insn.addr !2687
  %58 = add i32 %52, %43, !insn.addr !2688
  %59 = inttoptr i32 %58 to i32*, !insn.addr !2688
  %60 = load i32, i32* %59, align 4, !insn.addr !2688
  %61 = trunc i32 %1 to i8
  %62 = inttoptr i32 %55 to i8*, !insn.addr !2689
  store i8 %61, i8* %62, align 1, !insn.addr !2689
  %63 = select i1 %6, i32 -1, i32 1, !insn.addr !2689
  %64 = add i32 %63, %1, !insn.addr !2689
  %65 = add i32 %3, 1166738510, !insn.addr !2690
  %66 = inttoptr i32 %65 to i32*, !insn.addr !2690
  %67 = load i32, i32* %66, align 4, !insn.addr !2690
  %68 = udiv i32 %67, 2, !insn.addr !2690
  %69 = shl i32 %67, 31, !insn.addr !2690
  %70 = or i32 %68, %69, !insn.addr !2690
  store i32 %70, i32* %66, align 4, !insn.addr !2690
  %71 = inttoptr i32 %60 to i32*, !insn.addr !2691
  %72 = load i32, i32* %71, align 4, !insn.addr !2691
  %73 = mul i32 %5, 4, !insn.addr !2692
  %74 = add i32 %73, 9699487, !insn.addr !2692
  %75 = udiv i32 %74, 4, !insn.addr !2693
  %76 = add i32 %2, -1518090101, !insn.addr !2694
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2694
  %78 = load i32, i32* %77, align 4, !insn.addr !2694
  %79 = add i32 %75, %74, !insn.addr !2695
  %80 = inttoptr i32 %64 to i8*, !insn.addr !2696
  %81 = load i8, i8* %80, align 1, !insn.addr !2696
  %82 = inttoptr i32 %72 to i8*, !insn.addr !2696
  store i8 %81, i8* %82, align 1, !insn.addr !2696
  %83 = add i32 %72, 1, !insn.addr !2696
  %84 = add i32 %64, 1, !insn.addr !2696
  %85 = trunc i32 %4 to i16, !insn.addr !2697
  %86 = inttoptr i32 %84 to i32*, !insn.addr !2697
  %87 = load i32, i32* %86, align 4, !insn.addr !2697
  call void @__asm_outsd(i16 %85, i32 %87), !insn.addr !2697
  %88 = add i32 %73, 9699376, !insn.addr !2698
  %89 = inttoptr i32 %88 to i32*, !insn.addr !2698
  %90 = load i32, i32* %89, align 4, !insn.addr !2698
  %91 = add i32 %78, -4, !insn.addr !2698
  %92 = inttoptr i32 %91 to i32*, !insn.addr !2698
  store i32 %90, i32* %92, align 4, !insn.addr !2698
  %93 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2699
  call void @__asm_out.4(i32 132, i32 %93), !insn.addr !2700
  %94 = add i32 %2, -18, !insn.addr !2701
  %95 = inttoptr i32 %94 to i32*, !insn.addr !2701
  %96 = load i32, i32* %95, align 4, !insn.addr !2701
  %97 = add i32 %93, 99, !insn.addr !2702
  %98 = inttoptr i32 %97 to i32*, !insn.addr !2702
  %99 = inttoptr i32 %96 to i32*, !insn.addr !2703
  %100 = load i32, i32* %99, align 4, !insn.addr !2703
  %101 = add i32 %100, 4, !insn.addr !2704
  %102 = inttoptr i32 %101 to i32*, !insn.addr !2704
  %103 = load i32, i32* %102, align 4, !insn.addr !2704
  %104 = add i32 %103, 4, !insn.addr !2705
  %105 = inttoptr i32 %104 to i32*, !insn.addr !2705
  %106 = load i32, i32* %105, align 4, !insn.addr !2705
  %107 = add i32 %78, -8, !insn.addr !2705
  %108 = inttoptr i32 %107 to i32*, !insn.addr !2705
  store i32 %106, i32* %108, align 4, !insn.addr !2705
  %109 = call i32 @unknown_1f37bc7(), !insn.addr !2706
  %110 = inttoptr i32 %83 to i32*, !insn.addr !2707
  store i32 %109, i32* %110, align 4, !insn.addr !2707
  %111 = add i32 %72, 5, !insn.addr !2707
  store i32 %111, i32* %99, align 4, !insn.addr !2708
  %112 = trunc i32 %109 to i8, !insn.addr !2709
  %113 = icmp ugt i8 %112, 94, !insn.addr !2709
  %114 = and i32 %109, -256, !insn.addr !2709
  %115 = add i32 %72, -56, !insn.addr !2710
  %116 = inttoptr i32 %115 to i8*, !insn.addr !2710
  %117 = load i8, i8* %116, align 1, !insn.addr !2710
  %118 = trunc i32 %79 to i8, !insn.addr !2710
  %.neg1 = sext i1 %113 to i8
  %.neg2 = sub i8 %.neg1, %118, !insn.addr !2710
  %119 = add i8 %.neg2, %117, !insn.addr !2710
  store i8 %119, i8* %116, align 1, !insn.addr !2710
  %120 = add i32 %3, 1888202903, !insn.addr !2711
  %121 = inttoptr i32 %120 to i32*, !insn.addr !2711
  %122 = load i32, i32* %121, align 4, !insn.addr !2711
  %123 = add i32 %122, %79, !insn.addr !2711
  store i32 %123, i32* %121, align 4, !insn.addr !2711
  %124 = add i32 %109, 225, !insn.addr !2712
  %125 = and i32 %124, 255, !insn.addr !2712
  %126 = or i32 %125, %114, !insn.addr !2712
  ret i32 %126, !insn.addr !2713
}

define i32 @function_10073a7(i32 %arg1) local_unnamed_addr {
dec_label_pc_10073a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2714
}

define i32 @function_10073a9() local_unnamed_addr {
dec_label_pc_10073a9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %4 to i8
  %6 = mul i8 %5, 2, !insn.addr !2715
  %7 = inttoptr i32 %4 to i8*, !insn.addr !2715
  store i8 %6, i8* %7, align 1, !insn.addr !2715
  %8 = udiv i32 %3, 4, !insn.addr !2716
  %9 = and i32 %3, 2, !insn.addr !2716
  %10 = icmp ne i32 %9, 0, !insn.addr !2716
  %11 = inttoptr i32 %1 to i8*, !insn.addr !2717
  %12 = inttoptr i32 %0 to i8*, !insn.addr !2717
  call void @__asm_rep_movsd_memcpy(i8* %12, i8* %11, i32 %8), !insn.addr !2717
  %13 = zext i1 %10 to i32, !insn.addr !2718
  %14 = add i32 %3, 3, !insn.addr !2718
  %15 = add i32 %14, %13, !insn.addr !2718
  %16 = inttoptr i32 %3 to i32*, !insn.addr !2718
  store i32 %15, i32* %16, align 4, !insn.addr !2718
  %17 = trunc i32 %2 to i16, !insn.addr !2719
  %18 = call i32 @__asm_in.5(i16 %17), !insn.addr !2719
  ret i32 %18, !insn.addr !2720
}

define i32 @function_10073c1() local_unnamed_addr {
dec_label_pc_10073c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-11 = alloca i8, align 1
  %5 = call i32 @function_100bc53(i32 %4), !insn.addr !2721
  %6 = add i32 %2, -8, !insn.addr !2722
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2722
  %8 = load i32, i32* %7, align 4, !insn.addr !2722
  %9 = call i32 @unknown_6a007bd1(i32 %8), !insn.addr !2723
  %10 = call i32 @unknown_1207c26(), !insn.addr !2724
  %11 = load i8, i8* inttoptr (i32 13623528 to i8*), align 8, !insn.addr !2725
  %12 = trunc i32 %3 to i8, !insn.addr !2725
  %13 = add i8 %11, %12, !insn.addr !2725
  store i8 %13, i8* inttoptr (i32 13623528 to i8*), align 8, !insn.addr !2725
  %14 = bitcast i32* %ecx to i8*
  %15 = load i8, i8* %14, align 4, !insn.addr !2726
  %16 = udiv i32 %0, 256, !insn.addr !2726
  %17 = trunc i32 %16 to i8, !insn.addr !2726
  %18 = add i8 %15, %17, !insn.addr !2726
  %19 = load i32, i32* %ecx, align 4, !insn.addr !2726
  %20 = inttoptr i32 %19 to i8*, !insn.addr !2726
  store i8 %18, i8* %20, align 1, !insn.addr !2726
  %21 = inttoptr i32 %10 to i32*, !insn.addr !2727
  %22 = add i32 %2, -3, !insn.addr !2728
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2728
  %24 = load i32, i32* %23, align 4, !insn.addr !2728
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2729
  %26 = load i32, i32* %25, align 4, !insn.addr !2729
  %27 = add i32 %26, 4, !insn.addr !2730
  %28 = inttoptr i32 %27 to i32*, !insn.addr !2730
  %29 = load i32, i32* %28, align 4, !insn.addr !2730
  %30 = xor i32 %29, %1, !insn.addr !2730
  store i32 %30, i32* %28, align 4, !insn.addr !2730
  %31 = xor i32 %26, -62551295, !insn.addr !2731
  %32 = inttoptr i32 %31 to i32*, !insn.addr !2732
  %33 = load i32, i32* %32, align 4, !insn.addr !2732
  %34 = add i32 %33, 4, !insn.addr !2733
  %35 = inttoptr i32 %34 to i32*, !insn.addr !2733
  %36 = load i32, i32* %35, align 4, !insn.addr !2733
  %37 = add i32 %2, -7, !insn.addr !2734
  %38 = inttoptr i32 %37 to i32*, !insn.addr !2734
  %39 = load i32, i32* %38, align 4, !insn.addr !2734
  %40 = add i32 %36, -611513203, !insn.addr !2735
  %41 = inttoptr i32 %40 to i32*, !insn.addr !2735
  %42 = load i32, i32* %41, align 4, !insn.addr !2735
  %43 = inttoptr i32 %39 to i8*, !insn.addr !2736
  %44 = load i8, i8* %43, align 1, !insn.addr !2736
  %45 = trunc i32 %39 to i8, !insn.addr !2736
  %46 = add i8 %44, %45, !insn.addr !2736
  store i8 %46, i8* %43, align 1, !insn.addr !2736
  %47 = add i32 %3, 36094401, !insn.addr !2737
  %48 = inttoptr i32 %47 to i8*, !insn.addr !2737
  %49 = load i8, i8* %48, align 1, !insn.addr !2737
  %50 = trunc i32 %42 to i8, !insn.addr !2737
  %51 = add i8 %49, %50, !insn.addr !2737
  store i8 %51, i8* %48, align 1, !insn.addr !2737
  %52 = call i32 @__asm_hlt(), !insn.addr !2738
  %53 = inttoptr i32 %33 to i8*, !insn.addr !2739
  %54 = inttoptr i32 %0 to i8*, !insn.addr !2739
  call void @__asm_rep_movsb_memcpy(i8* %54, i8* %53, i32 %42), !insn.addr !2739
  %55 = ptrtoint i8* %stack_var_-11 to i32, !insn.addr !2740
  %56 = load i8, i8* %stack_var_-11, align 1, !insn.addr !2741
  %57 = trunc i32 %55 to i8, !insn.addr !2741
  %58 = add i8 %56, %57, !insn.addr !2741
  store i8 %58, i8* %stack_var_-11, align 1, !insn.addr !2741
  call void @llvm.trap()
  unreachable
}

define i32 @function_1007438(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1007438:
  %merge.reg2mem = alloca i32, !insn.addr !2742
  %eax.0.reg2mem = alloca i32, !insn.addr !2742
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_7779 = alloca i32, align 4
  %stack_var_-1 = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-10 = alloca i32, align 4
  %stack_var_-2 = alloca i32, align 4
  %6 = add i32 %0, -4, !insn.addr !2743
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2743
  %8 = load i32, i32* %7, align 4, !insn.addr !2743
  %9 = add i32 %8, 4, !insn.addr !2744
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2744
  %11 = load i32, i32* %10, align 4, !insn.addr !2744
  %12 = add i32 %11, 4, !insn.addr !2745
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2745
  %14 = load i32, i32* %13, align 4, !insn.addr !2745
  %15 = add i32 %0, 1, !insn.addr !2746
  %16 = and i32 %8, 94, !insn.addr !2747
  %17 = or i32 %16, 161, !insn.addr !2747
  %18 = and i32 %8, -256, !insn.addr !2747
  %19 = or i32 %17, %18, !insn.addr !2747
  %20 = inttoptr i32 %19 to i8*, !insn.addr !2748
  %21 = load i8, i8* %20, align 1, !insn.addr !2748
  %22 = trunc i32 %17 to i8, !insn.addr !2748
  %23 = add i8 %21, %22, !insn.addr !2748
  store i8 %23, i8* %20, align 1, !insn.addr !2748
  store i32 %15, i32* %stack_var_-2, align 4, !insn.addr !2749
  %24 = ptrtoint i32* %stack_var_-2 to i32, !insn.addr !2749
  %25 = add i32 %24, -4, !insn.addr !2750
  %26 = call i32 @__readgsdword(i32 %25), !insn.addr !2750
  %27 = call i32 @function_1013454(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1012f90, i32 0, i32 0), i32 %5, i32* nonnull %stack_var_-10, i32 %26), !insn.addr !2751
  %28 = add i32 %4, 1, !insn.addr !2752
  %29 = icmp slt i32 %28, %27, !insn.addr !2753
  store i32 %27, i32* %eax.0.reg2mem, !insn.addr !2753
  br i1 %29, label %30, label %dec_label_pc_100748d, !insn.addr !2753

; <label>:30:                                     ; preds = %dec_label_pc_1007438
  %31 = call i32 @function_1007305(), !insn.addr !2753
  store i32 %31, i32* %eax.0.reg2mem, !insn.addr !2753
  br label %dec_label_pc_100748d, !insn.addr !2753

dec_label_pc_100748d:                             ; preds = %30, %dec_label_pc_1007438
  %32 = mul i32 %14, 8, !insn.addr !2754
  %33 = add i32 %32, %1, !insn.addr !2754
  %34 = mul i32 %33, 4, !insn.addr !2755
  %35 = udiv i32 %33, 1073741824, !insn.addr !2755
  %36 = or i32 %35, %34, !insn.addr !2755
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %37 = call i32 @unknown_7b548f(i32 %eax.0.reload), !insn.addr !2756
  %38 = ptrtoint i32* %stack_var_7779 to i32, !insn.addr !2757
  %39 = call i32 @function_100f926(i32 %1), !insn.addr !2758
  %40 = trunc i32 %2 to i16, !insn.addr !2759
  call void @__asm_out.2(i16 %40, i32 %39), !insn.addr !2759
  %41 = udiv i32 %33, 64
  %42 = and i32 %41, 255
  %43 = xor i32 %39, %42, !insn.addr !2760
  %44 = load i8, i8* inttoptr (i32 1157713700 to i8*), align 4, !insn.addr !2761
  %45 = trunc i32 %43 to i8, !insn.addr !2761
  %46 = add i8 %44, %45, !insn.addr !2761
  store i8 %46, i8* inttoptr (i32 1157713700 to i8*), align 4, !insn.addr !2761
  call void @__asm_out.2(i16 %40, i32 %43), !insn.addr !2762
  %47 = add i32 %1, -24511397, !insn.addr !2763
  %48 = inttoptr i32 %47 to i8*, !insn.addr !2763
  %49 = load i8, i8* %48, align 1, !insn.addr !2763
  %50 = trunc i32 %36 to i8, !insn.addr !2763
  %51 = add i8 %49, %50, !insn.addr !2763
  store i8 %51, i8* %48, align 1, !insn.addr !2763
  %52 = inttoptr i32 %arg2 to i32*, !insn.addr !2764
  %53 = load i32, i32* %52, align 4, !insn.addr !2764
  %54 = xor i32 %53, 112, !insn.addr !2765
  %55 = add i32 %54, 232, !insn.addr !2766
  %56 = and i32 %55, 255, !insn.addr !2766
  %57 = and i32 %53, -256, !insn.addr !2766
  %58 = or i32 %56, %57, !insn.addr !2766
  %59 = inttoptr i32 %58 to i8*, !insn.addr !2767
  %60 = load i8, i8* %59, align 1, !insn.addr !2767
  %61 = trunc i32 %55 to i8, !insn.addr !2767
  %62 = add i8 %60, %61, !insn.addr !2767
  %63 = xor i8 %62, %60, !insn.addr !2767
  %64 = xor i8 %62, %61, !insn.addr !2767
  %65 = and i8 %63, %64, !insn.addr !2767
  %66 = icmp slt i8 %65, 0, !insn.addr !2767
  %67 = icmp slt i8 %62, 0, !insn.addr !2767
  store i8 %62, i8* %59, align 1, !insn.addr !2767
  %68 = load i16, i16* inttoptr (i32 814418157 to i16*), align 2, !insn.addr !2768
  call void @__asm_arpl(i16 %68, i16 %40), !insn.addr !2768
  %69 = icmp eq i1 %67, %66, !insn.addr !2769
  br i1 %69, label %dec_label_pc_10074cf, label %dec_label_pc_100751d, !insn.addr !2769

dec_label_pc_10074cf:                             ; preds = %dec_label_pc_100748d
  %70 = add i32 %54, 194, !insn.addr !2770
  %71 = and i32 %70, 255, !insn.addr !2770
  %72 = or i32 %71, %57, !insn.addr !2771
  %73 = inttoptr i32 %72 to i16*, !insn.addr !2772
  %74 = load i16, i16* %73, align 2, !insn.addr !2772
  %75 = trunc i32 %72 to i16, !insn.addr !2772
  call void @__asm_arpl(i16 %74, i16 %75), !insn.addr !2772
  %76 = mul i32 %72, 8, !insn.addr !2773
  %77 = add i32 %2, -23, !insn.addr !2774
  %78 = add i32 %77, %38, !insn.addr !2773
  %79 = add i32 %78, %76, !insn.addr !2773
  %80 = inttoptr i32 %79 to i32*, !insn.addr !2773
  %81 = load i32, i32* %80, align 4, !insn.addr !2773
  %82 = and i32 %72, -67, !insn.addr !2775
  %83 = inttoptr i32 %11 to i8*, !insn.addr !2776
  call void @__asm_rep_movsb_memcpy(i8* inttoptr (i32 1157713700 to i8*), i8* %83, i32 %82), !insn.addr !2776
  %84 = add i32 %81, -4, !insn.addr !2777
  %85 = inttoptr i32 %84 to i32*, !insn.addr !2777
  %86 = load i32, i32* %85, align 4, !insn.addr !2777
  %87 = add i32 %86, 4, !insn.addr !2778
  %88 = inttoptr i32 %87 to i32*, !insn.addr !2778
  %89 = load i32, i32* %88, align 4, !insn.addr !2778
  %90 = call i32 @function_1007bc1(i32 %89), !insn.addr !2779
  %91 = add i32 %81, -111, !insn.addr !2780
  %92 = inttoptr i32 %91 to i32*, !insn.addr !2780
  %93 = load i32, i32* %92, align 4, !insn.addr !2780
  ret i32 %93, !insn.addr !2781

dec_label_pc_100751d:                             ; preds = %dec_label_pc_100748d
  %94 = and i32 %55, 114, !insn.addr !2782
  %95 = or i32 %94, 141, !insn.addr !2782
  %96 = or i32 %95, %57, !insn.addr !2783
  %97 = inttoptr i32 %96 to i8*, !insn.addr !2784
  %98 = load i8, i8* %97, align 1, !insn.addr !2784
  %99 = trunc i32 %95 to i8, !insn.addr !2784
  %100 = add i8 %98, %99, !insn.addr !2784
  %101 = icmp ult i8 %100, %98, !insn.addr !2784
  store i8 %100, i8* %97, align 1, !insn.addr !2784
  %102 = zext i1 %101 to i32, !insn.addr !2785
  %103 = xor i32 %39, 128, !insn.addr !2785
  %104 = add i32 %103, %102, !insn.addr !2785
  %105 = and i32 %104, 255, !insn.addr !2785
  %106 = and i32 %39, -256, !insn.addr !2785
  %107 = or i32 %105, %106, !insn.addr !2785
  %108 = udiv i32 %2, 256, !insn.addr !2786
  %109 = trunc i32 %108 to i8, !insn.addr !2786
  %110 = trunc i32 %1 to i8, !insn.addr !2786
  %111 = sub i8 0, %110, !insn.addr !2786
  %112 = icmp eq i8 %109, %111, !insn.addr !2786
  %113 = inttoptr i32 %11 to i32*, !insn.addr !2787
  %114 = load i32, i32* %113, align 4, !insn.addr !2787
  store i32 %114, i32* inttoptr (i32 1157713700 to i32*), align 4, !insn.addr !2787
  %115 = add i32 %39, -125, !insn.addr !2788
  %116 = inttoptr i32 %115 to i32*, !insn.addr !2788
  %117 = load i32, i32* %116, align 4, !insn.addr !2788
  %118 = icmp ne i32 %39, 1, !insn.addr !2789
  %119 = icmp eq i1 %118, %112, !insn.addr !2789
  store i32 %107, i32* %merge.reg2mem, !insn.addr !2789
  br i1 %119, label %dec_label_pc_1007534, label %dec_label_pc_100763e, !insn.addr !2789

dec_label_pc_100763e:                             ; preds = %dec_label_pc_100751d, %dec_label_pc_10075be, %dec_label_pc_100753e
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !2790

dec_label_pc_1007534:                             ; preds = %dec_label_pc_100751d
  %120 = ptrtoint i32* %stack_var_-1 to i32, !insn.addr !2791
  %121 = icmp eq i1 %112, false, !insn.addr !2792
  br i1 %121, label %dec_label_pc_100753e, label %dec_label_pc_1007536, !insn.addr !2792

dec_label_pc_1007536:                             ; preds = %dec_label_pc_1007534
  %122 = add i32 %120, -4, !insn.addr !2793
  %123 = add i32 %38, -4, !insn.addr !2794
  %124 = inttoptr i32 %123 to i32*, !insn.addr !2794
  store i32 %122, i32* %124, align 4, !insn.addr !2794
  ret i32 %122, !insn.addr !2794

dec_label_pc_100753e:                             ; preds = %dec_label_pc_1007534
  %125 = udiv i32 %1, 128
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, -2, !insn.addr !2795
  %128 = icmp eq i8 %127, 0, !insn.addr !2795
  %129 = icmp eq i1 %128, false, !insn.addr !2796
  store i32 %107, i32* %merge.reg2mem, !insn.addr !2796
  br i1 %129, label %dec_label_pc_100763e, label %dec_label_pc_1007542, !insn.addr !2796

dec_label_pc_1007542:                             ; preds = %dec_label_pc_100753e
  %130 = zext i8 %127 to i32, !insn.addr !2795
  %131 = mul i32 %130, 2
  %132 = trunc i32 %131 to i8, !insn.addr !2797
  %133 = icmp eq i8 %132, 0, !insn.addr !2797
  %134 = icmp eq i1 %133, false, !insn.addr !2798
  br i1 %134, label %dec_label_pc_1007556, label %dec_label_pc_100754e, !insn.addr !2798

dec_label_pc_100754e:                             ; preds = %dec_label_pc_1007542
  %135 = call i32 @function_1007bd1(), !insn.addr !2799
  ret i32 %135, !insn.addr !2799

dec_label_pc_1007556:                             ; preds = %dec_label_pc_1007542
  %136 = load i32, i32* inttoptr (i32 4728040 to i32*), align 8, !insn.addr !2800
  %137 = icmp slt i8 %132, 0, !insn.addr !2797
  %138 = xor i32 %131, %125
  %139 = trunc i32 %138 to i8, !insn.addr !2797
  %140 = icmp slt i8 %139, 0, !insn.addr !2797
  %141 = add i32 %120, 8, !insn.addr !2801
  %142 = inttoptr i32 %141 to i32*, !insn.addr !2801
  store i32 %136, i32* %142, align 4, !insn.addr !2801
  %143 = inttoptr i32 %136 to i32*, !insn.addr !2802
  %144 = load i32, i32* %143, align 4, !insn.addr !2802
  %145 = add i32 %38, -4, !insn.addr !2802
  %146 = inttoptr i32 %145 to i32*, !insn.addr !2802
  store i32 %144, i32* %146, align 4, !insn.addr !2802
  %147 = icmp eq i1 %137, %140, !insn.addr !2803
  br i1 %147, label %dec_label_pc_10075be, label %dec_label_pc_1007562, !insn.addr !2803

dec_label_pc_1007562:                             ; preds = %dec_label_pc_1007556
  %148 = and i32 %1, -65281, !insn.addr !2795
  %149 = mul i32 %130, 512, !insn.addr !2797
  %150 = and i32 %149, 64512, !insn.addr !2797
  %151 = or i32 %150, %148, !insn.addr !2797
  %152 = add i32 %38, -6, !insn.addr !2804
  %153 = inttoptr i32 %152 to i16*, !insn.addr !2804
  store i16 %arg1, i16* %153, align 2, !insn.addr !2804
  %154 = inttoptr i32 %136 to i8*, !insn.addr !2805
  %155 = load i8, i8* %154, align 1, !insn.addr !2805
  %156 = trunc i32 %136 to i8, !insn.addr !2805
  %157 = add i8 %155, %156, !insn.addr !2805
  store i8 %157, i8* %154, align 1, !insn.addr !2805
  %158 = load i32, i32* %142, align 4, !insn.addr !2806
  %159 = xor i32 %158, %136, !insn.addr !2806
  %160 = icmp eq i32 %159, 0, !insn.addr !2806
  %161 = icmp slt i32 %159, 0, !insn.addr !2806
  %162 = trunc i32 %159 to i8, !insn.addr !2806
  %163 = call i8 @llvm.ctpop.i8(i8 %162), !range !258, !insn.addr !2806
  %164 = and i8 %163, 1, !insn.addr !2806
  %165 = icmp eq i8 %164, 0, !insn.addr !2806
  %166 = inttoptr i32 %159 to i32*, !insn.addr !2807
  store i32 %151, i32* %166, align 4, !insn.addr !2807
  %167 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !2808
  %168 = inttoptr i32 %167 to i32*, !insn.addr !2809
  %169 = load i32, i32* %168, align 4, !insn.addr !2809
  %170 = zext i1 %165 to i32, !insn.addr !2810
  %171 = zext i1 %160 to i32, !insn.addr !2810
  %172 = zext i1 %161 to i32, !insn.addr !2810
  %173 = mul i32 %170, 1024, !insn.addr !2810
  %174 = mul i32 %171, 16384, !insn.addr !2810
  %175 = mul i32 %172, 32768, !insn.addr !2810
  %176 = and i32 %169, -65281, !insn.addr !2810
  %177 = or i32 %175, %174, !insn.addr !2810
  %178 = or i32 %177, %176, !insn.addr !2810
  %179 = or i32 %178, %173, !insn.addr !2810
  %180 = or i32 %179, 512, !insn.addr !2810
  ret i32 %180, !insn.addr !2811

dec_label_pc_10075be:                             ; preds = %dec_label_pc_1007556
  %181 = call i32 @function_1007cba(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2812
  %182 = load i32, i32* inttoptr (i32 422081544 to i32*), align 8, !insn.addr !2813
  %183 = select i1 %3, i32 -5, i32 3, !insn.addr !2787
  %184 = add i32 %11, %183, !insn.addr !2814
  %185 = call i8 @__asm_in.3(i16 484), !insn.addr !2815
  %186 = sext i8 %185 to i32, !insn.addr !2815
  %187 = or i32 %182, %186, !insn.addr !2815
  %188 = inttoptr i32 %184 to i8*, !insn.addr !2816
  %189 = load i8, i8* %188, align 1, !insn.addr !2816
  %190 = udiv i32 %187, 256, !insn.addr !2816
  %191 = trunc i32 %190 to i8, !insn.addr !2816
  %192 = add i8 %189, %191, !insn.addr !2816
  store i8 %192, i8* %188, align 1, !insn.addr !2816
  %193 = inttoptr i32 %184 to i32*, !insn.addr !2817
  %194 = load i32, i32* %193, align 4, !insn.addr !2817
  %195 = inttoptr i32 %117 to i32*, !insn.addr !2817
  store i32 %194, i32* %195, align 4, !insn.addr !2817
  %196 = add i32 %38, 4, !insn.addr !2818
  %197 = add i32 %38, 16, !insn.addr !2818
  %198 = add i32 %38, 20, !insn.addr !2818
  %199 = load i32, i32* %146, align 4, !insn.addr !2818
  %200 = load i32, i32* %stack_var_7779, align 4, !insn.addr !2818
  %201 = inttoptr i32 %196 to i32*, !insn.addr !2818
  %202 = load i32, i32* %201, align 4, !insn.addr !2818
  %203 = inttoptr i32 %197 to i32*, !insn.addr !2818
  %204 = load i32, i32* %203, align 4, !insn.addr !2818
  %205 = inttoptr i32 %198 to i32*, !insn.addr !2818
  %206 = load i32, i32* %205, align 4, !insn.addr !2818
  %207 = add i32 %202, 8, !insn.addr !2819
  %208 = add i32 %38, 24, !insn.addr !2820
  %209 = inttoptr i32 %208 to i32*, !insn.addr !2820
  store i32 %207, i32* %209, align 4, !insn.addr !2820
  %210 = call i32 @function_100be9c(), !insn.addr !2821
  %211 = inttoptr i32 %207 to i32*, !insn.addr !2822
  %212 = load i32, i32* %211, align 4, !insn.addr !2822
  store i32 %212, i32* %205, align 4, !insn.addr !2822
  %213 = call i32 @function_100bd61(i32 ptrtoint (i32* @0 to i32)), !insn.addr !2823
  %214 = add i32 %200, -11468800, !insn.addr !2824
  %215 = inttoptr i32 %214 to i32*, !insn.addr !2824
  %216 = load i32, i32* %215, align 4, !insn.addr !2824
  %217 = call i32 @function_1007bd1(), !insn.addr !2825
  %218 = add i32 %202, -17, !insn.addr !2826
  %219 = inttoptr i32 %218 to i8*, !insn.addr !2826
  %220 = load i8, i8* %219, align 1, !insn.addr !2826
  %221 = trunc i32 %206 to i8, !insn.addr !2826
  %222 = add i8 %220, %221, !insn.addr !2826
  store i8 %222, i8* %219, align 1, !insn.addr !2826
  %223 = add i32 %38, -1560260469, !insn.addr !2827
  %224 = add i32 %223, %202, !insn.addr !2828
  %225 = call i32 @__readgsdword(i32 %206), !insn.addr !2829
  %226 = add i32 %225, %224, !insn.addr !2829
  %227 = icmp ult i32 %226, %225, !insn.addr !2829
  call void @__writegsdword(i32 %206, i32 %226), !insn.addr !2829
  %228 = inttoptr i32 %224 to i32*, !insn.addr !2830
  %229 = load i32, i32* %228, align 4, !insn.addr !2830
  store i32 %229, i32* %203, align 4, !insn.addr !2830
  %230 = call i32 @unknown_7b007bc1(), !insn.addr !2831
  %231 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !2832
  %232 = add i32 %38, 14, !insn.addr !2833
  %233 = inttoptr i32 %232 to i16*, !insn.addr !2833
  store i16 %arg1, i16* %233, align 2, !insn.addr !2833
  %234 = add i32 %206, ptrtoint (i8** @global_var_1014f84 to i32), !insn.addr !2834
  %235 = inttoptr i32 %234 to i8*, !insn.addr !2834
  %236 = load i8, i8* %235, align 1, !insn.addr !2834
  %237 = udiv i32 %231, 256, !insn.addr !2834
  %238 = trunc i32 %237 to i8, !insn.addr !2834
  %.neg = sext i1 %227 to i8
  %.neg3 = sub i8 %.neg, %238, !insn.addr !2834
  %239 = add i8 %.neg3, %236, !insn.addr !2834
  store i8 %239, i8* %235, align 1, !insn.addr !2834
  %240 = trunc i32 %204 to i16
  %241 = add i16 %240, -1, !insn.addr !2835
  %242 = trunc i32 %231 to i8, !insn.addr !2835
  call void @__asm_out(i16 %241, i8 %242), !insn.addr !2835
  %243 = udiv i32 %216, 256, !insn.addr !2836
  %244 = mul i32 %243, 2
  %245 = xor i32 %244, %243
  %246 = trunc i32 %245 to i8, !insn.addr !2836
  %247 = icmp slt i8 %246, 0, !insn.addr !2836
  store i32 %231, i32* %merge.reg2mem, !insn.addr !2837
  br i1 %247, label %dec_label_pc_1007642, label %dec_label_pc_100763e, !insn.addr !2837

dec_label_pc_1007642:                             ; preds = %dec_label_pc_10075be
  %248 = mul i32 %243, 512, !insn.addr !2836
  %249 = and i32 %248, 65024, !insn.addr !2836
  %250 = and i32 %216, -65281, !insn.addr !2836
  %251 = or i32 %249, %250, !insn.addr !2836
  %252 = add i32 %251, 956433677, !insn.addr !2838
  %253 = inttoptr i32 %252 to i8*, !insn.addr !2838
  %254 = load i8, i8* %253, align 1, !insn.addr !2838
  %255 = add i8 %254, %221, !insn.addr !2838
  store i8 %255, i8* %253, align 1, !insn.addr !2838
  %256 = add i32 %251, 1334092033, !insn.addr !2839
  %257 = inttoptr i32 %256 to i32*, !insn.addr !2839
  %258 = load i32, i32* %257, align 4, !insn.addr !2839
  %259 = add i32 %258, %206, !insn.addr !2839
  store i32 %259, i32* %257, align 4, !insn.addr !2839
  %260 = inttoptr i32 %206 to i32*, !insn.addr !2840
  %261 = load i32, i32* %260, align 4, !insn.addr !2840
  %262 = add i32 %261, %231, !insn.addr !2840
  store i32 %262, i32* %260, align 4, !insn.addr !2840
  %263 = inttoptr i32 %231 to i32*, !insn.addr !2841
  %264 = load i32, i32* %263, align 4, !insn.addr !2841
  %265 = inttoptr i32 %199 to i32*, !insn.addr !2841
  store i32 %264, i32* %265, align 4, !insn.addr !2841
  ret i32 %200, !insn.addr !2842
}

define i32 @function_1007673() local_unnamed_addr {
dec_label_pc_1007673:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = load i32, i32* inttoptr (i32 1996574596 to i32*), align 4, !insn.addr !2843
  %4 = trunc i32 %3 to i8, !insn.addr !2844
  %5 = add i8 %4, -1, !insn.addr !2844
  %6 = xor i8 %5, %4, !insn.addr !2844
  %7 = sub i8 0, %4, !insn.addr !2844
  %8 = and i8 %6, %7, !insn.addr !2844
  %9 = icmp slt i8 %8, 0, !insn.addr !2844
  %10 = zext i8 %5 to i32, !insn.addr !2844
  %11 = and i32 %3, -256, !insn.addr !2844
  %12 = or i32 %11, %10, !insn.addr !2844
  br i1 %9, label %dec_label_pc_1007695, label %dec_label_pc_1007691, !insn.addr !2845

dec_label_pc_1007691:                             ; preds = %dec_label_pc_1007673
  ret i32 %12, !insn.addr !2845

dec_label_pc_1007695:                             ; preds = %dec_label_pc_1007673
  %13 = inttoptr i32 %0 to i32*, !insn.addr !2846
  %14 = load i32, i32* inttoptr (i32 353389991 to i32*), align 4, !insn.addr !2847
  %15 = add i32 %14, 4, !insn.addr !2848
  %16 = inttoptr i32 %15 to i32*, !insn.addr !2848
  %17 = add i32 %1, -1, !insn.addr !2849
  %18 = add i32 %2, -2069822399, !insn.addr !2850
  %19 = inttoptr i32 %18 to i32*, !insn.addr !2850
  %20 = load i32, i32* %19, align 4, !insn.addr !2850
  %21 = add i32 %20, %2, !insn.addr !2850
  store i32 %21, i32* %19, align 4, !insn.addr !2850
  %22 = add i32 %2, 1, !insn.addr !2851
  %23 = add i32 %22, %12, !insn.addr !2852
  %24 = inttoptr i32 %2 to i32*, !insn.addr !2852
  store i32 %23, i32* %24, align 4, !insn.addr !2852
  %25 = call i32 @function_100776c(i32 %17, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !2853
  ret i32 %25, !insn.addr !2853
}

define i32 @function_10076a9() local_unnamed_addr {
dec_label_pc_10076a9:
  %0 = call i32 @function_3e4dfecb(), !insn.addr !2854
  ret i32 %0, !insn.addr !2854
}

define i32 @function_10076ae(i32 %arg1) local_unnamed_addr {
dec_label_pc_10076ae:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 83, !insn.addr !2855
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2855
  %5 = load i32, i32* %4, align 4, !insn.addr !2855
  %6 = add i32 %5, %0, !insn.addr !2855
  store i32 %6, i32* %4, align 4, !insn.addr !2855
  ret i32 %2, !insn.addr !2856
}

define i32 @function_10076b8() local_unnamed_addr {
dec_label_pc_10076b8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = trunc i32 %3 to i16, !insn.addr !2857
  call void @__asm_outsd(i16 %6, i32 %1), !insn.addr !2857
  %7 = trunc i32 %5 to i8
  %8 = mul i8 %7, 2, !insn.addr !2858
  %9 = inttoptr i32 %5 to i8*, !insn.addr !2858
  store i8 %8, i8* %9, align 1, !insn.addr !2858
  %10 = add i32 %2, 30, !insn.addr !2859
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2859
  %12 = load i32, i32* %11, align 4, !insn.addr !2859
  %13 = add i32 %1, -4, !insn.addr !2859
  %14 = inttoptr i32 %13 to i32*, !insn.addr !2859
  store i32 %12, i32* %14, align 4, !insn.addr !2859
  %15 = add i32 %2, 9, !insn.addr !2860
  %16 = add i32 %1, -8, !insn.addr !2861
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2861
  store i32 %15, i32* %17, align 4, !insn.addr !2861
  %18 = call i32 @unknown_15ebd6f(), !insn.addr !2862
  %19 = load i32, i32* @global_var_1014f90, align 4, !insn.addr !2863
  %20 = add i32 %1, -12, !insn.addr !2863
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2863
  store i32 %19, i32* %21, align 4, !insn.addr !2863
  %22 = add i32 %1, -16, !insn.addr !2864
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2864
  store i32 %15, i32* %23, align 4, !insn.addr !2864
  %24 = add i32 %1, -20, !insn.addr !2865
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2865
  store i32 %22, i32* %25, align 4, !insn.addr !2865
  %26 = add i32 %0, -108, !insn.addr !2866
  %27 = inttoptr i32 %26 to i32*, !insn.addr !2866
  %28 = load i32, i32* %27, align 4, !insn.addr !2866
  %29 = mul i32 %28, -1959395584, !insn.addr !2866
  %30 = add i32 %3, 322536, !insn.addr !2867
  %31 = inttoptr i32 %30 to i32*, !insn.addr !2867
  %32 = load i32, i32* %31, align 4, !insn.addr !2867
  %33 = add i32 %32, %2, !insn.addr !2867
  store i32 %33, i32* %31, align 4, !insn.addr !2867
  %34 = inttoptr i32 %29 to i8*, !insn.addr !2868
  %35 = load i8, i8* %34, align 256, !insn.addr !2868
  %36 = trunc i32 %4 to i8, !insn.addr !2868
  %37 = add i8 %35, %36, !insn.addr !2868
  %38 = icmp ult i8 %37, %35, !insn.addr !2868
  store i8 %37, i8* %34, align 256, !insn.addr !2868
  %39 = select i1 %38, i32 16904849, i32 16904848, !insn.addr !2869
  %40 = icmp ult i32 %29, %39, !insn.addr !2869
  %41 = or i1 %38, %40, !insn.addr !2869
  %42 = call i32 @function_1007c26(), !insn.addr !2870
  %43 = add i32 %42, -16711347, !insn.addr !2871
  %44 = inttoptr i32 %43 to i32*, !insn.addr !2871
  %45 = load i32, i32* %44, align 4, !insn.addr !2871
  %46 = zext i1 %41 to i32, !insn.addr !2871
  %47 = add i32 %45, 79967280, !insn.addr !2871
  %48 = add i32 %47, %46, !insn.addr !2871
  store i32 %48, i32* %44, align 4, !insn.addr !2871
  %49 = call i32 @function_14d90a1(), !insn.addr !2872
  ret i32 %49, !insn.addr !2872
}

define i32 @function_1007703() local_unnamed_addr {
dec_label_pc_1007703:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i16, !insn.addr !2873
  %2 = call i32 @__asm_in.5(i16 %1), !insn.addr !2873
  %3 = call i32 @function_8b00004e(), !insn.addr !2874
  ret i32 %3, !insn.addr !2874
}

define i32 @function_1007714(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007714:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, %1, !insn.addr !2875
  %4 = inttoptr i32 %1 to i32*, !insn.addr !2875
  store i32 %3, i32* %4, align 4, !insn.addr !2875
  %5 = mul i32 %0, 9, !insn.addr !2876
  %6 = add i32 %5, 46, !insn.addr !2876
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2876
  ret i32 %2, !insn.addr !2877
}

define i32 @function_100771e() local_unnamed_addr {
dec_label_pc_100771e:
  %0 = call i32 @function_1007736(), !insn.addr !2878
  ret i32 %0, !insn.addr !2878
}

define i32 @function_100772a() local_unnamed_addr {
dec_label_pc_100772a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = mul i32 %2, 2, !insn.addr !2879
  %4 = udiv i32 %2, 64
  %5 = and i32 %4, 33554431, !insn.addr !2880
  %6 = inttoptr i32 %1 to i8*, !insn.addr !2881
  %7 = inttoptr i32 %0 to i8*, !insn.addr !2881
  call void @__asm_rep_movsd_memcpy(i8* %7, i8* %6, i32 %5), !insn.addr !2881
  ret i32 %3, !insn.addr !2881
}

define i32 @function_1007736() local_unnamed_addr {
dec_label_pc_1007736:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %2, 3, !insn.addr !2882
  %4 = inttoptr i32 %1 to i8*, !insn.addr !2883
  %5 = inttoptr i32 %0 to i8*, !insn.addr !2883
  call void @__asm_rep_movsb_memcpy(i8* %5, i8* %4, i32 %3), !insn.addr !2883
  %6 = load i32, i32* @global_var_1014d90, align 4, !insn.addr !2884
  %7 = add i32 %6, 4, !insn.addr !2885
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2885
  %9 = load i32, i32* %8, align 4, !insn.addr !2885
  %10 = call i32 @function_1007bc1(i32 %9), !insn.addr !2886
  %11 = load i32, i32* inttoptr (i32 771837328 to i32*), align 16, !insn.addr !2887
  %12 = add i32 %11, 4, !insn.addr !2888
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2888
  %14 = call i32 @unknown_579765f(), !insn.addr !2889
  %15 = call i32 @unknown_3d007bfb(), !insn.addr !2890
  store i32 %15, i32* inttoptr (i32 -4860637 to i32*), align 4, !insn.addr !2891
  ret i32 %15, !insn.addr !2891
}

define i32 @function_100776c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100776c:
  %0 = and i32 %arg7, -256, !insn.addr !2892
  %1 = trunc i32 %arg7 to i8
  %2 = add i8 %1, 13, !insn.addr !2893
  %3 = icmp slt i8 %2, 0, !insn.addr !2893
  %4 = zext i8 %2 to i32, !insn.addr !2893
  %5 = or i32 %0, %4, !insn.addr !2893
  br i1 %3, label %dec_label_pc_10077c2, label %dec_label_pc_1007775, !insn.addr !2894

dec_label_pc_1007775:                             ; preds = %dec_label_pc_100776c
  %6 = add i32 %arg2, -1, !insn.addr !2895
  %7 = inttoptr i32 %arg1 to i32*, !insn.addr !2896
  store i32 %5, i32* %7, align 4, !insn.addr !2896
  %8 = add i32 %arg4, 210581624, !insn.addr !2897
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2897
  %10 = load i32, i32* %9, align 4, !insn.addr !2897
  %11 = add i32 %10, %arg6, !insn.addr !2897
  store i32 %11, i32* %9, align 4, !insn.addr !2897
  %12 = inttoptr i32 %5 to i8*, !insn.addr !2898
  %13 = load i8, i8* %12, align 1, !insn.addr !2898
  %14 = add i8 %13, %2, !insn.addr !2898
  store i8 %14, i8* %12, align 1, !insn.addr !2898
  %15 = trunc i32 %arg5 to i16, !insn.addr !2899
  %16 = inttoptr i32 %6 to i32*, !insn.addr !2899
  %17 = load i32, i32* %16, align 4, !insn.addr !2899
  call void @__asm_outsd(i16 %15, i32 %17), !insn.addr !2899
  %18 = call i32 @function_8ca66a8b(), !insn.addr !2900
  ret i32 %18, !insn.addr !2900

dec_label_pc_10077c2:                             ; preds = %dec_label_pc_100776c
  %19 = inttoptr i32 %5 to i32*, !insn.addr !2901
  %20 = load i32, i32* %19, align 4, !insn.addr !2901
  %21 = add i32 %20, %arg5, !insn.addr !2901
  store i32 %21, i32* %19, align 4, !insn.addr !2901
  store i32 %5, i32* inttoptr (i32 16858392 to i32*), align 8, !insn.addr !2902
  %22 = and i32 %arg4, 65280
  %23 = and i32 %22, %arg5, !insn.addr !2903
  %24 = and i32 %arg4, -65281, !insn.addr !2903
  %25 = or i32 %23, %24, !insn.addr !2903
  %26 = add i32 %arg2, 21860380, !insn.addr !2904
  %27 = inttoptr i32 %26 to i8*, !insn.addr !2904
  %28 = load i8, i8* %27, align 1, !insn.addr !2904
  %29 = trunc i32 %arg6 to i8, !insn.addr !2904
  %30 = add i8 %28, %29, !insn.addr !2904
  store i8 %30, i8* %27, align 1, !insn.addr !2904
  %31 = and i32 %arg6, 31, !insn.addr !2905
  %32 = icmp eq i32 %31, 0, !insn.addr !2905
  br i1 %32, label %.thread, label %33, !insn.addr !2905

; <label>:33:                                     ; preds = %dec_label_pc_10077c2
  %34 = add i32 %arg3, -1, !insn.addr !2906
  %35 = shl i32 %34, %31, !insn.addr !2905
  %36 = sub nsw i32 32, %31, !insn.addr !2905
  %37 = lshr i32 %34, %36, !insn.addr !2905
  %38 = or i32 %37, %35, !insn.addr !2905
  %39 = and i32 %38, 1, !insn.addr !2905
  %40 = icmp ne i32 %39, 0, !insn.addr !2905
  %phitmp = zext i1 %40 to i32
  %41 = add i32 %25, 812384513, !insn.addr !2907
  %42 = inttoptr i32 %41 to i32*, !insn.addr !2907
  %43 = load i32, i32* %42, align 4, !insn.addr !2907
  %44 = shl i32 %43, %31, !insn.addr !2907
  %45 = zext i32 %43 to i64, !insn.addr !2907
  %46 = sub nsw i32 33, %31, !insn.addr !2907
  %47 = zext i32 %46 to i64, !insn.addr !2907
  %48 = lshr i64 %45, %47, !insn.addr !2907
  %49 = add nsw i32 %31, -1, !insn.addr !2907
  %50 = shl i32 %phitmp, %49, !insn.addr !2907
  %51 = trunc i64 %48 to i32
  %52 = or i32 %44, %50
  %53 = or i32 %52, %51, !insn.addr !2907
  store i32 %53, i32* %42, align 4, !insn.addr !2907
  br label %.thread, !insn.addr !2907

.thread:                                          ; preds = %dec_label_pc_10077c2, %33
  %54 = call i32 @unknown_10152c1(), !insn.addr !2908
  %55 = load i32, i32* inttoptr (i32 18165392 to i32*), align 16, !insn.addr !2909
  %56 = inttoptr i32 %55 to i32*, !insn.addr !2910
  store i32 %25, i32* %56, align 4, !insn.addr !2910
  %57 = load i32, i32* @global_var_1014fa7, align 4, !insn.addr !2911
  %58 = inttoptr i32 %57 to i32*, !insn.addr !2912
  %59 = load i32, i32* %58, align 4, !insn.addr !2912
  %60 = add i32 %59, 4, !insn.addr !2913
  %61 = inttoptr i32 %60 to i32*, !insn.addr !2913
  %62 = load i32, i32* %61, align 4, !insn.addr !2913
  %63 = call i32 @function_10110fb(i32 %62), !insn.addr !2914
  %64 = load i32, i32* @global_var_1014dfc, align 4, !insn.addr !2915
  %65 = inttoptr i32 %64 to i32*, !insn.addr !2916
  store i32 %63, i32* %65, align 4, !insn.addr !2916
  %66 = load i32, i32* inttoptr (i32 25513860 to i32*), align 4, !insn.addr !2917
  %67 = inttoptr i32 %66 to i32*, !insn.addr !2918
  %68 = load i32, i32* %67, align 4, !insn.addr !2918
  %69 = inttoptr i32 %68 to i8*, !insn.addr !2919
  %70 = load i8, i8* %69, align 1, !insn.addr !2919
  %71 = trunc i32 %68 to i8, !insn.addr !2919
  %72 = add i8 %70, %71, !insn.addr !2919
  store i8 %72, i8* %69, align 1, !insn.addr !2919
  %73 = call i32 @function_3ea39e1(), !insn.addr !2920
  ret i32 %73, !insn.addr !2920
}

define i32 @function_100782a(i32 %arg1) local_unnamed_addr {
dec_label_pc_100782a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8, !insn.addr !2921
  %4 = and i8 %3, 31, !insn.addr !2921
  %5 = icmp eq i8 %4, 0, !insn.addr !2921
  br i1 %5, label %14, label %6, !insn.addr !2921

; <label>:6:                                      ; preds = %dec_label_pc_100782a
  %7 = add i32 %0, 1, !insn.addr !2921
  %8 = inttoptr i32 %7 to i8*, !insn.addr !2921
  %9 = load i8, i8* %8, align 1, !insn.addr !2921
  %10 = lshr i8 %9, %4, !insn.addr !2921
  %11 = sub nsw i8 8, %4, !insn.addr !2921
  %12 = shl i8 %9, %11, !insn.addr !2921
  %13 = or i8 %10, %12, !insn.addr !2921
  store i8 %13, i8* %8, align 1, !insn.addr !2921
  br label %14, !insn.addr !2921

; <label>:14:                                     ; preds = %dec_label_pc_100782a, %6
  ret i32 %2, !insn.addr !2922
}

define i32 @function_1007848(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007848:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2923
}

define i32 @function_1007874() local_unnamed_addr {
dec_label_pc_1007874:
  %0 = call i32 @function_8caa6b7b(), !insn.addr !2924
  ret i32 %0, !insn.addr !2924
}

define i32 @function_1007883() local_unnamed_addr {
dec_label_pc_10078d9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %4 = add i32 %2, -1, !insn.addr !2925
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2925
  %6 = load i32, i32* %5, align 4, !insn.addr !2925
  %7 = add i32 %6, %2, !insn.addr !2925
  store i32 %7, i32* %5, align 4, !insn.addr !2925
  %8 = add i32 %1, -12, !insn.addr !2926
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2926
  %10 = load i32, i32* %ecx, align 4, !insn.addr !2927
  %11 = udiv i32 %10, 256, !insn.addr !2927
  %12 = add i32 %11, %2, !insn.addr !2927
  %13 = and i32 %12, 255, !insn.addr !2927
  %14 = and i32 %2, -256, !insn.addr !2927
  %15 = or i32 %13, %14, !insn.addr !2927
  %16 = add i32 %1, -4, !insn.addr !2928
  %17 = inttoptr i32 %16 to i32*, !insn.addr !2928
  %18 = load i32, i32* %17, align 4, !insn.addr !2928
  %19 = call i32 @function_1007c2b(i32 %18, i32 108174), !insn.addr !2929
  %20 = call i32 @__asm_sti(), !insn.addr !2930
  %21 = inttoptr i32 %3 to i32*, !insn.addr !2931
  store i32 0, i32* %21, align 4, !insn.addr !2931
  %22 = trunc i32 %20 to i16, !insn.addr !2932
  %23 = and i16 %22, 255, !insn.addr !2932
  %24 = udiv i16 %22, %23, !insn.addr !2932
  %25 = and i32 %20, -65536, !insn.addr !2932
  %26 = urem i16 %22, %23, !insn.addr !2932
  %27 = mul i16 %26, 256
  %28 = zext i16 %27 to i32, !insn.addr !2932
  %29 = or i32 %25, %28, !insn.addr !2932
  %30 = trunc i16 %24 to i8, !insn.addr !2933
  %31 = inttoptr i32 %15 to i8*, !insn.addr !2933
  %32 = load i8, i8* %31, align 1, !insn.addr !2933
  %33 = add i8 %32, %30, !insn.addr !2933
  %34 = zext i8 %33 to i32, !insn.addr !2933
  %35 = or i32 %29, %34, !insn.addr !2933
  %36 = add i32 %0, 413212297, !insn.addr !2934
  %37 = inttoptr i32 %36 to i8*, !insn.addr !2934
  %38 = load i8, i8* %37, align 1, !insn.addr !2934
  %39 = trunc i16 %26 to i8, !insn.addr !2934
  %40 = add i8 %38, %39, !insn.addr !2934
  store i8 %40, i8* %37, align 1, !insn.addr !2934
  %41 = add i32 %1, -1, !insn.addr !2935
  %42 = bitcast i32* %ecx to i8*
  %43 = load i8, i8* %42, align 4, !insn.addr !2936
  %44 = xor i8 %43, %33, !insn.addr !2936
  %45 = load i32, i32* %ecx, align 4, !insn.addr !2936
  %46 = inttoptr i32 %45 to i8*, !insn.addr !2936
  store i8 %44, i8* %46, align 1, !insn.addr !2936
  %47 = mul i32 %41, 4, !insn.addr !2937
  %48 = add i32 %35, %47, !insn.addr !2937
  %49 = inttoptr i32 %48 to i32*, !insn.addr !2937
  %50 = load i32, i32* %49, align 4, !insn.addr !2937
  %51 = inttoptr i32 %50 to i32*, !insn.addr !2938
  %52 = load i32, i32* %51, align 4, !insn.addr !2938
  %53 = add i32 %52, 4, !insn.addr !2939
  %54 = inttoptr i32 %53 to i32*, !insn.addr !2939
  %55 = load i32, i32* %54, align 4, !insn.addr !2939
  %56 = inttoptr i32 %52 to i8*, !insn.addr !2940
  %57 = load i8, i8* %56, align 1, !insn.addr !2940
  %58 = udiv i32 %2, 256, !insn.addr !2940
  %59 = trunc i32 %58 to i8, !insn.addr !2940
  %60 = and i8 %57, %59, !insn.addr !2940
  store i8 %60, i8* %56, align 1, !insn.addr !2940
  %61 = inttoptr i32 %52 to i32*, !insn.addr !2941
  %62 = load i32, i32* %61, align 4, !insn.addr !2941
  %63 = sub i32 0, %52
  %64 = sub i32 %63, 1
  %65 = icmp ugt i32 %62, %64, !insn.addr !2941
  %66 = call i32 @unknown_e8b9150(i32 %55, i32 %0), !insn.addr !2942
  %67 = inttoptr i32 %1 to i8*, !insn.addr !2943
  %68 = load i8, i8* %67, align 1, !insn.addr !2943
  %69 = load i32, i32* %ecx, align 4, !insn.addr !2943
  %70 = trunc i32 %69 to i8, !insn.addr !2943
  %.neg = sext i1 %65 to i8
  %.neg2 = add i8 %68, %.neg, !insn.addr !2943
  %71 = sub i8 %.neg2, %70, !insn.addr !2943
  store i8 %71, i8* %67, align 1, !insn.addr !2943
  %72 = mul i32 %0, 8, !insn.addr !2944
  %73 = add i32 %0, 385125369, !insn.addr !2944
  %74 = add i32 %73, %72, !insn.addr !2944
  %75 = inttoptr i32 %74 to i32*, !insn.addr !2944
  %76 = load i32, i32* %75, align 4, !insn.addr !2944
  %77 = add i32 %76, %66, !insn.addr !2944
  store i32 %77, i32* %75, align 4, !insn.addr !2944
  %78 = add i32 %0, -1, !insn.addr !2945
  %79 = add i32 %66, 13, !insn.addr !2946
  %80 = and i32 %66, -256, !insn.addr !2946
  %81 = and i32 %79, 114, !insn.addr !2947
  %82 = or i32 %80, %81, !insn.addr !2947
  %83 = or i32 %82, 141, !insn.addr !2948
  %84 = add i32 %15, -1044476936, !insn.addr !2949
  %85 = inttoptr i32 %84 to i8*, !insn.addr !2949
  %86 = load i8, i8* %85, align 1, !insn.addr !2949
  %87 = load i32, i32* %ecx, align 4, !insn.addr !2949
  %88 = trunc i32 %87 to i8, !insn.addr !2949
  %89 = add i8 %86, %88, !insn.addr !2949
  store i8 %89, i8* %85, align 1, !insn.addr !2949
  %90 = inttoptr i32 %78 to i32*, !insn.addr !2950
  %91 = load i32, i32* %90, align 4, !insn.addr !2950
  %92 = inttoptr i32 %41 to i32*, !insn.addr !2950
  store i32 %91, i32* %92, align 4, !insn.addr !2950
  %93 = add nsw i32 %83, -1, !insn.addr !2951
  %94 = add i32 %0, 3, !insn.addr !2950
  %95 = add i32 %1, 3, !insn.addr !2950
  %96 = inttoptr i32 %94 to i8*, !insn.addr !2952
  %97 = inttoptr i32 %95 to i8*, !insn.addr !2952
  call void @__asm_rep_movsb_memcpy(i8* %97, i8* %96, i32 %93), !insn.addr !2952
  ret i32 %83, !insn.addr !2952
}

define i32 @function_10079fd() local_unnamed_addr {
dec_label_pc_10079fd:
  %eax.0.reg2mem = alloca i32, !insn.addr !2953
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  br i1 %1, label %2, label %dec_label_pc_1007a07, !insn.addr !2954

; <label>:2:                                      ; preds = %dec_label_pc_10079fd
  %3 = call i32 @function_1007a51(), !insn.addr !2954
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !2954
  br label %dec_label_pc_1007a07, !insn.addr !2954

dec_label_pc_1007a07:                             ; preds = %2, %dec_label_pc_10079fd
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %4 = inttoptr i32 %0 to i32*, !insn.addr !2955
  store i32 %eax.0.reload, i32* %4, align 4, !insn.addr !2955
  ret i32 %eax.0.reload, !insn.addr !2956
}

define i32 @function_1007a0a() local_unnamed_addr {
dec_label_pc_1007a0a:
  %eax.0.reg2mem = alloca i32, !insn.addr !2957
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -12, !insn.addr !2957
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2957
  %5 = load i32, i32* %4, align 4, !insn.addr !2957
  %6 = add i32 %5, 1, !insn.addr !2957
  store i32 %6, i32* %4, align 4, !insn.addr !2957
  %7 = load i32, i32* inttoptr (i32 -603893980 to i32*), align 4, !insn.addr !2958
  %8 = add i32 %0, 97, !insn.addr !2959
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2959
  %10 = load i32, i32* %9, align 4, !insn.addr !2959
  %11 = icmp slt i32 %10, %7, !insn.addr !2960
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !2960
  br i1 %11, label %12, label %dec_label_pc_1007a1b, !insn.addr !2960

; <label>:12:                                     ; preds = %dec_label_pc_1007a0a
  %13 = call i32 @function_d4ff9a2a(), !insn.addr !2960
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !2960
  br label %dec_label_pc_1007a1b, !insn.addr !2960

dec_label_pc_1007a1b:                             ; preds = %12, %dec_label_pc_1007a0a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %14 = and i32 %eax.0.reload, 1970669693, !insn.addr !2961
  %15 = add i32 %1, -24, !insn.addr !2962
  %16 = inttoptr i32 %15 to i8*, !insn.addr !2962
  %17 = load i8, i8* %16, align 1, !insn.addr !2962
  %18 = trunc i32 %2 to i8, !insn.addr !2962
  %19 = or i8 %17, %18, !insn.addr !2962
  store i8 %19, i8* %16, align 1, !insn.addr !2962
  ret i32 %14, !insn.addr !2963
}

define i32 @function_1007a2e() local_unnamed_addr {
dec_label_pc_1007a2e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !2964
}

define i32 @function_1007a51() local_unnamed_addr {
dec_label_pc_1007a51:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %2, -256, !insn.addr !2965
  %4 = or i32 %3, 136, !insn.addr !2965
  %5 = inttoptr i32 %4 to i8*, !insn.addr !2966
  %6 = load i8, i8* %5, align 8, !insn.addr !2966
  %7 = add i8 %6, -120, !insn.addr !2966
  store i8 %7, i8* %5, align 8, !insn.addr !2966
  %8 = add i32 %1, -687931135, !insn.addr !2967
  %9 = inttoptr i32 %8 to i8*, !insn.addr !2967
  %10 = load i8, i8* %9, align 1, !insn.addr !2967
  %11 = trunc i32 %0 to i8, !insn.addr !2967
  %12 = and i8 %10, %11, !insn.addr !2967
  store i8 %12, i8* %9, align 1, !insn.addr !2967
  ret i32 %4, !insn.addr !2968
}

define i32 @function_1007a63() local_unnamed_addr {
dec_label_pc_1007a63:
  %0 = call i32 @function_c3c9d5c6(), !insn.addr !2969
  ret i32 %0, !insn.addr !2969
}

define i32 @function_1007a68() local_unnamed_addr {
dec_label_pc_1007a68:
  %.reg2mem4 = alloca i32, !insn.addr !2970
  %.reg2mem = alloca i8, !insn.addr !2970
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = load i8, i8* inttoptr (i32 1477763149 to i8*), align 1, !insn.addr !2971
  %5 = trunc i32 %2 to i8, !insn.addr !2971
  %6 = and i8 %4, %5, !insn.addr !2971
  store i8 %6, i8* inttoptr (i32 1477763149 to i8*), align 1, !insn.addr !2971
  call void @__asm_int.7(i16 17), !insn.addr !2972
  %7 = add i32 %2, -123, !insn.addr !2973
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2973
  %9 = load i32, i32* %8, align 4, !insn.addr !2973
  %10 = or i32 %9, %3, !insn.addr !2973
  store i32 %10, i32* %8, align 4, !insn.addr !2973
  %11 = add i32 %2, -2, !insn.addr !2974
  %12 = icmp ult i32 %11, %0, !insn.addr !2975
  %13 = icmp eq i1 %12, false, !insn.addr !2976
  br i1 %13, label %dec_label_pc_1007a93.lr.ph, label %dec_label_pc_1007aa4, !insn.addr !2976

dec_label_pc_1007a93.lr.ph:                       ; preds = %dec_label_pc_1007a68
  %14 = icmp ult i32 %3, -1982197365, !insn.addr !2977
  %15 = add i32 %3, 80, !insn.addr !2978
  %16 = inttoptr i32 %15 to i8*, !insn.addr !2978
  %17 = trunc i32 %3 to i8, !insn.addr !2978
  %18 = zext i1 %14 to i8, !insn.addr !2978
  %19 = add i8 %18, %17, !insn.addr !2978
  %.promoted = load i8, i8* %16, align 1
  store i8 %.promoted, i8* %.reg2mem
  store i32 %11, i32* %.reg2mem4
  br label %dec_label_pc_1007a93

dec_label_pc_1007a93:                             ; preds = %dec_label_pc_1007a93.lr.ph, %dec_label_pc_1007a93
  %.reload5 = load i32, i32* %.reg2mem4
  %.reload = load i8, i8* %.reg2mem
  %20 = add i8 %19, %.reload, !insn.addr !2978
  %21 = add i32 %.reload5, -2, !insn.addr !2974
  %22 = icmp ult i32 %21, %0, !insn.addr !2975
  %23 = icmp eq i1 %22, false, !insn.addr !2976
  store i8 %20, i8* %.reg2mem, !insn.addr !2976
  store i32 %21, i32* %.reg2mem4, !insn.addr !2976
  br i1 %23, label %dec_label_pc_1007a93, label %dec_label_pc_1007a9b.dec_label_pc_1007aa4_crit_edge, !insn.addr !2976

dec_label_pc_1007a9b.dec_label_pc_1007aa4_crit_edge: ; preds = %dec_label_pc_1007a93
  store i8 %20, i8* %16, align 1
  br label %dec_label_pc_1007aa4

dec_label_pc_1007aa4:                             ; preds = %dec_label_pc_1007a9b.dec_label_pc_1007aa4_crit_edge, %dec_label_pc_1007a68
  %24 = add i32 %1, 1, !insn.addr !2979
  %25 = inttoptr i32 %0 to i32*, !insn.addr !2979
  store i32 %24, i32* %25, align 4, !insn.addr !2979
  %26 = add i32 %3, 12, !insn.addr !2980
  %27 = inttoptr i32 %26 to i32*, !insn.addr !2980
  %28 = load i32, i32* %27, align 4, !insn.addr !2980
  ret i32 %28, !insn.addr !2981
}

define i32 @function_1007aaf(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007aaf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i32**, !insn.addr !2982
  %2 = call i32 @RegOpenKeyExA(i32* inttoptr (i32 -2147483602 to i32*), i8* inttoptr (i32 -285207136 to i8*), i32 0, i32 -2046689255, i32** %1), !insn.addr !2983
  ret i32 %2, !insn.addr !2984
}

define i32 @function_1007ac8() local_unnamed_addr {
dec_label_pc_1007ac8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007b03() local_unnamed_addr {
dec_label_pc_1007b03:
  %0 = call i32 @function_1007b09(), !insn.addr !2985
  ret i32 %0, !insn.addr !2985
}

define i32 @function_1007b07() local_unnamed_addr {
dec_label_pc_1007b07:
  ret i32 0, !insn.addr !2986
}

define i32 @function_1007b09() local_unnamed_addr {
dec_label_pc_1007b09:
  %0 = call i32 @function_1053dd7(), !insn.addr !2987
  ret i32 %0, !insn.addr !2987
}

define i32 @function_1007b0e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1007b0e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %4 = add i32 %1, 82600940, !insn.addr !2988
  %5 = inttoptr i32 %4 to i16*, !insn.addr !2988
  %6 = load i16, i16* %5, align 2, !insn.addr !2988
  %7 = trunc i32 %2 to i16, !insn.addr !2988
  call void @__asm_arpl(i16 %6, i16 %7), !insn.addr !2988
  %8 = trunc i32 %3 to i8
  %9 = mul i8 %8, 2, !insn.addr !2989
  %10 = inttoptr i32 %3 to i8*, !insn.addr !2989
  store i8 %9, i8* %10, align 1, !insn.addr !2989
  %11 = load i32, i32* @global_var_1014f30, align 4, !insn.addr !2990
  %12 = load i32, i32* @global_var_1014f28, align 4, !insn.addr !2991
  %13 = icmp eq i32 %12, %11, !insn.addr !2991
  %14 = icmp eq i1 %13, false, !insn.addr !2992
  br i1 %14, label %dec_label_pc_1007b41, label %dec_label_pc_1007b2a, !insn.addr !2992

dec_label_pc_1007b2a:                             ; preds = %dec_label_pc_1007b0e
  %15 = call i32 @function_1007aaf(i32 %0), !insn.addr !2993
  ret i32 %15, !insn.addr !2994

dec_label_pc_1007b41:                             ; preds = %dec_label_pc_1007b0e
  %16 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2995
  ret i32 %16, !insn.addr !2996
}

define i32 @function_1007b4d(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007b4d:
  %eax.1.reg2mem = alloca i32, !insn.addr !2997
  %eax.0.reg2mem = alloca i32, !insn.addr !2997
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i16, !insn.addr !2998
  %3 = call i8 @__asm_in.3(i16 %2), !insn.addr !2998
  %4 = load i8*, i8** @global_var_1014f38, align 4, !insn.addr !2999
  %5 = ptrtoint i8* %4 to i32, !insn.addr !2999
  %6 = icmp eq i8* %4, null, !insn.addr !3000
  %7 = icmp eq i1 %6, false, !insn.addr !3001
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !3001
  br i1 %7, label %8, label %dec_label_pc_1007b74, !insn.addr !3001

; <label>:8:                                      ; preds = %dec_label_pc_1007b4d
  %9 = call i32 @function_1007b94(), !insn.addr !3001
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !3001
  br label %dec_label_pc_1007b74, !insn.addr !3001

dec_label_pc_1007b74:                             ; preds = %8, %dec_label_pc_1007b4d
  %10 = trunc i32 %5 to i8, !insn.addr !3000
  %11 = call i8 @llvm.ctpop.i8(i8 %10), !range !258, !insn.addr !3000
  %12 = and i8 %11, 1, !insn.addr !3000
  %13 = icmp eq i8 %12, 0, !insn.addr !3000
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %14 = add i32 %0, -384816938, !insn.addr !3002
  %15 = inttoptr i32 %14 to i128*, !insn.addr !3002
  %16 = load i128, i128* %15, align 4, !insn.addr !3002
  %17 = call i128 @__asm_sqrtps(i128 %16), !insn.addr !3002
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !3003
  br i1 %13, label %18, label %dec_label_pc_1007b86, !insn.addr !3003

; <label>:18:                                     ; preds = %dec_label_pc_1007b74
  %19 = call i32 @function_1007b03(), !insn.addr !3003
  store i32 %19, i32* %eax.1.reg2mem, !insn.addr !3003
  br label %dec_label_pc_1007b86, !insn.addr !3003

dec_label_pc_1007b86:                             ; preds = %dec_label_pc_1007b74, %18
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !3004
}

define i32 @function_1007b87() local_unnamed_addr {
dec_label_pc_1007b87:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, ptrtoint (i32* @global_var_1014f28 to i32), !insn.addr !3005
  ret i32 %1, !insn.addr !3005
}

define i32 @function_1007b8d() local_unnamed_addr {
dec_label_pc_1007b8d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3006
}

define i32 @function_1007b91(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007b91:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007b94() local_unnamed_addr {
dec_label_pc_1007b94:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007b96() local_unnamed_addr {
dec_label_pc_1007b96:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = zext i1 %2 to i32, !insn.addr !3007
  %4 = add i32 %1, 255, !insn.addr !3007
  %5 = add i32 %4, %3, !insn.addr !3007
  %6 = and i32 %5, 255, !insn.addr !3007
  %7 = and i32 %1, -256, !insn.addr !3007
  %8 = or i32 %6, %7, !insn.addr !3007
  %9 = add i32 %0, -55, !insn.addr !3008
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3008
  %11 = load i8, i8* %10, align 1, !insn.addr !3008
  %12 = udiv i8 %11, 2, !insn.addr !3008
  store i8 %12, i8* %10, align 1, !insn.addr !3008
  ret i32 %8, !insn.addr !3009
}

define i32 @function_1007ba3() local_unnamed_addr {
dec_label_pc_1007ba3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007ba4() local_unnamed_addr {
dec_label_pc_1007ba4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007ba5() local_unnamed_addr {
dec_label_pc_1007ba5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007ba8(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007ba8:
  %eax.0.reg2mem = alloca i32, !insn.addr !3010
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = icmp ne i1 %1, %0, !insn.addr !3010
  %4 = or i1 %2, %3, !insn.addr !3010
  br i1 %4, label %5, label %dec_label_pc_1007baa, !insn.addr !3010

; <label>:5:                                      ; preds = %dec_label_pc_1007ba8
  %6 = call i32 @function_1007b96(), !insn.addr !3010
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !3010
  br label %dec_label_pc_1007baa, !insn.addr !3010

dec_label_pc_1007baa:                             ; preds = %5, %dec_label_pc_1007ba8
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %7 = xor i32 %eax.0.reload, 42, !insn.addr !3011
  ret i32 %7, !insn.addr !3012
}

define i32 @function_1007bb0() local_unnamed_addr {
dec_label_pc_1007bb0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -63, !insn.addr !3013
  %2 = add i32 %0, -4, !insn.addr !3014
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3014
  store i32 -2147483641, i32* %3, align 4, !insn.addr !3014
  ret i32 %1, !insn.addr !3014
}

define i32 @function_1007bbf(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007bbf:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007bc1(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007bc1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8, !insn.addr !3015
  %2 = icmp eq i8 %1, 112, !insn.addr !3015
  br i1 %2, label %dec_label_pc_1007bce, label %dec_label_pc_1007bc8, !insn.addr !3016

dec_label_pc_1007bc8:                             ; preds = %dec_label_pc_1007bc1
  %3 = call i32* @LocalFree(i32* nonnull @0), !insn.addr !3017
  %4 = ptrtoint i32* %3 to i32, !insn.addr !3017
  ret i32 %4, !insn.addr !3017

dec_label_pc_1007bce:                             ; preds = %dec_label_pc_1007bc1
  %5 = and i32 %0, -256, !insn.addr !3015
  ret i32 %5, !insn.addr !3018
}

define i32 @function_1007bd1() local_unnamed_addr {
dec_label_pc_1007bd1:
  %eax.0.reg2mem = alloca i32, !insn.addr !3019
  %storemerge.reg2mem = alloca i32, !insn.addr !3019
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = icmp eq i32 %4, 0, !insn.addr !3020
  br i1 %5, label %dec_label_pc_1007bf7, label %dec_label_pc_1007bda, !insn.addr !3021

dec_label_pc_1007bda:                             ; preds = %dec_label_pc_1007bd1
  %6 = trunc i32 %3 to i8, !insn.addr !3022
  %7 = and i8 %6, 14, !insn.addr !3022
  %8 = icmp ugt i8 %7, 9, !insn.addr !3022
  %9 = icmp ugt i8 %6, -103
  br i1 %8, label %10, label %15, !insn.addr !3022

; <label>:10:                                     ; preds = %dec_label_pc_1007bda
  %.v = select i1 %9, i32 102, i32 6
  %11 = add i32 %.v, %3, !insn.addr !3022
  %12 = and i32 %11, 255, !insn.addr !3022
  %13 = and i32 %3, -256, !insn.addr !3022
  %14 = or i32 %12, %13, !insn.addr !3022
  store i32 %14, i32* %storemerge.reg2mem, !insn.addr !3022
  br label %dec_label_pc_1007bdf, !insn.addr !3022

; <label>:15:                                     ; preds = %dec_label_pc_1007bda
  %16 = add i32 %3, 96, !insn.addr !3022
  %17 = select i1 %9, i32 %16, i32 %3, !insn.addr !3022
  %18 = and i32 %17, 255, !insn.addr !3022
  %19 = and i32 %3, -256, !insn.addr !3022
  %20 = or i32 %18, %19, !insn.addr !3022
  store i32 %20, i32* %storemerge.reg2mem, !insn.addr !3022
  br label %dec_label_pc_1007bdf, !insn.addr !3022

dec_label_pc_1007bdf:                             ; preds = %10, %15
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !3023

dec_label_pc_1007bf7:                             ; preds = %dec_label_pc_1007bd1
  %21 = icmp eq i32 %2, -1, !insn.addr !3024
  %22 = icmp ne i32 %3, 1, !insn.addr !3025
  %23 = icmp eq i1 %22, %21, !insn.addr !3025
  br i1 %23, label %24, label %dec_label_pc_1007bfc, !insn.addr !3025

; <label>:24:                                     ; preds = %dec_label_pc_1007bf7
  %25 = call i32 @function_1007b87(), !insn.addr !3025
  br label %dec_label_pc_1007bfc, !insn.addr !3025

dec_label_pc_1007bfc:                             ; preds = %24, %dec_label_pc_1007bf7
  %26 = load i8, i8* inttoptr (i32 -698943575 to i8*), align 1, !insn.addr !3026
  %27 = add i8 %26, -87, !insn.addr !3026
  %28 = icmp ugt i8 %26, 86, !insn.addr !3026
  store i8 %27, i8* inttoptr (i32 -698943575 to i8*), align 1, !insn.addr !3026
  %29 = select i1 %28, i32 -700423686, i32 -700423687, !insn.addr !3027
  %30 = add i32 %3, -2, !insn.addr !3028
  %31 = icmp eq i32 %30, 0, !insn.addr !3028
  store i32 %29, i32* %eax.0.reg2mem, !insn.addr !3028
  br i1 %31, label %dec_label_pc_1007c0d, label %32, !insn.addr !3028

; <label>:32:                                     ; preds = %dec_label_pc_1007bfc
  %33 = call i32 @function_1007b8d(), !insn.addr !3028
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !3028
  br label %dec_label_pc_1007c0d, !insn.addr !3028

dec_label_pc_1007c0d:                             ; preds = %dec_label_pc_1007bfc, %32
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %34 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !3029
  %35 = load i8, i8* %34, align 1, !insn.addr !3029
  %36 = trunc i32 %eax.0.reload to i8, !insn.addr !3029
  %37 = add i8 %36, 1, !insn.addr !3029
  %38 = add i8 %37, %35, !insn.addr !3029
  store i8 %38, i8* %34, align 1, !insn.addr !3029
  %39 = add i32 %1, 1964382704, !insn.addr !3030
  %40 = inttoptr i32 %39 to i32*, !insn.addr !3030
  %41 = load i32, i32* %40, align 4, !insn.addr !3030
  %42 = add i32 %41, %30, !insn.addr !3030
  store i32 %42, i32* %40, align 4, !insn.addr !3030
  %43 = udiv i32 %30, 256, !insn.addr !3031
  %44 = trunc i32 %43 to i8, !insn.addr !3031
  %45 = add i32 %eax.0.reload, -53, !insn.addr !3031
  %46 = inttoptr i32 %45 to i8*, !insn.addr !3031
  %47 = load i8, i8* %46, align 1, !insn.addr !3031
  %48 = or i8 %47, %44, !insn.addr !3031
  %49 = zext i8 %48 to i32, !insn.addr !3031
  %50 = mul i32 %49, 256, !insn.addr !3031
  %51 = and i32 %30, -65281, !insn.addr !3031
  %52 = or i32 %50, %51, !insn.addr !3031
  %53 = load i8, i8* %34, align 1, !insn.addr !3032
  %54 = add i8 %53, %36, !insn.addr !3032
  store i8 %54, i8* %34, align 1, !insn.addr !3032
  %55 = call i32 @unknown_47007ba7(), !insn.addr !3033
  %56 = add i32 %55, 1, !insn.addr !3034
  %57 = add i32 %55, 111, !insn.addr !3035
  %58 = and i32 %56, -65536, !insn.addr !3035
  %59 = udiv i32 %56, 32
  %60 = and i32 %59, 248, !insn.addr !3036
  %61 = add i32 %57, %60, !insn.addr !3036
  %62 = and i32 %61, 255, !insn.addr !3036
  %63 = or i32 %62, %58, !insn.addr !3036
  %64 = inttoptr i32 %52 to i8*, !insn.addr !3037
  %65 = load i8, i8* %64, align 1, !insn.addr !3037
  %66 = trunc i32 %61 to i8, !insn.addr !3037
  %67 = add i8 %65, %66, !insn.addr !3037
  store i8 %67, i8* %64, align 1, !insn.addr !3037
  %68 = add i32 %0, -123, !insn.addr !3038
  %69 = inttoptr i32 %68 to i32*, !insn.addr !3038
  %70 = load i32, i32* %69, align 4, !insn.addr !3038
  %71 = inttoptr i32 %70 to i8*, !insn.addr !3039
  store i8 -1, i8* %71, align 1, !insn.addr !3039
  ret i32 %63, !insn.addr !3039
}

define i32 @function_1007c0e(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007c0e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c18() local_unnamed_addr {
dec_label_pc_1007c18:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c19(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007c19:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c1d() local_unnamed_addr {
dec_label_pc_1007c1d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c26() local_unnamed_addr {
dec_label_pc_1007c26:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c2b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1007c2b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c2f(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007c2f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c30(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007c30:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c36(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007c36:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c38(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1007c38:
  %esp.0.reg2mem = alloca i32, !insn.addr !3040
  %eax.0.reg2mem = alloca i32, !insn.addr !3040
  %eax.0.ph.reg2mem = alloca i32, !insn.addr !3040
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_28 = alloca i32, align 4
  %2 = add i32 %1, -10776, !insn.addr !3041
  %3 = inttoptr i32 %2 to i8*, !insn.addr !3041
  %4 = load i8, i8* %3, align 1, !insn.addr !3041
  %5 = trunc i32 %1 to i8, !insn.addr !3041
  %6 = add i8 %4, %5, !insn.addr !3041
  store i8 %6, i8* %3, align 1, !insn.addr !3041
  %7 = add i32 %0, 1722089510, !insn.addr !3042
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3042
  %9 = load i32, i32* %8, align 4, !insn.addr !3042
  %10 = add i32 %9, 1, !insn.addr !3042
  store i32 %10, i32* %8, align 4, !insn.addr !3042
  %11 = add i32 %0, -98, !insn.addr !3043
  %12 = inttoptr i32 %11 to i8*, !insn.addr !3043
  store i8 86, i8* %12, align 1, !insn.addr !3043
  %13 = call i32 @unknown_ffd1fb(i32 33), !insn.addr !3044
  %14 = add i32 %0, -2013264728, !insn.addr !3045
  %15 = inttoptr i32 %14 to i8*, !insn.addr !3045
  %16 = load i8, i8* %15, align 1, !insn.addr !3045
  %17 = trunc i32 %13 to i8, !insn.addr !3045
  %18 = or i8 %16, %17, !insn.addr !3045
  store i8 %18, i8* %15, align 1, !insn.addr !3045
  %19 = inttoptr i32 %arg6 to i8*, !insn.addr !3046
  %20 = load i8, i8* %19, align 1, !insn.addr !3046
  %21 = trunc i32 %arg6 to i8, !insn.addr !3046
  %22 = or i8 %20, %21, !insn.addr !3046
  store i8 %22, i8* %19, align 1, !insn.addr !3046
  %23 = icmp slt i32 %arg6, 0, !insn.addr !3047
  %24 = icmp eq i1 %23, false, !insn.addr !3048
  %25 = inttoptr i32 %arg5 to i32*
  br i1 %24, label %dec_label_pc_1007c70, label %dec_label_pc_1007c69, !insn.addr !3048

dec_label_pc_1007c69:                             ; preds = %dec_label_pc_1007c38
  store i32 -1, i32* %25, align 4, !insn.addr !3049
  %26 = sub i32 0, %arg6, !insn.addr !3050
  store i32 %26, i32* %eax.0.ph.reg2mem, !insn.addr !3051
  br label %dec_label_pc_1007c76.preheader, !insn.addr !3051

dec_label_pc_1007c70:                             ; preds = %dec_label_pc_1007c38
  store i32 1, i32* %25, align 4, !insn.addr !3052
  store i32 %arg6, i32* %eax.0.ph.reg2mem, !insn.addr !3052
  br label %dec_label_pc_1007c76.preheader, !insn.addr !3052

dec_label_pc_1007c76.preheader:                   ; preds = %dec_label_pc_1007c69, %dec_label_pc_1007c70
  %27 = ptrtoint i32* %stack_var_28 to i32, !insn.addr !3053
  %eax.0.ph.reload = load i32, i32* %eax.0.ph.reg2mem
  %28 = add i32 %arg5, 4
  %29 = inttoptr i32 %28 to i32*
  store i32 %eax.0.ph.reload, i32* %eax.0.reg2mem
  store i32 %27, i32* %esp.0.reg2mem
  br label %dec_label_pc_1007c76

dec_label_pc_1007c76:                             ; preds = %dec_label_pc_1007c76.preheader, %dec_label_pc_1007c76
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %30 = add i32 %esp.0.reload, 12, !insn.addr !3054
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3054
  %32 = load i32, i32* %31, align 4, !insn.addr !3054
  %33 = udiv i32 %eax.0.reload, %32, !insn.addr !3054
  %34 = urem i32 %eax.0.reload, %32
  %35 = trunc i32 %34 to i16, !insn.addr !3055
  %36 = call i32 @__asm_insd(i16 %35), !insn.addr !3055
  store i32 %36, i32* inttoptr (i32 33 to i32*), align 4, !insn.addr !3055
  %37 = add i32 %esp.0.reload, -2, !insn.addr !3056
  %38 = load i32, i32* %29, align 4, !insn.addr !3057
  %39 = add i32 %38, 1, !insn.addr !3057
  store i32 %39, i32* %29, align 4, !insn.addr !3057
  %40 = icmp ugt i32 %32, %eax.0.reload, !insn.addr !3058
  %41 = icmp eq i1 %40, false, !insn.addr !3059
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !3059
  store i32 %37, i32* %esp.0.reg2mem, !insn.addr !3059
  br i1 %41, label %dec_label_pc_1007c76, label %dec_label_pc_1007c88, !insn.addr !3059

dec_label_pc_1007c88:                             ; preds = %dec_label_pc_1007c76
  %42 = inttoptr i32 %37 to i16*, !insn.addr !3056
  ret i32 %arg5, !insn.addr !3060
}

define i32 @function_1007c8e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1007c8e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007c93() local_unnamed_addr {
dec_label_pc_1007c93:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007cba(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007cba:
  %eax.0.reg2mem = alloca i32, !insn.addr !3061
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = icmp eq i1 %1, %0, !insn.addr !3061
  %4 = icmp eq i1 %2, false, !insn.addr !3061
  %5 = icmp eq i1 %3, %4, !insn.addr !3061
  br i1 %5, label %6, label %dec_label_pc_1007cbc, !insn.addr !3061

; <label>:6:                                      ; preds = %dec_label_pc_1007cba
  %7 = call i32 @function_1007d2a(), !insn.addr !3061
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !3061
  br label %dec_label_pc_1007cbc, !insn.addr !3061

dec_label_pc_1007cbc:                             ; preds = %6, %dec_label_pc_1007cba
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3062
}

define i32 @function_1007cc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007cc4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %0, -240, !insn.addr !3063
  ret i32 %1, !insn.addr !3064
}

define i32 @function_1007cd3(i32 %arg1) local_unnamed_addr {
dec_label_pc_1007cd3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_3bc03357(i32 %0), !insn.addr !3065
  ret i32 %1, !insn.addr !3065
}

define i32 @function_1007cfa(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1007cfa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i128 @__decompiler_undefined_function_4()
  %5 = call i128 @__decompiler_undefined_function_4()
  %6 = trunc i32 %2 to i8, !insn.addr !3066
  %7 = udiv i32 %2, 256, !insn.addr !3066
  %8 = trunc i32 %7 to i8, !insn.addr !3066
  %9 = sub i8 0, %6
  %10 = sub i8 %9, 1
  %11 = icmp ult i8 %10, %8, !insn.addr !3066
  %12 = add i32 %1, -1070387002, !insn.addr !3067
  %13 = inttoptr i32 %12 to i8*, !insn.addr !3067
  %14 = load i8, i8* %13, align 1, !insn.addr !3067
  %15 = trunc i32 %3 to i8, !insn.addr !3067
  %.neg1 = sext i1 %11 to i8
  %.neg2 = sub i8 %.neg1, %15, !insn.addr !3067
  %16 = add i8 %.neg2, %14, !insn.addr !3067
  store i8 %16, i8* %13, align 1, !insn.addr !3067
  %17 = add i32 %3, 1, !insn.addr !3068
  %18 = call i128 @__asm_movhlps(i128 %5, i128 %4), !insn.addr !3069
  %19 = add i32 %0, -1677440363, !insn.addr !3070
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3070
  %21 = load i32, i32* %20, align 4, !insn.addr !3070
  %22 = mul i32 %21, 2, !insn.addr !3070
  store i32 %22, i32* %20, align 4, !insn.addr !3070
  ret i32 %17, !insn.addr !3071
}

define i32 @function_1007d16(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1007d16:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, %2, !insn.addr !3072
  %5 = inttoptr i32 %2 to i32*, !insn.addr !3072
  store i32 %4, i32* %5, align 4, !insn.addr !3072
  %6 = add i32 %0, 95, !insn.addr !3073
  %7 = add i32 %6, %1, !insn.addr !3073
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3073
  ret i32 %0, !insn.addr !3074
}

define i32 @function_1007d2a() local_unnamed_addr {
dec_label_pc_1007d2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-1 = alloca i32, align 4
  %2 = add i32 %0, 16, !insn.addr !3075
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3075
  %4 = load i32, i32* %3, align 4, !insn.addr !3075
  %5 = add i32 %1, -4, !insn.addr !3075
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3075
  store i32 %4, i32* %6, align 4, !insn.addr !3075
  %7 = add i32 %1, -8, !insn.addr !3076
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3076
  store i32 1, i32* %8, align 4, !insn.addr !3076
  %9 = inttoptr i32 %7 to i16*, !insn.addr !3077
  %10 = ptrtoint i32* %stack_var_-1 to i32, !insn.addr !3078
  ret i32 %10, !insn.addr !3078
}

define i32 @function_1007d3b() local_unnamed_addr {
dec_label_pc_1007d3b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-6 = alloca i32, align 4
  %7 = select i1 %5, i32 -4, i32 4, !insn.addr !3079
  %8 = add i32 %7, %0, !insn.addr !3079
  %9 = icmp eq i1 %6, %4, !insn.addr !3080
  br i1 %9, label %dec_label_pc_1007d46, label %dec_label_pc_1007dac, !insn.addr !3080

dec_label_pc_1007d46:                             ; preds = %dec_label_pc_1007d3b
  %10 = add i32 %7, %1, !insn.addr !3079
  %11 = load i32, i32* %edx, align 4
  %12 = add i32 %2, 62, !insn.addr !3081
  %13 = add i32 %12, %11, !insn.addr !3082
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3082
  %15 = load i32, i32* %14, align 4, !insn.addr !3082
  store i32 %15, i32* %stack_var_-6, align 4, !insn.addr !3082
  %16 = ptrtoint i32* %stack_var_-6 to i32, !insn.addr !3082
  %17 = trunc i32 %11 to i16, !insn.addr !3083
  %18 = call i32 @__asm_insd(i16 %17), !insn.addr !3083
  %19 = inttoptr i32 %8 to i32*, !insn.addr !3083
  store i32 %18, i32* %19, align 4, !insn.addr !3083
  %20 = load i32, i32* inttoptr (i32 1463277072 to i32*), align 16, !insn.addr !3084
  %21 = add i32 %20, -1, !insn.addr !3084
  store i32 %21, i32* inttoptr (i32 1463277072 to i32*), align 16, !insn.addr !3084
  %22 = call i32 @unknown_b7011aa0(), !insn.addr !3085
  %23 = bitcast i32* %edx to i8*
  %24 = load i8, i8* %23, align 4, !insn.addr !3086
  %25 = udiv i32 %3, 256, !insn.addr !3086
  %26 = trunc i32 %25 to i8, !insn.addr !3086
  %27 = load i32, i32* %edx, align 4, !insn.addr !3086
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3086
  store i8 %26, i8* %28, align 1, !insn.addr !3086
  %29 = zext i8 %24 to i32, !insn.addr !3086
  %30 = mul i32 %29, 256, !insn.addr !3086
  %31 = and i32 %3, -65282, !insn.addr !3086
  %32 = or i32 %30, %31, !insn.addr !3086
  %33 = load i32, i32* %19, align 4, !insn.addr !3087
  %34 = add i32 %33, 4, !insn.addr !3088
  %35 = inttoptr i32 %34 to i32*, !insn.addr !3088
  %36 = load i32, i32* %35, align 4, !insn.addr !3088
  %37 = load i32, i32* %edx, align 4, !insn.addr !3089
  %38 = add i32 %37, 64, !insn.addr !3090
  %39 = inttoptr i32 %38 to i32*, !insn.addr !3090
  %40 = load i32, i32* %39, align 4, !insn.addr !3090
  %41 = sub i32 %16, %40, !insn.addr !3090
  %42 = load i32, i32* inttoptr (i32 20205404 to i32*), align 4, !insn.addr !3091
  %43 = sub i32 %10, %42, !insn.addr !3091
  %44 = icmp ult i32 %10, %42, !insn.addr !3091
  %45 = add i32 %43, 723669698, !insn.addr !3092
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3092
  %47 = load i32, i32* %46, align 4, !insn.addr !3092
  %48 = select i1 %44, i32 -57, i32 -58, !insn.addr !3092
  %49 = sub i32 %47, %48, !insn.addr !3092
  store i32 %49, i32* %46, align 4, !insn.addr !3092
  %50 = call i32 @__asm_sti(), !insn.addr !3093
  %51 = add i32 %41, -2, !insn.addr !3094
  %52 = inttoptr i32 %51 to i32*, !insn.addr !3094
  store i32 %50, i32* %52, align 4, !insn.addr !3094
  %53 = call i32* @memmove(i32* nonnull @0, i32* nonnull @0, i32 ptrtoint (i32* @0 to i32)), !insn.addr !3095
  %54 = sub i32 %37, %51, !insn.addr !3096
  %55 = inttoptr i32 %37 to i32*, !insn.addr !3096
  store i32 %54, i32* %55, align 4, !insn.addr !3096
  %56 = add i32 %37, 139, !insn.addr !3097
  %57 = and i32 %56, 255, !insn.addr !3097
  %58 = and i32 %37, -256, !insn.addr !3097
  %59 = or i32 %57, %58, !insn.addr !3097
  %60 = add i32 %59, 8, !insn.addr !3098
  %61 = inttoptr i32 %60 to i32*, !insn.addr !3098
  %62 = load i32, i32* %61, align 4, !insn.addr !3098
  %63 = add i32 %62, %43, !insn.addr !3098
  store i32 %63, i32* %61, align 4, !insn.addr !3098
  %64 = icmp eq i32 %32, 0, !insn.addr !3099
  %65 = icmp slt i32 %32, 0, !insn.addr !3099
  %66 = icmp eq i1 %65, false, !insn.addr !3100
  %67 = icmp eq i1 %64, false, !insn.addr !3100
  %68 = icmp eq i1 %66, %67, !insn.addr !3100
  br i1 %68, label %dec_label_pc_1007dc8, label %dec_label_pc_1007dab, !insn.addr !3100

dec_label_pc_1007dab:                             ; preds = %dec_label_pc_1007d46
  ret i32 %59, !insn.addr !3100

dec_label_pc_1007dac:                             ; preds = %dec_label_pc_1007d3b
  %69 = inttoptr i32 %8 to i32*, !insn.addr !3101
  %70 = load i32, i32* %69, align 4, !insn.addr !3101
  %71 = call i32 @unknown_2d34c1(i32 %70), !insn.addr !3102
  %72 = add i32 %2, -4, !insn.addr !3103
  %73 = inttoptr i32 %72 to i32*, !insn.addr !3103
  %74 = load i32, i32* %73, align 4, !insn.addr !3103
  store i32 %74, i32* %69, align 4, !insn.addr !3104
  %75 = load i32, i32* %edx, align 4
  %76 = add i32 %2, -117, !insn.addr !3105
  %77 = inttoptr i32 %76 to i8*, !insn.addr !3105
  %78 = load i8, i8* %77, align 1, !insn.addr !3105
  %79 = trunc i32 %75 to i8
  %80 = add i8 %79, 12, !insn.addr !3105
  %81 = add i8 %80, %78, !insn.addr !3105
  store i8 %81, i8* %77, align 1, !insn.addr !3105
  %82 = and i32 %74, 255, !insn.addr !3106
  %83 = add i32 %82, %70, !insn.addr !3106
  %84 = inttoptr i32 %83 to i8*, !insn.addr !3106
  %85 = load i8, i8* %84, align 1, !insn.addr !3106
  %86 = zext i8 %85 to i32, !insn.addr !3106
  %87 = and i32 %74, -256, !insn.addr !3106
  %88 = or i32 %87, %86, !insn.addr !3106
  ret i32 %88, !insn.addr !3106

dec_label_pc_1007dc8:                             ; preds = %dec_label_pc_1007d46
  %89 = inttoptr i32 %0 to i32*, !insn.addr !3079
  %90 = mul i32 %36, 4, !insn.addr !3107
  %91 = and i32 %56, 204, !insn.addr !3108
  %92 = or i32 %91, 51, !insn.addr !3108
  %93 = or i32 %92, %58, !insn.addr !3108
  %94 = add i32 %93, -119, !insn.addr !3109
  %95 = inttoptr i32 %94 to i8*, !insn.addr !3109
  store i8 0, i8* %95, align 4, !insn.addr !3109
  %96 = add i32 %90, -169, !insn.addr !3110
  %97 = inttoptr i32 %96 to i32*, !insn.addr !3110
  store i32 %93, i32* %97, align 4, !insn.addr !3110
  %98 = add i32 %90, -196, !insn.addr !3111
  %99 = inttoptr i32 %98 to i64*, !insn.addr !3111
  %100 = load i64, i64* %99, align 4, !insn.addr !3111
  %101 = call i32 @__asm_bound(i64 %100), !insn.addr !3111
  %102 = add i32 %8, -788502462, !insn.addr !3112
  %103 = add i32 %102, %37, !insn.addr !3113
  %104 = inttoptr i32 %103 to i32*, !insn.addr !3113
  store i32 %101, i32* %104, align 4, !insn.addr !3113
  %105 = trunc i32 %92 to i8, !insn.addr !3114
  %106 = add i32 %93, 1744725480, !insn.addr !3114
  %107 = inttoptr i32 %106 to i8*, !insn.addr !3114
  %108 = load i8, i8* %107, align 1, !insn.addr !3114
  %109 = sub i8 %105, %108, !insn.addr !3114
  %110 = zext i8 %109 to i32, !insn.addr !3114
  %111 = or i32 %58, %110, !insn.addr !3114
  %112 = inttoptr i32 %33 to i32*, !insn.addr !3115
  %113 = load i32, i32* %112, align 4, !insn.addr !3115
  %114 = add i32 %111, %113, !insn.addr !3115
  store i32 %114, i32* %112, align 4, !insn.addr !3115
  %115 = add i32 %90, -71, !insn.addr !3116
  %116 = inttoptr i32 %115 to i32*, !insn.addr !3116
  %117 = load i32, i32* %116, align 4, !insn.addr !3116
  %118 = add i32 %90, -87, !insn.addr !3117
  %119 = inttoptr i32 %118 to i32*, !insn.addr !3117
  store i32 %111, i32* %119, align 4, !insn.addr !3117
  %120 = add i32 %117, -78, !insn.addr !3118
  %121 = inttoptr i32 %120 to i32*, !insn.addr !3118
  %122 = load i32, i32* %121, align 4, !insn.addr !3118
  %123 = add i32 %117, 8, !insn.addr !3119
  %124 = inttoptr i32 %123 to i32*, !insn.addr !3119
  %125 = load i32, i32* %124, align 4, !insn.addr !3119
  %126 = add i32 %90, -67, !insn.addr !3120
  %127 = inttoptr i32 %126 to i32*, !insn.addr !3120
  %128 = load i32, i32* %127, align 4, !insn.addr !3120
  %129 = zext i32 %122 to i64, !insn.addr !3120
  %130 = load i32, i32* %edx, align 4, !insn.addr !3120
  %131 = zext i32 %130 to i64, !insn.addr !3120
  %132 = mul i64 %131, 4294967296, !insn.addr !3120
  %133 = or i64 %132, %129, !insn.addr !3120
  %134 = zext i32 %128 to i64, !insn.addr !3120
  %135 = udiv i64 %133, %134, !insn.addr !3120
  %136 = trunc i64 %135 to i32, !insn.addr !3120
  %137 = urem i64 %133, %134, !insn.addr !3120
  %138 = add i32 %41, -129, !insn.addr !3121
  %139 = inttoptr i32 %138 to i32*, !insn.addr !3121
  store i32 %136, i32* %139, align 4, !insn.addr !3121
  %140 = inttoptr i32 %125 to i8*, !insn.addr !3122
  %141 = load i8, i8* %140, align 1, !insn.addr !3122
  %142 = trunc i64 %137 to i8, !insn.addr !3122
  %143 = sub i8 %141, %142, !insn.addr !3122
  store i8 %143, i8* %140, align 1, !insn.addr !3122
  ret i32 %136, !insn.addr !3122
}

define i32 @function_1007e28() local_unnamed_addr {
dec_label_pc_1007e28:
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !3123
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %0, 1979662336, !insn.addr !3123
  %7 = inttoptr i32 %6 to i8*, !insn.addr !3123
  %8 = load i8, i8* %7, align 1, !insn.addr !3123
  %9 = udiv i32 %1, 256, !insn.addr !3123
  %10 = trunc i32 %9 to i8, !insn.addr !3123
  %11 = add i8 %8, %10, !insn.addr !3123
  store i8 %11, i8* %7, align 1, !insn.addr !3123
  %12 = add i32 %0, 973077573, !insn.addr !3124
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3124
  %14 = load i32, i32* %13, align 4, !insn.addr !3124
  %15 = bitcast i32* %eax to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !3125
  %17 = load i32, i32* %eax, align 4
  %18 = trunc i32 %17 to i8, !insn.addr !3125
  %19 = add i8 %16, %18, !insn.addr !3125
  %20 = inttoptr i32 %17 to i8*, !insn.addr !3125
  store i8 %19, i8* %20, align 1, !insn.addr !3125
  %21 = load i32, i32* %eax, align 4, !insn.addr !3126
  %22 = mul i32 %21, 8, !insn.addr !3126
  %23 = add i32 %22, 133366661, !insn.addr !3126
  %24 = inttoptr i32 %23 to i32*, !insn.addr !3126
  %25 = load i32, i32* %24, align 4, !insn.addr !3126
  %26 = add i32 %0, -4, !insn.addr !3127
  %27 = inttoptr i32 %26 to i32*, !insn.addr !3127
  %28 = load i32, i32* %27, align 4, !insn.addr !3127
  %29 = add i32 %28, 12, !insn.addr !3128
  %30 = inttoptr i32 %29 to i32*, !insn.addr !3128
  %31 = load i32, i32* %30, align 4, !insn.addr !3128
  %32 = or i32 %31, 1, !insn.addr !3128
  store i32 %32, i32* %30, align 4, !insn.addr !3128
  %33 = add i32 %0, 8, !insn.addr !3129
  %34 = inttoptr i32 %33 to i32*, !insn.addr !3129
  %35 = load i32, i32* %34, align 4, !insn.addr !3129
  %36 = udiv i32 %35, 2, !insn.addr !3129
  %37 = icmp ult i32 %35, 2
  store i32 %36, i32* %34, align 4, !insn.addr !3129
  %38 = and i32 %35, 1, !insn.addr !3129
  %39 = icmp eq i32 %38, 0, !insn.addr !3129
  %40 = select i1 %39, i32 0, i32 255, !insn.addr !3130
  %41 = and i32 %28, -256, !insn.addr !3130
  %42 = or i32 %40, %41, !insn.addr !3130
  store i32 %42, i32* %eax, align 4, !insn.addr !3130
  %43 = icmp eq i1 %37, false, !insn.addr !3131
  br i1 %43, label %dec_label_pc_1007e28.dec_label_pc_1007e63_crit_edge, label %dec_label_pc_1007e57, !insn.addr !3131

dec_label_pc_1007e28.dec_label_pc_1007e63_crit_edge: ; preds = %dec_label_pc_1007e28
  %.pre = inttoptr i32 %25 to i32*, !insn.addr !3132
  store i32* %.pre, i32** %.pre-phi.reg2mem
  br label %dec_label_pc_1007e63

dec_label_pc_1007e57:                             ; preds = %dec_label_pc_1007e28
  %44 = sext i32 %14 to i64, !insn.addr !3124
  %45 = mul nsw i64 %44, 31999182, !insn.addr !3124
  %46 = mul i64 %44, 137435440188751872
  %47 = sdiv i64 %46, 4294967296, !insn.addr !3124
  %48 = icmp ne i64 %45, %47, !insn.addr !3124
  %49 = zext i1 %48 to i32, !insn.addr !3133
  %50 = call i8 @llvm.ctpop.i8(i8 %11), !range !258, !insn.addr !3123
  %51 = and i8 %50, 1, !insn.addr !3123
  %52 = icmp eq i8 %51, 0, !insn.addr !3123
  %53 = zext i1 %52 to i32, !insn.addr !3133
  %54 = mul i32 %53, 4, !insn.addr !3133
  %55 = and i8 %8, 15, !insn.addr !3123
  %56 = and i8 %10, 15, !insn.addr !3123
  %57 = add nuw nsw i8 %55, %56, !insn.addr !3123
  %58 = icmp ugt i8 %57, 15, !insn.addr !3123
  %59 = zext i1 %58 to i32, !insn.addr !3133
  %60 = mul i32 %59, 16, !insn.addr !3133
  %61 = icmp eq i8 %11, 0, !insn.addr !3123
  %62 = zext i1 %61 to i32, !insn.addr !3133
  %63 = mul i32 %62, 64, !insn.addr !3133
  %64 = icmp slt i8 %11, 0, !insn.addr !3123
  %65 = zext i1 %64 to i32, !insn.addr !3133
  %66 = mul i32 %65, 128, !insn.addr !3133
  %67 = zext i1 %5 to i32, !insn.addr !3133
  %68 = mul i32 %67, 256, !insn.addr !3133
  %69 = zext i1 %4 to i32, !insn.addr !3133
  %70 = mul i32 %69, 512, !insn.addr !3133
  %71 = zext i1 %3 to i32, !insn.addr !3133
  %72 = mul i32 %71, 1024, !insn.addr !3133
  %73 = mul i32 %49, 2048, !insn.addr !3133
  %74 = zext i1 %2 to i32, !insn.addr !3133
  %75 = mul i32 %74, 16384, !insn.addr !3133
  %76 = or i32 %75, %72, !insn.addr !3133
  %77 = or i32 %76, %70, !insn.addr !3133
  %78 = or i32 %77, %68, !insn.addr !3133
  %79 = or i32 %78, %63, !insn.addr !3133
  %80 = or i32 %79, %66, !insn.addr !3133
  %81 = or i32 %80, %60, !insn.addr !3133
  %82 = or i32 %81, %54, !insn.addr !3133
  %83 = or i32 %82, %49, !insn.addr !3133
  %84 = or i32 %83, %73, !insn.addr !3133
  %85 = or i32 %84, 2, !insn.addr !3133
  %86 = add i32 %25, -4, !insn.addr !3134
  %87 = inttoptr i32 %86 to i32*
  store i32 %42, i32* %87, align 4, !insn.addr !3134
  %88 = call i32 @unknown_a0011a6d(i32 %85), !insn.addr !3135
  store i32* %87, i32** %.pre-phi.reg2mem, !insn.addr !3135
  br label %dec_label_pc_1007e63, !insn.addr !3135

dec_label_pc_1007e63:                             ; preds = %dec_label_pc_1007e28.dec_label_pc_1007e63_crit_edge, %dec_label_pc_1007e57
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %89 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !3132
  ret i32 %89, !insn.addr !3136
}

define i32 @function_1007e6a(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1007e6a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, -62027002, !insn.addr !3137
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3137
  %6 = load i32, i32* %5, align 4, !insn.addr !3137
  %7 = add i32 %6, -1, !insn.addr !3137
  store i32 %7, i32* %5, align 4, !insn.addr !3137
  %8 = icmp sgt i32 %6, 1, !insn.addr !3138
  br i1 %8, label %dec_label_pc_1007ee5, label %dec_label_pc_1007e76, !insn.addr !3138

dec_label_pc_1007e76:                             ; preds = %dec_label_pc_1007e6a
  ret i32 %3, !insn.addr !3139

dec_label_pc_1007ee5:                             ; preds = %dec_label_pc_1007e6a
  %9 = add i32 %1, 4, !insn.addr !3140
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3140
  %11 = load i32, i32* %10, align 4, !insn.addr !3140
  %12 = icmp slt i32 %3, %11, !insn.addr !3141
  br i1 %12, label %dec_label_pc_1007f10, label %dec_label_pc_1007eea, !insn.addr !3141

dec_label_pc_1007eea:                             ; preds = %dec_label_pc_1007ee5
  %13 = inttoptr i32 %2 to i32*, !insn.addr !3142
  %14 = add i32 %0, -4, !insn.addr !3143
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3143
  %16 = load i32, i32* %15, align 4, !insn.addr !3143
  %17 = call i32 @unknown_3f7bc1(i32 %16), !insn.addr !3144
  %18 = add i32 %17, -67, !insn.addr !3145
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3145
  %20 = load i32, i32* %19, align 4, !insn.addr !3145
  %21 = add i32 %17, %2, !insn.addr !3146
  store i32 %21, i32* %13, align 4, !insn.addr !3146
  %22 = add i32 %1, 1895802108, !insn.addr !3147
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3147
  %24 = load i32, i32* %23, align 4, !insn.addr !3147
  %25 = and i32 %24, 4, !insn.addr !3147
  store i32 %25, i32* %23, align 4, !insn.addr !3147
  %26 = xor i32 %20, %17, !insn.addr !3148
  store i32 %20, i32* %15, align 4, !insn.addr !3149
  ret i32 %26, !insn.addr !3149

dec_label_pc_1007f10:                             ; preds = %dec_label_pc_1007ee5
  %27 = add i32 %3, 195, !insn.addr !3150
  %28 = and i32 %3, -256, !insn.addr !3150
  %29 = and i32 %27, 234, !insn.addr !3151
  %30 = or i32 %29, 21, !insn.addr !3151
  %31 = or i32 %30, %28, !insn.addr !3152
  %32 = inttoptr i32 %31 to i8*, !insn.addr !3153
  %33 = load i8, i8* %32, align 1, !insn.addr !3153
  %34 = trunc i32 %30 to i8, !insn.addr !3153
  %35 = add i8 %33, %34, !insn.addr !3153
  store i8 %35, i8* %32, align 1, !insn.addr !3153
  %36 = add i32 %0, -4, !insn.addr !3154
  %37 = call i32 @function_101239e(i32 %36), !insn.addr !3155
  ret i32 %37, !insn.addr !3156
}

define i32 @function_1007f4e() local_unnamed_addr {
dec_label_pc_1007f4e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -1302595340, !insn.addr !3157
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3157
  %5 = load i32, i32* %4, align 4, !insn.addr !3157
  %6 = add i32 %5, %1, !insn.addr !3157
  store i32 %6, i32* %4, align 4, !insn.addr !3157
  ret i32 %2, !insn.addr !3158
}

define i32 @function_1007f57() local_unnamed_addr {
dec_label_pc_1007f57:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007f61() local_unnamed_addr {
dec_label_pc_1007f61:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1007f77() local_unnamed_addr {
dec_label_pc_1007f77:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i16, !insn.addr !3159
  %3 = trunc i32 %0 to i8
  call void @__asm_outsb(i16 %2, i8 %3), !insn.addr !3159
  %4 = call i32 @unknown_1a6c7bfb(), !insn.addr !3160
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3161
  %6 = call i32 @function_1007fce(), !insn.addr !3162
  ret i32 %6, !insn.addr !3162
}

define i32 @function_1007fa0() local_unnamed_addr {
dec_label_pc_1007fa0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3163
}

define i32 @function_1007fce() local_unnamed_addr {
dec_label_pc_1007fce:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 1, !insn.addr !3164
  %4 = inttoptr i32 %3 to i16*, !insn.addr !3164
  %5 = load i16, i16* %4, align 2, !insn.addr !3164
  %6 = trunc i32 %2 to i16, !insn.addr !3164
  call void @__asm_arpl(i16 %5, i16 %6), !insn.addr !3164
  %7 = add i32 %1, -38, !insn.addr !3165
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3165
  %9 = load i32, i32* %8, align 4, !insn.addr !3165
  %10 = add i32 %9, %2, !insn.addr !3165
  store i32 %10, i32* %8, align 4, !insn.addr !3165
  %11 = call i32 @function_1007f61(), !insn.addr !3166
  ret i32 %11, !insn.addr !3166
}

define i32 @function_1007fdc() local_unnamed_addr {
dec_label_pc_1007fdc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__asm_wait(), !insn.addr !3167
  %4 = udiv i32 %0, 256, !insn.addr !3168
  %5 = and i32 %2, %4
  %6 = trunc i32 %5 to i8, !insn.addr !3168
  %7 = inttoptr i32 %3 to i8*, !insn.addr !3168
  store i8 %6, i8* %7, align 1, !insn.addr !3168
  %8 = add i32 %3, 9, !insn.addr !3169
  %9 = and i32 %8, 124, !insn.addr !3169
  %10 = and i32 %3, 198425600, !insn.addr !3169
  %11 = or i32 %10, %9, !insn.addr !3169
  %12 = or i32 %11, -198425725, !insn.addr !3170
  %13 = add i32 %12, %1, !insn.addr !3171
  %14 = icmp ult i32 %13, %1, !insn.addr !3171
  %15 = inttoptr i32 %1 to i32*, !insn.addr !3171
  store i32 %13, i32* %15, align 4, !insn.addr !3171
  %16 = zext i1 %14 to i32, !insn.addr !3172
  %17 = add nsw i32 %12, 117, !insn.addr !3172
  %.masked = and i32 %17, 252
  %18 = or i32 %10, %.masked, !insn.addr !3172
  %19 = or i32 %18, %16, !insn.addr !3172
  %20 = or i32 %19, -198425856, !insn.addr !3172
  ret i32 %20, !insn.addr !3173
}

define i32 @function_1007fed(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1007fed:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = and i32 %arg1, 27148, !insn.addr !3174
  %7 = select i1 %4, i32 -4, i32 4, !insn.addr !3175
  %8 = add i32 %7, %0, !insn.addr !3175
  %9 = add nuw nsw i32 %6, 28, !insn.addr !3176
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3176
  %11 = load i32, i32* %10, align 4, !insn.addr !3176
  %12 = and i32 %11, %8, !insn.addr !3176
  %13 = add i32 %3, -2096792018, !insn.addr !3177
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3177
  %15 = load i32, i32* %14, align 4, !insn.addr !3177
  %16 = add i32 %15, 23, !insn.addr !3177
  store i32 %16, i32* %14, align 4, !insn.addr !3177
  %17 = add i32 %1, 14, !insn.addr !3178
  %18 = inttoptr i32 %17 to i8*, !insn.addr !3178
  %19 = load i8, i8* %18, align 1, !insn.addr !3178
  %20 = udiv i32 %3, 256, !insn.addr !3178
  %21 = trunc i32 %20 to i8, !insn.addr !3178
  %22 = xor i8 %19, %21, !insn.addr !3178
  store i8 %22, i8* %18, align 1, !insn.addr !3178
  %23 = load i32, i32* inttoptr (i32 26165264 to i32*), align 16, !insn.addr !3179
  %24 = icmp eq i32 %23, 57, !insn.addr !3179
  br i1 %24, label %dec_label_pc_1008033, label %dec_label_pc_1008029, !insn.addr !3180

dec_label_pc_1008029:                             ; preds = %dec_label_pc_1007fed
  %25 = inttoptr i32 %12 to i8*, !insn.addr !3181
  %26 = load i8, i8* %25, align 1, !insn.addr !3181
  %27 = sext i8 %26 to i32, !insn.addr !3181
  %28 = call i32 @__asm_wait(), !insn.addr !3182
  %29 = and i32 %27, -256, !insn.addr !3183
  %30 = or i32 %29, 1, !insn.addr !3183
  ret i32 %30, !insn.addr !3183

dec_label_pc_1008033:                             ; preds = %dec_label_pc_1007fed
  %31 = add nsw i32 %6, -46, !insn.addr !3184
  %32 = add i32 %12, 1133812487, !insn.addr !3185
  %33 = inttoptr i32 %32 to i8*, !insn.addr !3185
  %34 = load i8, i8* %33, align 1, !insn.addr !3185
  %35 = zext i8 %34 to i32, !insn.addr !3185
  %36 = mul i32 %35, 256, !insn.addr !3185
  %37 = and i32 %2, -65281, !insn.addr !3185
  %38 = or i32 %36, %37, !insn.addr !3185
  %39 = inttoptr i32 %31 to i8*, !insn.addr !3186
  %40 = load i8, i8* %39, align 2, !insn.addr !3186
  %41 = trunc i32 %6 to i8, !insn.addr !3186
  %42 = sub i8 %40, %41, !insn.addr !3186
  store i8 %42, i8* %39, align 2, !insn.addr !3186
  %43 = icmp sgt i32 %38, 9, !insn.addr !3187
  br i1 %43, label %dec_label_pc_10080d3, label %dec_label_pc_1008062, !insn.addr !3187

dec_label_pc_1008062:                             ; preds = %dec_label_pc_1008033
  %44 = icmp eq i32 %38, 9, !insn.addr !3188
  br i1 %44, label %45, label %dec_label_pc_1008068, !insn.addr !3189

; <label>:45:                                     ; preds = %dec_label_pc_1008062
  %46 = call i32 @function_1301c78(), !insn.addr !3189
  br label %dec_label_pc_1008068, !insn.addr !3189

dec_label_pc_1008068:                             ; preds = %45, %dec_label_pc_1008062
  %47 = call i32 @function_f40df47a(), !insn.addr !3190
  ret i32 %47, !insn.addr !3190

dec_label_pc_10080d3:                             ; preds = %dec_label_pc_1008033
  %48 = add nsw i32 %6, -1527671361, !insn.addr !3191
  %49 = and i32 %48, -1527644416, !insn.addr !3192
  %50 = trunc i32 %48 to i8
  %51 = add nsw i8 %50, 73, !insn.addr !3193
  %52 = add i32 %1, -16384286, !insn.addr !3193
  %53 = inttoptr i32 %52 to i8*, !insn.addr !3193
  %54 = load i8, i8* %53, align 1, !insn.addr !3193
  %55 = add i8 %51, %54, !insn.addr !3193
  %56 = zext i8 %55 to i32, !insn.addr !3193
  %57 = or i32 %49, %56, !insn.addr !3193
  %58 = add i32 %38, -5, !insn.addr !3194
  %59 = sub i32 4, %38
  %60 = and i32 %59, %2, !insn.addr !3194
  %61 = icmp slt i32 %60, 0, !insn.addr !3194
  %62 = icmp eq i32 %58, 0, !insn.addr !3194
  %63 = icmp slt i32 %58, 0, !insn.addr !3194
  %64 = icmp eq i1 %63, %61, !insn.addr !3195
  %65 = icmp eq i1 %62, false, !insn.addr !3195
  %66 = icmp eq i1 %64, %65, !insn.addr !3195
  %67 = zext i1 %66 to i8, !insn.addr !3195
  %factor = mul i32 %57, 2
  %68 = add nsw i32 %factor, -75300864, !insn.addr !3195
  %69 = inttoptr i32 %68 to i8*, !insn.addr !3195
  store i8 %67, i8* %69, align 2, !insn.addr !3195
  %70 = add i32 %12, 101, !insn.addr !3196
  %71 = inttoptr i32 %70 to i32*, !insn.addr !3196
  %72 = load i32, i32* %71, align 4, !insn.addr !3196
  %73 = icmp slt i32 %72, %5, !insn.addr !3197
  br i1 %73, label %dec_label_pc_1008100, label %dec_label_pc_1008168, !insn.addr !3197

dec_label_pc_1008100:                             ; preds = %dec_label_pc_10080d3
  %74 = add i32 %5, 8, !insn.addr !3198
  %75 = inttoptr i32 %74 to i32*, !insn.addr !3198
  %76 = load i32, i32* %75, align 4, !insn.addr !3198
  %77 = add i32 %76, 8, !insn.addr !3199
  %78 = inttoptr i32 %77 to i32*, !insn.addr !3199
  store i32 %31, i32* %78, align 4, !insn.addr !3199
  %79 = call i32 @function_11681a6(i32 %5), !insn.addr !3200
  ret i32 %79, !insn.addr !3200

dec_label_pc_1008168:                             ; preds = %dec_label_pc_10080d3
  %80 = or i32 %57, 10707983, !insn.addr !3201
  ret i32 %80, !insn.addr !3200
}

define i32 @function_1008123() local_unnamed_addr {
dec_label_pc_1008123:
  %0 = call i32 @function_8a0b077c(), !insn.addr !3202
  ret i32 %0, !insn.addr !3202
}

define i32 @function_1008130() local_unnamed_addr {
dec_label_pc_1008130:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3203
}

define i32 @function_1008134(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008134:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3204
}

define i32 @function_1008136() local_unnamed_addr {
dec_label_pc_1008136:
  %0 = call i32 @function_4a07f545(), !insn.addr !3205
  ret i32 %0, !insn.addr !3205
}

define i32 @function_1008142() local_unnamed_addr {
dec_label_pc_1008142:
  %eax.0.reg2mem = alloca i32, !insn.addr !3206
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = or i32 %4, ptrtoint (i16* @global_var_1014021 to i32), !insn.addr !3206
  %6 = add i32 %2, 36, !insn.addr !3207
  %7 = xor i32 %2, -2147483648
  %8 = and i32 %6, %7, !insn.addr !3207
  %9 = icmp slt i32 %8, 0, !insn.addr !3207
  %10 = icmp eq i32 %6, 0, !insn.addr !3207
  %11 = icmp slt i32 %6, 0, !insn.addr !3207
  %12 = icmp eq i1 %11, %9, !insn.addr !3208
  %13 = icmp eq i1 %10, false, !insn.addr !3208
  %14 = icmp eq i1 %12, %13, !insn.addr !3208
  %15 = icmp slt i32 %3, 11, !insn.addr !3209
  %or.cond = or i1 %15, %14
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !3208
  br i1 %or.cond, label %dec_label_pc_1008159, label %dec_label_pc_1008151, !insn.addr !3208

dec_label_pc_1008151:                             ; preds = %dec_label_pc_1008142
  %16 = and i32 %5, 256
  %17 = icmp ne i32 %16, 0, !insn.addr !3210
  %18 = zext i1 %17 to i32, !insn.addr !3211
  %19 = add i32 %5, 16789960, !insn.addr !3211
  %20 = add i32 %19, %18, !insn.addr !3211
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !3212
  br label %dec_label_pc_1008159, !insn.addr !3212

dec_label_pc_1008159:                             ; preds = %dec_label_pc_1008151, %dec_label_pc_1008142
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %21 = trunc i32 %eax.0.reload to i16, !insn.addr !3213
  %22 = inttoptr i32 %1 to i16*, !insn.addr !3214
  %23 = call i16* @wcschr(i16* %22, i16 %21), !insn.addr !3215
  %24 = ptrtoint i16* %23 to i32, !insn.addr !3215
  %25 = add i32 %1, -124, !insn.addr !3216
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3216
  %27 = load i32, i32* %26, align 4, !insn.addr !3216
  %28 = sub i32 %27, %0, !insn.addr !3216
  store i32 %28, i32* %26, align 4, !insn.addr !3216
  ret i32 %24, !insn.addr !3217
}

define i32 @function_1008178() local_unnamed_addr {
dec_label_pc_1008178:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = sdiv i32 %1, 2, !insn.addr !3218
  %3 = add i32 %2, %0, !insn.addr !3219
  ret i32 %3, !insn.addr !3220
}

define i32 @function_1008195() local_unnamed_addr {
dec_label_pc_1008195:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3221
}

define i32 @function_100819a() local_unnamed_addr {
dec_label_pc_100819a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3222
}

define i32 @function_100819d() local_unnamed_addr {
dec_label_pc_100819d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 8
  %3 = call i64 @__decompiler_undefined_function_9()
  %4 = call i64 @__decompiler_undefined_function_9()
  %5 = bitcast i32* %eax to i64*
  %6 = load i64, i64* %5, align 8, !insn.addr !3223
  %7 = call i64 @__asm_pcmpgtd(i64 %4, i64 %6), !insn.addr !3223
  %8 = add i32 %2, -343342010, !insn.addr !3224
  %9 = inttoptr i32 %8 to i8*, !insn.addr !3224
  %10 = load i8, i8* %9, align 1, !insn.addr !3224
  %11 = trunc i32 %2 to i8, !insn.addr !3224
  %12 = add i8 %10, %11, !insn.addr !3224
  store i8 %12, i8* %9, align 1, !insn.addr !3224
  %13 = add i32 %0, -24, !insn.addr !3225
  %14 = inttoptr i32 %13 to i8*, !insn.addr !3225
  %15 = load i8, i8* %14, align 1, !insn.addr !3225
  %16 = trunc i32 %1 to i8, !insn.addr !3225
  %17 = or i8 %15, %16, !insn.addr !3225
  store i8 %17, i8* %14, align 1, !insn.addr !3225
  %18 = call i64 @__asm_psubd(i64 %3, i64 %3), !insn.addr !3226
  ret i32 1962935422, !insn.addr !3227
}

define i32 @function_10081b4() local_unnamed_addr {
dec_label_pc_10081b4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3228
}

define i32 @function_10081b6() local_unnamed_addr {
dec_label_pc_10081b6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, %1, !insn.addr !3229
  %4 = inttoptr i32 %1 to i32*, !insn.addr !3229
  store i32 %3, i32* %4, align 4, !insn.addr !3229
  %5 = call i32 @function_1007cd3(i32 %0), !insn.addr !3230
  ret i32 %5, !insn.addr !3230
}

define i32 @function_10081c1() local_unnamed_addr {
dec_label_pc_10081c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10081c2(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10081c2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3231
}

define i32 @function_10081cc() local_unnamed_addr {
dec_label_pc_10081cc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_cd7c4c(), !insn.addr !3232
  %3 = inttoptr i32 %1 to i32*, !insn.addr !3233
  store i32 %2, i32* %3, align 4, !insn.addr !3233
  %4 = call i32 @unknown_f3007c4c(i32 8, i32 %0), !insn.addr !3234
  %5 = add i32 %1, -963944643, !insn.addr !3235
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3235
  ret i32 %4, !insn.addr !3236
}

define i32 @function_10081f8() local_unnamed_addr {
dec_label_pc_10081f8:
  %0 = call i32 @function_1008213(), !insn.addr !3237
  ret i32 %0, !insn.addr !3237
}

define i32 @function_10081fa() local_unnamed_addr {
dec_label_pc_10081fa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i16, !insn.addr !3238
  %3 = call i8 @__asm_in.3(i16 %2), !insn.addr !3238
  %4 = add i32 %0, 1649805405, !insn.addr !3239
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3239
  %6 = load i32, i32* %5, align 4, !insn.addr !3239
  %7 = lshr i32 %6, 31, !insn.addr !3239
  %8 = mul i32 %6, 2, !insn.addr !3239
  %9 = or i32 %7, %8, !insn.addr !3239
  store i32 %9, i32* %5, align 4, !insn.addr !3239
  %10 = call i32 @function_1008d44(), !insn.addr !3240
  ret i32 %10, !insn.addr !3240
}

define i32 @function_1008213() local_unnamed_addr {
dec_label_pc_1008213:
  %eax.0.reg2mem = alloca i32, !insn.addr !3241
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %0 to i8
  %6 = udiv i8 %5, 32, !insn.addr !3242
  %7 = mul i8 %5, 8, !insn.addr !3242
  %8 = or i8 %6, %7, !insn.addr !3242
  %9 = inttoptr i32 %0 to i8*, !insn.addr !3242
  store i8 %8, i8* %9, align 1, !insn.addr !3242
  %10 = call i32 @function_1008f17(), !insn.addr !3243
  %11 = trunc i32 %10 to i8, !insn.addr !3244
  %12 = udiv i32 %10, 256, !insn.addr !3244
  %13 = trunc i32 %12 to i8, !insn.addr !3244
  %14 = mul i8 %13, -64, !insn.addr !3244
  %15 = add i8 %14, %11, !insn.addr !3244
  %16 = zext i8 %15 to i32, !insn.addr !3244
  %17 = and i32 %10, -65536, !insn.addr !3244
  %18 = or i32 %17, %16, !insn.addr !3244
  %19 = icmp eq i8 %15, 0, !insn.addr !3244
  %20 = icmp eq i1 %19, false, !insn.addr !3245
  store i32 %18, i32* %eax.0.reg2mem, !insn.addr !3245
  br i1 %20, label %21, label %dec_label_pc_100822f, !insn.addr !3245

; <label>:21:                                     ; preds = %dec_label_pc_1008213
  %22 = call i32 @function_1012b40(), !insn.addr !3245
  store i32 %22, i32* %eax.0.reg2mem, !insn.addr !3245
  br label %dec_label_pc_100822f, !insn.addr !3245

dec_label_pc_100822f:                             ; preds = %21, %dec_label_pc_1008213
  %23 = icmp slt i8 %15, 0, !insn.addr !3244
  br i1 %23, label %dec_label_pc_10082a6, label %dec_label_pc_1008231, !insn.addr !3246

dec_label_pc_1008231:                             ; preds = %dec_label_pc_100822f
  %24 = call i32 @unknown_1000db0(), !insn.addr !3247
  %25 = add i32 %1, -4, !insn.addr !3248
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3248
  %27 = call i32 @function_1007c26(), !insn.addr !3249
  ret i32 %3, !insn.addr !3250

dec_label_pc_10082a6:                             ; preds = %dec_label_pc_100822f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %28 = add i32 %1, 1, !insn.addr !3251
  %29 = add i32 %eax.0.reload, 18, !insn.addr !3252
  %30 = inttoptr i32 %29 to i32*, !insn.addr !3252
  %31 = load i32, i32* %30, align 4, !insn.addr !3252
  %32 = trunc i32 %3 to i16, !insn.addr !3253
  %33 = call i32 @__asm_insd(i16 %32), !insn.addr !3253
  %34 = inttoptr i32 %31 to i32*, !insn.addr !3253
  store i32 %33, i32* %34, align 4, !insn.addr !3253
  %35 = add i32 %1, 1048589, !insn.addr !3254
  %36 = inttoptr i32 %35 to i8*, !insn.addr !3254
  %37 = load i8, i8* %36, align 1, !insn.addr !3254
  %38 = trunc i32 %4 to i8, !insn.addr !3254
  store i8 %38, i8* %36, align 1, !insn.addr !3254
  %39 = zext i8 %37 to i32, !insn.addr !3254
  %40 = and i32 %4, -256, !insn.addr !3254
  %41 = or i32 %40, %39, !insn.addr !3254
  %42 = udiv i32 %41, 4, !insn.addr !3255
  %43 = inttoptr i32 %2 to i8*, !insn.addr !3256
  %44 = inttoptr i32 %31 to i8*, !insn.addr !3256
  call void @__asm_rep_movsd_memcpy(i8* %44, i8* %43, i32 %42), !insn.addr !3256
  %45 = and i8 %37, 45, !insn.addr !3257
  %46 = inttoptr i32 %28 to i8*, !insn.addr !3258
  %47 = load i8, i8* %46, align 1, !insn.addr !3258
  %48 = trunc i32 %28 to i8, !insn.addr !3258
  %49 = add i8 %47, %48, !insn.addr !3258
  %50 = icmp ult i8 %49, %47, !insn.addr !3258
  store i8 %49, i8* %46, align 1, !insn.addr !3258
  %51 = add i32 %1, -3, !insn.addr !3259
  %52 = inttoptr i32 %51 to i32*, !insn.addr !3259
  %53 = load i32, i32* %52, align 4, !insn.addr !3259
  %54 = and i32 %53, -256, !insn.addr !3260
  %55 = add i32 %2, 1892414789, !insn.addr !3261
  %56 = inttoptr i32 %55 to i8*, !insn.addr !3261
  %57 = load i8, i8* %56, align 1, !insn.addr !3261
  %58 = add i8 %57, %45, !insn.addr !3261
  store i8 %58, i8* %56, align 1, !insn.addr !3261
  %59 = select i1 %50, i32 29, i32 28, !insn.addr !3262
  %60 = or i32 %54, %59, !insn.addr !3262
  ret i32 %60, !insn.addr !3262
}

define i32 @function_1008315() local_unnamed_addr {
dec_label_pc_1008315:
  %0 = call i32 @function_8ca6761c(), !insn.addr !3263
  ret i32 %0, !insn.addr !3263
}

define i32 @function_1008322() local_unnamed_addr {
dec_label_pc_1008322:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @function_1007c8e(i32 %1, i32 -2147439872), !insn.addr !3264
  %3 = call i32 @unknown_60c80f24(), !insn.addr !3265
  %4 = trunc i32 %3 to i8, !insn.addr !3266
  %5 = inttoptr i32 %0 to i8*, !insn.addr !3266
  store i8 %4, i8* %5, align 1, !insn.addr !3266
  ret i32 %3, !insn.addr !3267
}

define i32 @function_1008356(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008356:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1008358() local_unnamed_addr {
dec_label_pc_1008358:
  %ebx.0.reg2mem = alloca i32, !insn.addr !3268
  %eax.1.reg2mem = alloca i32, !insn.addr !3268
  %esi.0.reg2mem = alloca i32, !insn.addr !3268
  %edx.0.reg2mem = alloca i32, !insn.addr !3268
  %ecx.0.reg2mem = alloca i32, !insn.addr !3268
  %eax.0.reg2mem = alloca i32, !insn.addr !3268
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_9()
  %stack_var_-52 = alloca i8*, align 4
  %stack_var_-36 = alloca i32, align 4
  %4 = trunc i32 %1 to i16, !insn.addr !3268
  %5 = call i8 @__asm_in.3(i16 %4), !insn.addr !3268
  %6 = sext i8 %5 to i32, !insn.addr !3268
  %7 = and i32 %2, -256, !insn.addr !3268
  %8 = or i32 %7, %6, !insn.addr !3268
  %9 = load i32, i32* inttoptr (i32 27086684 to i32*), align 4, !insn.addr !3269
  %10 = add i32 %9, -4, !insn.addr !3270
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3270
  store i32 0, i32* %11, align 4, !insn.addr !3270
  %12 = add i32 %0, 12, !insn.addr !3271
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3271
  %14 = load i32, i32* %13, align 4, !insn.addr !3271
  %15 = ptrtoint i32* %stack_var_-36 to i32, !insn.addr !3272
  %16 = add i32 %0, 8, !insn.addr !3273
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3273
  %18 = load i32, i32* %17, align 4, !insn.addr !3273
  %19 = sub i32 %14, %15, !insn.addr !3274
  %20 = mul i32 %18, 4, !insn.addr !3275
  %21 = add i32 %19, 1569165393, !insn.addr !3275
  %22 = add i32 %21, %20, !insn.addr !3275
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3275
  %24 = load i32, i32* %23, align 4, !insn.addr !3275
  %25 = and i32 %24, -16, !insn.addr !3275
  store i32 %25, i32* %23, align 4, !insn.addr !3275
  store i32 %8, i32* %17, align 4, !insn.addr !3276
  %26 = load i32, i32* %stack_var_-36, align 4, !insn.addr !3277
  %27 = call i32 @function_1007cd3(i32 %26), !insn.addr !3277
  %28 = add i32 %27, 75, !insn.addr !3278
  %29 = inttoptr i32 %28 to i32*, !insn.addr !3278
  %30 = load i32, i32* %29, align 4, !insn.addr !3278
  %31 = add i32 %27, 8, !insn.addr !3279
  %32 = inttoptr i32 %31 to i32*, !insn.addr !3279
  %33 = load i32, i32* %32, align 4, !insn.addr !3279
  %34 = load i32, i32* inttoptr (i32 21516253 to i32*), align 4, !insn.addr !3280
  %35 = add i32 %33, %30, !insn.addr !3281
  %36 = add i32 %0, -12, !insn.addr !3282
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3282
  store i32 %30, i32* %37, align 4, !insn.addr !3282
  %38 = icmp sle i32 %35, %34, !insn.addr !3283
  %39 = icmp eq i32 %19, 0, !insn.addr !3284
  %40 = icmp eq i1 %39, false, !insn.addr !3285
  %or.cond = or i1 %40, %38
  br i1 %or.cond, label %dec_label_pc_10083a3, label %dec_label_pc_100839c, !insn.addr !3283

dec_label_pc_100839c:                             ; preds = %dec_label_pc_1008358
  %41 = add i32 %0, 33, !insn.addr !3286
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3286
  store i32 167823873, i32* %42, align 4, !insn.addr !3286
  br label %dec_label_pc_10083a3, !insn.addr !3286

dec_label_pc_10083a3:                             ; preds = %dec_label_pc_1008358, %dec_label_pc_100839c
  %43 = icmp sgt i32 %30, %34, !insn.addr !3287
  br i1 %43, label %dec_label_pc_10083a7, label %dec_label_pc_10083b5, !insn.addr !3287

dec_label_pc_10083a7:                             ; preds = %dec_label_pc_10083a3
  %44 = icmp ult i32 %30, %34, !insn.addr !3288
  store i32 %34, i32* %37, align 4, !insn.addr !3289
  %45 = mul i32 %1, 2, !insn.addr !3290
  %46 = add i32 %0, 32, !insn.addr !3290
  %47 = add i32 %46, %45, !insn.addr !3290
  %48 = select i1 %44, i32 98, i32 97, !insn.addr !3291
  %49 = sub i32 %47, %48, !insn.addr !3291
  %50 = and i32 %49, 255, !insn.addr !3291
  %51 = and i32 %47, -256, !insn.addr !3291
  %52 = or i32 %50, %51, !insn.addr !3291
  ret i32 %52, !insn.addr !3292

dec_label_pc_10083b5:                             ; preds = %dec_label_pc_10083a3
  %53 = icmp eq i32 %0, 1, !insn.addr !3293
  %54 = load i32, i32* inttoptr (i32 1081365 to i32*), align 4, !insn.addr !3294
  %55 = add i32 %0, -329414182, !insn.addr !3295
  %56 = inttoptr i32 %55 to i64*, !insn.addr !3295
  %57 = load i64, i64* %56, align 4, !insn.addr !3295
  %58 = call i64 @__asm_psubusb(i64 %3, i64 %57), !insn.addr !3295
  %59 = icmp eq i1 %53, false, !insn.addr !3296
  br i1 %59, label %dec_label_pc_10083d0, label %dec_label_pc_10083c6, !insn.addr !3296

dec_label_pc_10083c6:                             ; preds = %dec_label_pc_10083b5
  %60 = and i32 %54, -256, !insn.addr !3297
  ret i32 %60, !insn.addr !3298

dec_label_pc_10083d0:                             ; preds = %dec_label_pc_10083b5
  %61 = add i32 %0, 7, !insn.addr !3299
  %62 = inttoptr i32 %61 to i32*, !insn.addr !3299
  %63 = load i32, i32* %62, align 4, !insn.addr !3299
  %64 = call i32 @function_100c318(i32 %63), !insn.addr !3300
  %65 = icmp eq i32 %64, 0, !insn.addr !3301
  %66 = load i8, i8* @global_var_1014f5c, align 1, !insn.addr !3302
  %67 = sext i8 %66 to i32, !insn.addr !3302
  %68 = icmp eq i1 %65, false, !insn.addr !3303
  store i32 %64, i32* %eax.0.reg2mem, !insn.addr !3303
  store i32 %30, i32* %ecx.0.reg2mem, !insn.addr !3303
  store i32 %67, i32* %esi.0.reg2mem, !insn.addr !3303
  br i1 %68, label %dec_label_pc_1008436, label %dec_label_pc_10083e2, !insn.addr !3303

dec_label_pc_10083e2:                             ; preds = %dec_label_pc_10083d0
  %69 = load i32, i32* %62, align 4, !insn.addr !3304
  %70 = add i32 %69, -1283218760, !insn.addr !3305
  %71 = add nsw i32 %67, 1, !insn.addr !3306
  %72 = inttoptr i32 %30 to i32*, !insn.addr !3307
  %73 = load i32, i32* %72, align 4, !insn.addr !3307
  %74 = add i32 %73, %71, !insn.addr !3307
  store i32 %74, i32* %72, align 4, !insn.addr !3307
  %75 = call i32 @unknown_a7007c4c(i32 %71, i32 %71), !insn.addr !3308
  %76 = load i8*, i8** @global_var_1014010, align 4
  %77 = ptrtoint i8* %76 to i32
  %78 = bitcast i8** %stack_var_-52 to i32*
  store i32 %77, i32* %78, align 4
  %79 = add i32 %0, -5, !insn.addr !3309
  %80 = inttoptr i32 %79 to i32*, !insn.addr !3309
  store i32 %75, i32* %80, align 4, !insn.addr !3309
  %81 = and i32 %30, -256, !insn.addr !3310
  %82 = or i32 %81, 53, !insn.addr !3310
  %83 = load i8*, i8** %stack_var_-52, align 4, !insn.addr !3311
  %84 = ptrtoint i8* %83 to i32, !insn.addr !3311
  %85 = call i32 @function_100b0e7(i32 %75, i32 -1073675953, i32 %84), !insn.addr !3311
  %86 = load i32, i32* %17, align 4, !insn.addr !3312
  %87 = add i32 %86, 5, !insn.addr !3313
  %88 = inttoptr i32 %87 to i32*, !insn.addr !3313
  %89 = load i32, i32* %88, align 4, !insn.addr !3313
  %90 = call i32 @__asm_int1(), !insn.addr !3314
  %91 = add nsw i32 %82, 4, !insn.addr !3315
  %92 = inttoptr i32 %91 to i32*, !insn.addr !3315
  %93 = load i32, i32* %92, align 4, !insn.addr !3315
  %94 = sub i32 %89, %93, !insn.addr !3315
  %95 = add i32 %90, 4, !insn.addr !3316
  %96 = inttoptr i32 %95 to i32*, !insn.addr !3316
  %97 = load i32, i32* %96, align 4, !insn.addr !3316
  %98 = add i32 %94, %97, !insn.addr !3316
  %99 = load i32, i32* inttoptr (i32 27707740 to i32*), align 4, !insn.addr !3317
  %100 = sub i32 %98, %99, !insn.addr !3317
  %101 = add i32 %0, 6, !insn.addr !3318
  %102 = inttoptr i32 %101 to i32*, !insn.addr !3318
  %103 = load i32, i32* %102, align 4, !insn.addr !3318
  %104 = add i32 %0, -6, !insn.addr !3319
  %105 = inttoptr i32 %104 to i32*, !insn.addr !3319
  %106 = load i32, i32* %105, align 4, !insn.addr !3319
  %107 = or i32 %106, -116, !insn.addr !3319
  store i32 %107, i32* %105, align 4, !insn.addr !3319
  %108 = inttoptr i32 %82 to i32*, !insn.addr !3320
  store i32 %103, i32* %108, align 4, !insn.addr !3320
  %109 = load i8, i8* @global_var_1014f5c, align 1, !insn.addr !3321
  %110 = sext i8 %109 to i32, !insn.addr !3321
  store i32 %103, i32* %eax.0.reg2mem, !insn.addr !3321
  store i32 %110, i32* %ecx.0.reg2mem, !insn.addr !3321
  store i32 %100, i32* %edx.0.reg2mem, !insn.addr !3321
  store i32 %70, i32* %esi.0.reg2mem, !insn.addr !3321
  br label %dec_label_pc_1008436, !insn.addr !3321

dec_label_pc_1008436:                             ; preds = %dec_label_pc_10083e2, %dec_label_pc_10083d0
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %111 = add i32 %19, 980746252, !insn.addr !3322
  %112 = inttoptr i32 %111 to i32*, !insn.addr !3322
  %113 = load i32, i32* %112, align 4, !insn.addr !3322
  %114 = add i32 %113, 127, !insn.addr !3322
  store i32 %114, i32* %112, align 4, !insn.addr !3322
  %115 = sub i32 %eax.0.reload, %esi.0.reload, !insn.addr !3323
  %116 = trunc i32 %ecx.0.reload to i8
  store i32 %19, i32* %eax.1.reg2mem, !insn.addr !3324
  store i32 %115, i32* %ebx.0.reg2mem, !insn.addr !3324
  br label %dec_label_pc_1008444, !insn.addr !3324

dec_label_pc_1008444:                             ; preds = %dec_label_pc_1008448, %dec_label_pc_1008436
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %117 = icmp sgt i32 %eax.1.reload, %edx.0.reload, !insn.addr !3325
  br i1 %117, label %dec_label_pc_100846f, label %dec_label_pc_1008448, !insn.addr !3325

dec_label_pc_1008448:                             ; preds = %dec_label_pc_1008444
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %118 = add i32 %ebx.0.reload, -1036842298, !insn.addr !3326
  %119 = inttoptr i32 %118 to i8*, !insn.addr !3326
  %120 = load i8, i8* %119, align 1, !insn.addr !3326
  %121 = and i8 %120, %116, !insn.addr !3326
  store i8 %121, i8* %119, align 1, !insn.addr !3326
  %122 = sub i32 %eax.1.reload, %edx.0.reload, !insn.addr !3327
  %123 = add i32 %eax.1.reload, 2146457335, !insn.addr !3328
  %124 = inttoptr i32 %123 to i32*, !insn.addr !3328
  %125 = load i32, i32* %124, align 4, !insn.addr !3328
  %126 = add i32 %125, %122, !insn.addr !3328
  %127 = add i32 %ebx.0.reload, 1, !insn.addr !3329
  %128 = trunc i32 %126 to i8, !insn.addr !3330
  %129 = udiv i8 %128, 19, !insn.addr !3330
  %130 = urem i8 %128, 19, !insn.addr !3330
  %131 = zext i8 %130 to i32, !insn.addr !3330
  %132 = and i32 %126, -65536, !insn.addr !3330
  %133 = or i32 %132, %131, !insn.addr !3330
  %134 = zext i8 %129 to i32, !insn.addr !3330
  %135 = mul i32 %134, 256, !insn.addr !3330
  %136 = or i32 %133, %135, !insn.addr !3330
  %137 = icmp eq i32 %136, 0, !insn.addr !3331
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !3332
  store i32 %127, i32* %ebx.0.reg2mem, !insn.addr !3332
  br i1 %137, label %dec_label_pc_1008444, label %dec_label_pc_1008464, !insn.addr !3332

dec_label_pc_1008464:                             ; preds = %dec_label_pc_1008448
  %138 = add nsw i32 %136, 71, !insn.addr !3333
  %139 = inttoptr i32 %138 to i32*, !insn.addr !3333
  %140 = load i32, i32* %139, align 4, !insn.addr !3333
  %141 = sub i32 %140, %ecx.0.reload, !insn.addr !3333
  store i32 %141, i32* %139, align 4, !insn.addr !3333
  %142 = call i32 @function_1008476(), !insn.addr !3334
  ret i32 %142, !insn.addr !3334

dec_label_pc_100846f:                             ; preds = %dec_label_pc_1008444
  ret i32 %eax.1.reload, !insn.addr !3334
}

define i32 @function_1008472() local_unnamed_addr {
dec_label_pc_1008472:
  %eax = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = mul i32 %0, 2, !insn.addr !3335
  %2 = inttoptr i32 %0 to i32*, !insn.addr !3335
  store i32 %1, i32* %2, align 4, !insn.addr !3335
  %3 = bitcast i32* %eax to i8*
  %4 = load i8, i8* %3, align 4, !insn.addr !3336
  %5 = load i32, i32* %eax, align 4
  %6 = trunc i32 %5 to i8, !insn.addr !3336
  %7 = add i8 %4, %6, !insn.addr !3336
  %8 = inttoptr i32 %5 to i8*, !insn.addr !3336
  store i8 %7, i8* %8, align 1, !insn.addr !3336
  %9 = load i32, i32* %eax, align 4, !insn.addr !3336
  ret i32 %9, !insn.addr !3336
}

define i32 @function_1008476() local_unnamed_addr {
dec_label_pc_1008476:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, 77, !insn.addr !3337
  %5 = inttoptr i32 %4 to i8*, !insn.addr !3337
  %6 = load i8, i8* %5, align 1, !insn.addr !3337
  %7 = udiv i32 %3, 256, !insn.addr !3337
  %8 = trunc i32 %7 to i8, !insn.addr !3337
  %9 = add i8 %6, %8, !insn.addr !3337
  store i8 %9, i8* %5, align 1, !insn.addr !3337
  %10 = load i8*, i8** @global_var_1014010, align 4
  %11 = ptrtoint i8* %10 to i32
  %sext = mul i32 %0, 65536
  %12 = sdiv i32 %sext, 65536, !insn.addr !3338
  %13 = call i32 @function_1011a3c(i32 %12, i32 %11), !insn.addr !3338
  %14 = call i32 @function_2c08c6c5(i32 %1), !insn.addr !3339
  ret i32 %14, !insn.addr !3339
}

define i32 @function_10084a5(i32 %arg1) local_unnamed_addr {
dec_label_pc_10084a5:
  %ebx.248.reg2mem = alloca i32, !insn.addr !3340
  %ebx.2.ph.reg2mem = alloca i32, !insn.addr !3340
  %ebx.1.reg2mem = alloca i32, !insn.addr !3340
  %ecx.0.reg2mem = alloca i32, !insn.addr !3340
  %eax.2.reg2mem = alloca i32, !insn.addr !3340
  %az.0.reg2mem = alloca i1, !insn.addr !3340
  %edi.0.reg2mem = alloca i32, !insn.addr !3340
  %esp.1.reg2mem = alloca i32, !insn.addr !3340
  %eax.1.reg2mem = alloca i32, !insn.addr !3340
  %ebp.1.in.reg2mem = alloca i32, !insn.addr !3340
  %ebx.0.reg2mem = alloca i32, !insn.addr !3340
  %eax.0.reg2mem = alloca i32, !insn.addr !3340
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  %6 = add i32 %1, -4
  %7 = inttoptr i32 %6 to i32*
  %8 = icmp eq i32 %4, 0
  br label %dec_label_pc_10084ab, !insn.addr !3341

dec_label_pc_10084ab:                             ; preds = %dec_label_pc_10084ab, %dec_label_pc_10084a5
  %9 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3342
  store i32 0, i32* %7, align 4, !insn.addr !3343
  br i1 %8, label %dec_label_pc_10084d2, label %dec_label_pc_10084ab, !insn.addr !3344

dec_label_pc_10084d2:                             ; preds = %dec_label_pc_10084ab
  %10 = trunc i32 %3 to i16, !insn.addr !3345
  call void @__asm_outsd(i16 %10, i32 %0), !insn.addr !3345
  %11 = add i32 %2, -469186875, !insn.addr !3346
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3346
  %13 = load i32, i32* %12, align 4, !insn.addr !3346
  %14 = call i32 @unknown_3a414516(), !insn.addr !3347
  %15 = udiv i32 %3, 256
  %16 = trunc i32 %15 to i8
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !3347
  br label %dec_label_pc_10084e3, !insn.addr !3347

dec_label_pc_10084e3:                             ; preds = %dec_label_pc_10084ef, %dec_label_pc_10084d2
  %ebp.1.in.reload = load i32, i32* %ebp.1.in.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %17 = or i32 %eax.0.reload, 106, !insn.addr !3348
  %18 = trunc i32 %ebx.0.reload to i8, !insn.addr !3349
  %19 = load i8, i8* inttoptr (i32 116 to i8*), align 4, !insn.addr !3349
  %20 = add i8 %19, %18, !insn.addr !3349
  %21 = zext i8 %20 to i32, !insn.addr !3349
  %22 = and i32 %ebx.0.reload, -256, !insn.addr !3349
  %23 = or i32 %22, %21, !insn.addr !3349
  %24 = add i32 %ebp.1.in.reload, 14, !insn.addr !3350
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3350
  %26 = load i32, i32* %25, align 4, !insn.addr !3350
  %27 = icmp eq i32 %26, 0, !insn.addr !3350
  br i1 %27, label %dec_label_pc_10084f9.loopexit, label %dec_label_pc_10084ef, !insn.addr !3351

dec_label_pc_10084ef:                             ; preds = %dec_label_pc_10084e3
  %ebp.1 = add i32 %ebp.1.in.reload, 1
  %28 = add nsw i32 %17, -17, !insn.addr !3352
  %29 = load i8, i8* inttoptr (i32 -92 to i8*), align 4, !insn.addr !3353
  %30 = add i8 %29, %16, !insn.addr !3353
  %31 = xor i8 %30, %29, !insn.addr !3353
  %32 = xor i8 %30, %16, !insn.addr !3353
  %33 = and i8 %31, %32, !insn.addr !3353
  %34 = icmp slt i8 %33, 0, !insn.addr !3353
  %35 = icmp slt i8 %30, 0, !insn.addr !3353
  store i8 %30, i8* inttoptr (i32 -92 to i8*), align 4, !insn.addr !3353
  %36 = icmp eq i1 %35, %34, !insn.addr !3354
  store i32 %28, i32* %eax.0.reg2mem, !insn.addr !3354
  store i32 %23, i32* %ebx.0.reg2mem, !insn.addr !3354
  store i32 %ebp.1, i32* %ebp.1.in.reg2mem, !insn.addr !3354
  br i1 %36, label %dec_label_pc_10084e3, label %dec_label_pc_10084f8, !insn.addr !3354

dec_label_pc_10084f8:                             ; preds = %dec_label_pc_10084ef
  %37 = sext i16 %5 to i32, !insn.addr !3355
  %38 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !3355
  store i32 %28, i32* %eax.1.reg2mem, !insn.addr !3355
  store i32 %38, i32* %esp.1.reg2mem, !insn.addr !3355
  store i32 %37, i32* %edi.0.reg2mem, !insn.addr !3355
  br label %dec_label_pc_10084f9, !insn.addr !3355

dec_label_pc_10084f9.loopexit:                    ; preds = %dec_label_pc_10084e3
  %39 = add nsw i32 %17, -1, !insn.addr !3356
  store i32 %39, i32* %eax.1.reg2mem
  store i32 0, i32* %edi.0.reg2mem
  br label %dec_label_pc_10084f9

dec_label_pc_10084f9:                             ; preds = %dec_label_pc_10084f9.loopexit, %dec_label_pc_10084f8
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %40 = add i32 %edi.0.reload, %23, !insn.addr !3357
  %41 = and i32 %40, 65535
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3357
  %43 = load i32, i32* %42, align 4, !insn.addr !3357
  %44 = and i32 %43, %edi.0.reload, !insn.addr !3357
  %45 = icmp slt i32 %44, 0, !insn.addr !3357
  store i32 %44, i32* %42, align 4, !insn.addr !3357
  %46 = icmp eq i1 %45, false, !insn.addr !3358
  br i1 %46, label %dec_label_pc_100855f, label %dec_label_pc_1008505, !insn.addr !3358

dec_label_pc_1008505:                             ; preds = %dec_label_pc_10084f9
  %47 = icmp eq i32 %44, 0, !insn.addr !3357
  %48 = icmp eq i1 %47, false, !insn.addr !3359
  br i1 %48, label %dec_label_pc_1008521, label %dec_label_pc_1008507, !insn.addr !3359

dec_label_pc_1008507:                             ; preds = %dec_label_pc_1008505
  %49 = add i32 %esp.1.reload, -4, !insn.addr !3360
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3360
  store i32 3, i32* %50, align 4, !insn.addr !3360
  %51 = ashr i32 %eax.1.reload, 31, !insn.addr !3361
  %52 = zext i32 %eax.1.reload to i64, !insn.addr !3362
  %53 = zext i32 %51 to i64, !insn.addr !3362
  %54 = mul i64 %53, 4294967296, !insn.addr !3362
  %55 = or i64 %54, %52, !insn.addr !3362
  %56 = sdiv i64 %55, 3, !insn.addr !3362
  %57 = trunc i64 %56 to i32, !insn.addr !3362
  %58 = srem i64 %55, 3, !insn.addr !3362
  %59 = trunc i64 %58 to i32, !insn.addr !3362
  %60 = add i32 %ebp.1.in.reload, -5, !insn.addr !3363
  %61 = inttoptr i32 %60 to i32*, !insn.addr !3363
  %62 = load i32, i32* %61, align 4, !insn.addr !3363
  %63 = sub i32 %62, %59, !insn.addr !3363
  store i32 %63, i32* %61, align 4, !insn.addr !3363
  %64 = add i32 %23, 1837302713, !insn.addr !3364
  %65 = inttoptr i32 %64 to i32*, !insn.addr !3364
  %66 = load i32, i32* %65, align 4, !insn.addr !3364
  %67 = or i32 %66, %57, !insn.addr !3364
  ret i32 %67, !insn.addr !3365

dec_label_pc_1008521:                             ; preds = %dec_label_pc_1008505
  %68 = add nsw i32 %edi.0.reload, 85, !insn.addr !3366
  %69 = inttoptr i32 %68 to i32*, !insn.addr !3366
  %70 = load i32, i32* %69, align 4, !insn.addr !3366
  %71 = add i32 %70, -117, !insn.addr !3366
  %72 = icmp ult i32 %70, 117, !insn.addr !3366
  store i32 %71, i32* %69, align 4, !insn.addr !3366
  %73 = add i32 %23, 1919546493, !insn.addr !3367
  %74 = inttoptr i32 %73 to i32*, !insn.addr !3367
  %75 = load i32, i32* %74, align 4, !insn.addr !3367
  %76 = zext i1 %72 to i32, !insn.addr !3367
  %77 = add i32 %75, %eax.1.reload, !insn.addr !3367
  %78 = add i32 %77, %76, !insn.addr !3367
  store i32 %78, i32* %74, align 4, !insn.addr !3367
  %79 = add i32 %23, -159055165, !insn.addr !3368
  %80 = inttoptr i32 %79 to i8*, !insn.addr !3368
  %81 = load i8, i8* %80, align 1, !insn.addr !3368
  %82 = trunc i32 %eax.1.reload to i8, !insn.addr !3368
  %83 = add i8 %81, %82, !insn.addr !3368
  %84 = xor i8 %83, %81, !insn.addr !3368
  %85 = xor i8 %83, %82, !insn.addr !3368
  %86 = and i8 %84, %85, !insn.addr !3368
  %87 = icmp slt i8 %86, 0, !insn.addr !3368
  %88 = icmp eq i8 %83, 0, !insn.addr !3368
  %89 = icmp slt i8 %83, 0, !insn.addr !3368
  store i8 %83, i8* %80, align 1, !insn.addr !3368
  %90 = icmp eq i1 %89, %87, !insn.addr !3369
  %91 = icmp eq i1 %88, false, !insn.addr !3369
  %92 = icmp eq i1 %90, %91, !insn.addr !3369
  br i1 %92, label %dec_label_pc_1008544, label %dec_label_pc_100853d, !insn.addr !3369

dec_label_pc_100853d:                             ; preds = %dec_label_pc_1008521
  %93 = add i32 %ebp.1.in.reload, -13, !insn.addr !3370
  %94 = inttoptr i32 %93 to i32*, !insn.addr !3370
  %95 = load i32, i32* %94, align 4, !insn.addr !3370
  %96 = icmp eq i32 %95, 0, !insn.addr !3370
  %97 = icmp slt i32 %eax.1.reload, 0, !insn.addr !3371
  %98 = or i1 %97, %96
  %99 = icmp eq i1 %98, false
  br i1 %99, label %dec_label_pc_1008577, label %dec_label_pc_1008543, !insn.addr !3372

dec_label_pc_1008543:                             ; preds = %dec_label_pc_100853d
  ret i32 %eax.1.reload, !insn.addr !3372

dec_label_pc_1008544:                             ; preds = %dec_label_pc_1008521
  %100 = inttoptr i32 %23 to i32*, !insn.addr !3373
  store i32 -1579352016, i32* %100, align 4, !insn.addr !3373
  %101 = add i32 %eax.1.reload, 192, !insn.addr !3374
  %102 = and i32 %101, 255, !insn.addr !3374
  %103 = and i32 %eax.1.reload, -256, !insn.addr !3374
  %104 = or i32 %102, %103, !insn.addr !3374
  %105 = add i32 %104, %23, !insn.addr !3375
  %106 = inttoptr i32 %105 to i32*, !insn.addr !3375
  %107 = load i32, i32* %106, align 4, !insn.addr !3375
  %108 = add i32 %107, %esp.1.reload, !insn.addr !3375
  store i32 %108, i32* %106, align 4, !insn.addr !3375
  %109 = add i32 %eax.1.reload, -119, !insn.addr !3376
  %110 = inttoptr i32 %109 to x86_fp80*, !insn.addr !3376
  %111 = load x86_fp80, x86_fp80* %110, align 4, !insn.addr !3376
  %112 = call x86_fp80 @__asm_fbld(x86_fp80 %111), !insn.addr !3376
  %113 = load i32, i32* %100, align 4, !insn.addr !3377
  %114 = add i32 %113, %104, !insn.addr !3377
  ret i32 %114, !insn.addr !3377

dec_label_pc_100855f:                             ; preds = %dec_label_pc_10084f9
  %115 = udiv i32 %13, 2, !insn.addr !3378
  %116 = inttoptr i32 %23 to i8*, !insn.addr !3379
  call void @__asm_rep_stosd_memset(i8* %116, i32 3145776, i32 %115), !insn.addr !3379
  %117 = add i32 %esp.1.reload, -4, !insn.addr !3380
  %118 = inttoptr i32 %117 to i32*, !insn.addr !3380
  store i32 2, i32* %118, align 4, !insn.addr !3380
  ret i32 3145776, !insn.addr !3381

dec_label_pc_1008577:                             ; preds = %dec_label_pc_100853d
  %119 = add i32 %23, %3, !insn.addr !3382
  %120 = icmp slt i32 %eax.1.reload, 1
  store i32 %23, i32* %ebx.2.ph.reg2mem, !insn.addr !3383
  br i1 %120, label %dec_label_pc_10085be.preheader, label %dec_label_pc_100857e, !insn.addr !3383

dec_label_pc_100857e:                             ; preds = %dec_label_pc_1008577
  %121 = add i32 %ebp.1.in.reload, -21, !insn.addr !3384
  %122 = inttoptr i32 %121 to i32*, !insn.addr !3384
  %123 = load i32, i32* %122, align 4, !insn.addr !3384
  %124 = add i32 %eax.1.reload, -74, !insn.addr !3385
  %125 = inttoptr i32 %124 to i32*, !insn.addr !3385
  %126 = add i32 %eax.1.reload, 102, !insn.addr !3386
  %127 = inttoptr i32 %126 to i32*, !insn.addr !3386
  %128 = trunc i32 %119 to i16
  store i1 false, i1* %az.0.reg2mem, !insn.addr !3384
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !3384
  store i32 %123, i32* %ecx.0.reg2mem, !insn.addr !3384
  store i32 %23, i32* %ebx.1.reg2mem, !insn.addr !3384
  br label %dec_label_pc_1008581, !insn.addr !3384

dec_label_pc_1008581:                             ; preds = %dec_label_pc_10085a4, %dec_label_pc_100857e
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %az.0.reload = load i1, i1* %az.0.reg2mem
  %129 = and i32 %eax.2.reload, 14
  %130 = icmp ugt i32 %129, 9, !insn.addr !3387
  %131 = or i1 %az.0.reload, %130, !insn.addr !3387
  %132 = add i32 %eax.2.reload, 10, !insn.addr !3387
  %133 = select i1 %131, i32 %132, i32 %eax.2.reload, !insn.addr !3387
  %134 = and i32 %133, 15, !insn.addr !3387
  %135 = load i32, i32* %125, align 4, !insn.addr !3385
  %136 = zext i1 %131 to i32, !insn.addr !3385
  %137 = add i32 %135, %esp.1.reload, !insn.addr !3385
  %138 = add i32 %137, %136, !insn.addr !3385
  %139 = icmp ule i32 %138, %135, !insn.addr !3385
  %140 = icmp ult i32 %137, %135, !insn.addr !3385
  %141 = select i1 %131, i1 %139, i1 %140, !insn.addr !3385
  store i32 %138, i32* %125, align 4, !insn.addr !3385
  %142 = zext i1 %141 to i32, !insn.addr !3388
  %143 = add nuw nsw i32 %134, 85, !insn.addr !3388
  %144 = add nuw nsw i32 %143, %142, !insn.addr !3388
  %145 = add i32 %ebx.1.reload, 1, !insn.addr !3389
  %146 = inttoptr i32 %145 to i8*, !insn.addr !3389
  %147 = load i8, i8* %146, align 1, !insn.addr !3389
  %148 = trunc i32 %144 to i8, !insn.addr !3389
  %149 = or i8 %147, %148, !insn.addr !3389
  store i8 %149, i8* %146, align 1, !insn.addr !3389
  %150 = load i32, i32* %127, align 4, !insn.addr !3386
  %151 = add i32 %150, %ecx.0.reload, !insn.addr !3386
  store i32 %151, i32* %127, align 4, !insn.addr !3386
  %152 = inttoptr i32 %ebx.1.reload to i32*, !insn.addr !3390
  store i32 %119, i32* %152, align 4, !insn.addr !3390
  %153 = add i32 %ebx.1.reload, %edi.0.reload, !insn.addr !3391
  %154 = add i32 %ecx.0.reload, -4, !insn.addr !3392
  %155 = call i32 @unknown_168beba7(), !insn.addr !3393
  %156 = add i32 %155, 192, !insn.addr !3394
  %157 = and i32 %156, 255, !insn.addr !3394
  %158 = and i32 %155, -256, !insn.addr !3394
  %159 = or i32 %157, %158, !insn.addr !3394
  %160 = inttoptr i32 %154 to i32*, !insn.addr !3395
  %161 = load i32, i32* %160, align 4, !insn.addr !3395
  %162 = add i32 %159, %161, !insn.addr !3395
  %163 = icmp ult i32 %162, %161, !insn.addr !3395
  %164 = icmp eq i32 %162, 0, !insn.addr !3395
  store i32 %162, i32* %160, align 4, !insn.addr !3395
  %165 = inttoptr i32 %153 to i16*, !insn.addr !3396
  store i16 %128, i16* %165, align 2, !insn.addr !3396
  %166 = or i1 %163, %164, !insn.addr !3397
  br i1 %166, label %dec_label_pc_1008603, label %dec_label_pc_10085a4, !insn.addr !3397

dec_label_pc_10085a4:                             ; preds = %dec_label_pc_1008581
  %167 = add i32 %159, -1, !insn.addr !3398
  %168 = and i32 %156, 15, !insn.addr !3398
  %169 = add nsw i32 %168, -1, !insn.addr !3398
  %170 = icmp ugt i32 %169, 15, !insn.addr !3398
  %171 = icmp eq i32 %167, 0, !insn.addr !3398
  %172 = icmp eq i1 %171, false, !insn.addr !3399
  store i1 %170, i1* %az.0.reg2mem, !insn.addr !3399
  store i32 %167, i32* %eax.2.reg2mem, !insn.addr !3399
  store i32 %154, i32* %ecx.0.reg2mem, !insn.addr !3399
  store i32 %153, i32* %ebx.1.reg2mem, !insn.addr !3399
  store i32 %153, i32* %ebx.2.ph.reg2mem, !insn.addr !3399
  br i1 %172, label %dec_label_pc_1008581, label %dec_label_pc_10085be.preheader, !insn.addr !3399

dec_label_pc_10085be.preheader:                   ; preds = %dec_label_pc_10085a4, %dec_label_pc_1008577
  %ebx.2.ph.reload = load i32, i32* %ebx.2.ph.reg2mem
  %173 = udiv i32 %119, 256, !insn.addr !3400
  %174 = mul i32 %173, 2
  %175 = trunc i32 %174 to i8, !insn.addr !3400
  %176 = xor i32 %174, %173
  %177 = trunc i32 %176 to i8, !insn.addr !3400
  %178 = icmp slt i8 %177, 0, !insn.addr !3400
  %179 = icmp eq i8 %175, 0, !insn.addr !3400
  %180 = icmp slt i8 %175, 0, !insn.addr !3400
  %181 = icmp eq i1 %180, %178, !insn.addr !3401
  %182 = icmp eq i1 %179, false, !insn.addr !3401
  %183 = icmp eq i1 %181, %182, !insn.addr !3401
  store i32 %ebx.2.ph.reload, i32* %ebx.248.reg2mem, !insn.addr !3401
  br i1 %183, label %dec_label_pc_10085a9, label %dec_label_pc_10085c2, !insn.addr !3401

dec_label_pc_10085a9:                             ; preds = %dec_label_pc_10085be.preheader, %dec_label_pc_10085a9
  %ebx.248.reload = load i32, i32* %ebx.248.reg2mem
  %184 = inttoptr i32 %ebx.248.reload to i16*, !insn.addr !3402
  store i16 48, i16* %184, align 2, !insn.addr !3402
  %185 = call i32 @unknown_1402ca1(), !insn.addr !3403
  %186 = add i32 %ebx.248.reload, %edi.0.reload, !insn.addr !3404
  store i32 %186, i32* %ebx.248.reg2mem
  br label %dec_label_pc_10085a9

dec_label_pc_10085c2:                             ; preds = %dec_label_pc_10085be.preheader
  %187 = load i32, i32* %94, align 4, !insn.addr !3405
  %188 = icmp eq i32 %187, -34, !insn.addr !3405
  %189 = inttoptr i32 %ebx.2.ph.reload to i16*
  br i1 %188, label %dec_label_pc_1008634, label %dec_label_pc_10085c8, !insn.addr !3406

dec_label_pc_10085c8:                             ; preds = %dec_label_pc_10085c2
  %190 = add i32 %ebp.1.in.reload, 3, !insn.addr !3407
  store i16 176, i16* %189, align 2, !insn.addr !3408
  %191 = add i32 %ebp.1.in.reload, -5, !insn.addr !3409
  %192 = inttoptr i32 %191 to i32*, !insn.addr !3409
  %193 = load i32, i32* %192, align 4, !insn.addr !3409
  %194 = icmp slt i32 %193, 0, !insn.addr !3410
  %195 = zext i1 %194 to i8, !insn.addr !3411
  %196 = inttoptr i32 %eax.1.reload to i8*, !insn.addr !3411
  store i8 %195, i8* %196, align 1, !insn.addr !3411
  %197 = add i32 %ebp.1.in.reload, -898840434, !insn.addr !3412
  %198 = inttoptr i32 %197 to i32*, !insn.addr !3412
  store i32 %190, i32* %198, align 4, !insn.addr !3412
  ret i32 -91, !insn.addr !3413

dec_label_pc_1008603:                             ; preds = %dec_label_pc_1008581
  %199 = add i32 %eax.1.reload, -124, !insn.addr !3414
  %200 = inttoptr i32 %199 to i32*, !insn.addr !3414
  %201 = load i32, i32* %200, align 4, !insn.addr !3414
  %202 = add i32 %201, %esp.1.reload, !insn.addr !3414
  store i32 %202, i32* %200, align 4, !insn.addr !3414
  %203 = add i32 %159, 85, !insn.addr !3415
  %204 = and i32 %203, 255, !insn.addr !3415
  %205 = or i32 %204, %158, !insn.addr !3415
  %206 = add i32 %153, 1, !insn.addr !3416
  %207 = inttoptr i32 %206 to i8*, !insn.addr !3416
  %208 = load i8, i8* %207, align 1, !insn.addr !3416
  %209 = trunc i32 %203 to i8, !insn.addr !3416
  %210 = or i8 %208, %209, !insn.addr !3416
  store i8 %210, i8* %207, align 1, !insn.addr !3416
  %211 = add i32 %eax.1.reload, -119, !insn.addr !3417
  %212 = inttoptr i32 %211 to i32*, !insn.addr !3417
  %213 = load i32, i32* %212, align 4, !insn.addr !3417
  %214 = add i32 %213, %esp.1.reload, !insn.addr !3417
  store i32 %214, i32* %212, align 4, !insn.addr !3417
  %215 = add i32 %153, 1039636929, !insn.addr !3418
  %216 = inttoptr i32 %215 to i32*, !insn.addr !3418
  %217 = load i32, i32* %216, align 4, !insn.addr !3418
  %218 = sub i32 3, %ecx.0.reload
  %219 = icmp ugt i32 %217, %218, !insn.addr !3418
  %220 = add i32 %205, 1, !insn.addr !3419
  %221 = inttoptr i32 %220 to i8*, !insn.addr !3419
  %222 = load i8, i8* %221, align 1, !insn.addr !3419
  %223 = zext i1 %219 to i8, !insn.addr !3419
  %224 = add i8 %222, %209, !insn.addr !3419
  %225 = add i8 %224, %223, !insn.addr !3419
  store i8 %225, i8* %221, align 1, !insn.addr !3419
  %226 = add i32 %153, 67, !insn.addr !3420
  %227 = inttoptr i32 %226 to i32*, !insn.addr !3420
  %228 = load i32, i32* %227, align 4, !insn.addr !3420
  %229 = add i32 %228, %205, !insn.addr !3420
  store i32 %229, i32* %227, align 4, !insn.addr !3420
  %230 = inttoptr i32 %205 to i32*, !insn.addr !3421
  %231 = load i32, i32* %230, align 4, !insn.addr !3421
  %232 = and i32 %231, %203, !insn.addr !3421
  %233 = add i32 %232, 54, !insn.addr !3422
  %234 = and i32 %233, 255, !insn.addr !3422
  %235 = and i32 %231, %158, !insn.addr !3422
  %236 = or i32 %234, %235, !insn.addr !3422
  %237 = sub i32 %153, %236, !insn.addr !3423
  %238 = add i32 %esp.1.reload, -4, !insn.addr !3424
  %239 = inttoptr i32 %238 to i32*, !insn.addr !3424
  store i32 %237, i32* %239, align 4, !insn.addr !3424
  %240 = call i16* @_wcsrev(i32* nonnull @0), !insn.addr !3425
  %241 = ptrtoint i16* %240 to i32, !insn.addr !3425
  ret i32 %241, !insn.addr !3425

dec_label_pc_1008634:                             ; preds = %dec_label_pc_10085c2
  %242 = add i32 %esp.1.reload, -4
  %243 = inttoptr i32 %242 to i16*
  %244 = mul i32 %173, 512, !insn.addr !3400
  %245 = and i32 %119, 255, !insn.addr !3400
  %246 = or i32 %244, %245, !insn.addr !3400
  store i16 0, i16* %189, align 2, !insn.addr !3426
  %247 = trunc i32 %246 to i16, !insn.addr !3427
  %248 = call i8 @__asm_in.3(i16 %247), !insn.addr !3427
  %249 = sext i8 %248 to i32, !insn.addr !3427
  %250 = and i32 %ebx.2.ph.reload, -256, !insn.addr !3427
  %251 = or i32 %250, %249, !insn.addr !3427
  ret i32 %251, !insn.addr !3428
}

define i32 @function_1008648(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008648:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100865c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_100865c:
  %zf.0.in.reg2mem = alloca i8, !insn.addr !3429
  %ebx.0.reg2mem = alloca i32, !insn.addr !3429
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %0, 125, !insn.addr !3429
  %6 = inttoptr i32 %5 to i8*, !insn.addr !3429
  %7 = load i8, i8* %6, align 1, !insn.addr !3429
  %8 = trunc i32 %3 to i8, !insn.addr !3430
  %9 = add i32 %1, 2110948816, !insn.addr !3430
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3430
  %11 = load i8, i8* %10, align 1, !insn.addr !3430
  %12 = add i8 %11, %8, !insn.addr !3430
  %13 = udiv i32 %2, 256, !insn.addr !3431
  %14 = trunc i32 %13 to i8, !insn.addr !3431
  %15 = trunc i32 %1 to i8
  %16 = add i8 %14, %15, !insn.addr !3431
  %17 = and i8 %12, 31, !insn.addr !3432
  %18 = icmp eq i8 %17, 0, !insn.addr !3432
  store i8 %16, i8* %zf.0.in.reg2mem, !insn.addr !3432
  br i1 %18, label %27, label %19, !insn.addr !3432

; <label>:19:                                     ; preds = %dec_label_pc_100865c
  %20 = udiv i32 %1, 256, !insn.addr !3432
  %21 = trunc i32 %20 to i8, !insn.addr !3432
  %22 = ashr i8 %21, %17, !insn.addr !3432
  %23 = zext i8 %22 to i32, !insn.addr !3432
  %24 = mul i32 %23, 256, !insn.addr !3432
  %25 = and i32 %1, -65281, !insn.addr !3432
  %26 = or i32 %24, %25, !insn.addr !3432
  store i32 %26, i32* %ebx.0.reg2mem, !insn.addr !3432
  store i8 %22, i8* %zf.0.in.reg2mem, !insn.addr !3432
  br label %27, !insn.addr !3432

; <label>:27:                                     ; preds = %dec_label_pc_100865c, %19
  %28 = zext i8 %12 to i32, !insn.addr !3430
  %29 = and i32 %3, -256, !insn.addr !3430
  %30 = or i32 %29, %28, !insn.addr !3430
  %zf.0.in.reload = load i8, i8* %zf.0.in.reg2mem
  %zf.0 = icmp eq i8 %zf.0.in.reload, 0
  %31 = icmp eq i1 %zf.0, false, !insn.addr !3433
  br i1 %31, label %dec_label_pc_1008677, label %dec_label_pc_100866b, !insn.addr !3433

dec_label_pc_100866b:                             ; preds = %27
  %32 = add i32 %30, 34, !insn.addr !3434
  %33 = inttoptr i32 %32 to i32*, !insn.addr !3434
  %34 = add i32 %4, 7, !insn.addr !3435
  %35 = inttoptr i32 %34 to i32*, !insn.addr !3435
  %36 = load i32, i32* %35, align 4, !insn.addr !3435
  ret i32 %36, !insn.addr !3435

dec_label_pc_1008677:                             ; preds = %27
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %37 = add i32 %ebx.0.reload, -399447043, !insn.addr !3436
  %38 = inttoptr i32 %37 to i8*, !insn.addr !3436
  %39 = load i8, i8* %38, align 1, !insn.addr !3436
  %40 = or i8 %39, %12, !insn.addr !3436
  store i8 %40, i8* %38, align 1, !insn.addr !3436
  %41 = icmp eq i32 %4, -9, !insn.addr !3437
  %42 = icmp eq i1 %41, false, !insn.addr !3438
  br i1 %42, label %dec_label_pc_1008690, label %dec_label_pc_1008684, !insn.addr !3438

dec_label_pc_1008684:                             ; preds = %dec_label_pc_1008677
  %43 = trunc i32 %2 to i8, !insn.addr !3429
  %44 = or i8 %7, %43, !insn.addr !3429
  %45 = zext i8 %44 to i16, !insn.addr !3429
  %46 = zext i8 %16 to i16, !insn.addr !3431
  %47 = mul i16 %46, 256, !insn.addr !3431
  %48 = or i16 %47, %45, !insn.addr !3431
  %49 = call i32 @__asm_in.5(i16 %48), !insn.addr !3439
  %50 = add i32 %ebx.0.reload, 74514182, !insn.addr !3440
  %51 = inttoptr i32 %50 to i32*, !insn.addr !3440
  %52 = load i32, i32* %51, align 4, !insn.addr !3440
  %53 = sub i32 %52, %30, !insn.addr !3440
  store i32 %53, i32* %51, align 4, !insn.addr !3440
  ret i32 %49, !insn.addr !3440

dec_label_pc_1008690:                             ; preds = %dec_label_pc_1008677
  %54 = add i32 %4, 1810387196, !insn.addr !3441
  %sext = mul i32 %4, 65536
  %55 = sdiv i32 %sext, 65536, !insn.addr !3442
  %.tr = trunc i32 %4 to i8
  %56 = mul i8 %.tr, 2, !insn.addr !3443
  %57 = icmp eq i8 %56, 0, !insn.addr !3443
  %58 = inttoptr i32 %55 to i8*, !insn.addr !3443
  store i8 %56, i8* %58, align 1, !insn.addr !3443
  %59 = icmp eq i1 %57, false, !insn.addr !3444
  br i1 %59, label %dec_label_pc_10086b3, label %dec_label_pc_10086a3, !insn.addr !3444

dec_label_pc_10086a3:                             ; preds = %dec_label_pc_1008690
  %60 = trunc i32 %55 to i8, !insn.addr !3445
  %61 = inttoptr i32 %54 to i8*, !insn.addr !3445
  store i8 %60, i8* %61, align 1, !insn.addr !3445
  ret i32 %55, !insn.addr !3446

dec_label_pc_10086b3:                             ; preds = %dec_label_pc_1008690
  %62 = and i32 %ebx.0.reload, -65281, !insn.addr !3447
  %63 = or i32 %62, 12032, !insn.addr !3447
  %64 = add i32 %63, 1442905206, !insn.addr !3448
  %65 = inttoptr i32 %64 to i32*, !insn.addr !3448
  %66 = load i32, i32* %65, align 4, !insn.addr !3448
  %67 = add i32 %66, 1, !insn.addr !3448
  store i32 %67, i32* %65, align 4, !insn.addr !3448
  %68 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3449
  ret i32 %54, !insn.addr !3450
}

define i32 @function_10086c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10086c8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %arg1, -1961067096, !insn.addr !3451
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3451
  %5 = load i32, i32* %4, align 4, !insn.addr !3451
  %6 = and i32 %5, %0, !insn.addr !3451
  %7 = icmp eq i32 %6, 0, !insn.addr !3451
  %8 = icmp eq i1 %7, false, !insn.addr !3452
  br i1 %8, label %dec_label_pc_10086df, label %dec_label_pc_10086d7, !insn.addr !3452

dec_label_pc_10086d7:                             ; preds = %dec_label_pc_10086c8
  %9 = mul i32 %2, %1, !insn.addr !3453
  ret i32 %9, !insn.addr !3454

dec_label_pc_10086df:                             ; preds = %dec_label_pc_10086c8
  ret i32 %2, !insn.addr !3455
}

define i32 @function_10086ee() local_unnamed_addr {
dec_label_pc_10086ee:
  %0 = call i32 @function_100874e(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !3456
  ret i32 %0, !insn.addr !3456
}

define i32 @function_10086fb() local_unnamed_addr {
dec_label_pc_10086fb:
  %eax.2.lcssa.reg2mem = alloca i32, !insn.addr !3457
  %esp.0.reg2mem = alloca i32, !insn.addr !3457
  %ebx.01.reg2mem = alloca i32, !insn.addr !3457
  %esp.12.reg2mem = alloca i32, !insn.addr !3457
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %0, -82, !insn.addr !3457
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3457
  %7 = load i32, i32* %6, align 4, !insn.addr !3457
  %8 = add i32 %0, 12, !insn.addr !3458
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3458
  %10 = load i32, i32* %9, align 4, !insn.addr !3458
  %11 = and i32 %10, %4, !insn.addr !3458
  store i32 %11, i32* %9, align 4, !insn.addr !3458
  %12 = icmp eq i32 %1, 0, !insn.addr !3459
  %13 = icmp slt i32 %1, 0, !insn.addr !3459
  %14 = icmp eq i1 %13, false, !insn.addr !3460
  %15 = icmp eq i1 %12, false, !insn.addr !3460
  %16 = icmp eq i1 %14, %15, !insn.addr !3460
  br i1 %16, label %dec_label_pc_1008703.lr.ph, label %dec_label_pc_1008742, !insn.addr !3460

dec_label_pc_1008703.lr.ph:                       ; preds = %dec_label_pc_10086fb
  %17 = inttoptr i32 %7 to i32*
  %18 = mul i32 %2, 2
  %19 = trunc i32 %3 to i8
  %20 = and i8 %19, 31
  %21 = icmp eq i8 %20, 0
  %22 = sub nsw i8 8, %20
  %23 = icmp eq i32 %3, 0
  %24 = add i32 %0, -62
  br label %dec_label_pc_1008703

dec_label_pc_1008703:                             ; preds = %dec_label_pc_1008703.lr.ph, %dec_label_pc_1008727
  %ebx.01.reload = load i32, i32* %ebx.01.reg2mem
  %esp.12.reload = load i32, i32* %esp.12.reg2mem
  %25 = add i32 %ebx.01.reload, 118, !insn.addr !3461
  %26 = inttoptr i32 %25 to i8*, !insn.addr !3461
  %27 = load i8, i8* %26, align 1, !insn.addr !3461
  %28 = sub i8 0, %27, !insn.addr !3461
  %29 = icmp eq i8 %27, 0, !insn.addr !3461
  store i8 %28, i8* %26, align 1, !insn.addr !3461
  store i32 %esp.12.reload, i32* %esp.0.reg2mem, !insn.addr !3462
  br i1 %29, label %dec_label_pc_1008725, label %dec_label_pc_100871d, !insn.addr !3462

dec_label_pc_100871d:                             ; preds = %dec_label_pc_1008703
  %30 = load i32, i32* %17, align 4, !insn.addr !3463
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3464
  %32 = load i32, i32* %31, align 4, !insn.addr !3464
  %33 = add i32 %esp.12.reload, -4, !insn.addr !3464
  %34 = inttoptr i32 %33 to i32*, !insn.addr !3464
  store i32 %32, i32* %34, align 4, !insn.addr !3464
  %35 = or i32 %30, 131, !insn.addr !3465
  %36 = add i32 %35, %18, !insn.addr !3466
  %37 = inttoptr i32 %36 to i8*, !insn.addr !3466
  store i8 -1, i8* %37, align 1, !insn.addr !3466
  call void @__asm_int(i32 155), !insn.addr !3467
  %38 = inttoptr i32 %35 to i8*, !insn.addr !3468
  %39 = load i8, i8* %38, align 1, !insn.addr !3468
  store i32 %33, i32* %esp.0.reg2mem, !insn.addr !3468
  br i1 %21, label %dec_label_pc_1008725, label %40, !insn.addr !3468

; <label>:40:                                     ; preds = %dec_label_pc_100871d
  %41 = shl i8 %39, %20, !insn.addr !3468
  %42 = lshr i8 %39, %22, !insn.addr !3468
  %43 = or i8 %42, %41, !insn.addr !3468
  store i8 %43, i8* %38, align 1, !insn.addr !3468
  store i32 %33, i32* %esp.0.reg2mem, !insn.addr !3468
  br label %dec_label_pc_1008725, !insn.addr !3468

dec_label_pc_1008725:                             ; preds = %40, %dec_label_pc_100871d, %dec_label_pc_1008703
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  br i1 %23, label %44, label %dec_label_pc_1008727, !insn.addr !3469

; <label>:44:                                     ; preds = %dec_label_pc_1008725
  %45 = call i32 @function_100875d(), !insn.addr !3469
  br label %dec_label_pc_1008727, !insn.addr !3469

dec_label_pc_1008727:                             ; preds = %44, %dec_label_pc_1008725
  %46 = add i32 %esp.0.reload, -4, !insn.addr !3470
  %47 = inttoptr i32 %46 to i32*, !insn.addr !3470
  store i32 %7, i32* %47, align 4, !insn.addr !3470
  %48 = call i32 @function_100bbd4(), !insn.addr !3471
  %49 = add i32 %esp.0.reload, -8, !insn.addr !3472
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3472
  store i32 %24, i32* %50, align 4, !insn.addr !3472
  %51 = call i32 @function_100aa6b(), !insn.addr !3473
  %52 = add i32 %esp.0.reload, -12, !insn.addr !3474
  %53 = inttoptr i32 %52 to i32*, !insn.addr !3474
  store i32 %7, i32* %53, align 4, !insn.addr !3474
  %54 = call i32 @function_1009209(), !insn.addr !3475
  %55 = sdiv i32 %ebx.01.reload, 2, !insn.addr !3476
  %ebx.01.off = add i32 %ebx.01.reload, 1
  %56 = icmp ult i32 %ebx.01.off, 3
  %57 = icmp slt i32 %ebx.01.reload, 0, !insn.addr !3459
  %58 = icmp eq i1 %57, false, !insn.addr !3460
  %59 = icmp eq i1 %56, false, !insn.addr !3460
  %60 = icmp eq i1 %58, %59, !insn.addr !3460
  store i32 %52, i32* %esp.12.reg2mem, !insn.addr !3460
  store i32 %55, i32* %ebx.01.reg2mem, !insn.addr !3460
  store i32 %54, i32* %eax.2.lcssa.reg2mem, !insn.addr !3460
  br i1 %60, label %dec_label_pc_1008703, label %dec_label_pc_1008742, !insn.addr !3460

dec_label_pc_1008742:                             ; preds = %dec_label_pc_1008727, %dec_label_pc_10086fb
  %eax.2.lcssa.reload = load i32, i32* %eax.2.lcssa.reg2mem
  ret i32 %eax.2.lcssa.reload, !insn.addr !3460
}

define i32 @function_100874e(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100874e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3477
}

define i32 @function_1008754() local_unnamed_addr {
dec_label_pc_1008754:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100875d() local_unnamed_addr {
dec_label_pc_100875d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100877e(i32 %arg1) local_unnamed_addr {
dec_label_pc_100877e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3478
}

define i32 @function_10087b7(i32 %arg1) local_unnamed_addr {
dec_label_pc_10087b7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %4, 1882783663, !insn.addr !3479
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3479
  %9 = load i32, i32* %8, align 4, !insn.addr !3479
  %10 = add i32 %9, -1, !insn.addr !3479
  store i32 %10, i32* %8, align 4, !insn.addr !3479
  %11 = add i32 %0, -1, !insn.addr !3480
  %12 = add i32 %5, %4, !insn.addr !3481
  %13 = inttoptr i32 %4 to i32*, !insn.addr !3481
  store i32 %12, i32* %13, align 4, !insn.addr !3481
  %14 = call i32 @unknown_f007e82(i32 %1, i32 %arg1), !insn.addr !3482
  %15 = add i32 %0, 3, !insn.addr !3483
  %16 = inttoptr i32 %15 to i32*, !insn.addr !3483
  store i32 %14, i32* %16, align 4, !insn.addr !3483
  %17 = call i32 @function_1007bc1(i32 %2), !insn.addr !3484
  %18 = select i1 %6, i32 -4, i32 4, !insn.addr !3485
  %19 = trunc i32 %3 to i16, !insn.addr !3486
  %20 = call i32 @__asm_insd(i16 %19), !insn.addr !3486
  %21 = inttoptr i32 %11 to i32*, !insn.addr !3486
  store i32 %20, i32* %21, align 4, !insn.addr !3486
  %22 = add i32 %1, 1583335307, !insn.addr !3485
  %23 = add i32 %22, %18, !insn.addr !3487
  %24 = inttoptr i32 %23 to i32*, !insn.addr !3487
  %25 = load i32, i32* %24, align 4, !insn.addr !3487
  %26 = add i32 %25, -1, !insn.addr !3487
  store i32 %26, i32* %24, align 4, !insn.addr !3487
  ret i32 %1, !insn.addr !3488
}

define i32 @function_1008818() local_unnamed_addr {
dec_label_pc_1008818:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3489
}

define i32 @function_1008822() local_unnamed_addr {
dec_label_pc_1008822:
  %0 = call i32 @function_c0008963(), !insn.addr !3490
  ret i32 %0, !insn.addr !3490
}

define i32 @function_1008827() local_unnamed_addr {
dec_label_pc_1008827:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_9()
  %6 = add i32 %2, -96, !insn.addr !3491
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3491
  %8 = load i32, i32* %7, align 4, !insn.addr !3491
  %9 = icmp eq i32 %8, %3, !insn.addr !3492
  br i1 %9, label %10, label %dec_label_pc_1008832, !insn.addr !3493

; <label>:10:                                     ; preds = %dec_label_pc_1008827
  %11 = call i32 @function_1010535(), !insn.addr !3493
  br label %dec_label_pc_1008832, !insn.addr !3493

dec_label_pc_1008832:                             ; preds = %10, %dec_label_pc_1008827
  %12 = add i32 %1, 1392517376, !insn.addr !3494
  %13 = inttoptr i32 %12 to i64*, !insn.addr !3494
  %14 = load i64, i64* %13, align 4, !insn.addr !3494
  %15 = call i64 @__asm_psubb(i64 %5, i64 %14), !insn.addr !3494
  %16 = add i32 %2, -4, !insn.addr !3495
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3495
  %18 = call i32 @function_1007c26(), !insn.addr !3496
  store i32 %18, i32* %17, align 4, !insn.addr !3497
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3498
  %20 = load i32, i32* %19, align 4, !insn.addr !3498
  %21 = call i32 @unknown_10001c1(i32 %20), !insn.addr !3499
  %22 = add i32 %2, 22, !insn.addr !3500
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3500
  %24 = load i32, i32* %23, align 4, !insn.addr !3500
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3501
  %26 = trunc i32 %4 to i8, !insn.addr !3502
  %27 = add i32 %0, 1, !insn.addr !3502
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3502
  store i8 %26, i8* %28, align 1, !insn.addr !3502
  %29 = add i32 %3, 74514175, !insn.addr !3503
  %30 = inttoptr i32 %29 to i32*, !insn.addr !3503
  %31 = load i32, i32* %30, align 4, !insn.addr !3503
  %32 = add i32 %31, %4, !insn.addr !3503
  store i32 %32, i32* %30, align 4, !insn.addr !3503
  %33 = inttoptr i32 %4 to i32*, !insn.addr !3504
  store i32 %24, i32* %33, align 4, !insn.addr !3504
  %34 = call i32 @__asm_int3(), !insn.addr !3505
  %35 = call i32 @__asm_wait(), !insn.addr !3506
  %36 = add i32 %20, -4, !insn.addr !3507
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3507
  %38 = load i32, i32* %37, align 4, !insn.addr !3507
  %39 = add i32 %38, 4, !insn.addr !3508
  %40 = inttoptr i32 %39 to i32*, !insn.addr !3508
  %41 = load i32, i32* %40, align 4, !insn.addr !3508
  %42 = call i32 @unknown_b1007bc1(i32 %41), !insn.addr !3509
  %43 = add i32 %20, 72911356, !insn.addr !3510
  %44 = inttoptr i32 %43 to i32*, !insn.addr !3510
  %45 = load i32, i32* %44, align 4, !insn.addr !3510
  %46 = load i32, i32* inttoptr (i32 -520007800 to i32*), align 8, !insn.addr !3511
  %47 = add i32 %46, 88, !insn.addr !3512
  %48 = inttoptr i32 %47 to i32*, !insn.addr !3512
  %49 = load i32, i32* %48, align 4, !insn.addr !3512
  %50 = add i32 %49, 4, !insn.addr !3513
  %51 = inttoptr i32 %50 to i32*, !insn.addr !3513
  %52 = load i32, i32* %51, align 4, !insn.addr !3513
  %53 = call i32 @unknown_21007bfb(i32 %52), !insn.addr !3514
  %54 = add i32 %45, 96, !insn.addr !3515
  %55 = inttoptr i32 %54 to i32*, !insn.addr !3515
  %56 = load i32, i32* %55, align 4, !insn.addr !3515
  %57 = add i32 %56, 4, !insn.addr !3516
  %58 = inttoptr i32 %57 to i32*, !insn.addr !3516
  store i32 %53, i32* %58, align 4, !insn.addr !3516
  %59 = call i32 @function_1008942(), !insn.addr !3517
  ret i32 %59, !insn.addr !3517
}

define i32 @function_10088e2() local_unnamed_addr {
dec_label_pc_10088e2:
  %0 = call i32 @function_71908972(), !insn.addr !3518
  ret i32 %0, !insn.addr !3518
}

define i32 @function_10088ec() local_unnamed_addr {
dec_label_pc_10088ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 25767245, !insn.addr !3519
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3519
  %3 = load i32, i32* %2, align 4, !insn.addr !3519
  %4 = add i32 %3, -1, !insn.addr !3519
  store i32 %4, i32* %2, align 4, !insn.addr !3519
  %5 = load i8*, i8** @global_var_1014f84, align 4, !insn.addr !3520
  %6 = ptrtoint i8* %5 to i32, !insn.addr !3520
  %7 = and i32 %6, 114, !insn.addr !3521
  %8 = or i32 %7, 141, !insn.addr !3521
  %9 = and i32 %6, -256, !insn.addr !3521
  %10 = or i32 %8, %9, !insn.addr !3522
  %11 = inttoptr i32 %10 to i8*, !insn.addr !3523
  %12 = load i8, i8* %11, align 1, !insn.addr !3523
  %13 = trunc i32 %8 to i8, !insn.addr !3523
  %14 = add i8 %12, %13, !insn.addr !3523
  store i8 %14, i8* %11, align 1, !insn.addr !3523
  %15 = call i32 @__asm_int3(), !insn.addr !3524
  %16 = call i32 @function_8c067c12(), !insn.addr !3525
  ret i32 %16, !insn.addr !3525
}

define i32 @function_1008920() local_unnamed_addr {
dec_label_pc_1008920:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3526
}

define i32 @function_1008934() local_unnamed_addr {
dec_label_pc_1008934:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3527
}

define i32 @function_1008942() local_unnamed_addr {
dec_label_pc_1008942:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, 4, !insn.addr !3528
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3528
  %5 = load i32, i32* %4, align 4, !insn.addr !3528
  %6 = add i32 %5, 4, !insn.addr !3529
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3529
  %8 = load i32, i32* %7, align 4, !insn.addr !3529
  %9 = add i32 %0, -4, !insn.addr !3530
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3530
  %11 = load i32, i32* %10, align 4, !insn.addr !3530
  %12 = add i32 %11, 4, !insn.addr !3531
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3531
  %14 = load i32, i32* %13, align 4, !insn.addr !3531
  %15 = add i32 %11, 12651661, !insn.addr !3532
  %16 = add i32 %11, 12651697, !insn.addr !3533
  %17 = inttoptr i32 %16 to i8*, !insn.addr !3533
  %18 = load i8, i8* %17, align 1, !insn.addr !3533
  %19 = trunc i32 %8 to i8, !insn.addr !3533
  %20 = add i8 %18, %19, !insn.addr !3533
  store i8 %20, i8* %17, align 1, !insn.addr !3533
  %21 = udiv i32 %1, 4, !insn.addr !3534
  %22 = mul i32 %1, 1073741824, !insn.addr !3534
  %23 = or i32 %21, %22, !insn.addr !3534
  %24 = inttoptr i32 %1 to i32*, !insn.addr !3534
  store i32 %23, i32* %24, align 4, !insn.addr !3534
  %25 = inttoptr i32 %5 to i8*, !insn.addr !3535
  %26 = inttoptr i32 %14 to i8*, !insn.addr !3535
  call void @__asm_rep_movsd_memcpy(i8* %26, i8* %25, i32 %8), !insn.addr !3535
  %27 = trunc i32 %15 to i8, !insn.addr !3536
  call void @__asm_out.6(i32 139, i8 %27), !insn.addr !3536
  %28 = add i32 %11, 200, !insn.addr !3537
  %29 = and i32 %28, 255, !insn.addr !3537
  %30 = and i32 %15, -256, !insn.addr !3537
  %31 = or i32 %30, %29, !insn.addr !3537
  ret i32 %31, !insn.addr !3538
}

define i32 @function_100896c() local_unnamed_addr {
dec_label_pc_100896c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %0, -88, !insn.addr !3539
  %7 = add i32 %6, %4, !insn.addr !3539
  %8 = inttoptr i32 %7 to i8*, !insn.addr !3539
  %9 = load i8, i8* %8, align 1, !insn.addr !3539
  %10 = udiv i32 %3, 256, !insn.addr !3539
  %11 = trunc i32 %10 to i8, !insn.addr !3539
  %12 = zext i1 %5 to i8, !insn.addr !3539
  %13 = add i8 %12, %11, !insn.addr !3539
  %14 = sub i8 %9, %13, !insn.addr !3539
  store i8 %14, i8* %8, align 1, !insn.addr !3539
  %15 = call i32 @function_1007f57(), !insn.addr !3540
  %16 = icmp eq i32 %0, %2, !insn.addr !3541
  %17 = icmp eq i1 %16, false, !insn.addr !3542
  br i1 %17, label %dec_label_pc_1008996, label %dec_label_pc_100897e, !insn.addr !3542

dec_label_pc_100897e:                             ; preds = %dec_label_pc_100896c
  %18 = call i32 @function_1c48996(), !insn.addr !3543
  ret i32 %18, !insn.addr !3543

dec_label_pc_1008996:                             ; preds = %dec_label_pc_100896c
  %19 = sub i8 %14, %12, !insn.addr !3539
  %20 = icmp ult i8 %9, %19, !insn.addr !3539
  %21 = icmp ne i8 %13, -1, !insn.addr !3539
  %22 = or i1 %21, %20, !insn.addr !3539
  %23 = icmp ult i8 %9, %13, !insn.addr !3539
  %24 = select i1 %5, i1 %22, i1 %23, !insn.addr !3539
  %25 = zext i1 %24 to i32, !insn.addr !3544
  %26 = add i32 %15, %10, !insn.addr !3544
  %27 = add i32 %26, %25, !insn.addr !3544
  %28 = add i32 %1, 78, !insn.addr !3545
  %29 = inttoptr i32 %28 to i32*, !insn.addr !3545
  %30 = and i32 %15, -256, !insn.addr !3544
  %31 = icmp ult i32 %0, %2, !insn.addr !3541
  %32 = and i32 %0, 15, !insn.addr !3541
  %33 = and i32 %2, 15, !insn.addr !3541
  %34 = sub nsw i32 %32, %33, !insn.addr !3541
  %35 = icmp ugt i32 %34, 15, !insn.addr !3541
  %36 = trunc i32 %27 to i8, !insn.addr !3546
  %37 = and i8 %36, 14, !insn.addr !3546
  %38 = icmp ugt i8 %37, 9, !insn.addr !3546
  %39 = or i1 %35, %38, !insn.addr !3546
  %40 = icmp ugt i8 %36, -103
  %41 = or i1 %31, %40
  %.v = select i1 %41, i32 102, i32 6
  %42 = add i32 %.v, %27
  %43 = add i32 %27, 96
  %44 = select i1 %41, i32 %43, i32 %27
  %.pn.in = select i1 %39, i32 %42, i32 %44
  %.pn = and i32 %.pn.in, 255
  %storemerge = or i32 %.pn, %30
  ret i32 %storemerge, !insn.addr !3546
}

define i32 @function_10089ba() local_unnamed_addr {
dec_label_pc_10089ba:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3547
}

define i32 @function_10089c1() local_unnamed_addr {
dec_label_pc_10089c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @function_1012390(i32 %2), !insn.addr !3548
  %4 = trunc i32 %1 to i16, !insn.addr !3549
  %5 = call i32 @__asm_insd(i16 %4), !insn.addr !3549
  %6 = inttoptr i32 %0 to i32*, !insn.addr !3549
  store i32 %5, i32* %6, align 4, !insn.addr !3549
  ret i32 %3, !insn.addr !3550
}

define i32 @function_10089fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_10089fb:
  %eax.0.reg2mem = alloca i32, !insn.addr !3551
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %4, -1, !insn.addr !3552
  %7 = icmp ne i32 %6, 0, !insn.addr !3552
  %8 = icmp eq i1 %7, %5, !insn.addr !3552
  br i1 %8, label %dec_label_pc_1008a3e, label %dec_label_pc_1008a05, !insn.addr !3552

dec_label_pc_1008a05:                             ; preds = %dec_label_pc_10089fb
  %9 = inttoptr i32 %1 to i8*, !insn.addr !3553
  %10 = inttoptr i32 %0 to i8*, !insn.addr !3553
  call void @__asm_rep_movsb_memcpy(i8* %10, i8* %9, i32 %6), !insn.addr !3553
  %11 = add i32 %3, 4, !insn.addr !3554
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3554
  %13 = add i32 %2, -69, !insn.addr !3555
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3555
  %15 = load i32, i32* %14, align 4, !insn.addr !3555
  %16 = call i32 @function_1007bc1(i32 %15), !insn.addr !3556
  %17 = add i32 %2, -8, !insn.addr !3557
  %18 = inttoptr i32 %17 to i32*, !insn.addr !3557
  store i32 0, i32* %18, align 4, !insn.addr !3557
  %19 = add i32 %2, -4, !insn.addr !3558
  %20 = call i32 @unknown_3a00be29(i32 %19, i32 %3), !insn.addr !3559
  store i32 %20, i32* %eax.0.reg2mem, !insn.addr !3560
  br label %dec_label_pc_1008a3e, !insn.addr !3560

dec_label_pc_1008a3e:                             ; preds = %dec_label_pc_1008a05, %dec_label_pc_10089fb
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3561
}

define i32 @function_1008a3f() local_unnamed_addr {
dec_label_pc_1008a3f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = icmp eq i1 %4, false, !insn.addr !3562
  br i1 %6, label %dec_label_pc_1008a49, label %dec_label_pc_1008a5f, !insn.addr !3562

dec_label_pc_1008a49:                             ; preds = %dec_label_pc_1008a3f
  %7 = add i32 %1, 1589115973, !insn.addr !3563
  %8 = inttoptr i32 %7 to i8*, !insn.addr !3563
  %9 = load i8, i8* %8, align 1, !insn.addr !3563
  %10 = trunc i32 %2 to i8, !insn.addr !3563
  %11 = zext i1 %5 to i8, !insn.addr !3563
  %12 = add i8 %11, %10, !insn.addr !3563
  %13 = sub i8 %9, %12, !insn.addr !3563
  %14 = and i8 %9, 15, !insn.addr !3563
  %15 = and i8 %12, 15, !insn.addr !3563
  %16 = sub nsw i8 %11, %15, !insn.addr !3563
  %17 = add nsw i8 %16, %14, !insn.addr !3563
  %18 = icmp ugt i8 %17, 15, !insn.addr !3563
  %19 = sub i8 %13, %11, !insn.addr !3563
  %20 = icmp ult i8 %9, %19, !insn.addr !3563
  %21 = icmp ne i8 %12, -1, !insn.addr !3563
  %22 = or i1 %21, %20, !insn.addr !3563
  %23 = icmp ult i8 %9, %12, !insn.addr !3563
  %24 = select i1 %5, i1 %22, i1 %23, !insn.addr !3563
  %25 = icmp eq i8 %13, 0, !insn.addr !3563
  %26 = icmp slt i8 %13, 0, !insn.addr !3563
  %27 = call i8 @llvm.ctpop.i8(i8 %13), !range !258, !insn.addr !3563
  %28 = and i8 %27, 1, !insn.addr !3563
  %29 = icmp eq i8 %28, 0, !insn.addr !3563
  store i8 %13, i8* %8, align 1, !insn.addr !3563
  %30 = zext i1 %24 to i32, !insn.addr !3564
  %31 = zext i1 %29 to i32, !insn.addr !3564
  %32 = zext i1 %18 to i32, !insn.addr !3564
  %33 = zext i1 %25 to i32, !insn.addr !3564
  %34 = zext i1 %26 to i32, !insn.addr !3564
  %35 = mul i32 %31, 4, !insn.addr !3564
  %36 = mul i32 %32, 16, !insn.addr !3564
  %37 = mul i32 %33, 64, !insn.addr !3564
  %38 = mul i32 %34, 128, !insn.addr !3564
  %39 = or i32 %38, %37, !insn.addr !3564
  %40 = or i32 %39, %36, !insn.addr !3564
  %41 = or i32 %40, %30, !insn.addr !3564
  %42 = or i32 %41, %35, !insn.addr !3564
  %43 = mul i32 %42, 256, !insn.addr !3564
  %44 = and i32 %3, -65281, !insn.addr !3564
  %45 = or i32 %44, %43, !insn.addr !3564
  %46 = or i32 %45, 512, !insn.addr !3564
  ret i32 %46, !insn.addr !3565

dec_label_pc_1008a5f:                             ; preds = %dec_label_pc_1008a3f
  %47 = add i32 %0, -37, !insn.addr !3566
  %48 = inttoptr i32 %47 to i32*, !insn.addr !3566
  store i32 0, i32* %48, align 4, !insn.addr !3566
  %49 = call i32 @unknown_1671a18(i32 %3), !insn.addr !3567
  %50 = icmp eq i32 %49, 0, !insn.addr !3568
  %51 = icmp eq i1 %50, false, !insn.addr !3569
  br i1 %51, label %52, label %dec_label_pc_1008a73, !insn.addr !3569

; <label>:52:                                     ; preds = %dec_label_pc_1008a5f
  %53 = call i32 @function_1a009b79(), !insn.addr !3569
  br label %dec_label_pc_1008a73, !insn.addr !3569

dec_label_pc_1008a73:                             ; preds = %52, %dec_label_pc_1008a5f
  %54 = add i32 %1, 4, !insn.addr !3570
  %55 = inttoptr i32 %54 to i32*, !insn.addr !3570
  %56 = load i32, i32* %55, align 4, !insn.addr !3570
  %57 = call i32 @function_1011913(i32 %56), !insn.addr !3571
  ret i32 %57, !insn.addr !3572
}

define i32 @function_1008a86() local_unnamed_addr {
dec_label_pc_1008a86:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %.neg1 = sext i1 %5 to i32
  %.neg2 = sub i32 %2, %0, !insn.addr !3573
  %6 = add i32 %.neg2, %.neg1, !insn.addr !3573
  %7 = trunc i32 %4 to i8
  %8 = mul i8 %7, 2, !insn.addr !3574
  %9 = inttoptr i32 %4 to i8*, !insn.addr !3574
  store i8 %8, i8* %9, align 1, !insn.addr !3574
  %10 = trunc i32 %3 to i8
  %11 = add i8 %10, 1, !insn.addr !3575
  %12 = call i8 @llvm.ctpop.i8(i8 %11), !range !258, !insn.addr !3575
  %13 = and i8 %12, 1, !insn.addr !3575
  %14 = icmp eq i8 %13, 0, !insn.addr !3575
  %15 = load i32, i32* inttoptr (i32 1778466989 to i32*), align 4, !insn.addr !3576
  %16 = call i32 @unknown_7e8642(i32 %6, i32 %15, i32 %0), !insn.addr !3577
  br i1 %14, label %dec_label_pc_1008b18, label %dec_label_pc_1008a9e, !insn.addr !3578

dec_label_pc_1008a9e:                             ; preds = %dec_label_pc_1008a86
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3579
  %18 = call i32* @LocalFree(i32* %17), !insn.addr !3579
  %19 = ptrtoint i32* %18 to i32, !insn.addr !3579
  %20 = mul i32 %1, 8, !insn.addr !3580
  %21 = or i32 %20, 2, !insn.addr !3580
  %22 = add i32 %21, %19, !insn.addr !3580
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3580
  %24 = load i32, i32* %23, align 4, !insn.addr !3580
  %25 = add i32 %24, 1, !insn.addr !3580
  store i32 %25, i32* %23, align 4, !insn.addr !3580
  %26 = call i32 @__asm_int1(), !insn.addr !3581
  ret i32 %26, !insn.addr !3581

dec_label_pc_1008b18:                             ; preds = %dec_label_pc_1008a86
  %27 = add i32 %1, -4, !insn.addr !3582
  %28 = inttoptr i32 %27 to i32*, !insn.addr !3582
  %29 = load i32, i32* %28, align 4, !insn.addr !3582
  ret i32 %29, !insn.addr !3583
}

define i32 @function_1008b1c() local_unnamed_addr {
dec_label_pc_1008b1c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1008b22(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008b22:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 232, !insn.addr !3584
  %2 = and i32 %1, 255, !insn.addr !3584
  %3 = and i32 %0, -256, !insn.addr !3584
  %4 = or i32 %2, %3, !insn.addr !3584
  ret i32 %4, !insn.addr !3585
}

define i32 @function_1008b2e(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008b2e:
  %esp.0.reg2mem = alloca i32, !insn.addr !3586
  %ebx.0.reg2mem = alloca i32, !insn.addr !3586
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %5 = icmp sgt i32 %0, 0, !insn.addr !3587
  br i1 %5, label %dec_label_pc_1008b7a, label %dec_label_pc_1008b4e, !insn.addr !3587

dec_label_pc_1008b4e:                             ; preds = %dec_label_pc_1008b2e
  %6 = add i32 %4, 4, !insn.addr !3588
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3588
  %8 = load i32, i32* %7, align 4, !insn.addr !3588
  %9 = mul i32 %3, 4, !insn.addr !3589
  %10 = add i32 %9, 12, !insn.addr !3589
  %11 = udiv i32 %10, 4, !insn.addr !3590
  %12 = call i32 @__asm_iretd(), !insn.addr !3591
  %13 = add i32 %1, -109, !insn.addr !3592
  %14 = inttoptr i32 %1 to i32*, !insn.addr !3592
  store i32 %13, i32* %14, align 4, !insn.addr !3592
  %15 = inttoptr i32 %8 to i8*, !insn.addr !3593
  call void @__asm_rep_movsb_memcpy(i8* inttoptr (i32 -1946157072 to i8*), i8* %15, i32 %11), !insn.addr !3593
  %16 = load i32, i32* inttoptr (i32 -1241428221 to i32*), align 4, !insn.addr !3594
  store i32 %16, i32* %stack_var_-4, align 4, !insn.addr !3594
  %17 = icmp slt i32 %1, 109, !insn.addr !3595
  br i1 %17, label %dec_label_pc_1008be5, label %dec_label_pc_1008b6d.preheader, !insn.addr !3595

dec_label_pc_1008b6d.preheader:                   ; preds = %dec_label_pc_1008b4e
  %18 = or i32 %11, -256
  %19 = and i32 %12, %18, !insn.addr !3596
  %20 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3594
  store i32 %20, i32* %esp.0.reg2mem
  br label %dec_label_pc_1008b6d

dec_label_pc_1008b6d:                             ; preds = %dec_label_pc_1008b6d.preheader, %dec_label_pc_1008b6d
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %21 = add i32 %esp.0.reload, -4, !insn.addr !3597
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3597
  store i32 3601128, i32* %22, align 4, !insn.addr !3597
  %23 = udiv i32 %ebx.0.reload, 128
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, -2, !insn.addr !3598
  %26 = icmp eq i8 %25, 0, !insn.addr !3598
  %27 = zext i8 %25 to i32, !insn.addr !3598
  %28 = mul i32 %27, 256, !insn.addr !3598
  %29 = and i32 %ebx.0.reload, -65281, !insn.addr !3598
  %30 = or i32 %28, %29, !insn.addr !3598
  %31 = icmp eq i1 %26, false, !insn.addr !3599
  store i32 %30, i32* %ebx.0.reg2mem, !insn.addr !3599
  store i32 %21, i32* %esp.0.reg2mem, !insn.addr !3599
  br i1 %31, label %dec_label_pc_1008b6d, label %dec_label_pc_1008b77, !insn.addr !3599

dec_label_pc_1008b77:                             ; preds = %dec_label_pc_1008b6d
  %32 = add i32 %esp.0.reload, -8, !insn.addr !3600
  %33 = inttoptr i32 %32 to i32*, !insn.addr !3600
  store i32 %30, i32* %33, align 4, !insn.addr !3600
  ret i32 %19, !insn.addr !3600

dec_label_pc_1008b7a:                             ; preds = %dec_label_pc_1008b2e
  %34 = load i8, i8* inttoptr (i32 1166738510 to i8*), align 2, !insn.addr !3601
  %35 = and i32 %4, -256, !insn.addr !3601
  %36 = zext i8 %34 to i32, !insn.addr !3601
  %37 = or i32 %35, %36, !insn.addr !3601
  %38 = inttoptr i32 %37 to i8*, !insn.addr !3602
  %39 = load i8, i8* %38, align 1, !insn.addr !3602
  %40 = xor i8 %39, %34, !insn.addr !3602
  %41 = zext i8 %40 to i32, !insn.addr !3602
  %42 = or i32 %35, %41, !insn.addr !3602
  ret i32 %42, !insn.addr !3603

dec_label_pc_1008be5:                             ; preds = %dec_label_pc_1008b4e
  %43 = add i32 %0, -5, !insn.addr !3604
  %44 = inttoptr i32 %43 to i32*, !insn.addr !3604
  %45 = load i32, i32* %44, align 4, !insn.addr !3604
  %46 = add i32 %45, 123, !insn.addr !3605
  %47 = inttoptr i32 %46 to i32*, !insn.addr !3605
  %48 = load i32, i32* %47, align 4, !insn.addr !3605
  %49 = call i32 @unknown_ffeec1(i32 %48), !insn.addr !3606
  %50 = add i32 %0, 1895760962, !insn.addr !3607
  %51 = inttoptr i32 %50 to i8*, !insn.addr !3607
  %52 = load i8, i8* %51, align 1, !insn.addr !3607
  %53 = trunc i32 %49 to i8, !insn.addr !3607
  %54 = add i8 %52, %53, !insn.addr !3607
  store i8 %54, i8* %51, align 1, !insn.addr !3607
  %55 = add i32 %49, 232, !insn.addr !3608
  %56 = and i32 %55, 255, !insn.addr !3608
  %57 = and i32 %49, -256, !insn.addr !3608
  %58 = or i32 %56, %57, !insn.addr !3608
  %59 = trunc i32 %2 to i16, !insn.addr !3609
  call void @__asm_out.2(i16 %59, i32 %58), !insn.addr !3609
  ret i32 %58, !insn.addr !3609
}

define i32 @function_1008c19(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008c19:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3610
}

define i32 @function_1008c45(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008c45:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %1, -1476460544, !insn.addr !3611
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3611
  %7 = load i32, i32* %6, align 4, !insn.addr !3611
  %8 = zext i1 %4 to i32, !insn.addr !3611
  %9 = add i32 %7, %3, !insn.addr !3611
  %10 = add i32 %9, %8, !insn.addr !3611
  store i32 %10, i32* %6, align 4, !insn.addr !3611
  %11 = add i32 %2, -276895504, !insn.addr !3612
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3612
  store i32 -1, i32* %12, align 4, !insn.addr !3612
  ret i32 %0, !insn.addr !3613
}

define i32 @function_1008c96() local_unnamed_addr {
dec_label_pc_1008c96:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1008cab() local_unnamed_addr {
dec_label_pc_1008cab:
  %0 = call i32 @function_8ca67fb2(), !insn.addr !3614
  ret i32 %0, !insn.addr !3614
}

define i32 @function_1008ce5() local_unnamed_addr {
dec_label_pc_1008ce5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1008cef() local_unnamed_addr {
dec_label_pc_1008cef:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = mul i32 %4, -940313717, !insn.addr !3615
  %7 = add i32 %3, %1, !insn.addr !3616
  %8 = inttoptr i32 %7 to i8*, !insn.addr !3617
  %9 = load i8, i8* %8, align 1, !insn.addr !3617
  %10 = inttoptr i32 %0 to i8*, !insn.addr !3617
  store i8 %9, i8* %10, align 1, !insn.addr !3617
  %11 = select i1 %5, i32 -1, i32 1, !insn.addr !3617
  %12 = add i32 %2, -113, !insn.addr !3618
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3618
  %14 = load i32, i32* %13, align 4, !insn.addr !3618
  %15 = mul i32 %14, 8, !insn.addr !3619
  %16 = add i32 %0, 1166890520, !insn.addr !3617
  %17 = add i32 %16, %11, !insn.addr !3619
  %18 = add i32 %17, %15, !insn.addr !3619
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3619
  %20 = load i32, i32* %19, align 4, !insn.addr !3619
  %21 = call i32 @unknown_1015e54(i32 %6), !insn.addr !3620
  %22 = add i32 %2, -4, !insn.addr !3621
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3621
  %24 = load i32, i32* %23, align 4, !insn.addr !3621
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3622
  %26 = load i32, i32* %25, align 4, !insn.addr !3622
  %27 = call i32 @unknown_65011a18(i32 %26), !insn.addr !3623
  %28 = add i32 %20, 1, !insn.addr !3624
  %29 = call i32 @function_1007bd1(), !insn.addr !3625
  ret i32 %28, !insn.addr !3626
}

define i32 @function_1008d44() local_unnamed_addr {
dec_label_pc_1008d44:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3627
}

define i32 @function_1008d7b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1008d7b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1008d93() local_unnamed_addr {
dec_label_pc_1008d93:
  %0 = call i32 @function_8ca6809a(), !insn.addr !3628
  ret i32 %0, !insn.addr !3628
}

define i32 @function_1008dba(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008dba:
  %storemerge.reg2mem = alloca i32, !insn.addr !3629
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %1, 1099562061, !insn.addr !3629
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3629
  %8 = load i32, i32* %7, align 4, !insn.addr !3629
  %9 = add i32 %8, -1, !insn.addr !3629
  store i32 %9, i32* %7, align 4, !insn.addr !3629
  %10 = add i32 %arg1, -930373134, !insn.addr !3630
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3630
  %12 = load i32, i32* %11, align 4, !insn.addr !3630
  %13 = select i1 %5, i32 -1, i32 1, !insn.addr !3631
  %14 = add i32 %13, %0, !insn.addr !3631
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3632
  %16 = load i32, i32* %15, align 4, !insn.addr !3632
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3633
  %18 = load i32, i32* %17, align 4, !insn.addr !3633
  %19 = sub i32 0, %18, !insn.addr !3633
  store i32 %19, i32* %17, align 4, !insn.addr !3633
  %20 = zext i16 %4 to i32, !insn.addr !3634
  %21 = trunc i16 %4 to i8
  %22 = mul i8 %21, 2, !insn.addr !3635
  %23 = inttoptr i32 %20 to i8*, !insn.addr !3635
  store i8 %22, i8* %23, align 1, !insn.addr !3635
  %24 = inttoptr i32 %14 to i8*, !insn.addr !3636
  %25 = load i8, i8* %24, align 1, !insn.addr !3636
  %26 = zext i8 %25 to i32, !insn.addr !3636
  %27 = and i32 %20, 65280, !insn.addr !3636
  %28 = or i32 %27, %26, !insn.addr !3636
  %29 = inttoptr i32 %28 to i32*, !insn.addr !3637
  %30 = load i32, i32* %29, align 4, !insn.addr !3637
  %31 = sub i32 0, %30, !insn.addr !3637
  store i32 %31, i32* %29, align 4, !insn.addr !3637
  %32 = add i32 %12, -4, !insn.addr !3638
  %33 = inttoptr i32 %32 to i32*, !insn.addr !3638
  %34 = load i32, i32* %33, align 4, !insn.addr !3638
  %35 = icmp eq i32 %34, 0, !insn.addr !3639
  %36 = icmp eq i1 %35, false, !insn.addr !3640
  br i1 %36, label %dec_label_pc_1008e1b, label %dec_label_pc_1008e0a, !insn.addr !3640

dec_label_pc_1008e0a:                             ; preds = %dec_label_pc_1008dba
  %37 = mul i32 %3, 4, !insn.addr !3641
  %38 = add i32 %37, 12, !insn.addr !3641
  %39 = udiv i32 %38, 4, !insn.addr !3642
  %40 = mul i32 %39, %2, !insn.addr !3643
  %41 = icmp eq i32 %40, 1, !insn.addr !3644
  store i32 1, i32* %storemerge.reg2mem, !insn.addr !3645
  br i1 %41, label %dec_label_pc_1008e1d, label %dec_label_pc_1008e1b, !insn.addr !3645

dec_label_pc_1008e1b:                             ; preds = %dec_label_pc_1008e0a, %dec_label_pc_1008dba
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !3646
  br label %dec_label_pc_1008e1d, !insn.addr !3646

dec_label_pc_1008e1d:                             ; preds = %dec_label_pc_1008e1b, %dec_label_pc_1008e0a
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %42 = call i32 @function_1007bd1(), !insn.addr !3647
  ret i32 %storemerge.reload, !insn.addr !3648
}

define i32 @function_1008e56(i32 %arg1) local_unnamed_addr {
dec_label_pc_1008e56:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3649
}

define i32 @function_1008e73(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1008e73:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = zext i1 %3 to i32, !insn.addr !3650
  %5 = add i32 %2, 12, !insn.addr !3650
  %6 = add i32 %5, %4, !insn.addr !3650
  %7 = and i32 %6, 255, !insn.addr !3650
  %8 = and i32 %2, -256, !insn.addr !3650
  %9 = or i32 %7, %8, !insn.addr !3650
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3651
  %11 = load i8, i8* %10, align 1, !insn.addr !3651
  %12 = trunc i32 %6 to i8, !insn.addr !3651
  %13 = add i8 %11, %12, !insn.addr !3651
  store i8 %13, i8* %10, align 1, !insn.addr !3651
  %14 = add i32 %0, -63, !insn.addr !3652
  %15 = inttoptr i32 %14 to i8*, !insn.addr !3652
  %16 = load i8, i8* %15, align 1, !insn.addr !3652
  %17 = trunc i32 %1 to i8, !insn.addr !3652
  %18 = add i8 %16, %17, !insn.addr !3652
  store i8 %18, i8* %15, align 1, !insn.addr !3652
  %19 = call i32 @function_8ca68182(), !insn.addr !3653
  ret i32 %19, !insn.addr !3653
}

define i32 @function_1008e90() local_unnamed_addr {
dec_label_pc_1008e90:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, 1893334085, !insn.addr !3654
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3654
  %6 = load i32, i32* %5, align 4, !insn.addr !3654
  %7 = add i32 %6, -1, !insn.addr !3654
  store i32 %7, i32* %5, align 4, !insn.addr !3654
  %8 = add i32 %2, 4, !insn.addr !3655
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3655
  %10 = load i32, i32* %9, align 4, !insn.addr !3655
  %11 = add i32 %10, 121, !insn.addr !3656
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3656
  %13 = load i32, i32* %12, align 4, !insn.addr !3656
  %14 = call i32 @unknown_ea0089fb(i32 %13), !insn.addr !3657
  %15 = add i32 %1, -1, !insn.addr !3658
  %16 = add i32 %3, 81431300, !insn.addr !3659
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3659
  store i32 %15, i32* %17, align 4, !insn.addr !3659
  %18 = add i32 %2, 125, !insn.addr !3660
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3660
  %20 = load i32, i32* %19, align 4, !insn.addr !3660
  %21 = inttoptr i32 %20 to i32*, !insn.addr !3661
  %22 = load i32, i32* %21, align 4, !insn.addr !3661
  %23 = add i32 %14, 1, !insn.addr !3662
  %24 = mul i32 %20, 4, !insn.addr !3663
  %25 = add i32 %2, -63, !insn.addr !3663
  %26 = add i32 %25, %24, !insn.addr !3663
  %27 = inttoptr i32 %26 to i8*, !insn.addr !3663
  %28 = load i8, i8* %27, align 1, !insn.addr !3663
  %29 = udiv i32 %20, 256, !insn.addr !3663
  %30 = trunc i32 %29 to i8, !insn.addr !3663
  %31 = add i8 %28, %30, !insn.addr !3663
  store i8 %31, i8* %27, align 1, !insn.addr !3663
  %32 = inttoptr i32 %22 to i32*, !insn.addr !3664
  %33 = add i32 %22, 4, !insn.addr !3664
  %34 = add i32 %0, 4, !insn.addr !3664
  %35 = and i32 %23, 2, !insn.addr !3665
  %36 = or i32 %35, 1, !insn.addr !3666
  %37 = inttoptr i32 %34 to i8*, !insn.addr !3667
  %38 = inttoptr i32 %33 to i8*, !insn.addr !3667
  call void @__asm_rep_movsb_memcpy(i8* %38, i8* %37, i32 %36), !insn.addr !3667
  %39 = call i32 @function_56180406(), !insn.addr !3668
  ret i32 %39, !insn.addr !3668
}

define i32 @function_1008ed6() local_unnamed_addr {
dec_label_pc_1008ed6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = icmp ult i8 %3, 81
  br i1 %4, label %dec_label_pc_1008edb, label %dec_label_pc_1008f08, !insn.addr !3669

dec_label_pc_1008edb:                             ; preds = %dec_label_pc_1008ed6
  %5 = mul i8 %3, 2, !insn.addr !3670
  %6 = inttoptr i32 %2 to i8*, !insn.addr !3670
  store i8 %5, i8* %6, align 1, !insn.addr !3670
  %7 = sub i32 %2, %0, !insn.addr !3671
  %8 = add i32 %7, -117, !insn.addr !3672
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3672
  %10 = load i32, i32* %9, align 4, !insn.addr !3672
  %11 = zext i32 %7 to i64, !insn.addr !3672
  %12 = zext i32 %1 to i64, !insn.addr !3672
  %13 = mul i64 %12, 4294967296, !insn.addr !3672
  %14 = or i64 %13, %11, !insn.addr !3672
  %15 = zext i32 %10 to i64, !insn.addr !3672
  %16 = udiv i64 %14, %15, !insn.addr !3672
  %17 = trunc i64 %16 to i32, !insn.addr !3672
  %18 = add i32 %17, -1, !insn.addr !3673
  %19 = add i32 %17, 138, !insn.addr !3674
  %20 = and i32 %19, 255, !insn.addr !3674
  %21 = and i32 %18, -256, !insn.addr !3674
  %22 = or i32 %21, %20, !insn.addr !3674
  ret i32 %22, !insn.addr !3675

dec_label_pc_1008f08:                             ; preds = %dec_label_pc_1008ed6
  ret i32 %2, !insn.addr !3676
}

define i32 @function_1008f0f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1008f0f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3677
}

define i32 @function_1008f17() local_unnamed_addr {
dec_label_pc_1008f17:
  %eax.0.reg2mem = alloca i32, !insn.addr !3678
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %6 = udiv i32 %3, 256, !insn.addr !3679
  %7 = trunc i32 %6 to i8, !insn.addr !3679
  %8 = inttoptr i32 %4 to i8*, !insn.addr !3679
  store i8 %7, i8* %8, align 1, !insn.addr !3679
  %9 = add i32 %1, 51, !insn.addr !3680
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3680
  %11 = load i8, i8* %10, align 1, !insn.addr !3680
  %12 = sub i8 0, %11
  %13 = sub i8 %12, 1
  store i8 %13, i8* %10, align 1, !insn.addr !3680
  %14 = call i32 @function_1007bd1(), !insn.addr !3681
  %15 = call i32 @function_1007c26(), !insn.addr !3682
  %16 = icmp eq i1 %5, false, !insn.addr !3683
  br i1 %16, label %dec_label_pc_1008f78, label %dec_label_pc_1008f33, !insn.addr !3683

dec_label_pc_1008f33:                             ; preds = %dec_label_pc_1008f17
  %17 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3684
  %18 = inttoptr i32 %15 to i32*, !insn.addr !3685
  %19 = load i32, i32* %18, align 4, !insn.addr !3685
  %20 = trunc i32 %19 to i8, !insn.addr !3685
  %21 = mul i32 %0, 9, !insn.addr !3686
  %22 = inttoptr i32 %21 to i8*, !insn.addr !3686
  store i8 %20, i8* %22, align 1, !insn.addr !3686
  %23 = add i32 %2, 1569455173, !insn.addr !3687
  %24 = inttoptr i32 %23 to i32*, !insn.addr !3687
  %25 = load i32, i32* %24, align 4, !insn.addr !3687
  %26 = add i32 %25, -1, !insn.addr !3687
  store i32 %26, i32* %24, align 4, !insn.addr !3687
  %27 = inttoptr i32 %2 to i32*, !insn.addr !3688
  store i32 %17, i32* %27, align 4, !insn.addr !3688
  %28 = and i32 %2, -256, !insn.addr !3689
  %29 = inttoptr i32 %28 to i32*, !insn.addr !3690
  %30 = load i32, i32* %29, align 256, !insn.addr !3690
  %31 = and i32 %30, %0, !insn.addr !3690
  store i32 %31, i32* %29, align 256, !insn.addr !3690
  %32 = and i32 %4, 1048576, !insn.addr !3691
  %33 = icmp eq i32 %32, 0, !insn.addr !3691
  br i1 %33, label %dec_label_pc_1008f6a, label %34, !insn.addr !3692

; <label>:34:                                     ; preds = %dec_label_pc_1008f33
  %35 = call i32 @function_1008f0f(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !3692
  store i32 %35, i32* %eax.0.reg2mem, !insn.addr !3692
  br label %dec_label_pc_1008f6a, !insn.addr !3692

dec_label_pc_1008f6a:                             ; preds = %dec_label_pc_1008f33, %34
  %36 = inttoptr i32 %4 to i32*, !insn.addr !3693
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !3694

dec_label_pc_1008f78:                             ; preds = %dec_label_pc_1008f17
  %37 = trunc i32 %3 to i16, !insn.addr !3695
  %38 = call i8 @__asm_in.3(i16 %37), !insn.addr !3695
  %39 = sext i8 %38 to i32, !insn.addr !3695
  %40 = and i32 %15, -256, !insn.addr !3695
  %41 = or i32 %40, %39, !insn.addr !3695
  ret i32 %41, !insn.addr !3695
}

define i32 @function_1008f7b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1008f7b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1619262533, !insn.addr !3696
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3696
  %4 = load i32, i32* %3, align 4, !insn.addr !3696
  %5 = add i32 %4, -1, !insn.addr !3696
  store i32 %5, i32* %3, align 4, !insn.addr !3696
  %6 = trunc i32 %1 to i8, !insn.addr !3697
  %7 = add i8 %6, -115, !insn.addr !3697
  %8 = icmp ugt i8 %6, 114, !insn.addr !3697
  %9 = icmp eq i8 %7, 0, !insn.addr !3697
  %10 = and i32 %1, -256, !insn.addr !3697
  %11 = or i1 %8, %9, !insn.addr !3698
  br i1 %11, label %dec_label_pc_1008f85, label %dec_label_pc_1008feb, !insn.addr !3698

dec_label_pc_1008f85:                             ; preds = %dec_label_pc_1008f7b
  %12 = add i32 %1, 193, !insn.addr !3699
  %13 = and i32 %12, 255, !insn.addr !3699
  %14 = or i32 %13, %10, !insn.addr !3699
  ret i32 %14, !insn.addr !3700

dec_label_pc_1008feb:                             ; preds = %dec_label_pc_1008f7b
  %15 = zext i8 %7 to i32, !insn.addr !3697
  %16 = or i32 %10, %15, !insn.addr !3697
  %17 = add i32 %16, -347671029, !insn.addr !3701
  ret i32 %17, !insn.addr !3702
}

define i32 @function_1008ffc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1008ffc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3703
}

define i32 @function_1009010() local_unnamed_addr {
dec_label_pc_1009010:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 149446257, !insn.addr !3704
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3704
  %5 = load i32, i32* %4, align 4, !insn.addr !3704
  %6 = add i32 %5, -1, !insn.addr !3704
  store i32 %6, i32* %4, align 4, !insn.addr !3704
  %7 = trunc i32 %0 to i16, !insn.addr !3705
  %8 = call i8 @__asm_in.3(i16 %7), !insn.addr !3705
  %9 = sext i8 %8 to i32, !insn.addr !3705
  %10 = and i32 %2, -256, !insn.addr !3705
  %11 = or i32 %10, %9, !insn.addr !3705
  ret i32 %11, !insn.addr !3705
}

define i32 @function_1009020(i32 %arg1) local_unnamed_addr {
dec_label_pc_1009020:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_wait(), !insn.addr !3706
  %3 = add i32 %0, 1569455173, !insn.addr !3707
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3707
  %5 = load i32, i32* %4, align 4, !insn.addr !3707
  %6 = add i32 %5, -1, !insn.addr !3707
  store i32 %6, i32* %4, align 4, !insn.addr !3707
  %7 = add i32 %1, -16544976, !insn.addr !3708
  %8 = inttoptr i32 %7 to i8*, !insn.addr !3708
  %9 = load i8, i8* %8, align 1, !insn.addr !3708
  %10 = trunc i32 %1 to i8, !insn.addr !3708
  %11 = or i8 %9, %10, !insn.addr !3708
  store i8 %11, i8* %8, align 1, !insn.addr !3708
  ret i32 %2, !insn.addr !3709
}

define i32 @function_1009095() local_unnamed_addr {
dec_label_pc_1009095:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = and i32 %3, 2, !insn.addr !3710
  %6 = icmp ne i32 %5, 0, !insn.addr !3710
  %7 = call i32 @__asm_int3(), !insn.addr !3711
  %8 = inttoptr i32 %0 to i32*, !insn.addr !3712
  %9 = select i1 %4, i32 -4, i32 4, !insn.addr !3712
  %10 = add i32 %9, %0, !insn.addr !3712
  %11 = add i32 %9, %2, !insn.addr !3712
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3713
  %13 = load i32, i32* %12, align 4, !insn.addr !3713
  %14 = select i1 %6, i32 4, i32 3, !insn.addr !3713
  %15 = sub i32 %13, %14, !insn.addr !3713
  %16 = icmp ult i32 %13, %14, !insn.addr !3713
  %17 = or i1 %6, %16, !insn.addr !3713
  store i32 %15, i32* %12, align 4, !insn.addr !3713
  %18 = inttoptr i32 %11 to i8*, !insn.addr !3714
  %19 = inttoptr i32 %10 to i8*, !insn.addr !3714
  call void @__asm_rep_movsb_memcpy(i8* %19, i8* %18, i32 %7), !insn.addr !3714
  %20 = load i32, i32* inttoptr (i32 -9 to i32*), align 4, !insn.addr !3715
  %21 = add i32 %1, -397345723, !insn.addr !3716
  %22 = inttoptr i32 %21 to i8*, !insn.addr !3716
  %23 = load i8, i8* %22, align 1, !insn.addr !3716
  %24 = zext i1 %17 to i8, !insn.addr !3716
  %25 = sub i8 %23, %24, !insn.addr !3716
  store i8 %25, i8* %22, align 1, !insn.addr !3716
  %26 = call i32 @function_1011a00(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !3717
  %27 = add i32 %1, -3, !insn.addr !3718
  %28 = inttoptr i32 %27 to i32*, !insn.addr !3718
  %29 = load i32, i32* %28, align 4, !insn.addr !3718
  %30 = add i32 %20, -4, !insn.addr !3718
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3718
  store i32 %29, i32* %31, align 4, !insn.addr !3718
  ret i32 %26, !insn.addr !3719
}

define i32 @function_10090ce(i32 %arg1) local_unnamed_addr {
dec_label_pc_10090ce:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3720
}

define i32 @function_10090d7(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10090d7:
  %merge.reg2mem = alloca i32, !insn.addr !3721
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i32 @__decompiler_undefined_function_0()
  %11 = and i32 %3, -65281, !insn.addr !3722
  br i1 %6, label %dec_label_pc_100912f, label %dec_label_pc_10090dc, !insn.addr !3723

dec_label_pc_10090dc:                             ; preds = %dec_label_pc_10090d7
  %12 = add i32 %2, -4, !insn.addr !3724
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3724
  store i32 0, i32* %13, align 4, !insn.addr !3724
  %14 = call i32 @function_1007bd1(), !insn.addr !3725
  store i32 0, i32* %13, align 4, !insn.addr !3726
  %15 = call i32 @function_1007c26(), !insn.addr !3727
  store i32 %15, i32* %13, align 4, !insn.addr !3728
  %16 = inttoptr i32 %15 to i32*, !insn.addr !3729
  %17 = load i32, i32* %16, align 4, !insn.addr !3729
  %18 = call i32 @unknown_fff4c1(i32 %17), !insn.addr !3730
  %19 = add i32 %2, -107, !insn.addr !3731
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3731
  %21 = load i32, i32* %20, align 4, !insn.addr !3731
  %22 = add i32 %4, -236090576, !insn.addr !3732
  %23 = inttoptr i32 %22 to i8*, !insn.addr !3732
  %24 = load i8, i8* %23, align 1, !insn.addr !3732
  %25 = trunc i32 %4 to i8, !insn.addr !3732
  %26 = or i8 %24, %25, !insn.addr !3732
  store i8 %26, i8* %23, align 1, !insn.addr !3732
  %27 = add i32 %4, -1, !insn.addr !3733
  %28 = icmp eq i32 %27, 0, !insn.addr !3733
  store i32 %21, i32* %merge.reg2mem, !insn.addr !3733
  br i1 %28, label %dec_label_pc_100910a, label %dec_label_pc_100910e, !insn.addr !3733

dec_label_pc_100910a:                             ; preds = %dec_label_pc_100912f, %dec_label_pc_10090dc
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !3733

dec_label_pc_100910e:                             ; preds = %dec_label_pc_10090dc
  %29 = or i32 %11, 55296, !insn.addr !3734
  %30 = add i32 %29, 25820237, !insn.addr !3735
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3735
  %32 = load i32, i32* %31, align 4, !insn.addr !3735
  %33 = or i32 %32, -117, !insn.addr !3735
  store i32 %33, i32* %31, align 4, !insn.addr !3735
  %34 = add i32 %29, 72256319, !insn.addr !3736
  %35 = inttoptr i32 %34 to i32*, !insn.addr !3736
  %36 = load i32, i32* %35, align 4, !insn.addr !3736
  %37 = add i32 %36, %27, !insn.addr !3736
  %38 = trunc i32 %37 to i8, !insn.addr !3737
  %39 = mul i32 %37, 4, !insn.addr !3737
  %40 = add i32 %39, 12124172, !insn.addr !3737
  %41 = inttoptr i32 %40 to i8*, !insn.addr !3737
  store i8 %38, i8* %41, align 4, !insn.addr !3737
  %42 = call i32 @function_8ca68431(i16 %5), !insn.addr !3738
  ret i32 %42, !insn.addr !3738

dec_label_pc_100912f:                             ; preds = %dec_label_pc_10090d7
  %43 = inttoptr i32 %1 to i8*, !insn.addr !3739
  %44 = inttoptr i32 %0 to i8*, !insn.addr !3739
  call void @__asm_rep_movsb_memcpy(i8* %44, i8* %43, i32 %4), !insn.addr !3739
  %45 = add i32 %arg1, 4, !insn.addr !3740
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3740
  %47 = load i32, i32* %46, align 4, !insn.addr !3740
  %48 = call i32 @unknown_c4ffb2c1(i32 %47), !insn.addr !3741
  %49 = or i1 %8, %9, !insn.addr !3742
  store i32 %48, i32* %merge.reg2mem, !insn.addr !3742
  br i1 %49, label %dec_label_pc_100910a, label %dec_label_pc_1009142, !insn.addr !3742

dec_label_pc_1009142:                             ; preds = %dec_label_pc_100912f
  %50 = or i32 %11, 60416, !insn.addr !3722
  %51 = select i1 %7, i32 -1, i32 1, !insn.addr !3739
  %52 = mul i32 %51, %4, !insn.addr !3739
  %53 = add i32 %48, 4, !insn.addr !3743
  %54 = inttoptr i32 %53 to i32*, !insn.addr !3743
  store i32 0, i32* %54, align 4, !insn.addr !3743
  %55 = call i32 @unknown_6a7bac(), !insn.addr !3744
  %56 = add i32 %10, 1, !insn.addr !3745
  %57 = add i32 %50, 74481667, !insn.addr !3746
  %58 = inttoptr i32 %57 to i32*, !insn.addr !3746
  store i32 1, i32* %58, align 4, !insn.addr !3746
  %59 = add i32 %0, -1, !insn.addr !3739
  %60 = add i32 %59, %52, !insn.addr !3747
  %61 = add i32 %55, 116, !insn.addr !3748
  %62 = and i32 %61, 255, !insn.addr !3748
  %63 = and i32 %55, -256, !insn.addr !3748
  %64 = or i32 %62, %63, !insn.addr !3748
  %65 = inttoptr i32 %64 to i8*, !insn.addr !3749
  %66 = load i8, i8* %65, align 1, !insn.addr !3749
  %67 = trunc i32 %61 to i8, !insn.addr !3749
  %68 = add i8 %66, %67, !insn.addr !3749
  store i8 %68, i8* %65, align 1, !insn.addr !3749
  %69 = udiv i32 %64, 2
  %70 = and i32 %69, 1073741823, !insn.addr !3750
  %71 = inttoptr i32 %60 to i8*, !insn.addr !3751
  %72 = inttoptr i32 %56 to i8*, !insn.addr !3751
  call void @__asm_rep_movsd_memcpy(i8* %72, i8* %71, i32 %70), !insn.addr !3751
  call void @llvm.trap()
  unreachable
}

define i32 @function_10091ad() local_unnamed_addr {
dec_label_pc_10091ad:
  %storemerge.reg2mem = alloca i32, !insn.addr !3752
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = trunc i32 %0 to i8, !insn.addr !3752
  %4 = and i8 %3, 14, !insn.addr !3752
  %5 = icmp ugt i8 %4, 9, !insn.addr !3752
  %6 = or i1 %1, %5, !insn.addr !3752
  %7 = icmp ugt i8 %3, -103
  %8 = or i1 %7, %2
  br i1 %6, label %9, label %14, !insn.addr !3752

; <label>:9:                                      ; preds = %dec_label_pc_10091ad
  %.v = select i1 %8, i32 102, i32 6
  %10 = add i32 %.v, %0, !insn.addr !3752
  %11 = and i32 %10, 255, !insn.addr !3752
  %12 = and i32 %0, -256, !insn.addr !3752
  %13 = or i32 %11, %12, !insn.addr !3752
  store i32 %13, i32* %storemerge.reg2mem, !insn.addr !3752
  br label %20, !insn.addr !3752

; <label>:14:                                     ; preds = %dec_label_pc_10091ad
  %15 = add i32 %0, 96, !insn.addr !3752
  %16 = select i1 %8, i32 %15, i32 %0, !insn.addr !3752
  %17 = and i32 %16, 255, !insn.addr !3752
  %18 = and i32 %0, -256, !insn.addr !3752
  %19 = or i32 %17, %18, !insn.addr !3752
  store i32 %19, i32* %storemerge.reg2mem, !insn.addr !3752
  br label %20, !insn.addr !3752

; <label>:20:                                     ; preds = %9, %14
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %21 = inttoptr i32 %storemerge.reload to i32*, !insn.addr !3753
  %22 = load i32, i32* %21, align 4, !insn.addr !3753
  %23 = sub i32 %storemerge.reload, %22, !insn.addr !3753
  %24 = mul i32 %23, 2, !insn.addr !3754
  %25 = add i32 %24, -1712828164, !insn.addr !3754
  %26 = inttoptr i32 %25 to i8*, !insn.addr !3754
  %27 = load i8, i8* %26, align 2, !insn.addr !3754
  %28 = udiv i32 %23, 256, !insn.addr !3754
  %29 = trunc i32 %28 to i8, !insn.addr !3754
  %30 = add i8 %27, %29, !insn.addr !3754
  store i8 %30, i8* %26, align 2, !insn.addr !3754
  ret i32 %23, !insn.addr !3755
}

define i32 @function_10091c1(i32 %arg1) local_unnamed_addr {
dec_label_pc_10091c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_100bbd4(), !insn.addr !3756
  %2 = add i32 %0, -4, !insn.addr !3757
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3757
  %4 = load i32, i32* %3, align 4, !insn.addr !3757
  ret i32 %4, !insn.addr !3758
}

define i32 @function_10091cf() local_unnamed_addr {
dec_label_pc_10091cf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = trunc i32 %3 to i8
  %5 = mul i8 %4, 2, !insn.addr !3759
  %6 = inttoptr i32 %3 to i8*, !insn.addr !3759
  store i8 %5, i8* %6, align 1, !insn.addr !3759
  %7 = add i32 %1, -4, !insn.addr !3760
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3760
  %9 = load i32, i32* %8, align 4, !insn.addr !3760
  %10 = load i32, i32* inttoptr (i32 1258377052 to i32*), align 4, !insn.addr !3761
  %11 = sub i32 %10, %0, !insn.addr !3761
  store i32 %11, i32* inttoptr (i32 1258377052 to i32*), align 4, !insn.addr !3761
  %12 = call i32 @unknown_207bd1(i32 %9, i32 %2), !insn.addr !3762
  %13 = and i32 %12, -65281, !insn.addr !3763
  ret i32 %13, !insn.addr !3764
}

define i32 @function_10091ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_10091ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1009209() local_unnamed_addr {
dec_label_pc_1009209:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100920a() local_unnamed_addr {
dec_label_pc_100920a:
  %0 = call i32 @function_468c9169(), !insn.addr !3765
  ret i32 %0, !insn.addr !3765
}

define i32 @function_1009216() local_unnamed_addr {
dec_label_pc_1009216:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3766
  %3 = add i32 %1, 4, !insn.addr !3767
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3767
  %5 = load i32, i32* %4, align 4, !insn.addr !3767
  %6 = call i32 @unknown_127bfb(i32 %5), !insn.addr !3768
  %7 = add i32 %0, -8, !insn.addr !3769
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3769
  %9 = load i32, i32* %8, align 4, !insn.addr !3769
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3770
  store i32 %6, i32* %10, align 4, !insn.addr !3770
  %11 = load i32, i32* %8, align 4, !insn.addr !3771
  %12 = and i32 %11, 114, !insn.addr !3772
  %13 = or i32 %12, 141, !insn.addr !3772
  %14 = and i32 %11, -256, !insn.addr !3772
  %15 = or i32 %13, %14, !insn.addr !3773
  %16 = inttoptr i32 %15 to i8*, !insn.addr !3774
  %17 = load i8, i8* %16, align 1, !insn.addr !3774
  %18 = trunc i32 %13 to i8, !insn.addr !3774
  %19 = add i8 %17, %18, !insn.addr !3774
  store i8 %19, i8* %16, align 1, !insn.addr !3774
  %20 = call i32 @function_8ca6854a(i32 %9), !insn.addr !3775
  ret i32 %20, !insn.addr !3775
}

define i32 @function_1009256() local_unnamed_addr {
dec_label_pc_1009256:
  %0 = call i32 @function_468c925a(), !insn.addr !3776
  ret i32 %0, !insn.addr !3776
}

define i32 @function_100926a() local_unnamed_addr {
dec_label_pc_100926a:
  %0 = call i32 @function_4e0a926e(), !insn.addr !3777
  ret i32 %0, !insn.addr !3777
}

define i32 @function_1009280() local_unnamed_addr {
dec_label_pc_1009280:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_6()
  %3 = add i32 %1, 141, !insn.addr !3778
  %4 = and i32 %3, 255, !insn.addr !3778
  %5 = and i32 %1, -256, !insn.addr !3778
  %6 = or i32 %4, %5, !insn.addr !3778
  %7 = fptosi x86_fp80 %2 to i32, !insn.addr !3779
  %8 = add i32 %0, 12, !insn.addr !3779
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3779
  store i32 %7, i32* %9, align 4, !insn.addr !3779
  ret i32 %6, !insn.addr !3780
}

define i32 @function_10092c6() local_unnamed_addr {
dec_label_pc_10092c6:
  %0 = call i32 @function_768a91dc(), !insn.addr !3781
  ret i32 %0, !insn.addr !3781
}

define i32 @function_10092ec() local_unnamed_addr {
dec_label_pc_10092ec:
  %0 = call i32 @function_4e8c92f0(), !insn.addr !3782
  ret i32 %0, !insn.addr !3782
}

define i32 @function_10092f5(i32 %arg1) local_unnamed_addr {
dec_label_pc_10092f5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3783
}

define i32 @function_100931e() local_unnamed_addr {
dec_label_pc_100931e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100932e() local_unnamed_addr {
dec_label_pc_100932e:
  %0 = call i32 @function_100931e(), !insn.addr !3784
  ret i32 %0, !insn.addr !3784
}

define i32 @function_100935b() local_unnamed_addr {
dec_label_pc_100935b:
  %0 = call i32 @function_8ca68727(), !insn.addr !3785
  ret i32 %0, !insn.addr !3785
}

define i32 @function_1009363() local_unnamed_addr {
dec_label_pc_1009363:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8
  %4 = mul i8 %3, 2, !insn.addr !3786
  %5 = inttoptr i32 %1 to i8*, !insn.addr !3786
  store i8 %4, i8* %5, align 1, !insn.addr !3786
  %6 = add i32 %0, -4, !insn.addr !3787
  %7 = add i32 %6, %1, !insn.addr !3788
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3788
  %9 = xor i32 %2, ptrtoint (i32* @global_var_1014ff6 to i32), !insn.addr !3789
  ret i32 %9, !insn.addr !3789
}

define i32 @function_1009389(i32 %arg1) local_unnamed_addr {
dec_label_pc_1009389:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = add i32 %0, 1, !insn.addr !3790
  %7 = bitcast i32* %eax to i8*
  %8 = inttoptr i32 %4 to i8*, !insn.addr !3791
  store i8 0, i8* %8, align 1, !insn.addr !3791
  %9 = add i32 %2, 127, !insn.addr !3792
  %10 = inttoptr i32 %9 to i8*, !insn.addr !3792
  %11 = load i8, i8* %10, align 1, !insn.addr !3792
  %12 = udiv i32 %3, 256, !insn.addr !3792
  %13 = trunc i32 %12 to i8, !insn.addr !3792
  %14 = add i8 %11, %13, !insn.addr !3792
  store i8 %14, i8* %10, align 1, !insn.addr !3792
  %15 = load i32, i32* %eax, align 4, !insn.addr !3793
  %16 = inttoptr i32 %6 to i32*, !insn.addr !3793
  store i32 %15, i32* %16, align 4, !insn.addr !3793
  %17 = load i8, i8* %7, align 4, !insn.addr !3794
  %18 = load i32, i32* %eax, align 4
  %19 = trunc i32 %18 to i8, !insn.addr !3794
  %20 = add i8 %17, %19, !insn.addr !3794
  %21 = inttoptr i32 %18 to i8*, !insn.addr !3794
  store i8 %20, i8* %21, align 1, !insn.addr !3794
  %22 = add i32 %1, -79, !insn.addr !3795
  %23 = inttoptr i32 %22 to i32*, !insn.addr !3795
  %24 = call i32 @unknown_ffffe887(i16 %5), !insn.addr !3796
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3797
  %26 = load i32, i32* %25, align 4, !insn.addr !3797
  %sext = mul i32 %26, 65536
  %27 = sdiv i32 %sext, 65536, !insn.addr !3798
  %28 = call i32 @function_1007c36(i32 %27), !insn.addr !3798
  %29 = add i32 %1, -4, !insn.addr !3799
  %30 = inttoptr i32 %29 to i32*, !insn.addr !3799
  %31 = load i32, i32* %30, align 4, !insn.addr !3799
  %32 = inttoptr i32 %31 to i32*, !insn.addr !3800
  ret i32 %31, !insn.addr !3801
}

define i32 @function_10093b1() local_unnamed_addr {
dec_label_pc_10093b1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !3802
  %3 = inttoptr i32 %0 to i32*, !insn.addr !3802
  store i32 %2, i32* %3, align 4, !insn.addr !3802
  ret i32 %1, !insn.addr !3803
}

define i32 @function_10093c3(i32 %arg1) local_unnamed_addr {
dec_label_pc_10093c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %0, 255, !insn.addr !3804
  %4 = and i32 %2, -256, !insn.addr !3804
  %5 = or i32 %4, %3, !insn.addr !3804
  %6 = add i32 %5, %1, !insn.addr !3805
  %7 = inttoptr i32 %1 to i32*, !insn.addr !3805
  store i32 %6, i32* %7, align 4, !insn.addr !3805
  %8 = call i32 @function_1ee9c1c1(), !insn.addr !3806
  ret i32 %8, !insn.addr !3806
}

define i32 @function_1009409(i32 %arg1) local_unnamed_addr {
dec_label_pc_1009409:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = add i32 %0, -4, !insn.addr !3807
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3807
  %5 = load i32, i32* %4, align 4, !insn.addr !3807
  %6 = add i32 %5, -57, !insn.addr !3808
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3808
  %8 = select i1 %2, i32 173, i32 172, !insn.addr !3809
  %9 = sub i32 %1, %8, !insn.addr !3809
  %10 = and i32 %9, 255, !insn.addr !3809
  %11 = and i32 %1, -256, !insn.addr !3809
  %12 = or i32 %10, %11, !insn.addr !3809
  ret i32 %12, !insn.addr !3810
}

define i32 @function_1009414(i32 %arg1) local_unnamed_addr {
dec_label_pc_1009414:
  %esi.0.reg2mem = alloca i32, !insn.addr !3811
  %esp.0.reg2mem = alloca i32, !insn.addr !3811
  %edx.0.reg2mem = alloca i32, !insn.addr !3811
  %eax.0.reg2mem = alloca i32, !insn.addr !3811
  %storemerge2.reg2mem = alloca i32, !insn.addr !3811
  %storemerge.reg2mem = alloca i32, !insn.addr !3811
  %merge.reg2mem = alloca i32, !insn.addr !3811
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = and i32 %5, -256, !insn.addr !3812
  %8 = add i32 %5, 22, !insn.addr !3813
  %9 = and i32 %8, 255, !insn.addr !3813
  %10 = or i32 %9, %7, !insn.addr !3813
  %11 = sub i32 %3, %1, !insn.addr !3814
  %12 = icmp slt i32 %11, 0, !insn.addr !3814
  %13 = inttoptr i32 %3 to i32*, !insn.addr !3814
  store i32 %11, i32* %13, align 4, !insn.addr !3814
  store i32 %10, i32* %merge.reg2mem, !insn.addr !3815
  br i1 %12, label %dec_label_pc_1009424, label %dec_label_pc_1009420, !insn.addr !3815

dec_label_pc_1009420:                             ; preds = %dec_label_pc_10094c1, %dec_label_pc_1009414
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !3816

dec_label_pc_1009424:                             ; preds = %dec_label_pc_1009414
  %14 = add i32 %0, -1, !insn.addr !3817
  %15 = inttoptr i32 %10 to i8*, !insn.addr !3818
  %16 = load i8, i8* %15, align 1, !insn.addr !3818
  %17 = trunc i32 %8 to i8, !insn.addr !3818
  %18 = add i8 %16, %17, !insn.addr !3818
  store i8 %18, i8* %15, align 1, !insn.addr !3818
  %19 = add i32 %2, 46645718, !insn.addr !3819
  %20 = inttoptr i32 %19 to i8*, !insn.addr !3819
  %21 = load i8, i8* %20, align 1, !insn.addr !3819
  %22 = trunc i32 %4 to i8, !insn.addr !3819
  %23 = add i8 %21, %22, !insn.addr !3819
  store i8 %23, i8* %20, align 1, !insn.addr !3819
  %24 = icmp ult i32 %10, %14, !insn.addr !3820
  %25 = select i1 %6, i32 -4, i32 4, !insn.addr !3820
  %26 = add i32 %25, %0, !insn.addr !3820
  %27 = inttoptr i32 %14 to i32*, !insn.addr !3821
  %28 = load i32, i32* %27, align 4, !insn.addr !3821
  %29 = inttoptr i32 %26 to i32*, !insn.addr !3821
  store i32 %28, i32* %29, align 4, !insn.addr !3821
  %30 = add i32 %26, %25, !insn.addr !3821
  %31 = add i32 %30, 3, !insn.addr !3822
  %32 = inttoptr i32 %31 to i32*, !insn.addr !3822
  %33 = load i32, i32* %32, align 4, !insn.addr !3822
  %34 = select i1 %24, i32 -12, i32 -13, !insn.addr !3822
  %35 = add i32 %33, %34, !insn.addr !3822
  store i32 %35, i32* %32, align 4, !insn.addr !3822
  %36 = and i32 %2, -65281, !insn.addr !3823
  %37 = add i32 %1, -8, !insn.addr !3824
  %38 = call i32 @function_101636f(i32 %37), !insn.addr !3825
  %39 = add i32 %1, 1, !insn.addr !3826
  %40 = xor i32 %1, -2147483648
  %41 = and i32 %39, %40, !insn.addr !3826
  %42 = icmp slt i32 %41, 0, !insn.addr !3826
  %43 = call i32 @__asm_sti(), !insn.addr !3827
  %44 = call i32 @function_1008b1c(), !insn.addr !3828
  %45 = icmp eq i1 %42, false, !insn.addr !3829
  br i1 %45, label %dec_label_pc_10094c1, label %dec_label_pc_100944c, !insn.addr !3829

dec_label_pc_100944c:                             ; preds = %dec_label_pc_1009424
  %46 = call i32 @function_100bbd4(), !insn.addr !3830
  %47 = add i32 %1, -7, !insn.addr !3831
  %48 = inttoptr i32 %47 to i32*, !insn.addr !3831
  %49 = load i32, i32* %48, align 4, !insn.addr !3831
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3832
  %51 = load i32, i32* %50, align 4, !insn.addr !3832
  %52 = sub i32 0, %51, !insn.addr !3832
  store i32 %52, i32* %50, align 4, !insn.addr !3832
  %53 = and i32 %8, 15, !insn.addr !3833
  %54 = icmp eq i32 %53, 15, !insn.addr !3833
  %55 = trunc i32 %3 to i16, !insn.addr !3834
  %56 = call i8 @__asm_in.3(i16 %55), !insn.addr !3834
  %57 = sext i8 %56 to i32, !insn.addr !3834
  %58 = and i32 %49, -256, !insn.addr !3834
  %59 = or i32 %58, %57, !insn.addr !3834
  %60 = and i8 %56, 14, !insn.addr !3835
  %61 = icmp ugt i8 %60, 9, !insn.addr !3835
  %62 = or i1 %54, %61, !insn.addr !3835
  %63 = icmp ugt i8 %56, -103
  br i1 %62, label %64, label %69, !insn.addr !3835

; <label>:64:                                     ; preds = %dec_label_pc_100944c
  %.v = select i1 %63, i8 102, i8 6
  %65 = add i8 %.v, %56, !insn.addr !3835
  %66 = zext i8 %65 to i32, !insn.addr !3835
  %67 = and i32 %59, -256, !insn.addr !3835
  %68 = or i32 %67, %66, !insn.addr !3835
  store i32 %68, i32* %storemerge.reg2mem, !insn.addr !3835
  br label %75, !insn.addr !3835

; <label>:69:                                     ; preds = %dec_label_pc_100944c
  %70 = add i8 %56, 96, !insn.addr !3835
  %71 = select i1 %63, i8 %70, i8 %56, !insn.addr !3835
  %72 = zext i8 %71 to i32, !insn.addr !3835
  %73 = and i32 %59, -256, !insn.addr !3835
  %74 = or i32 %73, %72, !insn.addr !3835
  store i32 %74, i32* %storemerge.reg2mem, !insn.addr !3835
  br label %75, !insn.addr !3835

; <label>:75:                                     ; preds = %64, %69
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %76 = inttoptr i32 %storemerge.reload to i8*, !insn.addr !3836
  %77 = load i8, i8* %76, align 1, !insn.addr !3836
  %78 = trunc i32 %storemerge.reload to i8, !insn.addr !3836
  %79 = add i8 %77, %78, !insn.addr !3836
  store i8 %79, i8* %76, align 1, !insn.addr !3836
  %80 = add i32 %1, 126, !insn.addr !3837
  %81 = inttoptr i32 %80 to i32*, !insn.addr !3837
  %82 = load i32, i32* %81, align 4, !insn.addr !3837
  %83 = load i8, i8* @global_var_1014f5c, align 1, !insn.addr !3838
  %84 = trunc i32 %2 to i8
  %85 = sub i8 %83, %84, !insn.addr !3838
  store i8 %85, i8* @global_var_1014f5c, align 1, !insn.addr !3838
  %86 = call i32 @unknown_ffd5d1(i32 %82), !insn.addr !3839
  %87 = and i32 %86, 255, !insn.addr !3840
  %88 = add nsw i32 %87, %36, !insn.addr !3840
  %89 = inttoptr i32 %88 to i8*, !insn.addr !3840
  %90 = load i8, i8* %89, align 1, !insn.addr !3840
  %91 = zext i8 %90 to i32, !insn.addr !3840
  %92 = and i32 %86, -256, !insn.addr !3840
  %93 = or i32 %92, %91, !insn.addr !3840
  ret i32 %93, !insn.addr !3841

dec_label_pc_10094c1:                             ; preds = %dec_label_pc_1009424
  %94 = add i32 %36, 80871174, !insn.addr !3842
  %95 = inttoptr i32 %94 to i8*, !insn.addr !3842
  %96 = load i8, i8* %95, align 1, !insn.addr !3842
  %97 = add i8 %96, %17, !insn.addr !3842
  %98 = icmp ult i8 %97, %96, !insn.addr !3842
  %99 = icmp eq i8 %97, 0, !insn.addr !3842
  store i8 %97, i8* %95, align 1, !insn.addr !3842
  %100 = call i32 @unknown_787bfb(), !insn.addr !3843
  %101 = or i1 %98, %99, !insn.addr !3844
  store i32 %100, i32* %merge.reg2mem, !insn.addr !3844
  br i1 %101, label %dec_label_pc_1009420, label %dec_label_pc_10094d1, !insn.addr !3844

dec_label_pc_10094d1:                             ; preds = %dec_label_pc_10094c1
  %102 = and i8 %96, 15, !insn.addr !3842
  %103 = and i8 %17, 15, !insn.addr !3842
  %104 = add nuw nsw i8 %102, %103, !insn.addr !3842
  %105 = icmp ugt i8 %104, 15, !insn.addr !3842
  %106 = inttoptr i32 %36 to i32*, !insn.addr !3845
  %107 = load i32, i32* %106, align 4, !insn.addr !3845
  %108 = and i32 %107, 14
  %109 = icmp ugt i32 %108, 9, !insn.addr !3846
  %110 = or i1 %105, %109, !insn.addr !3846
  br i1 %110, label %111, label %116, !insn.addr !3846

; <label>:111:                                    ; preds = %dec_label_pc_10094d1
  %112 = add i32 %107, 102, !insn.addr !3846
  %113 = and i32 %112, 255, !insn.addr !3846
  %114 = and i32 %107, -256, !insn.addr !3846
  %115 = or i32 %113, %114, !insn.addr !3846
  store i32 %115, i32* %storemerge2.reg2mem, !insn.addr !3846
  br label %dec_label_pc_10094f2, !insn.addr !3846

; <label>:116:                                    ; preds = %dec_label_pc_10094d1
  %117 = add i32 %107, 96, !insn.addr !3846
  %118 = and i32 %117, 255, !insn.addr !3846
  %119 = and i32 %107, -256, !insn.addr !3846
  %120 = or i32 %118, %119, !insn.addr !3846
  store i32 %120, i32* %storemerge2.reg2mem, !insn.addr !3846
  br label %dec_label_pc_10094f2, !insn.addr !3846

dec_label_pc_10094f2:                             ; preds = %111, %116
  %121 = add i32 %25, %14, !insn.addr !3821
  %storemerge2.reload = load i32, i32* %storemerge2.reg2mem
  %122 = and i32 %storemerge2.reload, 103, !insn.addr !3847
  %123 = or i32 %122, 152, !insn.addr !3847
  %124 = and i32 %storemerge2.reload, -256, !insn.addr !3847
  %125 = or i32 %123, %124, !insn.addr !3847
  %126 = inttoptr i32 %125 to i8*, !insn.addr !3848
  %127 = load i8, i8* %126, align 1, !insn.addr !3848
  %128 = trunc i32 %123 to i8, !insn.addr !3848
  %129 = add i8 %127, %128, !insn.addr !3848
  store i8 %129, i8* %126, align 1, !insn.addr !3848
  %130 = mul i32 %2, 256
  %131 = add i32 %3, %130
  %132 = and i32 %131, 65280, !insn.addr !3849
  %133 = and i32 %3, -65281, !insn.addr !3849
  %134 = or i32 %132, %133, !insn.addr !3849
  %135 = inttoptr i32 %121 to i32*, !insn.addr !3850
  %136 = load i32, i32* %135, align 4, !insn.addr !3850
  %137 = inttoptr i32 %30 to i32*, !insn.addr !3850
  store i32 %136, i32* %137, align 4, !insn.addr !3850
  %138 = add i32 %30, %25, !insn.addr !3850
  %139 = add i32 %121, %25, !insn.addr !3850
  %140 = and i32 %storemerge2.reload, 3, !insn.addr !3851
  %141 = inttoptr i32 %139 to i8*, !insn.addr !3852
  %142 = inttoptr i32 %138 to i8*, !insn.addr !3852
  call void @__asm_rep_movsb_memcpy(i8* %142, i8* %141, i32 %140), !insn.addr !3852
  %143 = select i1 %6, i32 -1, i32 1, !insn.addr !3852
  %144 = mul nsw i32 %140, %143, !insn.addr !3852
  %145 = add i32 %144, %138, !insn.addr !3852
  %146 = load i32, i32* %106, align 4, !insn.addr !3853
  %147 = inttoptr i32 %39 to i32*, !insn.addr !3854
  %148 = load i32, i32* %147, align 4, !insn.addr !3854
  %149 = trunc i32 %146 to i8
  %150 = add i8 %149, -24, !insn.addr !3855
  call void @__asm_out.6(i32 181, i8 %150), !insn.addr !3855
  store i32 %145, i32* %147, align 4, !insn.addr !3856
  %151 = call i32 @__asm_int3(), !insn.addr !3857
  %152 = add i32 %1, -3, !insn.addr !3858
  %153 = add i32 %1, -7, !insn.addr !3858
  %154 = add i32 %1, -11, !insn.addr !3858
  %155 = add i32 %1, -15, !insn.addr !3858
  %156 = add i32 %1, -19, !insn.addr !3858
  %157 = add i32 %1, -23, !insn.addr !3858
  %158 = add i32 %1, -27, !insn.addr !3858
  %159 = add i32 %1, -31, !insn.addr !3858
  %160 = inttoptr i32 %152 to i32*, !insn.addr !3858
  store i32 %151, i32* %160, align 4, !insn.addr !3858
  %161 = inttoptr i32 %153 to i32*, !insn.addr !3858
  store i32 0, i32* %161, align 4, !insn.addr !3858
  %162 = inttoptr i32 %154 to i32*, !insn.addr !3858
  store i32 %134, i32* %162, align 4, !insn.addr !3858
  %163 = inttoptr i32 %155 to i32*, !insn.addr !3858
  store i32 %36, i32* %163, align 4, !insn.addr !3858
  %164 = inttoptr i32 %156 to i32*, !insn.addr !3858
  store i32 %39, i32* %164, align 4, !insn.addr !3858
  %165 = inttoptr i32 %157 to i32*, !insn.addr !3858
  store i32 %148, i32* %165, align 4, !insn.addr !3858
  %166 = inttoptr i32 %158 to i32*, !insn.addr !3858
  store i32 %145, i32* %166, align 4, !insn.addr !3858
  %167 = inttoptr i32 %159 to i32*, !insn.addr !3858
  store i32 %145, i32* %167, align 4, !insn.addr !3858
  %168 = add i32 %148, 12, !insn.addr !3859
  %169 = inttoptr i32 %168 to i32*, !insn.addr !3859
  %170 = load i32, i32* %169, align 4, !insn.addr !3859
  %171 = add i32 %170, 4, !insn.addr !3860
  %172 = inttoptr i32 %171 to i32*, !insn.addr !3860
  %173 = load i32, i32* %172, align 4, !insn.addr !3860
  %174 = add i32 %1, -35, !insn.addr !3861
  %175 = inttoptr i32 %174 to i32*, !insn.addr !3861
  store i32 %134, i32* %175, align 4, !insn.addr !3861
  %176 = add i32 %1, -33, !insn.addr !3862
  %177 = trunc i32 %173 to i8, !insn.addr !3863
  %178 = add i8 %177, -24, !insn.addr !3863
  %179 = icmp eq i8 %178, 0, !insn.addr !3863
  %180 = zext i8 %178 to i32, !insn.addr !3863
  %181 = and i32 %173, -256, !insn.addr !3863
  %182 = or i32 %181, %180, !insn.addr !3863
  %183 = trunc i32 %134 to i16, !insn.addr !3864
  call void @__asm_out.2(i16 %183, i32 %182), !insn.addr !3864
  call void @__asm_out.6(i32 85, i8 %178), !insn.addr !3865
  call void @__asm_out.2(i16 %183, i32 %182), !insn.addr !3866
  %184 = icmp eq i1 %179, false, !insn.addr !3867
  store i32 %182, i32* %eax.0.reg2mem, !insn.addr !3867
  store i32 %134, i32* %edx.0.reg2mem, !insn.addr !3867
  store i32 %176, i32* %esp.0.reg2mem, !insn.addr !3867
  store i32 %170, i32* %esi.0.reg2mem, !insn.addr !3867
  br i1 %184, label %dec_label_pc_100951a, label %dec_label_pc_100950e, !insn.addr !3867

dec_label_pc_100950e:                             ; preds = %dec_label_pc_10094f2
  store i32 %182, i32* inttoptr (i32 -33 to i32*), align 4, !insn.addr !3868
  %185 = load i32, i32* %172, align 4, !insn.addr !3869
  %186 = load i32, i32* %106, align 4, !insn.addr !3870
  %187 = inttoptr i32 %176 to i32*, !insn.addr !3871
  %188 = load i32, i32* %187, align 4, !insn.addr !3871
  %189 = add i32 %1, -29, !insn.addr !3871
  store i32 %186, i32* %eax.0.reg2mem, !insn.addr !3871
  store i32 %188, i32* %edx.0.reg2mem, !insn.addr !3871
  store i32 %189, i32* %esp.0.reg2mem, !insn.addr !3871
  store i32 %185, i32* %esi.0.reg2mem, !insn.addr !3871
  br label %dec_label_pc_100951a, !insn.addr !3871

dec_label_pc_100951a:                             ; preds = %dec_label_pc_100950e, %dec_label_pc_10094f2
  %190 = icmp slt i8 %178, 0, !insn.addr !3863
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  br i1 %190, label %dec_label_pc_100957b, label %dec_label_pc_100951c, !insn.addr !3872

dec_label_pc_100951c:                             ; preds = %dec_label_pc_100951a
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %191 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !3873
  %192 = load i8, i8* %191, align 1, !insn.addr !3873
  %193 = trunc i32 %eax.0.reload to i8, !insn.addr !3873
  %194 = add i8 %192, %193, !insn.addr !3873
  store i8 %194, i8* %191, align 1, !insn.addr !3873
  %195 = udiv i32 %eax.0.reload, 67108864
  %196 = and i32 %195, 31, !insn.addr !3874
  %197 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !3875
  %198 = inttoptr i32 %145 to i8*, !insn.addr !3875
  call void @__asm_rep_movsd_memcpy(i8* %198, i8* %197, i32 %196), !insn.addr !3875
  %199 = mul nsw i32 %196, %25, !insn.addr !3875
  %200 = add i32 %199, %145, !insn.addr !3875
  %201 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !3876
  %202 = load i32, i32* %201, align 4, !insn.addr !3876
  %203 = sub i32 0, %202, !insn.addr !3876
  store i32 %203, i32* %201, align 4, !insn.addr !3876
  %204 = add i32 %esp.0.reload, -6, !insn.addr !3877
  %205 = inttoptr i32 %204 to i32*, !insn.addr !3877
  store i32 %200, i32* %205, align 4, !insn.addr !3877
  %206 = inttoptr i32 %edx.0.reload to i32*, !insn.addr !3878
  %207 = load i32, i32* %206, align 4, !insn.addr !3878
  %208 = add i32 %esp.0.reload, -10, !insn.addr !3878
  %209 = inttoptr i32 %208 to i32*, !insn.addr !3878
  store i32 %207, i32* %209, align 4, !insn.addr !3878
  %210 = call i32 @function_1008f17(), !insn.addr !3879
  %211 = icmp eq i32 %210, 0, !insn.addr !3880
  br i1 %211, label %212, label %dec_label_pc_100954a, !insn.addr !3881

; <label>:212:                                    ; preds = %dec_label_pc_100951c
  %213 = add i32 %esp.0.reload, -2, !insn.addr !3882
  %214 = inttoptr i32 %213 to i16*, !insn.addr !3882
  %215 = call i32 @function_1015fef(), !insn.addr !3881
  br label %dec_label_pc_100954a, !insn.addr !3881

dec_label_pc_100954a:                             ; preds = %212, %dec_label_pc_100951c
  %216 = load i32, i32* %206, align 4, !insn.addr !3883
  %217 = add i32 %esp.0.reload, -14, !insn.addr !3883
  %218 = inttoptr i32 %217 to i32*, !insn.addr !3883
  store i32 %216, i32* %218, align 4, !insn.addr !3883
  %219 = call i32 @function_1002ad1(), !insn.addr !3884
  store i32 0, i32* %206, align 4, !insn.addr !3885
  %220 = trunc i32 %edx.0.reload to i16, !insn.addr !3886
  %221 = inttoptr i32 %200 to i8*, !insn.addr !3886
  %222 = load i8, i8* %221, align 1, !insn.addr !3886
  call void @__asm_outsb(i16 %220, i8 %222), !insn.addr !3886
  %223 = inttoptr i32 %219 to i32*, !insn.addr !3887
  %224 = load i32, i32* %223, align 4, !insn.addr !3887
  %225 = add i32 %224, 1, !insn.addr !3887
  store i32 %225, i32* %223, align 4, !insn.addr !3887
  %.masked = and i32 %219, 255
  %226 = xor i32 %.masked, 230, !insn.addr !3888
  %227 = and i32 %219, -256, !insn.addr !3888
  %228 = or i32 %226, %227, !insn.addr !3888
  %229 = trunc i32 %226 to i8, !insn.addr !3889
  call void @__asm_out.6(i32 55, i8 %229), !insn.addr !3889
  ret i32 %228, !insn.addr !3889

dec_label_pc_100957b:                             ; preds = %dec_label_pc_100951a
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %230 = and i32 %eax.0.reload, 48, !insn.addr !3890
  %231 = or i32 %230, 207, !insn.addr !3890
  %232 = and i32 %eax.0.reload, -256, !insn.addr !3890
  %233 = or i32 %231, %232, !insn.addr !3890
  %234 = inttoptr i32 %233 to i8*, !insn.addr !3891
  %235 = load i8, i8* %234, align 1, !insn.addr !3891
  %236 = trunc i32 %231 to i8, !insn.addr !3891
  %237 = add i8 %235, %236, !insn.addr !3891
  store i8 %237, i8* %234, align 1, !insn.addr !3891
  call void @__asm_int(i32 243), !insn.addr !3892
  %238 = inttoptr i32 %esi.0.reload to i32*, !insn.addr !3893
  %239 = load i32, i32* %238, align 4, !insn.addr !3893
  %240 = inttoptr i32 %145 to i32*, !insn.addr !3893
  store i32 %239, i32* %240, align 4, !insn.addr !3893
  %241 = add i32 %edx.0.reload, -1952123999, !insn.addr !3894
  %242 = inttoptr i32 %241 to i32*, !insn.addr !3894
  %243 = load i32, i32* %242, align 4, !insn.addr !3894
  %244 = xor i32 %243, -31, !insn.addr !3894
  store i32 %244, i32* %242, align 4, !insn.addr !3894
  %245 = add i32 %233, 4, !insn.addr !3895
  %246 = inttoptr i32 %245 to i8*, !insn.addr !3895
  %247 = load i8, i8* %246, align 1, !insn.addr !3895
  %248 = xor i8 %247, -24, !insn.addr !3895
  store i8 %248, i8* %246, align 1, !insn.addr !3895
  %249 = and i32 %231, 230, !insn.addr !3896
  %250 = or i32 %249, %232, !insn.addr !3896
  ret i32 %250, !insn.addr !3896
}

define i32 @function_100959c() local_unnamed_addr {
dec_label_pc_100959c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %2, 73433859, !insn.addr !3897
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3897
  %8 = load i32, i32* %7, align 4, !insn.addr !3897
  %9 = add i32 %8, -1, !insn.addr !3897
  store i32 %9, i32* %7, align 4, !insn.addr !3897
  %10 = add i32 %4, %2, !insn.addr !3898
  %11 = add i32 %10, 4, !insn.addr !3899
  %12 = inttoptr i32 %11 to i32*, !insn.addr !3899
  store i32 -1962082933, i32* %12, align 4, !insn.addr !3899
  %13 = add i32 %0, 4, !insn.addr !3900
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3900
  %15 = load i32, i32* %14, align 4, !insn.addr !3900
  %16 = add i32 %3, 4, !insn.addr !3901
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3901
  %18 = load i32, i32* %17, align 4, !insn.addr !3901
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3902
  %20 = load i32, i32* %19, align 4, !insn.addr !3902
  %21 = add i32 %20, 4, !insn.addr !3903
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3903
  %23 = load i32, i32* %22, align 4, !insn.addr !3903
  %24 = inttoptr i32 %10 to i8*, !insn.addr !3904
  %25 = load i8, i8* %24, align 1, !insn.addr !3904
  %26 = udiv i32 %3, 256, !insn.addr !3904
  %27 = trunc i32 %26 to i8, !insn.addr !3904
  %28 = sub i8 %25, %27, !insn.addr !3904
  store i8 %28, i8* %24, align 1, !insn.addr !3904
  %29 = add i32 %23, -117, !insn.addr !3905
  %30 = inttoptr i32 %29 to i8*, !insn.addr !3905
  %31 = load i8, i8* %30, align 1, !insn.addr !3905
  %32 = trunc i32 %18 to i8, !insn.addr !3905
  %33 = add i8 %31, %32, !insn.addr !3905
  store i8 %33, i8* %30, align 1, !insn.addr !3905
  %34 = mul i32 %10, 1024, !insn.addr !3906
  %35 = udiv i32 %10, 4194304, !insn.addr !3906
  %36 = or i32 %35, %34, !insn.addr !3906
  %37 = sub i8 0, %27
  %38 = sub i8 %37, 1
  %39 = icmp ult i8 %38, %32, !insn.addr !3907
  %40 = add i32 %18, 65110984, !insn.addr !3908
  %41 = inttoptr i32 %40 to i32*, !insn.addr !3908
  %42 = load i32, i32* %41, align 4, !insn.addr !3908
  %43 = zext i1 %39 to i32, !insn.addr !3908
  %44 = add i32 %36, %43, !insn.addr !3908
  %45 = add i32 %44, %42, !insn.addr !3908
  store i32 %45, i32* %41, align 4, !insn.addr !3908
  %46 = inttoptr i32 %15 to i8*, !insn.addr !3909
  %47 = inttoptr i32 %23 to i8*, !insn.addr !3909
  call void @__asm_rep_movsb_memcpy(i8* %47, i8* %46, i32 %36), !insn.addr !3909
  %48 = select i1 %5, i32 -1, i32 1, !insn.addr !3909
  %49 = mul i32 %48, %36, !insn.addr !3909
  %50 = add i32 %23, %49, !insn.addr !3909
  %51 = add i32 %1, 12, !insn.addr !3910
  %52 = inttoptr i32 %51 to i32*, !insn.addr !3910
  %53 = load i32, i32* %52, align 4, !insn.addr !3910
  %54 = inttoptr i32 %53 to i32*, !insn.addr !3911
  %55 = load i32, i32* %54, align 4, !insn.addr !3911
  %56 = inttoptr i32 %50 to i32*, !insn.addr !3912
  store i32 %20, i32* %56, align 4, !insn.addr !3912
  %57 = add i32 %55, 91, !insn.addr !3913
  %58 = inttoptr i32 %57 to i8*, !insn.addr !3913
  store i8 %32, i8* %58, align 1, !insn.addr !3913
  ret i32 %20, !insn.addr !3914
}

define i32 @function_100961d() local_unnamed_addr {
dec_label_pc_100961d:
  %0 = call i32 @function_44e13c24(), !insn.addr !3915
  ret i32 %0, !insn.addr !3915
}

define i32 @function_1009627() local_unnamed_addr {
dec_label_pc_1009627:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8
  %4 = inttoptr i32 %0 to i8*, !insn.addr !3916
  store i8 %3, i8* %4, align 1, !insn.addr !3916
  ret i32 %2, !insn.addr !3917
}

define i32 @function_1009634() local_unnamed_addr {
dec_label_pc_1009634:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !3918
  ret i32 %2, !insn.addr !3919
}

define i32 @function_1009643() local_unnamed_addr {
dec_label_pc_1009643:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %8 = add i32 %0, -1, !insn.addr !3920
  %9 = add i32 %5, %4, !insn.addr !3921
  %10 = inttoptr i32 %4 to i32*, !insn.addr !3921
  store i32 %9, i32* %10, align 4, !insn.addr !3921
  %11 = call i32 @__asm_hlt(), !insn.addr !3922
  %12 = or i32 %11, -1274985484, !insn.addr !3923
  %13 = add i32 %3, %1, !insn.addr !3924
  %14 = inttoptr i32 %8 to i32*, !insn.addr !3925
  %15 = and i32 %12, %2, !insn.addr !3926
  %16 = load i32, i32* @global_var_1014f70, align 4, !insn.addr !3927
  store i32 %16, i32* %stack_var_-4, align 4, !insn.addr !3927
  %17 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3927
  %18 = call i32 @function_1007bc1(i32 %16), !insn.addr !3928
  %19 = or i32 %17, 1, !insn.addr !3929
  %20 = icmp slt i32 %19, 0, !insn.addr !3929
  %21 = trunc i32 %19 to i8, !insn.addr !3929
  %22 = call i8 @llvm.ctpop.i8(i8 %21), !range !3930, !insn.addr !3929
  %23 = and i8 %22, 1, !insn.addr !3929
  %24 = icmp eq i8 %23, 0, !insn.addr !3929
  %25 = zext i1 %24 to i32, !insn.addr !3931
  %26 = mul i32 %25, 4, !insn.addr !3931
  %27 = zext i1 %20 to i32, !insn.addr !3931
  %28 = mul i32 %27, 128, !insn.addr !3931
  %29 = zext i1 %7 to i32, !insn.addr !3931
  %30 = mul i32 %29, 256, !insn.addr !3931
  %31 = zext i1 %6 to i32, !insn.addr !3931
  %32 = mul i32 %31, 16384, !insn.addr !3931
  %33 = or i32 %32, %30, !insn.addr !3931
  %34 = or i32 %33, %28, !insn.addr !3931
  %35 = or i32 %34, %26, !insn.addr !3931
  %36 = or i32 %35, 1026, !insn.addr !3931
  %37 = add i32 %15, 24801309, !insn.addr !3932
  %38 = inttoptr i32 %37 to i32*, !insn.addr !3932
  %39 = load i32, i32* %38, align 4, !insn.addr !3932
  %40 = add i32 %39, %15, !insn.addr !3932
  store i32 %40, i32* %38, align 4, !insn.addr !3932
  %41 = add i32 %13, 21238797, !insn.addr !3933
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3933
  %43 = load i32, i32* %42, align 4, !insn.addr !3933
  %44 = add i32 %43, -1, !insn.addr !3933
  store i32 %44, i32* %42, align 4, !insn.addr !3933
  %45 = add i32 %2, 822540, !insn.addr !3934
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3934
  %47 = load i32, i32* %46, align 4, !insn.addr !3934
  %48 = add i32 %47, %15, !insn.addr !3934
  store i32 %48, i32* %46, align 4, !insn.addr !3934
  %49 = add i32 %0, 41, !insn.addr !3935
  %50 = inttoptr i32 %49 to i8*, !insn.addr !3935
  %51 = load i8, i8* %50, align 1, !insn.addr !3935
  %52 = udiv i32 %13, 256, !insn.addr !3935
  %53 = trunc i32 %52 to i8, !insn.addr !3935
  %54 = add i8 %51, %53, !insn.addr !3935
  store i8 %54, i8* %50, align 1, !insn.addr !3935
  %55 = add i32 %0, -4, !insn.addr !3936
  %56 = add i32 %13, -1044280328, !insn.addr !3937
  %57 = inttoptr i32 %56 to i32*, !insn.addr !3937
  %58 = load i32, i32* %57, align 4, !insn.addr !3937
  %59 = add i32 %55, %58, !insn.addr !3937
  store i32 %59, i32* %57, align 4, !insn.addr !3937
  %60 = call i32 @function_451186ed(i32 %36), !insn.addr !3938
  ret i32 %60, !insn.addr !3938
}

define i32 @function_10096f7() local_unnamed_addr {
dec_label_pc_10096f7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  br i1 %8, label %dec_label_pc_1009748, label %dec_label_pc_10096f9, !insn.addr !3939

dec_label_pc_10096f9:                             ; preds = %dec_label_pc_10096f7
  %9 = add i32 %4, %3, !insn.addr !3940
  %10 = icmp eq i32 %9, 0, !insn.addr !3940
  %11 = inttoptr i32 %3 to i32*, !insn.addr !3940
  store i32 %9, i32* %11, align 4, !insn.addr !3940
  %12 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !3941
  br i1 %10, label %dec_label_pc_1009759, label %dec_label_pc_100970a, !insn.addr !3942

dec_label_pc_100970a:                             ; preds = %dec_label_pc_10096f9
  %13 = add i32 %12, %3, !insn.addr !3943
  store i32 %13, i32* %11, align 4, !insn.addr !3943
  %14 = call i32 @function_8b9a6ce4(i32 1342177280), !insn.addr !3944
  ret i32 %14, !insn.addr !3944

dec_label_pc_1009748:                             ; preds = %dec_label_pc_10096f7
  %15 = load i32, i32* inttoptr (i32 -1392423167 to i32*), align 4, !insn.addr !3945
  %16 = icmp eq i1 %7, %5, !insn.addr !3946
  %17 = icmp eq i1 %16, false, !insn.addr !3946
  br i1 %17, label %dec_label_pc_1009767, label %dec_label_pc_100974f, !insn.addr !3946

dec_label_pc_100974f:                             ; preds = %dec_label_pc_1009748
  ret i32 %15, !insn.addr !3947

dec_label_pc_1009759:                             ; preds = %dec_label_pc_10096f9
  %18 = add i32 %0, -347103219, !insn.addr !3948
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3948
  %20 = load i32, i32* %19, align 4, !insn.addr !3948
  %21 = add i32 %20, -1, !insn.addr !3948
  store i32 %21, i32* %19, align 4, !insn.addr !3948
  %22 = add i32 %12, %3, !insn.addr !3949
  store i32 %22, i32* %11, align 4, !insn.addr !3949
  %23 = mul i32 %0, 2, !insn.addr !3950
  %24 = inttoptr i32 %0 to i32*, !insn.addr !3950
  store i32 %23, i32* %24, align 4, !insn.addr !3950
  ret i32 %12, !insn.addr !3950

dec_label_pc_1009767:                             ; preds = %dec_label_pc_1009748
  %25 = add i32 %3, ptrtoint (i32* @global_var_1014fa0 to i32), !insn.addr !3951
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3951
  %27 = load i32, i32* %26, align 4, !insn.addr !3951
  %28 = add i32 %27, %2, !insn.addr !3951
  store i32 %28, i32* %26, align 4, !insn.addr !3951
  %29 = and i32 %15, 114, !insn.addr !3952
  %30 = or i32 %29, 141, !insn.addr !3952
  %31 = and i32 %15, -256, !insn.addr !3952
  %32 = or i32 %30, %31, !insn.addr !3953
  %33 = inttoptr i32 %32 to i8*, !insn.addr !3954
  %34 = load i8, i8* %33, align 1, !insn.addr !3954
  %35 = trunc i32 %30 to i8, !insn.addr !3954
  %36 = add i8 %34, %35, !insn.addr !3954
  store i8 %36, i8* %33, align 1, !insn.addr !3954
  %37 = load i16, i16* @global_var_101448d, align 2, !insn.addr !3955
  %38 = sext i16 %37 to i32, !insn.addr !3955
  %39 = and i32 %0, 65535
  %40 = inttoptr i32 %39 to i32*, !insn.addr !3955
  store i32 %38, i32* %40, align 4, !insn.addr !3955
  %41 = trunc i32 %0 to i16, !insn.addr !3955
  %42 = select i1 %6, i16 -4, i16 4, !insn.addr !3955
  %43 = add i16 %42, %41, !insn.addr !3955
  %44 = add i16 %42, ptrtoint (i16* @global_var_101448d to i16), !insn.addr !3955
  %45 = zext i16 %43 to i32, !insn.addr !3955
  %46 = and i32 %0, -65536, !insn.addr !3955
  %47 = or i32 %46, %45, !insn.addr !3955
  %48 = zext i16 %44 to i32, !insn.addr !3955
  %49 = or i32 %48, and (i32 ptrtoint (i16* @global_var_101448d to i32), i32 -65536), !insn.addr !3955
  %50 = inttoptr i32 %49 to i8*, !insn.addr !3956
  %51 = inttoptr i32 %47 to i8*, !insn.addr !3956
  call void @__asm_rep_movsb_memcpy(i8* %51, i8* %50, i32 %1), !insn.addr !3956
  %52 = load i32, i32* inttoptr (i32 -335458400 to i32*), align 32, !insn.addr !3957
  ret i32 %52, !insn.addr !3958
}

define i32 @function_1009790() local_unnamed_addr {
dec_label_pc_1009790:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @unknown_a90076c1(), !insn.addr !3959
  %2 = load i32, i32* inttoptr (i32 -352235616 to i32*), align 32, !insn.addr !3960
  %3 = add i32 %2, 4, !insn.addr !3961
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3961
  %5 = load i32, i32* inttoptr (i32 33166496 to i32*), align 32, !insn.addr !3962
  %6 = add i32 %5, 4, !insn.addr !3963
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3963
  store i32 %2, i32* %7, align 4, !insn.addr !3963
  %8 = load i32, i32* inttoptr (i32 1577141383 to i32*), align 4, !insn.addr !3964
  %9 = call i32 @__asm_wait(), !insn.addr !3965
  %10 = inttoptr i32 %0 to i8*, !insn.addr !3966
  call void @__asm_rep_movsd_memcpy(i8* %10, i8* bitcast (i8** @global_var_1014402 to i8*), i32 %8), !insn.addr !3966
  %11 = call i32 @__asm_hlt(), !insn.addr !3967
  ret i32 %11, !insn.addr !3968
}

define i32 @function_10097d9() local_unnamed_addr {
dec_label_pc_10097d9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i8 @__asm_in.1(i8 -1), !insn.addr !3969
  %2 = sext i8 %1 to i32, !insn.addr !3969
  %3 = and i32 %0, -256, !insn.addr !3969
  %4 = or i32 %3, %2, !insn.addr !3969
  ret i32 %4, !insn.addr !3970
}

define i32 @function_1009818() local_unnamed_addr {
dec_label_pc_1009818:
  %0 = call i32 @function_b502e9c1(), !insn.addr !3971
  ret i32 %0, !insn.addr !3971
}

define i32 @function_1009846() local_unnamed_addr {
dec_label_pc_1009846:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3972
}

define i32 @function_100986f() local_unnamed_addr {
dec_label_pc_100986f:
  %0 = call i32 @function_8ca68bb0(), !insn.addr !3973
  ret i32 %0, !insn.addr !3973
}

define i32 @function_100987b() local_unnamed_addr {
dec_label_pc_100987b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3974
}

define i32 @function_1009885() local_unnamed_addr {
dec_label_pc_1009885:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_6()
  %5 = call i32 @unknown_ffe3c1(), !insn.addr !3975
  %6 = inttoptr i32 %3 to i32*, !insn.addr !3976
  store i32 ptrtoint (i32* @global_var_1014f31 to i32), i32* %6, align 4, !insn.addr !3976
  %7 = load i32, i32* inttoptr (i32 536954060 to i32*), align 4, !insn.addr !3977
  %8 = load i32, i32* inttoptr (i32 118672 to i32*), align 16, !insn.addr !3978
  %9 = trunc i32 %2 to i16, !insn.addr !3979
  call void @__asm_out.2(i16 %9, i32 %8), !insn.addr !3979
  %10 = inttoptr i32 %8 to i8*, !insn.addr !3980
  %11 = load i8, i8* %10, align 1, !insn.addr !3980
  %12 = trunc i32 %8 to i8, !insn.addr !3980
  %13 = add i8 %11, %12, !insn.addr !3980
  store i8 %13, i8* %10, align 1, !insn.addr !3980
  %14 = udiv i32 %7, 4, !insn.addr !3981
  %15 = and i32 %14, %1, !insn.addr !3982
  %16 = inttoptr i32 %0 to i8*, !insn.addr !3983
  call void @__asm_rep_movsb_memcpy(i8* %16, i8* inttoptr (i32 1191265480 to i8*), i32 %15), !insn.addr !3983
  %17 = fptosi x86_fp80 %4 to i32, !insn.addr !3984
  %18 = add i32 %7, -5963441, !insn.addr !3984
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3984
  store i32 %17, i32* %19, align 4, !insn.addr !3984
  %20 = add i32 %7, 22, !insn.addr !3985
  %21 = and i32 %20, 255, !insn.addr !3985
  %22 = and i32 %7, -256, !insn.addr !3985
  %23 = or i32 %21, %22, !insn.addr !3985
  ret i32 %23, !insn.addr !3986
}

define i32 @function_10098dc() local_unnamed_addr {
dec_label_pc_10098dc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 4, !insn.addr !3987
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3987
  ret i32 %0, !insn.addr !3987
}

define i32 @function_100990b() local_unnamed_addr {
dec_label_pc_100990b:
  %0 = call i32 @function_455b7812(), !insn.addr !3988
  ret i32 %0, !insn.addr !3988
}

define i32 @function_100991d() local_unnamed_addr {
dec_label_pc_100991d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3989
}

define i32 @function_1009921() local_unnamed_addr {
dec_label_pc_1009921:
  %0 = call i32 @function_e830b293(), !insn.addr !3990
  ret i32 %0, !insn.addr !3990
}

define i32 @function_1009929() local_unnamed_addr {
dec_label_pc_1009929:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i16, !insn.addr !3991
  %4 = call i32 @__asm_insd(i16 %3), !insn.addr !3991
  %5 = inttoptr i32 %0 to i32*, !insn.addr !3991
  store i32 %4, i32* %5, align 4, !insn.addr !3991
  ret i32 %2, !insn.addr !3992
}

define i32 @function_100994f() local_unnamed_addr {
dec_label_pc_100994f:
  %.pre-phi.in.reg2mem = alloca i32, !insn.addr !3993
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  br i1 %2, label %3, label %dec_label_pc_1009951, !insn.addr !3993

; <label>:3:                                      ; preds = %dec_label_pc_100994f
  %4 = call i32 @function_10098dc(), !insn.addr !3993
  store i32 %4, i32* %.pre-phi.in.reg2mem, !insn.addr !3993
  br label %dec_label_pc_1009951, !insn.addr !3993

dec_label_pc_1009951:                             ; preds = %3, %dec_label_pc_100994f
  %.pre-phi.in.reload = load i32, i32* %.pre-phi.in.reg2mem
  %.pre-phi = trunc i32 %.pre-phi.in.reload to i8
  %5 = mul i8 %.pre-phi, 2, !insn.addr !3994
  %6 = inttoptr i32 %.pre-phi.in.reload to i8*, !insn.addr !3994
  store i8 %5, i8* %6, align 1, !insn.addr !3994
  %7 = udiv i32 %1, 2048, !insn.addr !3995
  %8 = inttoptr i32 %0 to i8*, !insn.addr !3996
  call void @__asm_rep_movsd_memcpy(i8* %8, i8* bitcast (i8** @global_var_10144e8 to i8*), i32 %7), !insn.addr !3996
  %9 = load i32, i32* inttoptr (i32 -1900851324 to i32*), align 4, !insn.addr !3997
  ret i32 %9, !insn.addr !3998
}

define i32 @function_1009977() local_unnamed_addr {
dec_label_pc_1009977:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !3999
}

define i32 @function_10099b1() local_unnamed_addr {
dec_label_pc_10099b1:
  %0 = call i32 @function_93a68d06(), !insn.addr !4000
  ret i32 %0, !insn.addr !4000
}

define i32 @function_10099bc() local_unnamed_addr {
dec_label_pc_10099bc:
  %eax.0.reg2mem = alloca i32, !insn.addr !4001
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, 1, !insn.addr !4001
  br i1 %1, label %dec_label_pc_10099bf, label %2, !insn.addr !4001

; <label>:2:                                      ; preds = %dec_label_pc_10099bc
  %3 = call i32 @function_ffff99be(), !insn.addr !4001
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !4001
  br label %dec_label_pc_10099bf, !insn.addr !4001

dec_label_pc_10099bf:                             ; preds = %dec_label_pc_10099bc, %2
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4002
}

define i32 @function_10099c6() local_unnamed_addr {
dec_label_pc_10099c6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4003
}

define i32 @function_10099fd() local_unnamed_addr {
dec_label_pc_10099fd:
  %0 = call i32 @function_46095804(), !insn.addr !4004
  ret i32 %0, !insn.addr !4004
}

define i32 @function_1009a44() local_unnamed_addr {
dec_label_pc_1009a44:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = or i32 %0, 141, !insn.addr !4005
  ret i32 %1, !insn.addr !4006
}

define i32 @function_1009a4d() local_unnamed_addr {
dec_label_pc_1009a4d:
  %0 = call i32 @function_11198154(), !insn.addr !4007
  ret i32 %0, !insn.addr !4007
}

define i32 @function_1009a5e() local_unnamed_addr {
dec_label_pc_1009a5e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4008
}

define i32 @function_1009ab4(i16 %arg1) local_unnamed_addr {
dec_label_pc_1009ab4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 232, !insn.addr !4009
  %2 = and i32 %1, 255, !insn.addr !4009
  %3 = and i32 %0, -256, !insn.addr !4009
  %4 = or i32 %2, %3, !insn.addr !4009
  ret i32 %4, !insn.addr !4010
}

define i32 @function_1009ad1(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1009ad1:
  %esi.0.lcssa.reg2mem = alloca i32, !insn.addr !4011
  %eax.0.lcssa.reg2mem = alloca i32, !insn.addr !4011
  %eax.01.reg2mem = alloca i32, !insn.addr !4011
  %esi.02.reg2mem = alloca i32, !insn.addr !4011
  %storemerge3.reg2mem = alloca i32, !insn.addr !4011
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %4, %3, !insn.addr !4011
  %8 = inttoptr i32 %3 to i32*, !insn.addr !4011
  store i32 %7, i32* %8, align 4, !insn.addr !4011
  %9 = mul i32 %3, 4, !insn.addr !4012
  %10 = load i32, i32* @global_var_1014f8c, align 4, !insn.addr !4013
  %11 = add i32 %9, 2124949453, !insn.addr !4014
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4014
  %13 = load i32, i32* %12, align 4, !insn.addr !4014
  %14 = select i1 %6, i32 -4, i32 4, !insn.addr !4015
  %15 = add i32 %14, %0
  %16 = and i32 %10, %1, !insn.addr !4016
  %17 = icmp eq i32 %16, 0, !insn.addr !4017
  store i32 %10, i32* %eax.0.lcssa.reg2mem, !insn.addr !4017
  store i32 %15, i32* %esi.0.lcssa.reg2mem, !insn.addr !4017
  br i1 %17, label %30, label %.lr.ph, !insn.addr !4017

.lr.ph:                                           ; preds = %dec_label_pc_1009ad1
  %18 = select i1 %6, i32 -1, i32 1, !insn.addr !4017
  store i32 %16, i32* %storemerge3.reg2mem
  store i32 %15, i32* %esi.02.reg2mem
  store i32 %10, i32* %eax.01.reg2mem
  br label %19

; <label>:19:                                     ; preds = %.lr.ph, %19
  %eax.01.reload = load i32, i32* %eax.01.reg2mem
  %esi.02.reload = load i32, i32* %esi.02.reg2mem
  %storemerge3.reload = load i32, i32* %storemerge3.reg2mem
  %20 = inttoptr i32 %esi.02.reload to i8*, !insn.addr !4017
  %21 = load i8, i8* %20, align 1, !insn.addr !4017
  %22 = zext i8 %21 to i32, !insn.addr !4017
  %23 = and i32 %eax.01.reload, -256, !insn.addr !4017
  %24 = or i32 %23, %22, !insn.addr !4017
  %25 = add i32 %esi.02.reload, %18, !insn.addr !4017
  %26 = add i32 %storemerge3.reload, -1, !insn.addr !4017
  %27 = icmp eq i32 %26, 0, !insn.addr !4017
  store i32 %26, i32* %storemerge3.reg2mem, !insn.addr !4017
  store i32 %25, i32* %esi.02.reg2mem, !insn.addr !4017
  store i32 %24, i32* %eax.01.reg2mem, !insn.addr !4017
  br i1 %27, label %._crit_edge, label %19, !insn.addr !4017

._crit_edge:                                      ; preds = %19
  %28 = mul i32 %16, %18
  %29 = add i32 %28, %15
  store i32 %24, i32* %eax.0.lcssa.reg2mem
  store i32 %29, i32* %esi.0.lcssa.reg2mem
  br label %30

; <label>:30:                                     ; preds = %._crit_edge, %dec_label_pc_1009ad1
  %31 = add i32 %2, %0, !insn.addr !4018
  %32 = inttoptr i32 %13 to i32*, !insn.addr !4015
  %esi.0.lcssa.reload = load i32, i32* %esi.0.lcssa.reg2mem
  %eax.0.lcssa.reload = load i32, i32* %eax.0.lcssa.reg2mem
  store i32 %eax.0.lcssa.reload, i32* @global_var_1014f98, align 4, !insn.addr !4019
  %33 = inttoptr i32 %eax.0.lcssa.reload to i32*, !insn.addr !4020
  %34 = load i32, i32* %33, align 4, !insn.addr !4020
  %35 = call i32 @function_1007bc1(i32 %34), !insn.addr !4021
  %36 = load i32, i32* @global_var_1014f98, align 4, !insn.addr !4022
  %37 = add i32 %31, 8, !insn.addr !4023
  %38 = inttoptr i32 %37 to i32*, !insn.addr !4023
  %39 = xor i32 %36, ptrtoint (i32* @global_var_101454c to i32), !insn.addr !4024
  %40 = add i32 %14, %31, !insn.addr !4015
  %41 = add i32 %40, %13, !insn.addr !4025
  %42 = and i32 %41, 65535
  %43 = inttoptr i32 %42 to i32*, !insn.addr !4025
  %44 = load i32, i32* %43, align 4, !insn.addr !4025
  %45 = add i32 %44, %39, !insn.addr !4025
  %46 = icmp ult i32 %45, %44, !insn.addr !4025
  store i32 %45, i32* %43, align 4, !insn.addr !4025
  %47 = load i32, i32* inttoptr (i32 33443736 to i32*), align 8, !insn.addr !4026
  %48 = inttoptr i32 %47 to i32*, !insn.addr !4027
  %49 = load i32, i32* %48, align 4, !insn.addr !4027
  %50 = call i32 @unknown_c8d54(i16 %5), !insn.addr !4028
  %51 = load i32, i32* inttoptr (i32 -1672954216 to i32*), align 8, !insn.addr !4029
  %52 = mul i32 %51, 2, !insn.addr !4029
  %53 = zext i1 %46 to i32, !insn.addr !4029
  %54 = or i32 %52, %53, !insn.addr !4029
  store i32 %54, i32* inttoptr (i32 -1672954216 to i32*), align 8, !insn.addr !4029
  %55 = inttoptr i32 %esi.0.lcssa.reload to i32*, !insn.addr !4030
  %56 = load i32, i32* %55, align 4, !insn.addr !4030
  %57 = inttoptr i32 %49 to i32*, !insn.addr !4030
  store i32 %56, i32* %57, align 4, !insn.addr !4030
  %58 = add i32 %49, %14, !insn.addr !4030
  %59 = add i32 %esi.0.lcssa.reload, %14, !insn.addr !4030
  %60 = inttoptr i32 %59 to i8*, !insn.addr !4031
  %61 = inttoptr i32 %58 to i8*, !insn.addr !4031
  call void @__asm_rep_movsb_memcpy(i8* %61, i8* %60, i32 0), !insn.addr !4031
  call void @llvm.trap()
  unreachable
}

define i32 @function_1009ad4(i32 %arg1) local_unnamed_addr {
dec_label_pc_1009ad4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1009bfb() local_unnamed_addr {
dec_label_pc_1009bfb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4032
}

define i32 @function_1009c30() local_unnamed_addr {
dec_label_pc_1009c30:
  %0 = call i32 @function_46795a37(), !insn.addr !4033
  ret i32 %0, !insn.addr !4033
}

define i32 @function_1009c41() local_unnamed_addr {
dec_label_pc_1009c41:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4034
}

define i32 @function_1009c4d() local_unnamed_addr {
dec_label_pc_1009c4d:
  %0 = call i32 @function_a5dc9c51(), !insn.addr !4035
  ret i32 %0, !insn.addr !4035
}

define i32 @function_1009c52() local_unnamed_addr {
dec_label_pc_1009c52:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %4 = add i32 %0, -1, !insn.addr !4036
  %5 = add i32 %3, %2, !insn.addr !4037
  %6 = inttoptr i32 %2 to i32*, !insn.addr !4037
  store i32 %5, i32* %6, align 4, !insn.addr !4037
  %7 = inttoptr i32 %3 to i32*, !insn.addr !4038
  %8 = load i32, i32* @global_var_101458c, align 4, !insn.addr !4039
  store i32 %8, i32* %stack_var_-4, align 4, !insn.addr !4039
  %9 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4039
  %10 = bitcast i32* %esi to i8*
  %11 = load i8, i8* %10, align 4, !insn.addr !4040
  %12 = inttoptr i32 %4 to i8*, !insn.addr !4040
  store i8 %11, i8* %12, align 1, !insn.addr !4040
  %13 = add i32 %1, -1945269503, !insn.addr !4041
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4041
  %15 = load i32, i32* %14, align 4, !insn.addr !4041
  %16 = add i32 %15, %1, !insn.addr !4041
  store i32 %16, i32* %14, align 4, !insn.addr !4041
  %17 = add i32 %1, 2013351844, !insn.addr !4042
  %18 = inttoptr i32 %17 to i16*, !insn.addr !4042
  %19 = load i16, i16* %18, align 2, !insn.addr !4042
  %20 = trunc i32 %9 to i16, !insn.addr !4042
  %21 = add i16 %19, %20, !insn.addr !4042
  store i16 %21, i16* %18, align 2, !insn.addr !4042
  %22 = load i32, i32* %stack_var_-4, align 4, !insn.addr !4043
  %23 = call i32 @function_ffffce86(i32 %22), !insn.addr !4043
  ret i32 %23, !insn.addr !4043
}

define i32 @function_1009c9c() local_unnamed_addr {
dec_label_pc_1009c9c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4044
}

define i32 @function_1009cd1() local_unnamed_addr {
dec_label_pc_1009cd1:
  %0 = call i32 @function_46ad5ad8(), !insn.addr !4045
  ret i32 %0, !insn.addr !4045
}

define i32 @function_1009ce4() local_unnamed_addr {
dec_label_pc_1009ce4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4046
}

define x86_fp80 @function_1009cee() local_unnamed_addr {
dec_label_pc_1009cee:
  %0 = call x86_fp80 @__decompiler_undefined_function_6()
  %1 = fdiv x86_fp80 %0, %0, !insn.addr !4047
  ret x86_fp80 %1, !insn.addr !4048
}

define i32 @function_1009d22() local_unnamed_addr {
dec_label_pc_1009d22:
  %0 = call i32 @function_46d15b49(), !insn.addr !4049
  ret i32 %0, !insn.addr !4049
}

define i32 @function_1009d70() local_unnamed_addr {
dec_label_pc_1009d70:
  %0 = call i32 @function_a3f55b79(), !insn.addr !4050
  ret i32 %0, !insn.addr !4050
}

define x86_fp80 @function_1009d83() local_unnamed_addr {
dec_label_pc_1009d83:
  %0 = call x86_fp80 @__decompiler_undefined_function_6()
  %1 = fdiv x86_fp80 %0, %0, !insn.addr !4051
  ret x86_fp80 %1, !insn.addr !4052
}

define i32 @function_1009db4(i32 %arg1) local_unnamed_addr {
dec_label_pc_1009db4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = inttoptr i32 %1 to i32*, !insn.addr !4053
  store i32 %arg1, i32* %4, align 4, !insn.addr !4053
  %5 = add i32 %0, -1917481672, !insn.addr !4054
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4054
  %7 = load i32, i32* %6, align 4, !insn.addr !4054
  %8 = zext i1 %3 to i32, !insn.addr !4054
  %9 = add i32 %1, %8, !insn.addr !4054
  %10 = add i32 %9, %7, !insn.addr !4054
  store i32 %10, i32* %6, align 4, !insn.addr !4054
  %11 = inttoptr i32 %2 to i8*, !insn.addr !4055
  %12 = load i8, i8* %11, align 1, !insn.addr !4055
  %13 = trunc i32 %2 to i8, !insn.addr !4055
  %14 = add i8 %12, %13, !insn.addr !4055
  store i8 %14, i8* %11, align 1, !insn.addr !4055
  %15 = call i32 @function_47195bca(), !insn.addr !4056
  ret i32 %15, !insn.addr !4056
}

define i32 @function_1009dd9() local_unnamed_addr {
dec_label_pc_1009dd9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, 223, !insn.addr !4057
  %3 = and i32 %2, 255, !insn.addr !4057
  %4 = and i32 %1, -256, !insn.addr !4057
  %5 = or i32 %3, %4, !insn.addr !4057
  %6 = add i32 %5, %0, !insn.addr !4058
  %7 = inttoptr i32 %0 to i32*, !insn.addr !4058
  store i32 %6, i32* %7, align 4, !insn.addr !4058
  %8 = add i32 %5, 4, !insn.addr !4059
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4059
  ret i32 %5, !insn.addr !4060
}

define i32 @function_1009e0a() local_unnamed_addr {
dec_label_pc_1009e0a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8, !insn.addr !4061
  %3 = mul i32 %1, 2, !insn.addr !4062
  %factor = or i32 %3, 282
  %4 = add i32 %factor, -1044280576, !insn.addr !4061
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4061
  store i8 %2, i8* %5, align 2, !insn.addr !4061
  %6 = call i32 @function_473d5c1a(), !insn.addr !4063
  ret i32 %6, !insn.addr !4063
}

define i32 @function_1009e32() local_unnamed_addr {
dec_label_pc_1009e32:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4064
}

define i32 @function_1009e38() local_unnamed_addr {
dec_label_pc_1009e38:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %2, -1, !insn.addr !4065
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4065
  %7 = xor i32 %4, ptrtoint (i32* @global_var_1014608 to i32), !insn.addr !4066
  %8 = inttoptr i32 %3 to i32*, !insn.addr !4067
  store i32 %7, i32* %8, align 4, !insn.addr !4067
  %9 = load i32, i32* @global_var_1014664, align 4, !insn.addr !4068
  %10 = load i8*, i8** @global_var_1014fb0, align 4, !insn.addr !4069
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4, !insn.addr !4070
  %13 = mul i32 %9, 4, !insn.addr !4071
  %14 = add i32 %13, -117440271, !insn.addr !4071
  %15 = add i32 %1, 1, !insn.addr !4072
  %16 = mul i32 %14, 512, !insn.addr !4073
  %17 = udiv i32 %14, 8388608, !insn.addr !4073
  %18 = or i32 %17, %16, !insn.addr !4073
  %19 = add i32 %0, 1, !insn.addr !4074
  %20 = inttoptr i32 %18 to i32*, !insn.addr !4075
  %21 = load i32, i32* %20, align 4, !insn.addr !4075
  %22 = add i32 %21, %2, !insn.addr !4075
  store i32 %22, i32* %20, align 4, !insn.addr !4075
  %23 = inttoptr i32 %19 to i8*, !insn.addr !4076
  call void @__asm_rep_movsd_memcpy(i8* %10, i8* %23, i32 %18), !insn.addr !4076
  %24 = and i32 %12, %15, !insn.addr !4077
  %25 = add i32 %24, 1, !insn.addr !4078
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4079
  %27 = load i32, i32* %26, align 4, !insn.addr !4079
  %28 = add i32 %27, %12, !insn.addr !4079
  store i32 %28, i32* %26, align 4, !insn.addr !4079
  ret i32 %12, !insn.addr !4080
}

define i32 @function_1009e7f() local_unnamed_addr {
dec_label_pc_1009e7f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4081
}

define i32 @function_1009ec7() local_unnamed_addr {
dec_label_pc_1009ec7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4082
}

define i32 @function_1009f1e() local_unnamed_addr {
dec_label_pc_1009f1e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4083
}

define x86_fp80 @function_1009f27() local_unnamed_addr {
dec_label_pc_1009f27:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_6()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i32 @unknown_e56f7bfb(), !insn.addr !4084
  %4 = add i32 %3, 13, !insn.addr !4085
  %5 = and i32 %4, 255, !insn.addr !4085
  %6 = and i32 %3, -65536, !insn.addr !4085
  %7 = or i32 %6, %5, !insn.addr !4085
  %8 = or i32 %7, 20224, !insn.addr !4086
  %9 = add i32 %8, %0, !insn.addr !4087
  %10 = inttoptr i32 %0 to i32*, !insn.addr !4087
  %11 = add i32 %0, 4, !insn.addr !4088
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4088
  store i32 %8, i32* %12, align 4, !insn.addr !4088
  store i32 %9, i32* %10, align 4, !insn.addr !4089
  %13 = load i32, i32* @global_var_1014fb4, align 4, !insn.addr !4090
  %14 = add i32 %13, 4, !insn.addr !4091
  %15 = inttoptr i32 %14 to i32*, !insn.addr !4091
  %16 = load i32, i32* %15, align 4, !insn.addr !4091
  %17 = udiv i32 %0, 4, !insn.addr !4092
  %18 = select i1 %2, i32 -4, i32 4, !insn.addr !4093
  %19 = add i32 %16, %18, !insn.addr !4093
  %factor = mul i32 %13, 2
  %20 = add nsw i32 %18, -1047855103, !insn.addr !4093
  %21 = add i32 %20, %factor, !insn.addr !4094
  %22 = inttoptr i32 %17 to i32*, !insn.addr !4095
  %23 = load i32, i32* %22, align 4, !insn.addr !4095
  %24 = add i32 %23, %13, !insn.addr !4095
  store i32 %24, i32* %22, align 4, !insn.addr !4095
  %25 = inttoptr i32 %21 to i8*, !insn.addr !4096
  %26 = inttoptr i32 %19 to i8*, !insn.addr !4096
  call void @__asm_rep_movsd_memcpy(i8* %26, i8* nonnull %25, i32 %17), !insn.addr !4096
  %27 = fdiv x86_fp80 %1, %1, !insn.addr !4097
  ret x86_fp80 %27, !insn.addr !4098
}

define i32 @function_1009f7e() local_unnamed_addr {
dec_label_pc_1009f7e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_hlt(), !insn.addr !4099
  %3 = add i32 %1, 1, !insn.addr !4100
  %4 = add i32 %0, -24, !insn.addr !4101
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4101
  %6 = load i32, i32* %5, align 4, !insn.addr !4101
  %7 = add i32 %3, %6, !insn.addr !4101
  store i32 %7, i32* %5, align 4, !insn.addr !4101
  ret i32 %2, !insn.addr !4102
}

define i32 @function_1009fa6() local_unnamed_addr {
dec_label_pc_1009fa6:
  %0 = call i32 @function_47f15dad(), !insn.addr !4103
  ret i32 %0, !insn.addr !4103
}

define i32 @function_1009fc1() local_unnamed_addr {
dec_label_pc_1009fc1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4104
}

define i32 @function_1009fc3() local_unnamed_addr {
dec_label_pc_1009fc3:
  %0 = call i32 @function_1009fce(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4105
  ret i32 %0, !insn.addr !4105
}

define i32 @function_1009fcd() local_unnamed_addr {
dec_label_pc_1009fcd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4106
}

define i32 @function_1009fce(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1009fce:
  %eax.0.reg2mem = alloca i32, !insn.addr !4107
  %ecx.0.reg2mem = alloca i32, !insn.addr !4107
  %.pre-phi.reg2mem = alloca i32, !insn.addr !4107
  %esi = alloca i32, align 4
  %0 = call x86_fp80 @__decompiler_undefined_function_6()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = call i32 @unknown_41247bfb(), !insn.addr !4108
  %3 = load i32, i32* @global_var_1014fb8, align 4, !insn.addr !4109
  %4 = add i32 %3, 4, !insn.addr !4110
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4110
  store i32 %2, i32* %5, align 4, !insn.addr !4110
  %6 = load i32, i32* @global_var_1014718, align 4, !insn.addr !4111
  %7 = load i32, i32* @global_var_1014fb8, align 4, !insn.addr !4112
  %8 = add i32 %7, 4, !insn.addr !4113
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4113
  %10 = load i32, i32* %9, align 4, !insn.addr !4113
  %11 = mul i32 %6, 4, !insn.addr !4114
  %12 = add i32 %11, 187, !insn.addr !4114
  %13 = inttoptr i32 %10 to i32*, !insn.addr !4115
  %14 = load i32, i32* %13, align 4, !insn.addr !4115
  %15 = udiv i32 %14, 4, !insn.addr !4115
  %16 = trunc i32 %15 to i8, !insn.addr !4115
  %17 = call i8 @llvm.ctpop.i8(i8 %16), !range !258, !insn.addr !4115
  %18 = and i8 %17, 1, !insn.addr !4115
  %19 = icmp eq i8 %18, 0, !insn.addr !4115
  store i32 %15, i32* %13, align 4, !insn.addr !4115
  %20 = icmp eq i1 %19, false, !insn.addr !4116
  br i1 %20, label %dec_label_pc_1009fce.dec_label_pc_100a02e_crit_edge, label %dec_label_pc_1009ffa, !insn.addr !4116

dec_label_pc_1009fce.dec_label_pc_100a02e_crit_edge: ; preds = %dec_label_pc_1009fce
  %.pre = select i1 %1, i32 -1, i32 1, !insn.addr !4117
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i32 %12, i32* %ecx.0.reg2mem
  store i32 %7, i32* %eax.0.reg2mem
  br label %dec_label_pc_100a02e

dec_label_pc_1009ffa:                             ; preds = %dec_label_pc_1009fce
  %21 = inttoptr i32 %12 to i32*, !insn.addr !4118
  %22 = load i32, i32* %21, align 4, !insn.addr !4118
  %23 = add i32 %22, %7, !insn.addr !4118
  store i32 %23, i32* %21, align 4, !insn.addr !4118
  %24 = bitcast i32* %esi to i8*
  %25 = load i8, i8* %24, align 4, !insn.addr !4119
  %26 = inttoptr i32 %10 to i8*, !insn.addr !4119
  store i8 %25, i8* %26, align 1, !insn.addr !4119
  %27 = load i32, i32* %esi, align 4, !insn.addr !4119
  %28 = select i1 %1, i32 -1, i32 1
  %29 = add i32 %27, %28, !insn.addr !4119
  store i32 %29, i32* %esi, align 4, !insn.addr !4119
  %30 = call i32 @function_1007c26(), !insn.addr !4120
  store i32 %30, i32* @global_var_1014fba, align 4, !insn.addr !4121
  %31 = inttoptr i32 %30 to i32*, !insn.addr !4122
  %32 = load i32, i32* %31, align 4, !insn.addr !4122
  %33 = call i32 @unknown_ffa178(i32 %32), !insn.addr !4123
  %34 = load i32, i32* @global_var_1014f62, align 4, !insn.addr !4124
  %35 = inttoptr i32 %34 to i32*, !insn.addr !4125
  %36 = load i32, i32* inttoptr (i32 -620671163 to i32*), align 4, !insn.addr !4126
  store i32 %28, i32* %.pre-phi.reg2mem, !insn.addr !4126
  store i32 %36, i32* %ecx.0.reg2mem, !insn.addr !4126
  store i32 %34, i32* %eax.0.reg2mem, !insn.addr !4126
  br label %dec_label_pc_100a02e, !insn.addr !4126

dec_label_pc_100a02e:                             ; preds = %dec_label_pc_1009fce.dec_label_pc_100a02e_crit_edge, %dec_label_pc_1009ffa
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %37 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !4127
  store i32 %eax.0.reload, i32* %37, align 4, !insn.addr !4127
  %38 = load i32, i32* inttoptr (i32 84010108 to i32*), align 4, !insn.addr !4128
  %39 = inttoptr i32 %38 to i32*, !insn.addr !4129
  %40 = load i32, i32* %39, align 4, !insn.addr !4129
  %41 = mul i32 %ecx.0.reload, 4, !insn.addr !4130
  %42 = add i32 %41, 46348, !insn.addr !4130
  %43 = trunc i32 %38 to i8, !insn.addr !4117
  %44 = inttoptr i32 %40 to i8*, !insn.addr !4117
  store i8 %43, i8* %44, align 1, !insn.addr !4117
  %45 = add i32 %40, %.pre-phi.reload, !insn.addr !4117
  %46 = inttoptr i32 %42 to i32*, !insn.addr !4131
  %47 = load i32, i32* %46, align 4, !insn.addr !4131
  %48 = add i32 %47, %38, !insn.addr !4131
  store i32 %48, i32* %46, align 4, !insn.addr !4131
  %49 = fptosi x86_fp80 %0 to i64, !insn.addr !4132
  %50 = add i32 %eax.0.reload, -204659768, !insn.addr !4132
  %51 = inttoptr i32 %50 to i64*, !insn.addr !4132
  store i64 %49, i64* %51, align 4, !insn.addr !4132
  %52 = load i32, i32* %esi, align 4, !insn.addr !4133
  %53 = inttoptr i32 %52 to i8*, !insn.addr !4133
  %54 = load i8, i8* %53, align 1, !insn.addr !4133
  %55 = inttoptr i32 %45 to i8*, !insn.addr !4133
  store i8 %54, i8* %55, align 1, !insn.addr !4133
  %56 = add i32 %45, %.pre-phi.reload, !insn.addr !4133
  %57 = load i32, i32* inttoptr (i32 1329745788 to i32*), align 4, !insn.addr !4134
  %58 = inttoptr i32 %57 to i32*, !insn.addr !4135
  %59 = load i32, i32* %58, align 4, !insn.addr !4135
  %60 = or i32 %59, %56, !insn.addr !4135
  store i32 %60, i32* %58, align 4, !insn.addr !4135
  %61 = add i32 %57, 232, !insn.addr !4136
  %62 = and i32 %61, 255, !insn.addr !4136
  %63 = and i32 %57, -256, !insn.addr !4136
  %64 = or i32 %62, %63, !insn.addr !4136
  ret i32 %64, !insn.addr !4137
}

define i32 @function_100a08b() local_unnamed_addr {
dec_label_pc_100a08b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_out.4(i32 4, i32 %1), !insn.addr !4138
  %2 = call i32 @function_48675eb8(i32 %0), !insn.addr !4139
  ret i32 %2, !insn.addr !4139
}

define i32 @function_100a0aa() local_unnamed_addr {
dec_label_pc_100a0aa:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4140
}

define i32 @function_100a0b2() local_unnamed_addr {
dec_label_pc_100a0b2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4141
  %4 = load i32, i32* inttoptr (i32 -1073646363 to i32*), align 4, !insn.addr !4142
  %5 = add i32 %1, 1199846911, !insn.addr !4143
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4143
  %7 = add i32 %4, %2, !insn.addr !4144
  %8 = inttoptr i32 %2 to i32*, !insn.addr !4144
  store i32 %7, i32* %8, align 4, !insn.addr !4144
  %9 = call i32 @unknown_d1007bfb(), !insn.addr !4145
  %10 = load i32, i32* @global_var_1014f1b, align 4, !insn.addr !4146
  %11 = load i8, i8* inttoptr (i32 -2079487104 to i8*), align 128, !insn.addr !4147
  %12 = zext i8 %11 to i32, !insn.addr !4147
  %13 = and i32 %9, -256, !insn.addr !4147
  %14 = or i32 %13, %12, !insn.addr !4147
  %15 = inttoptr i32 %10 to i32*, !insn.addr !4148
  %16 = load i32, i32* %15, align 4, !insn.addr !4148
  %17 = add i32 %14, %16, !insn.addr !4148
  store i32 %17, i32* %15, align 4, !insn.addr !4148
  %18 = add i32 %0, 2, !insn.addr !4149
  %19 = inttoptr i32 %18 to i8*, !insn.addr !4149
  %20 = load i8, i8* %19, align 1, !insn.addr !4149
  %21 = or i8 %20, -30, !insn.addr !4149
  store i8 %21, i8* %19, align 1, !insn.addr !4149
  %22 = call i32 @function_be2b5ef9(), !insn.addr !4150
  ret i32 %22, !insn.addr !4150
}

define i32 @function_100a0ed() local_unnamed_addr {
dec_label_pc_100a0ed:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -1, !insn.addr !4151
  ret i32 %1, !insn.addr !4152
}

define i32 @function_100a0f3() local_unnamed_addr {
dec_label_pc_100a0f3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = and i32 %3, %2, !insn.addr !4153
  %5 = inttoptr i32 %1 to i8*, !insn.addr !4154
  %6 = inttoptr i32 %0 to i8*, !insn.addr !4154
  call void @__asm_rep_movsb_memcpy(i8* %6, i8* %5, i32 %4), !insn.addr !4154
  %7 = call i32 @__asm_fnstenv(), !insn.addr !4155
  %8 = sext i32 %7 to i224, !insn.addr !4155
  %9 = add i32 %7, 4, !insn.addr !4155
  %10 = inttoptr i32 %9 to i224*, !insn.addr !4155
  store i224 %8, i224* %10, align 4, !insn.addr !4155
  %11 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4156
  %12 = load i32, i32* @global_var_1014f50, align 4, !insn.addr !4157
  %13 = add i32 %12, 4, !insn.addr !4158
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4158
  %15 = load i32, i32* @global_var_10147a8, align 4, !insn.addr !4159
  %16 = call i32 @unknown_e7d70bfb(i32 %15), !insn.addr !4160
  %17 = load i32, i32* inttoptr (i32 17846144 to i32*), align 128, !insn.addr !4161
  %18 = add i32 %17, 4, !insn.addr !4162
  %19 = inttoptr i32 %18 to i32*, !insn.addr !4162
  store i32 %16, i32* %19, align 4, !insn.addr !4162
  ret i32 %16, !insn.addr !4163
}

define i32 @function_100a14f() local_unnamed_addr {
dec_label_pc_100a14f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %5 = add i32 %4, %3, !insn.addr !4164
  %6 = icmp eq i32 %5, 0, !insn.addr !4164
  %7 = inttoptr i32 %3 to i32*, !insn.addr !4164
  store i32 %5, i32* %7, align 4, !insn.addr !4164
  %8 = add i32 %3, -1, !insn.addr !4165
  %9 = icmp ne i32 %8, 0, !insn.addr !4165
  %10 = icmp eq i1 %9, %6, !insn.addr !4165
  br i1 %10, label %dec_label_pc_100a177, label %dec_label_pc_100a15f, !insn.addr !4165

dec_label_pc_100a15f:                             ; preds = %dec_label_pc_100a14f
  %11 = call i32 @unknown_65007bfb(i32 0, i32 %4), !insn.addr !4166
  %12 = load i32, i32* inttoptr (i32 -251572292 to i32*), align 4, !insn.addr !4167
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4168
  store i32 %11, i32* %13, align 4, !insn.addr !4168
  ret i32 %11, !insn.addr !4168

dec_label_pc_100a177:                             ; preds = %dec_label_pc_100a14f
  %14 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4169
  %15 = add i32 %3, add (i32 ptrtoint (i32* @global_var_1014fbc to i32), i32 -1), !insn.addr !4170
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4170
  %17 = load i32, i32* %16, align 4, !insn.addr !4170
  %18 = add i32 %17, %14, !insn.addr !4170
  store i32 %18, i32* %16, align 4, !insn.addr !4170
  %19 = add i32 %3, -116, !insn.addr !4171
  %20 = inttoptr i32 %19 to i32*, !insn.addr !4171
  %21 = mul i32 %8, 4, !insn.addr !4172
  %22 = add i32 %1, -63, !insn.addr !4172
  %23 = add i32 %22, %21, !insn.addr !4172
  %24 = inttoptr i32 %23 to i8*, !insn.addr !4172
  %25 = load i8, i8* %24, align 1, !insn.addr !4172
  %26 = udiv i32 %2, 256, !insn.addr !4172
  %27 = trunc i32 %26 to i8, !insn.addr !4172
  %28 = add i8 %25, %27, !insn.addr !4172
  store i8 %28, i8* %24, align 1, !insn.addr !4172
  %29 = inttoptr i32 %8 to i32*, !insn.addr !4173
  %30 = load i32, i32* %29, align 4, !insn.addr !4173
  %31 = mul i32 %30, 4, !insn.addr !4173
  store i32 %31, i32* %29, align 4, !insn.addr !4173
  %32 = inttoptr i32 %0 to i8*, !insn.addr !4174
  call void @__asm_rep_movsd_memcpy(i8* %32, i8* bitcast (i8** @global_var_10147c8 to i8*), i32 %8), !insn.addr !4174
  %33 = load i32, i32* @global_var_1014f71, align 4, !insn.addr !4175
  ret i32 %33, !insn.addr !4176
}

define i32 @function_100a1aa() local_unnamed_addr {
dec_label_pc_100a1aa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 4, !insn.addr !4177
  %2 = inttoptr i32 %1 to i32*, !insn.addr !4177
  ret i32 %0, !insn.addr !4178
}

define i32 @function_100a1ce() local_unnamed_addr {
dec_label_pc_100a1ce:
  %0 = call i32 @function_388d0c8d(), !insn.addr !4179
  ret i32 %0, !insn.addr !4179
}

define i32 @function_100a1d9() local_unnamed_addr {
dec_label_pc_100a1d9:
  %0 = call i32 @function_b3ed6094(), !insn.addr !4180
  ret i32 %0, !insn.addr !4180
}

define i32 @function_100a1e3() local_unnamed_addr {
dec_label_pc_100a1e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = trunc i32 %1 to i8
  %5 = inttoptr i32 %0 to i8*, !insn.addr !4181
  store i8 %4, i8* %5, align 1, !insn.addr !4181
  %6 = call i32 @function_1007c26(), !insn.addr !4182
  store i32 %6, i32* inttoptr (i32 24923907 to i32*), align 4, !insn.addr !4183
  %7 = mul i32 %2, 4, !insn.addr !4184
  %8 = add i32 %3, -56, !insn.addr !4184
  %9 = add i32 %8, %7, !insn.addr !4184
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4184
  %11 = load i32, i32* %10, align 4, !insn.addr !4184
  %12 = add i32 %11, 1, !insn.addr !4184
  store i32 %12, i32* %10, align 4, !insn.addr !4184
  ret i32 %6, !insn.addr !4185
}

define i32 @function_100a228() local_unnamed_addr {
dec_label_pc_100a228:
  %0 = call i32 @function_3116931(), !insn.addr !4186
  ret i32 %0, !insn.addr !4186
}

define i32 @function_100a243() local_unnamed_addr {
dec_label_pc_100a243:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4187
}

define i32 @function_100a24c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100a24c:
  %0 = add i32 %arg1, 255, !insn.addr !4188
  %1 = and i32 %0, 255, !insn.addr !4188
  %2 = and i32 %arg1, -256, !insn.addr !4188
  %3 = or i32 %1, %2, !insn.addr !4188
  ret i32 %3, !insn.addr !4189
}

define i32 @function_100a257() local_unnamed_addr {
dec_label_pc_100a257:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4190
}

define i32 @function_100a28a() local_unnamed_addr {
dec_label_pc_100a28a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %sext = mul i32 %0, 65536
  %1 = sdiv i32 %sext, 65536, !insn.addr !4191
  ret i32 %1, !insn.addr !4192
}

define i32 @function_100a2cb() local_unnamed_addr {
dec_label_pc_100a2cb:
  %0 = call i32 @function_492a60d2(), !insn.addr !4193
  ret i32 %0, !insn.addr !4193
}

define i32 @function_100a310() local_unnamed_addr {
dec_label_pc_100a310:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i32 @__asm_sti(), !insn.addr !4194
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4195
  %6 = load i8, i8* %5, align 1, !insn.addr !4195
  %7 = trunc i32 %4 to i8, !insn.addr !4195
  %8 = add i8 %6, %7, !insn.addr !4195
  %9 = xor i8 %8, %6, !insn.addr !4195
  %10 = xor i8 %8, %7, !insn.addr !4195
  %11 = and i8 %9, %10, !insn.addr !4195
  %12 = icmp slt i8 %11, 0, !insn.addr !4195
  store i8 %8, i8* %5, align 1, !insn.addr !4195
  br i1 %12, label %dec_label_pc_100a368, label %dec_label_pc_100a320, !insn.addr !4196

dec_label_pc_100a320:                             ; preds = %dec_label_pc_100a310
  %13 = mul i32 %4, 2, !insn.addr !4197
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4198
  %15 = load i32, i32* %14, align 4, !insn.addr !4198
  %16 = add i32 %15, %4, !insn.addr !4198
  store i32 %16, i32* %14, align 4, !insn.addr !4198
  %17 = load i32, i32* %esi, align 4, !insn.addr !4199
  %18 = inttoptr i32 %17 to i8*, !insn.addr !4199
  %19 = inttoptr i32 %0 to i8*, !insn.addr !4199
  call void @__asm_rep_movsd_memcpy(i8* %19, i8* %18, i32 %13), !insn.addr !4199
  %20 = call i32 @unknown_e5007c26(i32 %1), !insn.addr !4200
  store i32 %20, i32* inttoptr (i32 -31895608 to i32*), align 8, !insn.addr !4201
  %21 = and i32 %2, 255, !insn.addr !4202
  %22 = and i32 %20, -256, !insn.addr !4202
  %23 = or i32 %22, %21, !insn.addr !4202
  ret i32 %23, !insn.addr !4203

dec_label_pc_100a368:                             ; preds = %dec_label_pc_100a310
  %24 = add i32 %1, -1107158079, !insn.addr !4204
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4204
  %26 = load i32, i32* %25, align 4, !insn.addr !4204
  %27 = bitcast i32* %esi to i8*
  %28 = load i8, i8* %27, align 4, !insn.addr !4205
  %29 = add i8 %28, %7, !insn.addr !4205
  %30 = load i32, i32* %esi, align 4, !insn.addr !4205
  %31 = inttoptr i32 %30 to i8*, !insn.addr !4205
  store i8 %29, i8* %31, align 1, !insn.addr !4205
  %32 = mul i32 %4, 1024, !insn.addr !4206
  %33 = udiv i32 %4, 4194304
  %34 = and i32 %33, 511, !insn.addr !4206
  %35 = or i32 %34, %32, !insn.addr !4206
  %36 = udiv i32 %2, 256, !insn.addr !4207
  %37 = trunc i32 %36 to i8, !insn.addr !4207
  %38 = load i32, i32* %esi, align 4, !insn.addr !4207
  %39 = add i32 %38, ptrtoint (i8** @global_var_1014880 to i32), !insn.addr !4207
  %40 = inttoptr i32 %39 to i8*, !insn.addr !4207
  %41 = load i8, i8* %40, align 1, !insn.addr !4207
  %42 = add i8 %41, %37, !insn.addr !4207
  %43 = zext i8 %42 to i32, !insn.addr !4207
  %44 = mul i32 %43, 256, !insn.addr !4207
  %45 = and i32 %2, -65281, !insn.addr !4207
  %46 = or i32 %44, %45, !insn.addr !4207
  %47 = inttoptr i32 %38 to i8*, !insn.addr !4208
  %48 = inttoptr i32 %0 to i8*, !insn.addr !4208
  call void @__asm_rep_movsd_memcpy(i8* %48, i8* %47, i32 %35), !insn.addr !4208
  %49 = select i1 %3, i32 -4, i32 4, !insn.addr !4208
  %50 = mul i32 %35, %49, !insn.addr !4208
  %51 = add i32 %50, %0, !insn.addr !4208
  %52 = and i32 %4, %1, !insn.addr !4209
  %53 = inttoptr i32 %51 to i8*, !insn.addr !4210
  call void @__asm_rep_movsb_memcpy(i8* %53, i8* %53, i32 %52), !insn.addr !4210
  %54 = select i1 %3, i32 -1, i32 1, !insn.addr !4210
  %55 = mul i32 %52, %54, !insn.addr !4210
  %56 = add i32 %51, %55, !insn.addr !4210
  %57 = add i32 %56, -16492305, !insn.addr !4211
  %58 = inttoptr i32 %57 to i32*, !insn.addr !4211
  %59 = load i32, i32* %58, align 4, !insn.addr !4211
  %60 = add i32 %46, %59, !insn.addr !4211
  store i32 %60, i32* %58, align 4, !insn.addr !4211
  %61 = add i32 %56, 3, !insn.addr !4212
  %62 = inttoptr i32 %61 to i32*, !insn.addr !4212
  %63 = load i8, i8* @global_var_10148a5, align 1, !insn.addr !4213
  %64 = sext i8 %63 to i32, !insn.addr !4213
  %65 = load i8, i8* @global_var_1014fc8, align 1, !insn.addr !4214
  %66 = sext i8 %65 to i32, !insn.addr !4214
  %67 = add nsw i32 %66, 4, !insn.addr !4215
  %68 = inttoptr i32 %67 to i32*, !insn.addr !4215
  %69 = load i32, i32* %68, align 4, !insn.addr !4215
  %70 = mul i32 %64, 4, !insn.addr !4216
  %71 = add nsw i32 %70, 59, !insn.addr !4216
  %72 = inttoptr i32 %71 to i8*, !insn.addr !4216
  %73 = load i8, i8* %72, align 1, !insn.addr !4216
  store i8 %63, i8* %72, align 1, !insn.addr !4216
  %74 = zext i8 %73 to i32, !insn.addr !4216
  %75 = and i32 %64, -256, !insn.addr !4216
  %76 = or i32 %75, %74, !insn.addr !4216
  %77 = add i32 %26, -23806462, !insn.addr !4217
  %78 = inttoptr i32 %77 to i32*, !insn.addr !4217
  %79 = load i32, i32* %78, align 4, !insn.addr !4217
  %80 = udiv i32 %79, 2, !insn.addr !4217
  store i32 %80, i32* %78, align 4, !insn.addr !4217
  %81 = inttoptr i32 %56 to i32*, !insn.addr !4218
  %82 = load i32, i32* %81, align 4, !insn.addr !4218
  %83 = inttoptr i32 %69 to i32*, !insn.addr !4218
  store i32 %82, i32* %83, align 4, !insn.addr !4218
  ret i32 %76, !insn.addr !4219
}

define i32 @function_100a3c8() local_unnamed_addr {
dec_label_pc_100a3c8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_int(i32 243), !insn.addr !4220
  %3 = trunc i32 %1 to i8
  %4 = inttoptr i32 %0 to i8*, !insn.addr !4221
  store i8 %3, i8* %4, align 1, !insn.addr !4221
  %5 = call i32 @unknown_1cf17cbc(), !insn.addr !4222
  %6 = add i32 %5, %2, !insn.addr !4223
  %7 = inttoptr i32 %2 to i32*, !insn.addr !4223
  store i32 %6, i32* %7, align 4, !insn.addr !4223
  ret i32 %5, !insn.addr !4224
}

define i32 @function_100a3d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_100a3d8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %stack_var_4 = alloca i32, align 4
  %1 = call i32 @__asm_in(i32 122), !insn.addr !4225
  %2 = call i32 @__asm_sti(), !insn.addr !4226
  %3 = call i32 @unknown_9c007bfb(), !insn.addr !4227
  %4 = load i32, i32* inttoptr (i32 20008908 to i32*), align 4, !insn.addr !4228
  %5 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !4229
  %6 = add i32 %0, 625527821, !insn.addr !4230
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4230
  %8 = load i32, i32* %7, align 4, !insn.addr !4230
  %9 = add i32 %8, %4, !insn.addr !4230
  %10 = icmp ult i32 %9, %8, !insn.addr !4230
  store i32 %9, i32* %7, align 4, !insn.addr !4230
  %11 = call i32 @__asm_iretd(), !insn.addr !4231
  %12 = add i32 %0, 948633857, !insn.addr !4232
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4232
  %14 = load i32, i32* %13, align 4, !insn.addr !4232
  %15 = zext i1 %10 to i32, !insn.addr !4232
  %16 = or i32 %15, %5, !insn.addr !4232
  %17 = sub i32 %14, %16, !insn.addr !4232
  store i32 %17, i32* %13, align 4, !insn.addr !4232
  ret i32 %11, !insn.addr !4233
}

define i32 @function_100a404() local_unnamed_addr {
dec_label_pc_100a404:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -117, !insn.addr !4234
  %2 = inttoptr i32 %1 to i8*, !insn.addr !4234
  %3 = load i8, i8* %2, align 1, !insn.addr !4234
  %4 = udiv i32 %0, 256, !insn.addr !4234
  %5 = trunc i32 %4 to i8, !insn.addr !4234
  %6 = add i8 %3, %5, !insn.addr !4234
  store i8 %6, i8* %2, align 1, !insn.addr !4234
  %7 = call i32 @function_49c962ab(), !insn.addr !4235
  ret i32 %7, !insn.addr !4235
}

define i32 @function_100a412(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100a412:
  %storemerge.reg2mem = alloca i32, !insn.addr !4236
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = add i32 %3, %1, !insn.addr !4236
  %9 = inttoptr i32 %8 to i8*, !insn.addr !4237
  %10 = inttoptr i32 %0 to i8*, !insn.addr !4237
  call void @__asm_rep_movsd_memcpy(i8* %10, i8* %9, i32 %5), !insn.addr !4237
  %11 = select i1 %7, i32 -4, i32 4, !insn.addr !4237
  %12 = mul i32 %11, %5, !insn.addr !4237
  %13 = add i32 %12, %0, !insn.addr !4237
  %14 = add i32 %13, -46, !insn.addr !4238
  %15 = inttoptr i32 %14 to i32*, !insn.addr !4238
  %16 = load i32, i32* %15, align 4, !insn.addr !4238
  %17 = load i32, i32* @global_var_1014fcc, align 4, !insn.addr !4239
  %18 = add i32 %17, 4, !insn.addr !4240
  %19 = inttoptr i32 %18 to i32*, !insn.addr !4240
  %20 = load i32, i32* %19, align 4, !insn.addr !4240
  %.neg = select i1 %7, i32 1, i32 -1, !insn.addr !4241
  %.neg2 = sub i32 %.neg, %13, !insn.addr !4241
  %21 = add i32 %.neg2, %20, !insn.addr !4240
  store i32 %21, i32* %19, align 4, !insn.addr !4240
  %22 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4242
  %23 = mul i32 %6, 2, !insn.addr !4243
  %24 = add i32 %arg2, 1, !insn.addr !4243
  %25 = add i32 %24, %23, !insn.addr !4243
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4243
  %27 = load i32, i32* %26, align 4, !insn.addr !4243
  %28 = mul i32 %27, 2, !insn.addr !4243
  %29 = lshr i32 %27, 31, !insn.addr !4243
  %30 = or i32 %29, %28, !insn.addr !4243
  store i32 %30, i32* %26, align 4, !insn.addr !4243
  %31 = call i32 @function_10037fb(), !insn.addr !4244
  %32 = mul i32 %31, 2, !insn.addr !4245
  %33 = inttoptr i32 %6 to i32*, !insn.addr !4245
  store i32 %32, i32* %33, align 4, !insn.addr !4245
  %34 = add i32 %6, 38, !insn.addr !4246
  %35 = inttoptr i32 %34 to i32*, !insn.addr !4246
  store i32 %31, i32* %35, align 4, !insn.addr !4246
  %36 = load i32, i32* @global_var_10148b0, align 4, !insn.addr !4247
  %37 = trunc i32 %31 to i8, !insn.addr !4248
  %38 = and i8 %37, 14, !insn.addr !4248
  %39 = icmp ugt i8 %38, 9, !insn.addr !4248
  %40 = icmp ugt i8 %37, -103
  br i1 %39, label %41, label %46, !insn.addr !4248

; <label>:41:                                     ; preds = %dec_label_pc_100a412
  %.v = select i1 %40, i32 154, i32 250
  %42 = add i32 %.v, %31, !insn.addr !4248
  %43 = and i32 %42, 255, !insn.addr !4248
  %44 = and i32 %31, -256, !insn.addr !4248
  %45 = or i32 %43, %44, !insn.addr !4248
  store i32 %45, i32* %storemerge.reg2mem, !insn.addr !4248
  br label %52, !insn.addr !4248

; <label>:46:                                     ; preds = %dec_label_pc_100a412
  %47 = add i32 %31, 160, !insn.addr !4248
  %48 = select i1 %40, i32 %47, i32 %31, !insn.addr !4248
  %49 = and i32 %48, 255, !insn.addr !4248
  %50 = and i32 %31, -256, !insn.addr !4248
  %51 = or i32 %49, %50, !insn.addr !4248
  store i32 %51, i32* %storemerge.reg2mem, !insn.addr !4248
  br label %52, !insn.addr !4248

; <label>:52:                                     ; preds = %41, %46
  %53 = and i32 %16, %4, !insn.addr !4238
  %54 = xor i32 %36, %6, !insn.addr !4247
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %55 = inttoptr i32 %54 to i32*, !insn.addr !4249
  %56 = load i32, i32* %55, align 4, !insn.addr !4249
  %57 = add i32 %56, %storemerge.reload, !insn.addr !4249
  store i32 %57, i32* %55, align 4, !insn.addr !4249
  %58 = add i32 %storemerge.reload, 4, !insn.addr !4250
  %59 = inttoptr i32 %58 to i32*, !insn.addr !4250
  %60 = load i32, i32* %59, align 4, !insn.addr !4250
  %61 = mul i32 %2, 4, !insn.addr !4251
  %62 = add i32 %54, %61, !insn.addr !4251
  %63 = inttoptr i32 %storemerge.reload to i8*, !insn.addr !4252
  %64 = load i8, i8* %63, align 1, !insn.addr !4252
  %65 = trunc i32 %storemerge.reload to i8, !insn.addr !4252
  %66 = add i8 %64, %65, !insn.addr !4252
  store i8 %66, i8* %63, align 1, !insn.addr !4252
  %67 = udiv i32 %62, 4, !insn.addr !4253
  %68 = and i32 %62, 2, !insn.addr !4253
  %69 = icmp ne i32 %68, 0, !insn.addr !4253
  %70 = inttoptr i32 %60 to i8*, !insn.addr !4254
  call void @__asm_rep_movsd_memcpy(i8* %70, i8* bitcast (i8** @global_var_10148f5 to i8*), i32 %67), !insn.addr !4254
  %71 = mul i32 %67, -4, !insn.addr !4254
  %72 = add i32 %60, %71, !insn.addr !4254
  %73 = trunc i32 %62 to i8, !insn.addr !4255
  %74 = inttoptr i32 %72 to i8*, !insn.addr !4255
  store i8 %73, i8* %74, align 1, !insn.addr !4255
  %75 = inttoptr i32 %53 to i8*, !insn.addr !4256
  %76 = load i8, i8* %75, align 1, !insn.addr !4256
  %77 = udiv i32 %62, 256, !insn.addr !4256
  %78 = trunc i32 %77 to i8, !insn.addr !4256
  %79 = zext i1 %69 to i8, !insn.addr !4256
  %80 = add i8 %79, %78, !insn.addr !4256
  %81 = add i8 %80, %76, !insn.addr !4256
  store i8 %81, i8* %75, align 1, !insn.addr !4256
  call void @__asm_int(i32 243), !insn.addr !4257
  %82 = call i32 @unknown_545c26(), !insn.addr !4258
  store i32 %82, i32* inttoptr (i32 24596432 to i32*), align 16, !insn.addr !4259
  %83 = inttoptr i32 %82 to i32*, !insn.addr !4260
  %84 = load i32, i32* %83, align 4, !insn.addr !4260
  %sext = mul i32 %84, 65536
  %85 = sdiv i32 %sext, 65536, !insn.addr !4261
  %86 = call i32 @unknown_8f4022c1(i32 %85), !insn.addr !4261
  %87 = load i32, i32* inttoptr (i32 469847504 to i32*), align 16, !insn.addr !4262
  %88 = inttoptr i32 %87 to i8*, !insn.addr !4263
  %89 = load i8, i8* %88, align 1, !insn.addr !4263
  %90 = trunc i32 %53 to i8, !insn.addr !4263
  %91 = and i8 %89, %90, !insn.addr !4263
  store i8 %91, i8* %88, align 1, !insn.addr !4263
  ret i32 %87, !insn.addr !4264
}

define i32 @function_100a4fe() local_unnamed_addr {
dec_label_pc_100a4fe:
  %0 = call i32 @function_49d56305(), !insn.addr !4265
  ret i32 %0, !insn.addr !4265
}

define i32 @function_100a511() local_unnamed_addr {
dec_label_pc_100a511:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4266
}

define i32 @function_100a51d() local_unnamed_addr {
dec_label_pc_100a51d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4267
}

define i32 @function_100a52a(i32 %arg1) local_unnamed_addr {
dec_label_pc_100a52a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !4268
  ret i32 %2, !insn.addr !4269
}

define i32 @function_100a52f() local_unnamed_addr {
dec_label_pc_100a52f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4270
}

define i32 @function_100a54f() local_unnamed_addr {
dec_label_pc_100a54f:
  %0 = call i32 @function_4a977b0a(), !insn.addr !4271
  ret i32 %0, !insn.addr !4271
}

define i32 @function_100a565() local_unnamed_addr {
dec_label_pc_100a565:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i32, !insn.addr !4272
  %3 = add i32 %0, -2747152, !insn.addr !4272
  %4 = add i32 %3, %2, !insn.addr !4272
  ret i32 %4, !insn.addr !4273
}

define i32 @function_100a585() local_unnamed_addr {
dec_label_pc_100a585:
  %0 = call i32 @function_3c0d8b04(), !insn.addr !4274
  ret i32 %0, !insn.addr !4274
}

define i32 @function_100a59f() local_unnamed_addr {
dec_label_pc_100a59f:
  %0 = call i32 @function_4a4463a6(), !insn.addr !4275
  ret i32 %0, !insn.addr !4275
}

define i32 @function_100a5b2() local_unnamed_addr {
dec_label_pc_100a5b2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4276
}

define i32 @function_100a5be() local_unnamed_addr {
dec_label_pc_100a5be:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4277
}

define i32 @function_100a5f0() local_unnamed_addr {
dec_label_pc_100a5f0:
  %0 = call i32 @function_4ab063f7(), !insn.addr !4278
  ret i32 %0, !insn.addr !4278
}

define i32 @function_100a609() local_unnamed_addr {
dec_label_pc_100a609:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = udiv i32 %0, 256, !insn.addr !4279
  %2 = mul nuw i32 %1, 255, !insn.addr !4279
  %3 = add i32 %2, %0, !insn.addr !4279
  %4 = and i32 %3, 255, !insn.addr !4279
  %5 = and i32 %0, -65536, !insn.addr !4279
  %6 = or i32 %4, %5, !insn.addr !4279
  ret i32 %6, !insn.addr !4280
}

define i32 @function_100a651() local_unnamed_addr {
dec_label_pc_100a651:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = udiv i32 %0, 256, !insn.addr !4281
  %2 = mul nuw i32 %1, 255, !insn.addr !4281
  %3 = add i32 %2, %0, !insn.addr !4281
  %4 = and i32 %3, 255, !insn.addr !4281
  %5 = and i32 %0, -65536, !insn.addr !4281
  %6 = or i32 %4, %5, !insn.addr !4281
  ret i32 %6, !insn.addr !4282
}

define i32 @function_100a65a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100a65a:
  %0 = udiv i32 %arg7, 256, !insn.addr !4283
  %1 = mul nuw i32 %0, 255, !insn.addr !4283
  %2 = add i32 %1, %arg7, !insn.addr !4283
  %3 = and i32 %2, 255, !insn.addr !4283
  %4 = and i32 %arg7, -65536, !insn.addr !4283
  %5 = or i32 %3, %4, !insn.addr !4283
  ret i32 %5, !insn.addr !4284
}

define i32 @function_100a68f() local_unnamed_addr {
dec_label_pc_100a68f:
  %0 = call i32 @function_fe436498(), !insn.addr !4285
  ret i32 %0, !insn.addr !4285
}

define i32 @function_100a6aa() local_unnamed_addr {
dec_label_pc_100a6aa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = udiv i32 %0, 256, !insn.addr !4286
  %2 = mul nuw i32 %1, 255, !insn.addr !4286
  %3 = add i32 %2, %0, !insn.addr !4286
  %4 = and i32 %3, 255, !insn.addr !4286
  %5 = and i32 %0, -65536, !insn.addr !4286
  %6 = or i32 %4, %5, !insn.addr !4286
  ret i32 %6, !insn.addr !4287
}

define i32 @function_100a6e1() local_unnamed_addr {
dec_label_pc_100a6e1:
  %0 = call i32 @function_4a7964e8(), !insn.addr !4288
  ret i32 %0, !insn.addr !4288
}

define i32 @function_100a6f2() local_unnamed_addr {
dec_label_pc_100a6f2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = udiv i32 %2, 256, !insn.addr !4289
  %4 = mul nuw i32 %3, 255, !insn.addr !4289
  %5 = add i32 %4, %2, !insn.addr !4289
  %6 = and i32 %2, -65536, !insn.addr !4289
  %7 = add i32 %0, -1140764704, !insn.addr !4290
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4290
  %9 = load i32, i32* %8, align 4, !insn.addr !4290
  %10 = add i32 %9, 1, !insn.addr !4290
  store i32 %10, i32* %8, align 4, !insn.addr !4290
  %11 = udiv i32 %1, 256, !insn.addr !4291
  %12 = xor i32 %5, %11
  %13 = and i32 %12, 255, !insn.addr !4291
  %14 = or i32 %6, %13, !insn.addr !4291
  %15 = or i32 %14, 65280, !insn.addr !4292
  ret i32 %15, !insn.addr !4293
}

define i32 @function_100a706() local_unnamed_addr {
dec_label_pc_100a706:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i32*, !insn.addr !4294
  ret i32 %0, !insn.addr !4295
}

define i32 @function_100a70a() local_unnamed_addr {
dec_label_pc_100a70a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-1 = alloca i32, align 4
  %6 = add i32 %4, -1, !insn.addr !4296
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4297
  %8 = load i32, i32* %7, align 4, !insn.addr !4297
  %9 = add i32 %8, %5, !insn.addr !4297
  %10 = icmp eq i32 %9, 0, !insn.addr !4297
  store i32 %9, i32* %7, align 4, !insn.addr !4297
  %11 = add i32 %4, -2, !insn.addr !4298
  %12 = icmp eq i32 %11, 0, !insn.addr !4298
  %13 = or i1 %12, %10, !insn.addr !4298
  br i1 %13, label %dec_label_pc_100a717, label %dec_label_pc_100a766, !insn.addr !4298

dec_label_pc_100a717:                             ; preds = %dec_label_pc_100a70a
  %14 = inttoptr i32 %11 to i32*, !insn.addr !4299
  %15 = load i32, i32* inttoptr (i32 -909948596 to i32*), align 4, !insn.addr !4300
  %16 = add i32 %15, 79, !insn.addr !4301
  %17 = inttoptr i32 %16 to i8*, !insn.addr !4301
  %18 = load i8, i8* %17, align 1, !insn.addr !4301
  %19 = udiv i32 %15, 256, !insn.addr !4301
  %20 = trunc i32 %19 to i8, !insn.addr !4301
  %21 = xor i8 %18, %20, !insn.addr !4301
  store i8 %21, i8* %17, align 1, !insn.addr !4301
  %22 = add i32 %2, -1928575867, !insn.addr !4302
  %23 = inttoptr i32 %22 to i32*, !insn.addr !4302
  %24 = load i32, i32* %23, align 4, !insn.addr !4302
  %25 = add i32 %24, %15, !insn.addr !4302
  store i32 %25, i32* %23, align 4, !insn.addr !4302
  %26 = inttoptr i32 %0 to i8*, !insn.addr !4303
  %27 = load i8, i8* %26, align 1, !insn.addr !4303
  %28 = trunc i32 %0 to i8, !insn.addr !4303
  %29 = add i8 %27, %28, !insn.addr !4303
  store i8 %29, i8* %26, align 1, !insn.addr !4303
  %30 = call i32 @function_4a916539(), !insn.addr !4304
  ret i32 %30, !insn.addr !4304

dec_label_pc_100a766:                             ; preds = %dec_label_pc_100a70a
  %31 = ptrtoint i32* %stack_var_-1 to i32, !insn.addr !4305
  %32 = add i32 %4, 1401619634, !insn.addr !4306
  %33 = inttoptr i32 %32 to i32*, !insn.addr !4306
  %34 = load i32, i32* %33, align 4, !insn.addr !4306
  %35 = add i32 %34, %11, !insn.addr !4306
  store i32 %35, i32* %33, align 4, !insn.addr !4306
  %36 = trunc i32 %11 to i8, !insn.addr !4307
  %37 = inttoptr i32 %6 to i8*, !insn.addr !4307
  %38 = load i8, i8* %37, align 1, !insn.addr !4307
  %39 = add i8 %38, %36, !insn.addr !4307
  %40 = zext i8 %39 to i32, !insn.addr !4307
  %41 = and i32 %11, -256, !insn.addr !4307
  %42 = or i32 %41, %40, !insn.addr !4307
  %43 = add i32 %42, 28528415, !insn.addr !4308
  %44 = inttoptr i32 %43 to i32*, !insn.addr !4308
  %45 = load i32, i32* %44, align 4, !insn.addr !4308
  %46 = add i32 %45, %31, !insn.addr !4308
  store i32 %46, i32* %44, align 4, !insn.addr !4308
  %47 = add i32 %5, -64, !insn.addr !4309
  %48 = inttoptr i32 %47 to i32*, !insn.addr !4309
  %49 = load i32, i32* %48, align 4, !insn.addr !4309
  %50 = and i32 %5, -256, !insn.addr !4310
  %51 = and i32 %5, 104, !insn.addr !4311
  %52 = or i32 %51, 151, !insn.addr !4311
  %53 = or i32 %52, %50, !insn.addr !4311
  %54 = inttoptr i32 %53 to i8*, !insn.addr !4312
  %55 = load i8, i8* %54, align 1, !insn.addr !4312
  %56 = trunc i32 %52 to i8, !insn.addr !4312
  %57 = add i8 %55, %56, !insn.addr !4312
  store i8 %57, i8* %54, align 1, !insn.addr !4312
  %58 = udiv i32 %42, 4, !insn.addr !4313
  %59 = icmp ult i32 %42, 4
  %60 = and i32 %40, 2, !insn.addr !4313
  %61 = icmp ne i32 %60, 0, !insn.addr !4313
  %62 = or i1 %61, %59, !insn.addr !4314
  br i1 %62, label %dec_label_pc_100a786, label %dec_label_pc_100a7de, !insn.addr !4314

dec_label_pc_100a786:                             ; preds = %dec_label_pc_100a766
  %63 = inttoptr i32 %58 to i32*, !insn.addr !4315
  %64 = load i32, i32* %63, align 4, !insn.addr !4315
  %65 = add i32 %64, %42, !insn.addr !4315
  store i32 %65, i32* %63, align 4, !insn.addr !4315
  %66 = inttoptr i32 %1 to i8*, !insn.addr !4316
  %67 = inttoptr i32 %49 to i8*, !insn.addr !4316
  call void @__asm_rep_movsd_memcpy(i8* %67, i8* %66, i32 %58), !insn.addr !4316
  %68 = call i32 @unknown_89767c3a(), !insn.addr !4317
  %69 = inttoptr i32 %68 to i8*, !insn.addr !4318
  store i8* %69, i8** @global_var_1014fe8, align 4, !insn.addr !4318
  %70 = inttoptr i32 %68 to i32*, !insn.addr !4319
  %71 = load i32, i32* %70, align 4, !insn.addr !4319
  %72 = call i32 @function_1007bc1(i32 %71), !insn.addr !4320
  %73 = load i32, i32* inttoptr (i32 28004328 to i32*), align 8, !insn.addr !4321
  %74 = inttoptr i32 %73 to i32*, !insn.addr !4322
  %75 = add i32 %3, -34, !insn.addr !4323
  %76 = inttoptr i32 %75 to i32*, !insn.addr !4323
  %77 = load i32, i32* %76, align 4, !insn.addr !4323
  %78 = add i32 %77, -1, !insn.addr !4323
  store i32 %78, i32* %76, align 4, !insn.addr !4323
  call void @llvm.trap()
  unreachable

dec_label_pc_100a7de:                             ; preds = %dec_label_pc_100a766
  %79 = and i32 %58, %9, !insn.addr !4324
  %80 = inttoptr i32 %1 to i8*, !insn.addr !4325
  %81 = inttoptr i32 %49 to i8*, !insn.addr !4325
  call void @__asm_rep_movsb_memcpy(i8* %81, i8* %80, i32 %79), !insn.addr !4325
  %82 = and i32 %11, -65536, !insn.addr !4326
  %83 = add i8 %39, -24
  %84 = zext i8 %83 to i32, !insn.addr !4327
  %85 = or i32 %82, %84, !insn.addr !4326
  %86 = or i32 %85, 59392, !insn.addr !4327
  ret i32 %86, !insn.addr !4328
}

define i32 @function_100a7ee() local_unnamed_addr {
dec_label_pc_100a7ee:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4329
}

define i32 @function_100a823() local_unnamed_addr {
dec_label_pc_100a823:
  %0 = call i32 @function_45417c2a(), !insn.addr !4330
  ret i32 %0, !insn.addr !4330
}

define i32 @function_100a835() local_unnamed_addr {
dec_label_pc_100a835:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4331
}

define i32 @function_100a874() local_unnamed_addr {
dec_label_pc_100a874:
  %0 = call i32 @function_455d667b(), !insn.addr !4332
  ret i32 %0, !insn.addr !4332
}

define i32 @function_100a88f() local_unnamed_addr {
dec_label_pc_100a88f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4333
}

define i32 @function_100a8d7() local_unnamed_addr {
dec_label_pc_100a8d7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4334
}

define i32 @function_100a8e1() local_unnamed_addr {
dec_label_pc_100a8e1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4335
}

define i32 @function_100a915() local_unnamed_addr {
dec_label_pc_100a915:
  %0 = call i32 @function_4a89671c(), !insn.addr !4336
  ret i32 %0, !insn.addr !4336
}

define i32 @function_100a952() local_unnamed_addr {
dec_label_pc_100a952:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %0, -16, !insn.addr !4337
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4337
  %8 = load i32, i32* %7, align 4, !insn.addr !4337
  %9 = add i32 %8, %4, !insn.addr !4337
  store i32 %9, i32* %7, align 4, !insn.addr !4337
  %10 = add i32 %4, %3, !insn.addr !4338
  %11 = inttoptr i32 %3 to i32*, !insn.addr !4338
  store i32 %10, i32* %11, align 4, !insn.addr !4338
  %12 = add i32 %4, 4, !insn.addr !4339
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4339
  %14 = load i32, i32* %13, align 4, !insn.addr !4339
  %15 = mul i32 %3, 4, !insn.addr !4340
  %16 = add i32 %15, 12, !insn.addr !4340
  %17 = udiv i32 %16, 4, !insn.addr !4341
  %18 = inttoptr i32 %14 to i8*, !insn.addr !4342
  call void @__asm_rep_movsd_memcpy(i8* %18, i8* bitcast (i8** @global_var_1014956 to i8*), i32 %17), !insn.addr !4342
  %19 = select i1 %5, i32 -4, i32 4, !insn.addr !4342
  %20 = mul i32 %19, %17, !insn.addr !4342
  %21 = select i1 %5, i32 -1, i32 1, !insn.addr !4343
  %22 = add i32 %20, %21, !insn.addr !4342
  %23 = add i32 %22, %14, !insn.addr !4343
  %24 = call i32 @unknown_d0001e26(), !insn.addr !4344
  store i32 %24, i32* @global_var_1014ff4, align 4, !insn.addr !4345
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4346
  %26 = load i32, i32* %25, align 4, !insn.addr !4346
  %27 = call i32 @unknown_ffb7c1(i32 %26), !insn.addr !4347
  %28 = load i32, i32* @global_var_1014ffd, align 4, !insn.addr !4348
  %29 = load i32, i32* inttoptr (i32 -1090434644 to i32*), align 4, !insn.addr !4349
  %30 = call i32 @unknown_6d007bfb(i32 %29), !insn.addr !4350
  %31 = load i32, i32* inttoptr (i32 100749300 to i32*), align 4, !insn.addr !4351
  %32 = mul i32 %31, 4, !insn.addr !4352
  %33 = add i32 %1, 21605389, !insn.addr !4352
  %34 = add i32 %33, %32, !insn.addr !4352
  %35 = inttoptr i32 %34 to i32*, !insn.addr !4352
  store i32 %30, i32* %35, align 4, !insn.addr !4352
  %factor = mul i32 %23, 2
  %36 = add nsw i32 %21, -1, !insn.addr !4353
  %37 = add i32 %36, %factor, !insn.addr !4354
  %38 = and i32 %30, 114, !insn.addr !4355
  %39 = or i32 %38, 141, !insn.addr !4355
  %40 = and i32 %30, -256, !insn.addr !4355
  %41 = or i32 %39, %40, !insn.addr !4356
  %42 = inttoptr i32 %41 to i8*, !insn.addr !4357
  %43 = load i8, i8* %42, align 1, !insn.addr !4357
  %44 = trunc i32 %39 to i8, !insn.addr !4357
  %45 = add i8 %43, %44, !insn.addr !4357
  store i8 %45, i8* %42, align 1, !insn.addr !4357
  %46 = add i32 %31, -1463904261, !insn.addr !4358
  %47 = add i32 %31, -1, !insn.addr !4359
  %48 = inttoptr i32 %47 to i32*, !insn.addr !4360
  %49 = load i32, i32* %48, align 4, !insn.addr !4360
  %50 = add i32 %49, %46, !insn.addr !4360
  store i32 %50, i32* %48, align 4, !insn.addr !4360
  %51 = inttoptr i32 %23 to i8*, !insn.addr !4361
  %52 = inttoptr i32 %37 to i8*, !insn.addr !4361
  call void @__asm_rep_movsd_memcpy(i8* %52, i8* %51, i32 %47), !insn.addr !4361
  %53 = inttoptr i32 %46 to i32*, !insn.addr !4362
  %54 = load i32, i32* %53, align 4, !insn.addr !4362
  %55 = add i32 %54, %46, !insn.addr !4362
  %56 = xor i32 %55, %54, !insn.addr !4362
  %57 = xor i32 %55, %46, !insn.addr !4362
  %58 = and i32 %56, %57, !insn.addr !4362
  %59 = icmp slt i32 %58, 0, !insn.addr !4362
  store i32 %55, i32* %53, align 4, !insn.addr !4362
  %60 = add i32 %31, -1463904257, !insn.addr !4363
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4363
  %62 = load i32, i32* %61, align 4, !insn.addr !4363
  %63 = call i32 @function_1002646(i32 %62), !insn.addr !4364
  %64 = icmp eq i1 %59, false, !insn.addr !4365
  br i1 %64, label %dec_label_pc_100aa2e, label %dec_label_pc_100a9ed, !insn.addr !4365

dec_label_pc_100a9ed:                             ; preds = %dec_label_pc_100a952
  %65 = load i32, i32* inttoptr (i32 -1946062869 to i32*), align 4, !insn.addr !4366
  %66 = call i32 @function_10149bc(i32 %65), !insn.addr !4367
  ret i32 %66, !insn.addr !4367

dec_label_pc_100aa2e:                             ; preds = %dec_label_pc_100a952
  %67 = inttoptr i32 %28 to i32*, !insn.addr !4368
  %68 = load i32, i32* @global_var_1014ff4, align 4, !insn.addr !4369
  %69 = add i32 %68, 4, !insn.addr !4370
  %70 = inttoptr i32 %69 to i32*, !insn.addr !4370
  %71 = add i32 %2, %0, !insn.addr !4371
  %72 = or i32 %71, -190733069, !insn.addr !4372
  %73 = xor i32 %68, ptrtoint (i64** @global_var_10148a8 to i32), !insn.addr !4373
  %74 = load i32, i32* @global_var_1014ff8, align 4, !insn.addr !4374
  %75 = add i32 %74, %46, !insn.addr !4374
  %76 = inttoptr i32 %75 to i32*, !insn.addr !4375
  store i32 %73, i32* %76, align 4, !insn.addr !4375
  %77 = add nsw i32 %72, -88, !insn.addr !4376
  %78 = inttoptr i32 %77 to i32*, !insn.addr !4376
  %79 = load i32, i32* %78, align 4, !insn.addr !4376
  %80 = inttoptr i32 %73 to i64*, !insn.addr !4377
  %81 = load i64, i64* %80, align 4, !insn.addr !4377
  %82 = call i32 @__asm_bound(i64 %81), !insn.addr !4377
  %83 = and i32 %73, -95, !insn.addr !4378
  %84 = add i32 %79, -1, !insn.addr !4379
  %85 = inttoptr i32 %83 to i8*, !insn.addr !4380
  %86 = load i8, i8* %85, align 1, !insn.addr !4380
  %87 = trunc i32 %83 to i8, !insn.addr !4380
  %88 = add i8 %86, %87, !insn.addr !4380
  store i8 %88, i8* %85, align 1, !insn.addr !4380
  %89 = add i32 %1, 42844609, !insn.addr !4381
  %90 = inttoptr i32 %84 to i8*, !insn.addr !4382
  call void @__asm_rep_movsd_memcpy(i8* %90, i8* bitcast (i8** @global_var_10148a4 to i8*), i32 %89), !insn.addr !4382
  call void @__asm_int(i32 243), !insn.addr !4383
  ret i32 %83, !insn.addr !4383
}

define i32 @function_100aa6b() local_unnamed_addr {
dec_label_pc_100aa6b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -1323828336, !insn.addr !4384
  ret i32 %1, !insn.addr !4385
}

define i32 @function_100aa72() local_unnamed_addr {
dec_label_pc_100aa72:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4386
}

define i32 @function_100aa78(i32 %arg1) local_unnamed_addr {
dec_label_pc_100aa78:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-6 = alloca i32, align 4
  %6 = add i32 %4, -74, !insn.addr !4387
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4387
  %8 = add i32 %3, 1535837249, !insn.addr !4388
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4388
  %10 = load i32, i32* %9, align 4, !insn.addr !4388
  %11 = add i32 %10, %3, !insn.addr !4388
  store i32 %11, i32* %9, align 4, !insn.addr !4388
  %12 = add i32 %1, -1, !insn.addr !4389
  %13 = add i32 %12, %4, !insn.addr !4390
  %14 = ptrtoint i32* %stack_var_-6 to i32, !insn.addr !4391
  %15 = add i32 %3, ptrtoint (i32* @global_var_1014f04 to i32), !insn.addr !4392
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4392
  %17 = load i32, i32* %16, align 4, !insn.addr !4392
  %18 = add i32 %17, %14, !insn.addr !4392
  store i32 %18, i32* %16, align 4, !insn.addr !4392
  %19 = add i32 %13, -115, !insn.addr !4393
  %20 = add i32 %19, %14, !insn.addr !4393
  %21 = inttoptr i32 %20 to i32*, !insn.addr !4393
  %22 = load i32, i32* %21, align 4, !insn.addr !4393
  %23 = and i32 %13, 114, !insn.addr !4394
  %24 = or i32 %23, 141, !insn.addr !4394
  %25 = and i32 %13, -256, !insn.addr !4394
  %26 = or i32 %24, %25, !insn.addr !4395
  %27 = inttoptr i32 %26 to i8*, !insn.addr !4396
  %28 = load i8, i8* %27, align 1, !insn.addr !4396
  %29 = trunc i32 %24 to i8, !insn.addr !4396
  %30 = add i8 %28, %29, !insn.addr !4396
  store i8 %30, i8* %27, align 1, !insn.addr !4396
  call void @__asm_out.6(i32 119, i8 %29), !insn.addr !4397
  %31 = udiv i32 %3, 4, !insn.addr !4398
  %32 = trunc i32 %22 to i16, !insn.addr !4399
  call void @__asm_out(i16 %32, i8 %29), !insn.addr !4399
  %33 = add i32 %2, 1322066888, !insn.addr !4400
  %34 = inttoptr i32 %33 to i8*, !insn.addr !4400
  %35 = load i8, i8* %34, align 1, !insn.addr !4400
  %36 = trunc i32 %31 to i8, !insn.addr !4400
  %37 = or i8 %35, %36, !insn.addr !4400
  store i8 %37, i8* %34, align 1, !insn.addr !4400
  %38 = load i32, i32* @global_var_1014f4c, align 4, !insn.addr !4401
  %39 = call i32 @unknown_6a007bff(i32 %38), !insn.addr !4402
  %40 = inttoptr i32 %0 to i32*, !insn.addr !4403
  store i32 %39, i32* %40, align 4, !insn.addr !4403
  %41 = inttoptr i32 %31 to i32*, !insn.addr !4404
  %42 = load i32, i32* %41, align 4, !insn.addr !4404
  %43 = add i32 %42, %39, !insn.addr !4404
  store i32 %43, i32* %41, align 4, !insn.addr !4404
  %44 = select i1 %5, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_10148b8 to i32), i32 -1946163761) to i32*), i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_10148b8 to i32), i32 -1946163759) to i32*), !insn.addr !4405
  %45 = load i32, i32* %44, align 4, !insn.addr !4405
  %46 = and i32 %45, %1, !insn.addr !4405
  store i32 %46, i32* %44, align 4, !insn.addr !4405
  %47 = xor i32 %39, -1006547196, !insn.addr !4406
  store i32 %47, i32* inttoptr (i32 -268349620 to i32*), align 4, !insn.addr !4407
  %48 = trunc i32 %2 to i8
  %49 = trunc i32 %47 to i8, !insn.addr !4408
  %50 = add i8 %49, %48, !insn.addr !4408
  %51 = inttoptr i32 %2 to i8*, !insn.addr !4408
  store i8 %50, i8* %51, align 1, !insn.addr !4408
  %52 = add i32 %2, -117, !insn.addr !4409
  %53 = inttoptr i32 %52 to i32*, !insn.addr !4409
  %54 = load i32, i32* %53, align 4, !insn.addr !4409
  %55 = trunc i32 %54 to i8, !insn.addr !4410
  %56 = add i32 %47, -91, !insn.addr !4410
  %57 = inttoptr i32 %56 to i8*, !insn.addr !4410
  %58 = load i8, i8* %57, align 1, !insn.addr !4410
  %59 = add i8 %58, %55, !insn.addr !4410
  %60 = zext i8 %59 to i32, !insn.addr !4410
  %61 = and i32 %54, -256, !insn.addr !4410
  %62 = or i32 %61, %60, !insn.addr !4410
  %63 = mul i32 %47, 257
  %64 = and i32 %63, 65280, !insn.addr !4411
  %65 = and i32 %47, -65281, !insn.addr !4411
  %66 = or i32 %64, %65, !insn.addr !4411
  %67 = inttoptr i32 %62 to i32*, !insn.addr !4412
  %68 = and i32 %47, -256, !insn.addr !4413
  %69 = or i32 %68, 79, !insn.addr !4413
  %70 = inttoptr i32 %66 to i32*, !insn.addr !4414
  %71 = load i32, i32* %70, align 4, !insn.addr !4414
  %72 = add i32 %71, %69, !insn.addr !4414
  store i32 %72, i32* %70, align 4, !insn.addr !4414
  ret i32 %69, !insn.addr !4415
}

define i32 @function_100ab09(i32 %arg1) local_unnamed_addr {
dec_label_pc_100ab09:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100ab25() local_unnamed_addr {
dec_label_pc_100ab25:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100ab26() local_unnamed_addr {
dec_label_pc_100ab26:
  %0 = call i32 @function_100ab60(), !insn.addr !4416
  ret i32 %0, !insn.addr !4416
}

define i32 @function_100ab31(i32 %arg1) local_unnamed_addr {
dec_label_pc_100ab31:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 3, !insn.addr !4417
  %2 = and i32 %1, 255, !insn.addr !4417
  %3 = and i32 %0, -256, !insn.addr !4417
  %4 = or i32 %2, %3, !insn.addr !4417
  ret i32 %4, !insn.addr !4418
}

define i32 @function_100ab60() local_unnamed_addr {
dec_label_pc_100ab60:
  %0 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_int(i32 139), !insn.addr !4419
  ret i32 %0, !insn.addr !4420
}

define i32 @function_100ab65(i32 %arg1) local_unnamed_addr {
dec_label_pc_100ab65:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = zext i1 %6 to i32, !insn.addr !4421
  %8 = mul i32 %1, 4, !insn.addr !4421
  %9 = lshr i32 %1, 31
  %10 = mul i32 %7, 2, !insn.addr !4421
  %11 = or i32 %9, %8
  %12 = or i32 %11, %10
  %13 = inttoptr i32 %1 to i32*, !insn.addr !4421
  store i32 %12, i32* %13, align 4, !insn.addr !4421
  %14 = mul i32 %4, 4, !insn.addr !4422
  %15 = add i32 %0, -795521012, !insn.addr !4422
  %16 = add i32 %15, %14, !insn.addr !4422
  %17 = inttoptr i32 %16 to i32*, !insn.addr !4422
  %18 = load i32, i32* %17, align 4, !insn.addr !4422
  %19 = add i32 %18, %3, !insn.addr !4422
  %20 = add i32 %4, -1, !insn.addr !4423
  %21 = inttoptr i32 %20 to i32*, !insn.addr !4423
  %22 = load i32, i32* %21, align 4, !insn.addr !4423
  %23 = sext i32 %22 to i64, !insn.addr !4423
  %24 = mul nsw i64 %23, 21, !insn.addr !4423
  %25 = mul i64 %23, 90194313216
  %26 = sdiv i64 %25, 4294967296, !insn.addr !4423
  %27 = icmp ne i64 %24, %26, !insn.addr !4423
  %28 = inttoptr i32 %19 to i8*, !insn.addr !4424
  %29 = load i8, i8* %28, align 1, !insn.addr !4424
  %30 = mul i8 %29, 2, !insn.addr !4424
  %31 = zext i1 %27 to i8, !insn.addr !4424
  %32 = or i8 %30, %31, !insn.addr !4424
  %33 = trunc i32 %4 to i8, !insn.addr !4425
  %34 = add i8 %32, %33, !insn.addr !4425
  %35 = icmp slt i8 %34, 0, !insn.addr !4425
  store i8 %34, i8* %28, align 1, !insn.addr !4425
  %36 = icmp eq i1 %35, false, !insn.addr !4426
  br i1 %36, label %37, label %dec_label_pc_100ab7a, !insn.addr !4426

; <label>:37:                                     ; preds = %dec_label_pc_100ab65
  %38 = call i32 @function_100ab25(), !insn.addr !4426
  br label %dec_label_pc_100ab7a, !insn.addr !4426

dec_label_pc_100ab7a:                             ; preds = %37, %dec_label_pc_100ab65
  %39 = bitcast i32* %ebx to i8*
  %40 = load i8, i8* %39, align 4, !insn.addr !4427
  %41 = udiv i32 %19, 256, !insn.addr !4427
  %42 = trunc i32 %41 to i8, !insn.addr !4427
  %43 = or i8 %40, %42, !insn.addr !4427
  %44 = load i32, i32* %ebx, align 4, !insn.addr !4427
  %45 = inttoptr i32 %44 to i8*, !insn.addr !4427
  store i8 %43, i8* %45, align 1, !insn.addr !4427
  %46 = inttoptr i32 %19 to i32*, !insn.addr !4428
  %47 = load i32, i32* %46, align 4, !insn.addr !4428
  %48 = add i32 %0, 1, !insn.addr !4429
  %49 = add i32 %47, 98, !insn.addr !4430
  %50 = and i32 %49, 255, !insn.addr !4430
  %51 = and i32 %47, -256, !insn.addr !4430
  %52 = or i32 %50, %51, !insn.addr !4430
  call void @__asm_into(i32 %5), !insn.addr !4431
  %53 = inttoptr i32 %52 to i8*, !insn.addr !4432
  %54 = load i8, i8* %53, align 1, !insn.addr !4432
  %55 = trunc i32 %49 to i8, !insn.addr !4432
  %56 = or i8 %54, %55, !insn.addr !4432
  store i8 %56, i8* %53, align 1, !insn.addr !4432
  %57 = add i32 %1, 8, !insn.addr !4433
  %58 = inttoptr i32 %57 to i32*, !insn.addr !4433
  %59 = load i32, i32* %58, align 4, !insn.addr !4433
  %60 = icmp slt i32 %59, %2, !insn.addr !4434
  %spec.select = select i1 %60, i32 %59, i32 %48
  %61 = trunc i32 %spec.select to i8, !insn.addr !4435
  %62 = add i8 %61, -63, !insn.addr !4435
  %63 = icmp eq i8 %62, 0, !insn.addr !4435
  %64 = icmp ne i32 %spec.select, 1, !insn.addr !4436
  %65 = icmp eq i1 %64, %63, !insn.addr !4436
  br i1 %65, label %dec_label_pc_100aba1, label %dec_label_pc_100ab9f, !insn.addr !4436

dec_label_pc_100ab9f:                             ; preds = %dec_label_pc_100ab7a
  %66 = and i32 %spec.select, -256, !insn.addr !4435
  %67 = zext i8 %62 to i32, !insn.addr !4435
  %68 = or i32 %66, %67, !insn.addr !4435
  ret i32 %68, !insn.addr !4437

dec_label_pc_100aba1:                             ; preds = %dec_label_pc_100ab7a
  %spec.select1 = select i1 %60, i32 %1, i32 %2
  %69 = add i32 %2, 3, !insn.addr !4438
  %70 = inttoptr i32 %69 to i32*, !insn.addr !4438
  %71 = load i32, i32* %70, align 4, !insn.addr !4438
  %72 = sub i32 0, %71
  %73 = sub i32 %72, 1
  %74 = add i32 %spec.select1, %73, !insn.addr !4439
  %75 = sub i32 %59, %2
  %spec.select2 = select i1 %60, i32 %48, i32 %75
  %76 = call i32 @unknown_458e73d1(), !insn.addr !4440
  %77 = add i32 %74, 9, !insn.addr !4441
  %78 = inttoptr i32 %77 to i32*, !insn.addr !4441
  store i32 0, i32* %78, align 4, !insn.addr !4441
  %79 = add i32 %spec.select2, 8, !insn.addr !4442
  %80 = inttoptr i32 %79 to i32*, !insn.addr !4442
  %81 = load i32, i32* %80, align 4, !insn.addr !4442
  %82 = inttoptr i32 %74 to i32*, !insn.addr !4443
  %83 = load i32, i32* %82, align 4, !insn.addr !4443
  %84 = trunc i32 %83 to i8, !insn.addr !4444
  %85 = load i8, i8* inttoptr (i32 -800162860 to i8*), align 4, !insn.addr !4444
  %86 = add i8 %85, %84, !insn.addr !4444
  %87 = zext i8 %86 to i32, !insn.addr !4444
  %88 = and i32 %83, -256, !insn.addr !4444
  %89 = or i32 %88, %87, !insn.addr !4444
  %90 = add i32 %74, 10, !insn.addr !4445
  %91 = inttoptr i32 %90 to i32*, !insn.addr !4445
  %92 = load i32, i32* %91, align 4, !insn.addr !4445
  %93 = sub i32 %92, %89, !insn.addr !4445
  store i32 %93, i32* %91, align 4, !insn.addr !4445
  ret i32 %81, !insn.addr !4446
}

define i32 @function_100acce() local_unnamed_addr {
dec_label_pc_100acce:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4447
}

define i32 @function_100ad14() local_unnamed_addr {
dec_label_pc_100ad14:
  %0 = call i32 @function_b8a6a01b(), !insn.addr !4448
  ret i32 %0, !insn.addr !4448
}

define i32 @function_100ad51() local_unnamed_addr {
dec_label_pc_100ad51:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-17482 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %5 = trunc i32 %4 to i8, !insn.addr !4449
  call void @__asm_out.6(i32 4, i8 %5), !insn.addr !4449
  %6 = add i32 %0, 4, !insn.addr !4450
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4450
  %8 = load i32, i32* %7, align 4, !insn.addr !4450
  %9 = load i32, i32* inttoptr (i32 -2147397656 to i32*), align 8, !insn.addr !4451
  %10 = add i32 %9, 4, !insn.addr !4452
  %11 = inttoptr i32 %10 to i32*, !insn.addr !4452
  %12 = load i32, i32* %11, align 4, !insn.addr !4452
  %13 = mul i32 %0, 2, !insn.addr !4453
  %14 = add i32 %8, %13, !insn.addr !4453
  %15 = mul i32 %14, 4, !insn.addr !4454
  %16 = add i32 %15, %2, !insn.addr !4454
  %17 = inttoptr i32 %16 to i8*, !insn.addr !4454
  %18 = load i8, i8* %17, align 1, !insn.addr !4454
  %19 = udiv i32 %2, 256, !insn.addr !4454
  %20 = trunc i32 %19 to i8, !insn.addr !4454
  %21 = add i8 %18, %20, !insn.addr !4454
  store i8 %21, i8* %17, align 1, !insn.addr !4454
  %22 = add i32 %1, -1510800663, !insn.addr !4455
  %23 = inttoptr i32 %22 to i32*, !insn.addr !4455
  %24 = load i32, i32* %23, align 4, !insn.addr !4455
  %25 = mul i32 %24, 2048, !insn.addr !4455
  store i32 %25, i32* %23, align 4, !insn.addr !4455
  %26 = and i32 %24, 2097152
  %27 = icmp ne i32 %26, 0, !insn.addr !4455
  %28 = udiv i32 %3, 256, !insn.addr !4456
  %29 = trunc i32 %28 to i8, !insn.addr !4456
  %.neg1 = sext i1 %27 to i8
  %.neg2 = sub i8 %20, %29, !insn.addr !4456
  %30 = add i8 %.neg2, %.neg1, !insn.addr !4456
  %31 = icmp eq i8 %30, 0, !insn.addr !4456
  %32 = add i32 %14, -1, !insn.addr !4457
  %33 = icmp ne i32 %32, 0, !insn.addr !4457
  %34 = icmp eq i1 %33, %31, !insn.addr !4457
  br i1 %34, label %dec_label_pc_100ad7d, label %dec_label_pc_100ad7a, !insn.addr !4457

dec_label_pc_100ad7a:                             ; preds = %dec_label_pc_100ad51
  ret i32 %9, !insn.addr !4457

dec_label_pc_100ad7d:                             ; preds = %dec_label_pc_100ad51
  %35 = and i32 %2, -65281, !insn.addr !4456
  %36 = zext i8 %30 to i32, !insn.addr !4456
  %37 = mul i32 %36, 256, !insn.addr !4456
  %38 = or i32 %37, %35, !insn.addr !4456
  %39 = inttoptr i32 %32 to i32*, !insn.addr !4458
  %40 = load i32, i32* %39, align 4, !insn.addr !4458
  %41 = add i32 %40, %9, !insn.addr !4458
  store i32 %41, i32* %39, align 4, !insn.addr !4458
  %42 = inttoptr i32 %0 to i8*, !insn.addr !4459
  %43 = inttoptr i32 %12 to i8*, !insn.addr !4459
  call void @__asm_rep_movsb_memcpy(i8* %43, i8* %42, i32 %32), !insn.addr !4459
  %44 = add i32 %3, -39, !insn.addr !4460
  %45 = inttoptr i32 %44 to i32*, !insn.addr !4460
  %46 = load i32, i32* %45, align 4, !insn.addr !4460
  %47 = add i32 %46, 905969509, !insn.addr !4460
  store i32 %47, i32* %45, align 4, !insn.addr !4460
  %48 = trunc i32 %3 to i16, !insn.addr !4461
  %49 = call i8 @__asm_in.3(i16 %48), !insn.addr !4461
  %50 = sext i8 %49 to i32, !insn.addr !4461
  %51 = and i32 %9, -256, !insn.addr !4461
  %52 = or i32 %51, %50, !insn.addr !4461
  %53 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4462
  %54 = trunc i32 %53 to i8, !insn.addr !4463
  call void @__asm_out.6(i32 232, i8 %54), !insn.addr !4463
  %55 = call i32 @function_1007c93(), !insn.addr !4464
  store i32 %55, i32* inttoptr (i32 32133100 to i32*), align 4, !insn.addr !4465
  %56 = inttoptr i32 %55 to i32*, !insn.addr !4466
  %57 = load i32, i32* %56, align 4, !insn.addr !4466
  store i32 %57, i32* %stack_var_-17482, align 4, !insn.addr !4466
  %58 = call i32 @function_1007bc1(i32 %57), !insn.addr !4467
  %59 = load i32, i32* @global_var_1014fec, align 4, !insn.addr !4468
  %60 = inttoptr i32 %59 to i32*, !insn.addr !4469
  store i32 %38, i32* %60, align 4, !insn.addr !4469
  %61 = load i32, i32* inttoptr (i32 865357800 to i32*), align 8, !insn.addr !4470
  %62 = add i32 %52, -63, !insn.addr !4471
  %63 = inttoptr i32 %62 to i32*, !insn.addr !4471
  %64 = load i32, i32* %63, align 4, !insn.addr !4471
  %65 = load i32, i32* @global_var_1014f7e, align 4, !insn.addr !4472
  %66 = inttoptr i32 %65 to i32*, !insn.addr !4473
  store i32 %61, i32* %66, align 4, !insn.addr !4473
  %67 = load i8*, i8** @global_var_1014fe8, align 4, !insn.addr !4474
  %68 = ptrtoint i8* %67 to i32, !insn.addr !4474
  %69 = bitcast i8* %67 to i32*
  %70 = load i32, i32* %69, align 4, !insn.addr !4475
  %71 = add i32 %70, 4, !insn.addr !4476
  %72 = inttoptr i32 %71 to i32*, !insn.addr !4476
  %73 = load i32, i32* %72, align 4, !insn.addr !4476
  %74 = inttoptr i32 %73 to i32*, !insn.addr !4477
  %75 = load i32, i32* %74, align 4, !insn.addr !4477
  %76 = add i32 %75, %68, !insn.addr !4477
  store i32 %76, i32* %74, align 4, !insn.addr !4477
  %77 = icmp eq i32 %73, 1, !insn.addr !4478
  br i1 %77, label %dec_label_pc_100add9, label %dec_label_pc_100ade5, !insn.addr !4478

dec_label_pc_100add9:                             ; preds = %dec_label_pc_100ad7d
  %78 = load i8, i8* %67, align 1, !insn.addr !4479
  %79 = trunc i32 %68 to i8, !insn.addr !4479
  %80 = add i8 %78, %79, !insn.addr !4479
  store i8 %80, i8* %67, align 1, !insn.addr !4479
  %.tr = trunc i32 %68 to i16
  %81 = mul i16 %.tr, 2, !insn.addr !4480
  %82 = sext i16 %81 to i32, !insn.addr !4480
  ret i32 %82, !insn.addr !4480

dec_label_pc_100ade5:                             ; preds = %dec_label_pc_100ad7d
  %83 = load i32, i32* %69, align 4, !insn.addr !4481
  %84 = add i32 %83, -1, !insn.addr !4482
  %85 = icmp eq i32 %84, 0, !insn.addr !4482
  %86 = add i32 %68, -1, !insn.addr !4483
  %87 = icmp ne i32 %86, 0, !insn.addr !4483
  %88 = icmp eq i1 %87, %85, !insn.addr !4483
  br i1 %88, label %dec_label_pc_100aded, label %dec_label_pc_100adea, !insn.addr !4483

dec_label_pc_100adea:                             ; preds = %dec_label_pc_100ade5
  %89 = inttoptr i32 %70 to i8*, !insn.addr !4484
  %90 = inttoptr i32 %84 to i8*, !insn.addr !4484
  call void @__asm_rep_movsb_memcpy(i8* %90, i8* %89, i32 %86), !insn.addr !4484
  ret i32 %68, !insn.addr !4484

dec_label_pc_100aded:                             ; preds = %dec_label_pc_100ade5
  %91 = icmp ugt i32 %46, -905969510, !insn.addr !4460
  %92 = ptrtoint i32* %stack_var_-17482 to i32, !insn.addr !4466
  %.neg3 = sext i1 %91 to i32
  %93 = trunc i32 %64 to i16, !insn.addr !4485
  %94 = call i8 @__asm_in.3(i16 %93), !insn.addr !4485
  %95 = sext i8 %94 to i32, !insn.addr !4485
  %96 = and i32 %68, -256, !insn.addr !4485
  %97 = or i32 %96, %95, !insn.addr !4485
  %98 = inttoptr i32 %86 to i32*, !insn.addr !4486
  %99 = load i32, i32* %98, align 4, !insn.addr !4486
  %100 = add i32 %97, %99, !insn.addr !4486
  store i32 %100, i32* %98, align 4, !insn.addr !4486
  %.neg5 = add i32 %92, -4, !insn.addr !4487
  %101 = add i32 %.neg5, %.neg3, !insn.addr !4487
  %102 = sub i32 %101, %52, !insn.addr !4488
  %103 = inttoptr i32 %102 to i16*, !insn.addr !4488
  %104 = call i32 @unknown_7e007bc1(), !insn.addr !4489
  ret i32 %104, !insn.addr !4489
}

define i32 @function_100aeaa() local_unnamed_addr {
dec_label_pc_100aeaa:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4490
}

define i32 @function_100aec7() local_unnamed_addr {
dec_label_pc_100aec7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4491
}

define i32 @function_100aed9() local_unnamed_addr {
dec_label_pc_100aed9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100aedd(i32 %arg1) local_unnamed_addr {
dec_label_pc_100aedd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4492
}

define i32 @function_100aefe() local_unnamed_addr {
dec_label_pc_100aefe:
  %0 = call i32 @function_8ca6a263(), !insn.addr !4493
  ret i32 %0, !insn.addr !4493
}

define i32 @function_100af44() local_unnamed_addr {
dec_label_pc_100af44:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = trunc i32 %3 to i8, !insn.addr !4494
  %5 = icmp ugt i8 %4, 114, !insn.addr !4494
  %6 = add i32 %1, 210, !insn.addr !4495
  %7 = inttoptr i32 %6 to i8*, !insn.addr !4495
  %8 = load i8, i8* %7, align 1, !insn.addr !4495
  %9 = trunc i32 %2 to i8, !insn.addr !4495
  %10 = zext i1 %5 to i8, !insn.addr !4495
  %11 = add i8 %8, %9, !insn.addr !4495
  %12 = add i8 %11, %10, !insn.addr !4495
  store i8 %12, i8* %7, align 1, !insn.addr !4495
  %13 = icmp ult i32 %2, 4, !insn.addr !4496
  %14 = call i32 @function_100aed9(), !insn.addr !4497
  br i1 %13, label %dec_label_pc_100af5b, label %dec_label_pc_100af58, !insn.addr !4498

dec_label_pc_100af58:                             ; preds = %dec_label_pc_100af44
  %15 = add i32 %1, -2, !insn.addr !4499
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4499
  store i32 10, i32* %16, align 4, !insn.addr !4499
  ret i32 %14, !insn.addr !4499

dec_label_pc_100af5b:                             ; preds = %dec_label_pc_100af44
  %17 = bitcast i32* %esi to i8*
  %18 = load i8, i8* %17, align 4, !insn.addr !4500
  %19 = inttoptr i32 %0 to i8*, !insn.addr !4500
  store i8 %18, i8* %19, align 1, !insn.addr !4500
  ret i32 %14, !insn.addr !4501
}

define i32 @function_100af7b() local_unnamed_addr {
dec_label_pc_100af7b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 21996573, !insn.addr !4502
  %2 = inttoptr i32 %1 to i32*, !insn.addr !4502
  %3 = load i32, i32* %2, align 4, !insn.addr !4502
  %4 = add i32 %3, -1, !insn.addr !4502
  store i32 %4, i32* %2, align 4, !insn.addr !4502
  %5 = call i32 @__asm_int3(), !insn.addr !4503
  ret i32 %5, !insn.addr !4504
}

define i32 @function_100afcc() local_unnamed_addr {
dec_label_pc_100afcc:
  %0 = call i32 @function_29f2a2d3(), !insn.addr !4505
  ret i32 %0, !insn.addr !4505
}

define i32 @function_100afde() local_unnamed_addr {
dec_label_pc_100afde:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 232, !insn.addr !4506
  %2 = and i32 %1, 255, !insn.addr !4506
  %3 = and i32 %0, -256, !insn.addr !4506
  %4 = or i32 %2, %3, !insn.addr !4506
  ret i32 %4, !insn.addr !4507
}

define i32 @function_100afe9(i32 %arg1) local_unnamed_addr {
dec_label_pc_100afe9:
  %eax.1.reg2mem = alloca i32, !insn.addr !4508
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = trunc i32 %5 to i8, !insn.addr !4509
  %8 = add i8 %7, 38, !insn.addr !4509
  %9 = icmp slt i8 %8, 1, !insn.addr !4510
  br i1 %9, label %dec_label_pc_100b03e, label %dec_label_pc_100afef, !insn.addr !4510

dec_label_pc_100afef:                             ; preds = %dec_label_pc_100afe9
  %10 = and i32 %5, -256, !insn.addr !4509
  %11 = add i8 %7, -21, !insn.addr !4511
  %12 = add i8 %7, -22, !insn.addr !4511
  %13 = xor i8 %12, %11, !insn.addr !4511
  %14 = sub i8 21, %7, !insn.addr !4511
  %15 = and i8 %13, %14, !insn.addr !4511
  %16 = icmp slt i8 %15, 0, !insn.addr !4511
  %17 = zext i8 %12 to i32, !insn.addr !4511
  %18 = or i32 %10, %17, !insn.addr !4511
  %not. = icmp ne i1 %16, true
  %19 = sext i1 %not. to i32
  %spec.select2 = select i1 %16, i32 %18, i32 %3
  %spec.select1 = add i32 %2, 21979143
  %20 = add i32 %spec.select1, %19, !insn.addr !4512
  %21 = inttoptr i32 %20 to i32*, !insn.addr !4512
  %22 = load i32, i32* %21, align 4, !insn.addr !4512
  %23 = add i32 %22, -1, !insn.addr !4512
  store i32 %23, i32* %21, align 4, !insn.addr !4512
  %24 = trunc i32 %spec.select2 to i8, !insn.addr !4513
  %25 = add i8 %24, -95, !insn.addr !4513
  %26 = xor i8 %25, %24, !insn.addr !4513
  %27 = add i8 %24, 33, !insn.addr !4513
  %28 = and i8 %26, %27, !insn.addr !4513
  %29 = icmp slt i8 %28, 0, !insn.addr !4513
  %30 = icmp slt i8 %25, 0, !insn.addr !4513
  %31 = zext i8 %25 to i32, !insn.addr !4513
  %32 = and i32 %spec.select2, -256, !insn.addr !4513
  %33 = or i32 %32, %31, !insn.addr !4513
  %34 = icmp eq i1 %30, %29, !insn.addr !4514
  store i32 %33, i32* %eax.1.reg2mem, !insn.addr !4514
  br i1 %34, label %dec_label_pc_100b008, label %dec_label_pc_100b057, !insn.addr !4514

dec_label_pc_100b008:                             ; preds = %dec_label_pc_100afef
  %35 = add i32 %4, %1, !insn.addr !4515
  %36 = add i32 %arg1, 1317733488, !insn.addr !4516
  %37 = inttoptr i32 %36 to i32*, !insn.addr !4516
  %38 = load i32, i32* %37, align 4, !insn.addr !4516
  %39 = add i32 %38, %35, !insn.addr !4516
  store i32 %39, i32* %37, align 4, !insn.addr !4516
  %40 = bitcast i32* %esi to i8*
  %41 = load i8, i8* %40, align 4, !insn.addr !4517
  %42 = inttoptr i32 %4 to i8*, !insn.addr !4517
  store i8 %41, i8* %42, align 1, !insn.addr !4517
  %43 = load i32, i32* %esi, align 4, !insn.addr !4517
  %44 = select i1 %6, i32 -1, i32 1, !insn.addr !4517
  %45 = add i32 %43, %44, !insn.addr !4517
  store i32 %45, i32* %esi, align 4, !insn.addr !4517
  %46 = add i32 %4, -1, !insn.addr !4517
  %47 = add i32 %46, %44, !insn.addr !4518
  %48 = icmp slt i32 %47, 0, !insn.addr !4518
  %49 = inttoptr i32 %35 to i8*, !insn.addr !4519
  store i8 -117, i8* %49, align 1, !insn.addr !4519
  br i1 %48, label %dec_label_pc_100b01c, label %dec_label_pc_100b018, !insn.addr !4520

dec_label_pc_100b018:                             ; preds = %dec_label_pc_100b008
  %50 = add i32 %spec.select2, 66
  %51 = and i32 %50, 255, !insn.addr !4521
  %52 = or i32 %51, %32, !insn.addr !4521
  ret i32 %52, !insn.addr !4520

dec_label_pc_100b01c:                             ; preds = %dec_label_pc_100b008
  %spec.select = select i1 %16, i32 %3, i32 %5
  %53 = load i32, i32* %esi, align 4, !insn.addr !4522
  %54 = add i32 %53, 1203882713, !insn.addr !4522
  %55 = inttoptr i32 %54 to i8*, !insn.addr !4522
  %56 = load i8, i8* %55, align 1, !insn.addr !4522
  %57 = udiv i32 %spec.select, 256, !insn.addr !4522
  %58 = trunc i32 %57 to i8, !insn.addr !4522
  %59 = add i8 %56, %58, !insn.addr !4522
  store i8 %59, i8* %55, align 1, !insn.addr !4522
  %60 = call i32 @function_8ca6a329(), !insn.addr !4523
  ret i32 %60, !insn.addr !4523

dec_label_pc_100b03e:                             ; preds = %dec_label_pc_100afe9
  %61 = call i32 @unknown_7900bbd4(i32 %0), !insn.addr !4524
  %62 = load i32, i32* @global_var_1014fac, align 4, !insn.addr !4525
  %63 = call i32 @function_100361a(i32 %62), !insn.addr !4526
  %64 = call i32 @__asm_int3(), !insn.addr !4527
  store i32 %64, i32* %eax.1.reg2mem, !insn.addr !4527
  br label %dec_label_pc_100b057, !insn.addr !4527

dec_label_pc_100b057:                             ; preds = %dec_label_pc_100afef, %dec_label_pc_100b03e
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !4528
}

define i32 @function_100b05b(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b05b:
  %eax.0.reg2mem = alloca i32, !insn.addr !4529
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__asm_hlt(), !insn.addr !4529
  %2 = sub i32 0, %0
  %3 = and i32 %0, %2, !insn.addr !4530
  %4 = icmp slt i32 %3, 0, !insn.addr !4530
  store i32 %1, i32* %eax.0.reg2mem, !insn.addr !4531
  br i1 %4, label %5, label %dec_label_pc_100b063, !insn.addr !4531

; <label>:5:                                      ; preds = %dec_label_pc_100b05b
  %6 = call i32 @function_100afe9(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4531
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !4531
  br label %dec_label_pc_100b063, !insn.addr !4531

dec_label_pc_100b063:                             ; preds = %5, %dec_label_pc_100b05b
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4532
}

define i32 @function_100b064() local_unnamed_addr {
dec_label_pc_100b064:
  %0 = load i32, i32* @global_var_1014fac, align 4, !insn.addr !4533
  %1 = inttoptr i32 %0 to i32*, !insn.addr !4534
  %2 = load i32, i32* inttoptr (i32 -1038921820 to i32*), align 4, !insn.addr !4535
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4536
  %4 = load i32, i32* %3, align 4, !insn.addr !4536
  %5 = add i32 %4, 4, !insn.addr !4537
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4537
  %7 = load i32, i32* %6, align 4, !insn.addr !4537
  %8 = call i32 @unknown_ed7bfb(i32 %7), !insn.addr !4538
  %9 = load i32, i32* @global_var_1014fac, align 4, !insn.addr !4539
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4540
  store i32 %8, i32* %10, align 4, !insn.addr !4540
  %11 = call i32 @function_8c9ca3a6(), !insn.addr !4541
  ret i32 %11, !insn.addr !4541
}

define x86_fp80 @function_100b0a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b0a4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_6()
  %2 = add i32 %0, 2045969377, !insn.addr !4542
  %3 = inttoptr i32 %2 to double*, !insn.addr !4542
  %4 = load double, double* %3, align 4, !insn.addr !4542
  %5 = fpext double %4 to x86_fp80, !insn.addr !4542
  %6 = fadd x86_fp80 %1, %5, !insn.addr !4542
  ret x86_fp80 %6, !insn.addr !4543
}

define i32 @function_100b0b6() local_unnamed_addr {
dec_label_pc_100b0b6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4544
}

define i32 @function_100b0bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100b0bc:
  ret i32 %arg7, !insn.addr !4545
}

define i32 @function_100b0cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b0cc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4546
}

define i32 @function_100b0e7(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100b0e7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %2, 210568312, !insn.addr !4547
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4547
  %9 = load i32, i32* %8, align 4, !insn.addr !4547
  %10 = add i32 %9, %4, !insn.addr !4547
  store i32 %10, i32* %8, align 4, !insn.addr !4547
  %11 = mul i32 %5, 2, !insn.addr !4548
  %12 = and i32 %5, 255, !insn.addr !4549
  %13 = add i32 %12, %2, !insn.addr !4549
  %14 = inttoptr i32 %13 to i8*, !insn.addr !4549
  %15 = load i8, i8* %14, align 1, !insn.addr !4549
  %16 = zext i8 %15 to i32, !insn.addr !4549
  %17 = and i32 %5, -256, !insn.addr !4549
  %18 = or i32 %17, %16, !insn.addr !4549
  %19 = add i32 %2, 48873921, !insn.addr !4550
  %20 = inttoptr i32 %19 to i8*, !insn.addr !4550
  %21 = load i8, i8* %20, align 1, !insn.addr !4550
  %22 = trunc i32 %11 to i8, !insn.addr !4550
  %23 = add i8 %21, %22, !insn.addr !4550
  store i8 %23, i8* %20, align 1, !insn.addr !4550
  %24 = inttoptr i32 %1 to i8*, !insn.addr !4551
  %25 = inttoptr i32 %0 to i8*, !insn.addr !4551
  call void @__asm_rep_movsd_memcpy(i8* %25, i8* %24, i32 %11), !insn.addr !4551
  %26 = select i1 %6, i32 -4, i32 4, !insn.addr !4551
  %27 = mul i32 %26, %11, !insn.addr !4551
  %28 = add i32 %27, %0, !insn.addr !4551
  %29 = and i32 %16, 3, !insn.addr !4552
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4553
  %31 = load i32, i32* %30, align 4, !insn.addr !4553
  %32 = add i32 %31, %18, !insn.addr !4553
  store i32 %32, i32* %30, align 4, !insn.addr !4553
  %33 = call i32 @unknown_6007bd1(), !insn.addr !4554
  %34 = call i32 @function_1007c26(), !insn.addr !4555
  %35 = trunc i32 %34 to i8, !insn.addr !4556
  store i8 %35, i8* @global_var_1014fa8, align 1, !insn.addr !4556
  %36 = inttoptr i32 %34 to i32*, !insn.addr !4557
  %37 = load i32, i32* %36, align 4, !insn.addr !4557
  %38 = call i32 @unknown_3884c1(i32 %37), !insn.addr !4558
  %39 = add i32 %28, %26, !insn.addr !4559
  %40 = load i32, i32* %30, align 4, !insn.addr !4560
  %41 = add i32 %40, %38, !insn.addr !4560
  store i32 %41, i32* %30, align 4, !insn.addr !4560
  %42 = call i32 @unknown_ffffffec(), !insn.addr !4561
  %43 = add i32 %42, 232, !insn.addr !4562
  %44 = and i32 %43, 255, !insn.addr !4562
  %45 = and i32 %42, -256, !insn.addr !4562
  %46 = or i32 %44, %45, !insn.addr !4562
  store i32 %29, i32* inttoptr (i32 -1946157114 to i32*), align 4, !insn.addr !4563
  %47 = inttoptr i32 %28 to i8*, !insn.addr !4564
  %48 = load i8, i8* %47, align 1, !insn.addr !4564
  %49 = inttoptr i32 %39 to i8*, !insn.addr !4564
  store i8 %48, i8* %49, align 1, !insn.addr !4564
  %50 = select i1 %6, i32 -1, i32 1, !insn.addr !4564
  %51 = add i32 %28, %50, !insn.addr !4564
  %52 = load i32, i32* inttoptr (i32 -1593734911 to i32*), align 4, !insn.addr !4565
  %53 = add i32 %52, %46, !insn.addr !4565
  store i32 %53, i32* inttoptr (i32 -1593734911 to i32*), align 4, !insn.addr !4565
  %54 = add i32 %51, 4, !insn.addr !4566
  %55 = inttoptr i32 %54 to i32*, !insn.addr !4566
  %56 = load i32, i32* %55, align 4, !insn.addr !4566
  %57 = mul i32 %56, 4, !insn.addr !4567
  %58 = add i32 %57, 12, !insn.addr !4567
  %59 = udiv i32 %58, 4, !insn.addr !4568
  %60 = inttoptr i32 %51 to i8*, !insn.addr !4569
  call void @__asm_rep_movsd_memcpy(i8* inttoptr (i32 7077987 to i8*), i8* %60, i32 %59), !insn.addr !4569
  %61 = mul i32 %59, %26, !insn.addr !4569
  %62 = add i32 %61, 7077987, !insn.addr !4569
  %63 = add i32 %62, %2, !insn.addr !4570
  %64 = inttoptr i32 %63 to i8*, !insn.addr !4571
  %65 = load i8, i8* %64, align 1, !insn.addr !4571
  %66 = inttoptr i32 %62 to i8*, !insn.addr !4571
  store i8 %65, i8* %66, align 1, !insn.addr !4571
  %67 = load i32, i32* @global_var_1014ffe, align 4, !insn.addr !4572
  %68 = add i32 %67, 99, !insn.addr !4573
  %69 = inttoptr i32 %68 to i32*, !insn.addr !4573
  %70 = load i32, i32* %69, align 4, !insn.addr !4573
  store i32 %70, i32* inttoptr (i32 -1946157118 to i32*), align 4, !insn.addr !4573
  %71 = call i32 @unknown_a77bc1(), !insn.addr !4574
  %72 = load i8, i8* @global_var_1014fa8, align 1, !insn.addr !4575
  %73 = sext i8 %72 to i32, !insn.addr !4575
  %74 = add i8 %72, -1, !insn.addr !4576
  %75 = xor i8 %74, %72, !insn.addr !4576
  %76 = sub i8 0, %72, !insn.addr !4576
  %77 = and i8 %75, %76, !insn.addr !4576
  %78 = icmp slt i8 %77, 0, !insn.addr !4576
  %79 = and i32 %73, -256, !insn.addr !4576
  br i1 %78, label %dec_label_pc_100b18a, label %dec_label_pc_100b186, !insn.addr !4577

dec_label_pc_100b186:                             ; preds = %dec_label_pc_100b0e7
  %80 = trunc i32 %3 to i16, !insn.addr !4578
  %81 = call i8 @__asm_in.3(i16 %80), !insn.addr !4578
  %82 = sext i8 %81 to i32, !insn.addr !4578
  %83 = or i32 %79, %82, !insn.addr !4578
  ret i32 %83, !insn.addr !4579

dec_label_pc_100b18a:                             ; preds = %dec_label_pc_100b0e7
  %84 = inttoptr i32 %38 to i32*, !insn.addr !4580
  %85 = add nsw i32 %73, 4, !insn.addr !4581
  %86 = inttoptr i32 %85 to i32*, !insn.addr !4581
  %87 = zext i8 %74 to i32, !insn.addr !4576
  %88 = or i32 %79, %87, !insn.addr !4576
  %89 = add i32 %2, 927967245, !insn.addr !4582
  %90 = inttoptr i32 %89 to i32*, !insn.addr !4582
  %91 = load i32, i32* %90, align 4, !insn.addr !4582
  %92 = add i32 %91, -1, !insn.addr !4582
  store i32 %92, i32* %90, align 4, !insn.addr !4582
  %93 = add i32 %57, -1532951475, !insn.addr !4583
  %94 = inttoptr i32 %93 to i32*, !insn.addr !4583
  %95 = load i32, i32* %94, align 4, !insn.addr !4583
  %96 = add i32 %95, %58, !insn.addr !4583
  store i32 %96, i32* %94, align 4, !insn.addr !4583
  ret i32 %88, !insn.addr !4584
}

define i32 @function_100b199() local_unnamed_addr {
dec_label_pc_100b199:
  %0 = call i16 @__decompiler_undefined_function_1()
  %1 = call i32 @unknown_c8d0c(i16 %0), !insn.addr !4585
  %2 = call i32 @function_8ca5ffb8(), !insn.addr !4586
  ret i32 %2, !insn.addr !4586
}

define i32 @function_100b1c1() local_unnamed_addr {
dec_label_pc_100b1c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_6()
  %5 = add i32 %1, -13814, !insn.addr !4587
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4587
  %7 = load i32, i32* %6, align 4, !insn.addr !4587
  %8 = add i32 %7, %2, !insn.addr !4587
  store i32 %8, i32* %6, align 4, !insn.addr !4587
  %9 = inttoptr i32 %1 to i8*, !insn.addr !4588
  store i8* %9, i8** @global_var_1014fb0, align 4, !insn.addr !4588
  %10 = fptosi x86_fp80 %4 to i32, !insn.addr !4589
  %11 = mul i32 %0, 2, !insn.addr !4589
  %12 = add i32 %0, -1, !insn.addr !4589
  %13 = add i32 %12, %11, !insn.addr !4589
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4589
  store i32 %10, i32* %14, align 4, !insn.addr !4589
  ret i32 %3, !insn.addr !4590
}

define i32 @function_100b1dd() local_unnamed_addr {
dec_label_pc_100b1dd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4591
}

define i32 @function_100b1f2() local_unnamed_addr {
dec_label_pc_100b1f2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4592
}

define i32 @function_100b229(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b229:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4593
}

define i32 @function_100b233() local_unnamed_addr {
dec_label_pc_100b233:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4594
}

define i32 @function_100b26d() local_unnamed_addr {
dec_label_pc_100b26d:
  %0 = call i32 @function_8ca64974(), !insn.addr !4595
  ret i32 %0, !insn.addr !4595
}

define i32 @function_100b2c5() local_unnamed_addr {
dec_label_pc_100b2c5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100b2c9() local_unnamed_addr {
dec_label_pc_100b2c9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4596
}

define i32 @function_100b2df() local_unnamed_addr {
dec_label_pc_100b2df:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, 33338381, !insn.addr !4597
  %5 = inttoptr i32 %4 to i32*, !insn.addr !4597
  %6 = load i32, i32* %5, align 4, !insn.addr !4597
  %7 = add i32 %6, -1, !insn.addr !4597
  store i32 %7, i32* %5, align 4, !insn.addr !4597
  %8 = add i32 %2, 1335402753, !insn.addr !4598
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4598
  %10 = load i32, i32* %9, align 4, !insn.addr !4598
  %11 = add i32 %10, %2, !insn.addr !4598
  store i32 %11, i32* %9, align 4, !insn.addr !4598
  %12 = add i32 %3, %2, !insn.addr !4599
  %13 = inttoptr i32 %2 to i32*, !insn.addr !4599
  store i32 %12, i32* %13, align 4, !insn.addr !4599
  %14 = and i32 %2, -65281, !insn.addr !4600
  %15 = or i32 %14, 19968, !insn.addr !4600
  %16 = add i32 %3, 161, !insn.addr !4601
  %17 = and i32 %16, 255, !insn.addr !4601
  %18 = and i32 %3, -65536, !insn.addr !4601
  %19 = or i32 %18, %17, !insn.addr !4601
  %20 = or i32 %19, 20224, !insn.addr !4602
  %21 = inttoptr i32 %15 to i32*, !insn.addr !4603
  %22 = load i32, i32* %21, align 4, !insn.addr !4603
  %23 = add i32 %22, %20, !insn.addr !4603
  store i32 %23, i32* %21, align 4, !insn.addr !4603
  %24 = add i32 %1, 214502541, !insn.addr !4604
  %25 = inttoptr i32 %24 to i8*, !insn.addr !4604
  %26 = load i8, i8* %25, align 1, !insn.addr !4604
  %27 = udiv i32 %1, 256, !insn.addr !4604
  %28 = trunc i32 %27 to i8, !insn.addr !4604
  %29 = or i8 %26, %28, !insn.addr !4604
  store i8 %29, i8* %25, align 1, !insn.addr !4604
  %30 = add i32 %0, -1044280576, !insn.addr !4605
  %31 = inttoptr i32 %30 to i8*, !insn.addr !4605
  %32 = load i8, i8* %31, align 1, !insn.addr !4605
  %33 = trunc i32 %2 to i8, !insn.addr !4605
  %34 = add i8 %32, %33, !insn.addr !4605
  store i8 %34, i8* %31, align 1, !insn.addr !4605
  %35 = call i32 @function_f9a6a60a(), !insn.addr !4606
  ret i32 %35, !insn.addr !4606
}

define i32 @function_100b323() local_unnamed_addr {
dec_label_pc_100b323:
  %0 = call i32 @function_100b2c5(), !insn.addr !4607
  ret i32 %0, !insn.addr !4607
}

define i32 @function_100b383() local_unnamed_addr {
dec_label_pc_100b383:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4608
}

define i32 @function_100b38d(i8 %arg1) local_unnamed_addr {
dec_label_pc_100b38d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %2, ptrtoint (i8** @global_var_1014fa9 to i32), !insn.addr !4609
  %7 = inttoptr i32 %6 to i8*, !insn.addr !4609
  %8 = load i8, i8* %7, align 1, !insn.addr !4609
  %9 = select i1 %4, i8 2, i8 1, !insn.addr !4609
  %10 = sub i8 %8, %9, !insn.addr !4609
  store i8 %10, i8* %7, align 1, !insn.addr !4609
  %11 = load i32, i32* inttoptr (i32 -352255665 to i32*), align 4, !insn.addr !4610
  %12 = add i32 %11, 4, !insn.addr !4611
  %13 = inttoptr i32 %12 to i8*, !insn.addr !4611
  %14 = load i8, i8* %13, align 1, !insn.addr !4611
  %15 = udiv i32 %1, 256, !insn.addr !4611
  %16 = trunc i32 %15 to i8, !insn.addr !4611
  %17 = add i8 %14, %16, !insn.addr !4611
  store i8 %17, i8* %13, align 1, !insn.addr !4611
  %18 = load i32, i32* @global_var_1014fb8, align 4, !insn.addr !4612
  %19 = inttoptr i32 %18 to i32*, !insn.addr !4613
  store i32 %11, i32* %19, align 4, !insn.addr !4613
  %20 = load i8*, i8** @global_var_1014f88, align 4, !insn.addr !4614
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4, !insn.addr !4615
  %23 = load i8, i8* inttoptr (i32 -1006549937 to i8*), align 1, !insn.addr !4616
  %24 = add i8 %23, 79, !insn.addr !4616
  store i8 %24, i8* inttoptr (i32 -1006549937 to i8*), align 1, !insn.addr !4616
  %25 = udiv i32 %5, 4, !insn.addr !4617
  %26 = inttoptr i32 %22 to i8*, !insn.addr !4618
  %27 = inttoptr i32 %0 to i8*, !insn.addr !4618
  call void @__asm_rep_movsd_memcpy(i8* %27, i8* %26, i32 %25), !insn.addr !4618
  %28 = select i1 %3, i32 -4, i32 4, !insn.addr !4618
  %29 = mul i32 %25, %28, !insn.addr !4618
  %30 = add i32 %29, %0, !insn.addr !4618
  %31 = and i32 %5, 3, !insn.addr !4619
  %32 = inttoptr i32 %30 to i8*, !insn.addr !4620
  call void @__asm_rep_movsb_memcpy(i8* %32, i8* %32, i32 %31), !insn.addr !4620
  %33 = load i32, i32* @global_var_1014fb8, align 4, !insn.addr !4621
  %34 = add i32 %33, 4, !insn.addr !4622
  %35 = inttoptr i32 %34 to i32*, !insn.addr !4622
  %36 = load i32, i32* %35, align 4, !insn.addr !4622
  %37 = call i32 @function_1007bc1(i32 %36), !insn.addr !4623
  %38 = load i32, i32* @global_var_1014fb8, align 4, !insn.addr !4624
  %39 = add i32 %38, 4, !insn.addr !4625
  %40 = inttoptr i32 %39 to i32*, !insn.addr !4625
  %41 = load i8*, i8** @global_var_1014f88, align 4, !insn.addr !4626
  %42 = ptrtoint i8* %41 to i32, !insn.addr !4626
  %43 = add i32 %42, 4, !insn.addr !4627
  %44 = inttoptr i32 %43 to i32*, !insn.addr !4627
  %45 = load i32, i32* %44, align 4, !insn.addr !4627
  ret i32 %45, !insn.addr !4628
}

define i32 @function_100b41f() local_unnamed_addr {
dec_label_pc_100b41f:
  %0 = call i32 @function_8ca6a808(), !insn.addr !4629
  ret i32 %0, !insn.addr !4629
}

define i32 @function_100b440() local_unnamed_addr {
dec_label_pc_100b440:
  %0 = call i32 @function_100b4be(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4630
  ret i32 %0, !insn.addr !4630
}

define x86_fp80 @function_100b446() local_unnamed_addr {
dec_label_pc_100b446:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_6()
  %2 = fadd x86_fp80 %1, %1, !insn.addr !4631
  %3 = inttoptr i32 %0 to i32*, !insn.addr !4632
  ret x86_fp80 %2, !insn.addr !4633
}

define i32 @function_100b455() local_unnamed_addr {
dec_label_pc_100b455:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4634
}

define i32 @function_100b48f() local_unnamed_addr {
dec_label_pc_100b48f:
  %0 = call i32 @function_f8a6a796(), !insn.addr !4635
  ret i32 %0, !insn.addr !4635
}

define i32 @function_100b4a6() local_unnamed_addr {
dec_label_pc_100b4a6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4636
}

define i32 @function_100b4be(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b4be:
  %edi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 21961229, !insn.addr !4637
  %4 = inttoptr i32 %3 to i32*, !insn.addr !4637
  %5 = load i32, i32* %4, align 4, !insn.addr !4637
  %6 = add i32 %5, -1, !insn.addr !4637
  store i32 %6, i32* %4, align 4, !insn.addr !4637
  %7 = add i32 %1, 295791937, !insn.addr !4638
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4638
  %9 = load i32, i32* %8, align 4, !insn.addr !4638
  %10 = add i32 %9, %1, !insn.addr !4638
  store i32 %10, i32* %8, align 4, !insn.addr !4638
  %11 = trunc i32 %1 to i8, !insn.addr !4639
  %12 = and i8 %11, 31, !insn.addr !4639
  %13 = icmp eq i8 %12, 0, !insn.addr !4639
  br i1 %13, label %31, label %14, !insn.addr !4639

; <label>:14:                                     ; preds = %dec_label_pc_100b4be
  %15 = bitcast i32* %edi to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !4639
  %17 = icmp ult i32 %10, %9, !insn.addr !4638
  %18 = zext i1 %17 to i8, !insn.addr !4639
  %19 = lshr i8 %16, %12, !insn.addr !4639
  %20 = zext i8 %16 to i16, !insn.addr !4639
  %21 = sub nsw i8 9, %12, !insn.addr !4639
  %22 = zext i8 %21 to i16, !insn.addr !4639
  %23 = shl i16 %20, %22, !insn.addr !4639
  %24 = sub nsw i8 8, %12, !insn.addr !4639
  %25 = shl i8 %18, %24, !insn.addr !4639
  %26 = trunc i16 %23 to i8
  %27 = or i8 %25, %19
  %28 = or i8 %27, %26, !insn.addr !4639
  %29 = load i32, i32* %edi, align 4, !insn.addr !4639
  %30 = inttoptr i32 %29 to i8*, !insn.addr !4639
  store i8 %28, i8* %30, align 1, !insn.addr !4639
  br label %31, !insn.addr !4639

; <label>:31:                                     ; preds = %dec_label_pc_100b4be, %14
  %32 = add i32 %0, 1317776496, !insn.addr !4640
  %33 = inttoptr i32 %32 to i32*, !insn.addr !4640
  %34 = load i32, i32* %33, align 4, !insn.addr !4640
  %35 = add i32 %34, %1, !insn.addr !4640
  store i32 %35, i32* %33, align 4, !insn.addr !4640
  ret i32 %2, !insn.addr !4641
}

define i32 @function_100b4e5() local_unnamed_addr {
dec_label_pc_100b4e5:
  %0 = call i32 @function_8ca6a893(), !insn.addr !4642
  ret i32 %0, !insn.addr !4642
}

define i32 @function_100b50f() local_unnamed_addr {
dec_label_pc_100b50f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4643
}

define i32 @function_100b51d() local_unnamed_addr {
dec_label_pc_100b51d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = add i32 %4, 1334878488, !insn.addr !4644
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4644
  %9 = load i32, i32* %8, align 4, !insn.addr !4644
  %10 = add i32 %9, %4, !insn.addr !4644
  store i32 %10, i32* %8, align 4, !insn.addr !4644
  %11 = trunc i32 %5 to i8, !insn.addr !4645
  %12 = inttoptr i32 %0 to i8*, !insn.addr !4645
  store i8 %11, i8* %12, align 1, !insn.addr !4645
  %13 = select i1 %6, i32 -1, i32 1, !insn.addr !4645
  %14 = add i32 %13, %0, !insn.addr !4645
  %15 = add i32 %2, 74514252, !insn.addr !4646
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4646
  %17 = load i32, i32* %16, align 4, !insn.addr !4646
  %18 = add i32 %17, %4, !insn.addr !4646
  store i32 %18, i32* %16, align 4, !insn.addr !4646
  %19 = call i32 @unknown_95007bfb(), !insn.addr !4647
  %20 = load i8, i8* @global_var_1014f80, align 1, !insn.addr !4648
  %21 = trunc i32 %4 to i8, !insn.addr !4648
  %22 = sub i8 %20, %21, !insn.addr !4648
  %23 = icmp ult i8 %20, %21, !insn.addr !4648
  store i8 %22, i8* @global_var_1014f80, align 1, !insn.addr !4648
  %24 = inttoptr i32 %4 to i32*, !insn.addr !4649
  store i32 %19, i32* %24, align 4, !insn.addr !4649
  %25 = add i32 %14, -1962868410, !insn.addr !4650
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4650
  %27 = load i32, i32* %26, align 4, !insn.addr !4650
  %.neg1 = sext i1 %23 to i32
  %.neg2 = sub i32 %.neg1, %19, !insn.addr !4650
  %28 = add i32 %.neg2, %27, !insn.addr !4650
  store i32 %28, i32* %26, align 4, !insn.addr !4650
  %29 = add i32 %2, -2136931250, !insn.addr !4651
  %30 = inttoptr i32 %29 to i8*, !insn.addr !4651
  %31 = load i8, i8* %30, align 1, !insn.addr !4651
  %32 = xor i8 %31, %21, !insn.addr !4651
  store i8 %32, i8* %30, align 1, !insn.addr !4651
  %33 = add i32 %14, -1, !insn.addr !4652
  %34 = add i32 %19, %4, !insn.addr !4653
  store i32 %34, i32* %24, align 4, !insn.addr !4653
  %35 = mul i32 %3, 4, !insn.addr !4654
  %36 = or i32 %35, 1024, !insn.addr !4655
  %37 = add i32 %33, %36, !insn.addr !4655
  %38 = xor i32 %19, 56, !insn.addr !4656
  %39 = inttoptr i32 %38 to i32*, !insn.addr !4657
  %40 = load i32, i32* %39, align 4, !insn.addr !4657
  %41 = udiv i32 %37, 4, !insn.addr !4658
  %42 = inttoptr i32 %1 to i8*, !insn.addr !4659
  %43 = inttoptr i32 %33 to i8*, !insn.addr !4659
  call void @__asm_rep_movsd_memcpy(i8* %43, i8* %42, i32 %41), !insn.addr !4659
  %44 = select i1 %6, i32 -4, i32 4, !insn.addr !4659
  %45 = mul i32 %41, %44, !insn.addr !4659
  %46 = add i32 %45, %33, !insn.addr !4659
  %47 = and i32 %40, 3, !insn.addr !4660
  %48 = inttoptr i32 %46 to i8*, !insn.addr !4661
  call void @__asm_rep_movsb_memcpy(i8* %48, i8* %48, i32 %47), !insn.addr !4661
  call void @llvm.trap()
  unreachable
}

define i32 @function_100b5a0() local_unnamed_addr {
dec_label_pc_100b5a0:
  %0 = call i32 @function_131c1d3(), !insn.addr !4662
  ret i32 %0, !insn.addr !4662
}

define i32 @function_100b5ca() local_unnamed_addr {
dec_label_pc_100b5ca:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4663
}

define i32 @function_100b5cd(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b5cd:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i8
  %3 = mul i8 %2, 2, !insn.addr !4664
  %4 = inttoptr i32 %1 to i8*, !insn.addr !4664
  store i8 %3, i8* %4, align 1, !insn.addr !4664
  %5 = add i32 %0, -1051745763, !insn.addr !4665
  %6 = inttoptr i32 %5 to i8*, !insn.addr !4665
  %7 = load i8, i8* %6, align 1, !insn.addr !4665
  %8 = trunc i32 %0 to i8, !insn.addr !4665
  %9 = add i8 %7, %8, !insn.addr !4665
  store i8 %9, i8* %6, align 1, !insn.addr !4665
  %10 = call i32 @__asm_int1(), !insn.addr !4666
  ret i32 %10, !insn.addr !4667
}

define i32 @function_100b5e0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100b5e0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = add i32 %1, %0, !insn.addr !4668
  %8 = xor i32 %7, %0, !insn.addr !4668
  %9 = xor i32 %7, %1, !insn.addr !4668
  %10 = and i32 %8, %9, !insn.addr !4668
  %11 = icmp slt i32 %10, 0, !insn.addr !4668
  %12 = icmp eq i32 %7, 0, !insn.addr !4668
  %13 = icmp slt i32 %7, 0, !insn.addr !4668
  %14 = icmp eq i1 %13, %11, !insn.addr !4669
  %15 = icmp eq i1 %12, false, !insn.addr !4669
  %16 = icmp eq i1 %14, %15, !insn.addr !4669
  br i1 %16, label %dec_label_pc_100b5f5, label %dec_label_pc_100b5ee, !insn.addr !4669

dec_label_pc_100b5ee:                             ; preds = %dec_label_pc_100b5e0
  %17 = trunc i32 %6 to i8
  %18 = mul i8 %17, 2, !insn.addr !4670
  %19 = inttoptr i32 %6 to i8*, !insn.addr !4670
  store i8 %18, i8* %19, align 1, !insn.addr !4670
  %20 = trunc i32 %4 to i16, !insn.addr !4671
  %21 = bitcast i32* %esi to i8*
  %22 = load i8, i8* %21, align 4, !insn.addr !4671
  call void @__asm_outsb(i16 %20, i8 %22), !insn.addr !4671
  ret i32 %6, !insn.addr !4671

dec_label_pc_100b5f5:                             ; preds = %dec_label_pc_100b5e0
  %23 = mul i32 %4, 8, !insn.addr !4672
  %24 = add i32 %23, %1, !insn.addr !4672
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4672
  %26 = load i32, i32* %25, align 4, !insn.addr !4672
  %27 = add i32 %26, %3, !insn.addr !4672
  store i32 %27, i32* %25, align 4, !insn.addr !4672
  %28 = add i32 %6, 1, !insn.addr !4673
  %29 = and i32 %28, 255, !insn.addr !4673
  %30 = and i32 %6, -256, !insn.addr !4673
  %31 = or i32 %29, %30, !insn.addr !4673
  %32 = add i32 %2, -56, !insn.addr !4674
  %33 = inttoptr i32 %32 to i32*, !insn.addr !4674
  %34 = load i32, i32* %33, align 4, !insn.addr !4674
  store i32 %34, i32* inttoptr (i32 -16711349 to i32*), align 4, !insn.addr !4674
  %35 = udiv i32 %3, 256, !insn.addr !4675
  %36 = trunc i32 %35 to i8, !insn.addr !4675
  %37 = load i32, i32* %esi, align 4, !insn.addr !4675
  %38 = add i32 %37, 1332288905, !insn.addr !4675
  %39 = inttoptr i32 %38 to i8 addrspace(258)*, !insn.addr !4675
  store i8 %36, i8 addrspace(258)* %39, align 1, !insn.addr !4675
  %40 = add i32 %31, %5, !insn.addr !4676
  %41 = inttoptr i32 %5 to i32*, !insn.addr !4676
  store i32 %40, i32* %41, align 4, !insn.addr !4676
  %42 = call i32 @function_10081cc(), !insn.addr !4677
  ret i32 %42, !insn.addr !4678
}

define i32 @function_100b640() local_unnamed_addr {
dec_label_pc_100b640:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4679
}

define i32 @function_100b67d() local_unnamed_addr {
dec_label_pc_100b67d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 11206668, !insn.addr !4680
  %2 = inttoptr i32 %1 to i32*, !insn.addr !4680
  %3 = load i32, i32* %2, align 4, !insn.addr !4680
  %4 = udiv i32 %3, 2, !insn.addr !4680
  %5 = shl i32 %3, 31, !insn.addr !4680
  %6 = or i32 %4, %5, !insn.addr !4680
  store i32 %6, i32* %2, align 4, !insn.addr !4680
  %7 = call i32 @function_e4a6a98d(), !insn.addr !4681
  ret i32 %7, !insn.addr !4681
}

define i32 @function_100b69d() local_unnamed_addr {
dec_label_pc_100b69d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4682
}

define i32 @function_100b6dc() local_unnamed_addr {
dec_label_pc_100b6dc:
  %0 = call i32 @function_e245a9e3(), !insn.addr !4683
  ret i32 %0, !insn.addr !4683
}

define i32 @function_100b70a() local_unnamed_addr {
dec_label_pc_100b70a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4684
}

define i32 @function_100b71a() local_unnamed_addr {
dec_label_pc_100b71a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4685
}

define i32 @function_100b726() local_unnamed_addr {
dec_label_pc_100b726:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4686
}

define i32 @function_100b760() local_unnamed_addr {
dec_label_pc_100b760:
  %0 = call i32 @function_8ca6aa67(), !insn.addr !4687
  ret i32 %0, !insn.addr !4687
}

define i32 @function_100b777() local_unnamed_addr {
dec_label_pc_100b777:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4688
}

define i32 @function_100b7b6() local_unnamed_addr {
dec_label_pc_100b7b6:
  %0 = call i32 @function_34a5bebd(), !insn.addr !4689
  ret i32 %0, !insn.addr !4689
}

define i32 @function_100b7e7() local_unnamed_addr {
dec_label_pc_100b7e7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4690
}

define i32 @function_100b7f4() local_unnamed_addr {
dec_label_pc_100b7f4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4691
}

define i32 @function_100b7fb() local_unnamed_addr {
dec_label_pc_100b7fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = udiv i32 %0, 256, !insn.addr !4692
  %3 = and i32 %2, 255
  %4 = xor i32 %3, %1, !insn.addr !4692
  ret i32 %4, !insn.addr !4693
}

define i32 @function_100b819() local_unnamed_addr {
dec_label_pc_100b819:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4694
}

define i32 @function_100b83a() local_unnamed_addr {
dec_label_pc_100b83a:
  %0 = call i32 @function_6ba6ab41(), !insn.addr !4695
  ret i32 %0, !insn.addr !4695
}

define i32 @function_100b84b(i32 %arg1) local_unnamed_addr {
dec_label_pc_100b84b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i32 @function_1007b8d(), !insn.addr !4696
  %5 = load i32, i32* @global_var_1014ff0, align 4, !insn.addr !4697
  %6 = add i32 %5, 4, !insn.addr !4698
  %7 = inttoptr i32 %6 to i32*, !insn.addr !4698
  %8 = load i32, i32* %7, align 4, !insn.addr !4698
  %9 = add i32 %8, 4, !insn.addr !4699
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4699
  %11 = load i32, i32* %10, align 4, !insn.addr !4699
  %12 = add i32 %2, -4, !insn.addr !4699
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4699
  store i32 %11, i32* %13, align 4, !insn.addr !4699
  %14 = load i32, i32* inttoptr (i32 -1459531784 to i32*), align 8, !insn.addr !4700
  %15 = add i32 %14, 4, !insn.addr !4701
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4701
  store i32 %8, i32* %16, align 4, !insn.addr !4701
  %17 = inttoptr i32 %14 to i32*, !insn.addr !4702
  %18 = load i32, i32* %17, align 4, !insn.addr !4702
  %19 = sub i32 %8, %18, !insn.addr !4702
  %20 = add i32 %19, %arg1, !insn.addr !4703
  %21 = xor i32 %20, %arg1, !insn.addr !4703
  %22 = xor i32 %20, %19, !insn.addr !4703
  %23 = and i32 %21, %22, !insn.addr !4703
  %24 = icmp slt i32 %23, 0, !insn.addr !4703
  br i1 %24, label %dec_label_pc_100b8ab, label %dec_label_pc_100b87d, !insn.addr !4704

dec_label_pc_100b87d:                             ; preds = %dec_label_pc_100b84b
  %25 = mul i32 %0, 2, !insn.addr !4705
  %26 = add i32 %1, 4, !insn.addr !4706
  %27 = inttoptr i32 %26 to i32*, !insn.addr !4706
  %28 = load i32, i32* %27, align 4, !insn.addr !4706
  %29 = add i32 %1, -1928557308, !insn.addr !4707
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4707
  %31 = load i32, i32* %30, align 4, !insn.addr !4707
  %32 = load i32, i32* %ebx, align 4
  %33 = add i32 %32, 42126529, !insn.addr !4708
  %34 = inttoptr i32 %33 to i8*, !insn.addr !4708
  %35 = load i8, i8* %34, align 1, !insn.addr !4708
  %36 = trunc i32 %28 to i8, !insn.addr !4708
  %37 = add i8 %35, %36, !insn.addr !4708
  store i8 %37, i8* %34, align 1, !insn.addr !4708
  %38 = inttoptr i32 %1 to i8*, !insn.addr !4709
  %39 = inttoptr i32 %25 to i8*, !insn.addr !4709
  call void @__asm_rep_movsd_memcpy(i8* %39, i8* %38, i32 %28), !insn.addr !4709
  %40 = select i1 %3, i32 -4, i32 4, !insn.addr !4709
  %41 = mul i32 %28, %40, !insn.addr !4709
  %42 = add i32 %41, %25, !insn.addr !4709
  %43 = trunc i32 %31 to i8, !insn.addr !4710
  %44 = inttoptr i32 %42 to i8*, !insn.addr !4710
  store i8 %43, i8* %44, align 2, !insn.addr !4710
  %45 = select i1 %3, i32 -1, i32 1, !insn.addr !4710
  %46 = add i32 %42, %45, !insn.addr !4710
  %47 = bitcast i32* %ebx to x86_fp80*
  %48 = load x86_fp80, x86_fp80* %47, align 4, !insn.addr !4711
  %49 = call x86_fp80 @__asm_fbld(x86_fp80 %48), !insn.addr !4711
  call void @__asm_int(i32 243), !insn.addr !4712
  %50 = load i8, i8* %44, align 2, !insn.addr !4713
  %51 = inttoptr i32 %46 to i8*, !insn.addr !4713
  store i8 %50, i8* %51, align 1, !insn.addr !4713
  %52 = load i32, i32* @global_var_1014ff8, align 4, !insn.addr !4714
  %53 = inttoptr i32 %52 to i32*, !insn.addr !4715
  %54 = load i32, i32* %53, align 4, !insn.addr !4715
  %55 = sub i32 0, %54, !insn.addr !4715
  store i32 %55, i32* %53, align 4, !insn.addr !4715
  %56 = add i32 %2, -8, !insn.addr !4716
  %57 = inttoptr i32 %56 to i32*, !insn.addr !4716
  store i32 65535, i32* %57, align 4, !insn.addr !4716
  ret i32 %52, !insn.addr !4716

dec_label_pc_100b8ab:                             ; preds = %dec_label_pc_100b84b
  %58 = icmp ult i32 %20, %arg1, !insn.addr !4703
  %59 = select i1 %58, i32 -2080374838, i32 -2080374839, !insn.addr !4717
  %60 = sub i32 %19, %59, !insn.addr !4717
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4718
  %62 = load i32, i32* %61, align 4, !insn.addr !4718
  %63 = add i32 %62, 1, !insn.addr !4718
  store i32 %63, i32* %61, align 4, !insn.addr !4718
  %64 = inttoptr i32 %60 to i8*, !insn.addr !4719
  %65 = load i8, i8* %64, align 1, !insn.addr !4719
  %66 = trunc i32 %60 to i8, !insn.addr !4719
  %67 = add i8 %65, %66, !insn.addr !4719
  %68 = icmp uge i8 %67, %65, !insn.addr !4719
  store i8 %67, i8* %64, align 1, !insn.addr !4719
  store i32 %60, i32* inttoptr (i32 21516287 to i32*), align 4, !insn.addr !4720
  %69 = call i32 @unknown_6e81cc(i32 %20), !insn.addr !4721
  %70 = add i32 %2, -8, !insn.addr !4722
  %71 = inttoptr i32 %70 to i32*, !insn.addr !4722
  store i32 400, i32* %71, align 4, !insn.addr !4722
  store i32 %69, i32* inttoptr (i32 18108222 to i32*), align 4, !insn.addr !4723
  %72 = add i32 %69, 63, !insn.addr !4724
  %73 = inttoptr i32 %72 to i8*, !insn.addr !4724
  %74 = load i8, i8* %73, align 1, !insn.addr !4724
  %75 = zext i1 %68 to i8
  %76 = add i8 %74, %75, !insn.addr !4724
  store i8 %76, i8* %73, align 1, !insn.addr !4724
  ret i32 %69, !insn.addr !4725
}

define i32 @function_100b8cf() local_unnamed_addr {
dec_label_pc_100b8cf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_46 = alloca i32, align 4
  %stack_var_52 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %factor = mul i32 %4, 2
  %5 = add i32 %factor, -93, !insn.addr !4726
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4726
  %7 = load i32, i32* %6, align 4, !insn.addr !4726
  %8 = add i32 %7, %1, !insn.addr !4726
  store i32 %8, i32* %6, align 4, !insn.addr !4726
  %9 = add i32 %4, %0, !insn.addr !4727
  %10 = add i32 %0, -1, !insn.addr !4728
  store i32 %10, i32* %stack_var_-4, align 4, !insn.addr !4729
  %11 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4730
  store i32 %11, i32* %stack_var_52, align 4, !insn.addr !4730
  %12 = ptrtoint i32* %stack_var_52 to i32, !insn.addr !4730
  store i32 %9, i32* inttoptr (i32 975316180 to i32*), align 4, !insn.addr !4731
  %13 = call i32 @function_10081cc(), !insn.addr !4732
  %14 = trunc i32 %2 to i8, !insn.addr !4733
  %15 = udiv i32 %1, 256, !insn.addr !4733
  %16 = trunc i32 %15 to i8, !insn.addr !4733
  %17 = add i8 %14, %16, !insn.addr !4733
  %18 = icmp ult i8 %17, %14, !insn.addr !4733
  %19 = zext i8 %17 to i32, !insn.addr !4733
  %20 = and i32 %2, -256, !insn.addr !4733
  %21 = or i32 %20, %19, !insn.addr !4733
  %22 = mul i32 %12, 4, !insn.addr !4734
  %23 = add i32 %3, 1, !insn.addr !4734
  %24 = add i32 %23, %22, !insn.addr !4734
  %25 = inttoptr i32 %24 to i8*, !insn.addr !4734
  %26 = load i8, i8* %25, align 1, !insn.addr !4734
  %27 = select i1 %18, i8 2, i8 1, !insn.addr !4734
  %28 = sub i8 %26, %27, !insn.addr !4734
  store i8 %28, i8* %25, align 1, !insn.addr !4734
  %29 = call i32 @function_1001bcc(), !insn.addr !4735
  store i32 %29, i32* @global_var_101dedc, align 4, !insn.addr !4736
  %30 = call i32 @function_10081cc(), !insn.addr !4737
  %31 = trunc i32 %21 to i16, !insn.addr !4738
  %32 = call i8 @__asm_in.3(i16 %31), !insn.addr !4738
  %33 = sext i8 %32 to i32, !insn.addr !4738
  %34 = and i32 %30, -256, !insn.addr !4738
  %35 = or i32 %34, %33, !insn.addr !4738
  %36 = xor i32 %35, ptrtoint (i32* @global_var_1014ff4 to i32), !insn.addr !4739
  store i32 %36, i32* inttoptr (i32 -1392443152 to i32*), align 16, !insn.addr !4740
  %37 = call i32 @unknown_d17bd1(), !insn.addr !4741
  %38 = call i32 @function_1007c26(), !insn.addr !4742
  store i32 %38, i32* @global_var_1014ff4, align 4, !insn.addr !4743
  %39 = inttoptr i32 %38 to i32*, !insn.addr !4744
  %40 = load i32, i32* %39, align 4, !insn.addr !4744
  store i32 %40, i32* %stack_var_46, align 4, !insn.addr !4744
  %41 = ptrtoint i32* %stack_var_46 to i32, !insn.addr !4744
  %42 = call i32 @unknown_977bc1(i32 %40), !insn.addr !4745
  %43 = load i32, i32* @global_var_1014ff4, align 4, !insn.addr !4746
  %44 = inttoptr i32 %43 to i32*, !insn.addr !4747
  %45 = load i32, i32* inttoptr (i32 -1291759632 to i32*), align 16, !insn.addr !4748
  %46 = add i32 %21, 33845503, !insn.addr !4749
  %47 = inttoptr i32 %46 to i32*, !insn.addr !4749
  %48 = load i32, i32* %47, align 4, !insn.addr !4749
  %49 = add i32 %48, %41, !insn.addr !4749
  store i32 %49, i32* %47, align 4, !insn.addr !4749
  ret i32 %45, !insn.addr !4750
}

define i32 @function_100b953() local_unnamed_addr {
dec_label_pc_100b953:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100b961() local_unnamed_addr {
dec_label_pc_100b961:
  %eax.0.reg2mem = alloca i32, !insn.addr !4751
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = icmp eq i1 %4, false, !insn.addr !4752
  br i1 %6, label %7, label %dec_label_pc_100b96a, !insn.addr !4752

; <label>:7:                                      ; preds = %dec_label_pc_100b961
  %8 = call i32 @function_100b953(), !insn.addr !4752
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !4752
  br label %dec_label_pc_100b96a, !insn.addr !4752

dec_label_pc_100b96a:                             ; preds = %7, %dec_label_pc_100b961
  %9 = mul i32 %0, 2, !insn.addr !4751
  %10 = add i32 %9, -1050542080, !insn.addr !4751
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %11 = mul i32 %2, 256
  %12 = add i32 %3, %11
  %13 = and i32 %12, 65280, !insn.addr !4753
  %14 = and i32 %3, 255, !insn.addr !4753
  %15 = or i32 %13, %14, !insn.addr !4753
  %16 = inttoptr i32 %0 to i32*, !insn.addr !4754
  %17 = select i1 %5, i32 -4, i32 4, !insn.addr !4754
  %18 = add i32 %17, %0, !insn.addr !4754
  %19 = add i32 %1, -190774648, !insn.addr !4755
  %20 = inttoptr i32 %19 to i32*, !insn.addr !4755
  %21 = load i32, i32* %20, align 4, !insn.addr !4755
  %22 = and i32 %21, %eax.0.reload, !insn.addr !4755
  %23 = trunc i32 %eax.0.reload to i8, !insn.addr !4756
  %24 = inttoptr i32 %22 to i8*, !insn.addr !4756
  %25 = load i8, i8* %24, align 1, !insn.addr !4756
  %26 = and i32 %eax.0.reload, -256, !insn.addr !4756
  %27 = add i32 %2, 112, !insn.addr !4757
  %28 = inttoptr i32 %27 to i32*, !insn.addr !4757
  %29 = load i32, i32* %28, align 4, !insn.addr !4757
  %30 = add i32 %10, %29, !insn.addr !4757
  store i32 %30, i32* %28, align 4, !insn.addr !4757
  %31 = add i8 %23, -24, !insn.addr !4756
  %32 = sub i8 %31, %25, !insn.addr !4758
  %33 = zext i8 %32 to i32, !insn.addr !4758
  %34 = or i32 %26, %33, !insn.addr !4758
  %35 = trunc i32 %15 to i16, !insn.addr !4759
  %36 = call i8 @__asm_insb(i16 %35), !insn.addr !4759
  %37 = inttoptr i32 %18 to i8*, !insn.addr !4759
  store i8 %36, i8* %37, align 1, !insn.addr !4759
  ret i32 %34, !insn.addr !4760
}

define i32 @function_100b980() local_unnamed_addr {
dec_label_pc_100b980:
  %eax.0.reg2mem = alloca i32, !insn.addr !4761
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !4761
  %.reg2mem = alloca i32, !insn.addr !4761
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i32 @__decompiler_undefined_function_0()
  %8 = call i64 @__decompiler_undefined_function_9()
  %9 = call i64 @__decompiler_undefined_function_9()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = add i32 %0, 1, !insn.addr !4761
  %12 = inttoptr i32 %11 to i64*, !insn.addr !4761
  %13 = load i64, i64* %12, align 4, !insn.addr !4761
  %14 = call i64 @__asm_pmuludq(i64 %8, i64 %13), !insn.addr !4761
  %15 = add i32 %6, -254393768, !insn.addr !4762
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4762
  %17 = load i32, i32* %16, align 4, !insn.addr !4762
  %18 = add i32 %17, %6, !insn.addr !4762
  store i32 %18, i32* %16, align 4, !insn.addr !4762
  %19 = load i32, i32* %ecx, align 4, !insn.addr !4763
  %20 = add i32 %19, %7, !insn.addr !4763
  %21 = xor i32 %20, %19, !insn.addr !4763
  %22 = xor i32 %20, %7, !insn.addr !4763
  %23 = and i32 %21, %22, !insn.addr !4763
  %24 = icmp slt i32 %23, 0, !insn.addr !4763
  %25 = inttoptr i32 %19 to i32*, !insn.addr !4763
  store i32 %20, i32* %25, align 4, !insn.addr !4763
  br i1 %24, label %dec_label_pc_100b997, label %dec_label_pc_100b993, !insn.addr !4764

dec_label_pc_100b993:                             ; preds = %dec_label_pc_100b980
  %26 = and i32 %7, -256, !insn.addr !4765
  %27 = mul i32 %0, 9
  %28 = add i32 %27, -9, !insn.addr !4766
  %29 = inttoptr i32 %28 to i8*, !insn.addr !4766
  %30 = load i8, i8* %29, align 1, !insn.addr !4766
  %31 = zext i8 %30 to i32, !insn.addr !4766
  %32 = or i32 %26, %31, !insn.addr !4766
  %33 = add i32 %32, -1, !insn.addr !4767
  %34 = trunc i32 %33 to i16, !insn.addr !4768
  %35 = call i16 @__asm_arpl.8(i16 %34), !insn.addr !4768
  ret i32 %33, !insn.addr !4768

dec_label_pc_100b997:                             ; preds = %dec_label_pc_100b980
  %36 = add i32 %4, 17926212, !insn.addr !4769
  %37 = inttoptr i32 %36 to i8*, !insn.addr !4769
  %38 = load i8, i8* %37, align 1, !insn.addr !4769
  %39 = load i32, i32* %ecx, align 4, !insn.addr !4769
  %40 = trunc i32 %39 to i8, !insn.addr !4769
  %41 = and i8 %40, 31, !insn.addr !4769
  %42 = icmp eq i8 %41, 0, !insn.addr !4769
  store i32 %39, i32* %.reg2mem, !insn.addr !4769
  br i1 %42, label %dec_label_pc_100b9ad, label %43, !insn.addr !4769

; <label>:43:                                     ; preds = %dec_label_pc_100b997
  %44 = lshr i8 %38, %41, !insn.addr !4769
  %45 = sub nsw i8 8, %41, !insn.addr !4769
  %46 = shl i8 %38, %45, !insn.addr !4769
  %47 = or i8 %46, %44, !insn.addr !4769
  store i8 %47, i8* %37, align 1, !insn.addr !4769
  %.pre = load i32, i32* %ecx, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !4769
  br label %dec_label_pc_100b9ad, !insn.addr !4769

dec_label_pc_100b9ad:                             ; preds = %dec_label_pc_100b997, %43
  %.reload = load i32, i32* %.reg2mem
  %48 = add i32 %.reload, 1017185345, !insn.addr !4770
  %49 = inttoptr i32 %48 to i32*, !insn.addr !4770
  %50 = load i32, i32* %49, align 4, !insn.addr !4770
  %51 = add i32 %50, %.reload, !insn.addr !4770
  store i32 %51, i32* %49, align 4, !insn.addr !4770
  %52 = add i32 %0, -2, !insn.addr !4771
  %53 = add i32 %2, -117, !insn.addr !4772
  %54 = inttoptr i32 %53 to i32*, !insn.addr !4772
  %55 = load i32, i32* %54, align 4, !insn.addr !4772
  %56 = add i32 %55, %4, !insn.addr !4772
  %57 = xor i32 %56, %55, !insn.addr !4772
  %58 = xor i32 %56, %4, !insn.addr !4772
  %59 = and i32 %57, %58, !insn.addr !4772
  %60 = icmp slt i32 %59, 0, !insn.addr !4772
  store i32 %56, i32* %54, align 4, !insn.addr !4772
  %61 = add i32 %2, 4
  %spec.select = select i1 %60, i32 %3, i32 %61
  %62 = call i32 @__asm_hlt(), !insn.addr !4773
  %63 = bitcast i32* %ecx to i8*
  %64 = load i8, i8* %63, align 4, !insn.addr !4774
  %65 = add i8 %64, 1, !insn.addr !4774
  %66 = load i32, i32* %ecx, align 4, !insn.addr !4774
  %67 = inttoptr i32 %66 to i8*, !insn.addr !4774
  store i8 %65, i8* %67, align 1, !insn.addr !4774
  %68 = add i32 %4, 210568203, !insn.addr !4775
  %69 = inttoptr i32 %68 to i32*, !insn.addr !4775
  %70 = load i32, i32* %69, align 4, !insn.addr !4775
  %71 = load i32, i32* %ecx, align 4, !insn.addr !4775
  %72 = add i32 %71, %70, !insn.addr !4775
  store i32 %72, i32* %69, align 4, !insn.addr !4775
  %73 = load i32, i32* %ecx, align 4, !insn.addr !4776
  %74 = inttoptr i32 %62 to i8*, !insn.addr !4777
  %75 = load i8, i8* %74, align 1, !insn.addr !4777
  %76 = trunc i32 %62 to i8, !insn.addr !4777
  %77 = add i8 %75, %76, !insn.addr !4777
  store i8 %77, i8* %74, align 1, !insn.addr !4777
  %78 = load i32, i32* %ecx, align 4
  %79 = udiv i32 %78, 4, !insn.addr !4778
  %80 = inttoptr i32 %1 to i8*, !insn.addr !4779
  %81 = inttoptr i32 %52 to i8*, !insn.addr !4779
  call void @__asm_rep_movsd_memcpy(i8* %81, i8* %80, i32 %79), !insn.addr !4779
  %82 = select i1 %10, i32 -4, i32 4, !insn.addr !4779
  %83 = mul i32 %79, %82, !insn.addr !4779
  %84 = add i32 %83, %52, !insn.addr !4779
  %85 = trunc i32 %5 to i16, !insn.addr !4780
  %86 = inttoptr i32 %84 to i32*, !insn.addr !4780
  %87 = load i32, i32* %86, align 4, !insn.addr !4780
  call void @__asm_outsd(i16 %85, i32 %87), !insn.addr !4780
  call void @__asm_int(i32 243), !insn.addr !4781
  %88 = select i1 %10, i32 -1, i32 1, !insn.addr !4782
  %89 = add i32 %84, %88, !insn.addr !4782
  %90 = and i32 %78, -65281, !insn.addr !4783
  %91 = add i32 %90, %78, !insn.addr !4784
  %92 = inttoptr i32 %78 to i32*, !insn.addr !4784
  store i32 %91, i32* %92, align 4, !insn.addr !4784
  %93 = udiv i32 %4, 256, !insn.addr !4785
  %94 = trunc i32 %93 to i8, !insn.addr !4785
  %95 = udiv i32 %5, 256, !insn.addr !4785
  %96 = trunc i32 %95 to i8, !insn.addr !4785
  %97 = add i8 %96, %94, !insn.addr !4785
  %98 = icmp ult i8 %97, %94, !insn.addr !4785
  %99 = add i32 %78, ptrtoint (i8** @global_var_1014f40 to i32), !insn.addr !4786
  %100 = inttoptr i32 %99 to i8*, !insn.addr !4786
  %101 = load i8, i8* %100, align 1, !insn.addr !4786
  %102 = zext i1 %98 to i8, !insn.addr !4786
  %103 = sub i8 %101, %102, !insn.addr !4786
  %104 = icmp eq i8 %103, 0, !insn.addr !4786
  store i8 %103, i8* %100, align 1, !insn.addr !4786
  %105 = add i32 %spec.select, 20, !insn.addr !4787
  %106 = inttoptr i32 %105 to i64*, !insn.addr !4787
  %107 = load i64, i64* %106, align 4, !insn.addr !4787
  %108 = call i64 @__asm_psllq(i64 %9, i64 %107), !insn.addr !4787
  %109 = add i32 %spec.select, 24, !insn.addr !4788
  %110 = inttoptr i32 %109 to i32*, !insn.addr !4788
  %111 = load i32, i32* %110, align 4, !insn.addr !4788
  %112 = mul i32 %111, %90, !insn.addr !4788
  store i32 %112, i32* @global_var_101c0fb, align 4, !insn.addr !4789
  br i1 %104, label %dec_label_pc_100b9ad.dec_label_pc_100bbb0_crit_edge, label %dec_label_pc_100bb8c, !insn.addr !4790

dec_label_pc_100b9ad.dec_label_pc_100bbb0_crit_edge: ; preds = %dec_label_pc_100b9ad
  %.pre1 = inttoptr i32 %89 to i32*, !insn.addr !4791
  store i32* %.pre1, i32** %.pre-phi.reg2mem
  store i32 %112, i32* %eax.0.reg2mem
  br label %dec_label_pc_100bbb0

dec_label_pc_100bb83:                             ; preds = %dec_label_pc_100bb8c
  ret i32 %129, !insn.addr !4792

dec_label_pc_100bb8c:                             ; preds = %dec_label_pc_100b9ad
  %113 = and i32 %4, -65281, !insn.addr !4785
  %114 = zext i8 %97 to i32, !insn.addr !4785
  %115 = mul i32 %114, 256, !insn.addr !4785
  %116 = or i32 %115, %113, !insn.addr !4785
  %117 = add i32 %116, 26630, !insn.addr !4793
  %118 = inttoptr i32 %117 to i32*, !insn.addr !4793
  %119 = load i32, i32* %118, align 4, !insn.addr !4793
  %120 = load i32, i32* %ecx, align 4, !insn.addr !4793
  %121 = and i32 %120, %119, !insn.addr !4793
  store i32 %121, i32* %118, align 4, !insn.addr !4793
  %122 = add i32 %112, 1342468351, !insn.addr !4794
  %123 = inttoptr i32 %122 to i8*, !insn.addr !4794
  %124 = load i8, i8* %123, align 1, !insn.addr !4794
  %125 = trunc i32 %112 to i8, !insn.addr !4794
  %126 = add i8 %124, %125, !insn.addr !4794
  store i8 %126, i8* %123, align 1, !insn.addr !4794
  %127 = call i32 @unknown_5a011b2d(), !insn.addr !4795
  %128 = inttoptr i32 %89 to i32*
  %129 = load i32, i32* %128, align 4, !insn.addr !4796
  %130 = inttoptr i32 %129 to i32*, !insn.addr !4797
  %131 = load i32, i32* %130, align 4, !insn.addr !4797
  %132 = add i32 %131, -27, !insn.addr !4798
  %133 = inttoptr i32 %132 to i32*, !insn.addr !4798
  %134 = load i32, i32* %133, align 4, !insn.addr !4798
  store i32 %134, i32* %ecx, align 4, !insn.addr !4798
  %135 = icmp slt i32 %134, 0, !insn.addr !4799
  %136 = icmp eq i1 %135, false, !insn.addr !4800
  br i1 %136, label %dec_label_pc_100bb83, label %dec_label_pc_100bba8, !insn.addr !4800

dec_label_pc_100bba8:                             ; preds = %dec_label_pc_100bb8c
  %137 = add i32 %129, 4, !insn.addr !4801
  %138 = inttoptr i32 %137 to i32*, !insn.addr !4801
  %139 = load i32, i32* %138, align 4, !insn.addr !4801
  %140 = add i32 %139, 8, !insn.addr !4802
  %141 = inttoptr i32 %140 to i32*, !insn.addr !4802
  %142 = load i32, i32* %141, align 4, !insn.addr !4802
  %143 = add i32 %142, %134, !insn.addr !4802
  store i32 %143, i32* %ecx, align 4, !insn.addr !4802
  %144 = load i32, i32* %128, align 4, !insn.addr !4803
  store i32* %128, i32** %.pre-phi.reg2mem, !insn.addr !4803
  store i32 %144, i32* %eax.0.reg2mem, !insn.addr !4803
  br label %dec_label_pc_100bbb0, !insn.addr !4803

dec_label_pc_100bbb0:                             ; preds = %dec_label_pc_100b9ad.dec_label_pc_100bbb0_crit_edge, %dec_label_pc_100bba8
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %145 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !4804
  %146 = load i32, i32* %145, align 4, !insn.addr !4804
  %147 = add i32 %146, 8, !insn.addr !4805
  %148 = inttoptr i32 %147 to i32*, !insn.addr !4805
  store i32 0, i32* %148, align 4, !insn.addr !4805
  %149 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !4791
  %150 = load i32, i32* %ecx, align 4, !insn.addr !4806
  %151 = add i32 %150, -1, !insn.addr !4806
  %152 = add i32 %73, -1961990455, !insn.addr !4807
  %153 = inttoptr i32 %152 to i8*, !insn.addr !4807
  %154 = load i8, i8* %153, align 1, !insn.addr !4807
  %155 = trunc i32 %149 to i8
  %156 = add i8 %155, 67, !insn.addr !4807
  %157 = or i8 %154, %156, !insn.addr !4807
  store i8 %157, i8* %153, align 1, !insn.addr !4807
  %158 = inttoptr i32 %151 to i8*, !insn.addr !4808
  %159 = load i8, i8* %158, align 1, !insn.addr !4808
  %160 = udiv i32 %151, 256, !insn.addr !4808
  %161 = trunc i32 %160 to i8, !insn.addr !4808
  %162 = add i8 %159, %161, !insn.addr !4808
  store i8 %162, i8* %158, align 1, !insn.addr !4808
  %163 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !4809
  %164 = add i32 %89, -1386183932, !insn.addr !4810
  %165 = inttoptr i32 %164 to i32*, !insn.addr !4810
  %166 = load i32, i32* %165, align 4, !insn.addr !4810
  %167 = add i32 %89, -62, !insn.addr !4811
  %168 = inttoptr i32 %167 to i8*, !insn.addr !4811
  %169 = load i8, i8* %168, align 1, !insn.addr !4811
  %170 = trunc i32 %166 to i8, !insn.addr !4811
  %171 = add i8 %169, %170, !insn.addr !4811
  store i8 %171, i8* %168, align 1, !insn.addr !4811
  %172 = add i32 %163, 246, !insn.addr !4812
  %173 = and i32 %172, 255, !insn.addr !4812
  %174 = and i32 %163, -256, !insn.addr !4812
  %175 = or i32 %173, %174, !insn.addr !4812
  ret i32 %175, !insn.addr !4812
}

define i32 @function_100bbd4() local_unnamed_addr {
dec_label_pc_100bbd4:
  %eax.0.reg2mem = alloca i32, !insn.addr !4813
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i32 @__asm_int1(), !insn.addr !4814
  %9 = icmp eq i1 %7, %5, !insn.addr !4815
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !4815
  br i1 %9, label %dec_label_pc_100bbd9, label %dec_label_pc_100bc4d, !insn.addr !4815

dec_label_pc_100bbd9:                             ; preds = %dec_label_pc_100bbd4
  %10 = or i32 %8, 139, !insn.addr !4816
  %11 = inttoptr i32 %10 to i32*, !insn.addr !4817
  %12 = load i32, i32* %11, align 4, !insn.addr !4817
  %13 = call i32 @function_100c518(i32 %12), !insn.addr !4818
  %14 = add i32 %2, -36, !insn.addr !4819
  %15 = call i8 @__readfsbyte(i32 %14), !insn.addr !4819
  call void @__writefsbyte(i32 %14, i8 undef), !insn.addr !4819
  %16 = and i32 %3, -65281, !insn.addr !4820
  %17 = or i32 %16, 9216, !insn.addr !4820
  %18 = add i32 %17, 126554624, !insn.addr !4821
  %19 = inttoptr i32 %18 to i8*, !insn.addr !4821
  %20 = load i8, i8* %19, align 1, !insn.addr !4821
  %21 = trunc i32 %3 to i8, !insn.addr !4821
  %22 = and i8 %20, %21, !insn.addr !4821
  store i8 %22, i8* %19, align 1, !insn.addr !4821
  %23 = add i32 %1, 4, !insn.addr !4822
  %24 = inttoptr i32 %23 to i32*, !insn.addr !4822
  %25 = load i32, i32* %24, align 4, !insn.addr !4822
  %26 = add i32 %13, -96, !insn.addr !4823
  %27 = inttoptr i32 %26 to i32*, !insn.addr !4823
  %28 = load i32, i32* %27, align 4, !insn.addr !4823
  %29 = add i32 %28, 110, !insn.addr !4823
  store i32 %29, i32* %27, align 4, !insn.addr !4823
  %30 = call x86_fp80 @function_101276c(i32 %25), !insn.addr !4824
  %31 = call i32 @unknown_4600ab09(i32 %0), !insn.addr !4825
  %32 = add i32 %2, 1688272900, !insn.addr !4826
  %33 = inttoptr i32 %32 to i32*, !insn.addr !4826
  %34 = load i32, i32* %33, align 4, !insn.addr !4826
  %35 = add i32 %34, 79, !insn.addr !4826
  %36 = icmp ugt i32 %34, -80, !insn.addr !4826
  store i32 %35, i32* %33, align 4, !insn.addr !4826
  br i1 %36, label %dec_label_pc_100bc46, label %dec_label_pc_100bc1f, !insn.addr !4827

dec_label_pc_100bc1f:                             ; preds = %dec_label_pc_100bbd9
  %37 = add i32 %1, 232, !insn.addr !4828
  %38 = and i32 %1, -65536, !insn.addr !4828
  %39 = trunc i32 %37 to i8, !insn.addr !4829
  %40 = icmp ugt i8 %39, -66
  %41 = icmp ult i8 %39, -65
  %42 = add i32 %1, 41
  %43 = select i1 %41, i32 %37, i32 %42, !insn.addr !4829
  %44 = and i32 %43, 255, !insn.addr !4829
  %45 = or i32 %44, %38, !insn.addr !4829
  %46 = zext i1 %40 to i32, !insn.addr !4829
  %47 = mul i32 %46, 256, !insn.addr !4829
  %48 = or i32 %45, %47, !insn.addr !4829
  ret i32 %48, !insn.addr !4829

dec_label_pc_100bc46:                             ; preds = %dec_label_pc_100bbd9
  %49 = select i1 %6, i32 -4, i32 4, !insn.addr !4830
  %50 = add i32 %49, %1, !insn.addr !4830
  %51 = inttoptr i32 %50 to i8*, !insn.addr !4831
  call void @__asm_rep_movsd_memcpy(i8* inttoptr (i32 126600191 to i8*), i8* %51, i32 %4), !insn.addr !4831
  br label %dec_label_pc_100bc4d, !insn.addr !4832

dec_label_pc_100bc4d:                             ; preds = %dec_label_pc_100bbd4, %dec_label_pc_100bc46
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4833
}

define i32 @function_100bc53(i32 %arg1) local_unnamed_addr {
dec_label_pc_100bc53:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100bc54() local_unnamed_addr {
dec_label_pc_100bc54:
  %ebp.0.reg2mem = alloca i32, !insn.addr !4834
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_6()
  %6 = trunc i32 %4 to i8
  %7 = xor i8 %6, -125, !insn.addr !4835
  store i8 %7, i8* inttoptr (i32 140348243 to i8*), align 1, !insn.addr !4835
  %8 = add i32 %0, 12, !insn.addr !4836
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4836
  %10 = load i32, i32* %9, align 4, !insn.addr !4836
  %11 = call x86_fp80 @__asm_fbstp(x86_fp80 %5), !insn.addr !4837
  %12 = add i32 %10, 4, !insn.addr !4837
  %13 = inttoptr i32 %12 to x86_fp80*, !insn.addr !4837
  store x86_fp80 %11, x86_fp80* %13, align 4, !insn.addr !4837
  %14 = add i32 %1, 1554180100, !insn.addr !4838
  %15 = inttoptr i32 %14 to i8*, !insn.addr !4838
  %16 = load i8, i8* %15, align 1, !insn.addr !4838
  %17 = inttoptr i32 %10 to i8*, !insn.addr !4839
  %18 = load i8, i8* %17, align 1, !insn.addr !4839
  %19 = trunc i32 %2 to i8, !insn.addr !4839
  %20 = add i8 %18, %19, !insn.addr !4839
  store i8 %20, i8* %17, align 1, !insn.addr !4839
  %21 = icmp eq i32 %1, 0, !insn.addr !4840
  br i1 %21, label %dec_label_pc_100bcb1, label %dec_label_pc_100bc75, !insn.addr !4841

dec_label_pc_100bc75:                             ; preds = %dec_label_pc_100bc54
  %22 = and i32 %3, -65281, !insn.addr !4838
  %23 = udiv i32 %3, 256, !insn.addr !4838
  %24 = trunc i32 %23 to i8, !insn.addr !4838
  %25 = sub i8 %24, %16, !insn.addr !4838
  %26 = zext i8 %25 to i32, !insn.addr !4838
  %27 = mul i32 %26, 256, !insn.addr !4838
  %28 = or i32 %27, %22, !insn.addr !4838
  %29 = add i32 %1, 4, !insn.addr !4842
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4842
  %31 = load i32, i32* %30, align 4, !insn.addr !4842
  %32 = add i32 %28, 1, !insn.addr !4843
  %33 = inttoptr i32 %31 to i32*, !insn.addr !4844
  store i32 %32, i32* %33, align 4, !insn.addr !4844
  %34 = add i32 %0, 4, !insn.addr !4845
  %35 = inttoptr i32 %34 to i32*, !insn.addr !4845
  store i32 %10, i32* %35, align 4, !insn.addr !4845
  %36 = add i32 %31, 139, !insn.addr !4846
  %37 = and i32 %36, 255, !insn.addr !4846
  %38 = and i32 %31, -256, !insn.addr !4846
  %39 = or i32 %37, %38, !insn.addr !4846
  %40 = add i32 %0, 2, !insn.addr !4847
  %41 = inttoptr i32 %40 to i16*, !insn.addr !4847
  %42 = inttoptr i32 %39 to i32*, !insn.addr !4848
  %43 = load i32, i32* %42, align 4, !insn.addr !4848
  %44 = mul i32 %43, %2, !insn.addr !4848
  store i32 %44, i32* %42, align 4, !insn.addr !4849
  %45 = inttoptr i32 %12 to i32*, !insn.addr !4850
  %46 = load i32, i32* %45, align 4, !insn.addr !4850
  %47 = add i32 %0, -2, !insn.addr !4851
  %48 = inttoptr i32 %47 to i32*, !insn.addr !4851
  store i32 -2147483613, i32* %48, align 4, !insn.addr !4851
  %49 = inttoptr i32 %46 to i32*, !insn.addr !4852
  store i32 %32, i32* %49, align 4, !insn.addr !4852
  %50 = inttoptr i32 %10 to i32*, !insn.addr !4853
  %51 = load i32, i32* %50, align 4, !insn.addr !4853
  %52 = add i32 %0, -6, !insn.addr !4853
  %53 = inttoptr i32 %52 to i32*, !insn.addr !4853
  store i32 %51, i32* %53, align 4, !insn.addr !4853
  %54 = add i32 %0, -10, !insn.addr !4854
  %55 = inttoptr i32 %54 to i32*, !insn.addr !4854
  %56 = call i32 @unknown_30161a3c(), !insn.addr !4855
  %57 = call i32 @function_100bd5b(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4856
  ret i32 %57, !insn.addr !4856

dec_label_pc_100bcb1:                             ; preds = %dec_label_pc_100bc54, %dec_label_pc_100bcb1
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %58 = add i32 %ebp.0.reload, -1, !insn.addr !4857
  %59 = icmp eq i32 %58, 0, !insn.addr !4857
  %60 = icmp eq i1 %59, false, !insn.addr !4858
  store i32 %58, i32* %ebp.0.reg2mem, !insn.addr !4858
  br i1 %60, label %dec_label_pc_100bcb1, label %dec_label_pc_100bcb5, !insn.addr !4858

dec_label_pc_100bcb5:                             ; preds = %dec_label_pc_100bcb1
  ret i32 0, !insn.addr !4858
}

define i32 @function_100bcb6(i16 %arg1) local_unnamed_addr {
dec_label_pc_100bcb6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %stack_var_-14 = alloca i32, align 4
  %4 = add i32 %0, 71315971, !insn.addr !4859
  %5 = inttoptr i32 %4 to i8*, !insn.addr !4859
  %6 = load i8, i8* %5, align 1, !insn.addr !4859
  %7 = trunc i32 %1 to i8, !insn.addr !4859
  %8 = add i8 %6, %7, !insn.addr !4859
  %9 = xor i8 %8, %6, !insn.addr !4859
  %10 = xor i8 %8, %7, !insn.addr !4859
  %11 = and i8 %9, %10, !insn.addr !4859
  %12 = icmp slt i8 %11, 0, !insn.addr !4859
  store i8 %8, i8* %5, align 1, !insn.addr !4859
  %13 = icmp eq i1 %12, false, !insn.addr !4860
  br i1 %13, label %dec_label_pc_100bcd7, label %dec_label_pc_100bcd3, !insn.addr !4860

dec_label_pc_100bcd3:                             ; preds = %dec_label_pc_100bcb6
  ret i32 %2, !insn.addr !4861

dec_label_pc_100bcd7:                             ; preds = %dec_label_pc_100bcb6
  %14 = load i32, i32* inttoptr (i32 -1789115083 to i32*), align 4, !insn.addr !4862
  %15 = add i32 %2, 318767116, !insn.addr !4863
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4863
  %17 = load i32, i32* %16, align 4, !insn.addr !4863
  %18 = and i32 %17, %0, !insn.addr !4863
  store i32 %18, i32* %16, align 4, !insn.addr !4863
  %19 = and i32 %2, 3, !insn.addr !4864
  %20 = inttoptr i32 %2 to i8*, !insn.addr !4865
  call void @__asm_rep_movsb_memcpy(i8* %20, i8* inttoptr (i32 -1510800663 to i8*), i32 %19), !insn.addr !4865
  %21 = add i32 %19, %2, !insn.addr !4865
  %22 = add i32 %14, 12, !insn.addr !4866
  %23 = inttoptr i32 %22 to i32*, !insn.addr !4866
  %24 = load i32, i32* %23, align 4, !insn.addr !4866
  %25 = add i32 %24, 4, !insn.addr !4867
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4867
  %27 = load i32, i32* %26, align 4, !insn.addr !4867
  %28 = add i32 %14, -4, !insn.addr !4868
  %29 = call i32 @function_1011e14(i32 %28, i32 %27), !insn.addr !4869
  %30 = load i32, i32* %26, align 4, !insn.addr !4870
  store i32 %30, i32* %stack_var_-14, align 4, !insn.addr !4870
  %31 = ptrtoint i32* %stack_var_-14 to i32, !insn.addr !4870
  %32 = inttoptr i32 %21 to i32*, !insn.addr !4871
  store i32 %29, i32* %32, align 4, !insn.addr !4871
  %33 = load i32, i32* %stack_var_-14, align 4, !insn.addr !4872
  %34 = call i32 @unknown_dff0e8(i16 %3, i32 %33), !insn.addr !4872
  %35 = inttoptr i32 %24 to i32*, !insn.addr !4873
  %36 = load i32, i32* %35, align 4, !insn.addr !4873
  %37 = add i32 %36, %31, !insn.addr !4873
  store i32 %37, i32* %35, align 4, !insn.addr !4873
  %38 = xor i32 %34, 128, !insn.addr !4874
  %39 = add i32 %38, 4, !insn.addr !4875
  %40 = inttoptr i32 %39 to i32*, !insn.addr !4875
  %41 = load i32, i32* %40, align 4, !insn.addr !4875
  %sext = mul i32 %41, 65536
  %42 = sdiv i32 %sext, 65536, !insn.addr !4876
  %43 = call i32 @function_101763c(i32 %38, i32 %42), !insn.addr !4876
  %44 = inttoptr i32 %0 to i32*, !insn.addr !4877
  %45 = load i32, i32* %44, align 4, !insn.addr !4877
  %46 = add i32 %45, 4, !insn.addr !4878
  %47 = inttoptr i32 %46 to i32*, !insn.addr !4878
  %48 = load i32, i32* %47, align 4, !insn.addr !4878
  %49 = call i32 @unknown_1000ac1(i32 %48), !insn.addr !4879
  %50 = load i32, i32* %44, align 4, !insn.addr !4880
  %51 = add i32 %50, 4, !insn.addr !4881
  %52 = inttoptr i32 %51 to i32*, !insn.addr !4881
  store i32 0, i32* %52, align 4, !insn.addr !4881
  %53 = load i32, i32* %44, align 4, !insn.addr !4882
  %54 = add i32 %53, 4, !insn.addr !4883
  %55 = inttoptr i32 %54 to i32*, !insn.addr !4883
  %56 = load i32, i32* %55, align 4, !insn.addr !4883
  %57 = inttoptr i32 %56 to i32*, !insn.addr !4884
  store i32 60417, i32* %57, align 4, !insn.addr !4884
  ret i32 %56, !insn.addr !4885
}

define i32 @function_100bd5b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100bd5b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4886
}

define i32 @function_100bd61(i32 %arg1) local_unnamed_addr {
dec_label_pc_100bd61:
  %0 = call i32 @function_1011a18(), !insn.addr !4887
  ret i32 %0, !insn.addr !4888
}

define i32 @function_100bd6f(i32 %arg1) local_unnamed_addr {
dec_label_pc_100bd6f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100bd7e(i32 %arg1, i16 %arg2) local_unnamed_addr {
dec_label_pc_100bd7e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100bdb3() local_unnamed_addr {
dec_label_pc_100bdb3:
  %0 = call i32 @function_100bdd0(), !insn.addr !4889
  ret i32 %0, !insn.addr !4889
}

define i32 @function_100bdba() local_unnamed_addr {
dec_label_pc_100bdba:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4890
}

define i32 @function_100bdd0() local_unnamed_addr {
dec_label_pc_100bdd0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-10 = alloca i32, align 4
  %6 = add i32 %1, 1, !insn.addr !4891
  %7 = xor i32 %4, 42, !insn.addr !4892
  %8 = add i32 %7, %3, !insn.addr !4893
  %9 = inttoptr i32 %3 to i32*, !insn.addr !4893
  store i32 %8, i32* %9, align 4, !insn.addr !4893
  %10 = add i32 %1, 13, !insn.addr !4894
  %11 = call i32 @function_100d5eb(i32 %10), !insn.addr !4895
  %12 = add i32 %0, 4, !insn.addr !4896
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4896
  %14 = load i32, i32* %13, align 4, !insn.addr !4896
  %15 = call i32 @function_1007bc1(i32 %14), !insn.addr !4897
  %16 = add i32 %15, 4, !insn.addr !4898
  %17 = inttoptr i32 %16 to i32*, !insn.addr !4898
  store i32 0, i32* %17, align 4, !insn.addr !4898
  %18 = load i8, i8* @global_var_1014f64, align 1, !insn.addr !4899
  %19 = sext i8 %18 to i32, !insn.addr !4899
  store i32 %19, i32* %13, align 4, !insn.addr !4900
  %20 = load i32, i32* inttoptr (i32 22761316 to i32*), align 4, !insn.addr !4901
  %21 = add i8 %18, -117, !insn.addr !4902
  %22 = zext i8 %21 to i32, !insn.addr !4902
  %23 = and i32 %19, -256, !insn.addr !4902
  %24 = add i32 %2, 210568312, !insn.addr !4903
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4903
  %26 = load i32, i32* %25, align 4, !insn.addr !4903
  %27 = udiv i32 %26, 2, !insn.addr !4903
  %28 = shl i32 %26, 31, !insn.addr !4903
  %29 = or i32 %27, %28, !insn.addr !4903
  store i32 %29, i32* %25, align 4, !insn.addr !4903
  %30 = select i1 %5, i32 -4, i32 4, !insn.addr !4904
  %31 = add i32 %30, %0, !insn.addr !4904
  %32 = add nsw i32 %30, -1, !insn.addr !4905
  %33 = add i32 %32, %20, !insn.addr !4904
  %34 = or i32 %23, %22, !insn.addr !4906
  %35 = inttoptr i32 %34 to i8*, !insn.addr !4907
  %36 = load i8, i8* %35, align 1, !insn.addr !4907
  %37 = add i8 %36, %21, !insn.addr !4907
  store i8 %37, i8* %35, align 1, !insn.addr !4907
  %38 = ptrtoint i32* %stack_var_-10 to i32, !insn.addr !4908
  %39 = add i32 %0, -4, !insn.addr !4909
  %40 = inttoptr i32 %39 to i32*, !insn.addr !4909
  store i32 %6, i32* %40, align 4, !insn.addr !4909
  %41 = inttoptr i32 %33 to i8*, !insn.addr !4910
  %42 = inttoptr i32 %31 to i8*, !insn.addr !4910
  call void @__asm_rep_movsb_memcpy(i8* %42, i8* %41, i32 %0), !insn.addr !4910
  ret i32 %38, !insn.addr !4911
}

define i32 @function_100be29(i32 %arg1) local_unnamed_addr {
dec_label_pc_100be29:
  %0 = inttoptr i32 %arg1 to i32*, !insn.addr !4912
  %1 = load i32, i32* %0, align 4, !insn.addr !4912
  ret i32 %1, !insn.addr !4912
}

define i32 @function_100be30() local_unnamed_addr {
dec_label_pc_100be30:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = or i32 %0, 232, !insn.addr !4913
  ret i32 %1, !insn.addr !4914
}

define i32 @function_100be3b() local_unnamed_addr {
dec_label_pc_100be3b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1578650886, !insn.addr !4915
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4915
  %4 = load i32, i32* %3, align 4, !insn.addr !4915
  %5 = add i32 %4, -1, !insn.addr !4915
  store i32 %5, i32* %3, align 4, !insn.addr !4915
  ret i32 %1, !insn.addr !4916
}

define i32 @function_100be5f() local_unnamed_addr {
dec_label_pc_100be5f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4917
}

define i32 @function_100be63() local_unnamed_addr {
dec_label_pc_100be63:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100be9c() local_unnamed_addr {
dec_label_pc_100be9c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = inttoptr i32 %1 to i8*, !insn.addr !4918
  %7 = inttoptr i32 %0 to i8*, !insn.addr !4918
  call void @__asm_rep_movsd_memcpy(i8* %7, i8* %6, i32 %3), !insn.addr !4918
  %8 = select i1 %5, i32 -4, i32 4, !insn.addr !4918
  %9 = mul i32 %8, %3, !insn.addr !4918
  %10 = add i32 %9, %0, !insn.addr !4918
  %11 = zext i16 %4 to i32, !insn.addr !4919
  %12 = add i32 %2, -4, !insn.addr !4920
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4920
  %14 = load i32, i32* %13, align 4, !insn.addr !4920
  %15 = add i32 %14, -43, !insn.addr !4921
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4921
  %17 = load i32, i32* %16, align 4, !insn.addr !4921
  %18 = call i32 @function_1007bc1(i32 %17), !insn.addr !4922
  %19 = load i32, i32* %13, align 4, !insn.addr !4923
  %20 = add i32 %19, 4, !insn.addr !4924
  %21 = inttoptr i32 %20 to i32*, !insn.addr !4924
  %22 = load i8*, i8** @global_var_1014f88, align 4, !insn.addr !4925
  %23 = ptrtoint i8* %22 to i32, !insn.addr !4925
  %24 = add i32 %23, -33, !insn.addr !4926
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4926
  %26 = load i32, i32* %25, align 4, !insn.addr !4926
  %27 = add i32 %26, 232, !insn.addr !4927
  %28 = and i32 %27, 255, !insn.addr !4927
  %29 = and i32 %26, -256, !insn.addr !4927
  %30 = or i32 %28, %29, !insn.addr !4927
  %31 = xor i32 %30, 1761607506, !insn.addr !4928
  %32 = add i32 %2, -1, !insn.addr !4929
  %33 = add nuw nsw i32 %11, 4, !insn.addr !4930
  %34 = inttoptr i32 %33 to i32*, !insn.addr !4930
  store i32 %31, i32* %34, align 4, !insn.addr !4930
  %35 = add i32 %10, 4, !insn.addr !4931
  %36 = inttoptr i32 %35 to i32*, !insn.addr !4931
  %37 = load i32, i32* %36, align 4, !insn.addr !4931
  %38 = add i32 %2, -66, !insn.addr !4932
  %39 = inttoptr i32 %38 to i32*, !insn.addr !4932
  %40 = load i32, i32* %39, align 4, !insn.addr !4932
  %41 = add i32 %37, 4, !insn.addr !4933
  %42 = inttoptr i32 %41 to i32*, !insn.addr !4933
  %43 = load i32, i32* %42, align 4, !insn.addr !4933
  %44 = add i32 %40, 918926529, !insn.addr !4934
  %45 = inttoptr i32 %44 to i32*, !insn.addr !4934
  %46 = load i32, i32* %45, align 4, !insn.addr !4934
  %47 = inttoptr i32 %43 to i32*, !insn.addr !4935
  %48 = load i32, i32* %47, align 4, !insn.addr !4935
  %49 = inttoptr i32 %10 to i32*, !insn.addr !4935
  store i32 %48, i32* %49, align 4, !insn.addr !4935
  %50 = add i32 %43, 4, !insn.addr !4935
  %51 = add i32 %46, -4, !insn.addr !4936
  %52 = inttoptr i32 %51 to i32*, !insn.addr !4936
  store i32 %32, i32* %52, align 4, !insn.addr !4936
  %53 = add i32 %46, 25451, !insn.addr !4937
  %54 = inttoptr i32 %53 to i32*, !insn.addr !4937
  store i32 %40, i32* %54, align 4, !insn.addr !4937
  %55 = inttoptr i32 %50 to i8*, !insn.addr !4938
  %56 = inttoptr i32 %35 to i8*, !insn.addr !4938
  call void @__asm_rep_movsb_memcpy(i8* %56, i8* %55, i32 0), !insn.addr !4938
  %57 = call i32 @unknown_99bdb7(), !insn.addr !4939
  ret i32 %57, !insn.addr !4939
}

define i32 @function_100beff(i32 %arg1) local_unnamed_addr {
dec_label_pc_100beff:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -74, !insn.addr !4940
  %2 = inttoptr i32 %1 to i32*, !insn.addr !4940
  %3 = load i32, i32* %2, align 4, !insn.addr !4940
  %4 = call i32 @unknown_7200dff5(i32 %3), !insn.addr !4941
  ret i32 %4, !insn.addr !4942
}

define i32 @function_100bf18() local_unnamed_addr {
dec_label_pc_100bf18:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i16, !insn.addr !4943
  %4 = call i8 @__asm_in.3(i16 %3), !insn.addr !4943
  %5 = add i32 %1, 8, !insn.addr !4944
  %6 = inttoptr i32 %5 to i32*, !insn.addr !4944
  %7 = load i32, i32* %6, align 4, !insn.addr !4944
  %8 = inttoptr i32 %7 to i32*, !insn.addr !4945
  %9 = load i32, i32* %8, align 4, !insn.addr !4945
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4946
  %11 = load i32, i32* %10, align 4, !insn.addr !4946
  %12 = call i32 @unknown_79085f18(i32 %11, i32 %7, i32 %0), !insn.addr !4947
  %13 = add i32 %12, -603963787, !insn.addr !4948
  %14 = xor i32 %13, ptrtoint (i32* @global_var_1014ff0 to i32), !insn.addr !4949
  ret i32 %14, !insn.addr !4950
}

define i32 @function_100bf43() local_unnamed_addr {
dec_label_pc_100bf43:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i32 @function_1008c96(), !insn.addr !4951
  %6 = load i32, i32* inttoptr (i32 -316001176 to i32*), align 8, !insn.addr !4952
  %7 = add i32 %6, 1, !insn.addr !4952
  store i32 %7, i32* inttoptr (i32 -316001176 to i32*), align 8, !insn.addr !4952
  %8 = add i32 %2, 12, !insn.addr !4953
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4954
  store i32 -2144075683, i32* %9, align 4, !insn.addr !4954
  %10 = call i32 @function_101a670(i32 %8), !insn.addr !4955
  %11 = load i32, i32* %9, align 4, !insn.addr !4956
  %12 = call i32 @unknown_ab0081f8(i32 %11, i32 %0), !insn.addr !4957
  %13 = inttoptr i32 %0 to i32*, !insn.addr !4958
  store i32 %12, i32* %13, align 4, !insn.addr !4958
  %14 = select i1 %4, i32 -4, i32 4, !insn.addr !4958
  store i32 %12, i32* %9, align 4, !insn.addr !4959
  %15 = call i32 @unknown_4b007bd1(), !insn.addr !4960
  %16 = add i32 %2, 56, !insn.addr !4961
  %17 = inttoptr i32 %16 to i32*, !insn.addr !4961
  %18 = load i32, i32* %17, align 4, !insn.addr !4961
  %19 = and i32 %18, -57, !insn.addr !4961
  store i32 %19, i32* %17, align 4, !insn.addr !4961
  %20 = call i32 @function_1007ba3(), !insn.addr !4962
  %21 = add i32 %2, -4, !insn.addr !4963
  %22 = inttoptr i32 %21 to i32*, !insn.addr !4963
  store i32 %20, i32* %22, align 4, !insn.addr !4963
  %23 = inttoptr i32 %20 to i32*, !insn.addr !4964
  %24 = load i32, i32* %23, align 4, !insn.addr !4964
  %25 = call i32 @function_1007bc1(i32 %24), !insn.addr !4965
  %26 = load i32, i32* %22, align 4, !insn.addr !4966
  %27 = xor i32 %3, -95, !insn.addr !4967
  %28 = inttoptr i32 %3 to i32*, !insn.addr !4967
  store i32 %27, i32* %28, align 4, !insn.addr !4967
  %29 = add i32 %0, -1, !insn.addr !4958
  %30 = add i32 %29, %14, !insn.addr !4968
  %31 = inttoptr i32 %30 to i32*, !insn.addr !4969
  %32 = load i32, i32* %31, align 4, !insn.addr !4969
  %33 = add i32 %32, %1, !insn.addr !4969
  store i32 %33, i32* %31, align 4, !insn.addr !4969
  %34 = call i8 @__asm_in.1(i8 0), !insn.addr !4970
  %35 = sext i8 %34 to i32, !insn.addr !4970
  %36 = and i32 %26, -256, !insn.addr !4970
  %37 = or i32 %36, %35, !insn.addr !4970
  ret i32 %37, !insn.addr !4971
}

define i32 @function_100bf9c() local_unnamed_addr {
dec_label_pc_100bf9c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !4972
}

define i32 @function_100bfba() local_unnamed_addr {
dec_label_pc_100bfba:
  %0 = call i32 @function_8ca6b2c3(), !insn.addr !4973
  ret i32 %0, !insn.addr !4973
}

define i32 @function_100bfce() local_unnamed_addr {
dec_label_pc_100bfce:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100c00d() local_unnamed_addr {
dec_label_pc_100c00d:
  %0 = call i32 @function_8ca61814(), !insn.addr !4974
  ret i32 %0, !insn.addr !4974
}

define i32 @function_100c014() local_unnamed_addr {
dec_label_pc_100c014:
  %0 = call i32 @function_100c071(), !insn.addr !4975
  ret i32 %0, !insn.addr !4975
}

define i32 @function_100c027() local_unnamed_addr {
dec_label_pc_100c027:
  %eax.0.reg2mem = alloca i32, !insn.addr !4976
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -5, !insn.addr !4976
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4976
  %4 = load i32, i32* %3, align 4, !insn.addr !4976
  %5 = xor i32 %4, %0, !insn.addr !4976
  %6 = icmp eq i32 %5, 0, !insn.addr !4976
  %7 = icmp slt i32 %5, 0, !insn.addr !4976
  store i32 %5, i32* %3, align 4, !insn.addr !4976
  %8 = icmp eq i1 %7, false, !insn.addr !4977
  %9 = icmp eq i1 %6, false, !insn.addr !4977
  %10 = icmp eq i1 %8, %9, !insn.addr !4977
  br i1 %10, label %11, label %dec_label_pc_100c031, !insn.addr !4977

; <label>:11:                                     ; preds = %dec_label_pc_100c027
  %12 = call i32 @function_100bfce(), !insn.addr !4977
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !4977
  br label %dec_label_pc_100c031, !insn.addr !4977

dec_label_pc_100c031:                             ; preds = %11, %dec_label_pc_100c027
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !4978
}

define i32 @function_100c04b() local_unnamed_addr {
dec_label_pc_100c04b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -398786810, !insn.addr !4979
  %3 = inttoptr i32 %2 to i32*, !insn.addr !4979
  %4 = load i32, i32* %3, align 4, !insn.addr !4979
  %5 = add i32 %4, -1, !insn.addr !4979
  store i32 %5, i32* %3, align 4, !insn.addr !4979
  ret i32 %1, !insn.addr !4980
}

define i32 @function_100c05c() local_unnamed_addr {
dec_label_pc_100c05c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100c065() local_unnamed_addr {
dec_label_pc_100c065:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %1, -256, !insn.addr !4981
  %4 = and i32 %0, 255, !insn.addr !4982
  %5 = or i32 %3, %4, !insn.addr !4982
  call void @__asm_into(i32 %2), !insn.addr !4983
  ret i32 %5, !insn.addr !4984
}

define i32 @function_100c071() local_unnamed_addr {
dec_label_pc_100c071:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 12, !insn.addr !4985
  %2 = inttoptr i32 %1 to i32*, !insn.addr !4985
  store i32 -2144075775, i32* %2, align 4, !insn.addr !4985
  %3 = call i32 @function_1012670(i32 1166278913), !insn.addr !4986
  ret i32 %3, !insn.addr !4987
}

define i32 @function_100c088() local_unnamed_addr {
dec_label_pc_100c088:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @function_10081f8(), !insn.addr !4988
  %4 = or i32 %3, 232, !insn.addr !4989
  %5 = and i32 %3, -256, !insn.addr !4989
  %6 = udiv i32 %2, 256, !insn.addr !4990
  %7 = add i32 %4, %6, !insn.addr !4990
  %8 = and i32 %7, 255, !insn.addr !4990
  %9 = or i32 %8, %5, !insn.addr !4990
  %10 = inttoptr i32 %9 to i32*, !insn.addr !4991
  %11 = load i32, i32* %10, align 4, !insn.addr !4991
  %12 = add i32 %1, 1334878464, !insn.addr !4992
  %13 = inttoptr i32 %12 to i32*, !insn.addr !4992
  %14 = load i32, i32* %13, align 4, !insn.addr !4992
  %15 = and i32 %14, -21, !insn.addr !4992
  store i32 %15, i32* %13, align 4, !insn.addr !4992
  %16 = add i32 %1, 2121334528, !insn.addr !4993
  %17 = inttoptr i32 %16 to i32*, !insn.addr !4993
  %18 = load i32, i32* %17, align 4, !insn.addr !4993
  %19 = add i32 %18, %2, !insn.addr !4993
  store i32 %19, i32* %17, align 4, !insn.addr !4993
  %20 = call i32 @function_1007c0e(i32 %11), !insn.addr !4994
  %21 = add i32 %2, -4, !insn.addr !4995
  %22 = inttoptr i32 %21 to i32*, !insn.addr !4995
  %23 = load i32, i32* %22, align 4, !insn.addr !4995
  %24 = inttoptr i32 %23 to i32*, !insn.addr !4996
  store i32 %20, i32* %24, align 4, !insn.addr !4996
  %25 = load i32, i32* inttoptr (i32 -2013151600 to i32*), align 16, !insn.addr !4997
  %26 = inttoptr i32 %25 to i32*, !insn.addr !4998
  %27 = load i32, i32* %26, align 4, !insn.addr !4998
  %28 = trunc i32 %25 to i8, !insn.addr !4999
  %29 = add i32 %0, -4, !insn.addr !4999
  %30 = inttoptr i32 %29 to i8*, !insn.addr !4999
  %31 = load i8, i8* %30, align 1, !insn.addr !4999
  %32 = xor i8 %31, %28, !insn.addr !4999
  %33 = zext i8 %32 to i32, !insn.addr !4999
  %34 = and i32 %25, -256, !insn.addr !4999
  %35 = or i32 %34, %33, !insn.addr !4999
  %36 = inttoptr i32 %35 to i32*, !insn.addr !5000
  %37 = load i32, i32* %36, align 4, !insn.addr !5000
  %38 = mul i32 %27, 5, !insn.addr !5001
  %39 = inttoptr i32 %35 to i8*, !insn.addr !5002
  %40 = load i8, i8* %39, align 1, !insn.addr !5002
  %41 = add i8 %40, %32, !insn.addr !5002
  store i8 %41, i8* %39, align 1, !insn.addr !5002
  %42 = mul i32 %27, 2560, !insn.addr !5003
  %43 = udiv i32 %38, 8388608, !insn.addr !5003
  %44 = or i32 %43, %42, !insn.addr !5003
  %45 = inttoptr i32 %27 to i32*, !insn.addr !5004
  %46 = load i32, i32* %45, align 4, !insn.addr !5004
  %47 = inttoptr i32 %37 to i32*, !insn.addr !5004
  store i32 %46, i32* %47, align 4, !insn.addr !5004
  %48 = add i32 %27, 4, !insn.addr !5004
  %49 = and i32 %43, 94, !insn.addr !5005
  %50 = inttoptr i32 %48 to i8*, !insn.addr !5006
  %51 = inttoptr i32 %44 to i8*, !insn.addr !5006
  call void @__asm_rep_movsb_memcpy(i8* %51, i8* %50, i32 %49), !insn.addr !5006
  %52 = add i32 %0, 21, !insn.addr !5007
  %53 = inttoptr i32 %52 to i32*, !insn.addr !5007
  %54 = load i32, i32* %53, align 4, !insn.addr !5007
  ret i32 %54, !insn.addr !5008
}

define i32 @function_100c108() local_unnamed_addr {
dec_label_pc_100c108:
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %2, 4, !insn.addr !5009
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5009
  %5 = load i32, i32* inttoptr (i32 26693520 to i32*), align 16, !insn.addr !5010
  %6 = add i32 %5, 4, !insn.addr !5011
  %7 = inttoptr i32 %6 to i8*, !insn.addr !5011
  store i8 -1, i8* %7, align 1, !insn.addr !5011
  %8 = add i32 %1, 139, !insn.addr !5012
  %9 = and i32 %8, 255, !insn.addr !5012
  %10 = and i32 %1, -256, !insn.addr !5012
  %11 = or i32 %9, %10, !insn.addr !5012
  %12 = add i32 %11, 4, !insn.addr !5013
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5013
  %14 = load i32, i32* %13, align 4, !insn.addr !5013
  %15 = add i32 %0, 73, !insn.addr !5014
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5014
  %17 = load i32, i32* %16, align 4, !insn.addr !5014
  %18 = mul i32 %1, 512, !insn.addr !5015
  %19 = udiv i32 %1, 8388608, !insn.addr !5015
  %20 = or i32 %19, %18, !insn.addr !5015
  %21 = inttoptr i32 %1 to i32*, !insn.addr !5015
  store i32 %20, i32* %21, align 4, !insn.addr !5015
  %22 = bitcast i32* %esi to i8*
  %23 = load i8, i8* %22, align 4, !insn.addr !5016
  %24 = inttoptr i32 %14 to i8*, !insn.addr !5016
  store i8 %23, i8* %24, align 1, !insn.addr !5016
  %25 = call i32 @function_1008648(i32 %17), !insn.addr !5017
  %26 = add i32 %0, 9, !insn.addr !5018
  %27 = inttoptr i32 %26 to i32*, !insn.addr !5018
  %28 = load i32, i32* %27, align 4, !insn.addr !5018
  %29 = call i32 @function_100bd6f(i32 %28), !insn.addr !5019
  %30 = add i32 %0, -3, !insn.addr !5020
  %31 = inttoptr i32 %30 to i32*, !insn.addr !5020
  %32 = load i32, i32* %31, align 4, !insn.addr !5020
  %33 = call i32 @unknown_9b00a9d1(i32 %32), !insn.addr !5021
  ret i32 %33, !insn.addr !5022
}

define i32 @function_100c172() local_unnamed_addr {
dec_label_pc_100c172:
  %esi.0.reg2mem = alloca i32, !insn.addr !5023
  %ebp.0.reg2mem = alloca i32, !insn.addr !5023
  %esp.0.reg2mem = alloca i32, !insn.addr !5023
  %edx.0.reg2mem = alloca i32, !insn.addr !5023
  %ecx.0.reg2mem = alloca i32, !insn.addr !5023
  %eax.0.reg2mem = alloca i32, !insn.addr !5023
  %of.0.reg2mem = alloca i1, !insn.addr !5023
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %5 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5023
  %6 = add i32 %0, 71797616, !insn.addr !5024
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5024
  %8 = load i32, i32* %7, align 4, !insn.addr !5024
  %9 = add i32 %8, %4, !insn.addr !5025
  %10 = add i32 %3, %1, !insn.addr !5026
  %11 = xor i32 %10, %1, !insn.addr !5026
  %12 = xor i32 %10, %3, !insn.addr !5026
  %13 = and i32 %11, %12, !insn.addr !5026
  %14 = icmp slt i32 %13, 0, !insn.addr !5026
  %15 = add i32 %2, 53, !insn.addr !5027
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5027
  %17 = add i32 %2, 12, !insn.addr !5028
  %18 = inttoptr i32 %17 to i8*, !insn.addr !5029
  %19 = udiv i32 %2, 256, !insn.addr !5029
  %20 = trunc i32 %19 to i8, !insn.addr !5029
  store i1 %14, i1* %of.0.reg2mem, !insn.addr !5026
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !5026
  store i32 %8, i32* %ecx.0.reg2mem, !insn.addr !5026
  store i32 %5, i32* %esp.0.reg2mem, !insn.addr !5026
  store i32 %10, i32* %esi.0.reg2mem, !insn.addr !5026
  br label %dec_label_pc_100c17d, !insn.addr !5026

dec_label_pc_100c17d:                             ; preds = %dec_label_pc_100c17d, %dec_label_pc_100c172
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %21 = mul i32 %ecx.0.reload, 4, !insn.addr !5030
  %22 = add i32 %ecx.0.reload, -1580823806, !insn.addr !5030
  %23 = add i32 %22, %21, !insn.addr !5030
  %24 = inttoptr i32 %23 to i32*, !insn.addr !5030
  %25 = load i32, i32* %24, align 4, !insn.addr !5030
  %26 = udiv i32 %25, 1024, !insn.addr !5030
  store i32 %26, i32* %24, align 4, !insn.addr !5030
  %spec.select = select i1 %of.0.reload, i32 %edx.0.reload, i32 %ecx.0.reload
  %27 = sub i32 %eax.0.reload, %ecx.0.reload, !insn.addr !5031
  %28 = add i32 %esp.0.reload, -4, !insn.addr !5032
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5032
  store i32 %27, i32* %29, align 4, !insn.addr !5032
  %30 = add i32 %ebp.0.reload, 12, !insn.addr !5033
  %31 = inttoptr i32 %30 to i32*, !insn.addr !5033
  store i32 %27, i32* %31, align 4, !insn.addr !5033
  %32 = load i32, i32* %16, align 4, !insn.addr !5027
  %33 = add i32 %27, -118, !insn.addr !5034
  %34 = add i32 %33, %spec.select, !insn.addr !5034
  %35 = inttoptr i32 %34 to i32*, !insn.addr !5034
  %36 = load i32, i32* %35, align 4, !insn.addr !5034
  %37 = sdiv i32 %36, 2, !insn.addr !5034
  store i32 %37, i32* %35, align 4, !insn.addr !5034
  %38 = add i32 %32, -198997610, !insn.addr !5035
  %39 = add i32 %esi.0.reload, 8, !insn.addr !5036
  %40 = inttoptr i32 %39 to i32*, !insn.addr !5036
  store i32 %27, i32* %40, align 4, !insn.addr !5036
  %41 = add i32 %ebp.0.reload, -8, !insn.addr !5037
  %42 = inttoptr i32 %41 to i32*, !insn.addr !5037
  store i32 %27, i32* %42, align 4, !insn.addr !5037
  %43 = add i32 %esi.0.reload, 12, !insn.addr !5038
  %44 = inttoptr i32 %43 to i32*, !insn.addr !5038
  %45 = load i32, i32* %44, align 4, !insn.addr !5038
  %46 = add i32 %27, 13, !insn.addr !5039
  %47 = and i32 %27, -256, !insn.addr !5039
  %48 = add i32 %esi.0.reload, -1, !insn.addr !5040
  %49 = and i32 %46, 73, !insn.addr !5041
  %50 = or i32 %47, %49, !insn.addr !5041
  %51 = or i32 %50, 182, !insn.addr !5041
  %52 = load i8, i8* %18, align 1, !insn.addr !5029
  %53 = or i8 %52, %20, !insn.addr !5029
  store i8 %53, i8* %18, align 1, !insn.addr !5029
  %54 = add i32 %ebp.0.reload, 1, !insn.addr !5042
  %55 = xor i32 %ebp.0.reload, -2147483648
  %56 = and i32 %54, %55, !insn.addr !5042
  %57 = icmp slt i32 %56, 0, !insn.addr !5042
  %58 = icmp slt i32 %54, 0, !insn.addr !5042
  %59 = icmp eq i1 %58, %57, !insn.addr !5043
  store i1 %57, i1* %of.0.reg2mem, !insn.addr !5043
  store i32 %51, i32* %eax.0.reg2mem, !insn.addr !5043
  store i32 %17, i32* %ecx.0.reg2mem, !insn.addr !5043
  store i32 1187573837, i32* %edx.0.reg2mem, !insn.addr !5043
  store i32 %38, i32* %esp.0.reg2mem, !insn.addr !5043
  store i32 %54, i32* %ebp.0.reg2mem, !insn.addr !5043
  store i32 %48, i32* %esi.0.reg2mem, !insn.addr !5043
  br i1 %59, label %dec_label_pc_100c1c9, label %dec_label_pc_100c17d, !insn.addr !5043

dec_label_pc_100c1c9:                             ; preds = %dec_label_pc_100c17d
  %60 = add i32 %esi.0.reload, 7, !insn.addr !5044
  %61 = inttoptr i32 %60 to i32*, !insn.addr !5044
  %62 = load i32, i32* %61, align 4, !insn.addr !5044
  %63 = sub i32 %51, %62, !insn.addr !5044
  %64 = add i32 %esi.0.reload, 57, !insn.addr !5045
  %65 = inttoptr i32 %64 to i32*, !insn.addr !5045
  %66 = load i32, i32* %65, align 4, !insn.addr !5045
  %67 = add i32 %ebp.0.reload, -19, !insn.addr !5046
  %68 = inttoptr i32 %67 to i32*, !insn.addr !5046
  %69 = load i32, i32* %68, align 4, !insn.addr !5046
  %70 = add i32 %69, %63, !insn.addr !5046
  %71 = add i32 %45, 89, !insn.addr !5047
  %72 = inttoptr i32 %71 to i32*, !insn.addr !5047
  %73 = load i32, i32* %72, align 4, !insn.addr !5047
  %74 = trunc i32 %70 to i8, !insn.addr !5048
  call void @__asm_out.6(i32 194, i8 %74), !insn.addr !5048
  %75 = icmp sgt i32 %66, %73, !insn.addr !5049
  br i1 %75, label %dec_label_pc_100c1d9, label %dec_label_pc_100c1e7, !insn.addr !5049

dec_label_pc_100c1d9:                             ; preds = %dec_label_pc_100c1c9
  %76 = add i32 %70, 137, !insn.addr !5050
  %77 = and i32 %76, 255, !insn.addr !5050
  %78 = and i32 %70, -256, !insn.addr !5050
  %79 = or i32 %77, %78, !insn.addr !5050
  ret i32 %79, !insn.addr !5051

dec_label_pc_100c1e7:                             ; preds = %dec_label_pc_100c1c9
  %80 = add i32 %ebp.0.reload, 2, !insn.addr !5052
  %81 = add i32 %ebp.0.reload, -2147483647
  %82 = and i32 %80, %81, !insn.addr !5052
  %83 = icmp slt i32 %82, 0, !insn.addr !5052
  %84 = icmp slt i32 %80, 0, !insn.addr !5052
  %85 = icmp eq i1 %84, %83, !insn.addr !5053
  br i1 %85, label %dec_label_pc_100c1f3, label %dec_label_pc_100c20e, !insn.addr !5053

dec_label_pc_100c1f3:                             ; preds = %dec_label_pc_100c1e7
  %86 = udiv i8 %74, 70, !insn.addr !5054
  %87 = urem i8 %74, 70, !insn.addr !5054
  %88 = and i32 %70, -65536, !insn.addr !5054
  %89 = zext i8 %86 to i32, !insn.addr !5054
  %90 = mul i32 %89, 256, !insn.addr !5054
  %91 = or i32 %90, %88, !insn.addr !5054
  %92 = add i32 %2, 1157825622, !insn.addr !5055
  %93 = inttoptr i32 %92 to i8*, !insn.addr !5055
  %94 = load i8, i8* %93, align 1, !insn.addr !5055
  %95 = trunc i32 %17 to i8, !insn.addr !5055
  %96 = or i8 %94, %95, !insn.addr !5055
  store i8 %96, i8* %93, align 1, !insn.addr !5055
  %97 = or i8 %87, 43, !insn.addr !5056
  %98 = add i32 %32, -198997614, !insn.addr !5057
  %99 = inttoptr i32 %98 to i32*, !insn.addr !5057
  %100 = add nuw i8 %97, 59, !insn.addr !5058
  %101 = zext i8 %100 to i32, !insn.addr !5058
  %102 = or i32 %91, %101, !insn.addr !5058
  ret i32 %102, !insn.addr !5059

dec_label_pc_100c20e:                             ; preds = %dec_label_pc_100c1e7
  %103 = add i32 %ebp.0.reload, 18, !insn.addr !5060
  %104 = inttoptr i32 %103 to i32*, !insn.addr !5060
  %105 = load i32, i32* %104, align 4, !insn.addr !5060
  %106 = load i32, i32* inttoptr (i32 1250718810 to i32*), align 4, !insn.addr !5061
  %107 = add i32 %106, -116, !insn.addr !5061
  store i32 %107, i32* inttoptr (i32 1250718810 to i32*), align 4, !insn.addr !5061
  %108 = add i32 %105, 34, !insn.addr !5062
  %109 = inttoptr i32 %108 to i8*, !insn.addr !5062
  %110 = load i8, i8* %109, align 1, !insn.addr !5062
  %111 = trunc i32 %17 to i8, !insn.addr !5062
  %112 = or i8 %110, %111, !insn.addr !5062
  store i8 %112, i8* %109, align 1, !insn.addr !5062
  %113 = call i32 @function_100c22b(), !insn.addr !5063
  ret i32 %113, !insn.addr !5063
}

define i32 @function_100c223() local_unnamed_addr {
dec_label_pc_100c223:
  %0 = call i32 @function_100c22b(), !insn.addr !5064
  ret i32 %0, !insn.addr !5064
}

define i32 @function_100c22b() local_unnamed_addr {
dec_label_pc_100c22b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5065
  %5 = add i32 %1, 12, !insn.addr !5066
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5066
  %7 = load i32, i32* %6, align 4, !insn.addr !5066
  %8 = add i32 %7, -1, !insn.addr !5066
  store i32 %8, i32* %6, align 4, !insn.addr !5066
  %9 = add i32 %1, -8, !insn.addr !5067
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5067
  %11 = load i32, i32* %10, align 4, !insn.addr !5067
  %12 = add i32 %11, 1, !insn.addr !5067
  store i32 %12, i32* %10, align 4, !insn.addr !5067
  %13 = inttoptr i32 %0 to i32*, !insn.addr !5068
  %14 = or i32 %2, 21, !insn.addr !5069
  %15 = inttoptr i32 %2 to i32*, !insn.addr !5069
  store i32 %14, i32* %15, align 4, !insn.addr !5069
  %16 = call i32 @function_13a4f3e(), !insn.addr !5070
  ret i32 %16, !insn.addr !5070
}

define i32 @function_100c248() local_unnamed_addr {
dec_label_pc_100c248:
  %edi.0.reg2mem = alloca i32, !insn.addr !5071
  %esi.0.reg2mem = alloca i32, !insn.addr !5071
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_0 = alloca i32, align 4
  %6 = icmp eq i1 %5, false, !insn.addr !5071
  br i1 %6, label %dec_label_pc_100c24c, label %dec_label_pc_100c24a, !insn.addr !5071

dec_label_pc_100c24a:                             ; preds = %dec_label_pc_100c248
  %7 = trunc i32 %3 to i8, !insn.addr !5072
  %8 = inttoptr i32 %0 to i8*, !insn.addr !5072
  store i8 %7, i8* %8, align 1, !insn.addr !5072
  %9 = select i1 %4, i32 -1, i32 1, !insn.addr !5072
  %10 = add i32 %9, %0, !insn.addr !5072
  %11 = add i32 %1, -1, !insn.addr !5073
  store i32 %11, i32* %esi.0.reg2mem, !insn.addr !5073
  store i32 %10, i32* %edi.0.reg2mem, !insn.addr !5073
  br label %dec_label_pc_100c24c, !insn.addr !5073

dec_label_pc_100c24c:                             ; preds = %dec_label_pc_100c24a, %dec_label_pc_100c248
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %12 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !5074
  %13 = trunc i32 %2 to i16
  %14 = add i16 %13, -1, !insn.addr !5075
  call void @__asm_out.2(i16 %14, i32 %12), !insn.addr !5075
  %15 = inttoptr i32 %edi.0.reload to i32*, !insn.addr !5076
  %16 = load i32, i32* %15, align 4, !insn.addr !5076
  %17 = add i32 %3, -4, !insn.addr !5076
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5076
  store i32 %16, i32* %18, align 4, !insn.addr !5076
  %19 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !5077
  %20 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !5078
  %21 = load i8, i8* %20, align 1, !insn.addr !5078
  call void @__asm_outsb(i16 %14, i8 %21), !insn.addr !5078
  %22 = trunc i32 %19 to i8, !insn.addr !5079
  %23 = icmp ugt i8 %22, -56
  %24 = icmp ult i8 %22, -55
  %25 = add i32 %19, 55
  %26 = select i1 %24, i32 %19, i32 %25, !insn.addr !5079
  %27 = and i32 %26, 255, !insn.addr !5079
  %28 = and i32 %19, -65536, !insn.addr !5079
  %29 = or i32 %27, %28, !insn.addr !5079
  %30 = zext i1 %23 to i32, !insn.addr !5079
  %31 = mul i32 %30, 256, !insn.addr !5079
  %32 = or i32 %29, %31, !insn.addr !5079
  ret i32 %32, !insn.addr !5080
}

define x86_fp80 @function_100c2cf() local_unnamed_addr {
dec_label_pc_100c2cf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %0, 8, !insn.addr !5081
  %3 = add i32 %1, %2, !insn.addr !5081
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5081
  %5 = load i32, i32* %4, align 4, !insn.addr !5081
  %6 = sitofp i32 %5 to x86_fp80, !insn.addr !5081
  ret x86_fp80 %6, !insn.addr !5082
}

define i32 @function_100c2d5() local_unnamed_addr {
dec_label_pc_100c2d5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -1962933149, !insn.addr !5083
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5083
  %5 = load i32, i32* %4, align 4, !insn.addr !5083
  %6 = add i32 %5, 1, !insn.addr !5083
  %7 = icmp eq i32 %6, 0, !insn.addr !5083
  store i32 %6, i32* %4, align 4, !insn.addr !5083
  %8 = icmp eq i1 %7, false, !insn.addr !5084
  br i1 %8, label %dec_label_pc_100c2e9, label %dec_label_pc_100c2dd, !insn.addr !5084

dec_label_pc_100c2dd:                             ; preds = %dec_label_pc_100c2d5
  %9 = add i32 %0, 4, !insn.addr !5085
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5085
  %11 = load i32, i32* %10, align 4, !insn.addr !5085
  ret i32 %11, !insn.addr !5086

dec_label_pc_100c2e9:                             ; preds = %dec_label_pc_100c2d5
  %12 = trunc i32 %2 to i8
  %13 = add i8 %12, -114, !insn.addr !5087
  call void @__asm_out.6(i32 141, i8 %13), !insn.addr !5087
  %14 = call i32 @function_8ca6b604(), !insn.addr !5088
  ret i32 %14, !insn.addr !5088
}

define i32 @function_100c318(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c318:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i16, !insn.addr !5089
  %3 = call i32 @__asm_insd(i16 %2), !insn.addr !5089
  %4 = inttoptr i32 %0 to i32*, !insn.addr !5089
  store i32 %3, i32* %4, align 4, !insn.addr !5089
  %5 = call i32 @function_1012314(i32 ptrtoint (i32* @0 to i32)), !insn.addr !5090
  ret i32 %5, !insn.addr !5091
}

define i32 @function_100c357() local_unnamed_addr {
dec_label_pc_100c357:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i16, align 2
  %6 = add i32 %5, 71, !insn.addr !5092
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5092
  %8 = load i32, i32* %7, align 4, !insn.addr !5092
  %9 = add i32 %8, 8, !insn.addr !5093
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5093
  %11 = load i32, i32* %10, align 4, !insn.addr !5093
  %12 = add i32 %5, 138946816, !insn.addr !5094
  %13 = trunc i32 %4 to i16, !insn.addr !5095
  %14 = call i8 @__asm_in.3(i16 %13), !insn.addr !5095
  %15 = sext i8 %14 to i32, !insn.addr !5095
  %16 = or i32 %12, %15, !insn.addr !5095
  %17 = add i8 %14, -125, !insn.addr !5096
  %18 = zext i8 %17 to i32, !insn.addr !5096
  %19 = and i32 %16, -256, !insn.addr !5096
  %20 = or i32 %19, %18, !insn.addr !5096
  %21 = inttoptr i32 %20 to i8*, !insn.addr !5097
  %22 = load i8, i8* %21, align 1, !insn.addr !5097
  %23 = or i8 %22, %17, !insn.addr !5097
  store i8 %23, i8* %21, align 1, !insn.addr !5097
  %24 = load i16, i16* %stack_var_-4, align 2, !insn.addr !5098
  %25 = call i32 @unknown_6cb27c50(i32 %3, i32 %0, i32 %1, i32 %2, i16* nonnull %stack_var_-4, i32 %3, i32 %4, i32 %11, i32 %20, i16 %24), !insn.addr !5098
  %26 = inttoptr i32 %25 to i8*, !insn.addr !5099
  %27 = load i8, i8* %26, align 1, !insn.addr !5099
  %28 = trunc i32 %25 to i8, !insn.addr !5099
  %29 = or i8 %27, %28, !insn.addr !5099
  store i8 %29, i8* %26, align 1, !insn.addr !5099
  ret i32 %25, !insn.addr !5099
}

define i32 @function_100c37c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100c37c:
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = icmp eq i1 %0, false, !insn.addr !5100
  br i1 %1, label %2, label %dec_label_pc_100c386, !insn.addr !5100

; <label>:2:                                      ; preds = %dec_label_pc_100c37c
  %3 = call i32 @function_100c357(), !insn.addr !5100
  br label %dec_label_pc_100c386, !insn.addr !5100

dec_label_pc_100c386:                             ; preds = %2, %dec_label_pc_100c37c
  call void @llvm.trap()
  unreachable
}

define i32 @function_100c46f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100c46f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100c471() local_unnamed_addr {
dec_label_pc_100c471:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5101
}

define i32 @function_100c474(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c474:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %1, 2, !insn.addr !5102
  %3 = add i32 %0, 12, !insn.addr !5102
  %4 = add i32 %3, %2, !insn.addr !5102
  %5 = inttoptr i32 %4 to i32*, !insn.addr !5102
  %6 = load i32, i32* %5, align 4, !insn.addr !5102
  %7 = call i32 @function_100c37c(i32 %6, i32 %arg1), !insn.addr !5103
  ret i32 %7, !insn.addr !5104
}

define i32 @function_100c4b7() local_unnamed_addr {
dec_label_pc_100c4b7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i32 @__asm_int3(), !insn.addr !5105
  %6 = call i32 @function_10081cc(), !insn.addr !5106
  %7 = and i32 %1, 255, !insn.addr !5107
  %8 = and i32 %6, -256, !insn.addr !5107
  %9 = or i32 %8, %7, !insn.addr !5107
  %10 = select i1 %4, i32 986727816, i32 986727818, !insn.addr !5107
  %11 = add i32 %10, %1, !insn.addr !5108
  %12 = inttoptr i32 %11 to i32*, !insn.addr !5108
  %13 = load i32, i32* %12, align 4, !insn.addr !5108
  %14 = add i32 %13, 1, !insn.addr !5109
  %15 = add i32 %14, %9, !insn.addr !5108
  store i32 %15, i32* %12, align 4, !insn.addr !5108
  %16 = add i32 %2, 1166671831, !insn.addr !5110
  %17 = inttoptr i32 %16 to i32*, !insn.addr !5110
  %18 = load i32, i32* %17, align 4, !insn.addr !5110
  %19 = add i32 %18, %0, !insn.addr !5110
  store i32 %19, i32* %17, align 4, !insn.addr !5110
  %20 = call i32 @__asm_hlt(), !insn.addr !5111
  %21 = call i32 @function_100dfef(), !insn.addr !5112
  %22 = call i32 @__asm_int1(), !insn.addr !5113
  %23 = udiv i32 %3, 256, !insn.addr !5114
  %24 = trunc i32 %23 to i16, !insn.addr !5114
  %25 = trunc i32 %22 to i16, !insn.addr !5114
  %26 = and i16 %24, 255, !insn.addr !5114
  %27 = sdiv i16 %25, %26, !insn.addr !5114
  %28 = and i32 %22, -65536, !insn.addr !5114
  %29 = srem i16 %25, %26, !insn.addr !5114
  %30 = mul i16 %29, 256
  %31 = zext i16 %30 to i32, !insn.addr !5114
  %32 = and i16 %27, 255
  %.masked = zext i16 %32 to i32
  %33 = or i32 %28, %.masked, !insn.addr !5114
  %34 = or i32 %33, %31, !insn.addr !5114
  ret i32 %34, !insn.addr !5114
}

define i32 @function_100c4e3() local_unnamed_addr {
dec_label_pc_100c4e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -12, !insn.addr !5115
  ret i32 %1, !insn.addr !5116
}

define i32 @function_100c4f8() local_unnamed_addr {
dec_label_pc_100c4f8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100c504() local_unnamed_addr {
dec_label_pc_100c504:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = udiv i32 %0, 256, !insn.addr !5117
  %3 = xor i32 %1, %2
  %4 = trunc i32 %3 to i8, !insn.addr !5117
  %5 = inttoptr i32 %1 to i8*, !insn.addr !5117
  store i8 %4, i8* %5, align 1, !insn.addr !5117
  ret i32 %1, !insn.addr !5118
}

define i32 @function_100c50b() local_unnamed_addr {
dec_label_pc_100c50b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 2072620869, !insn.addr !5119
  %2 = inttoptr i32 %1 to i32*, !insn.addr !5119
  %3 = load i32, i32* %2, align 4, !insn.addr !5119
  %4 = add i32 %3, -1, !insn.addr !5119
  %5 = sub i32 0, %3
  %6 = and i32 %3, %5, !insn.addr !5119
  %7 = icmp slt i32 %6, 0, !insn.addr !5119
  store i32 %4, i32* %2, align 4, !insn.addr !5119
  %8 = icmp eq i1 %7, false, !insn.addr !5120
  br i1 %8, label %9, label %dec_label_pc_100c513, !insn.addr !5120

; <label>:9:                                      ; preds = %dec_label_pc_100c50b
  %10 = call i32 @function_100c558(), !insn.addr !5120
  br label %dec_label_pc_100c513, !insn.addr !5120

dec_label_pc_100c513:                             ; preds = %9, %dec_label_pc_100c50b
  %11 = call i32 @__asm_hlt(), !insn.addr !5121
  ret i32 %11, !insn.addr !5122
}

define i32 @function_100c518(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c518:
  %eax.1.reg2mem = alloca i32, !insn.addr !5123
  %eax.0.reg2mem = alloca i32, !insn.addr !5123
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__asm_fnsave(), !insn.addr !5124
  %6 = sext i32 %5 to i864, !insn.addr !5124
  %7 = add i32 %1, 1301020671, !insn.addr !5124
  %8 = inttoptr i32 %7 to i864*, !insn.addr !5124
  store i864 %6, i864* %8, align 4, !insn.addr !5124
  %9 = add i32 %4, 826641180, !insn.addr !5125
  %10 = inttoptr i32 %9 to i8*, !insn.addr !5125
  %11 = load i8, i8* %10, align 1, !insn.addr !5125
  %12 = or i8 %11, -117, !insn.addr !5125
  store i8 %12, i8* %10, align 1, !insn.addr !5125
  %13 = add i32 %5, 78, !insn.addr !5126
  %14 = inttoptr i32 %13 to i8*, !insn.addr !5126
  %15 = load i8, i8* %14, align 1, !insn.addr !5126
  %16 = trunc i32 %4 to i8, !insn.addr !5126
  %17 = xor i8 %15, %16, !insn.addr !5126
  %18 = call i8 @llvm.ctpop.i8(i8 %17), !range !258, !insn.addr !5126
  %19 = and i8 %18, 1, !insn.addr !5126
  %20 = icmp eq i8 %19, 0, !insn.addr !5126
  store i8 %17, i8* %14, align 1, !insn.addr !5126
  %21 = icmp eq i1 %20, false, !insn.addr !5127
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !5127
  br i1 %21, label %22, label %dec_label_pc_100c52c, !insn.addr !5127

; <label>:22:                                     ; preds = %dec_label_pc_100c518
  %23 = call i32 @function_100c4b7(), !insn.addr !5127
  store i32 %23, i32* %eax.0.reg2mem, !insn.addr !5127
  br label %dec_label_pc_100c52c, !insn.addr !5127

dec_label_pc_100c52c:                             ; preds = %22, %dec_label_pc_100c518
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %24 = sub i32 %0, %2, !insn.addr !5128
  %25 = inttoptr i32 %0 to i32*, !insn.addr !5128
  store i32 %24, i32* %25, align 4, !insn.addr !5128
  %26 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !5129
  %27 = load i8, i8* %26, align 1, !insn.addr !5129
  %28 = trunc i32 %eax.0.reload to i8, !insn.addr !5129
  %29 = add i8 %27, %28, !insn.addr !5129
  store i8 %29, i8* %26, align 1, !insn.addr !5129
  %30 = add i32 %3, -930372109, !insn.addr !5130
  %31 = add i32 %30, %4, !insn.addr !5130
  %32 = inttoptr i32 %31 to i32*, !insn.addr !5130
  %33 = load i32, i32* %32, align 4, !insn.addr !5130
  %34 = udiv i32 %33, 8, !insn.addr !5130
  store i32 %34, i32* %32, align 4, !insn.addr !5130
  %35 = icmp eq i32 %4, 1, !insn.addr !5131
  br i1 %35, label %dec_label_pc_100c543, label %dec_label_pc_100c546, !insn.addr !5131

dec_label_pc_100c543:                             ; preds = %dec_label_pc_100c52c
  %36 = inttoptr i32 %1 to i8*, !insn.addr !5132
  %37 = inttoptr i32 %0 to i8*, !insn.addr !5132
  call void @__asm_rep_movsb_memcpy(i8* %37, i8* %36, i32 0), !insn.addr !5132
  ret i32 1, !insn.addr !5132

dec_label_pc_100c546:                             ; preds = %dec_label_pc_100c52c
  %38 = call i8 @__asm_in.1(i8 112), !insn.addr !5133
  %39 = sext i8 %38 to i32, !insn.addr !5133
  %40 = or i32 %4, %39, !insn.addr !5133
  %41 = add i8 %38, -24, !insn.addr !5134
  %42 = xor i8 %41, %38, !insn.addr !5134
  %43 = add i8 %38, 104, !insn.addr !5134
  %44 = and i8 %42, %43, !insn.addr !5134
  %45 = icmp slt i8 %44, 0, !insn.addr !5134
  %46 = zext i8 %41 to i32, !insn.addr !5134
  %47 = and i32 %40, -256, !insn.addr !5134
  %48 = or i32 %47, %46, !insn.addr !5134
  %49 = icmp eq i1 %45, false, !insn.addr !5135
  store i32 %48, i32* %eax.1.reg2mem, !insn.addr !5135
  br i1 %49, label %50, label %dec_label_pc_100c54e, !insn.addr !5135

; <label>:50:                                     ; preds = %dec_label_pc_100c546
  %51 = call i32 @function_100c504(), !insn.addr !5135
  store i32 %51, i32* %eax.1.reg2mem, !insn.addr !5135
  br label %dec_label_pc_100c54e, !insn.addr !5135

dec_label_pc_100c54e:                             ; preds = %50, %dec_label_pc_100c546
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !5135
}

define i32 @function_100c558() local_unnamed_addr {
dec_label_pc_100c558:
  %eax.0.reg2mem = alloca i32, !insn.addr !5136
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i32 @__asm_hlt(), !insn.addr !5136
  %8 = add i32 %7, 4, !insn.addr !5137
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5137
  %10 = load i32, i32* %9, align 4, !insn.addr !5137
  %11 = icmp eq i32 %4, 0, !insn.addr !5138
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !5138
  br i1 %11, label %12, label %dec_label_pc_100c561, !insn.addr !5138

; <label>:12:                                     ; preds = %dec_label_pc_100c558
  %13 = call i32 @function_100c4f8(), !insn.addr !5138
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !5138
  br label %dec_label_pc_100c561, !insn.addr !5138

dec_label_pc_100c561:                             ; preds = %12, %dec_label_pc_100c558
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %14 = add i32 %2, 1091304580, !insn.addr !5139
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5139
  %16 = load i32, i32* %15, align 4, !insn.addr !5139
  %17 = add i32 %16, -1, !insn.addr !5139
  store i32 %17, i32* %15, align 4, !insn.addr !5139
  %18 = add i32 %2, 1888220229, !insn.addr !5140
  %19 = inttoptr i32 %18 to i8*, !insn.addr !5140
  %20 = load i8, i8* %19, align 1, !insn.addr !5140
  %21 = trunc i32 %4 to i8, !insn.addr !5140
  %22 = zext i1 %6 to i8, !insn.addr !5140
  %23 = add i8 %22, %21, !insn.addr !5140
  %24 = add i8 %23, %20, !insn.addr !5140
  store i8 %24, i8* %19, align 1, !insn.addr !5140
  %25 = and i32 %eax.0.reload, -256, !insn.addr !5141
  %26 = add i32 %0, -1, !insn.addr !5142
  %27 = add i32 %eax.0.reload, 22, !insn.addr !5143
  %28 = and i32 %27, 255, !insn.addr !5143
  %29 = or i32 %28, %25, !insn.addr !5143
  %30 = trunc i32 %3 to i8, !insn.addr !5144
  %31 = add i32 %29, 4, !insn.addr !5145
  %32 = inttoptr i32 %31 to i32*, !insn.addr !5145
  %33 = load i32, i32* %32, align 4, !insn.addr !5145
  %34 = trunc i32 %3 to i16
  %35 = and i16 %34, 255
  %36 = or i16 %35, -18688, !insn.addr !5146
  %37 = call i32 @__asm_insd(i16 %36), !insn.addr !5146
  %38 = inttoptr i32 %33 to i32*, !insn.addr !5146
  store i32 %37, i32* %38, align 4, !insn.addr !5146
  %39 = trunc i32 %2 to i8, !insn.addr !5147
  %40 = icmp ugt i8 %39, 72, !insn.addr !5147
  %41 = inttoptr i32 %26 to i32*, !insn.addr !5148
  %42 = load i32, i32* %41, align 4, !insn.addr !5148
  store i32 %42, i32* %38, align 4, !insn.addr !5148
  %43 = select i1 %5, i32 -4, i32 4, !insn.addr !5148
  %44 = add i32 %43, %26, !insn.addr !5148
  %45 = add i32 %1, -114, !insn.addr !5149
  %46 = inttoptr i32 %45 to i32*, !insn.addr !5149
  %47 = load i32, i32* %46, align 4, !insn.addr !5149
  %48 = add i32 %2, -212859935, !insn.addr !5150
  %49 = inttoptr i32 %48 to i32*, !insn.addr !5150
  %50 = load i32, i32* %49, align 4, !insn.addr !5150
  %51 = zext i1 %40 to i32, !insn.addr !5150
  %52 = add i32 %29, %51, !insn.addr !5150
  %53 = add i32 %52, %50, !insn.addr !5150
  store i32 %53, i32* %49, align 4, !insn.addr !5150
  %54 = inttoptr i32 %44 to i8*, !insn.addr !5151
  %55 = load i8, i8* %54, align 1, !insn.addr !5151
  %56 = inttoptr i32 %47 to i8*, !insn.addr !5151
  store i8 %55, i8* %56, align 1, !insn.addr !5151
  %57 = call i32 @__asm_hlt(), !insn.addr !5152
  %sext = mul i32 %3, 16777216
  %58 = sdiv i32 %sext, 16777216, !insn.addr !5153
  %59 = add i8 %30, %39, !insn.addr !5154
  %60 = icmp eq i8 %59, 0, !insn.addr !5154
  %61 = zext i8 %59 to i32, !insn.addr !5154
  %62 = and i32 %58, -256, !insn.addr !5154
  %63 = or i32 %62, %61, !insn.addr !5154
  %64 = icmp eq i1 %60, false, !insn.addr !5155
  br i1 %64, label %dec_label_pc_100c5a2, label %dec_label_pc_100c59a, !insn.addr !5155

dec_label_pc_100c59a:                             ; preds = %dec_label_pc_100c561
  ret i32 %63, !insn.addr !5156

dec_label_pc_100c5a2:                             ; preds = %dec_label_pc_100c561
  %65 = udiv i32 %2, 256, !insn.addr !5157
  %66 = trunc i32 %65 to i16, !insn.addr !5157
  %67 = trunc i32 %63 to i16, !insn.addr !5157
  %68 = and i16 %66, 255, !insn.addr !5157
  %69 = sdiv i16 %67, %68, !insn.addr !5157
  %70 = and i32 %58, -65536, !insn.addr !5157
  %71 = srem i16 %67, %68, !insn.addr !5157
  %72 = mul i16 %71, 256
  %73 = zext i16 %72 to i32, !insn.addr !5157
  %74 = and i16 %69, 255
  %.masked = zext i16 %74 to i32
  %75 = or i32 %70, %.masked, !insn.addr !5157
  %76 = or i32 %75, %73, !insn.addr !5157
  ret i32 %76, !insn.addr !5158
}

define i32 @function_100c5a9() local_unnamed_addr {
dec_label_pc_100c5a9:
  %storemerge.reg2mem = alloca i32, !insn.addr !5159
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call x86_fp80 @__decompiler_undefined_function_6()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = select i1 %6, i32 -4, i32 4, !insn.addr !5159
  %8 = add i32 %7, %1, !insn.addr !5159
  %9 = call i32 @__asm_hlt(), !insn.addr !5160
  %10 = call i32 @function_100bc54(), !insn.addr !5161
  %11 = call i32 @__asm_int1(), !insn.addr !5162
  %12 = and i32 %2, 15, !insn.addr !5163
  %13 = icmp eq i32 %12, 15, !insn.addr !5163
  %14 = mul i32 %8, 8, !insn.addr !5164
  %15 = add i32 %8, 1979711487, !insn.addr !5164
  %16 = add i32 %15, %14, !insn.addr !5164
  %17 = fptrunc x86_fp80 %5 to float, !insn.addr !5164
  %18 = inttoptr i32 %16 to float*, !insn.addr !5164
  store float %17, float* %18, align 4, !insn.addr !5164
  %19 = call i32 @unknown_c8007bd1(i32 %11), !insn.addr !5165
  %20 = trunc i32 %19 to i8, !insn.addr !5166
  %21 = and i8 %20, 14, !insn.addr !5166
  %22 = icmp ugt i8 %21, 9, !insn.addr !5166
  %23 = or i1 %13, %22, !insn.addr !5166
  %24 = icmp ugt i8 %20, -103
  br i1 %23, label %25, label %31, !insn.addr !5166

; <label>:25:                                     ; preds = %dec_label_pc_100c5a9
  %26 = inttoptr i32 %0 to i32*, !insn.addr !5159
  %.v = select i1 %24, i32 102, i32 6
  %27 = add i32 %.v, %19, !insn.addr !5166
  %28 = and i32 %27, 255, !insn.addr !5166
  %29 = and i32 %19, -256, !insn.addr !5166
  %30 = or i32 %28, %29, !insn.addr !5166
  store i32 %30, i32* %storemerge.reg2mem, !insn.addr !5166
  br label %37, !insn.addr !5166

; <label>:31:                                     ; preds = %dec_label_pc_100c5a9
  %32 = add i32 %19, 96, !insn.addr !5166
  %33 = select i1 %24, i32 %32, i32 %19, !insn.addr !5166
  %34 = and i32 %33, 255, !insn.addr !5166
  %35 = and i32 %19, -256, !insn.addr !5166
  %36 = or i32 %34, %35, !insn.addr !5166
  store i32 %36, i32* %storemerge.reg2mem, !insn.addr !5166
  br label %37, !insn.addr !5166

; <label>:37:                                     ; preds = %25, %31
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %38 = trunc i32 %3 to i8, !insn.addr !5167
  %39 = add i32 %storemerge.reload, -24, !insn.addr !5167
  %40 = inttoptr i32 %39 to i8*, !insn.addr !5167
  %41 = load i8, i8* %40, align 1, !insn.addr !5167
  %42 = and i8 %41, %38, !insn.addr !5167
  %43 = zext i8 %42 to i32, !insn.addr !5167
  %44 = and i32 %3, -256, !insn.addr !5167
  %45 = or i32 %44, %43, !insn.addr !5167
  %46 = add i32 %4, 822041669, !insn.addr !5168
  %47 = inttoptr i32 %46 to i32*, !insn.addr !5168
  %48 = load i32, i32* %47, align 4, !insn.addr !5168
  %49 = add i32 %48, -1, !insn.addr !5168
  store i32 %49, i32* %47, align 4, !insn.addr !5168
  %50 = add i32 %2, -3, !insn.addr !5169
  %51 = inttoptr i32 %50 to i32*, !insn.addr !5169
  %52 = load i32, i32* %51, align 4, !insn.addr !5169
  %53 = inttoptr i32 %52 to i32*, !insn.addr !5170
  store i32 %52, i32* %53, align 4, !insn.addr !5170
  %54 = call i32 @unknown_71007bfb(i32 %8), !insn.addr !5171
  %55 = add i32 %54, 124, !insn.addr !5172
  %56 = inttoptr i32 %55 to i32*, !insn.addr !5172
  store i32 %45, i32* %56, align 4, !insn.addr !5172
  ret i32 %54, !insn.addr !5173
}

define i32 @function_100c5fa(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c5fa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %2, 114, !insn.addr !5174
  %4 = or i32 %3, 141, !insn.addr !5174
  %5 = and i32 %2, -256, !insn.addr !5174
  %6 = or i32 %4, %5, !insn.addr !5175
  %7 = inttoptr i32 %6 to i8*, !insn.addr !5176
  %8 = load i8, i8* %7, align 1, !insn.addr !5176
  %9 = trunc i32 %4 to i8, !insn.addr !5176
  %10 = add i8 %8, %9, !insn.addr !5176
  store i8 %10, i8* %7, align 1, !insn.addr !5176
  %11 = sdiv i32 %6, 4, !insn.addr !5177
  %12 = inttoptr i32 %arg1 to i8*, !insn.addr !5178
  %13 = inttoptr i32 %0 to i8*, !insn.addr !5178
  call void @__asm_rep_movsb_memcpy(i8* %13, i8* %12, i32 %11), !insn.addr !5178
  %14 = add i32 %1, -4, !insn.addr !5179
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5179
  %16 = load i32, i32* %15, align 4, !insn.addr !5179
  %17 = add i32 %16, 4, !insn.addr !5180
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5180
  %19 = load i32, i32* %18, align 4, !insn.addr !5180
  %20 = call i32 @function_1007bc1(i32 %19), !insn.addr !5181
  %21 = add i32 %1, -49, !insn.addr !5182
  %22 = inttoptr i32 %21 to i32*, !insn.addr !5182
  %23 = load i32, i32* %22, align 4, !insn.addr !5182
  %24 = add i32 %23, 4, !insn.addr !5183
  %25 = inttoptr i32 %24 to i32*, !insn.addr !5183
  %26 = load i32, i32* %25, align 4, !insn.addr !5183
  ret i32 %26, !insn.addr !5184
}

define i32 @function_100c62c() local_unnamed_addr {
dec_label_pc_100c62c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = and i32 %4, -256, !insn.addr !5185
  %7 = or i32 %3, 65280, !insn.addr !5186
  %8 = add i32 %0, -1417020339, !insn.addr !5187
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5187
  %10 = load i32, i32* %9, align 4, !insn.addr !5187
  %11 = inttoptr i32 %1 to i32*, !insn.addr !5187
  store i32 %10, i32* %11, align 4, !insn.addr !5187
  %12 = trunc i32 %4 to i8
  %13 = add i8 %12, 114, !insn.addr !5188
  %14 = add i32 %4, 253, !insn.addr !5188
  %15 = icmp ugt i8 %13, 116, !insn.addr !5188
  %16 = and i32 %14, 255, !insn.addr !5188
  %17 = or i32 %16, %6, !insn.addr !5188
  %18 = add i32 %1, -2, !insn.addr !5189
  %19 = inttoptr i32 %18 to i16*, !insn.addr !5189
  %20 = add i32 %17, 4, !insn.addr !5190
  %21 = inttoptr i32 %20 to i32*, !insn.addr !5190
  %22 = load i32, i32* %21, align 4, !insn.addr !5190
  %23 = trunc i32 %3 to i8, !insn.addr !5191
  %24 = add i32 %2, 562822213, !insn.addr !5191
  %25 = inttoptr i32 %24 to i8*, !insn.addr !5191
  %26 = load i8, i8* %25, align 1, !insn.addr !5191
  %.neg = sext i1 %15 to i8
  %.neg2 = add i8 %.neg, %23, !insn.addr !5191
  %27 = sub i8 %.neg2, %26, !insn.addr !5191
  %28 = zext i8 %27 to i32, !insn.addr !5191
  %29 = and i32 %7, -256, !insn.addr !5191
  %30 = trunc i32 %14 to i8, !insn.addr !5192
  %31 = add i32 %4, 138, !insn.addr !5192
  %32 = icmp ugt i8 %30, 114, !insn.addr !5192
  %33 = add i32 %1, 12, !insn.addr !5193
  %34 = inttoptr i32 %33 to i8*, !insn.addr !5193
  %35 = load i8, i8* %34, align 1, !insn.addr !5193
  %.neg3 = sext i1 %32 to i8
  %.neg5 = sub i8 %.neg3, %27, !insn.addr !5193
  %36 = add i8 %.neg5, %35, !insn.addr !5193
  store i8 %36, i8* %34, align 1, !insn.addr !5193
  %37 = or i32 %29, %6, !insn.addr !5191
  %38 = or i32 %31, %28, !insn.addr !5194
  %39 = add i32 %38, 254, !insn.addr !5195
  %40 = and i32 %39, 255, !insn.addr !5195
  %41 = or i32 %37, %40, !insn.addr !5195
  %42 = inttoptr i32 %22 to i8*, !insn.addr !5196
  %43 = inttoptr i32 %0 to i8*, !insn.addr !5196
  call void @__asm_rep_movsd_memcpy(i8* %43, i8* %42, i32 %41), !insn.addr !5196
  %44 = select i1 %5, i32 -4, i32 4, !insn.addr !5196
  %45 = mul i32 %41, %44, !insn.addr !5196
  %46 = add i32 %45, %0, !insn.addr !5196
  %47 = add i32 %1, -6, !insn.addr !5197
  %48 = inttoptr i32 %47 to i32*, !insn.addr !5197
  store i32 %7, i32* %48, align 4, !insn.addr !5197
  %49 = inttoptr i32 %46 to i8*, !insn.addr !5198
  call void @__asm_rep_movsb_memcpy(i8* %49, i8* %49, i32 0), !insn.addr !5198
  %50 = call i32 @function_10081cc(), !insn.addr !5199
  %51 = load i32, i32* @global_var_1014f90, align 4, !insn.addr !5200
  %52 = add i32 %1, -10, !insn.addr !5200
  %53 = inttoptr i32 %52 to i32*, !insn.addr !5200
  store i32 %51, i32* %53, align 4, !insn.addr !5200
  %54 = add i32 %1, -40, !insn.addr !5201
  %55 = inttoptr i32 %54 to i32*, !insn.addr !5201
  store i32 %50, i32* %55, align 4, !insn.addr !5201
  %56 = add i32 %1, -14, !insn.addr !5202
  %57 = inttoptr i32 %56 to i32*, !insn.addr !5202
  ret i32 %54, !insn.addr !5203
}

define i32 @function_100c6c8() local_unnamed_addr {
dec_label_pc_100c6c8:
  %0 = call i32 @function_8ca671cf(), !insn.addr !5204
  ret i32 %0, !insn.addr !5204
}

define i32 @function_100c6ef() local_unnamed_addr {
dec_label_pc_100c6ef:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5205
}

define i32 @function_100c70e(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c70e:
  %0 = call i32 @function_8cc7baba(), !insn.addr !5206
  ret i32 %0, !insn.addr !5206
}

define i32 @function_100c716(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c716:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %9 = inttoptr i32 %1 to i8*, !insn.addr !5207
  %10 = inttoptr i32 %0 to i8*, !insn.addr !5207
  call void @__asm_rep_movsb_memcpy(i8* %10, i8* %9, i32 %4), !insn.addr !5207
  %11 = select i1 %6, i32 -1, i32 1, !insn.addr !5207
  %12 = mul i32 %11, %4, !insn.addr !5207
  %13 = add i32 %12, %0, !insn.addr !5207
  %14 = and i32 %arg1, 255, !insn.addr !5208
  %15 = and i32 %5, -256, !insn.addr !5208
  %16 = or i32 %15, %14, !insn.addr !5208
  %17 = call i32 @function_100e2f5(i32 %16, i32 %arg1), !insn.addr !5209
  %18 = call i32 @function_1007c19(i32 %8), !insn.addr !5210
  %19 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5211
  %20 = and i32 %18, 14
  %21 = icmp ugt i32 %20, 9, !insn.addr !5212
  %22 = or i1 %7, %21, !insn.addr !5212
  %23 = add i32 %18, 6, !insn.addr !5212
  %24 = select i1 %22, i32 %23, i32 %18, !insn.addr !5212
  %25 = trunc i32 %3 to i16, !insn.addr !5213
  %26 = trunc i32 %24 to i8
  %27 = and i8 %26, 15, !insn.addr !5213
  call void @__asm_out(i16 %25, i8 %27), !insn.addr !5213
  %28 = load i32, i32* inttoptr (i32 822082701 to i32*), align 4, !insn.addr !5214
  %29 = add i32 %28, -1, !insn.addr !5214
  store i32 %29, i32* inttoptr (i32 822082701 to i32*), align 4, !insn.addr !5214
  %30 = call i32 @unknown_1800a3c1(), !insn.addr !5215
  %31 = add i32 %19, -17, !insn.addr !5216
  %32 = inttoptr i32 %31 to i32*, !insn.addr !5216
  %33 = load i32, i32* %32, align 4, !insn.addr !5216
  %34 = inttoptr i32 %33 to i8*, !insn.addr !5217
  %35 = load i8, i8* %34, align 1, !insn.addr !5217
  %36 = trunc i32 %2 to i8, !insn.addr !5217
  %37 = xor i8 %35, %36, !insn.addr !5217
  store i8 %37, i8* %34, align 1, !insn.addr !5217
  %38 = add i32 %19, -12, !insn.addr !5218
  %39 = inttoptr i32 %38 to i32*, !insn.addr !5218
  %40 = load i32, i32* %39, align 4, !insn.addr !5218
  %41 = inttoptr i32 %40 to i32*, !insn.addr !5219
  %42 = load i32, i32* %41, align 4, !insn.addr !5219
  %43 = add i32 %19, -99, !insn.addr !5220
  %44 = inttoptr i32 %43 to i32*, !insn.addr !5220
  %45 = load i32, i32* %44, align 4, !insn.addr !5220
  %46 = inttoptr i32 %45 to i32*, !insn.addr !5221
  store i32 %42, i32* %46, align 4, !insn.addr !5221
  %47 = add i32 %3, -117, !insn.addr !5222
  %48 = inttoptr i32 %47 to i32*, !insn.addr !5222
  %49 = load i32, i32* %48, align 4, !insn.addr !5222
  %50 = add i32 %13, -1, !insn.addr !5223
  %51 = add i32 %2, 948698181, !insn.addr !5224
  %52 = inttoptr i32 %51 to i8*, !insn.addr !5224
  %53 = load i8, i8* %52, align 1, !insn.addr !5224
  %54 = or i8 %53, -115, !insn.addr !5224
  store i8 %54, i8* %52, align 1, !insn.addr !5224
  %55 = and i32 %49, 114, !insn.addr !5225
  %56 = or i32 %55, 141, !insn.addr !5225
  %57 = and i32 %49, -256, !insn.addr !5225
  %58 = or i32 %56, %57, !insn.addr !5226
  %59 = inttoptr i32 %58 to i8*, !insn.addr !5227
  %60 = load i8, i8* %59, align 1, !insn.addr !5227
  %61 = trunc i32 %56 to i8, !insn.addr !5227
  %62 = add i8 %60, %61, !insn.addr !5227
  store i8 %62, i8* %59, align 1, !insn.addr !5227
  %63 = udiv i32 %45, 512, !insn.addr !5228
  %64 = inttoptr i32 %50 to i8*, !insn.addr !5229
  %65 = inttoptr i32 %13 to i8*, !insn.addr !5229
  call void @__asm_rep_movsd_memcpy(i8* %65, i8* %64, i32 %63), !insn.addr !5229
  %66 = add i32 %19, -4, !insn.addr !5230
  %67 = inttoptr i32 %66 to i32*, !insn.addr !5230
  %68 = load i32, i32* %67, align 4, !insn.addr !5230
  ret i32 %68, !insn.addr !5231
}

define i32 @function_100c781() local_unnamed_addr {
dec_label_pc_100c781:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @function_10081c1(), !insn.addr !5232
  %4 = add i32 %3, 4, !insn.addr !5233
  %5 = inttoptr i32 %4 to i32*, !insn.addr !5233
  %6 = call i32 @unknown_15003afb(), !insn.addr !5234
  %7 = add i32 %0, -4, !insn.addr !5235
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5235
  %9 = load i32, i32* %8, align 4, !insn.addr !5235
  %10 = add i32 %9, 4, !insn.addr !5236
  %11 = inttoptr i32 %10 to i32*, !insn.addr !5236
  store i32 %6, i32* %11, align 4, !insn.addr !5236
  %12 = add i32 %0, 12, !insn.addr !5237
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5237
  %14 = load i32, i32* %13, align 4, !insn.addr !5237
  %15 = add i32 %14, 4, !insn.addr !5238
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5238
  %17 = load i32, i32* %16, align 4, !insn.addr !5238
  %18 = add i32 %14, 24, !insn.addr !5239
  %19 = and i32 %18, 255, !insn.addr !5239
  %20 = and i32 %14, -256, !insn.addr !5239
  %21 = or i32 %19, %20, !insn.addr !5239
  %22 = add i32 %21, 4, !insn.addr !5240
  %23 = inttoptr i32 %22 to i32*, !insn.addr !5240
  %24 = load i32, i32* %23, align 4, !insn.addr !5240
  %25 = add i32 %1, 48873921, !insn.addr !5241
  %26 = inttoptr i32 %25 to i8*, !insn.addr !5241
  %27 = load i8, i8* %26, align 1, !insn.addr !5241
  %28 = trunc i32 %9 to i8, !insn.addr !5241
  %29 = add i8 %27, %28, !insn.addr !5241
  store i8 %29, i8* %26, align 1, !insn.addr !5241
  %30 = inttoptr i32 %17 to i8*, !insn.addr !5242
  %31 = inttoptr i32 %24 to i8*, !insn.addr !5242
  call void @__asm_rep_movsd_memcpy(i8* %31, i8* %30, i32 %9), !insn.addr !5242
  %32 = call i32 @function_10131b6(i32 -1878225406), !insn.addr !5243
  %33 = call i32 @unknown_7500bbd4(i32* nonnull %stack_var_-12, i32 %2), !insn.addr !5244
  %34 = call i32 @function_100dfef(), !insn.addr !5245
  ret i32 %34, !insn.addr !5246
}

define i32 @function_100c7e5(i32 %arg1) local_unnamed_addr {
dec_label_pc_100c7e5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_6()
  %5 = xor i32 %3, %2
  %6 = trunc i32 %5 to i8, !insn.addr !5247
  %7 = inttoptr i32 %2 to i8*, !insn.addr !5247
  store i8 %6, i8* %7, align 1, !insn.addr !5247
  %8 = add i32 %3, %1, !insn.addr !5248
  %9 = call x86_fp80 @__asm_fbstp(x86_fp80 %4), !insn.addr !5249
  %10 = add i32 %0, 1978269695, !insn.addr !5249
  %11 = inttoptr i32 %10 to x86_fp80*, !insn.addr !5249
  store x86_fp80 %9, x86_fp80* %11, align 4, !insn.addr !5249
  %12 = add i32 %1, -44, !insn.addr !5250
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5250
  store i32 %8, i32* %13, align 4, !insn.addr !5250
  br label %dec_label_pc_100c7f9, !insn.addr !5251

dec_label_pc_100c7f9:                             ; preds = %dec_label_pc_100c7f9, %dec_label_pc_100c7e5
  br label %dec_label_pc_100c7f9
}

define i32 @function_100cad7() local_unnamed_addr {
dec_label_pc_100cad7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 24965356, !insn.addr !5252
  %2 = inttoptr i32 %1 to i32*, !insn.addr !5252
  %3 = load i32, i32* %2, align 4, !insn.addr !5252
  %4 = add i32 %3, -1, !insn.addr !5252
  store i32 %4, i32* %2, align 4, !insn.addr !5252
  %5 = call i32 @function_2e016128(), !insn.addr !5253
  ret i32 %5, !insn.addr !5253
}

define i32 @function_100caf8() local_unnamed_addr {
dec_label_pc_100caf8:
  %0 = call i32 @function_14a6bdff(), !insn.addr !5254
  ret i32 %0, !insn.addr !5254
}

define i32 @function_100cb54(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100cb54:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100cb64() local_unnamed_addr {
dec_label_pc_100cb64:
  %0 = call i32 @function_fd455568(), !insn.addr !5255
  ret i32 %0, !insn.addr !5255
}

define i32 @function_100cba4() local_unnamed_addr {
dec_label_pc_100cba4:
  %0 = call i32 @function_8ca6beab(), !insn.addr !5256
  ret i32 %0, !insn.addr !5256
}

define i32 @function_100cbee() local_unnamed_addr {
dec_label_pc_100cbee:
  %0 = call i32 @function_8ca6bf3c(), !insn.addr !5257
  ret i32 %0, !insn.addr !5257
}

define i32 @function_100cc4a() local_unnamed_addr {
dec_label_pc_100cc4a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -389969152, !insn.addr !5258
  %3 = inttoptr i32 %2 to i8*, !insn.addr !5258
  %4 = load i8, i8* %3, align 1, !insn.addr !5258
  %5 = udiv i32 %1, 256, !insn.addr !5258
  %6 = trunc i32 %5 to i8, !insn.addr !5258
  %7 = add i8 %4, %6, !insn.addr !5258
  store i8 %7, i8* %3, align 1, !insn.addr !5258
  %8 = call i32 @function_faa68357(), !insn.addr !5259
  ret i32 %8, !insn.addr !5259
}

define i32 @function_100cc82() local_unnamed_addr {
dec_label_pc_100cc82:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100cc99() local_unnamed_addr {
dec_label_pc_100cc99:
  %0 = call i32 @function_eda6bffb(), !insn.addr !5260
  ret i32 %0, !insn.addr !5260
}

define i32 @function_100ccd0() local_unnamed_addr {
dec_label_pc_100ccd0:
  %0 = call i32 @function_100cc82(), !insn.addr !5261
  ret i32 %0, !insn.addr !5261
}

define i32 @function_100ccff() local_unnamed_addr {
dec_label_pc_100ccff:
  %0 = call i32 @function_8ca6c008(), !insn.addr !5262
  ret i32 %0, !insn.addr !5262
}

define i32 @function_100cd47() local_unnamed_addr {
dec_label_pc_100cd47:
  %0 = call i32 @function_58a6c05b(), !insn.addr !5263
  ret i32 %0, !insn.addr !5263
}

define i32 @function_100cdb9() local_unnamed_addr {
dec_label_pc_100cdb9:
  %0 = call i32 @function_8ca6c0c2(), !insn.addr !5264
  ret i32 %0, !insn.addr !5264
}

define i32 @function_100cdd0() local_unnamed_addr {
dec_label_pc_100cdd0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5265
}

define i32 @function_100cdfb() local_unnamed_addr {
dec_label_pc_100cdfb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %3, 4, !insn.addr !5266
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5266
  %7 = load i32, i32* %6, align 4, !insn.addr !5266
  %8 = mul i32 %2, 4, !insn.addr !5267
  %9 = add i32 %8, 12, !insn.addr !5267
  %10 = udiv i32 %9, 4, !insn.addr !5268
  %11 = inttoptr i32 %0 to i8*, !insn.addr !5269
  %12 = inttoptr i32 %7 to i8*, !insn.addr !5269
  call void @__asm_rep_movsd_memcpy(i8* %12, i8* %11, i32 %10), !insn.addr !5269
  %13 = select i1 %4, i32 -4, i32 4, !insn.addr !5269
  %14 = mul i32 %13, %10, !insn.addr !5269
  %15 = add i32 %7, %14, !insn.addr !5269
  %16 = add i32 %15, 93, !insn.addr !5270
  %17 = inttoptr i32 %16 to i32*, !insn.addr !5270
  %18 = load i32, i32* %17, align 4, !insn.addr !5270
  %19 = add i32 %18, 13, !insn.addr !5270
  store i32 %19, i32* %17, align 4, !insn.addr !5270
  %20 = select i1 %4, i32 -1, i32 1, !insn.addr !5271
  %21 = add i32 %15, %20, !insn.addr !5271
  %22 = add i32 %1, -8, !insn.addr !5272
  %23 = inttoptr i32 %22 to i32*, !insn.addr !5272
  %24 = load i32, i32* %23, align 4, !insn.addr !5272
  %25 = call i32 @function_100bd61(i32 %24), !insn.addr !5273
  %26 = icmp eq i32 %25, 0, !insn.addr !5274
  %27 = add i32 %21, -4, !insn.addr !5275
  %28 = inttoptr i32 %27 to i32*, !insn.addr !5275
  store i32 %24, i32* %28, align 4, !insn.addr !5275
  %29 = icmp eq i1 %26, false, !insn.addr !5276
  br i1 %29, label %dec_label_pc_100d194, label %dec_label_pc_100d1b4, !insn.addr !5276

dec_label_pc_100d194:                             ; preds = %dec_label_pc_100cdfb
  %30 = load i32, i32* inttoptr (i32 -1857451016 to i32*), align 8, !insn.addr !5277
  %31 = or i32 %30, %21, !insn.addr !5277
  store i32 %31, i32* inttoptr (i32 -1857451016 to i32*), align 8, !insn.addr !5277
  ret i32 %25, !insn.addr !5277

dec_label_pc_100d1b4:                             ; preds = %dec_label_pc_100cdfb
  %32 = add i32 %1, -16, !insn.addr !5278
  %33 = call i32 @function_45a9ffff(i32 %1, i32 %32), !insn.addr !5279
  ret i32 %33, !insn.addr !5279
}

define i32 @function_100d1c1() local_unnamed_addr {
dec_label_pc_100d1c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8, !insn.addr !5280
  store i8 %1, i8* @global_var_1014f5c, align 1, !insn.addr !5280
  %2 = call i32 @function_1008a86(), !insn.addr !5281
  ret i32 %2, !insn.addr !5281
}

define i32 @function_100d1ce(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100d1ce:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_in(i32 93), !insn.addr !5282
  %3 = call i32 @unknown_afaac3c7(), !insn.addr !5283
  %4 = and i32 %1, -65281, !insn.addr !5284
  %5 = add i32 %0, -8, !insn.addr !5285
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5285
  store i32 %4, i32* %6, align 4, !insn.addr !5285
  %7 = call i32 @unknown_5d007bd1(), !insn.addr !5286
  %8 = add i32 %0, -12, !insn.addr !5287
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5287
  store i32 %4, i32* %9, align 4, !insn.addr !5287
  ret i32 %arg1, !insn.addr !5288
}

define i32 @function_100d1f4() local_unnamed_addr {
dec_label_pc_100d1f4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5289
}

define i32 @function_100d203() local_unnamed_addr {
dec_label_pc_100d203:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100d208() local_unnamed_addr {
dec_label_pc_100d208:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = icmp eq i1 %3, false, !insn.addr !5290
  br i1 %4, label %dec_label_pc_100d245, label %dec_label_pc_100d20f, !insn.addr !5290

dec_label_pc_100d20f:                             ; preds = %dec_label_pc_100d208
  %5 = add i32 %0, -40, !insn.addr !5291
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5291
  %7 = call i32 @unknown_7e7ba9(), !insn.addr !5292
  %8 = add i32 %0, -36, !insn.addr !5293
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5293
  %10 = add i32 %0, 8, !insn.addr !5294
  %11 = inttoptr i32 %10 to i32*, !insn.addr !5294
  %12 = load i32, i32* %11, align 4, !insn.addr !5294
  %13 = add i32 %0, -20, !insn.addr !5295
  %14 = inttoptr i32 %13 to i32*, !insn.addr !5295
  %15 = add i32 %1, 1409286057, !insn.addr !5296
  %16 = inttoptr i32 %15 to i8*, !insn.addr !5296
  %17 = load i8, i8* %16, align 1, !insn.addr !5296
  %18 = and i8 %17, -119, !insn.addr !5296
  store i8 %18, i8* %16, align 1, !insn.addr !5296
  %19 = call i32 @function_1007bd1(), !insn.addr !5297
  %20 = inttoptr i32 %12 to i32*, !insn.addr !5298
  %21 = call i32 @function_1007c26(), !insn.addr !5299
  ret i32 %21, !insn.addr !5300

dec_label_pc_100d245:                             ; preds = %dec_label_pc_100d208
  ret i32 %2, !insn.addr !5300
}

define i32 @function_100d243() local_unnamed_addr {
dec_label_pc_100d243:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5301
}

define i32 @function_100d272() local_unnamed_addr {
dec_label_pc_100d272:
  %0 = call i32 @function_8ca6c579(), !insn.addr !5302
  ret i32 %0, !insn.addr !5302
}

define i32 @function_100d2a2() local_unnamed_addr {
dec_label_pc_100d2a2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -16, !insn.addr !5303
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5303
  %4 = load i32, i32* %3, align 4, !insn.addr !5303
  %5 = and i32 %4, %0, !insn.addr !5304
  %6 = inttoptr i32 %0 to i32*, !insn.addr !5304
  store i32 %5, i32* %6, align 4, !insn.addr !5304
  %7 = call i32 @function_d6e0c5c1(), !insn.addr !5305
  ret i32 %7, !insn.addr !5305
}

define i32 @function_100d2c8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100d2c8:
  %0 = call i32 @unknown_1000cd1(), !insn.addr !5306
  ret i32 %0, !insn.addr !5307
}

define i32 @function_100d2f5(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100d2f5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5308
}

define i32 @function_100d37c() local_unnamed_addr {
dec_label_pc_100d37c:
  %0 = call i32 @function_8ca6c683(), !insn.addr !5309
  ret i32 %0, !insn.addr !5309
}

define i32 @function_100d3c1() local_unnamed_addr {
dec_label_pc_100d3c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !5310
  %5 = inttoptr i32 %2 to i8*, !insn.addr !5310
  store i8 %4, i8* %5, align 1, !insn.addr !5310
  %6 = add i32 %0, -1044254798, !insn.addr !5311
  %7 = inttoptr i32 %6 to i8*, !insn.addr !5311
  %8 = load i8, i8* %7, align 1, !insn.addr !5311
  %9 = trunc i32 %1 to i8, !insn.addr !5311
  %10 = add i8 %8, %9, !insn.addr !5311
  store i8 %10, i8* %7, align 1, !insn.addr !5311
  %11 = call i32 @function_d1a602d0(), !insn.addr !5312
  ret i32 %11, !insn.addr !5312
}

define i32 @function_100d403() local_unnamed_addr {
dec_label_pc_100d403:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = trunc i32 %1 to i8, !insn.addr !5313
  %5 = add i8 %3, %4, !insn.addr !5313
  %6 = inttoptr i32 %2 to i8*, !insn.addr !5313
  store i8 %5, i8* %6, align 1, !insn.addr !5313
  %7 = add i32 %0, -1044280328, !insn.addr !5314
  %8 = inttoptr i32 %7 to i8*, !insn.addr !5314
  %9 = load i8, i8* %8, align 1, !insn.addr !5314
  %10 = add i8 %9, %3, !insn.addr !5314
  store i8 %10, i8* %8, align 1, !insn.addr !5314
  %11 = call i32 @function_8ca64f12(), !insn.addr !5315
  ret i32 %11, !insn.addr !5315
}

define i32 @function_100d4a2() local_unnamed_addr {
dec_label_pc_100d4a2:
  %0 = call i32 @function_100d4b1(), !insn.addr !5316
  ret i32 %0, !insn.addr !5316
}

define i32 @function_100d4aa() local_unnamed_addr {
dec_label_pc_100d4aa:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1, !insn.addr !5317
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5318
  ret i32 %1, !insn.addr !5318
}

define i32 @function_100d4b1() local_unnamed_addr {
dec_label_pc_100d4b1:
  %pf.0.in.in.reg2mem = alloca i8, !insn.addr !5319
  %esp.2.reg2mem = alloca i32, !insn.addr !5319
  %eax.1.reg2mem = alloca i32, !insn.addr !5319
  %esp.1.reg2mem = alloca i32, !insn.addr !5319
  %edi.0.reg2mem = alloca i32, !insn.addr !5319
  %ebp.0.reg2mem = alloca i32, !insn.addr !5319
  %esp.0.reg2mem = alloca i32, !insn.addr !5319
  %eax.0.reg2mem = alloca i32, !insn.addr !5319
  %ecx.0.reg2mem = alloca i32, !insn.addr !5319
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %6 = mul i32 %1, 8, !insn.addr !5320
  %7 = add i32 %6, -92, !insn.addr !5320
  %8 = add i32 %7, %3, !insn.addr !5320
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5320
  %10 = load i32, i32* %9, align 4, !insn.addr !5320
  %11 = add i32 %10, %2, !insn.addr !5320
  %12 = add i32 %11, -8, !insn.addr !5321
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5321
  %14 = load i32, i32* %13, align 4, !insn.addr !5321
  store i32 %14, i32* %stack_var_-4, align 4, !insn.addr !5321
  %15 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5321
  %16 = call i32 @function_100bd61(i32 %14), !insn.addr !5322
  %17 = icmp eq i32 %16, 0, !insn.addr !5323
  %18 = icmp eq i1 %17, false, !insn.addr !5324
  store i32 %16, i32* %eax.0.reg2mem, !insn.addr !5324
  store i32 %15, i32* %esp.0.reg2mem, !insn.addr !5324
  store i32 %11, i32* %ebp.0.reg2mem, !insn.addr !5324
  br i1 %18, label %dec_label_pc_100d4f3, label %dec_label_pc_100d4cd, !insn.addr !5324

dec_label_pc_100d4cd:                             ; preds = %dec_label_pc_100d4b1
  %19 = add i32 %11, -64, !insn.addr !5325
  %20 = inttoptr i32 %19 to i32*, !insn.addr !5325
  %21 = load i32, i32* %20, align 4, !insn.addr !5325
  %22 = add i32 %21, 4, !insn.addr !5326
  %23 = inttoptr i32 %22 to i32*, !insn.addr !5326
  %24 = load i32, i32* %23, align 4, !insn.addr !5326
  %25 = inttoptr i32 %21 to i32*, !insn.addr !5327
  %26 = load i32, i32* %25, align 4, !insn.addr !5327
  %27 = bitcast i32* %ebx to i8*
  %28 = udiv i32 %26, 256, !insn.addr !5328
  %29 = trunc i32 %28 to i8, !insn.addr !5328
  %30 = or i32 %28, %3
  %31 = trunc i32 %30 to i8, !insn.addr !5328
  %32 = inttoptr i32 %3 to i8*, !insn.addr !5328
  store i8 %31, i8* %32, align 1, !insn.addr !5328
  %33 = load i8, i8* %27, align 4, !insn.addr !5329
  %34 = or i8 %33, %29, !insn.addr !5329
  %35 = load i32, i32* %ebx, align 4, !insn.addr !5329
  %36 = inttoptr i32 %35 to i8*, !insn.addr !5329
  store i8 %34, i8* %36, align 1, !insn.addr !5329
  %37 = and i32 %24, -256, !insn.addr !5330
  %38 = call i8 @__asm_in.1(i8 1), !insn.addr !5331
  %39 = sext i8 %38 to i32, !insn.addr !5331
  %40 = or i32 %37, %39, !insn.addr !5331
  %41 = add i32 %0, 265877252, !insn.addr !5332
  %42 = inttoptr i32 %41 to i32*, !insn.addr !5332
  %43 = load i32, i32* %42, align 4, !insn.addr !5332
  %44 = icmp ult i32 %40, %0, !insn.addr !5333
  %45 = select i1 %5, i32 -4, i32 4, !insn.addr !5333
  %46 = add i32 %45, %0, !insn.addr !5333
  %47 = zext i1 %44 to i32, !insn.addr !5334
  %48 = add i32 %40, 1073827648, !insn.addr !5334
  %49 = add i32 %48, %47, !insn.addr !5334
  %50 = trunc i32 %4 to i16, !insn.addr !5335
  %51 = call i8 @__asm_insb(i16 %50), !insn.addr !5335
  %52 = inttoptr i32 %46 to i8*, !insn.addr !5335
  store i8 %51, i8* %52, align 1, !insn.addr !5335
  store i32 %26, i32* %ecx.0.reg2mem, !insn.addr !5335
  store i32 %49, i32* %eax.0.reg2mem, !insn.addr !5335
  store i32 %43, i32* %esp.0.reg2mem, !insn.addr !5335
  store i32 %46, i32* %edi.0.reg2mem, !insn.addr !5335
  br label %dec_label_pc_100d4f3, !insn.addr !5335

dec_label_pc_100d4f3:                             ; preds = %dec_label_pc_100d4cd, %dec_label_pc_100d4b1
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %53 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !5336
  %54 = load i32, i32* %53, align 4, !insn.addr !5336
  %55 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !5337
  %56 = load i32, i32* %55, align 4, !insn.addr !5337
  %57 = mul i32 %56, %54, !insn.addr !5337
  %58 = icmp eq i32 %57, -1, !insn.addr !5338
  %59 = icmp eq i1 %58, false, !insn.addr !5339
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !5339
  br i1 %59, label %dec_label_pc_100d55f, label %dec_label_pc_100d504, !insn.addr !5339

dec_label_pc_100d504:                             ; preds = %dec_label_pc_100d4f3
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %60 = add i32 %esp.0.reload, -4, !insn.addr !5340
  %61 = inttoptr i32 %60 to i32*, !insn.addr !5340
  store i32 -201250128, i32* %61, align 4, !insn.addr !5340
  %62 = add i32 %edi.0.reload, 1170734855, !insn.addr !5341
  %63 = inttoptr i32 %57 to i8*, !insn.addr !5342
  %64 = load i8, i8* %63, align 1, !insn.addr !5342
  %65 = trunc i32 %eax.0.reload to i8, !insn.addr !5342
  %66 = or i8 %64, %65, !insn.addr !5342
  store i8 %66, i8* %63, align 1, !insn.addr !5342
  %67 = add i32 %esp.0.reload, -8, !insn.addr !5343
  %68 = inttoptr i32 %67 to i32*, !insn.addr !5343
  store i32 %57, i32* %68, align 4, !insn.addr !5343
  %69 = inttoptr i32 %62 to i8*, !insn.addr !5344
  %70 = load i8, i8* %69, align 1, !insn.addr !5344
  %71 = zext i8 %70 to i32, !insn.addr !5344
  %72 = or i32 %71, 1474854912, !insn.addr !5344
  %73 = select i1 %5, i32 -1, i32 1, !insn.addr !5344
  %74 = add i32 %62, %73, !insn.addr !5344
  %75 = load i32, i32* %ebx, align 4
  %76 = add i32 %75, 21968189, !insn.addr !5345
  %77 = inttoptr i32 %76 to i8*, !insn.addr !5345
  %78 = load i8, i8* %77, align 1, !insn.addr !5345
  %79 = add i8 %78, %70, !insn.addr !5345
  store i8 %79, i8* %77, align 1, !insn.addr !5345
  %80 = add i32 %esp.0.reload, -12, !insn.addr !5346
  %81 = inttoptr i32 %80 to i32*, !insn.addr !5346
  store i32 19, i32* %81, align 4, !insn.addr !5346
  %82 = load i32, i32* %ebx, align 4
  %83 = add i32 %82, -250721788, !insn.addr !5347
  %84 = inttoptr i32 %83 to i32*, !insn.addr !5347
  %85 = load i32, i32* %84, align 4, !insn.addr !5347
  %86 = add nuw nsw i32 %72, 8, !insn.addr !5348
  %87 = inttoptr i32 %86 to i32*, !insn.addr !5348
  %88 = load i32, i32* %87, align 4, !insn.addr !5348
  %89 = sub i32 %74, %88, !insn.addr !5348
  %90 = add nuw nsw i32 %72, 76, !insn.addr !5349
  %91 = inttoptr i32 %90 to i32*, !insn.addr !5349
  %92 = load i32, i32* %91, align 4, !insn.addr !5349
  %93 = sub i32 %89, %92, !insn.addr !5349
  %94 = load i32, i32* inttoptr (i32 16994140 to i32*), align 4, !insn.addr !5350
  %95 = add i32 %85, 4, !insn.addr !5351
  %96 = inttoptr i32 %95 to i32*, !insn.addr !5351
  %97 = load i32, i32* %96, align 4, !insn.addr !5351
  %98 = add i32 %93, %97, !insn.addr !5351
  %99 = mul i32 %98, 2, !insn.addr !5352
  %100 = add i32 %ebp.0.reload, 1329608111, !insn.addr !5352
  %101 = add i32 %100, %99, !insn.addr !5352
  %102 = inttoptr i32 %101 to i32*, !insn.addr !5352
  %103 = load i32, i32* %102, align 4, !insn.addr !5352
  %104 = add i32 %94, %82, !insn.addr !5353
  %105 = inttoptr i32 %82 to i32*, !insn.addr !5353
  store i32 %104, i32* %105, align 4, !insn.addr !5353
  %106 = inttoptr i32 %98 to i8*, !insn.addr !5354
  %107 = load i8, i8* %106, align 1, !insn.addr !5354
  %108 = inttoptr i32 %103 to i8*, !insn.addr !5354
  %109 = load i8, i8* %108, align 1, !insn.addr !5354
  %110 = sub i8 %107, %109, !insn.addr !5354
  %111 = call i8 @llvm.ctpop.i8(i8 %110), !range !258, !insn.addr !5354
  %112 = icmp sgt i8 %107, %109, !insn.addr !5355
  store i32 %94, i32* %eax.1.reg2mem, !insn.addr !5355
  store i32 %80, i32* %esp.2.reg2mem, !insn.addr !5355
  store i8 %111, i8* %pf.0.in.in.reg2mem, !insn.addr !5355
  br i1 %112, label %dec_label_pc_100d549, label %dec_label_pc_100d575, !insn.addr !5355

dec_label_pc_100d549:                             ; preds = %dec_label_pc_100d504
  %113 = add i32 %esp.0.reload, -16, !insn.addr !5356
  %114 = inttoptr i32 %113 to i32*, !insn.addr !5356
  store i32 %82, i32* %114, align 4, !insn.addr !5356
  %115 = add i32 %ebp.0.reload, -4, !insn.addr !5357
  %116 = add i32 %esp.0.reload, -20, !insn.addr !5358
  %117 = inttoptr i32 %116 to i32*, !insn.addr !5358
  store i32 %115, i32* %117, align 4, !insn.addr !5358
  %118 = add i32 %esp.0.reload, -24, !insn.addr !5359
  %119 = inttoptr i32 %118 to i16*, !insn.addr !5359
  %120 = load i32, i32* %ebx, align 4, !insn.addr !5360
  %121 = add i32 %120, %115, !insn.addr !5360
  store i32 %121, i32* %105, align 4, !insn.addr !5360
  %122 = load i32, i32* %ebx, align 4, !insn.addr !5361
  %123 = inttoptr i32 %118 to i32*, !insn.addr !5361
  store i32 %122, i32* %123, align 4, !insn.addr !5361
  %124 = call i32 @function_100be29(i32 ptrtoint (i32* @0 to i32)), !insn.addr !5362
  store i32 %118, i32* %esp.1.reg2mem, !insn.addr !5362
  br label %dec_label_pc_100d55f, !insn.addr !5362

dec_label_pc_100d55f:                             ; preds = %dec_label_pc_100d549, %dec_label_pc_100d4f3
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %125 = load i8*, i8** @global_var_1014f84, align 4, !insn.addr !5363
  %126 = ptrtoint i8* %125 to i32, !insn.addr !5363
  %127 = add i32 %esp.1.reload, -4, !insn.addr !5363
  %128 = inttoptr i32 %127 to i32*, !insn.addr !5363
  store i32 %126, i32* %128, align 4, !insn.addr !5363
  %129 = load i32, i32* %ebx, align 4, !insn.addr !5364
  %130 = add i32 %esp.1.reload, -8, !insn.addr !5364
  %131 = inttoptr i32 %130 to i32*, !insn.addr !5364
  store i32 %129, i32* %131, align 4, !insn.addr !5364
  %132 = call i32 @function_1008d44(), !insn.addr !5365
  %133 = trunc i32 %132 to i8, !insn.addr !5366
  %134 = call i8 @llvm.ctpop.i8(i8 %133), !range !258, !insn.addr !5366
  %135 = call i8 @__asm_in.1(i8 -87), !insn.addr !5367
  %136 = load i8, i8* @global_var_1014f5c, align 1, !insn.addr !5368
  %137 = sext i8 %136 to i32, !insn.addr !5368
  store i32 %137, i32* %eax.1.reg2mem, !insn.addr !5368
  store i32 %130, i32* %esp.2.reg2mem, !insn.addr !5368
  store i8 %134, i8* %pf.0.in.in.reg2mem, !insn.addr !5368
  br label %dec_label_pc_100d575, !insn.addr !5368

dec_label_pc_100d575:                             ; preds = %dec_label_pc_100d504, %dec_label_pc_100d55f
  %pf.0.in.in.reload = load i8, i8* %pf.0.in.in.reg2mem
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %pf.0.in = and i8 %pf.0.in.in.reload, 1
  %pf.0 = icmp eq i8 %pf.0.in, 0
  %138 = load i32, i32* %ebx, align 4
  %139 = add i32 %esp.2.reload, -4, !insn.addr !5369
  %140 = inttoptr i32 %139 to i32*, !insn.addr !5369
  store i32 %138, i32* %140, align 4, !insn.addr !5369
  br i1 %pf.0, label %dec_label_pc_100d58a, label %dec_label_pc_100d582, !insn.addr !5370

dec_label_pc_100d582:                             ; preds = %dec_label_pc_100d575
  %141 = load i32, i32* inttoptr (i32 -1000506837 to i32*), align 4, !insn.addr !5371
  %142 = sub i32 0, %141
  %143 = sub i32 %142, 1
  store i32 %143, i32* inttoptr (i32 -1000506837 to i32*), align 4, !insn.addr !5371
  br label %dec_label_pc_100d58a, !insn.addr !5372

dec_label_pc_100d58a:                             ; preds = %dec_label_pc_100d582, %dec_label_pc_100d575
  ret i32 %eax.1.reload, !insn.addr !5373
}

define i32 @function_100d5e0() local_unnamed_addr {
dec_label_pc_100d5e0:
  %0 = call i32 @function_8ca6c8e7(), !insn.addr !5374
  ret i32 %0, !insn.addr !5374
}

define i32 @function_100d5eb(i32 %arg1) local_unnamed_addr {
dec_label_pc_100d5eb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = inttoptr i32 %0 to i32*, !insn.addr !5375
  %5 = select i1 %3, i32 -4, i32 4, !insn.addr !5375
  %6 = add i32 %5, %0, !insn.addr !5375
  %7 = add i32 %1, 906257646, !insn.addr !5375
  %8 = add i32 %7, %5, !insn.addr !5376
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5376
  %10 = load i32, i32* %9, align 4, !insn.addr !5376
  %11 = load i8*, i8** @global_var_1014f84, align 4, !insn.addr !5377
  %12 = ptrtoint i8* %11 to i32, !insn.addr !5377
  %13 = inttoptr i32 %10 to i32*, !insn.addr !5378
  %14 = load i32, i32* %13, align 4, !insn.addr !5378
  %15 = inttoptr i32 %6 to i32*, !insn.addr !5378
  store i32 %14, i32* %15, align 4, !insn.addr !5378
  %16 = add i32 %6, 4, !insn.addr !5378
  %17 = add i32 %10, 4, !insn.addr !5378
  %18 = add i32 %12, 1, !insn.addr !5379
  %19 = and i32 %12, 255, !insn.addr !5380
  %20 = and i32 %18, -256, !insn.addr !5380
  %21 = or i32 %20, %19, !insn.addr !5380
  %22 = mul i32 %2, 8, !insn.addr !5381
  %23 = add i32 %22, -8, !insn.addr !5382
  %24 = add i32 %23, %21, !insn.addr !5382
  %25 = inttoptr i32 %24 to i32*, !insn.addr !5382
  %26 = load i32, i32* %25, align 4, !insn.addr !5382
  %27 = mul i32 %26, 65536, !insn.addr !5382
  %28 = udiv i32 %26, 65536, !insn.addr !5382
  %29 = or i32 %28, %27, !insn.addr !5382
  store i32 %29, i32* %25, align 4, !insn.addr !5382
  %30 = inttoptr i32 %17 to i32*, !insn.addr !5383
  %31 = load i32, i32* %30, align 4, !insn.addr !5383
  %32 = inttoptr i32 %16 to i32*, !insn.addr !5383
  store i32 %31, i32* %32, align 4, !insn.addr !5383
  ret i32 %21, !insn.addr !5383
}

define i32 @function_100d62a() local_unnamed_addr {
dec_label_pc_100d62a:
  %0 = call i32 @function_8cb3c9b1(), !insn.addr !5384
  ret i32 %0, !insn.addr !5384
}

define i32 @function_100d642(i32 %arg1) local_unnamed_addr {
dec_label_pc_100d642:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5385
}

define i32 @function_100d64b() local_unnamed_addr {
dec_label_pc_100d64b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = trunc i32 %3 to i8, !insn.addr !5386
  %6 = add i32 %0, 1, !insn.addr !5386
  %7 = inttoptr i32 %6 to i8*, !insn.addr !5386
  store i8 %5, i8* %7, align 1, !insn.addr !5386
  %8 = add i32 %1, -24, !insn.addr !5387
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5387
  %10 = load i32, i32* %9, align 4, !insn.addr !5387
  %11 = add i32 %10, %2, !insn.addr !5387
  store i32 %11, i32* %9, align 4, !insn.addr !5387
  ret i32 %4, !insn.addr !5388
}

define i32 @function_100d670() local_unnamed_addr {
dec_label_pc_100d670:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5389
}

define i32 @function_100d682() local_unnamed_addr {
dec_label_pc_100d682:
  %merge.reg2mem = alloca i32, !insn.addr !5390
  %0 = call i32 @__decompiler_undefined_function_0()
  %esi = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = icmp eq i32 %2, 1, !insn.addr !5390
  br i1 %5, label %dec_label_pc_100d684, label %dec_label_pc_100d685, !insn.addr !5390

dec_label_pc_100d684:                             ; preds = %dec_label_pc_100d685, %dec_label_pc_100d682
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !5390

dec_label_pc_100d685:                             ; preds = %dec_label_pc_100d682
  %6 = call i32 @function_100bc54(), !insn.addr !5391
  %7 = trunc i32 %6 to i8, !insn.addr !5392
  %8 = inttoptr i32 %0 to i8*, !insn.addr !5392
  store i8 %7, i8* %8, align 1, !insn.addr !5392
  %9 = icmp eq i1 %4, false, !insn.addr !5393
  store i32 %6, i32* %merge.reg2mem, !insn.addr !5393
  br i1 %9, label %dec_label_pc_100d700, label %dec_label_pc_100d684, !insn.addr !5393

dec_label_pc_100d700:                             ; preds = %dec_label_pc_100d685
  %10 = select i1 %3, i32 -1, i32 1, !insn.addr !5392
  %11 = add i32 %10, %0, !insn.addr !5392
  %12 = inttoptr i32 %6 to i8*, !insn.addr !5394
  %13 = load i8, i8* %12, align 1, !insn.addr !5394
  %14 = udiv i32 %6, 256, !insn.addr !5394
  %15 = trunc i32 %14 to i8, !insn.addr !5394
  %16 = sub i8 %13, %15, !insn.addr !5394
  store i8 %16, i8* %12, align 1, !insn.addr !5394
  %17 = add i32 %6, 212, !insn.addr !5395
  %18 = and i32 %17, 255, !insn.addr !5395
  %19 = and i32 %6, -256, !insn.addr !5395
  %20 = or i32 %18, %19, !insn.addr !5395
  %21 = trunc i32 %1 to i16, !insn.addr !5396
  call void @__asm_out.2(i16 %21, i32 %20), !insn.addr !5396
  %22 = bitcast i32* %esi to i8*
  %23 = load i8, i8* %22, align 4, !insn.addr !5397
  %24 = inttoptr i32 %11 to i8*, !insn.addr !5397
  store i8 %23, i8* %24, align 1, !insn.addr !5397
  ret i32 %20, !insn.addr !5397
}

define i32 @function_100d70b() local_unnamed_addr {
dec_label_pc_100d70b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = and i32 %3, -256, !insn.addr !5398
  %5 = add i32 %1, -1, !insn.addr !5399
  %6 = add i32 %3, 22, !insn.addr !5400
  %7 = and i32 %6, 255, !insn.addr !5400
  %8 = or i32 %7, %4, !insn.addr !5400
  %9 = inttoptr i32 %8 to i8*, !insn.addr !5401
  %10 = load i8, i8* %9, align 1, !insn.addr !5401
  %11 = trunc i32 %6 to i8, !insn.addr !5401
  %12 = add i8 %10, %11, !insn.addr !5401
  store i8 %12, i8* %9, align 1, !insn.addr !5401
  %13 = add i32 %5, %2, !insn.addr !5402
  %14 = inttoptr i32 %13 to i8*, !insn.addr !5403
  %15 = load i8, i8* %14, align 1, !insn.addr !5403
  %16 = inttoptr i32 %0 to i8*, !insn.addr !5403
  store i8 %15, i8* %16, align 1, !insn.addr !5403
  ret i32 %8, !insn.addr !5403
}

define i32 @function_100d734() local_unnamed_addr {
dec_label_pc_100d734:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5404
}

define i32 @function_100d799() local_unnamed_addr {
dec_label_pc_100d799:
  %0 = call i32 @function_8c88cada(), !insn.addr !5405
  ret i32 %0, !insn.addr !5405
}

define i32 @function_100d7e1() local_unnamed_addr {
dec_label_pc_100d7e1:
  %0 = call i32 @function_30a6cae8(), !insn.addr !5406
  ret i32 %0, !insn.addr !5406
}

define i32 @function_100d7ef() local_unnamed_addr {
dec_label_pc_100d7ef:
  %0 = call i32 @function_100d856(), !insn.addr !5407
  ret i32 %0, !insn.addr !5407
}

define i32 @function_100d80c() local_unnamed_addr {
dec_label_pc_100d80c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5408
}

define i32 @function_100d830() local_unnamed_addr {
dec_label_pc_100d830:
  %0 = call i32 @function_100d885(i32 ptrtoint (i32* @0 to i32)), !insn.addr !5409
  ret i32 %0, !insn.addr !5409
}

define i32 @function_100d856() local_unnamed_addr {
dec_label_pc_100d856:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -12, !insn.addr !5410
  %2 = inttoptr i32 %1 to i32*, !insn.addr !5410
  %3 = load i32, i32* %2, align 4, !insn.addr !5410
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5411
  %5 = load i32, i32* %4, align 4, !insn.addr !5411
  %6 = sub i32 %5, %3, !insn.addr !5411
  store i32 %6, i32* %4, align 4, !insn.addr !5411
  %7 = call i32 @__asm_hlt(), !insn.addr !5412
  %8 = add i32 %7, 139, !insn.addr !5413
  %9 = and i32 %8, 255, !insn.addr !5413
  %10 = and i32 %7, -256, !insn.addr !5413
  %11 = or i32 %9, %10, !insn.addr !5413
  ret i32 %11, !insn.addr !5414
}

define i32 @function_100d885(i32 %arg1) local_unnamed_addr {
dec_label_pc_100d885:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %edx = alloca i32, align 4
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = add i32 %3, -655760959, !insn.addr !5415
  %9 = inttoptr i32 %8 to i8*, !insn.addr !5415
  %10 = load i8, i8* %9, align 1, !insn.addr !5415
  %11 = trunc i32 %4 to i8, !insn.addr !5415
  %12 = add i8 %10, %11, !insn.addr !5415
  store i8 %12, i8* %9, align 1, !insn.addr !5415
  %13 = inttoptr i32 %1 to i8*, !insn.addr !5416
  %14 = inttoptr i32 %0 to i8*, !insn.addr !5416
  call void @__asm_rep_movsd_memcpy(i8* %14, i8* %13, i32 %4), !insn.addr !5416
  %15 = load i32, i32* inttoptr (i32 -1952124157 to i32*), align 4, !insn.addr !5417
  %16 = add i32 %15, -69, !insn.addr !5417
  store i32 %16, i32* inttoptr (i32 -1952124157 to i32*), align 4, !insn.addr !5417
  %17 = add i32 %5, 58, !insn.addr !5418
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5418
  %19 = load i32, i32* %18, align 4, !insn.addr !5418
  %20 = bitcast i32* %edx to i8*
  %21 = load i8, i8* %20, align 4, !insn.addr !5419
  %22 = udiv i32 %5, 256, !insn.addr !5419
  %23 = trunc i32 %22 to i8, !insn.addr !5419
  %24 = xor i8 %21, %23, !insn.addr !5419
  %25 = load i32, i32* %edx, align 4, !insn.addr !5419
  %26 = inttoptr i32 %25 to i8*, !insn.addr !5419
  store i8 %24, i8* %26, align 1, !insn.addr !5419
  %27 = load i32, i32* inttoptr (i32 579075141 to i32*), align 4, !insn.addr !5420
  %28 = add i32 %27, -1, !insn.addr !5420
  store i32 %28, i32* inttoptr (i32 579075141 to i32*), align 4, !insn.addr !5420
  %29 = add i32 %2, -12, !insn.addr !5421
  %30 = inttoptr i32 %29 to i32*, !insn.addr !5421
  %31 = load i32, i32* %30, align 4, !insn.addr !5421
  %32 = add i32 %31, -24, !insn.addr !5422
  %33 = inttoptr i32 %32 to i32*, !insn.addr !5422
  %34 = load i32, i32* %33, align 4, !insn.addr !5422
  %35 = load i32, i32* %edx, align 4, !insn.addr !5422
  %36 = add i32 %35, %34, !insn.addr !5422
  %37 = icmp eq i32 %36, 0, !insn.addr !5422
  store i32 %36, i32* %33, align 4, !insn.addr !5422
  br i1 %37, label %dec_label_pc_100d95a, label %dec_label_pc_100d919, !insn.addr !5423

dec_label_pc_100d919:                             ; preds = %dec_label_pc_100d885
  %38 = select i1 %7, i32 -4, i32 4, !insn.addr !5416
  %39 = mul i32 %38, %4, !insn.addr !5416
  %40 = add i32 %0, 70, !insn.addr !5416
  %41 = add i32 %40, %39, !insn.addr !5424
  %42 = inttoptr i32 %41 to i8*, !insn.addr !5424
  %43 = load i8, i8* %42, align 1, !insn.addr !5424
  %44 = load i32, i32* %edx, align 4, !insn.addr !5424
  %45 = udiv i32 %44, 256, !insn.addr !5424
  %46 = trunc i32 %45 to i8, !insn.addr !5424
  %47 = add i8 %43, %46, !insn.addr !5424
  store i8 %47, i8* %42, align 1, !insn.addr !5424
  %48 = add i32 %2, 34, !insn.addr !5425
  %49 = inttoptr i32 %48 to i32*, !insn.addr !5425
  %50 = load i32, i32* %49, align 4, !insn.addr !5425
  %51 = mul i32 %50, 8, !insn.addr !5425
  store i32 %51, i32* %49, align 4, !insn.addr !5425
  %52 = call i32 @unknown_1802314(i32 %19), !insn.addr !5426
  %53 = add i32 %2, -2, !insn.addr !5427
  %54 = inttoptr i32 %53 to i32*, !insn.addr !5427
  %55 = load i32, i32* %54, align 4, !insn.addr !5427
  %56 = call i32 @unknown_e850f495(i16 %6, i32 %55), !insn.addr !5428
  %57 = load i8, i8* inttoptr (i32 -1959561928 to i8*), align 8, !insn.addr !5429
  %58 = mul i8 %57, 2, !insn.addr !5429
  %59 = lshr i8 %57, 7, !insn.addr !5429
  %60 = or i8 %59, %58, !insn.addr !5429
  store i8 %60, i8* inttoptr (i32 -1959561928 to i8*), align 8, !insn.addr !5429
  %61 = load i32, i32* inttoptr (i32 3 to i32*), align 4, !insn.addr !5430
  %62 = add i32 %61, 8, !insn.addr !5431
  %63 = inttoptr i32 %62 to i32*, !insn.addr !5431
  %64 = load i32, i32* %63, align 4, !insn.addr !5431
  store i32 %64, i32* %edx, align 4, !insn.addr !5431
  br label %dec_label_pc_100d95a, !insn.addr !5432

dec_label_pc_100d95a:                             ; preds = %dec_label_pc_100d885, %dec_label_pc_100d919
  call void @llvm.trap()
  unreachable
}

define i32 @function_100d9b6() local_unnamed_addr {
dec_label_pc_100d9b6:
  %merge.reg2mem = alloca i32, !insn.addr !5433
  %edi.0.reg2mem = alloca i32, !insn.addr !5433
  %esi.0.reg2mem = alloca i8*, !insn.addr !5433
  %df.0.reg2mem = alloca i32, !insn.addr !5433
  %esp.0.reg2mem = alloca i32, !insn.addr !5433
  %ebx.0.reg2mem = alloca i32, !insn.addr !5433
  %edx.0.reg2mem = alloca i32, !insn.addr !5433
  %ecx.0.reg2mem = alloca i32, !insn.addr !5433
  %eax.0.reg2mem = alloca i32, !insn.addr !5433
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %3 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5433
  %phitmp = add i32 %0, 56
  %phitmp1 = inttoptr i32 %phitmp to i8*
  %4 = add i32 %1, -4, !insn.addr !5434
  %5 = inttoptr i32 %4 to i32*
  %6 = add i32 %1, -52, !insn.addr !5435
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5435
  %8 = add i32 %1, 1685786560, !insn.addr !5436
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5436
  %10 = add i32 %1, 16
  %11 = inttoptr i32 %10 to i32*
  %phitmp4 = select i1 %2, i32 -5, i32 3
  store i32 46, i32* %edx.0.reg2mem, !insn.addr !5437
  store i32 %3, i32* %esp.0.reg2mem, !insn.addr !5437
  store i32 %phitmp4, i32* %df.0.reg2mem, !insn.addr !5437
  store i8* %phitmp1, i8** %esi.0.reg2mem, !insn.addr !5437
  br label %dec_label_pc_100d9b9, !insn.addr !5437

dec_label_pc_100d9b9:                             ; preds = %dec_label_pc_100d9b9, %dec_label_pc_100d9b6
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i8*, i8** %esi.0.reg2mem
  %df.0.reload = load i32, i32* %df.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %12 = add i32 %esp.0.reload, -4, !insn.addr !5438
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5438
  store i32 %ecx.0.reload, i32* %13, align 4, !insn.addr !5438
  %14 = add i32 %esp.0.reload, -8, !insn.addr !5439
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5439
  store i32 %ecx.0.reload, i32* %15, align 4, !insn.addr !5439
  %16 = add i32 %esp.0.reload, -12, !insn.addr !5440
  %17 = inttoptr i32 %16 to i32*, !insn.addr !5440
  store i32 %ebx.0.reload, i32* %17, align 4, !insn.addr !5440
  %18 = load i8, i8* %esi.0.reload, align 1, !insn.addr !5441
  %19 = trunc i32 %edx.0.reload to i8, !insn.addr !5441
  %20 = or i8 %18, %19, !insn.addr !5441
  store i8 %20, i8* %esi.0.reload, align 1, !insn.addr !5441
  %21 = load i32, i32* inttoptr (i32 -642297872 to i32*), align 16, !insn.addr !5442
  %22 = add i32 %esp.0.reload, -16, !insn.addr !5442
  %23 = inttoptr i32 %22 to i32*, !insn.addr !5442
  store i32 %21, i32* %23, align 4, !insn.addr !5442
  %24 = inttoptr i32 %ebx.0.reload to i32*, !insn.addr !5443
  %25 = load i32, i32* %24, align 4, !insn.addr !5443
  %26 = add i32 %esp.0.reload, -20, !insn.addr !5443
  %27 = inttoptr i32 %26 to i32*, !insn.addr !5443
  store i32 %25, i32* %27, align 4, !insn.addr !5443
  store i32 0, i32* %5, align 4, !insn.addr !5434
  store i32 0, i32* %7, align 4, !insn.addr !5435
  %28 = and i32 %eax.0.reload, -256, !insn.addr !5444
  %29 = inttoptr i32 %edi.0.reload to i32*, !insn.addr !5445
  store i32 %28, i32* %29, align 4, !insn.addr !5445
  %30 = or i32 %ebx.0.reload, 255, !insn.addr !5446
  %31 = load i32, i32* %9, align 4, !insn.addr !5436
  %32 = add i32 %31, 1, !insn.addr !5436
  store i32 %32, i32* %9, align 4, !insn.addr !5436
  %33 = or i32 %edx.0.reload, 65280, !insn.addr !5447
  %34 = inttoptr i32 %30 to i32*, !insn.addr !5448
  %35 = load i32, i32* %34, align 4, !insn.addr !5448
  %36 = add i32 %esp.0.reload, -24, !insn.addr !5448
  %37 = inttoptr i32 %36 to i32*, !insn.addr !5448
  store i32 %35, i32* %37, align 4, !insn.addr !5448
  %38 = add i32 %30, 1, !insn.addr !5449
  %39 = trunc i32 %33 to i16, !insn.addr !5450
  call void @__asm_out(i16 %39, i8 ptrtoint (i32* @global_var_1014ff4 to i8)), !insn.addr !5450
  %40 = call i32 @function_1007bd1(), !insn.addr !5451
  store i32 0, i32* %5, align 4, !insn.addr !5452
  %41 = call i32 @unknown_9cb17c26(), !insn.addr !5453
  store i32 %41, i32* %5, align 4, !insn.addr !5454
  %42 = add i32 %33, 1, !insn.addr !5455
  %43 = load i32, i32* inttoptr (i32 1166802943 to i32*), align 4, !insn.addr !5456
  %44 = inttoptr i32 %43 to i32*, !insn.addr !5457
  store i32 0, i32* %44, align 4, !insn.addr !5457
  %45 = load i32, i32* @global_var_1014fb8, align 4, !insn.addr !5458
  %46 = inttoptr i32 %45 to i32*, !insn.addr !5459
  %47 = load i32, i32* %46, align 4, !insn.addr !5459
  %48 = add i32 %47, 4, !insn.addr !5460
  %49 = inttoptr i32 %48 to i32*, !insn.addr !5460
  %50 = load i32, i32* %49, align 4, !insn.addr !5460
  store i32 %50, i32* inttoptr (i32 -59375736 to i32*), align 8, !insn.addr !5460
  %51 = call i32 @unknown_84007bca(), !insn.addr !5461
  %52 = load i32, i32* %11, align 4, !insn.addr !5462
  %53 = inttoptr i32 %52 to i32*, !insn.addr !5463
  store i32 %51, i32* %53, align 4, !insn.addr !5463
  %54 = and i32 %51, -256, !insn.addr !5464
  %55 = add i32 %edi.0.reload, %df.0.reload, !insn.addr !5465
  %56 = add nsw i32 %30, -116, !insn.addr !5466
  %57 = inttoptr i32 %56 to i32*, !insn.addr !5466
  %58 = load i32, i32* %57, align 4, !insn.addr !5466
  %59 = add i32 %58, %38, !insn.addr !5466
  %60 = icmp eq i32 %59, 0, !insn.addr !5466
  store i32 %59, i32* %57, align 4, !insn.addr !5466
  %61 = add i32 %52, -1, !insn.addr !5467
  %62 = icmp ne i32 %61, 0, !insn.addr !5467
  %63 = icmp eq i1 %62, %60, !insn.addr !5467
  store i32 %54, i32* %eax.0.reg2mem, !insn.addr !5467
  store i32 %61, i32* %ecx.0.reg2mem, !insn.addr !5467
  store i32 %42, i32* %edx.0.reg2mem, !insn.addr !5467
  store i32 %38, i32* %ebx.0.reg2mem, !insn.addr !5467
  store i32 -59375736, i32* %esp.0.reg2mem, !insn.addr !5467
  store i32 3, i32* %df.0.reg2mem, !insn.addr !5467
  store i8* inttoptr (i32 56 to i8*), i8** %esi.0.reg2mem, !insn.addr !5467
  store i32 %55, i32* %edi.0.reg2mem, !insn.addr !5467
  br i1 %63, label %dec_label_pc_100d9b9, label %dec_label_pc_100da2e, !insn.addr !5467

dec_label_pc_100da2e:                             ; preds = %dec_label_pc_100d9b9
  %64 = call i32 @__asm_int3(), !insn.addr !5468
  %65 = inttoptr i32 %64 to i32*, !insn.addr !5469
  %66 = load i32, i32* %65, align 4, !insn.addr !5469
  %67 = load i32, i32* inttoptr (i32 -59375736 to i32*), align 8, !insn.addr !5470
  %68 = and i32 %67, 1024, !insn.addr !5470
  %69 = icmp eq i32 %68, 0, !insn.addr !5470
  %70 = load i32, i32* inttoptr (i32 -1 to i32*), align 4, !insn.addr !5471
  %71 = inttoptr i32 %66 to i32*, !insn.addr !5471
  store i32 %70, i32* %71, align 4, !insn.addr !5471
  %72 = select i1 %69, i32 4, i32 -4, !insn.addr !5471
  %73 = add i32 %72, %66, !insn.addr !5471
  %74 = add nsw i32 %72, -1, !insn.addr !5471
  %75 = and i32 %64, 83, !insn.addr !5472
  %76 = inttoptr i32 %74 to i8*, !insn.addr !5473
  %77 = inttoptr i32 %73 to i8*, !insn.addr !5473
  call void @__asm_rep_movsb_memcpy(i8* %77, i8* nonnull %76, i32 %75), !insn.addr !5473
  %78 = load i32, i32* %5, align 4, !insn.addr !5474
  %79 = add i32 %78, 1, !insn.addr !5475
  %80 = xor i32 %78, -2147483648
  %81 = and i32 %79, %80, !insn.addr !5475
  %82 = icmp slt i32 %81, 0, !insn.addr !5475
  store i32 %64, i32* %merge.reg2mem, !insn.addr !5476
  br i1 %82, label %dec_label_pc_100da54, label %dec_label_pc_100da50, !insn.addr !5476

dec_label_pc_100da50:                             ; preds = %dec_label_pc_100da54, %dec_label_pc_100da2e
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !5476

dec_label_pc_100da54:                             ; preds = %dec_label_pc_100da2e
  %83 = load i32, i32* inttoptr (i32 1619262544 to i32*), align 16, !insn.addr !5477
  %84 = add i32 %83, -1, !insn.addr !5477
  store i32 %84, i32* inttoptr (i32 1619262544 to i32*), align 16, !insn.addr !5477
  %85 = trunc i32 %64 to i8
  %86 = add i8 %85, 32, !insn.addr !5478
  %87 = add i8 %85, 31, !insn.addr !5478
  %88 = xor i8 %87, %86, !insn.addr !5478
  %89 = sub i8 -32, %85, !insn.addr !5478
  %90 = and i8 %88, %89, !insn.addr !5478
  %91 = icmp slt i8 %90, 0, !insn.addr !5478
  store i32 1, i32* %merge.reg2mem, !insn.addr !5479
  br i1 %91, label %dec_label_pc_100da50, label %dec_label_pc_100da67, !insn.addr !5479

dec_label_pc_100da67:                             ; preds = %dec_label_pc_100da54
  %92 = and i32 %64, -256, !insn.addr !5480
  %93 = zext i8 %87 to i32, !insn.addr !5478
  %94 = or i32 %92, %93, !insn.addr !5478
  ret i32 %94, !insn.addr !5479
}

define i32 @function_100daad() local_unnamed_addr {
dec_label_pc_100daad:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = load i32, i32* inttoptr (i32 -1946157151 to i32*), align 4, !insn.addr !5481
  %2 = inttoptr i32 %1 to i32*, !insn.addr !5482
  store i32 0, i32* %2, align 4, !insn.addr !5482
  ret i32 %0, !insn.addr !5483
}

define i32 @function_100daf3() local_unnamed_addr {
dec_label_pc_100daf3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__asm_in(i32 255), !insn.addr !5484
  %2 = add i32 %0, 1619261509, !insn.addr !5485
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5485
  %4 = load i32, i32* %3, align 4, !insn.addr !5485
  %5 = add i32 %4, -1, !insn.addr !5485
  store i32 %5, i32* %3, align 4, !insn.addr !5485
  %6 = inttoptr i32 %1 to i32*, !insn.addr !5486
  %7 = load i32, i32* %6, align 4, !insn.addr !5486
  %8 = and i32 %7, %1, !insn.addr !5486
  store i32 %8, i32* %6, align 4, !insn.addr !5486
  %9 = add i32 %0, 66, !insn.addr !5487
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5487
  %11 = load i32, i32* %10, align 4, !insn.addr !5487
  ret i32 %11, !insn.addr !5488
}

define i32 @function_100db28() local_unnamed_addr {
dec_label_pc_100db28:
  %0 = call i32 @unknown_a6ce2f(), !insn.addr !5489
  ret i32 %0, !insn.addr !5489
}

define i32 @function_100db3b() local_unnamed_addr {
dec_label_pc_100db3b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5490
}

define i32 @function_100db57(i32 %arg1) local_unnamed_addr {
dec_label_pc_100db57:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = load i32, i32* inttoptr (i32 16905196 to i32*), align 4, !insn.addr !5491
  %2 = add i32 %1, 1, !insn.addr !5491
  store i32 %2, i32* inttoptr (i32 16905196 to i32*), align 4, !insn.addr !5491
  ret i32 %0, !insn.addr !5492
}

define i32 @function_100db5f() local_unnamed_addr {
dec_label_pc_100db5f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i16, align 2
  %7 = call i32 @unknown_c68cf0(), !insn.addr !5493
  %8 = trunc i32 %7 to i8, !insn.addr !5494
  %9 = mul i32 %1, 4, !insn.addr !5494
  %10 = add i32 %2, -16777216, !insn.addr !5494
  %11 = add i32 %10, %9, !insn.addr !5494
  %12 = inttoptr i32 %11 to i8*, !insn.addr !5494
  %13 = load i8, i8* %12, align 1, !insn.addr !5494
  %14 = sub i8 %8, %13, !insn.addr !5494
  %15 = zext i8 %14 to i32, !insn.addr !5494
  %16 = and i32 %7, -256, !insn.addr !5494
  %17 = or i32 %16, %15, !insn.addr !5494
  %18 = xor i32 %17, 20336616, !insn.addr !5495
  %19 = or i32 %3, 255, !insn.addr !5496
  %20 = add i32 %1, -1752952896, !insn.addr !5497
  %21 = inttoptr i32 %20 to i8*, !insn.addr !5497
  %22 = load i8, i8* %21, align 1, !insn.addr !5497
  %23 = trunc i32 %18 to i8, !insn.addr !5497
  store i8 %23, i8* %21, align 1, !insn.addr !5497
  %24 = and i32 %18, -256, !insn.addr !5497
  %25 = add i32 %5, -1, !insn.addr !5498
  %26 = load i8, i8* inttoptr (i32 595792383 to i8*), align 1, !insn.addr !5499
  %27 = zext i8 %26 to i32, !insn.addr !5499
  %28 = or i32 %24, %27, !insn.addr !5499
  %29 = add i32 %28, -106, !insn.addr !5500
  %30 = inttoptr i32 %29 to i8*, !insn.addr !5500
  %31 = load i8, i8* %30, align 1, !insn.addr !5500
  %32 = trunc i32 %4 to i8, !insn.addr !5500
  %33 = add i8 %31, %32, !insn.addr !5500
  store i8 %33, i8* %30, align 1, !insn.addr !5500
  %34 = load i16, i16* %stack_var_-8, align 2, !insn.addr !5501
  %35 = sext i16 %34 to i32, !insn.addr !5501
  %36 = call i32 @function_1007bc1(i32 %35), !insn.addr !5501
  %37 = inttoptr i32 %19 to i32*, !insn.addr !5502
  %38 = load i32, i32* %37, align 4, !insn.addr !5502
  %39 = inttoptr i32 %38 to i32*, !insn.addr !5503
  %40 = load i32, i32* %39, align 4, !insn.addr !5503
  %41 = and i32 %40, -24, !insn.addr !5503
  store i32 %41, i32* %39, align 4, !insn.addr !5503
  %42 = call i32 @__asm_hlt(), !insn.addr !5504
  %43 = udiv i32 %3, 256, !insn.addr !5505
  %44 = mul i32 %43, 2
  %45 = xor i32 %44, %43
  %46 = trunc i32 %45 to i8, !insn.addr !5505
  %47 = icmp slt i8 %46, 0, !insn.addr !5505
  br i1 %47, label %dec_label_pc_100dc05, label %dec_label_pc_100dba6, !insn.addr !5506

dec_label_pc_100dba6:                             ; preds = %dec_label_pc_100db5f
  %48 = mul i8 %22, 2, !insn.addr !5507
  %49 = zext i8 %48 to i32, !insn.addr !5507
  %50 = or i32 %24, %49, !insn.addr !5507
  %51 = xor i32 %50, %1, !insn.addr !5508
  %52 = add i32 %42, 2017329151, !insn.addr !5509
  %53 = inttoptr i32 %52 to i8*, !insn.addr !5509
  %54 = load i8, i8* %53, align 1, !insn.addr !5509
  %55 = udiv i32 %42, 256, !insn.addr !5509
  %56 = trunc i32 %55 to i8, !insn.addr !5509
  %57 = and i8 %54, %56, !insn.addr !5509
  store i8 %57, i8* %53, align 1, !insn.addr !5509
  %58 = inttoptr i32 %25 to i32*, !insn.addr !5510
  store i32 %42, i32* %58, align 4, !insn.addr !5510
  %59 = add i32 %51, 1, !insn.addr !5511
  %60 = inttoptr i32 %59 to i32*, !insn.addr !5511
  %61 = load i32, i32* %60, align 4, !insn.addr !5511
  %62 = add i32 %61, 139, !insn.addr !5512
  %63 = and i32 %62, 255, !insn.addr !5512
  %64 = and i32 %61, -256, !insn.addr !5512
  %65 = or i32 %63, %64, !insn.addr !5513
  %66 = inttoptr i32 %65 to i8*, !insn.addr !5514
  %67 = load i8, i8* %66, align 1, !insn.addr !5514
  %68 = trunc i32 %62 to i8, !insn.addr !5514
  %69 = add i8 %67, %68, !insn.addr !5514
  store i8 %69, i8* %66, align 1, !insn.addr !5514
  %70 = trunc i32 %4 to i16, !insn.addr !5515
  %71 = call i32 @__asm_in.5(i16 %70), !insn.addr !5515
  %72 = call i32 @function_8cedcfc1(), !insn.addr !5516
  ret i32 %72, !insn.addr !5516

dec_label_pc_100dc05:                             ; preds = %dec_label_pc_100db5f
  %73 = and i32 %19, -65281, !insn.addr !5505
  %74 = mul i32 %43, 512, !insn.addr !5505
  %75 = and i32 %74, 65024, !insn.addr !5505
  %76 = or i32 %75, %73, !insn.addr !5505
  %77 = inttoptr i32 %42 to i8*, !insn.addr !5517
  %78 = load i8, i8* %77, align 1, !insn.addr !5517
  %79 = trunc i32 %42 to i8, !insn.addr !5517
  %80 = add i8 %78, %79, !insn.addr !5517
  store i8 %80, i8* %77, align 1, !insn.addr !5517
  %81 = add i32 %76, 47301057, !insn.addr !5518
  %82 = inttoptr i32 %81 to i8*, !insn.addr !5518
  %83 = load i8, i8* %82, align 64, !insn.addr !5518
  %84 = trunc i32 %25 to i8, !insn.addr !5518
  %85 = add i8 %83, %84, !insn.addr !5518
  store i8 %85, i8* %82, align 64, !insn.addr !5518
  %86 = bitcast i16* %stack_var_-8 to i8*, !insn.addr !5519
  %87 = inttoptr i32 %0 to i8*, !insn.addr !5519
  call void @__asm_rep_movsd_memcpy(i8* %87, i8* nonnull %86, i32 %25), !insn.addr !5519
  %88 = select i1 %6, i32 -4, i32 4, !insn.addr !5519
  %89 = mul i32 %88, %25, !insn.addr !5519
  %90 = add i32 %89, %0, !insn.addr !5519
  %91 = inttoptr i32 %90 to i32*, !insn.addr !5520
  %92 = load i32, i32* %91, align 4, !insn.addr !5520
  %93 = and i32 %92, 3, !insn.addr !5520
  store i32 %93, i32* %91, align 4, !insn.addr !5520
  %94 = inttoptr i32 %90 to i8*, !insn.addr !5521
  call void @__asm_rep_movsb_memcpy(i8* %94, i8* %94, i32 %42), !insn.addr !5521
  %95 = call i32 @function_100dc27(), !insn.addr !5522
  ret i32 %95, !insn.addr !5522
}

define i32 @function_100dc20() local_unnamed_addr {
dec_label_pc_100dc20:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_1009ad4(i32 %0), !insn.addr !5523
  ret i32 %1, !insn.addr !5523
}

define i32 @function_100dc27() local_unnamed_addr {
dec_label_pc_100dc27:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = icmp eq i1 %3, false, !insn.addr !5524
  br label %dec_label_pc_100dc2a, !insn.addr !5525

dec_label_pc_100dc2a:                             ; preds = %dec_label_pc_100dc2a, %dec_label_pc_100dc27
  br i1 %4, label %dec_label_pc_100dc2a, label %dec_label_pc_100dc32, !insn.addr !5524

dec_label_pc_100dc32:                             ; preds = %dec_label_pc_100dc2a
  %5 = trunc i32 %1 to i8
  store i8 %5, i8* inttoptr (i32 -97 to i8*), align 1
  %6 = udiv i32 %2, 256, !insn.addr !5526
  %7 = trunc i32 %6 to i8, !insn.addr !5526
  %8 = add i8 %7, %5, !insn.addr !5526
  %9 = and i8 %5, 15, !insn.addr !5526
  %10 = and i8 %7, 15, !insn.addr !5526
  %11 = add nuw nsw i8 %10, %9, !insn.addr !5526
  %12 = icmp ugt i8 %11, 15, !insn.addr !5526
  %13 = icmp ult i8 %8, %5, !insn.addr !5526
  %14 = icmp eq i8 %8, 0, !insn.addr !5526
  %15 = icmp slt i8 %8, 0, !insn.addr !5526
  %16 = call i8 @llvm.ctpop.i8(i8 %8), !range !258, !insn.addr !5526
  %17 = and i8 %16, 1, !insn.addr !5526
  %18 = icmp eq i8 %17, 0, !insn.addr !5526
  %19 = zext i1 %13 to i32, !insn.addr !5527
  %20 = zext i1 %18 to i32, !insn.addr !5527
  %21 = zext i1 %12 to i32, !insn.addr !5527
  %22 = zext i1 %14 to i32, !insn.addr !5527
  %23 = zext i1 %15 to i32, !insn.addr !5527
  %24 = mul i32 %20, 4, !insn.addr !5527
  %25 = mul i32 %21, 16, !insn.addr !5527
  %26 = mul i32 %22, 64, !insn.addr !5527
  %27 = mul i32 %23, 128, !insn.addr !5527
  %28 = or i32 %26, %19, !insn.addr !5527
  %29 = or i32 %28, %27, !insn.addr !5527
  %30 = or i32 %29, %25, !insn.addr !5527
  %31 = or i32 %30, %24, !insn.addr !5527
  %32 = mul i32 %31, 256, !insn.addr !5527
  %33 = and i32 %0, -65281, !insn.addr !5527
  %34 = or i32 %33, %32, !insn.addr !5527
  %35 = or i32 %34, 512, !insn.addr !5527
  ret i32 %35, !insn.addr !5527
}

define i32 @function_100dc3a(i32 %arg1) local_unnamed_addr {
dec_label_pc_100dc3a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5528
}

define i32 @function_100dc53(i32 %arg1) local_unnamed_addr {
dec_label_pc_100dc53:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %.neg1 = sext i1 %3 to i32
  %.neg2 = sub i32 %0, %1, !insn.addr !5529
  %4 = add i32 %.neg2, %.neg1, !insn.addr !5529
  %5 = inttoptr i32 %0 to i32*, !insn.addr !5529
  store i32 %4, i32* %5, align 4, !insn.addr !5529
  ret i32 %2, !insn.addr !5530
}

define i32 @function_100dc65() local_unnamed_addr {
dec_label_pc_100dc65:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5531
}

define i32 @function_100dc8b(i32 %arg1) local_unnamed_addr {
dec_label_pc_100dc8b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, -1953461251, !insn.addr !5532
  %4 = inttoptr i32 %3 to i8*, !insn.addr !5532
  %5 = load i8, i8* %4, align 1, !insn.addr !5532
  %6 = trunc i32 %1 to i8, !insn.addr !5532
  %7 = or i8 %5, %6, !insn.addr !5532
  store i8 %7, i8* %4, align 1, !insn.addr !5532
  %8 = udiv i32 %0, 256, !insn.addr !5533
  %9 = mul i32 %8, 2
  %10 = xor i32 %9, %8
  %11 = trunc i32 %10 to i8, !insn.addr !5533
  %12 = icmp slt i8 %11, 0, !insn.addr !5533
  br i1 %12, label %dec_label_pc_100dc9a, label %dec_label_pc_100dc96, !insn.addr !5534

dec_label_pc_100dc96:                             ; preds = %dec_label_pc_100dc8b
  ret i32 %2, !insn.addr !5534

dec_label_pc_100dc9a:                             ; preds = %dec_label_pc_100dc8b
  %13 = and i32 %0, -65281, !insn.addr !5533
  %14 = mul i32 %8, 512, !insn.addr !5533
  %15 = and i32 %14, 65024, !insn.addr !5533
  %16 = or i32 %15, %13, !insn.addr !5533
  %17 = add i32 %16, 25818189, !insn.addr !5535
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5535
  %19 = load i32, i32* %18, align 4, !insn.addr !5535
  %20 = add i32 %19, -1, !insn.addr !5535
  store i32 %20, i32* %18, align 4, !insn.addr !5535
  %21 = call i32 @function_8ca6b7bd(i32 %1), !insn.addr !5536
  ret i32 %21, !insn.addr !5536
}

define i32 @function_100dcfe() local_unnamed_addr {
dec_label_pc_100dcfe:
  %0 = call i32 @function_8ca6d005(), !insn.addr !5537
  ret i32 %0, !insn.addr !5537
}

define i32 @function_100dd8d(i32 %arg1) local_unnamed_addr {
dec_label_pc_100dd8d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -1959752957, !insn.addr !5538
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5538
  %5 = load i32, i32* %4, align 4, !insn.addr !5538
  %6 = add i32 %5, %1, !insn.addr !5538
  store i32 %6, i32* %4, align 4, !insn.addr !5538
  ret i32 %2, !insn.addr !5539
}

define i32 @function_100dda4() local_unnamed_addr {
dec_label_pc_100dda4:
  %0 = call i32 @function_8ca70aab(), !insn.addr !5540
  ret i32 %0, !insn.addr !5540
}

define i32 @function_100ddaa() local_unnamed_addr {
dec_label_pc_100ddaa:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5541
}

define i32 @function_100dde1() local_unnamed_addr {
dec_label_pc_100dde1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 12, !insn.addr !5542
  %2 = inttoptr i32 %1 to i32*, !insn.addr !5542
  %3 = load i32, i32* %2, align 4, !insn.addr !5542
  %4 = udiv i32 %3, 2048, !insn.addr !5542
  %5 = mul i32 %3, 2097152, !insn.addr !5542
  %6 = or i32 %4, %5, !insn.addr !5542
  store i32 %6, i32* %2, align 4, !insn.addr !5542
  %7 = call i32 @function_5affa4f3(), !insn.addr !5543
  ret i32 %7, !insn.addr !5543
}

define i32 @function_100de3f() local_unnamed_addr {
dec_label_pc_100de3f:
  %0 = call i32 @function_8cded146(), !insn.addr !5544
  ret i32 %0, !insn.addr !5544
}

define i32 @function_100de87() local_unnamed_addr {
dec_label_pc_100de87:
  %0 = call i32 @function_8ca6d238(), !insn.addr !5545
  ret i32 %0, !insn.addr !5545
}

define i32 @function_100dec7() local_unnamed_addr {
dec_label_pc_100dec7:
  %eax.0.reg2mem = alloca i32, !insn.addr !5546
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i16 @__decompiler_undefined_function_1()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = icmp eq i1 %3, %2, !insn.addr !5546
  %6 = icmp eq i1 %4, false, !insn.addr !5546
  %7 = icmp eq i1 %5, %6, !insn.addr !5546
  br i1 %7, label %8, label %dec_label_pc_100dec9, !insn.addr !5546

; <label>:8:                                      ; preds = %dec_label_pc_100dec7
  %9 = call i32 @function_100dede(), !insn.addr !5546
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !5546
  br label %dec_label_pc_100dec9, !insn.addr !5546

dec_label_pc_100dec9:                             ; preds = %8, %dec_label_pc_100dec7
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %10 = add i32 %eax.0.reload, 1, !insn.addr !5547
  %11 = add i32 %0, 12, !insn.addr !5548
  %12 = inttoptr i32 %11 to i32*, !insn.addr !5548
  store i32 %10, i32* %12, align 4, !insn.addr !5548
  %13 = call i32 @function_100dee4(i16 %1), !insn.addr !5549
  ret i32 %13, !insn.addr !5549
}

define i32 @function_100ded4(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100ded4:
  ret i32 %arg7, !insn.addr !5550
}

define i32 @function_100dede() local_unnamed_addr {
dec_label_pc_100dede:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @unknown_88011a3c(i32 %0), !insn.addr !5551
  ret i32 %1, !insn.addr !5551
}

define i32 @function_100dee4(i16 %arg1) local_unnamed_addr {
dec_label_pc_100dee4:
  %eax.0.reg2mem = alloca i32, !insn.addr !5552
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %1, -4, !insn.addr !5552
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5552
  %7 = load i32, i32* %6, align 4, !insn.addr !5552
  %8 = add i32 %1, -94, !insn.addr !5553
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5553
  %10 = load i32, i32* %9, align 4, !insn.addr !5553
  %11 = inttoptr i32 %7 to i32*, !insn.addr !5554
  %12 = load i32, i32* %11, align 4, !insn.addr !5554
  %13 = select i1 %4, i32 5, i32 4, !insn.addr !5554
  %14 = sub i32 %12, %13, !insn.addr !5554
  store i32 %14, i32* %11, align 4, !insn.addr !5554
  %15 = mul i32 %7, 2, !insn.addr !5555
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5555
  %17 = load i32, i32* %16, align 4, !insn.addr !5555
  %18 = and i32 %17, %7, !insn.addr !5555
  store i32 %18, i32* %16, align 4, !insn.addr !5555
  %19 = add i32 %1, 100, !insn.addr !5556
  %20 = inttoptr i32 %19 to i32*, !insn.addr !5556
  %21 = load i32, i32* %20, align 4, !insn.addr !5556
  %22 = add i32 %1, -8, !insn.addr !5557
  %23 = call i32 @unknown_87003a54(i32 %22, i32 %21, i32 %7, i32 %10), !insn.addr !5558
  %24 = load i8, i8* @global_var_1014f60, align 1, !insn.addr !5559
  %25 = icmp eq i8 %24, 0, !insn.addr !5559
  %26 = icmp eq i1 %25, false, !insn.addr !5560
  store i32 %23, i32* %eax.0.reg2mem, !insn.addr !5560
  br i1 %26, label %dec_label_pc_100df6c, label %dec_label_pc_100df08, !insn.addr !5560

dec_label_pc_100df08:                             ; preds = %dec_label_pc_100dee4
  %27 = load i32, i32* inttoptr (i32 -1962848420 to i32*), align 4, !insn.addr !5561
  %28 = ashr i32 %27, 31, !insn.addr !5562
  %29 = add nsw i32 %28, -117, !insn.addr !5563
  %30 = inttoptr i32 %29 to i32*, !insn.addr !5563
  %31 = load i32, i32* %30, align 4, !insn.addr !5563
  %32 = add i32 %31, %2, !insn.addr !5563
  store i32 %32, i32* %30, align 4, !insn.addr !5563
  %33 = add i32 %2, -379573263, !insn.addr !5564
  %34 = inttoptr i32 %33 to i32*, !insn.addr !5564
  %35 = load i32, i32* %34, align 4, !insn.addr !5564
  %36 = add i32 %27, 2, !insn.addr !5565
  %37 = add i32 %36, %28, !insn.addr !5566
  %38 = inttoptr i32 %37 to i32*, !insn.addr !5566
  %39 = load i32, i32* %38, align 4, !insn.addr !5566
  %40 = add i32 %39, %0, !insn.addr !5566
  store i32 %40, i32* %38, align 4, !insn.addr !5566
  %41 = trunc i32 %2 to i8, !insn.addr !5567
  store i8 %41, i8* inttoptr (i32 -1836328348 to i8*), align 4, !insn.addr !5567
  %42 = inttoptr i32 %2 to i32*, !insn.addr !5568
  %43 = load i32, i32* %42, align 4, !insn.addr !5568
  %44 = sext i32 %43 to i64, !insn.addr !5568
  %45 = mul nsw i64 %44, -58, !insn.addr !5568
  %46 = trunc i64 %45 to i32, !insn.addr !5568
  %47 = mul i64 %44, -249108103168
  %48 = sdiv i64 %47, 4294967296, !insn.addr !5568
  %49 = icmp eq i64 %45, %48, !insn.addr !5568
  br i1 %49, label %dec_label_pc_100df4c, label %dec_label_pc_100df54, !insn.addr !5569

dec_label_pc_100df4c:                             ; preds = %dec_label_pc_100df08
  %50 = and i32 %46, 14
  %51 = icmp ugt i32 %50, 9, !insn.addr !5570
  %52 = add i32 %46, 6, !insn.addr !5570
  %53 = select i1 %51, i32 %52, i32 %46, !insn.addr !5570
  %54 = zext i1 %51 to i32, !insn.addr !5570
  %55 = and i32 %53, 14, !insn.addr !5570
  %56 = and i32 %46, -65536, !insn.addr !5570
  %57 = or i32 %55, %56, !insn.addr !5570
  %58 = mul i32 %54, 256
  %59 = add i32 %58, %46
  %60 = and i32 %59, 65280, !insn.addr !5570
  %61 = or i32 %57, %60, !insn.addr !5570
  ret i32 %61, !insn.addr !5570

dec_label_pc_100df54:                             ; preds = %dec_label_pc_100df08
  %62 = mul i32 %35, -103, !insn.addr !5564
  %63 = sub i32 %62, %0, !insn.addr !5571
  %64 = add i32 %63, %46, !insn.addr !5572
  %65 = inttoptr i32 %64 to i32*, !insn.addr !5572
  %66 = load i32, i32* %65, align 4, !insn.addr !5572
  %67 = call i32 @__asm_hlt(), !insn.addr !5573
  %68 = trunc i32 %66 to i8, !insn.addr !5574
  %69 = load i8, i8* inttoptr (i32 -679319866 to i8*), align 2, !insn.addr !5574
  %70 = add i8 %69, %68, !insn.addr !5574
  %71 = zext i8 %70 to i32, !insn.addr !5574
  %72 = and i32 %66, -256, !insn.addr !5574
  %73 = or i32 %72, %71, !insn.addr !5574
  %74 = load i8, i8* inttoptr (i32 1375848036 to i8*), align 4, !insn.addr !5575
  %75 = or i8 %74, %70, !insn.addr !5575
  store i8 %75, i8* inttoptr (i32 1375848036 to i8*), align 4, !insn.addr !5575
  %76 = add i32 %67, -49, !insn.addr !5576
  %77 = inttoptr i32 %76 to i32*, !insn.addr !5576
  %78 = load i32, i32* %77, align 4, !insn.addr !5576
  %79 = sub i32 %78, %73, !insn.addr !5576
  store i32 %79, i32* %77, align 4, !insn.addr !5576
  store i32 %67, i32* %eax.0.reg2mem, !insn.addr !5576
  br label %dec_label_pc_100df6c, !insn.addr !5576

dec_label_pc_100df6c:                             ; preds = %dec_label_pc_100df54, %dec_label_pc_100dee4
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  call void @__asm_into(i32 %3), !insn.addr !5577
  ret i32 %eax.0.reload, !insn.addr !5578
}

define i32 @function_100df72(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100df72:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %1 to i8, !insn.addr !5579
  store i8 %2, i8* inttoptr (i32 -2063597510 to i8*), align 2, !insn.addr !5579
  %3 = add i32 %0, 52, !insn.addr !5580
  %4 = inttoptr i32 %3 to i8*, !insn.addr !5580
  %5 = load i8, i8* %4, align 1, !insn.addr !5580
  %6 = mul i8 %5, 2, !insn.addr !5580
  store i8 %6, i8* %4, align 1, !insn.addr !5580
  %7 = add i32 %arg6, 15, !insn.addr !5581
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5581
  %9 = load i32, i32* %8, align 4, !insn.addr !5581
  %10 = add i32 %9, %arg6, !insn.addr !5581
  store i32 %10, i32* %8, align 4, !insn.addr !5581
  %11 = inttoptr i32 %arg4 to i32*, !insn.addr !5582
  %12 = load i32, i32* %11, align 4, !insn.addr !5582
  %13 = call i32 @unknown_52007d7d(i32 %12), !insn.addr !5583
  %14 = add i32 %arg3, 16, !insn.addr !5584
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5584
  %16 = load i32, i32* %15, align 4, !insn.addr !5584
  %17 = add i32 %arg3, -16, !insn.addr !5585
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5585
  store i32 0, i32* %18, align 4, !insn.addr !5585
  %19 = call i32 @function_1007c2f(i32 %16), !insn.addr !5586
  %20 = add i32 %19, -1677465356, !insn.addr !5587
  %21 = inttoptr i32 %20 to i32*, !insn.addr !5587
  store i32 %arg5, i32* %21, align 4, !insn.addr !5587
  ret i32 %19, !insn.addr !5588
}

define i32 @function_100dfd2(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100dfd2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @function_1007bd1(), !insn.addr !5589
  %3 = and i32 %2, -216, !insn.addr !5590
  %4 = inttoptr i32 %1 to i32*, !insn.addr !5591
  %5 = call i32 @function_100ab09(i32 %3), !insn.addr !5592
  %6 = add i32 %0, -8, !insn.addr !5593
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5593
  %8 = load i32, i32* %7, align 4, !insn.addr !5593
  %9 = sub i32 %1, %8, !insn.addr !5594
  store i32 %9, i32* %4, align 4, !insn.addr !5594
  ret i32 %8, !insn.addr !5595
}

define i32 @function_100dfef() local_unnamed_addr {
dec_label_pc_100dfef:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, 2106143743, !insn.addr !5596
  %5 = inttoptr i32 %4 to i32*, !insn.addr !5596
  %6 = load i32, i32* %5, align 4, !insn.addr !5596
  %7 = xor i32 %6, %0, !insn.addr !5596
  %8 = add i32 %1, 19, !insn.addr !5597
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5597
  %10 = inttoptr i32 %7 to i8*, !insn.addr !5598
  %11 = load i8, i8* %10, align 1, !insn.addr !5598
  %12 = trunc i32 %2 to i8, !insn.addr !5598
  %13 = sub i8 %11, %12, !insn.addr !5598
  store i8 %13, i8* %10, align 1, !insn.addr !5598
  ret i32 %3, !insn.addr !5599
}

define i32 @function_100e053(i32 %arg1) local_unnamed_addr {
dec_label_pc_100e053:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5600
}

define i32 @function_100e08a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100e08a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8
  %3 = trunc i32 %1 to i8, !insn.addr !5601
  %4 = add i8 %3, %2, !insn.addr !5601
  %5 = inttoptr i32 %0 to i8*, !insn.addr !5601
  store i8 %4, i8* %5, align 1, !insn.addr !5601
  %6 = add i32 %arg1, 4, !insn.addr !5602
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5602
  %8 = load i32, i32* %7, align 4, !insn.addr !5602
  %9 = call i32 @__asm_int1(), !insn.addr !5603
  %10 = add i32 %arg2, -1, !insn.addr !5604
  %11 = sub i32 %8, %10, !insn.addr !5605
  %12 = udiv i32 %11, 4, !insn.addr !5606
  %13 = inttoptr i32 %arg4 to i32*, !insn.addr !5607
  %14 = load i32, i32* %13, align 4, !insn.addr !5607
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5608
  %16 = load i32, i32* %15, align 4, !insn.addr !5608
  %17 = add i32 %16, 46, !insn.addr !5609
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5609
  %19 = load i32, i32* %18, align 4, !insn.addr !5609
  %20 = sub i32 %19, %10, !insn.addr !5609
  store i32 %20, i32* %18, align 4, !insn.addr !5609
  %21 = add i32 %arg4, -1954772213, !insn.addr !5610
  %22 = inttoptr i32 %21 to i8*, !insn.addr !5610
  %23 = load i8, i8* %22, align 1, !insn.addr !5610
  %24 = trunc i32 %12 to i8, !insn.addr !5610
  %25 = or i8 %23, %24, !insn.addr !5610
  store i8 %25, i8* %22, align 1, !insn.addr !5610
  %26 = add i32 %arg4, -1053095863, !insn.addr !5611
  %27 = inttoptr i32 %26 to i8*, !insn.addr !5611
  %28 = load i8, i8* %27, align 1, !insn.addr !5611
  %29 = add i8 %24, -1, !insn.addr !5611
  %30 = or i8 %28, %29, !insn.addr !5611
  store i8 %30, i8* %27, align 1, !insn.addr !5611
  %31 = mul i32 %arg4, 8, !insn.addr !5612
  %32 = add i32 %31, %10, !insn.addr !5612
  %33 = inttoptr i32 %32 to i32*, !insn.addr !5612
  store i32 %arg3, i32* %33, align 4, !insn.addr !5612
  %34 = load i32, i32* inttoptr (i32 71338755 to i32*), align 4, !insn.addr !5613
  %35 = add i32 %34, -1, !insn.addr !5614
  ret i32 %35, !insn.addr !5615
}

define i32 @function_100e0ff() local_unnamed_addr {
dec_label_pc_100e0ff:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_1007bd1(), !insn.addr !5616
  %2 = add i32 %0, -4, !insn.addr !5617
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5617
  %4 = call i32 @function_1007c26(), !insn.addr !5618
  %5 = add i32 %0, 71, !insn.addr !5619
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5619
  store i32 %4, i32* %6, align 4, !insn.addr !5619
  ret i32 %4, !insn.addr !5620
}

define i32 @function_100e127(i32 %arg1) local_unnamed_addr {
dec_label_pc_100e127:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 130, !insn.addr !5621
  %2 = and i32 %1, 255, !insn.addr !5621
  %3 = and i32 %0, -256, !insn.addr !5621
  %4 = or i32 %2, %3, !insn.addr !5621
  ret i32 %4, !insn.addr !5622
}

define i32 @function_100e14b() local_unnamed_addr {
dec_label_pc_100e14b:
  %0 = call i32 @function_8cabd452(), !insn.addr !5623
  ret i32 %0, !insn.addr !5623
}

define i32 @function_100e199() local_unnamed_addr {
dec_label_pc_100e199:
  %0 = call i32 @function_98a6d4a0(), !insn.addr !5624
  ret i32 %0, !insn.addr !5624
}

define i32 @function_100e1e7() local_unnamed_addr {
dec_label_pc_100e1e7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !5625
  %3 = inttoptr i32 %0 to i8*, !insn.addr !5625
  store i8 %2, i8* %3, align 1, !insn.addr !5625
  %4 = call i32 @__asm_int1(), !insn.addr !5626
  %5 = call i32 @function_8ca6d4f9(), !insn.addr !5627
  ret i32 %5, !insn.addr !5627
}

define i32 @function_100e240() local_unnamed_addr {
dec_label_pc_100e240:
  %0 = call i32 @function_8ca6d547(), !insn.addr !5628
  ret i32 %0, !insn.addr !5628
}

define i32 @function_100e24d() local_unnamed_addr {
dec_label_pc_100e24d:
  %0 = call i32 @function_1008d44(), !insn.addr !5629
  %1 = call i32 @function_100e28c(), !insn.addr !5630
  ret i32 %1, !insn.addr !5630
}

define i32 @function_100e280() local_unnamed_addr {
dec_label_pc_100e280:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 50, !insn.addr !5631
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5631
  %4 = load i32, i32* %3, align 4, !insn.addr !5631
  %5 = add i32 %4, %1, !insn.addr !5631
  store i32 %5, i32* %3, align 4, !insn.addr !5631
  %6 = call i32 @unknown_ffe944(), !insn.addr !5632
  ret i32 %6, !insn.addr !5632
}

define i32 @function_100e28c() local_unnamed_addr {
dec_label_pc_100e28c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_hlt(), !insn.addr !5633
  %3 = call i32 @unknown_82dc58(i32 %1), !insn.addr !5634
  %4 = load i32, i32* @global_var_1014f90, align 4, !insn.addr !5635
  %5 = add i32 %0, -8, !insn.addr !5636
  %6 = call i32 @unknown_4600bd50(i32 %5, i32 %4), !insn.addr !5637
  %7 = inttoptr i32 %5 to i32*, !insn.addr !5638
  %8 = load i32, i32* %7, align 4, !insn.addr !5638
  %9 = add i32 %0, 7, !insn.addr !5639
  %10 = call i32 @function_100cb54(i32 %9, i32 %8), !insn.addr !5640
  ret i32 %10, !insn.addr !5641
}

define i32 @function_100e2b5() local_unnamed_addr {
dec_label_pc_100e2b5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_100bc54(), !insn.addr !5642
  %2 = call i32 @unknown_e100ab09(i32 %0), !insn.addr !5643
  ret i32 %0, !insn.addr !5644
}

define i32 @function_100e2d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_100e2d4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i16, !insn.addr !5645
  %4 = trunc i32 %2 to i8, !insn.addr !5645
  call void @__asm_out(i16 %3, i8 %4), !insn.addr !5645
  ret i32 %0, !insn.addr !5646
}

define i32 @function_100e2da(i32 %arg1) local_unnamed_addr {
dec_label_pc_100e2da:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @function_100dfef(), !insn.addr !5647
  %2 = load i16, i16* @global_var_1014f7c, align 2, !insn.addr !5648
  %3 = trunc i32 %0 to i16, !insn.addr !5648
  call void @__asm_arpl(i16 %2, i16 %3), !insn.addr !5648
  %4 = call i32 @function_100bd6f(i32 %arg1), !insn.addr !5649
  ret i32 %4, !insn.addr !5650
}

define i32 @function_100e2f5(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100e2f5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i64 @__decompiler_undefined_function_9()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-2 = alloca i16, align 2
  %7 = add i32 %0, -125, !insn.addr !5651
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5651
  %9 = load i32, i32* %8, align 4, !insn.addr !5651
  %10 = trunc i32 %2 to i16, !insn.addr !5652
  %11 = call i8 @__asm_in.3(i16 %10), !insn.addr !5652
  %12 = sext i8 %11 to i32, !insn.addr !5652
  %13 = and i32 %4, -256, !insn.addr !5652
  %14 = or i32 %13, %12, !insn.addr !5652
  %15 = add i32 %1, -117, !insn.addr !5653
  %16 = inttoptr i32 %15 to i8*, !insn.addr !5653
  %17 = load i8, i8* %16, align 1, !insn.addr !5653
  %18 = trunc i32 %2 to i8, !insn.addr !5653
  %19 = zext i1 %6 to i8, !insn.addr !5653
  %20 = add i8 %19, %18, !insn.addr !5653
  %21 = add i8 %20, %17, !insn.addr !5653
  store i8 %21, i8* %16, align 1, !insn.addr !5653
  %22 = add i32 %9, 861351171, !insn.addr !5654
  %23 = inttoptr i32 %22 to i8*, !insn.addr !5654
  %24 = load i8, i8* %23, align 1, !insn.addr !5654
  %25 = udiv i32 %1, 256, !insn.addr !5654
  %26 = trunc i32 %25 to i8, !insn.addr !5654
  %27 = or i8 %24, %26, !insn.addr !5654
  store i8 %27, i8* %23, align 1, !insn.addr !5654
  %28 = add i32 %3, 2106195123, !insn.addr !5655
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5655
  %30 = load i32, i32* %29, align 4, !insn.addr !5655
  %31 = add i32 %30, -1, !insn.addr !5655
  store i32 %31, i32* %29, align 4, !insn.addr !5655
  %32 = inttoptr i32 %14 to i32*, !insn.addr !5656
  %33 = load i32, i32* %32, align 4, !insn.addr !5656
  %34 = add i32 %14, 4, !insn.addr !5657
  %35 = inttoptr i32 %34 to i32*, !insn.addr !5657
  %36 = load i32, i32* %35, align 4, !insn.addr !5657
  %37 = inttoptr i32 %33 to i64*, !insn.addr !5658
  %38 = load i64, i64* %37, align 4, !insn.addr !5658
  %39 = call i64 @__asm_pcmpeqb(i64 %5, i64 %38), !insn.addr !5658
  %40 = inttoptr i32 %33 to i32*, !insn.addr !5659
  store i32 %36, i32* %40, align 4, !insn.addr !5659
  %41 = add i32 %1, 4, !insn.addr !5660
  %42 = inttoptr i32 %41 to i32*, !insn.addr !5660
  %43 = load i32, i32* %42, align 4, !insn.addr !5660
  %44 = inttoptr i32 %43 to i32*, !insn.addr !5661
  store i32 %36, i32* %44, align 4, !insn.addr !5661
  %45 = icmp slt i16* %stack_var_-2, null, !insn.addr !5662
  br i1 %45, label %dec_label_pc_100e380, label %dec_label_pc_100e32b, !insn.addr !5663

dec_label_pc_100e32b:                             ; preds = %dec_label_pc_100e2f5
  %46 = icmp eq i32 %36, 0, !insn.addr !5664
  br i1 %46, label %dec_label_pc_100e400, label %dec_label_pc_100e333, !insn.addr !5665

dec_label_pc_100e333:                             ; preds = %dec_label_pc_100e32b
  ret i32 %36, !insn.addr !5665

dec_label_pc_100e380:                             ; preds = %dec_label_pc_100e2f5
  %sext = mul i32 %36, 65536
  %47 = sdiv i32 %sext, 65536, !insn.addr !5666
  ret i32 %47, !insn.addr !5666

dec_label_pc_100e400:                             ; preds = %dec_label_pc_100e32b
  %48 = load i8, i8* inttoptr (i32 367588355 to i8*), align 1, !insn.addr !5667
  %49 = zext i8 %48 to i32, !insn.addr !5667
  ret i32 %49, !insn.addr !5668
}

define i32 @function_100e447() local_unnamed_addr {
dec_label_pc_100e447:
  %0 = call i32 @function_8ca6d74e(), !insn.addr !5669
  ret i32 %0, !insn.addr !5669
}

define i32 @function_100e461() local_unnamed_addr {
dec_label_pc_100e461:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = add i32 %3, -1946157161, !insn.addr !5670
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5670
  %10 = load i32, i32* %9, align 4, !insn.addr !5670
  %11 = udiv i32 %10, 2, !insn.addr !5670
  %12 = shl i32 %10, 31, !insn.addr !5670
  %13 = or i32 %11, %12, !insn.addr !5670
  store i32 %13, i32* %9, align 4, !insn.addr !5670
  %14 = call i32 @__asm_hlt(), !insn.addr !5671
  %15 = add i32 %4, 4, !insn.addr !5672
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5672
  store i32 %14, i32* %16, align 4, !insn.addr !5672
  %17 = add i32 %0, -1928557308, !insn.addr !5673
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5673
  %19 = load i32, i32* %18, align 4, !insn.addr !5673
  %20 = inttoptr i32 %2 to i8*, !insn.addr !5674
  %21 = load i8, i8* %20, align 1, !insn.addr !5674
  %22 = trunc i32 %2 to i8, !insn.addr !5674
  %23 = add i8 %21, %22, !insn.addr !5674
  store i8 %23, i8* %20, align 1, !insn.addr !5674
  %24 = udiv i32 %2, 512, !insn.addr !5675
  %25 = inttoptr i32 %19 to i32*, !insn.addr !5676
  %26 = load i32, i32* %25, align 4, !insn.addr !5676
  %27 = inttoptr i32 %0 to i32*, !insn.addr !5676
  store i32 %26, i32* %27, align 4, !insn.addr !5676
  %28 = select i1 %7, i32 -4, i32 4, !insn.addr !5676
  %29 = add i32 %28, %0, !insn.addr !5676
  %30 = add i32 %19, %28, !insn.addr !5676
  %31 = and i32 %24, 61, !insn.addr !5677
  %32 = inttoptr i32 %30 to i8*, !insn.addr !5678
  %33 = inttoptr i32 %29 to i8*, !insn.addr !5678
  call void @__asm_rep_movsb_memcpy(i8* %33, i8* %32, i32 %31), !insn.addr !5678
  %34 = select i1 %7, i32 -1, i32 1, !insn.addr !5678
  %35 = mul nsw i32 %34, %31, !insn.addr !5678
  %36 = add i32 %35, %29, !insn.addr !5678
  call void @__asm_into(i32 %6), !insn.addr !5679
  %37 = add i32 %1, -13, !insn.addr !5680
  %38 = call i32 @function_100be29(i32 %37), !insn.addr !5681
  %39 = add i32 %1, -822083673, !insn.addr !5682
  %40 = inttoptr i32 %39 to i32*, !insn.addr !5682
  %41 = load i32, i32* %40, align 4, !insn.addr !5682
  %42 = inttoptr i32 %38 to i8*, !insn.addr !5683
  %43 = load i8, i8* %42, align 1, !insn.addr !5683
  %44 = mul i8 %43, 2, !insn.addr !5683
  %45 = lshr i8 %43, 7, !insn.addr !5683
  %46 = or i8 %45, %44, !insn.addr !5683
  %47 = trunc i32 %38 to i8, !insn.addr !5684
  %48 = add i8 %46, %47, !insn.addr !5684
  store i8 %48, i8* %42, align 1, !insn.addr !5684
  %49 = inttoptr i32 %36 to i8*, !insn.addr !5685
  %50 = load i8, i8* %49, align 1, !insn.addr !5685
  %51 = trunc i32 %36 to i8, !insn.addr !5685
  %52 = add i8 %50, %51, !insn.addr !5685
  store i8 %52, i8* %49, align 1, !insn.addr !5685
  %53 = add i32 %1, -17, !insn.addr !5686
  %54 = inttoptr i32 %53 to i32*, !insn.addr !5686
  %55 = load i32, i32* %54, align 4, !insn.addr !5686
  %56 = icmp eq i32 %55, 1, !insn.addr !5686
  %57 = icmp eq i1 %56, false, !insn.addr !5687
  br i1 %57, label %58, label %dec_label_pc_100e4df, !insn.addr !5687

; <label>:58:                                     ; preds = %dec_label_pc_100e461
  %59 = call i32 @function_18993b3(), !insn.addr !5687
  br label %dec_label_pc_100e4df, !insn.addr !5687

dec_label_pc_100e4df:                             ; preds = %58, %dec_label_pc_100e461
  %60 = add i32 %1, -1, !insn.addr !5688
  %61 = icmp ne i32 %41, 0, !insn.addr !5682
  %62 = zext i1 %61 to i32, !insn.addr !5689
  %63 = udiv i32 %3, 4096
  %64 = and i32 %63, 15, !insn.addr !5689
  %65 = udiv i32 %3, 8
  %66 = and i32 %65, 224, !insn.addr !5689
  %67 = mul i32 %62, 16, !insn.addr !5689
  %68 = or i32 %66, %64, !insn.addr !5689
  %69 = or i32 %68, %67, !insn.addr !5689
  %70 = mul i32 %69, 256, !insn.addr !5689
  %71 = and i32 %3, -65281, !insn.addr !5689
  %72 = or i32 %70, %71, !insn.addr !5689
  %73 = icmp ult i8 %48, %46, !insn.addr !5684
  %.neg = select i1 %73, i32 21969, i32 21970, !insn.addr !5690
  %74 = call i32 @unknown_8c007b86(i32 %2), !insn.addr !5691
  %75 = inttoptr i32 %2 to i32*, !insn.addr !5692
  store i32 %74, i32* %75, align 4, !insn.addr !5692
  %76 = call i32 @unknown_96cae8b7(i16 %5), !insn.addr !5693
  store i32 0, i32* %75, align 4, !insn.addr !5694
  %77 = load i32, i32* inttoptr (i32 255 to i32*), align 4, !insn.addr !5695
  %78 = add i32 %77, 4, !insn.addr !5696
  %79 = inttoptr i32 %78 to i32*, !insn.addr !5696
  %80 = load i32, i32* %79, align 4, !insn.addr !5696
  %sext = mul i32 %80, 65536
  %81 = sdiv i32 %sext, 65536, !insn.addr !5697
  %82 = call i32 @unknown_eca77bfb(i32 %81), !insn.addr !5697
  %83 = trunc i32 %41 to i8
  %84 = sub i8 0, %83, !insn.addr !5698
  %85 = add i32 %38, 1, !insn.addr !5690
  %86 = add i32 %85, %.neg, !insn.addr !5698
  %87 = inttoptr i32 %86 to i8*, !insn.addr !5698
  store i8 %84, i8* %87, align 1, !insn.addr !5698
  %88 = add i32 %2, -414282795, !insn.addr !5699
  %89 = inttoptr i32 %88 to i32*, !insn.addr !5699
  %90 = load i32, i32* %89, align 4, !insn.addr !5699
  %91 = sub i32 %90, %41, !insn.addr !5699
  store i32 %91, i32* %89, align 4, !insn.addr !5699
  %92 = trunc i32 %69 to i8, !insn.addr !5700
  %93 = add i8 %92, %22, !insn.addr !5700
  store i8 %93, i8* %20, align 1, !insn.addr !5700
  %94 = udiv i32 %2, 524288
  %95 = and i32 %94, 4095, !insn.addr !5701
  %96 = and i32 %2, 262144, !insn.addr !5701
  %97 = icmp ne i32 %96, 0, !insn.addr !5701
  call void @__asm_rep_movsd_memcpy(i8* %20, i8* %49, i32 %95), !insn.addr !5702
  %98 = mul nsw i32 %28, %95, !insn.addr !5702
  %99 = add i32 %98, %2, !insn.addr !5702
  store i32 %60, i32* %75, align 4, !insn.addr !5703
  %100 = inttoptr i32 %99 to i8*, !insn.addr !5704
  call void @__asm_rep_movsb_memcpy(i8* %100, i8* %20, i32 0), !insn.addr !5704
  %101 = add i32 %2, 4, !insn.addr !5705
  %102 = inttoptr i32 %101 to i32*, !insn.addr !5705
  %103 = load i32, i32* %102, align 4, !insn.addr !5705
  %104 = add i32 %2, 7801, !insn.addr !5705
  %105 = inttoptr i32 %104 to i32*, !insn.addr !5705
  store i32 %103, i32* %105, align 4, !insn.addr !5705
  %106 = add i32 %2, -1946157162, !insn.addr !5706
  %107 = inttoptr i32 %106 to i8*, !insn.addr !5706
  %108 = load i8, i8* %107, align 1, !insn.addr !5706
  %109 = zext i1 %97 to i8, !insn.addr !5706
  %110 = add i8 %109, %22, !insn.addr !5706
  %111 = add i8 %110, %108, !insn.addr !5706
  store i8 %111, i8* %107, align 1, !insn.addr !5706
  %112 = load i8*, i8** @global_var_1014f88, align 4, !insn.addr !5707
  %113 = ptrtoint i8* %112 to i32, !insn.addr !5707
  %114 = add i32 %113, 4, !insn.addr !5708
  %115 = inttoptr i32 %114 to i32*, !insn.addr !5708
  %116 = load i32, i32* %115, align 4, !insn.addr !5708
  %117 = add i32 %116, 4, !insn.addr !5709
  %118 = inttoptr i32 %117 to i32*, !insn.addr !5709
  %119 = load i32, i32* %118, align 4, !insn.addr !5709
  %120 = add i32 %2, 7797, !insn.addr !5709
  %121 = inttoptr i32 %120 to i32*, !insn.addr !5709
  store i32 %119, i32* %121, align 4, !insn.addr !5709
  %122 = call i32 @unknown_1000242(), !insn.addr !5710
  %123 = call i32 @__readgsdword(i32 -1415510975), !insn.addr !5711
  %124 = inttoptr i32 %72 to i32*, !insn.addr !5712
  %125 = load i32, i32* %124, align 4, !insn.addr !5712
  %126 = add i32 %125, %120, !insn.addr !5712
  store i32 %126, i32* %124, align 4, !insn.addr !5712
  %127 = call i32 @function_4fcfe9d1(), !insn.addr !5713
  ret i32 %127, !insn.addr !5713
}

define i32 @function_100e561() local_unnamed_addr {
dec_label_pc_100e561:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = add i32 %6, 224, !insn.addr !5714
  %8 = and i32 %6, -256, !insn.addr !5714
  %9 = add i32 %3, 2072839288, !insn.addr !5715
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5715
  %11 = load i32, i32* %10, align 4, !insn.addr !5715
  %12 = sub i32 0, %5
  %13 = sub i32 %12, 1
  %14 = icmp ugt i32 %11, %13, !insn.addr !5715
  %.neg = select i1 %14, i32 -13, i32 -12, !insn.addr !5716
  %15 = add i32 %7, %.neg, !insn.addr !5716
  %16 = and i32 %15, 255, !insn.addr !5716
  %17 = or i32 %16, %8, !insn.addr !5716
  %18 = inttoptr i32 %17 to i8*, !insn.addr !5717
  %19 = load i8, i8* %18, align 1, !insn.addr !5717
  %20 = trunc i32 %15 to i8, !insn.addr !5717
  %21 = add i8 %19, %20, !insn.addr !5717
  store i8 %21, i8* %18, align 1, !insn.addr !5717
  %22 = bitcast i32* %ebx to i8*
  %23 = load i8, i8* %22, align 4, !insn.addr !5718
  %24 = trunc i32 %4 to i8, !insn.addr !5718
  %25 = add i8 %23, %24, !insn.addr !5718
  %26 = load i32, i32* %ebx, align 4, !insn.addr !5718
  %27 = inttoptr i32 %26 to i8*, !insn.addr !5718
  store i8 %25, i8* %27, align 1, !insn.addr !5718
  %28 = and i32 %15, 3, !insn.addr !5719
  %29 = inttoptr i32 %1 to i8*, !insn.addr !5720
  %30 = inttoptr i32 %0 to i8*, !insn.addr !5720
  call void @__asm_rep_movsb_memcpy(i8* %30, i8* %29, i32 %28), !insn.addr !5720
  %31 = add i32 %2, -16, !insn.addr !5721
  %32 = inttoptr i32 %31 to i32*, !insn.addr !5721
  store i32 1275068417, i32* %32, align 4, !insn.addr !5721
  %33 = call i32 @function_100e9b0(), !insn.addr !5722
  ret i32 %33, !insn.addr !5722
}

define i32 @function_100e588() local_unnamed_addr {
dec_label_pc_100e588:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -4, !insn.addr !5723
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5723
  %4 = load i32, i32* %3, align 4, !insn.addr !5723
  %5 = call i32 @unknown_a7967bd1(i32 %4), !insn.addr !5724
  %6 = load i32, i32* %3, align 4, !insn.addr !5725
  %7 = and i32 %6, 1, !insn.addr !5725
  store i32 %7, i32* %3, align 4, !insn.addr !5725
  %8 = call i32 @unknown_3200e1e3(), !insn.addr !5726
  %9 = call i32 @unknown_b47bc1(), !insn.addr !5727
  %10 = load i32, i32* %3, align 4, !insn.addr !5728
  %11 = inttoptr i32 %10 to i32*, !insn.addr !5729
  store i32 0, i32* %11, align 4, !insn.addr !5729
  %12 = add i32 %0, 12, !insn.addr !5730
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5730
  %14 = load i32, i32* %13, align 4, !insn.addr !5730
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5731
  %16 = load i32, i32* %15, align 4, !insn.addr !5731
  %17 = add i32 %16, 4, !insn.addr !5732
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5732
  %19 = load i32, i32* %18, align 4, !insn.addr !5732
  %20 = call i32 @unknown_8f00fb(i32 %19), !insn.addr !5733
  %21 = inttoptr i32 %1 to i32*, !insn.addr !5734
  store i32 %20, i32* %21, align 4, !insn.addr !5734
  %22 = load i32, i32* %15, align 4, !insn.addr !5735
  %23 = load i32, i32* %3, align 4, !insn.addr !5736
  %24 = inttoptr i32 %23 to i32*, !insn.addr !5737
  %25 = load i32, i32* %24, align 4
  %26 = inttoptr i32 %22 to i32*, !insn.addr !5738
  %27 = load i32, i32* %26, align 4, !insn.addr !5738
  %28 = inttoptr i32 %25 to i32*, !insn.addr !5738
  store i32 %27, i32* %28, align 4, !insn.addr !5738
  ret i32 %23, !insn.addr !5739
}

define i32 @function_100e616() local_unnamed_addr {
dec_label_pc_100e616:
  %0 = call i32 @function_8ca6d91d(), !insn.addr !5740
  ret i32 %0, !insn.addr !5740
}

define i32 @function_100e64a() local_unnamed_addr {
dec_label_pc_100e64a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -772796480, !insn.addr !5741
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5741
  %4 = load i32, i32* %3, align 4, !insn.addr !5741
  %5 = add i32 %4, 1, !insn.addr !5741
  store i32 %5, i32* %3, align 4, !insn.addr !5741
  %6 = mul i32 %1, 2, !insn.addr !5742
  %7 = inttoptr i32 %1 to i32*, !insn.addr !5742
  store i32 %6, i32* %7, align 4, !insn.addr !5742
  ret i32 %1, !insn.addr !5743
}

define i32 @function_100e69e() local_unnamed_addr {
dec_label_pc_100e69e:
  %0 = call i32 @function_8ca6d9a5(), !insn.addr !5744
  ret i32 %0, !insn.addr !5744
}

define i32 @function_100e6ba() local_unnamed_addr {
dec_label_pc_100e6ba:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 1183517813, !insn.addr !5745
  %4 = inttoptr i32 %3 to i8*, !insn.addr !5745
  %5 = load i8, i8* %4, align 1, !insn.addr !5745
  %6 = trunc i32 %1 to i8, !insn.addr !5745
  %7 = add i8 %5, %6, !insn.addr !5745
  store i8 %7, i8* %4, align 1, !insn.addr !5745
  %8 = add i32 %2, 255, !insn.addr !5746
  %9 = and i32 %8, 255, !insn.addr !5746
  %10 = and i32 %2, -256, !insn.addr !5746
  %11 = or i32 %9, %10, !insn.addr !5746
  ret i32 %11, !insn.addr !5747
}

define i32 @function_100e6c6() local_unnamed_addr {
dec_label_pc_100e6c6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5748
}

define i32 @function_100e6df() local_unnamed_addr {
dec_label_pc_100e6df:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -1044280379, !insn.addr !5749
  %3 = inttoptr i32 %2 to i8*, !insn.addr !5749
  %4 = load i8, i8* %3, align 1, !insn.addr !5749
  %5 = udiv i32 %0, 256, !insn.addr !5749
  %6 = trunc i32 %5 to i8, !insn.addr !5749
  %7 = add i8 %4, %6, !insn.addr !5749
  store i8 %7, i8* %3, align 1, !insn.addr !5749
  %8 = call i32 @function_8cacd9ec(), !insn.addr !5750
  ret i32 %8, !insn.addr !5750
}

define i32 @function_100e6f4() local_unnamed_addr {
dec_label_pc_100e6f4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -24, !insn.addr !5751
  %3 = inttoptr i32 %2 to i8*, !insn.addr !5751
  %4 = load i8, i8* %3, align 1, !insn.addr !5751
  %5 = trunc i32 %0 to i8, !insn.addr !5751
  %6 = or i8 %4, %5, !insn.addr !5751
  store i8 %6, i8* %3, align 1, !insn.addr !5751
  %7 = call i32 @function_fff1ffd7(), !insn.addr !5752
  ret i32 %7, !insn.addr !5752
}

define i32 @function_100e700() local_unnamed_addr {
dec_label_pc_100e700:
  %0 = call i16 @__decompiler_undefined_function_1()
  %1 = call i32 @__asm_hlt(), !insn.addr !5753
  %2 = call i32 @unknown_ecff8aff(i16 %0), !insn.addr !5754
  ret i32 %2, !insn.addr !5755
}

define i32 @function_100e70e() local_unnamed_addr {
dec_label_pc_100e70e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5756
}

define i32 @function_100e729() local_unnamed_addr {
dec_label_pc_100e729:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 110, !insn.addr !5757
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5757
  %5 = load i32, i32* %4, align 4, !insn.addr !5757
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5758
  %7 = add i32 %0, -8, !insn.addr !5759
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5759
  %9 = load i32, i32* %8, align 4, !insn.addr !5759
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5760
  %11 = load i32, i32* %10, align 4, !insn.addr !5760
  %12 = add i32 %1, -1952058598, !insn.addr !5761
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5761
  %14 = load i32, i32* %13, align 4, !insn.addr !5761
  %15 = sdiv i32 %14, 4, !insn.addr !5761
  store i32 %15, i32* %13, align 4, !insn.addr !5761
  %16 = inttoptr i32 %1 to i8*, !insn.addr !5762
  %17 = inttoptr i32 %11 to i8*, !insn.addr !5762
  call void @__asm_rep_movsb_memcpy(i8* %17, i8* %16, i32 0), !insn.addr !5762
  %18 = add i32 %0, 2, !insn.addr !5763
  %19 = inttoptr i32 %18 to i32*, !insn.addr !5763
  %20 = load i32, i32* %19, align 4, !insn.addr !5763
  %21 = add i32 %20, -4, !insn.addr !5764
  %22 = inttoptr i32 %21 to i32*, !insn.addr !5764
  %23 = load i32, i32* %22, align 4, !insn.addr !5764
  %24 = call i32 @unknown_e1007bc1(i32 %23), !insn.addr !5765
  %25 = add i32 %11, -8, !insn.addr !5766
  %26 = inttoptr i32 %25 to i32*, !insn.addr !5766
  %27 = load i32, i32* %26, align 4, !insn.addr !5766
  %28 = add i32 %24, 4, !insn.addr !5767
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5767
  %30 = load i32, i32* %29, align 4, !insn.addr !5767
  %31 = and i32 %30, 56, !insn.addr !5767
  store i32 %31, i32* %29, align 4, !insn.addr !5767
  %32 = add i32 %1, 4, !insn.addr !5768
  %33 = inttoptr i32 %32 to i32*, !insn.addr !5768
  %34 = load i32, i32* %33, align 4, !insn.addr !5768
  %35 = trunc i32 %2 to i16, !insn.addr !5769
  %36 = call i8 @__asm_in.3(i16 %35), !insn.addr !5769
  %37 = sext i8 %36 to i32, !insn.addr !5769
  %38 = and i32 %34, -256, !insn.addr !5769
  %39 = or i32 %38, %37, !insn.addr !5769
  %40 = add i32 %27, 4, !insn.addr !5770
  %41 = inttoptr i32 %40 to i32*, !insn.addr !5770
  store i32 %39, i32* %41, align 4, !insn.addr !5770
  %42 = trunc i32 %1 to i8
  %43 = mul i8 %42, 2, !insn.addr !5771
  store i8 %43, i8* %16, align 1, !insn.addr !5771
  %44 = call i32 @function_8ca6da9e(), !insn.addr !5772
  ret i32 %44, !insn.addr !5772
}

define i32 @function_100e7af() local_unnamed_addr {
dec_label_pc_100e7af:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100e7ea() local_unnamed_addr {
dec_label_pc_100e7ea:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_6686c8(i32 %1), !insn.addr !5773
  %3 = add i32 %0, -50, !insn.addr !5774
  %4 = inttoptr i32 %3 to i8*, !insn.addr !5774
  %5 = load i8, i8* %4, align 1, !insn.addr !5774
  %6 = icmp ult i8 %5, 64, !insn.addr !5774
  %7 = icmp eq i1 %6, false, !insn.addr !5775
  br i1 %7, label %dec_label_pc_100e7fd, label %dec_label_pc_100e7f6, !insn.addr !5775

dec_label_pc_100e7f6:                             ; preds = %dec_label_pc_100e7ea
  %8 = add i32 %1, 16646640, !insn.addr !5776
  %9 = inttoptr i32 %8 to i8*, !insn.addr !5776
  %10 = load i8, i8* %9, align 1, !insn.addr !5776
  %11 = trunc i32 %1 to i8, !insn.addr !5776
  %12 = add i8 %10, %11, !insn.addr !5776
  store i8 %12, i8* %9, align 1, !insn.addr !5776
  ret i32 %2, !insn.addr !5776

dec_label_pc_100e7fd:                             ; preds = %dec_label_pc_100e7ea
  %13 = add i32 %0, 8, !insn.addr !5777
  %14 = inttoptr i32 %13 to i32*, !insn.addr !5777
  %15 = load i32, i32* %14, align 4, !insn.addr !5777
  %16 = call i32 @unknown_f5007bd1(i32 %15), !insn.addr !5778
  %17 = call i32 @function_bd402da4(), !insn.addr !5779
  ret i32 %17, !insn.addr !5779
}

define i32 @function_100e80a() local_unnamed_addr {
dec_label_pc_100e80a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_37bd1(), !insn.addr !5780
  %3 = trunc i32 %2 to i8, !insn.addr !5781
  %4 = udiv i32 %1, 256, !insn.addr !5781
  %5 = trunc i32 %4 to i8, !insn.addr !5781
  %6 = sub i8 0, %5, !insn.addr !5781
  %7 = icmp eq i8 %3, %6, !insn.addr !5781
  br i1 %7, label %8, label %dec_label_pc_100e81c, !insn.addr !5782

; <label>:8:                                      ; preds = %dec_label_pc_100e80a
  %9 = call i32 @function_100e7af(), !insn.addr !5782
  br label %dec_label_pc_100e81c, !insn.addr !5782

dec_label_pc_100e81c:                             ; preds = %8, %dec_label_pc_100e80a
  %10 = add i32 %0, 8, !insn.addr !5783
  %11 = inttoptr i32 %10 to i32*, !insn.addr !5783
  store i32 0, i32* %11, align 4, !insn.addr !5783
  %12 = call i32 @function_154c44d(), !insn.addr !5784
  ret i32 %12, !insn.addr !5784
}

define i32 @function_100e828() local_unnamed_addr {
dec_label_pc_100e828:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5785
}

define i32 @function_100e851() local_unnamed_addr {
dec_label_pc_100e851:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5786
}

define i32 @function_100e87f() local_unnamed_addr {
dec_label_pc_100e87f:
  %0 = call i32 @function_8c01e9d3(), !insn.addr !5787
  ret i32 %0, !insn.addr !5787
}

define i32 @function_100e8ab() local_unnamed_addr {
dec_label_pc_100e8ab:
  %0 = call i32 @function_8ca6dbb2(), !insn.addr !5788
  ret i32 %0, !insn.addr !5788
}

define i32 @function_100e8d7(i32 %arg1) local_unnamed_addr {
dec_label_pc_100e8d7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -1987450803, !insn.addr !5789
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5789
  %4 = load i32, i32* %3, align 4, !insn.addr !5789
  %5 = add i32 %4, -1, !insn.addr !5789
  store i32 %5, i32* %3, align 4, !insn.addr !5789
  %6 = add i32 %1, 161, !insn.addr !5790
  %7 = and i32 %6, 255, !insn.addr !5790
  %8 = and i32 %1, -256, !insn.addr !5790
  %9 = or i32 %7, %8, !insn.addr !5790
  ret i32 %9, !insn.addr !5791
}

define i32 @function_100e8fc() local_unnamed_addr {
dec_label_pc_100e8fc:
  %0 = call i32 @function_8ca6dc03(), !insn.addr !5792
  ret i32 %0, !insn.addr !5792
}

define i32 @function_100e97f() local_unnamed_addr {
dec_label_pc_100e97f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = mul i32 %2, 2, !insn.addr !5793
  %4 = inttoptr i32 %2 to i32*, !insn.addr !5793
  store i32 %3, i32* %4, align 4, !insn.addr !5793
  %5 = call i32 @__asm_wait(), !insn.addr !5794
  %6 = trunc i32 %1 to i16, !insn.addr !5795
  %7 = trunc i32 %5 to i8, !insn.addr !5795
  call void @__asm_out(i16 %6, i8 %7), !insn.addr !5795
  %8 = call i32 @unknown_c2012670(), !insn.addr !5796
  %9 = add i32 %0, -16, !insn.addr !5797
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5797
  store i32 4128871, i32* %10, align 4, !insn.addr !5797
  ret i32 %8, !insn.addr !5798
}

define i32 @function_100e9b0() local_unnamed_addr {
dec_label_pc_100e9b0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -12, !insn.addr !5799
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5799
  %4 = load i32, i32* %3, align 4, !insn.addr !5799
  %5 = call i32 @unknown_c2e8d1(i32 %4), !insn.addr !5800
  call void @__asm_into(i32 %1), !insn.addr !5801
  ret i32 %5, !insn.addr !5802
}

define i32 @function_100e9c2(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100e9c2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  call void @__asm_into(i32 %1), !insn.addr !5803
  %2 = inttoptr i32 %0 to i32*, !insn.addr !5804
  ret i32 %0, !insn.addr !5805
}

define i32 @function_100e9e9() local_unnamed_addr {
dec_label_pc_100e9e9:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 887630709, !insn.addr !5806
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5806
  %5 = load i32, i32* %4, align 4, !insn.addr !5806
  %6 = add i32 %5, -1, !insn.addr !5806
  store i32 %6, i32* %4, align 4, !insn.addr !5806
  %7 = add i32 %0, -119, !insn.addr !5807
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5807
  %9 = load i32, i32* %8, align 4, !insn.addr !5807
  %10 = add i32 %9, -1, !insn.addr !5807
  store i32 %10, i32* %8, align 4, !insn.addr !5807
  %11 = call i32 @__asm_hlt(), !insn.addr !5808
  %12 = call i32 @__asm_hlt(), !insn.addr !5809
  %13 = trunc i32 %2 to i16, !insn.addr !5810
  %14 = call i32 @__asm_in.5(i16 %13), !insn.addr !5810
  %15 = add i32 %0, -1962702031, !insn.addr !5811
  %16 = inttoptr i32 %15 to i8*, !insn.addr !5811
  %17 = load i8, i8* %16, align 1, !insn.addr !5811
  %18 = trunc i32 %0 to i8
  %19 = add i8 %18, 1, !insn.addr !5811
  %20 = or i8 %17, %19, !insn.addr !5811
  store i8 %20, i8* %16, align 1, !insn.addr !5811
  %21 = call i32 @function_389bf445(), !insn.addr !5812
  ret i32 %21, !insn.addr !5812
}

define i32 @function_100ea2b() local_unnamed_addr {
dec_label_pc_100ea2b:
  %0 = call i32 @function_8ca6dd32(), !insn.addr !5813
  ret i32 %0, !insn.addr !5813
}

define i32 @function_100ea3a() local_unnamed_addr {
dec_label_pc_100ea3a:
  %0 = call i32 @function_91ece804(), !insn.addr !5814
  ret i32 %0, !insn.addr !5814
}

define i32 @function_100ea41() local_unnamed_addr {
dec_label_pc_100ea41:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call x86_fp80 @__decompiler_undefined_function_6()
  %4 = add i32 %0, -12, !insn.addr !5815
  %5 = inttoptr i32 %4 to i32*, !insn.addr !5815
  %6 = load i32, i32* %5, align 4, !insn.addr !5815
  %7 = add i32 %6, 4, !insn.addr !5816
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5816
  store i32 0, i32* %8, align 4, !insn.addr !5816
  %9 = load i32, i32* %5, align 4, !insn.addr !5817
  %10 = add i32 %9, 1, !insn.addr !5818
  %11 = load i8, i8* inttoptr (i32 -1950855541 to i8*), align 1, !insn.addr !5819
  %12 = zext i8 %11 to i32, !insn.addr !5819
  %13 = or i32 %12, 1888158464, !insn.addr !5819
  %14 = add i32 %1, 210568312, !insn.addr !5820
  %15 = inttoptr i32 %14 to i8*, !insn.addr !5820
  %16 = load i8, i8* %15, align 1, !insn.addr !5820
  %17 = trunc i32 %10 to i8, !insn.addr !5820
  %18 = add i8 %16, %17, !insn.addr !5820
  store i8 %18, i8* %15, align 1, !insn.addr !5820
  %19 = fptosi x86_fp80 %3 to i32, !insn.addr !5821
  %20 = mul i32 %10, 4, !insn.addr !5821
  %21 = add i32 %20, %2, !insn.addr !5821
  %22 = inttoptr i32 %21 to i32*, !insn.addr !5821
  store i32 %19, i32* %22, align 4, !insn.addr !5821
  %23 = inttoptr i32 %13 to i8*, !insn.addr !5822
  %24 = load i8, i8* %23, align 1, !insn.addr !5822
  %25 = add i8 %24, %11, !insn.addr !5822
  store i8 %25, i8* %23, align 1, !insn.addr !5822
  %26 = call i32 @function_8ca6117a(), !insn.addr !5823
  ret i32 %26, !insn.addr !5823
}

define i32 @function_100ea78() local_unnamed_addr {
dec_label_pc_100ea78:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = inttoptr i32 %1 to i8*, !insn.addr !5824
  %5 = inttoptr i32 %0 to i8*, !insn.addr !5824
  call void @__asm_rep_movsb_memcpy(i8* %5, i8* %4, i32 %2), !insn.addr !5824
  ret i32 %3, !insn.addr !5825
}

define i32 @function_100ea81(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_100ea81:
  %ecx.0.reg2mem = alloca i32, !insn.addr !5826
  %eax.0.reg2mem = alloca i32, !insn.addr !5826
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i32 @__asm_hlt(), !insn.addr !5827
  %5 = call i32 @function_100bbd4(), !insn.addr !5828
  %6 = inttoptr i32 %5 to i8*, !insn.addr !5829
  %7 = load i8, i8* %6, align 1, !insn.addr !5829
  %8 = trunc i32 %5 to i8, !insn.addr !5829
  %9 = add i8 %7, %8, !insn.addr !5829
  store i8 %9, i8* %6, align 1, !insn.addr !5829
  %10 = add i32 %5, -1100532906, !insn.addr !5830
  %11 = inttoptr i32 %10 to i8*, !insn.addr !5830
  %12 = load i8, i8* %11, align 1, !insn.addr !5830
  %13 = add i8 %12, %8, !insn.addr !5830
  store i8 %13, i8* %11, align 1, !insn.addr !5830
  %14 = add i32 %1, -3, !insn.addr !5831
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5831
  store i32 %5, i32* %15, align 4, !insn.addr !5831
  %16 = call i32 @unknown_d4007c4c(), !insn.addr !5832
  %17 = add i32 %1, 8, !insn.addr !5833
  %18 = inttoptr i32 %17 to i8*, !insn.addr !5833
  %19 = load i8, i8* %18, align 1, !insn.addr !5833
  %20 = trunc i32 %2 to i8, !insn.addr !5833
  %21 = sub i8 %19, %20, !insn.addr !5833
  store i8 %21, i8* %18, align 1, !insn.addr !5833
  %22 = inttoptr i32 %2 to i32*, !insn.addr !5834
  store i32 %16, i32* %22, align 4, !insn.addr !5834
  store i32 %16, i32* %ecx.0.reg2mem, !insn.addr !5835
  br label %dec_label_pc_100eab0, !insn.addr !5835

dec_label_pc_100eab0:                             ; preds = %dec_label_pc_100eab0, %dec_label_pc_100ea81
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %23 = trunc i32 %eax.0.reload to i8, !insn.addr !5836
  %24 = add i8 %23, -1, !insn.addr !5836
  %25 = icmp eq i8 %24, 0, !insn.addr !5836
  %26 = zext i8 %24 to i32, !insn.addr !5836
  %27 = add i32 %ecx.0.reload, -1, !insn.addr !5837
  %28 = icmp ne i32 %27, 0, !insn.addr !5837
  %29 = icmp eq i1 %28, %25, !insn.addr !5837
  store i32 %26, i32* %eax.0.reg2mem, !insn.addr !5837
  store i32 %27, i32* %ecx.0.reg2mem, !insn.addr !5837
  br i1 %29, label %dec_label_pc_100eab0, label %dec_label_pc_100eab4, !insn.addr !5837

dec_label_pc_100eab4:                             ; preds = %dec_label_pc_100eab0
  %30 = select i1 %3, i32 -1, i32 1, !insn.addr !5838
  %31 = add i32 %1, 1, !insn.addr !5826
  %32 = add i32 %30, %0, !insn.addr !5838
  store i32 %32, i32* %15, align 4, !insn.addr !5839
  %33 = call i32 @unknown_5300ac26(), !insn.addr !5840
  %34 = inttoptr i32 %33 to i32*, !insn.addr !5841
  store i32 %31, i32* %34, align 4, !insn.addr !5841
  %35 = udiv i32 %arg3, 256, !insn.addr !5842
  %36 = and i32 %35, 255
  %37 = xor i32 %36, %arg4, !insn.addr !5842
  %38 = add i32 %37, 1166765567, !insn.addr !5843
  %39 = inttoptr i32 %38 to i8*, !insn.addr !5843
  %40 = load i8, i8* %39, align 1, !insn.addr !5843
  %41 = sub i8 0, %40
  %42 = sub i8 %41, 1
  store i8 %42, i8* %39, align 1, !insn.addr !5843
  %43 = inttoptr i32 %37 to i32*, !insn.addr !5844
  %44 = inttoptr i32 %arg1 to i32*, !insn.addr !5845
  %45 = load i32, i32* %44, align 4, !insn.addr !5845
  %46 = inttoptr i32 %45 to i32*, !insn.addr !5846
  %47 = load i32, i32* %46, align 4, !insn.addr !5846
  ret i32 %47, !insn.addr !5847
}

define i32 @function_100eadb() local_unnamed_addr {
dec_label_pc_100eadb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = add i32 %1, 33160269, !insn.addr !5848
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5848
  %7 = load i32, i32* %6, align 4, !insn.addr !5848
  %8 = add i32 %7, -1, !insn.addr !5848
  store i32 %8, i32* %6, align 4, !insn.addr !5848
  %9 = add i32 %3, -1, !insn.addr !5849
  %10 = add i32 %3, 139, !insn.addr !5850
  %11 = and i32 %10, 255, !insn.addr !5850
  %12 = and i32 %3, -256, !insn.addr !5850
  %13 = or i32 %11, %12, !insn.addr !5850
  %14 = add i32 %0, 1, !insn.addr !5851
  %15 = inttoptr i32 %13 to i32*, !insn.addr !5852
  %16 = load i32, i32* %15, align 4, !insn.addr !5852
  %17 = trunc i32 %2 to i16, !insn.addr !5853
  %18 = call i32 @__asm_insd(i16 %17), !insn.addr !5853
  %19 = inttoptr i32 %16 to i32*, !insn.addr !5853
  store i32 %18, i32* %19, align 4, !insn.addr !5853
  %20 = add i32 %1, -1799281269, !insn.addr !5854
  %21 = inttoptr i32 %20 to i8*, !insn.addr !5854
  %22 = load i8, i8* %21, align 1, !insn.addr !5854
  %23 = udiv i32 %1, 256, !insn.addr !5854
  %24 = trunc i32 %23 to i8, !insn.addr !5854
  %25 = add i8 %22, %24, !insn.addr !5854
  store i8 %25, i8* %21, align 1, !insn.addr !5854
  %26 = inttoptr i32 %9 to i32*, !insn.addr !5855
  %27 = load i32, i32* %26, align 4, !insn.addr !5855
  store i32 %27, i32* %19, align 4, !insn.addr !5855
  %28 = mul i32 %10, 4, !insn.addr !5856
  %29 = and i32 %28, 8, !insn.addr !5857
  %30 = or i32 %29, 4, !insn.addr !5858
  %31 = add i32 %30, %1
  %32 = add i32 %31, 1883203653, !insn.addr !5858
  %33 = inttoptr i32 %32 to i32*, !insn.addr !5858
  %34 = load i32, i32* %33, align 4, !insn.addr !5858
  %35 = and i32 %34, 4, !insn.addr !5858
  store i32 %35, i32* %33, align 4, !insn.addr !5858
  %36 = call i32 @unknown_aa007bc1(), !insn.addr !5859
  %37 = add i32 %0, -3, !insn.addr !5860
  %38 = inttoptr i32 %37 to i32*, !insn.addr !5860
  %39 = load i32, i32* %38, align 4, !insn.addr !5860
  %40 = add i32 %39, -14, !insn.addr !5861
  %41 = inttoptr i32 %40 to i32*, !insn.addr !5861
  store i32 0, i32* %41, align 4, !insn.addr !5861
  %42 = inttoptr i32 %31 to i32*, !insn.addr !5862
  store i32 %14, i32* %42, align 4, !insn.addr !5862
  %43 = add i32 %39, 1, !insn.addr !5863
  %44 = trunc i32 %43 to i8, !insn.addr !5864
  %45 = add i8 %44, -1, !insn.addr !5864
  %46 = xor i8 %45, %44, !insn.addr !5864
  %47 = sub i8 0, %44, !insn.addr !5864
  %48 = and i8 %46, %47, !insn.addr !5864
  %49 = icmp slt i8 %48, 0, !insn.addr !5864
  %50 = zext i8 %45 to i32, !insn.addr !5864
  %51 = and i32 %43, -256, !insn.addr !5864
  %52 = or i32 %51, %50, !insn.addr !5864
  br i1 %49, label %dec_label_pc_100eb20, label %dec_label_pc_100eb1c, !insn.addr !5865

dec_label_pc_100eb1c:                             ; preds = %dec_label_pc_100eadb
  ret i32 %52, !insn.addr !5865

dec_label_pc_100eb20:                             ; preds = %dec_label_pc_100eadb
  %53 = add i32 %3, 3, !insn.addr !5855
  %54 = add i32 %52, -4, !insn.addr !5866
  %55 = inttoptr i32 %54 to i32*, !insn.addr !5866
  %56 = load i32, i32* %55, align 4, !insn.addr !5866
  %57 = inttoptr i32 %53 to i32*, !insn.addr !5867
  %58 = load i32, i32* %57, align 4, !insn.addr !5867
  %59 = add i32 %3, 7, !insn.addr !5867
  %60 = add i32 %56, 1, !insn.addr !5868
  %61 = and i32 %58, -256, !insn.addr !5869
  %62 = inttoptr i32 %60 to i32*, !insn.addr !5870
  %63 = load i32, i32* %62, align 4, !insn.addr !5870
  %64 = sub i32 %63, %59, !insn.addr !5870
  %65 = xor i32 %63, %59, !insn.addr !5870
  %66 = xor i32 %64, %63, !insn.addr !5870
  %67 = and i32 %66, %65, !insn.addr !5870
  %68 = icmp slt i32 %67, 0, !insn.addr !5870
  %spec.select.v = select i1 %68, i32 139, i32 233
  %spec.select = add i32 %spec.select.v, %58
  %spec.select1 = select i1 %68, i32 %59, i32 %63
  %.pn = and i32 %spec.select, 255
  %eax.0 = or i32 %.pn, %61
  %69 = add i32 %1, -1912828668, !insn.addr !5871
  %70 = inttoptr i32 %69 to i32*, !insn.addr !5871
  %71 = load i32, i32* %70, align 4, !insn.addr !5871
  %72 = inttoptr i32 %eax.0 to i8*, !insn.addr !5872
  %73 = load i8, i8* %72, align 1, !insn.addr !5872
  %74 = trunc i32 %spec.select to i8, !insn.addr !5872
  %75 = add i8 %73, %74, !insn.addr !5872
  %76 = icmp ult i8 %75, %73, !insn.addr !5872
  store i8 %75, i8* %72, align 1, !insn.addr !5872
  %77 = sext i16 %4 to i32, !insn.addr !5873
  %78 = zext i1 %76 to i32, !insn.addr !5874
  %79 = add i32 %56, -1952058621, !insn.addr !5874
  %80 = add i32 %79, %78, !insn.addr !5874
  %81 = inttoptr i32 %spec.select1 to i8*, !insn.addr !5875
  %82 = inttoptr i32 %71 to i8*, !insn.addr !5875
  call void @__asm_rep_movsb_memcpy(i8* %82, i8* %81, i32 %77), !insn.addr !5875
  ret i32 %80, !insn.addr !5876
}

define i32 @function_100eb4e(i32 %arg1) local_unnamed_addr {
dec_label_pc_100eb4e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = udiv i32 %0, 256, !insn.addr !5877
  %3 = add i32 %1, %2, !insn.addr !5877
  %4 = and i32 %3, 255, !insn.addr !5877
  %5 = and i32 %1, -256, !insn.addr !5877
  %6 = or i32 %4, %5, !insn.addr !5877
  ret i32 %6, !insn.addr !5878
}

define i32 @function_100eb5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_100eb5c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5879
}

define i32 @function_100eb92(i32 %arg1) local_unnamed_addr {
dec_label_pc_100eb92:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5880
}

define i32 @function_100ebf0() local_unnamed_addr {
dec_label_pc_100ebf0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5881
}

define i32 @function_100ec01() local_unnamed_addr {
dec_label_pc_100ec01:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %2, 22016565, !insn.addr !5882
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5882
  %8 = load i32, i32* %7, align 4, !insn.addr !5882
  %9 = add i32 %8, -1, !insn.addr !5882
  store i32 %9, i32* %7, align 4, !insn.addr !5882
  %10 = add i32 %0, 1317793861, !insn.addr !5883
  %11 = inttoptr i32 %10 to i32*, !insn.addr !5883
  %12 = load i32, i32* %11, align 4, !insn.addr !5883
  %13 = add i32 %12, %1, !insn.addr !5883
  store i32 %13, i32* %11, align 4, !insn.addr !5883
  %14 = trunc i32 %3 to i16, !insn.addr !5884
  %15 = trunc i32 %5 to i8
  %16 = add i8 %15, 13
  %17 = or i8 %16, -51, !insn.addr !5884
  call void @__asm_out(i16 %14, i8 %17), !insn.addr !5884
  %18 = add i32 %2, -1044280549, !insn.addr !5885
  %19 = inttoptr i32 %18 to i8*, !insn.addr !5885
  %20 = load i8, i8* %19, align 1, !insn.addr !5885
  %21 = trunc i32 %4 to i8, !insn.addr !5885
  %22 = add i8 %20, %21, !insn.addr !5885
  store i8 %22, i8* %19, align 1, !insn.addr !5885
  %23 = call i32 @function_e9a6df21(), !insn.addr !5886
  ret i32 %23, !insn.addr !5886
}

define i32 @function_100ec2a() local_unnamed_addr {
dec_label_pc_100ec2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100ec36() local_unnamed_addr {
dec_label_pc_100ec36:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 109, !insn.addr !5887
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5887
  %5 = load i32, i32* %4, align 4, !insn.addr !5887
  %6 = add i32 %5, 12, !insn.addr !5888
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5888
  %8 = load i32, i32* %7, align 4, !insn.addr !5888
  %9 = icmp ult i32 %8, %0, !insn.addr !5889
  %10 = icmp eq i1 %9, false, !insn.addr !5890
  br i1 %10, label %dec_label_pc_100ec46, label %dec_label_pc_100ec40, !insn.addr !5890

dec_label_pc_100ec40:                             ; preds = %dec_label_pc_100ec36
  %11 = inttoptr i32 %2 to i32*, !insn.addr !5891
  store i32 %5, i32* %11, align 4, !insn.addr !5891
  %12 = or i32 %8, 235, !insn.addr !5892
  ret i32 %12, !insn.addr !5892

dec_label_pc_100ec46:                             ; preds = %dec_label_pc_100ec36
  %13 = call i32 @__asm_int1(), !insn.addr !5893
  %14 = add i32 %2, 905936896, !insn.addr !5894
  %15 = inttoptr i32 %14 to i8*, !insn.addr !5894
  %16 = load i8, i8* %15, align 1, !insn.addr !5894
  %17 = trunc i32 %2 to i8, !insn.addr !5894
  %18 = add i8 %16, %17, !insn.addr !5894
  store i8 %18, i8* %15, align 1, !insn.addr !5894
  call void @__asm_out.4(i32 116, i32 %13), !insn.addr !5895
  %19 = add i32 %1, -399314875, !insn.addr !5896
  %20 = inttoptr i32 %19 to i32*, !insn.addr !5896
  %21 = load i32, i32* %20, align 4, !insn.addr !5896
  %22 = add i32 %21, %5, !insn.addr !5896
  store i32 %22, i32* %20, align 4, !insn.addr !5896
  %23 = icmp eq i32 %5, 1, !insn.addr !5897
  br i1 %23, label %dec_label_pc_100ec58, label %dec_label_pc_100ec85, !insn.addr !5897

dec_label_pc_100ec58:                             ; preds = %dec_label_pc_100ec46
  %24 = inttoptr i32 %13 to i8*, !insn.addr !5898
  %25 = load i8, i8* %24, align 1, !insn.addr !5898
  %26 = trunc i32 %13 to i8, !insn.addr !5898
  %27 = add i8 %25, %26, !insn.addr !5898
  store i8 %27, i8* %24, align 1, !insn.addr !5898
  %28 = add i32 %1, -16, !insn.addr !5899
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5899
  %30 = load i32, i32* %29, align 4, !insn.addr !5899
  %31 = call i32 @function_e950f125(i32 %30), !insn.addr !5900
  ret i32 %31, !insn.addr !5900

dec_label_pc_100ec85:                             ; preds = %dec_label_pc_100ec46, %dec_label_pc_100ec85
  br label %dec_label_pc_100ec85, !insn.addr !5901
}

define i32 @function_100eced() local_unnamed_addr {
dec_label_pc_100eced:
  %0 = call i32 @unknown_287bb1(), !insn.addr !5902
  ret i32 %0, !insn.addr !5903
}

define i32 @function_100ecf8(i32 %arg1) local_unnamed_addr {
dec_label_pc_100ecf8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @unknown_d57b9b(), !insn.addr !5904
  %3 = add i32 %0, -8, !insn.addr !5905
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5905
  %5 = load i32, i32* %4, align 4, !insn.addr !5905
  %6 = add i32 %0, -12, !insn.addr !5906
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5906
  %8 = inttoptr i32 %1 to i32*, !insn.addr !5907
  %9 = call i32 @unknown_97c309(i32 %2, i32 %5), !insn.addr !5908
  %10 = load i32, i32* inttoptr (i32 -1912602612 to i32*), align 4, !insn.addr !5909
  ret i32 %10, !insn.addr !5910
}

define i32 @function_100ed2b() local_unnamed_addr {
dec_label_pc_100ed2b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %3 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5911
  %4 = add i32 %0, -53, !insn.addr !5912
  %5 = inttoptr i32 %4 to i8*, !insn.addr !5912
  %6 = load i8, i8* %5, align 1, !insn.addr !5912
  %7 = trunc i32 %1 to i8, !insn.addr !5912
  %8 = or i8 %6, %7, !insn.addr !5912
  store i8 %8, i8* %5, align 1, !insn.addr !5912
  %9 = xor i32 %2, ptrtoint (i8** @global_var_1014f88 to i32), !insn.addr !5913
  %10 = and i32 %9, %3, !insn.addr !5914
  %11 = and i32 %9, 14
  %12 = icmp ugt i32 %11, 9, !insn.addr !5915
  %13 = add i32 %9, 10, !insn.addr !5915
  %14 = select i1 %12, i32 %13, i32 %9, !insn.addr !5915
  %15 = and i32 %14, 15, !insn.addr !5915
  %16 = and i32 %9, -65536, !insn.addr !5915
  %17 = add i32 %1, 384367733, !insn.addr !5916
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5916
  %19 = load i32, i32* %18, align 4, !insn.addr !5916
  %20 = xor i32 %19, %10, !insn.addr !5916
  %21 = icmp eq i32 %20, 0, !insn.addr !5916
  %22 = icmp slt i32 %20, 0, !insn.addr !5916
  %23 = trunc i32 %20 to i8, !insn.addr !5916
  %24 = call i8 @llvm.ctpop.i8(i8 %23), !range !258, !insn.addr !5916
  %25 = and i8 %24, 1, !insn.addr !5916
  %26 = icmp eq i8 %25, 0, !insn.addr !5916
  %27 = zext i1 %26 to i32, !insn.addr !5917
  %28 = zext i1 %21 to i32, !insn.addr !5917
  %29 = zext i1 %22 to i32, !insn.addr !5917
  %30 = mul i32 %27, 1024, !insn.addr !5917
  %31 = mul i32 %28, 16384, !insn.addr !5917
  %32 = mul i32 %29, 32768, !insn.addr !5917
  %33 = or i32 %16, %15, !insn.addr !5917
  %34 = or i32 %33, %31, !insn.addr !5917
  %35 = or i32 %34, %32, !insn.addr !5917
  %36 = or i32 %35, %30, !insn.addr !5915
  %37 = or i32 %36, 512, !insn.addr !5917
  ret i32 %37, !insn.addr !5917
}

define i32 @function_100ed74() local_unnamed_addr {
dec_label_pc_100ed74:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %4, 85, !insn.addr !5918
  %6 = and i32 %4, -256, !insn.addr !5918
  %7 = add i32 %0, 1294729215, !insn.addr !5919
  %8 = inttoptr i32 %7 to i32*, !insn.addr !5919
  %9 = load i32, i32* %8, align 4, !insn.addr !5919
  %10 = or i32 %9, 28871164, !insn.addr !5919
  store i32 %10, i32* %8, align 4, !insn.addr !5919
  %11 = add i32 %3, %1, !insn.addr !5920
  %12 = add i32 %2, 1166738443, !insn.addr !5921
  %13 = inttoptr i32 %12 to i8*, !insn.addr !5921
  %14 = load i8, i8* %13, align 1, !insn.addr !5921
  %15 = trunc i32 %11 to i8, !insn.addr !5921
  %16 = xor i8 %14, %15, !insn.addr !5921
  store i8 %16, i8* %13, align 1, !insn.addr !5921
  %17 = and i32 %5, 101, !insn.addr !5922
  %18 = or i32 %17, 154, !insn.addr !5922
  %19 = or i32 %18, %6, !insn.addr !5922
  %20 = inttoptr i32 %19 to i8*, !insn.addr !5923
  %21 = load i8, i8* %20, align 1, !insn.addr !5923
  %22 = trunc i32 %18 to i8, !insn.addr !5923
  %23 = add i8 %21, %22, !insn.addr !5923
  store i8 %23, i8* %20, align 1, !insn.addr !5923
  %24 = call i32 @function_8ca68f9c(), !insn.addr !5924
  ret i32 %24, !insn.addr !5924
}

define i32 @function_100eddd() local_unnamed_addr {
dec_label_pc_100eddd:
  %0 = call i32 @function_8ca6e0e4(), !insn.addr !5925
  ret i32 %0, !insn.addr !5925
}

define i32 @function_100edeb() local_unnamed_addr {
dec_label_pc_100edeb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 9174085, !insn.addr !5926
  %4 = inttoptr i32 %3 to i32*, !insn.addr !5926
  %5 = load i32, i32* %4, align 4, !insn.addr !5926
  %6 = add i32 %5, -1, !insn.addr !5926
  store i32 %6, i32* %4, align 4, !insn.addr !5926
  %7 = sub i32 0, %2, !insn.addr !5927
  %8 = inttoptr i32 %2 to i32*, !insn.addr !5927
  store i32 %7, i32* %8, align 4, !insn.addr !5927
  %9 = add i32 %0, -4, !insn.addr !5928
  ret i32 %9, !insn.addr !5929
}

define i32 @function_100ee02() local_unnamed_addr {
dec_label_pc_100ee02:
  %0 = call i32 @function_100be29(i32 ptrtoint (i32* @0 to i32)), !insn.addr !5930
  call void @__asm_out.4(i32 232, i32 %0), !insn.addr !5931
  ret i32 %0, !insn.addr !5932
}

define i32 @function_100ee14(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100ee14:
  %0 = call i32 @unknown_ab007bd1(), !insn.addr !5933
  ret i32 %0, !insn.addr !5934
}

define i32 @function_100ee2c() local_unnamed_addr {
dec_label_pc_100ee2c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100ee38(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100ee38:
  %eax.0.reg2mem = alloca i32, !insn.addr !5935
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  %5 = icmp eq i1 %4, false, !insn.addr !5936
  br i1 %5, label %6, label %dec_label_pc_100ee3c, !insn.addr !5936

; <label>:6:                                      ; preds = %dec_label_pc_100ee38
  %7 = call i32 @function_100ee2c(), !insn.addr !5936
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !5936
  br label %dec_label_pc_100ee3c, !insn.addr !5936

dec_label_pc_100ee3c:                             ; preds = %6, %dec_label_pc_100ee38
  %8 = and i32 %3, -256, !insn.addr !5935
  %9 = or i32 %8, 115, !insn.addr !5935
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %10 = add i32 %1, -123, !insn.addr !5937
  %11 = inttoptr i32 %10 to i32*, !insn.addr !5937
  %12 = or i32 %eax.0.reload, 117, !insn.addr !5938
  %13 = add i32 %1, -8, !insn.addr !5939
  %14 = inttoptr i32 %13 to i32*, !insn.addr !5939
  %15 = inttoptr i32 %12 to i32*, !insn.addr !5940
  %16 = add i32 %2, -1, !insn.addr !5941
  %17 = add i32 %9, -9073304, !insn.addr !5942
  %18 = inttoptr i32 %17 to i8*, !insn.addr !5942
  %19 = load i8, i8* %18, align 1, !insn.addr !5942
  %20 = udiv i32 %16, 256, !insn.addr !5942
  %21 = trunc i32 %20 to i8, !insn.addr !5942
  %22 = xor i8 %19, %21, !insn.addr !5942
  store i8 %22, i8* %18, align 1, !insn.addr !5942
  %23 = load i32, i32* %14, align 4, !insn.addr !5943
  %24 = and i32 %23, -256, !insn.addr !5944
  %25 = add i32 %0, -2, !insn.addr !5945
  %26 = add i32 %23, 22, !insn.addr !5946
  %27 = and i32 %26, 255, !insn.addr !5946
  %28 = or i32 %27, %24, !insn.addr !5946
  %29 = add i32 %28, 4, !insn.addr !5947
  %30 = inttoptr i32 %29 to i32*, !insn.addr !5947
  %31 = load i32, i32* %30, align 4, !insn.addr !5947
  %32 = mul i32 %9, 4, !insn.addr !5948
  %33 = add i32 %32, -838860792, !insn.addr !5949
  %34 = inttoptr i32 %25 to i32*, !insn.addr !5950
  %35 = load i32, i32* %34, align 4, !insn.addr !5950
  %36 = inttoptr i32 %31 to i32*, !insn.addr !5950
  store i32 %35, i32* %36, align 4, !insn.addr !5950
  %37 = add i32 %0, 2, !insn.addr !5950
  %38 = add i32 %31, 5, !insn.addr !5951
  %39 = inttoptr i32 %37 to i8*, !insn.addr !5952
  %40 = inttoptr i32 %38 to i8*, !insn.addr !5952
  call void @__asm_rep_movsb_memcpy(i8* %40, i8* %39, i32 %33), !insn.addr !5952
  %41 = add i32 %38, %33, !insn.addr !5952
  %42 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !5953
  %43 = inttoptr i32 %41 to i32*, !insn.addr !5954
  store i32 %42, i32* %43, align 4, !insn.addr !5954
  %44 = trunc i32 %16 to i16, !insn.addr !5955
  %45 = trunc i32 %42 to i8, !insn.addr !5955
  call void @__asm_out(i16 %44, i8 %45), !insn.addr !5955
  %46 = call i32 @__asm_int3(), !insn.addr !5956
  ret i32 %46, !insn.addr !5956
}

define i32 @function_100ef03() local_unnamed_addr {
dec_label_pc_100ef03:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-10 = alloca i32, align 4
  %7 = call i32 @unknown_ff007c4c(), !insn.addr !5957
  %8 = add i32 %7, 255, !insn.addr !5958
  %9 = and i32 %8, 255, !insn.addr !5958
  %10 = and i32 %7, -256, !insn.addr !5958
  %11 = or i32 %9, %10, !insn.addr !5958
  %12 = xor i32 %11, ptrtoint (i8** @global_var_1014010 to i32), !insn.addr !5959
  %13 = add i32 %1, -12, !insn.addr !5960
  %14 = inttoptr i32 %13 to i32*, !insn.addr !5960
  %15 = load i32, i32* %14, align 4, !insn.addr !5960
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5961
  store i32 %12, i32* %16, align 4, !insn.addr !5961
  %17 = xor i32 %11, xor (i32 ptrtoint (i8** @global_var_1014010 to i32), i32 19480848), !insn.addr !5962
  store i32 1, i32* %stack_var_-10, align 4, !insn.addr !5963
  %18 = load i32, i32* %14, align 4, !insn.addr !5964
  %19 = sub i32 %18, %15, !insn.addr !5964
  store i32 %19, i32* %14, align 4, !insn.addr !5964
  %20 = add i32 %15, 1, !insn.addr !5965
  %21 = trunc i32 %17 to i8, !insn.addr !5966
  %22 = add i8 %21, -111, !insn.addr !5966
  %23 = icmp eq i8 %22, 0, !insn.addr !5966
  %24 = icmp eq i1 %23, false, !insn.addr !5967
  br i1 %24, label %dec_label_pc_100ef76, label %dec_label_pc_100ef36, !insn.addr !5967

dec_label_pc_100ef36:                             ; preds = %dec_label_pc_100ef03
  %25 = load i32, i32* %stack_var_-10, align 4, !insn.addr !5968
  %26 = call i32 @unknown_3d007c09(i32 %0, i32 %7, i32 %1, i32* nonnull %stack_var_-10, i32 %2, i32 %3, i32 %15, i32 %17, i32 %25, i16 %4, i32 1), !insn.addr !5968
  %27 = call i32 @unknown_a3004b26(), !insn.addr !5969
  %28 = inttoptr i32 %1 to i32*, !insn.addr !5970
  store i32 %27, i32* %28, align 4, !insn.addr !5970
  %29 = trunc i32 %3 to i16, !insn.addr !5971
  %30 = call i32 @__asm_insd(i16 %29), !insn.addr !5971
  %31 = inttoptr i32 %0 to i32*, !insn.addr !5971
  store i32 %30, i32* %31, align 4, !insn.addr !5971
  %32 = add i32 %2, 378270789, !insn.addr !5972
  %33 = inttoptr i32 %32 to i8*, !insn.addr !5972
  %34 = load i8, i8* %33, align 1, !insn.addr !5972
  %35 = trunc i32 %20 to i8, !insn.addr !5972
  %36 = sub i8 %34, %35, !insn.addr !5972
  %37 = and i8 %34, 15, !insn.addr !5972
  %38 = and i8 %35, 15, !insn.addr !5972
  %39 = sub nsw i8 %37, %38, !insn.addr !5972
  %40 = icmp ugt i8 %39, 15, !insn.addr !5972
  %41 = xor i8 %34, %35, !insn.addr !5972
  %42 = xor i8 %36, %34, !insn.addr !5972
  %43 = and i8 %42, %41, !insn.addr !5972
  %44 = icmp slt i8 %43, 0, !insn.addr !5972
  %45 = and i32 %27, 14
  %46 = icmp ugt i32 %45, 9, !insn.addr !5973
  %47 = or i1 %46, %40, !insn.addr !5973
  %48 = add i32 %27, 10, !insn.addr !5973
  %49 = select i1 %47, i32 %48, i32 %27, !insn.addr !5973
  %50 = sext i1 %47 to i32, !insn.addr !5973
  %51 = and i32 %49, 15, !insn.addr !5973
  %52 = and i32 %27, -65536, !insn.addr !5973
  %53 = or i32 %51, %52, !insn.addr !5973
  %54 = mul i32 %50, 256
  %55 = add i32 %54, %27
  %56 = and i32 %55, 65280, !insn.addr !5973
  %57 = or i32 %53, %56, !insn.addr !5973
  br i1 %44, label %dec_label_pc_100ef5e, label %dec_label_pc_100ef5a, !insn.addr !5974

dec_label_pc_100ef5a:                             ; preds = %dec_label_pc_100ef36
  ret i32 %57, !insn.addr !5974

dec_label_pc_100ef5e:                             ; preds = %dec_label_pc_100ef36
  %58 = add i32 %1, -4, !insn.addr !5975
  %59 = inttoptr i32 %58 to i32*, !insn.addr !5975
  %60 = add i32 %0, 77, !insn.addr !5976
  %61 = inttoptr i32 %60 to i8*, !insn.addr !5976
  %62 = load i8, i8* %61, align 1, !insn.addr !5976
  %63 = udiv i32 %3, 256, !insn.addr !5976
  %64 = trunc i32 %63 to i8, !insn.addr !5976
  %65 = or i8 %62, %64, !insn.addr !5976
  store i8 %65, i8* %61, align 1, !insn.addr !5976
  %66 = inttoptr i32 %20 to i32*, !insn.addr !5977
  store i32 %57, i32* %66, align 4, !insn.addr !5977
  %67 = trunc i32 %51 to i8, !insn.addr !5978
  %68 = inttoptr i32 %13 to i8*, !insn.addr !5978
  store i8 %67, i8* %68, align 1, !insn.addr !5978
  %69 = load i32, i32* %59, align 4, !insn.addr !5979
  ret i32 %69, !insn.addr !5980

dec_label_pc_100ef76:                             ; preds = %dec_label_pc_100ef03
  %70 = xor i32 %10, and (i32 xor (i32 ptrtoint (i8** @global_var_1014010 to i32), i32 19480848), i32 -256), !insn.addr !5966
  %71 = zext i8 %22 to i32, !insn.addr !5966
  %72 = or i32 %70, %71, !insn.addr !5966
  %73 = inttoptr i32 %72 to i8*, !insn.addr !5981
  %74 = load i8, i8* %73, align 1, !insn.addr !5981
  %75 = add i8 %74, %22, !insn.addr !5981
  store i8 %75, i8* %73, align 1, !insn.addr !5981
  %76 = udiv i32 %20, 4, !insn.addr !5982
  %77 = inttoptr i32 %7 to i8*, !insn.addr !5983
  %78 = inttoptr i32 %0 to i8*, !insn.addr !5983
  call void @__asm_rep_movsd_memcpy(i8* %78, i8* %77, i32 %76), !insn.addr !5983
  %79 = select i1 %5, i32 -4, i32 4, !insn.addr !5983
  %80 = mul i32 %76, %79, !insn.addr !5983
  %81 = add i32 %80, %0, !insn.addr !5983
  %82 = add i32 %15, 233, !insn.addr !5984
  %83 = and i32 %82, 255, !insn.addr !5984
  %84 = and i32 %20, -256, !insn.addr !5984
  %85 = or i32 %84, %83, !insn.addr !5984
  %86 = add i32 %85, 4, !insn.addr !5985
  %87 = inttoptr i32 %86 to i32*, !insn.addr !5985
  %88 = load i32, i32* %87, align 4, !insn.addr !5985
  %89 = and i32 %88, -44, !insn.addr !5985
  store i32 %89, i32* %87, align 4, !insn.addr !5985
  %90 = add i32 %2, 4, !insn.addr !5986
  %91 = inttoptr i32 %90 to i32*, !insn.addr !5986
  %92 = load i32, i32* %91, align 4, !insn.addr !5986
  %93 = add i32 %6, 4, !insn.addr !5987
  %94 = inttoptr i32 %93 to i32*, !insn.addr !5987
  %95 = load i32, i32* %94, align 4, !insn.addr !5987
  %96 = add i32 %92, -4, !insn.addr !5987
  %97 = inttoptr i32 %96 to i32*, !insn.addr !5987
  store i32 %95, i32* %97, align 4, !insn.addr !5987
  %98 = trunc i32 %3 to i16, !insn.addr !5988
  %99 = inttoptr i32 %81 to i32*, !insn.addr !5988
  %100 = load i32, i32* %99, align 4, !insn.addr !5988
  call void @__asm_outsd(i16 %98, i32 %100), !insn.addr !5988
  %101 = call i32 @__asm_int1(), !insn.addr !5989
  %102 = call i32 @__asm_hlt(), !insn.addr !5990
  %103 = call i32 @function_558cebcc(), !insn.addr !5991
  ret i32 %103, !insn.addr !5991
}

define i32 @function_100efc5() local_unnamed_addr {
dec_label_pc_100efc5:
  %0 = call i32 @function_8ca6e30a(), !insn.addr !5992
  ret i32 %0, !insn.addr !5992
}

define i32 @function_100efdd() local_unnamed_addr {
dec_label_pc_100efdd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5993
}

define i32 @function_100efef(i32 %arg1) local_unnamed_addr {
dec_label_pc_100efef:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !5994
}

define i32 @function_100f033() local_unnamed_addr {
dec_label_pc_100f033:
  %0 = call i32 @function_100f049(), !insn.addr !5995
  ret i32 %0, !insn.addr !5995
}

define i32 @function_100f035() local_unnamed_addr {
dec_label_pc_100f035:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i8, !insn.addr !5996
  store i8 %2, i8* @global_var_1014f64, align 1, !insn.addr !5996
  %3 = add i32 %1, -16, !insn.addr !5997
  %4 = call i32 @function_1011961(i32 %3, i32 1006681942), !insn.addr !5998
  ret i32 %4, !insn.addr !5998
}

define i32 @function_100f049() local_unnamed_addr {
dec_label_pc_100f049:
  %edi.0.reg2mem = alloca i32, !insn.addr !5999
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !5999
  %ebx.0.reg2mem = alloca i32, !insn.addr !5999
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !5999
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-23 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %4 = add i32 %1, -4, !insn.addr !5999
  %5 = inttoptr i32 %4 to i32*, !insn.addr !5999
  %6 = load i32, i32* %5, align 4, !insn.addr !5999
  %7 = add i32 %1, -16, !insn.addr !6000
  %8 = inttoptr i32 %7 to i32*, !insn.addr !6000
  %9 = load i32, i32* %8, align 4, !insn.addr !6000
  %10 = add i32 %6, 4, !insn.addr !6001
  %11 = icmp slt i32 %10, 0, !insn.addr !6001
  %12 = call i32 @unknown_6a012314(i32 %10, i32 %9), !insn.addr !6002
  %13 = load i32, i32* %5, align 4, !insn.addr !6003
  %14 = call i32 @unknown_71bc54(i32 %12, i32 %13), !insn.addr !6004
  %15 = add i32 %1, -117, !insn.addr !6005
  %16 = inttoptr i32 %15 to i32*, !insn.addr !6005
  %17 = load i32, i32* %16, align 4, !insn.addr !6005
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6006
  %19 = load i32, i32* %18, align 4, !insn.addr !6006
  store i32 %19, i32* %stack_var_-20, align 4, !insn.addr !6006
  %20 = call i32 @function_1017418(i32 %19), !insn.addr !6007
  %21 = trunc i32 %20 to i8, !insn.addr !6008
  call void @__asm_out.6(i32 192, i8 %21), !insn.addr !6008
  %22 = icmp eq i1 %11, false, !insn.addr !6009
  br i1 %22, label %dec_label_pc_100f049.dec_label_pc_100f0a5_crit_edge, label %dec_label_pc_100f072, !insn.addr !6009

dec_label_pc_100f049.dec_label_pc_100f0a5_crit_edge: ; preds = %dec_label_pc_100f049
  %.pre = inttoptr i32 %2 to i32*, !insn.addr !6010
  store i32* %.pre, i32** %.pre-phi.reg2mem
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem
  br label %dec_label_pc_100f0a5

dec_label_pc_100f072:                             ; preds = %dec_label_pc_100f049
  %23 = load i32, i32* %5, align 4, !insn.addr !6011
  %24 = inttoptr i32 %23 to i32*, !insn.addr !6012
  %25 = load i32, i32* %24, align 4, !insn.addr !6012
  %26 = add i32 %20, 4, !insn.addr !6013
  %27 = inttoptr i32 %26 to i32*, !insn.addr !6013
  %28 = load i32, i32* %27, align 4, !insn.addr !6013
  %29 = select i1 %3, i32 -1, i32 1, !insn.addr !6014
  %30 = add i32 %29, %0, !insn.addr !6014
  %31 = and i32 %25, 31, !insn.addr !6015
  %32 = icmp eq i32 %31, 0, !insn.addr !6015
  br i1 %32, label %38, label %33, !insn.addr !6015

; <label>:33:                                     ; preds = %dec_label_pc_100f072
  %34 = add i32 %30, -452771835, !insn.addr !6015
  %35 = inttoptr i32 %34 to i32*, !insn.addr !6015
  %36 = load i32, i32* %35, align 4, !insn.addr !6015
  %37 = lshr i32 %36, %31, !insn.addr !6015
  store i32 %37, i32* %35, align 4, !insn.addr !6015
  br label %38, !insn.addr !6015

; <label>:38:                                     ; preds = %dec_label_pc_100f072, %33
  %39 = add i32 %28, 141, !insn.addr !6016
  %40 = and i32 %39, 255, !insn.addr !6016
  %41 = and i32 %28, -256, !insn.addr !6016
  %42 = or i32 %40, %41, !insn.addr !6016
  %43 = and i32 %2, 65280, !insn.addr !6017
  %44 = add i32 %43, %2
  %45 = and i32 %44, 65280, !insn.addr !6017
  %46 = and i32 %2, -65281, !insn.addr !6017
  %47 = or i32 %45, %46, !insn.addr !6017
  %48 = inttoptr i32 %47 to i32*
  %49 = load i32, i32* %48, align 4, !insn.addr !6018
  %50 = add i32 %49, %30, !insn.addr !6018
  store i32 %50, i32* %48, align 4, !insn.addr !6018
  %51 = add i32 %42, -234787748, !insn.addr !6019
  %52 = xor i32 %51, %28, !insn.addr !6019
  %53 = add i32 %42, 1912695900, !insn.addr !6019
  %54 = and i32 %52, %53, !insn.addr !6019
  %55 = icmp slt i32 %54, 0, !insn.addr !6019
  %56 = icmp eq i32 %51, 0, !insn.addr !6019
  %57 = icmp slt i32 %51, 0, !insn.addr !6019
  %58 = icmp eq i1 %57, %55, !insn.addr !6020
  %59 = icmp eq i1 %56, false, !insn.addr !6020
  %60 = icmp eq i1 %58, %59, !insn.addr !6020
  store i32* %48, i32** %.pre-phi.reg2mem, !insn.addr !6020
  store i32 %47, i32* %ebx.0.reg2mem, !insn.addr !6020
  store i32* %stack_var_-23, i32** %esp.0.in.reg2mem, !insn.addr !6020
  store i32 %30, i32* %edi.0.reg2mem, !insn.addr !6020
  br i1 %60, label %dec_label_pc_100f0a5, label %dec_label_pc_100f099, !insn.addr !6020

dec_label_pc_100f099:                             ; preds = %38
  ret i32 %51, !insn.addr !6021

dec_label_pc_100f0a5:                             ; preds = %dec_label_pc_100f049.dec_label_pc_100f0a5_crit_edge, %38
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %61 = add i32 %1, 8, !insn.addr !6022
  %62 = inttoptr i32 %61 to i32*, !insn.addr !6022
  %63 = load i32, i32* %62, align 4, !insn.addr !6022
  %64 = add i32 %esp.0, -4, !insn.addr !6022
  %65 = inttoptr i32 %64 to i32*, !insn.addr !6022
  store i32 %63, i32* %65, align 4, !insn.addr !6022
  %66 = add i32 %1, -8, !insn.addr !6023
  %67 = inttoptr i32 %66 to i32*, !insn.addr !6023
  %68 = load i32, i32* %67, align 4, !insn.addr !6023
  %69 = add i32 %esp.0, -8, !insn.addr !6023
  %70 = inttoptr i32 %69 to i32*, !insn.addr !6023
  store i32 %68, i32* %70, align 4, !insn.addr !6023
  %71 = add i32 %1, -120, !insn.addr !6024
  %72 = inttoptr i32 %71 to i32*, !insn.addr !6024
  store i32 %edi.0.reload, i32* %72, align 4, !insn.addr !6024
  %73 = call i32 @function_1007bd1(), !insn.addr !6025
  store i32 %edi.0.reload, i32* %67, align 4, !insn.addr !6026
  %74 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !6010
  %75 = add i32 %esp.0, -12, !insn.addr !6010
  %76 = inttoptr i32 %75 to i32*, !insn.addr !6010
  store i32 %74, i32* %76, align 4, !insn.addr !6010
  store i32 %edi.0.reload, i32* %5, align 4, !insn.addr !6027
  %77 = call i32 @unknown_73007bd1(), !insn.addr !6028
  %78 = add i32 %esp.0, -16, !insn.addr !6029
  %79 = inttoptr i32 %78 to i32*, !insn.addr !6029
  store i32 %77, i32* %79, align 4, !insn.addr !6029
  %80 = inttoptr i32 %ebx.0.reload to i8*, !insn.addr !6030
  %81 = load i8, i8* %80, align 1, !insn.addr !6030
  %82 = trunc i32 %77 to i16, !insn.addr !6030
  %83 = zext i8 %81 to i16, !insn.addr !6030
  %84 = sdiv i16 %82, %83, !insn.addr !6030
  %85 = and i32 %77, -65536, !insn.addr !6030
  %86 = srem i16 %82, %83, !insn.addr !6030
  %87 = mul i16 %86, 256
  %88 = zext i16 %87 to i32, !insn.addr !6030
  %89 = and i16 %84, 255
  %.masked = zext i16 %89 to i32
  %90 = or i32 %85, %.masked, !insn.addr !6030
  %91 = or i32 %90, %88, !insn.addr !6030
  ret i32 %91, !insn.addr !6030
}

define i32 @function_100f0d5(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100f0d5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__asm_hlt(), !insn.addr !6031
  %2 = inttoptr i32 %0 to i32*, !insn.addr !6032
  store i32 %1, i32* %2, align 4, !insn.addr !6032
  ret i32 %1, !insn.addr !6033
}

define i32 @function_100f0e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f0e4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = inttoptr i32 %arg1 to i32*, !insn.addr !6034
  %6 = load i32, i32* %5, align 4, !insn.addr !6034
  %7 = add i32 %3, -86, !insn.addr !6035
  %8 = inttoptr i32 %7 to i32*, !insn.addr !6035
  store i32 %6, i32* %8, align 4, !insn.addr !6035
  %9 = add i32 %3, -1990785975, !insn.addr !6036
  %10 = inttoptr i32 %9 to i32*, !insn.addr !6036
  %11 = load i32, i32* %10, align 4, !insn.addr !6036
  %12 = or i32 %11, %3, !insn.addr !6036
  %13 = inttoptr i32 %12 to i32*, !insn.addr !6037
  %14 = load i32, i32* %13, align 4, !insn.addr !6037
  %15 = add i32 %14, %arg1, !insn.addr !6037
  store i32 %15, i32* %13, align 4, !insn.addr !6037
  %16 = call i32 @function_100865c(i32 %0, i32 %2, i32 %4, i32 %1), !insn.addr !6038
  ret i32 %16, !insn.addr !6039
}

define i32 @function_100f15e() local_unnamed_addr {
dec_label_pc_100f15e:
  %0 = call i32 @function_8ca6e465(), !insn.addr !6040
  ret i32 %0, !insn.addr !6040
}

define i32 @function_100f1a6() local_unnamed_addr {
dec_label_pc_100f1a6:
  %0 = call i32 @function_8ca6e52d(), !insn.addr !6041
  ret i32 %0, !insn.addr !6041
}

define i32 @function_100f1b3() local_unnamed_addr {
dec_label_pc_100f1b3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6042
}

define i32 @function_100f1cd(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f1cd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6043
}

define i32 @function_100f1d1(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f1d1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call x86_fp80 @__decompiler_undefined_function_6()
  %2 = fptosi x86_fp80 %1 to i32, !insn.addr !6044
  %3 = add i32 %0, 1392621391, !insn.addr !6044
  %4 = inttoptr i32 %3 to i32*, !insn.addr !6044
  store i32 %2, i32* %4, align 4, !insn.addr !6044
  ret i32 %0, !insn.addr !6045
}

define i32 @function_100f1dc() local_unnamed_addr {
dec_label_pc_100f1dc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, -4, !insn.addr !6046
  %5 = inttoptr i32 %4 to i864*, !insn.addr !6046
  %6 = load i864, i864* %5, align 4, !insn.addr !6046
  call void @__asm_frstor(i864 %6), !insn.addr !6046
  %7 = trunc i32 %1 to i8
  %8 = udiv i32 %2, 256, !insn.addr !6047
  %9 = trunc i32 %8 to i8, !insn.addr !6047
  %10 = add i8 %9, %7, !insn.addr !6047
  %11 = inttoptr i32 %1 to i8*, !insn.addr !6047
  store i8 %10, i8* %11, align 1, !insn.addr !6047
  call void @__asm_into(i32 %3), !insn.addr !6048
  %12 = call i32 @unknown_2500ee2a(), !insn.addr !6049
  %13 = load i32, i32* inttoptr (i32 1510035336 to i32*), align 8, !insn.addr !6050
  %14 = call i32 @function_100f22d(i32 %13, i32 ptrtoint (i32* @0 to i32)), !insn.addr !6051
  ret i32 %14, !insn.addr !6051
}

define i32 @function_100f1fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f1fb:
  %eax.0.reg2mem = alloca i32, !insn.addr !6052
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = add i32 %0, -1061617665, !insn.addr !6052
  %4 = inttoptr i32 %3 to i8*, !insn.addr !6052
  %5 = load i8, i8* %4, align 1, !insn.addr !6052
  %6 = trunc i32 %1 to i8, !insn.addr !6052
  %.neg1 = sext i1 %2 to i8
  %.neg2 = sub i8 %.neg1, %6, !insn.addr !6052
  %7 = add i8 %.neg2, %5, !insn.addr !6052
  %8 = icmp eq i8 %7, 0, !insn.addr !6052
  store i8 %7, i8* %4, align 1, !insn.addr !6052
  br i1 %8, label %9, label %dec_label_pc_100f207, !insn.addr !6053

; <label>:9:                                      ; preds = %dec_label_pc_100f1fb
  %10 = call i32 @function_d0138a2(), !insn.addr !6053
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !6053
  br label %dec_label_pc_100f207, !insn.addr !6053

dec_label_pc_100f207:                             ; preds = %9, %dec_label_pc_100f1fb
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !6054
}

define i32 @function_100f20a() local_unnamed_addr {
dec_label_pc_100f20a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6055
}

define i32 @function_100f22d(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100f22d:
  %edi.0.reg2mem = alloca i32, !insn.addr !6056
  %esi.0.reg2mem = alloca i32, !insn.addr !6056
  %esp.0.reg2mem = alloca i32, !insn.addr !6056
  %ebx.0.reg2mem = alloca i32, !insn.addr !6056
  %edx.0.reg2mem = alloca i32, !insn.addr !6056
  %ecx.0.reg2mem = alloca i32, !insn.addr !6056
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !6056
  %merge.reg2mem = alloca i32, !insn.addr !6056
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i16 @__decompiler_undefined_function_1()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_4, align 4
  %stack_var_-3 = alloca i32, align 4
  %stack_var_-4 = alloca i16, align 2
  %12 = icmp eq i1 %10, %8, !insn.addr !6057
  %13 = icmp eq i1 %11, false, !insn.addr !6057
  %14 = icmp eq i1 %12, %13, !insn.addr !6057
  br i1 %14, label %dec_label_pc_100f298, label %dec_label_pc_100f237, !insn.addr !6057

dec_label_pc_100f237:                             ; preds = %dec_label_pc_100f22d
  %15 = add i32 %6, %5, !insn.addr !6058
  %16 = inttoptr i32 %5 to i32*, !insn.addr !6058
  store i32 %15, i32* %16, align 4, !insn.addr !6058
  %17 = mul i32 %5, 4, !insn.addr !6059
  %18 = add i32 %3, 59442254, !insn.addr !6059
  %19 = add i32 %18, %17, !insn.addr !6059
  %20 = inttoptr i32 %19 to i32*, !insn.addr !6059
  %21 = load i32, i32* %20, align 4, !insn.addr !6059
  %22 = call i32 @unknown_97eab3ba(i16 %7), !insn.addr !6060
  %23 = add i32 %3, 65110984, !insn.addr !6061
  %24 = inttoptr i32 %23 to i32*, !insn.addr !6061
  %25 = load i32, i32* %24, align 4, !insn.addr !6061
  %26 = mul i32 %25, -1660115725, !insn.addr !6061
  %27 = add i32 %22, 4, !insn.addr !6062
  %28 = inttoptr i32 %27 to i32*, !insn.addr !6062
  %29 = load i32, i32* %28, align 4, !insn.addr !6062
  %30 = trunc i32 %29 to i16, !insn.addr !6062
  store i16 %30, i16* %stack_var_-4, align 2, !insn.addr !6062
  %sext = mul i32 %29, 65536
  %31 = sdiv i32 %sext, 65536, !insn.addr !6063
  %32 = call i32 @unknown_f272c1(i32 %31), !insn.addr !6063
  %33 = add i32 %3, 4, !insn.addr !6064
  %34 = inttoptr i32 %33 to i32*, !insn.addr !6064
  %35 = load i32, i32* %34, align 4, !insn.addr !6064
  %36 = and i32 %35, -100, !insn.addr !6064
  store i32 %36, i32* %34, align 4, !insn.addr !6064
  %37 = add i32 %26, 191168511, !insn.addr !6065
  %38 = inttoptr i32 %37 to i32*, !insn.addr !6065
  %39 = load i32, i32* %38, align 4, !insn.addr !6065
  %40 = or i32 %39, -102, !insn.addr !6065
  store i32 %40, i32* %38, align 4, !insn.addr !6065
  %41 = add i32 %26, 1, !insn.addr !6066
  %42 = ptrtoint i32* %stack_var_-3 to i32, !insn.addr !6067
  %43 = inttoptr i32 %41 to i32*, !insn.addr !6068
  %44 = load i32, i32* %43, align 4, !insn.addr !6068
  %45 = add i32 %44, %42, !insn.addr !6068
  %46 = xor i32 %45, %44, !insn.addr !6068
  %47 = xor i32 %45, %42, !insn.addr !6068
  %48 = and i32 %46, %47, !insn.addr !6068
  %49 = icmp slt i32 %48, 0, !insn.addr !6068
  store i32 %45, i32* %43, align 4, !insn.addr !6068
  %50 = trunc i32 %21 to i16, !insn.addr !6069
  %51 = call i8 @__asm_in.3(i16 %50), !insn.addr !6069
  %52 = sext i8 %51 to i32, !insn.addr !6069
  %53 = and i32 %42, -256, !insn.addr !6069
  %54 = or i32 %53, %52, !insn.addr !6069
  store i32 %54, i32* %merge.reg2mem, !insn.addr !6070
  br i1 %49, label %dec_label_pc_100f289, label %dec_label_pc_100f285, !insn.addr !6070

dec_label_pc_100f285:                             ; preds = %dec_label_pc_100f326, %dec_label_pc_100f237
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !6071

dec_label_pc_100f289:                             ; preds = %dec_label_pc_100f237
  %55 = mul i32 %54, 2, !insn.addr !6072
  %56 = inttoptr i32 %54 to i8*, !insn.addr !6073
  %57 = load i8, i8* %56, align 1, !insn.addr !6073
  %58 = add i8 %57, %51, !insn.addr !6073
  store i8 %58, i8* %56, align 1, !insn.addr !6073
  ret i32 %55, !insn.addr !6074

dec_label_pc_100f298:                             ; preds = %dec_label_pc_100f22d
  %59 = udiv i32 %6, 256, !insn.addr !6075
  %60 = add i32 %59, %6, !insn.addr !6075
  %61 = and i32 %60, 255, !insn.addr !6075
  %62 = and i32 %6, -256, !insn.addr !6075
  %63 = or i32 %61, %62, !insn.addr !6075
  %64 = select i1 %9, i32 -4, i32 4, !insn.addr !6076
  %65 = add i32 %64, %0, !insn.addr !6076
  %66 = add i32 %64, %1, !insn.addr !6076
  %67 = and i32 %60, 3, !insn.addr !6077
  %68 = inttoptr i32 %66 to i8*, !insn.addr !6078
  %69 = inttoptr i32 %65 to i8*, !insn.addr !6078
  call void @__asm_rep_movsb_memcpy(i8* %69, i8* %68, i32 %67), !insn.addr !6078
  %70 = select i1 %9, i32 -1, i32 1, !insn.addr !6078
  %71 = mul nsw i32 %70, %67, !insn.addr !6078
  %72 = add i32 %65, %71, !insn.addr !6078
  %73 = icmp eq i32 %63, 82233691, !insn.addr !6079
  %74 = add i32 %2, -117, !insn.addr !6080
  %75 = inttoptr i32 %74 to i8*, !insn.addr !6080
  %76 = load i8, i8* %75, align 1, !insn.addr !6080
  %77 = mul i8 %76, 2, !insn.addr !6080
  store i8 %77, i8* %75, align 1, !insn.addr !6080
  %78 = icmp slt i8 %76, 0, !insn.addr !6080
  %79 = trunc i32 %4 to i16, !insn.addr !6081
  %80 = call i8 @__asm_in.3(i16 %79), !insn.addr !6081
  %81 = or i1 %73, %78, !insn.addr !6082
  br i1 %81, label %dec_label_pc_100f2ae, label %dec_label_pc_100f326, !insn.addr !6082

dec_label_pc_100f2ae:                             ; preds = %dec_label_pc_100f298
  %82 = inttoptr i32 %0 to i32*, !insn.addr !6076
  %83 = add i32 %72, -119, !insn.addr !6083
  %84 = inttoptr i32 %83 to i8*, !insn.addr !6083
  %85 = load i8, i8* %84, align 1, !insn.addr !6083
  %86 = sub i8 0, %85
  %87 = sub i8 %86, 1
  store i8 %87, i8* %84, align 1, !insn.addr !6083
  %88 = call i32 @unknown_e97c27(), !insn.addr !6084
  %89 = and i32 %4, -65281, !insn.addr !6085
  %90 = call i32 @unknown_2cd37c26(), !insn.addr !6086
  %91 = add i32 %2, -4, !insn.addr !6087
  %92 = inttoptr i32 %91 to i32*, !insn.addr !6087
  store i32 %90, i32* %92, align 4, !insn.addr !6087
  %93 = inttoptr i32 %90 to i32*, !insn.addr !6088
  %94 = load i32, i32* %93, align 4, !insn.addr !6088
  %95 = call i32 @function_1007bc1(i32 %94), !insn.addr !6089
  %96 = load i32, i32* %92, align 4, !insn.addr !6090
  %97 = add i32 %2, 8, !insn.addr !6091
  %98 = inttoptr i32 %97 to i32*, !insn.addr !6091
  %99 = load i32, i32* %98, align 4, !insn.addr !6091
  %100 = inttoptr i32 %96 to i32*, !insn.addr !6092
  store i32 %72, i32* %100, align 4, !insn.addr !6092
  %101 = inttoptr i32 %99 to i32*
  %102 = load i32, i32* %101, align 4, !insn.addr !6093
  %103 = inttoptr i32 %102 to i32*, !insn.addr !6094
  %104 = load i32, i32* %103, align 4, !insn.addr !6094
  %105 = add i32 %104, 4, !insn.addr !6095
  %106 = inttoptr i32 %105 to i32*, !insn.addr !6095
  %107 = load i32, i32* %106, align 4, !insn.addr !6095
  %108 = trunc i32 %107 to i16, !insn.addr !6095
  store i16 %108, i16* %stack_var_-4, align 2, !insn.addr !6095
  %109 = load i32, i32* %92, align 4, !insn.addr !6096
  %110 = inttoptr i32 %109 to i32*, !insn.addr !6097
  store i32 %104, i32* %110, align 4, !insn.addr !6097
  %111 = load i32, i32* %101, align 4, !insn.addr !6098
  %112 = inttoptr i32 %111 to i32*, !insn.addr !6099
  %113 = load i32, i32* %112, align 4, !insn.addr !6099
  %114 = add i32 %113, 4, !insn.addr !6100
  %115 = inttoptr i32 %114 to i32*, !insn.addr !6100
  %116 = load i32, i32* %115, align 4, !insn.addr !6100
  %117 = add i32 %116, %109, !insn.addr !6100
  store i32 %117, i32* %115, align 4, !insn.addr !6100
  %118 = ptrtoint i16* %stack_var_-4 to i32, !insn.addr !6101
  store i32 %118, i32* %stack_var_-8, align 4, !insn.addr !6101
  %119 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !6101
  %120 = load i32, i32* %112, align 4, !insn.addr !6102
  %121 = trunc i32 %89 to i16, !insn.addr !6103
  %122 = call i32 @__asm_in.5(i16 %121), !insn.addr !6103
  %123 = mul i32 %99, 256, !insn.addr !6104
  %124 = and i32 %123, 65280, !insn.addr !6104
  %125 = or i32 %124, %89, !insn.addr !6104
  %126 = inttoptr i32 %113 to i32*, !insn.addr !6105
  %127 = load i32, i32* %126, align 4, !insn.addr !6105
  %128 = inttoptr i32 %120 to i32*, !insn.addr !6105
  store i32 %127, i32* %128, align 4, !insn.addr !6105
  %129 = mul i32 %114, 8, !insn.addr !6106
  %130 = add i32 %129, 1881144393, !insn.addr !6106
  %131 = add i32 %130, %120, !insn.addr !6106
  %132 = inttoptr i32 %131 to i32*, !insn.addr !6106
  %133 = load i32, i32* %132, align 4, !insn.addr !6106
  %134 = add i32 %133, %119, !insn.addr !6106
  store i32 %134, i32* %132, align 4, !insn.addr !6106
  %135 = add i32 %120, 8, !insn.addr !6107
  store i32* %101, i32** %.pre-phi.reg2mem, !insn.addr !6107
  store i32 3, i32* %ecx.0.reg2mem, !insn.addr !6107
  store i32 %125, i32* %edx.0.reg2mem, !insn.addr !6107
  store i32 %99, i32* %ebx.0.reg2mem, !insn.addr !6107
  store i32 %119, i32* %esp.0.reg2mem, !insn.addr !6107
  store i32 %114, i32* %esi.0.reg2mem, !insn.addr !6107
  store i32 %135, i32* %edi.0.reg2mem, !insn.addr !6107
  br label %dec_label_pc_100f30f, !insn.addr !6107

dec_label_pc_100f30f:                             ; preds = %dec_label_pc_100f368.dec_label_pc_100f30f_crit_edge, %dec_label_pc_100f2ae
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %ebp.0 = add i32 %2, 1
  %136 = add i32 %esp.0.reload, -4, !insn.addr !6108
  %137 = inttoptr i32 %136 to i16*, !insn.addr !6108
  %138 = call i32 @unknown_458bffff(), !insn.addr !6108
  %139 = add i32 %esp.0.reload, -8, !insn.addr !6109
  %140 = add i32 %esp.0.reload, -12, !insn.addr !6109
  %141 = add i32 %esp.0.reload, -16, !insn.addr !6109
  %142 = add i32 %esp.0.reload, -20, !insn.addr !6109
  %143 = add i32 %esp.0.reload, -24, !insn.addr !6109
  %144 = add i32 %esp.0.reload, -28, !insn.addr !6109
  %145 = add i32 %esp.0.reload, -32, !insn.addr !6109
  %146 = inttoptr i32 %136 to i32*, !insn.addr !6109
  store i32 %138, i32* %146, align 4, !insn.addr !6109
  %147 = inttoptr i32 %139 to i32*, !insn.addr !6109
  store i32 %ecx.0.reload, i32* %147, align 4, !insn.addr !6109
  %148 = inttoptr i32 %140 to i32*, !insn.addr !6109
  store i32 %edx.0.reload, i32* %148, align 4, !insn.addr !6109
  %149 = inttoptr i32 %141 to i32*, !insn.addr !6109
  store i32 %ebx.0.reload, i32* %149, align 4, !insn.addr !6109
  %150 = inttoptr i32 %142 to i32*, !insn.addr !6109
  store i32 %esp.0.reload, i32* %150, align 4, !insn.addr !6109
  %151 = inttoptr i32 %143 to i32*, !insn.addr !6109
  store i32 %ebp.0, i32* %151, align 4, !insn.addr !6109
  %152 = inttoptr i32 %144 to i32*, !insn.addr !6109
  store i32 %esi.0.reload, i32* %152, align 4, !insn.addr !6109
  %153 = inttoptr i32 %145 to i32*, !insn.addr !6109
  store i32 %edi.0.reload, i32* %153, align 4, !insn.addr !6109
  %154 = load i32, i32* %.pre-phi.reload, align 4, !insn.addr !6110
  %155 = add i32 %154, 127, !insn.addr !6111
  %156 = and i32 %155, 255, !insn.addr !6111
  %157 = and i32 %154, -256, !insn.addr !6111
  %158 = or i32 %156, %157, !insn.addr !6111
  ret i32 %158, !insn.addr !6112

dec_label_pc_100f326:                             ; preds = %dec_label_pc_100f298
  %159 = sext i8 %80 to i32, !insn.addr !6081
  %160 = xor i32 %62, 82233600, !insn.addr !6081
  %161 = or i32 %160, %159, !insn.addr !6081
  %162 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !6113
  %163 = mul i32 %arg1, 8, !insn.addr !6114
  %164 = add i32 %163, 973357449, !insn.addr !6114
  %165 = add i32 %164, %162, !insn.addr !6114
  %166 = inttoptr i32 %165 to i32*, !insn.addr !6114
  %167 = load i32, i32* %166, align 4, !insn.addr !6114
  %168 = add i32 %161, 139, !insn.addr !6115
  %169 = and i32 %168, 255, !insn.addr !6115
  %170 = and i32 %161, -256, !insn.addr !6115
  %171 = inttoptr i32 %72 to i32*, !insn.addr !6116
  %172 = load i32, i32* %171, align 4, !insn.addr !6116
  %173 = inttoptr i32 %arg1 to i32*, !insn.addr !6116
  store i32 %172, i32* %173, align 4, !insn.addr !6116
  %174 = add i32 %64, %arg1, !insn.addr !6116
  %175 = add i32 %72, %64, !insn.addr !6116
  %176 = or i32 %169, %170, !insn.addr !6117
  %177 = inttoptr i32 %176 to i8*, !insn.addr !6118
  %178 = load i8, i8* %177, align 1, !insn.addr !6118
  %179 = trunc i32 %168 to i8, !insn.addr !6118
  %180 = add i8 %178, %179, !insn.addr !6118
  store i8 %180, i8* %177, align 1, !insn.addr !6118
  %181 = call i32 @__asm_iretd(), !insn.addr !6119
  %182 = add i32 %3, -13, !insn.addr !6120
  %183 = inttoptr i32 %182 to i32*, !insn.addr !6120
  %184 = load i32, i32* %183, align 4, !insn.addr !6120
  %185 = add i32 %184, %167, !insn.addr !6120
  %186 = xor i32 %185, %167, !insn.addr !6120
  %187 = xor i32 %185, %184, !insn.addr !6120
  %188 = and i32 %186, %187, !insn.addr !6120
  %189 = icmp slt i32 %188, 0, !insn.addr !6120
  %190 = inttoptr i32 %175 to i8*, !insn.addr !6121
  %191 = load i8, i8* %190, align 1, !insn.addr !6121
  %192 = inttoptr i32 %174 to i8*, !insn.addr !6121
  store i8 %191, i8* %192, align 1, !insn.addr !6121
  %193 = call i32 @function_100ed2b(), !insn.addr !6122
  %194 = add i32 %2, -3, !insn.addr !6123
  %195 = call i32 @unknown_11f0e4(i32 %194), !insn.addr !6124
  %196 = inttoptr i32 %194 to i32*
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %merge.reg2mem, !insn.addr !6125
  br i1 %189, label %dec_label_pc_100f368, label %dec_label_pc_100f285, !insn.addr !6125

dec_label_pc_100f368:                             ; preds = %dec_label_pc_100f326
  %198 = inttoptr i32 %197 to i32*, !insn.addr !6126
  %199 = load i32, i32* %198, align 4, !insn.addr !6126
  %200 = trunc i32 %199 to i16, !insn.addr !6126
  store i16 %200, i16* %stack_var_-4, align 2, !insn.addr !6126
  %201 = udiv i32 %3, 128
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, -2, !insn.addr !6127
  %204 = icmp eq i8 %203, 0, !insn.addr !6127
  %205 = icmp eq i1 %204, false, !insn.addr !6128
  br i1 %205, label %dec_label_pc_100f368.dec_label_pc_100f30f_crit_edge, label %dec_label_pc_100f37e, !insn.addr !6128

dec_label_pc_100f368.dec_label_pc_100f30f_crit_edge: ; preds = %dec_label_pc_100f368
  %206 = zext i8 %203 to i32, !insn.addr !6127
  %207 = mul i32 %206, 256, !insn.addr !6127
  %208 = and i32 %3, -65281, !insn.addr !6127
  %209 = or i32 %207, %208, !insn.addr !6127
  %210 = ptrtoint i16* %stack_var_-4 to i32, !insn.addr !6126
  %211 = add i32 %174, %70, !insn.addr !6121
  %212 = add i32 %175, %70, !insn.addr !6121
  %.pre = inttoptr i32 %209 to i32*, !insn.addr !6110
  store i32* %.pre, i32** %.pre-phi.reg2mem
  store i32 %181, i32* %ecx.0.reg2mem
  store i32 %185, i32* %edx.0.reg2mem
  store i32 %209, i32* %ebx.0.reg2mem
  store i32 %210, i32* %esp.0.reg2mem
  store i32 %212, i32* %esi.0.reg2mem
  store i32 %211, i32* %edi.0.reg2mem
  br label %dec_label_pc_100f30f

dec_label_pc_100f37e:                             ; preds = %dec_label_pc_100f368
  %213 = call i32 @function_1007bd1(), !insn.addr !6129
  ret i32 %213, !insn.addr !6130
}

define i32 @function_100f38a(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f38a:
  %ebx = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = and i32 %0, 124, !insn.addr !6131
  %2 = or i32 %1, 131, !insn.addr !6131
  %3 = and i32 %0, -256, !insn.addr !6131
  %4 = or i32 %2, %3, !insn.addr !6131
  %5 = inttoptr i32 %4 to i8*, !insn.addr !6132
  %6 = load i8, i8* %5, align 1, !insn.addr !6132
  %7 = trunc i32 %2 to i8, !insn.addr !6132
  %8 = or i8 %6, %7, !insn.addr !6132
  store i8 %8, i8* %5, align 1, !insn.addr !6132
  %9 = bitcast i32* %ebx to i8*
  %10 = load i8, i8* %9, align 4, !insn.addr !6133
  %11 = zext i8 %10 to i32, !insn.addr !6133
  %12 = or i32 %3, %11, !insn.addr !6133
  %13 = add i32 %12, -1, !insn.addr !6134
  ret i32 %13, !insn.addr !6135
}

define i32 @function_100f3cf() local_unnamed_addr {
dec_label_pc_100f3cf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %4 = add i32 %1, 86, !insn.addr !6136
  %5 = inttoptr i32 %4 to i8*, !insn.addr !6136
  %6 = load i8, i8* %5, align 1, !insn.addr !6136
  %7 = trunc i32 %2 to i8, !insn.addr !6136
  %8 = zext i1 %3 to i8, !insn.addr !6136
  %9 = add i8 %8, %7, !insn.addr !6136
  %10 = add i8 %9, %6, !insn.addr !6136
  store i8 %10, i8* %5, align 1, !insn.addr !6136
  %11 = add i32 %0, -16, !insn.addr !6137
  %12 = inttoptr i32 %11 to i32*, !insn.addr !6137
  %13 = add i32 %0, -104, !insn.addr !6138
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6138
  %15 = add i32 %1, -58394037, !insn.addr !6139
  %16 = inttoptr i32 %15 to i32*, !insn.addr !6139
  %17 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !6139
  store i32 %17, i32* %16, align 4, !insn.addr !6139
  %18 = call i8 @__asm_in.1(i8 -27), !insn.addr !6140
  %19 = call i32 @function_1007cc4(i32 ptrtoint (i32* @0 to i32)), !insn.addr !6141
  ret i32 %19, !insn.addr !6142
}

define i32 @function_100f3fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f3fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, -1450489988, !insn.addr !6143
  %4 = inttoptr i32 %3 to i32*, !insn.addr !6143
  %5 = load i32, i32* %4, align 4, !insn.addr !6143
  %6 = add i32 %5, -1, !insn.addr !6143
  store i32 %6, i32* %4, align 4, !insn.addr !6143
  %7 = add i32 %1, -1962701872, !insn.addr !6144
  %8 = inttoptr i32 %7 to i8*, !insn.addr !6144
  %9 = load i8, i8* %8, align 1, !insn.addr !6144
  %10 = trunc i32 %1 to i8, !insn.addr !6144
  %11 = or i8 %9, %10, !insn.addr !6144
  store i8 %11, i8* %8, align 1, !insn.addr !6144
  ret i32 %2, !insn.addr !6145
}

define i32 @function_100f40a(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f40a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100f40c() local_unnamed_addr {
dec_label_pc_100f40c:
  %0 = call i32 @function_8cf0f39a(), !insn.addr !6146
  ret i32 %0, !insn.addr !6146
}

define i32 @function_100f42d() local_unnamed_addr {
dec_label_pc_100f42d:
  %0 = call i32 @function_8ca6e773(), !insn.addr !6147
  ret i32 %0, !insn.addr !6147
}

define i32 @function_100f468() local_unnamed_addr {
dec_label_pc_100f468:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = inttoptr i32 %0 to i8*, !insn.addr !6148
  %2 = load i8, i8* %1, align 1, !insn.addr !6148
  %3 = trunc i32 %0 to i8, !insn.addr !6148
  %4 = add i8 %2, %3, !insn.addr !6148
  store i8 %4, i8* %1, align 1, !insn.addr !6148
  %5 = call i32 @function_8ca6e77c(), !insn.addr !6149
  ret i32 %5, !insn.addr !6149
}

define i32 @function_100f47a() local_unnamed_addr {
dec_label_pc_100f47a:
  %ecx.0.reg2mem = alloca i32, !insn.addr !6150
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-20 = alloca i32, align 4
  %7 = inttoptr i32 %1 to i8*, !insn.addr !6151
  %8 = inttoptr i32 %0 to i8*, !insn.addr !6151
  call void @__asm_rep_movsb_memcpy(i8* %8, i8* %7, i32 %4), !insn.addr !6151
  %9 = select i1 %6, i32 -1, i32 1, !insn.addr !6151
  %10 = mul i32 %9, %4, !insn.addr !6151
  %11 = add i32 %10, %0, !insn.addr !6151
  %12 = call i32 @unknown_ae7c60(i32* nonnull %stack_var_-20, i32 %2), !insn.addr !6152
  %13 = add i32 %11, -129660585, !insn.addr !6153
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6153
  %15 = load i32, i32* %14, align 4, !insn.addr !6153
  %16 = icmp eq i32 %15, -2147443712, !insn.addr !6153
  store i32 0, i32* %ecx.0.reg2mem, !insn.addr !6153
  br label %dec_label_pc_100f49c, !insn.addr !6153

dec_label_pc_100f49c:                             ; preds = %dec_label_pc_100f49c, %dec_label_pc_100f47a
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %17 = add i32 %ecx.0.reload, -1, !insn.addr !6154
  %18 = icmp eq i32 %17, 0, !insn.addr !6154
  %19 = or i1 %16, %18, !insn.addr !6154
  store i32 %17, i32* %ecx.0.reg2mem, !insn.addr !6154
  br i1 %19, label %dec_label_pc_100f4a4, label %dec_label_pc_100f49c, !insn.addr !6154

dec_label_pc_100f4a4:                             ; preds = %dec_label_pc_100f49c
  %20 = add i32 %2, -1946157213, !insn.addr !6155
  %21 = inttoptr i32 %20 to i32*, !insn.addr !6155
  %22 = load i32, i32* %21, align 4, !insn.addr !6155
  %23 = inttoptr i32 %17 to i32*, !insn.addr !6156
  store i32 %12, i32* %23, align 4, !insn.addr !6156
  %24 = udiv i32 %12, 256, !insn.addr !6157
  %25 = mul nuw i32 %24, 159, !insn.addr !6157
  %26 = add i32 %25, %12, !insn.addr !6157
  %27 = and i32 %26, 255, !insn.addr !6157
  %28 = and i32 %12, -65536, !insn.addr !6157
  %29 = or i32 %27, %28, !insn.addr !6157
  %30 = add i32 %11, 4, !insn.addr !6158
  %31 = inttoptr i32 %30 to i32*, !insn.addr !6158
  store i32 %29, i32* %31, align 4, !insn.addr !6158
  %32 = call i32 @function_1007bd1(), !insn.addr !6159
  %33 = add i32 %22, -8, !insn.addr !6160
  %34 = inttoptr i32 %33 to i32*, !insn.addr !6160
  %35 = call i32 @function_1007c26(), !insn.addr !6161
  store i32 %35, i32* %34, align 4, !insn.addr !6162
  %36 = add i32 %22, 29, !insn.addr !6163
  %37 = inttoptr i32 %36 to i32*, !insn.addr !6163
  %38 = load i32, i32* %37, align 4, !insn.addr !6163
  %39 = inttoptr i32 %38 to i32*, !insn.addr !6164
  store i32 %11, i32* %39, align 4, !insn.addr !6164
  %40 = add i32 %3, -117, !insn.addr !6165
  %41 = inttoptr i32 %40 to i32*, !insn.addr !6165
  %42 = load i32, i32* %41, align 4, !insn.addr !6165
  %43 = add i32 %22, -1, !insn.addr !6166
  %44 = inttoptr i32 %42 to i32*, !insn.addr !6167
  %45 = load i32, i32* %44, align 4, !insn.addr !6167
  %46 = inttoptr i32 %45 to i32*, !insn.addr !6168
  %47 = load i32, i32* %46, align 4, !insn.addr !6168
  %48 = add i32 %47, -1762458922, !insn.addr !6169
  %49 = inttoptr i32 %48 to i32*, !insn.addr !6169
  %50 = load i32, i32* %49, align 4, !insn.addr !6169
  %51 = mul i32 %50, 2048, !insn.addr !6169
  %52 = udiv i32 %50, 2097152, !insn.addr !6169
  %53 = or i32 %52, %51, !insn.addr !6169
  store i32 %53, i32* %49, align 4, !insn.addr !6169
  %54 = add i32 %42, -4, !insn.addr !6170
  %55 = inttoptr i32 %54 to i32*, !insn.addr !6170
  store i32 %43, i32* %55, align 4, !insn.addr !6170
  call void @__asm_into(i32 %5), !insn.addr !6171
  %56 = call i32 @function_b3e99cec(), !insn.addr !6172
  ret i32 %56, !insn.addr !6172
}

define i32 @function_100f50c() local_unnamed_addr {
dec_label_pc_100f50c:
  %storemerge.reg2mem = alloca i32, !insn.addr !6173
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %2, 1615919173, !insn.addr !6174
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6174
  %8 = load i32, i32* %7, align 4, !insn.addr !6174
  %9 = add i32 %8, -1, !insn.addr !6174
  store i32 %9, i32* %7, align 4, !insn.addr !6174
  %10 = add i32 %2, 71338755, !insn.addr !6175
  %11 = inttoptr i32 %10 to i8*, !insn.addr !6175
  %12 = load i8, i8* %11, align 1, !insn.addr !6175
  %13 = trunc i32 %5 to i8, !insn.addr !6175
  %14 = add i8 %12, %13, !insn.addr !6175
  store i8 %14, i8* %11, align 1, !insn.addr !6175
  %15 = and i32 %3, 15, !insn.addr !6176
  %16 = add nsw i32 %15, -1, !insn.addr !6176
  %17 = icmp ugt i32 %16, 15, !insn.addr !6176
  %18 = trunc i32 %4 to i8, !insn.addr !6177
  %19 = and i8 %18, 14, !insn.addr !6177
  %20 = icmp ugt i8 %19, 9, !insn.addr !6177
  %21 = or i1 %17, %20, !insn.addr !6177
  %22 = icmp ugt i8 %18, -103
  br i1 %21, label %23, label %28, !insn.addr !6177

; <label>:23:                                     ; preds = %dec_label_pc_100f50c
  %.v = select i1 %22, i32 154, i32 250
  %24 = add i32 %.v, %4, !insn.addr !6177
  %25 = and i32 %24, 255, !insn.addr !6177
  %26 = and i32 %4, -256, !insn.addr !6177
  %27 = or i32 %25, %26, !insn.addr !6177
  store i32 %27, i32* %storemerge.reg2mem, !insn.addr !6177
  br label %34, !insn.addr !6177

; <label>:28:                                     ; preds = %dec_label_pc_100f50c
  %29 = add i32 %4, 160, !insn.addr !6177
  %30 = select i1 %22, i32 %29, i32 %4, !insn.addr !6177
  %31 = and i32 %30, 255, !insn.addr !6177
  %32 = and i32 %4, -256, !insn.addr !6177
  %33 = or i32 %31, %32, !insn.addr !6177
  store i32 %33, i32* %storemerge.reg2mem, !insn.addr !6177
  br label %34, !insn.addr !6177

; <label>:34:                                     ; preds = %23, %28
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %35 = mul i32 %2, 4, !insn.addr !6178
  %36 = add i32 %35, %1, !insn.addr !6178
  %37 = inttoptr i32 %36 to i8*, !insn.addr !6178
  %38 = load i8, i8* %37, align 1, !insn.addr !6178
  %39 = trunc i32 %storemerge.reload to i8, !insn.addr !6178
  %40 = xor i8 %38, %39, !insn.addr !6178
  store i8 %40, i8* %37, align 1, !insn.addr !6178
  %41 = add i32 %storemerge.reload, 189, !insn.addr !6179
  %42 = icmp ugt i8 %39, 66, !insn.addr !6179
  %43 = and i32 %41, 255, !insn.addr !6179
  %44 = and i32 %storemerge.reload, -256, !insn.addr !6179
  %45 = or i32 %43, %44, !insn.addr !6179
  %46 = zext i1 %42 to i32, !insn.addr !6180
  %47 = add i32 %45, %0, !insn.addr !6180
  %48 = add i32 %47, %46, !insn.addr !6180
  ret i32 %48, !insn.addr !6181
}

define i32 @function_100f538() local_unnamed_addr {
dec_label_pc_100f538:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %stack_var_0 = alloca i32, align 4
  %6 = and i32 %4, 114, !insn.addr !6182
  %7 = or i32 %6, 141, !insn.addr !6182
  %8 = and i32 %4, -256, !insn.addr !6182
  %9 = or i32 %7, %8, !insn.addr !6183
  %10 = inttoptr i32 %9 to i8*, !insn.addr !6184
  %11 = load i8, i8* %10, align 1, !insn.addr !6184
  %12 = trunc i32 %7 to i8, !insn.addr !6184
  %13 = add i8 %11, %12, !insn.addr !6184
  store i8 %13, i8* %10, align 1, !insn.addr !6184
  %14 = call i32 @__asm_wait(), !insn.addr !6185
  %15 = inttoptr i32 %0 to i32*, !insn.addr !6186
  %16 = select i1 %5, i32 -4, i32 4, !insn.addr !6186
  %17 = add i32 %16, %0, !insn.addr !6186
  %18 = add i32 %3, %1, !insn.addr !6186
  %19 = add i32 %18, %16, !insn.addr !6187
  %20 = inttoptr i32 %19 to i8*, !insn.addr !6188
  %21 = load i8, i8* %20, align 1, !insn.addr !6188
  %22 = inttoptr i32 %17 to i8*, !insn.addr !6188
  store i8 %21, i8* %22, align 1, !insn.addr !6188
  %23 = select i1 %5, i32 65535, i32 1, !insn.addr !6188
  %24 = add i32 %19, %23, !insn.addr !6188
  %25 = add i32 %2, -4, !insn.addr !6189
  %26 = inttoptr i32 %25 to i16*, !insn.addr !6189
  %27 = load i16, i16* %26, align 2, !insn.addr !6189
  %28 = trunc i32 %24 to i16, !insn.addr !6189
  call void @__asm_arpl(i16 %27, i16 %28), !insn.addr !6189
  %29 = call i32 @unknown_ac007be3(), !insn.addr !6190
  %30 = ptrtoint i32* %stack_var_0 to i32, !insn.addr !6191
  %31 = add i32 %14, -83887035, !insn.addr !6192
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6192
  %33 = load i32, i32* %32, align 4, !insn.addr !6192
  %34 = add i32 %33, -1, !insn.addr !6192
  store i32 %34, i32* %32, align 4, !insn.addr !6192
  %35 = call i32 @function_1007bc1(i32 %30), !insn.addr !6193
  %36 = inttoptr i32 %25 to i32*, !insn.addr !6194
  %37 = load i32, i32* %36, align 4, !insn.addr !6194
  %38 = inttoptr i32 %37 to i32*, !insn.addr !6195
  %39 = load i32, i32* %38, align 4, !insn.addr !6195
  %40 = and i32 %39, -13, !insn.addr !6195
  store i32 %40, i32* %38, align 4, !insn.addr !6195
  %41 = inttoptr i32 %3 to i32*, !insn.addr !6196
  %42 = load i32, i32* %41, align 4, !insn.addr !6196
  %43 = add i32 %42, 232, !insn.addr !6197
  %44 = and i32 %43, 255, !insn.addr !6197
  %45 = and i32 %42, -256, !insn.addr !6197
  %46 = or i32 %44, %45, !insn.addr !6197
  ret i32 %46, !insn.addr !6198
}

define i32 @function_100f579() local_unnamed_addr {
dec_label_pc_100f579:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %1, -4, !insn.addr !6199
  %6 = inttoptr i32 %5 to i32*, !insn.addr !6199
  %7 = load i32, i32* %6, align 4, !insn.addr !6199
  %8 = inttoptr i32 %7 to i32*, !insn.addr !6200
  %9 = add i32 %2, 12, !insn.addr !6201
  %10 = inttoptr i32 %9 to i32*, !insn.addr !6201
  %11 = load i32, i32* %10, align 4, !insn.addr !6201
  %12 = and i32 %11, 114, !insn.addr !6202
  %13 = or i32 %12, 141, !insn.addr !6202
  %14 = and i32 %11, -256, !insn.addr !6202
  %15 = or i32 %13, %14, !insn.addr !6202
  %16 = trunc i32 %13 to i8, !insn.addr !6203
  %17 = inttoptr i32 %0 to i8*, !insn.addr !6203
  store i8 %16, i8* %17, align 1, !insn.addr !6203
  %18 = select i1 %4, i32 -1, i32 1, !insn.addr !6203
  %19 = add i32 %18, %0, !insn.addr !6203
  %20 = trunc i32 %3 to i16, !insn.addr !6204
  %21 = call i8 @__asm_insb(i16 %20), !insn.addr !6204
  %22 = inttoptr i32 %19 to i8*, !insn.addr !6204
  store i8 %21, i8* %22, align 1, !insn.addr !6204
  %23 = inttoptr i32 %15 to i8*, !insn.addr !6205
  %24 = load i8, i8* %23, align 1, !insn.addr !6205
  %25 = add i8 %24, %16, !insn.addr !6205
  store i8 %25, i8* %23, align 1, !insn.addr !6205
  %26 = and i32 %13, 3, !insn.addr !6206
  %27 = inttoptr i32 %2 to i8*, !insn.addr !6207
  call void @__asm_rep_movsb_memcpy(i8* %22, i8* %27, i32 %26), !insn.addr !6207
  %28 = mul nsw i32 %26, %18, !insn.addr !6207
  %29 = load i32, i32* %6, align 4, !insn.addr !6208
  %30 = add i32 %19, -2045253628, !insn.addr !6207
  %31 = add i32 %30, %28, !insn.addr !6209
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6209
  %33 = load i32, i32* %32, align 4, !insn.addr !6209
  %34 = add i32 %33, 1, !insn.addr !6209
  store i32 %34, i32* %32, align 4, !insn.addr !6209
  ret i32 %29, !insn.addr !6210
}

define i32 @function_100f5af() local_unnamed_addr {
dec_label_pc_100f5af:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = mul i32 %2, 4, !insn.addr !6211
  %4 = add i32 %1, 83, !insn.addr !6211
  %5 = add i32 %4, %3, !insn.addr !6211
  %6 = inttoptr i32 %5 to i32*, !insn.addr !6211
  %7 = load i32, i32* %6, align 4, !insn.addr !6211
  %8 = add i32 %7, -2, !insn.addr !6212
  %9 = inttoptr i32 %8 to i16*, !insn.addr !6212
  ret i32 %0, !insn.addr !6213
}

define i32 @function_100f5d1(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f5d1:
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %3, 25, !insn.addr !6214
  %6 = and i32 %3, -256, !insn.addr !6214
  %7 = or i32 %5, 223, !insn.addr !6215
  %8 = add i32 %7, %2, !insn.addr !6216
  %9 = and i32 %8, 255, !insn.addr !6216
  %10 = or i32 %9, %6, !insn.addr !6216
  %11 = add i32 %10, %1, !insn.addr !6217
  %12 = inttoptr i32 %11 to i32*, !insn.addr !6217
  %13 = load i32, i32* %12, align 4, !insn.addr !6217
  %14 = xor i32 %13, 79, !insn.addr !6217
  store i32 %14, i32* %12, align 4, !insn.addr !6217
  %15 = bitcast i32* %esi to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !6218
  %17 = inttoptr i32 %0 to i8*, !insn.addr !6218
  store i8 %16, i8* %17, align 1, !insn.addr !6218
  %18 = load i32, i32* %esi, align 4, !insn.addr !6218
  %19 = select i1 %4, i32 -1, i32 1, !insn.addr !6218
  %20 = add i32 %18, %19, !insn.addr !6218
  %21 = inttoptr i32 %20 to i8*, !insn.addr !6219
  %22 = load i8, i8* %21, align 1, !insn.addr !6219
  %23 = zext i8 %22 to i32, !insn.addr !6219
  %24 = or i32 %6, %23, !insn.addr !6219
  %25 = add i32 %20, %19, !insn.addr !6219
  store i32 %25, i32* %esi, align 4, !insn.addr !6219
  %26 = add i32 %1, -16714651, !insn.addr !6220
  %27 = inttoptr i32 %26 to i32*, !insn.addr !6220
  %28 = load i32, i32* %27, align 4, !insn.addr !6220
  %29 = add i32 %28, %24, !insn.addr !6220
  %30 = xor i32 %29, %28, !insn.addr !6220
  %31 = xor i32 %29, %3, !insn.addr !6220
  %32 = and i32 %30, %31, !insn.addr !6220
  %33 = icmp slt i32 %32, 0, !insn.addr !6220
  store i32 %29, i32* %27, align 4, !insn.addr !6220
  br i1 %33, label %dec_label_pc_100f5ff, label %dec_label_pc_100f5fb, !insn.addr !6221

dec_label_pc_100f5fb:                             ; preds = %dec_label_pc_100f5d1
  ret i32 %24, !insn.addr !6221

dec_label_pc_100f5ff:                             ; preds = %dec_label_pc_100f5d1
  %34 = add i32 %0, -1, !insn.addr !6218
  %35 = add i32 %34, %19, !insn.addr !6222
  %36 = call i32 @__asm_hlt(), !insn.addr !6223
  %37 = inttoptr i32 %36 to i8*, !insn.addr !6224
  %38 = load i8, i8* %37, align 1, !insn.addr !6224
  %39 = trunc i32 %36 to i8, !insn.addr !6224
  %40 = add i8 %38, %39, !insn.addr !6224
  store i8 %40, i8* %37, align 1, !insn.addr !6224
  %41 = add i32 %arg1, 54, !insn.addr !6225
  %42 = inttoptr i32 %41 to i32*, !insn.addr !6225
  %43 = load i32, i32* %42, align 4, !insn.addr !6225
  %44 = load i32, i32* %esi, align 4, !insn.addr !6226
  %45 = inttoptr i32 %44 to i32*, !insn.addr !6226
  %46 = load i32, i32* %45, align 4, !insn.addr !6226
  %47 = inttoptr i32 %35 to i32*, !insn.addr !6226
  store i32 %46, i32* %47, align 4, !insn.addr !6226
  ret i32 %43, !insn.addr !6227
}

define i32 @function_100f627() local_unnamed_addr {
dec_label_pc_100f627:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6228
}

define i32 @function_100f63d() local_unnamed_addr {
dec_label_pc_100f63d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = zext i1 %1 to i32, !insn.addr !6229
  %3 = add i32 %0, %2, !insn.addr !6229
  %4 = and i32 %3, 255, !insn.addr !6229
  %5 = and i32 %0, -256, !insn.addr !6229
  %6 = or i32 %4, %5, !insn.addr !6229
  ret i32 %6, !insn.addr !6230
}

define i32 @function_100f646(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f646:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6231
}

define i32 @function_100f664() local_unnamed_addr {
dec_label_pc_100f664:
  %eax.0.reg2mem = alloca i32, !insn.addr !6232
  %esp.0.reg2mem = alloca i32, !insn.addr !6232
  %ebx.0.reg2mem = alloca i32, !insn.addr !6232
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %0, -391022884, !insn.addr !6232
  %5 = inttoptr i32 %4 to i32*, !insn.addr !6232
  %6 = load i32, i32* %5, align 4, !insn.addr !6232
  %7 = add i32 %6, %2, !insn.addr !6232
  store i32 %7, i32* %5, align 4, !insn.addr !6232
  call void @__asm_into(i32 %3), !insn.addr !6233
  %8 = add i32 %1, 1979661158, !insn.addr !6234
  %9 = inttoptr i32 %8 to i8*, !insn.addr !6234
  %10 = load i8, i8* %9, align 1, !insn.addr !6234
  %11 = trunc i32 %2 to i8, !insn.addr !6234
  %12 = add i8 %10, %11, !insn.addr !6234
  store i8 %12, i8* %9, align 1, !insn.addr !6234
  %13 = call i32 @__asm_hlt(), !insn.addr !6235
  %14 = add i32 %13, 4, !insn.addr !6236
  %15 = add i32 %0, 68
  %16 = inttoptr i32 %15 to i32*
  %17 = add i32 %0, 78
  %18 = add i32 %0, -4
  %19 = inttoptr i32 %18 to i32*
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !6236
  br label %dec_label_pc_100f677, !insn.addr !6236

dec_label_pc_100f677:                             ; preds = %dec_label_pc_100f677, %dec_label_pc_100f664
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %20 = add i32 %esp.0.reload, -4, !insn.addr !6237
  %21 = inttoptr i32 %20 to i32*, !insn.addr !6237
  store i32 %eax.0.reload, i32* %21, align 4, !insn.addr !6237
  %22 = call i32 @unknown_98014714(), !insn.addr !6238
  %23 = load i32, i32* %16, align 4, !insn.addr !6239
  call void @__asm_out.4(i32 78, i32 %22), !insn.addr !6240
  %24 = call i32 @__asm_int1(), !insn.addr !6241
  %25 = add i32 %esp.0.reload, -6, !insn.addr !6242
  %26 = add i32 %23, 2, !insn.addr !6243
  %27 = or i32 %25, 107, !insn.addr !6244
  %28 = and i32 %25, -256, !insn.addr !6244
  %29 = add i32 %27, 104, !insn.addr !6245
  %30 = and i32 %29, 119, !insn.addr !6245
  %31 = or i32 %30, %28, !insn.addr !6245
  %32 = inttoptr i32 %31 to i8*, !insn.addr !6246
  %33 = load i8, i8* %32, align 1, !insn.addr !6246
  %34 = trunc i32 %30 to i8, !insn.addr !6246
  %35 = add i8 %33, %34, !insn.addr !6246
  store i8 %35, i8* %32, align 1, !insn.addr !6246
  %36 = add i32 %31, 1341928959, !insn.addr !6247
  %37 = inttoptr i32 %36 to i8*, !insn.addr !6247
  %38 = load i8, i8* %37, align 2, !insn.addr !6247
  %39 = add i8 %38, %34, !insn.addr !6247
  store i8 %39, i8* %37, align 2, !insn.addr !6247
  %40 = inttoptr i32 %26 to i32*, !insn.addr !6248
  %41 = load i32, i32* %40, align 4, !insn.addr !6248
  %42 = add i32 %41, %31, !insn.addr !6248
  store i32 %42, i32* %40, align 4, !insn.addr !6248
  %43 = add i32 %24, -3, !insn.addr !6249
  %44 = inttoptr i32 %43 to i32*, !insn.addr !6249
  store i32 %17, i32* %44, align 4, !insn.addr !6249
  %45 = call i32 @unknown_1bb71a3c(), !insn.addr !6250
  %46 = load i32, i32* %19, align 4, !insn.addr !6251
  %47 = add i32 %ebx.0.reload, 1, !insn.addr !6252
  %48 = icmp eq i32 %47, 0, !insn.addr !6252
  %49 = icmp eq i1 %48, false, !insn.addr !6253
  store i32 %47, i32* %ebx.0.reg2mem, !insn.addr !6253
  store i32 %43, i32* %esp.0.reg2mem, !insn.addr !6253
  store i32 %46, i32* %eax.0.reg2mem, !insn.addr !6253
  br i1 %49, label %dec_label_pc_100f677, label %dec_label_pc_100f6a7, !insn.addr !6253

dec_label_pc_100f6a7:                             ; preds = %dec_label_pc_100f677
  %50 = inttoptr i32 %25 to i16*, !insn.addr !6242
  %51 = call i32 @function_1012314(i32 ptrtoint (i32* @0 to i32)), !insn.addr !6254
  %52 = add i32 %0, 74, !insn.addr !6255
  %53 = inttoptr i32 %52 to i32*, !insn.addr !6255
  %54 = load i32, i32* %53, align 4, !insn.addr !6255
  %55 = add i32 %24, -7, !insn.addr !6255
  %56 = inttoptr i32 %55 to i32*, !insn.addr !6255
  store i32 %54, i32* %56, align 4, !insn.addr !6255
  ret i32 %51, !insn.addr !6256
}

define i32 @function_100f6b6() local_unnamed_addr {
dec_label_pc_100f6b6:
  %0 = call i32 @function_ffbf98e8(), !insn.addr !6257
  ret i32 %0, !insn.addr !6257
}

define i32 @function_100f71f(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f71f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6258
}

define i32 @function_100f730() local_unnamed_addr {
dec_label_pc_100f730:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6259
}

define i32 @function_100f738(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100f738:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = inttoptr i32 %0 to i32*, !insn.addr !6260
  ret i32 %1, !insn.addr !6261
}

define i32 @function_100f73f() local_unnamed_addr {
dec_label_pc_100f73f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = add i32 %0, -1957473967, !insn.addr !6262
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6262
  %8 = load i32, i32* %7, align 4, !insn.addr !6262
  %9 = inttoptr i32 %8 to i32*, !insn.addr !6263
  %10 = load i32, i32* %9, align 4, !insn.addr !6263
  %11 = add i32 %2, -164407612, !insn.addr !6264
  %12 = inttoptr i32 %11 to i8*, !insn.addr !6264
  %13 = load i8, i8* %12, align 1, !insn.addr !6264
  %14 = trunc i32 %4 to i8, !insn.addr !6264
  %15 = or i8 %13, %14, !insn.addr !6264
  store i8 %15, i8* %12, align 1, !insn.addr !6264
  %16 = add i32 %10, -4, !insn.addr !6265
  %17 = inttoptr i32 %16 to i32*, !insn.addr !6265
  %18 = bitcast i32* %ebx to i8*
  %19 = load i8, i8* %18, align 4, !insn.addr !6266
  %20 = udiv i32 %3, 256, !insn.addr !6266
  %21 = trunc i32 %20 to i8, !insn.addr !6266
  %22 = sub i8 %19, %21, !insn.addr !6266
  %23 = load i32, i32* %ebx, align 4, !insn.addr !6266
  %24 = inttoptr i32 %23 to i8*, !insn.addr !6266
  store i8 %22, i8* %24, align 1, !insn.addr !6266
  %25 = add i32 %5, 4, !insn.addr !6267
  %26 = inttoptr i32 %25 to i32*, !insn.addr !6267
  %27 = load i32, i32* %26, align 4, !insn.addr !6267
  %28 = add i32 %0, -2013155569, !insn.addr !6268
  %29 = inttoptr i32 %28 to i32*, !insn.addr !6268
  %30 = load i32, i32* %29, align 4, !insn.addr !6268
  %31 = add i32 %27, 1, !insn.addr !6269
  %32 = inttoptr i32 %4 to i32*, !insn.addr !6270
  store i32 %31, i32* %32, align 4, !insn.addr !6270
  %33 = add i32 %4, -1, !insn.addr !6271
  %34 = load i32, i32* inttoptr (i32 25777924 to i32*), align 4, !insn.addr !6272
  %35 = add i32 %34, %30, !insn.addr !6272
  store i32 %35, i32* inttoptr (i32 25777924 to i32*), align 4, !insn.addr !6272
  %36 = load i32, i32* %17, align 4, !insn.addr !6273
  store i32 %36, i32* %9, align 4, !insn.addr !6273
  %37 = call i32 @function_1007c30(i32 %1), !insn.addr !6274
  %38 = add i32 %8, -4, !insn.addr !6275
  %39 = inttoptr i32 %38 to i32*, !insn.addr !6275
  store i32 117, i32* %39, align 4, !insn.addr !6275
  %40 = call i32 @unknown_1c007c26(), !insn.addr !6276
  store i32 %40, i32* %17, align 4, !insn.addr !6277
  %41 = add i32 %8, -8, !insn.addr !6278
  %42 = inttoptr i32 %41 to i32*, !insn.addr !6278
  store i32 %33, i32* %42, align 4, !insn.addr !6278
  %43 = add i32 %8, 8, !insn.addr !6279
  %44 = add i32 %8, 20, !insn.addr !6279
  %45 = load i32, i32* %39, align 4, !insn.addr !6279
  %46 = load i32, i32* %9, align 4, !insn.addr !6279
  %47 = inttoptr i32 %43 to i32*, !insn.addr !6279
  %48 = load i32, i32* %47, align 4, !insn.addr !6279
  %49 = inttoptr i32 %44 to i32*, !insn.addr !6279
  %50 = load i32, i32* %49, align 4, !insn.addr !6279
  %51 = inttoptr i32 %50 to i32*, !insn.addr !6280
  store i32 %45, i32* %51, align 4, !insn.addr !6280
  %52 = inttoptr i32 %45 to i32*, !insn.addr !6281
  %53 = load i32, i32* %52, align 4, !insn.addr !6281
  %54 = udiv i32 %53, 256, !insn.addr !6282
  %55 = trunc i32 %54 to i8, !insn.addr !6282
  %56 = add i32 %45, -124, !insn.addr !6282
  %57 = inttoptr i32 %56 to i8*, !insn.addr !6282
  %58 = load i8, i8* %57, align 1, !insn.addr !6282
  %59 = and i8 %58, %55, !insn.addr !6282
  %60 = zext i8 %59 to i32, !insn.addr !6282
  %61 = mul i32 %60, 256, !insn.addr !6282
  %62 = and i32 %53, -65536, !insn.addr !6282
  %63 = or i32 %61, %62, !insn.addr !6282
  %64 = or i32 %63, 255, !insn.addr !6283
  %65 = add i32 %46, -66, !insn.addr !6284
  %66 = inttoptr i32 %65 to i32*, !insn.addr !6284
  %67 = load i32, i32* %66, align 4, !insn.addr !6284
  %68 = inttoptr i32 %67 to i32*, !insn.addr !6285
  store i32 %64, i32* %68, align 4, !insn.addr !6285
  %69 = add i32 %4, -980692598, !insn.addr !6286
  %70 = inttoptr i32 %69 to i32*, !insn.addr !6286
  %71 = load i32, i32* %70, align 4, !insn.addr !6286
  %72 = add i32 %46, -36, !insn.addr !6287
  %73 = inttoptr i32 %72 to i32*, !insn.addr !6287
  %74 = load i32, i32* %73, align 4, !insn.addr !6287
  %75 = or i32 %63, 143, !insn.addr !6288
  %76 = inttoptr i32 %75 to i8*, !insn.addr !6289
  %77 = load i8, i8* %76, align 1, !insn.addr !6289
  %78 = add i8 %77, -113, !insn.addr !6289
  store i8 %78, i8* %76, align 1, !insn.addr !6289
  %79 = udiv i32 %67, 4, !insn.addr !6290
  %80 = inttoptr i32 %71 to i8*, !insn.addr !6291
  %81 = inttoptr i32 %33 to i8*, !insn.addr !6291
  call void @__asm_rep_movsd_memcpy(i8* %81, i8* %80, i32 %79), !insn.addr !6291
  %82 = and i32 %67, -4, !insn.addr !6291
  %83 = add i32 %82, %33, !insn.addr !6291
  %84 = inttoptr i32 %83 to i32*, !insn.addr !6292
  %85 = load i32, i32* %84, align 4, !insn.addr !6292
  %86 = add i32 %85, -1, !insn.addr !6292
  store i32 %86, i32* %84, align 4, !insn.addr !6292
  %87 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !6293
  %88 = add i32 %46, -3, !insn.addr !6294
  %89 = inttoptr i32 %88 to i32*, !insn.addr !6294
  %90 = load i32, i32* %89, align 4, !insn.addr !6294
  %91 = inttoptr i32 %90 to i32*, !insn.addr !6295
  %92 = load i32, i32* %91, align 4, !insn.addr !6295
  %93 = add i32 %92, 4, !insn.addr !6295
  store i32 %93, i32* %91, align 4, !insn.addr !6295
  %94 = add i32 %48, 1849723651, !insn.addr !6296
  %95 = inttoptr i32 %94 to i8*, !insn.addr !6296
  %96 = load i8, i8* %95, align 1, !insn.addr !6296
  %97 = xor i8 %96, 3, !insn.addr !6296
  %98 = zext i8 %97 to i32, !insn.addr !6296
  %99 = add i32 %90, -93, !insn.addr !6297
  %100 = inttoptr i32 %99 to i32*, !insn.addr !6297
  %101 = load i32, i32* %100, align 4, !insn.addr !6297
  store i32 %101, i32* %49, align 4, !insn.addr !6297
  %102 = inttoptr i32 %74 to i32*, !insn.addr !6298
  %103 = load i32, i32* %102, align 4, !insn.addr !6298
  %104 = add nuw nsw i32 %98, 4, !insn.addr !6299
  call void @__writefsdword(i32 %104, i32 %90), !insn.addr !6299
  %105 = inttoptr i32 %48 to i32*, !insn.addr !6300
  %106 = load i32, i32* %105, align 4, !insn.addr !6300
  %107 = add i32 %106, 4, !insn.addr !6301
  %108 = inttoptr i32 %107 to i32*, !insn.addr !6301
  %109 = load i32, i32* %108, align 4, !insn.addr !6301
  %110 = add i32 %109, 4, !insn.addr !6302
  %111 = inttoptr i32 %110 to i32*, !insn.addr !6302
  %112 = load i32, i32* %111, align 4, !insn.addr !6302
  %113 = mul i32 %112, 4, !insn.addr !6303
  %114 = add i32 %113, -1761607634, !insn.addr !6303
  %115 = inttoptr i32 %114 to i16*, !insn.addr !6303
  %116 = udiv i32 %112, 256, !insn.addr !6304
  %117 = and i32 %116, 255
  %118 = xor i32 %117, %112, !insn.addr !6304
  %119 = inttoptr i32 %109 to i8*, !insn.addr !6305
  %120 = inttoptr i32 %103 to i8*, !insn.addr !6305
  call void @__asm_rep_movsb_memcpy(i8* %120, i8* %119, i32 %118), !insn.addr !6305
  %121 = call i32 @__asm_int1(), !insn.addr !6306
  call void @llvm.trap()
  unreachable
}

define i32 @function_100f836() local_unnamed_addr {
dec_label_pc_100f836:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  br i1 %5, label %6, label %dec_label_pc_100f83e, !insn.addr !6307

; <label>:6:                                      ; preds = %dec_label_pc_100f836
  %7 = call i32 @function_1012feb(), !insn.addr !6307
  br label %dec_label_pc_100f83e, !insn.addr !6307

dec_label_pc_100f83e:                             ; preds = %6, %dec_label_pc_100f836
  %8 = add i32 %2, -4, !insn.addr !6308
  %9 = inttoptr i32 %8 to i32*, !insn.addr !6308
  %10 = load i32, i32* %9, align 4, !insn.addr !6308
  %11 = call i32 @function_10054d1(i32 %10), !insn.addr !6309
  %12 = call i32 @unknown_73a5d1(i32 %3), !insn.addr !6310
  %13 = xor i32 %2, %0, !insn.addr !6311
  %14 = add i32 %0, -1979711613, !insn.addr !6312
  %15 = add i32 %1, 1, !insn.addr !6313
  %16 = inttoptr i32 %14 to i32*, !insn.addr !6314
  %17 = load i32, i32* %16, align 4, !insn.addr !6314
  %18 = inttoptr i32 %3 to i32*, !insn.addr !6315
  store i32 %15, i32* %18, align 4, !insn.addr !6315
  %19 = and i32 %3, 65280, !insn.addr !6316
  %20 = add i32 %19, %3
  %21 = and i32 %20, 65280, !insn.addr !6316
  %22 = and i32 %3, -65281, !insn.addr !6316
  %23 = or i32 %21, %22, !insn.addr !6316
  %24 = trunc i32 %3 to i8, !insn.addr !6317
  %25 = mul i32 %13, 8, !insn.addr !6317
  %26 = add i32 %25, %3, !insn.addr !6317
  %27 = inttoptr i32 %26 to i8*, !insn.addr !6317
  %28 = load i8, i8* %27, align 1, !insn.addr !6317
  %29 = or i8 %28, %24, !insn.addr !6317
  %30 = and i32 %3, -256, !insn.addr !6317
  %31 = add i32 %23, 193724415, !insn.addr !6318
  %32 = inttoptr i32 %31 to i8*, !insn.addr !6318
  %33 = load i8, i8* %32, align 1, !insn.addr !6318
  store i8 %29, i8* %32, align 1, !insn.addr !6318
  %34 = zext i8 %33 to i32, !insn.addr !6318
  %35 = or i32 %30, %34, !insn.addr !6318
  %36 = inttoptr i32 %4 to i32*, !insn.addr !6319
  store i32 %35, i32* %36, align 4, !insn.addr !6319
  %37 = add i32 %23, 1, !insn.addr !6320
  %38 = inttoptr i32 %37 to i32*, !insn.addr !6321
  %39 = load i32, i32* %38, align 4, !insn.addr !6321
  %40 = inttoptr i32 %39 to i32*, !insn.addr !6322
  %41 = load i32, i32* %40, align 4, !insn.addr !6322
  %42 = inttoptr i32 %39 to i8*, !insn.addr !6323
  %43 = load i8, i8* %42, align 1, !insn.addr !6323
  %44 = trunc i32 %39 to i8, !insn.addr !6323
  %45 = add i8 %43, %44, !insn.addr !6323
  store i8 %45, i8* %42, align 1, !insn.addr !6323
  %46 = add i32 %41, -1952107517, !insn.addr !6324
  %47 = inttoptr i32 %46 to i32*, !insn.addr !6324
  %48 = load i32, i32* %47, align 4, !insn.addr !6324
  %49 = sdiv i32 %48, 256, !insn.addr !6324
  store i32 %49, i32* %47, align 4, !insn.addr !6324
  %50 = inttoptr i32 %1 to i8*, !insn.addr !6325
  %51 = load i8, i8* %50, align 1, !insn.addr !6325
  %52 = inttoptr i32 %41 to i8*, !insn.addr !6325
  store i8 %51, i8* %52, align 1, !insn.addr !6325
  %53 = load i32, i32* %38, align 4, !insn.addr !6326
  %54 = add i32 %53, 4, !insn.addr !6327
  %55 = inttoptr i32 %54 to i32*, !insn.addr !6327
  %56 = load i32, i32* %55, align 4, !insn.addr !6327
  %57 = inttoptr i32 %13 to i32*, !insn.addr !6327
  store i32 %56, i32* %57, align 4, !insn.addr !6327
  %58 = call i32 @unknown_63000cc1(i32 %17), !insn.addr !6328
  %59 = call i32 @__asm_wait(), !insn.addr !6329
  %60 = add i32 %23, -1593834343, !insn.addr !6330
  %61 = inttoptr i32 %60 to i32*, !insn.addr !6330
  %62 = load i32, i32* %61, align 4, !insn.addr !6330
  %63 = add i32 %62, %59, !insn.addr !6330
  ret i32 %63, !insn.addr !6331
}

define i32 @function_100f8db() local_unnamed_addr {
dec_label_pc_100f8db:
  %0 = call i32 @function_4ecdebe2(), !insn.addr !6332
  ret i32 %0, !insn.addr !6332
}

define i32 @function_100f8e0() local_unnamed_addr {
dec_label_pc_100f8e0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = inttoptr i32 %1 to i8*, !insn.addr !6333
  %4 = inttoptr i32 %0 to i8*, !insn.addr !6333
  call void @__asm_rep_movsb_memcpy(i8* %4, i8* %3, i32 %2), !insn.addr !6333
  %5 = call i32 @function_100fac3(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !6334
  ret i32 %5, !insn.addr !6334
}

define i32 @function_100f926(i32 %arg1) local_unnamed_addr {
dec_label_pc_100f926:
  %eax.0.reg2mem = alloca i32, !insn.addr !6335
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, %2, !insn.addr !6335
  %5 = inttoptr i32 %2 to i32*, !insn.addr !6335
  store i32 %4, i32* %5, align 4, !insn.addr !6335
  %6 = call i32 @function_100be29(i32 %1), !insn.addr !6336
  br label %dec_label_pc_100f936, !insn.addr !6337

dec_label_pc_100f936:                             ; preds = %dec_label_pc_100f936, %dec_label_pc_100f926
  %7 = call i32 @function_1008d44(), !insn.addr !6338
  %8 = icmp eq i32 %7, 0, !insn.addr !6339
  br i1 %8, label %dec_label_pc_100f936, label %dec_label_pc_100f93f, !insn.addr !6340

dec_label_pc_100f93f:                             ; preds = %dec_label_pc_100f936
  %9 = call i32 @__asm_iretd(), !insn.addr !6341
  %10 = xor i32 %9, 42, !insn.addr !6342
  %11 = add i32 %10, %2, !insn.addr !6343
  store i32 %11, i32* %5, align 4, !insn.addr !6343
  %12 = inttoptr i32 %10 to i32*, !insn.addr !6344
  %13 = load i32, i32* %12, align 4, !insn.addr !6344
  %14 = add i32 %13, %10, !insn.addr !6344
  store i32 %14, i32* %12, align 4, !insn.addr !6344
  %15 = add i32 %10, 2956520, !insn.addr !6345
  %16 = inttoptr i32 %15 to i8*, !insn.addr !6345
  %17 = load i8, i8* %16, align 1, !insn.addr !6345
  %18 = trunc i32 %2 to i8, !insn.addr !6345
  %19 = add i8 %17, %18, !insn.addr !6345
  store i8 %19, i8* %16, align 1, !insn.addr !6345
  %20 = icmp eq i32 %0, %10, !insn.addr !6346
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !6347
  br i1 %20, label %21, label %dec_label_pc_100f959, !insn.addr !6347

; <label>:21:                                     ; preds = %dec_label_pc_100f93f
  %22 = call i32 @function_100f8db(), !insn.addr !6347
  store i32 %22, i32* %eax.0.reg2mem, !insn.addr !6347
  br label %dec_label_pc_100f959, !insn.addr !6347

dec_label_pc_100f959:                             ; preds = %21, %dec_label_pc_100f93f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !6347
}

define i32 @function_100f95a() local_unnamed_addr {
dec_label_pc_100f95a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6348
}

define i32 @function_100f95d() local_unnamed_addr {
dec_label_pc_100f95d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @unknown_80007b93(), !insn.addr !6349
  %2 = sub i32 %0, %1, !insn.addr !6350
  %3 = inttoptr i32 %0 to i32*, !insn.addr !6350
  store i32 %2, i32* %3, align 4, !insn.addr !6350
  ret i32 %1, !insn.addr !6351
}

define i32 @function_100f965() local_unnamed_addr {
dec_label_pc_100f965:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = udiv i32 %0, 256, !insn.addr !6352
  %3 = and i32 %2, 255
  %4 = xor i32 %3, %1, !insn.addr !6352
  ret i32 %4, !insn.addr !6353
}

define i32 @function_100f96a() local_unnamed_addr {
dec_label_pc_100f96a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = add i32 %3, -1590114813, !insn.addr !6354
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6354
  %8 = load i32, i32* %7, align 4, !insn.addr !6354
  %9 = add i32 %8, -1, !insn.addr !6354
  store i32 %9, i32* %7, align 4, !insn.addr !6354
  %10 = trunc i32 %4 to i8, !insn.addr !6355
  %11 = add i32 %0, 1, !insn.addr !6355
  %12 = inttoptr i32 %11 to i8*, !insn.addr !6355
  store i8 %10, i8* %12, align 1, !insn.addr !6355
  %13 = add i32 %3, 74514176, !insn.addr !6356
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6356
  %15 = load i32, i32* %14, align 4, !insn.addr !6356
  %16 = add i32 %15, %4, !insn.addr !6356
  store i32 %16, i32* %14, align 4, !insn.addr !6356
  call void @__asm_outsd(i16 -29059, i32 %1), !insn.addr !6357
  %17 = add i32 %3, 21201341, !insn.addr !6358
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6358
  %19 = load i32, i32* %18, align 4, !insn.addr !6358
  %20 = add i32 %19, %2, !insn.addr !6358
  store i32 %20, i32* %18, align 4, !insn.addr !6358
  %21 = bitcast i32* %eax to i8*
  %22 = load i8, i8* %21, align 4, !insn.addr !6359
  %23 = and i8 %22, 125, !insn.addr !6359
  %24 = load i32, i32* %eax, align 4, !insn.addr !6359
  %25 = inttoptr i32 %24 to i8*, !insn.addr !6359
  store i8 %23, i8* %25, align 1, !insn.addr !6359
  %26 = call i32 @unknown_c8d0c(i16 %5), !insn.addr !6360
  %27 = call i32 @function_8ca66c6b(), !insn.addr !6361
  ret i32 %27, !insn.addr !6361
}

define i32 @function_100f99f() local_unnamed_addr {
dec_label_pc_100f99f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = inttoptr i32 %1 to i8*, !insn.addr !6362
  %5 = inttoptr i32 %0 to i8*, !insn.addr !6362
  call void @__asm_rep_movsb_memcpy(i8* %5, i8* %4, i32 %3), !insn.addr !6362
  %6 = add i32 %2, 4, !insn.addr !6363
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6363
  %8 = load i32, i32* %7, align 4, !insn.addr !6363
  %9 = call i32 @function_1007bc1(i32 %8), !insn.addr !6364
  store i32 0, i32* %7, align 4, !insn.addr !6365
  ret i32 0, !insn.addr !6366
}

define i32 @function_100fa4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_100fa4c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %3, 232, !insn.addr !6367
  %6 = and i32 %5, 255, !insn.addr !6367
  %7 = and i32 %3, -256, !insn.addr !6367
  %8 = or i32 %6, %7, !insn.addr !6367
  %9 = add i32 %0, 4, !insn.addr !6368
  %10 = inttoptr i32 %9 to i32*, !insn.addr !6368
  store i32 %8, i32* %10, align 4, !insn.addr !6368
  %11 = udiv i32 %1, 4, !insn.addr !6369
  %12 = inttoptr i32 %0 to i8*, !insn.addr !6370
  %13 = inttoptr i32 %8 to i8*, !insn.addr !6370
  call void @__asm_rep_movsd_memcpy(i8* %13, i8* %12, i32 %11), !insn.addr !6370
  %14 = select i1 %4, i32 -4, i32 4, !insn.addr !6370
  %15 = mul i32 %14, %11, !insn.addr !6370
  %16 = add i32 %8, %15, !insn.addr !6370
  %17 = inttoptr i32 %16 to i8*, !insn.addr !6371
  call void @__asm_rep_movsb_memcpy(i8* %17, i8* %17, i32 0), !insn.addr !6371
  %18 = call i32 @function_100bbd4(), !insn.addr !6372
  %19 = inttoptr i32 %18 to i32*, !insn.addr !6373
  %20 = load i32, i32* %19, align 4, !insn.addr !6373
  %21 = inttoptr i32 %20 to i32*, !insn.addr !6374
  %22 = load i32, i32* %21, align 4, !insn.addr !6374
  %23 = sub i32 0, %22, !insn.addr !6374
  store i32 %23, i32* %21, align 4, !insn.addr !6374
  %24 = load i32, i32* inttoptr (i32 -2110632078 to i32*), align 4, !insn.addr !6375
  %25 = add i32 %2, -4, !insn.addr !6375
  %26 = inttoptr i32 %25 to i32*, !insn.addr !6375
  store i32 %24, i32* %26, align 4, !insn.addr !6375
  %27 = add i32 %2, -8, !insn.addr !6376
  %28 = inttoptr i32 %27 to i32*, !insn.addr !6376
  %29 = call i32 @unknown_935454(), !insn.addr !6377
  call void @llvm.trap()
  unreachable
}

define i32 @function_100fa99() local_unnamed_addr {
dec_label_pc_100fa99:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i16 @__decompiler_undefined_function_1()
  %4 = call i32 @function_100f40a(i32 %1), !insn.addr !6378
  %5 = add i32 %2, %1, !insn.addr !6379
  %6 = inttoptr i32 %2 to i32*, !insn.addr !6379
  store i32 %5, i32* %6, align 4, !insn.addr !6379
  %7 = sext i16 %3 to i32, !insn.addr !6380
  %8 = call i32 @function_100fac3(i32 %7, i32 %0), !insn.addr !6380
  ret i32 %8, !insn.addr !6380
}

define i32 @function_100fac3(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100fac3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = and i32 %0, 255, !insn.addr !6381
  %5 = and i32 %3, -256, !insn.addr !6381
  %6 = or i32 %5, %4, !insn.addr !6381
  %7 = inttoptr i32 %6 to i8*, !insn.addr !6382
  %8 = load i8, i8* %7, align 1, !insn.addr !6382
  %9 = trunc i32 %2 to i8, !insn.addr !6382
  %10 = and i8 %8, %9, !insn.addr !6382
  store i8 %10, i8* %7, align 1, !insn.addr !6382
  %11 = add i32 %1, 4, !insn.addr !6383
  %12 = inttoptr i32 %11 to i32*, !insn.addr !6383
  %13 = load i32, i32* %12, align 4, !insn.addr !6383
  ret i32 %13, !insn.addr !6384
}

define i32 @function_100fad4() local_unnamed_addr {
dec_label_pc_100fad4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = and i32 %2, %1, !insn.addr !6385
  %4 = add i32 %0, 91, !insn.addr !6386
  %5 = inttoptr i32 %4 to i8*, !insn.addr !6386
  %6 = load i8, i8* %5, align 1, !insn.addr !6386
  %7 = trunc i32 %1 to i8, !insn.addr !6386
  %8 = add i8 %6, %7, !insn.addr !6386
  store i8 %8, i8* %5, align 1, !insn.addr !6386
  ret i32 %3, !insn.addr !6387
}

define i32 @function_100fae4(i32 %arg1) local_unnamed_addr {
dec_label_pc_100fae4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6388
}

define i32 @function_100fb18() local_unnamed_addr {
dec_label_pc_100fb18:
  %eax.0.reg2mem = alloca i32, !insn.addr !6389
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = mul i32 %0, 2, !insn.addr !6390
  %6 = xor i32 %5, %0, !insn.addr !6390
  %7 = icmp slt i32 %6, 0, !insn.addr !6390
  %8 = call i32 @unknown_782cc1(), !insn.addr !6391
  %9 = icmp eq i1 %7, false, !insn.addr !6392
  br i1 %9, label %dec_label_pc_100fb4e, label %dec_label_pc_100fb2e, !insn.addr !6392

dec_label_pc_100fb2e:                             ; preds = %dec_label_pc_100fb18
  %10 = add i32 %2, -2062586370, !insn.addr !6393
  %11 = inttoptr i32 %10 to i8*, !insn.addr !6393
  %12 = load i8, i8* %11, align 1, !insn.addr !6393
  %13 = trunc i32 %2 to i8, !insn.addr !6393
  %14 = add i8 %12, %13, !insn.addr !6393
  store i8 %14, i8* %11, align 1, !insn.addr !6393
  %15 = bitcast i32* %ebx to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !6394
  %17 = add i8 %16, %13, !insn.addr !6394
  %18 = inttoptr i32 %2 to i8*, !insn.addr !6394
  store i8 %17, i8* %18, align 1, !insn.addr !6394
  %19 = load i32, i32* inttoptr (i32 1895919524 to i32*), align 4, !insn.addr !6395
  %20 = inttoptr i32 %19 to i32*, !insn.addr !6396
  %21 = load i32, i32* %20, align 4, !insn.addr !6396
  %22 = add i32 %21, 4, !insn.addr !6397
  %23 = inttoptr i32 %22 to i32*, !insn.addr !6397
  %24 = load i32, i32* %23, align 4, !insn.addr !6397
  %25 = call i32 @unknown_47007bfb(i32 %24), !insn.addr !6398
  ret i32 %25, !insn.addr !6399

dec_label_pc_100fb4e:                             ; preds = %dec_label_pc_100fb18
  %26 = add i32 %3, %2, !insn.addr !6400
  %27 = inttoptr i32 %3 to i32*, !insn.addr !6400
  store i32 %26, i32* %27, align 4, !insn.addr !6400
  %28 = load i32, i32* %ebx, align 4, !insn.addr !6401
  %29 = add i32 %1, 10, !insn.addr !6402
  %30 = add i32 %29, %2, !insn.addr !6402
  %31 = inttoptr i32 %30 to i32*, !insn.addr !6402
  %32 = load i32, i32* %31, align 4, !insn.addr !6402
  store i32 %32, i32* %ebx, align 4, !insn.addr !6402
  %33 = add i32 %32, -1928557272, !insn.addr !6403
  %34 = inttoptr i32 %33 to i32*, !insn.addr !6403
  %35 = load i32, i32* %34, align 4, !insn.addr !6403
  %36 = add i32 %35, %3, !insn.addr !6403
  %37 = add i32 %2, -117, !insn.addr !6404
  %38 = inttoptr i32 %37 to i8*, !insn.addr !6404
  %39 = load i8, i8* %38, align 1, !insn.addr !6404
  %40 = trunc i32 %36 to i8, !insn.addr !6404
  %41 = add i8 %39, %40, !insn.addr !6404
  store i8 %41, i8* %38, align 1, !insn.addr !6404
  %42 = udiv i32 %32, 512, !insn.addr !6405
  %43 = mul i32 %32, 8388608, !insn.addr !6405
  %44 = or i32 %42, %43, !insn.addr !6405
  %45 = inttoptr i32 %28 to i32*, !insn.addr !6405
  store i32 %44, i32* %45, align 4, !insn.addr !6405
  %46 = trunc i32 %2 to i8, !insn.addr !6406
  %47 = and i8 %46, -13, !insn.addr !6406
  %48 = icmp eq i8 %47, 0, !insn.addr !6406
  %49 = zext i8 %47 to i32, !insn.addr !6406
  %50 = and i32 %2, -256, !insn.addr !6406
  %51 = or i32 %50, %49, !insn.addr !6406
  %52 = inttoptr i32 %5 to i32*, !insn.addr !6407
  store i32 %32, i32* %52, align 4, !insn.addr !6407
  %53 = select i1 %4, i32 -4, i32 4, !insn.addr !6407
  %54 = add i32 %53, %5, !insn.addr !6407
  %55 = add i32 %28, %53, !insn.addr !6407
  %56 = add i32 %36, -1, !insn.addr !6408
  %57 = icmp ne i32 %56, 0, !insn.addr !6408
  %58 = icmp eq i1 %57, %48, !insn.addr !6408
  br i1 %58, label %dec_label_pc_100fb6f, label %dec_label_pc_100fb6c, !insn.addr !6408

dec_label_pc_100fb6c:                             ; preds = %dec_label_pc_100fb4e
  %59 = inttoptr i32 %55 to i8*, !insn.addr !6409
  %60 = inttoptr i32 %54 to i8*, !insn.addr !6409
  call void @__asm_rep_movsb_memcpy(i8* %60, i8* %59, i32 %56), !insn.addr !6409
  ret i32 %51, !insn.addr !6409

dec_label_pc_100fb6f:                             ; preds = %dec_label_pc_100fb4e
  %61 = add i32 %51, -125, !insn.addr !6410
  %62 = inttoptr i32 %61 to i32*, !insn.addr !6410
  %63 = load i32, i32* %62, align 4, !insn.addr !6410
  %64 = or i32 %51, 4, !insn.addr !6411
  %65 = inttoptr i32 %64 to i32*, !insn.addr !6411
  store i32 %55, i32* %65, align 4, !insn.addr !6411
  %66 = call i32 @function_1007bc1(i32 %54), !insn.addr !6412
  %67 = load i32, i32* %ebx, align 4, !insn.addr !6413
  %68 = inttoptr i32 %67 to i32*, !insn.addr !6413
  %69 = load i32, i32* %68, align 4, !insn.addr !6413
  %70 = add i32 %69, 50, !insn.addr !6414
  %71 = inttoptr i32 %70 to i32*, !insn.addr !6414
  store i32 0, i32* %71, align 4, !insn.addr !6414
  %72 = load i8, i8* @global_var_1014fe6, align 1, !insn.addr !6415
  %73 = sext i8 %72 to i32, !insn.addr !6415
  %74 = trunc i32 %63 to i16, !insn.addr !6416
  call void @__asm_out(i16 %74, i8 %72), !insn.addr !6416
  %75 = inttoptr i32 %63 to i32*, !insn.addr !6417
  %76 = load i32, i32* %75, align 4, !insn.addr !6417
  %77 = add nsw i32 %73, -4, !insn.addr !6417
  %78 = inttoptr i32 %77 to i32*, !insn.addr !6417
  store i32 %76, i32* %78, align 4, !insn.addr !6417
  %79 = call i32 @__asm_insd(i16 %74), !insn.addr !6418
  %80 = inttoptr i32 %54 to i32*, !insn.addr !6418
  store i32 %79, i32* %80, align 4, !insn.addr !6418
  %81 = icmp eq i32 %56, 0, !insn.addr !6419
  store i32 %73, i32* %eax.0.reg2mem, !insn.addr !6419
  br i1 %81, label %dec_label_pc_100fba0, label %dec_label_pc_100fb90, !insn.addr !6419

dec_label_pc_100fb90:                             ; preds = %dec_label_pc_100fb6f
  %82 = add i32 %36, 3, !insn.addr !6420
  %83 = inttoptr i32 %82 to i32*, !insn.addr !6420
  store i32 %73, i32* %83, align 4, !insn.addr !6420
  %84 = load i32, i32* %ebx, align 4, !insn.addr !6421
  %85 = inttoptr i32 %84 to i32*, !insn.addr !6421
  %86 = load i32, i32* %85, align 4, !insn.addr !6421
  store i32 %86, i32* %eax.0.reg2mem, !insn.addr !6421
  br label %dec_label_pc_100fba0, !insn.addr !6421

dec_label_pc_100fba0:                             ; preds = %dec_label_pc_100fb90, %dec_label_pc_100fb6f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %87 = add i32 %eax.0.reload, 4, !insn.addr !6422
  %88 = inttoptr i32 %87 to i32*, !insn.addr !6422
  %89 = load i32, i32* %88, align 4, !insn.addr !6422
  %90 = call i8 @__asm_insb(i16 %74), !insn.addr !6423
  %91 = inttoptr i32 %89 to i8*, !insn.addr !6423
  store i8 %90, i8* %91, align 1, !insn.addr !6423
  %92 = call i32 @function_8ca6eed3(), !insn.addr !6424
  ret i32 %92, !insn.addr !6424
}

define i32 @function_100fbb2() local_unnamed_addr {
dec_label_pc_100fbb2:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = inttoptr i32 %1 to i8*, !insn.addr !6425
  %4 = inttoptr i32 %0 to i8*, !insn.addr !6425
  call void @__asm_rep_movsb_memcpy(i8* %4, i8* %3, i32 %2), !insn.addr !6425
  %5 = call i32 @function_193fc40(), !insn.addr !6426
  ret i32 %5, !insn.addr !6426
}

define i32 @function_100fbc3(i32 %arg1) local_unnamed_addr {
dec_label_pc_100fbc3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100fbe8() local_unnamed_addr {
dec_label_pc_100fbe8:
  %0 = call i32 @function_8c94f711(), !insn.addr !6427
  ret i32 %0, !insn.addr !6427
}

define i32 @function_100fc04() local_unnamed_addr {
dec_label_pc_100fc04:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 1, !insn.addr !6428
  %4 = inttoptr i32 %3 to i8*, !insn.addr !6428
  %5 = load i8, i8* %4, align 1, !insn.addr !6428
  %6 = trunc i32 %2 to i8, !insn.addr !6428
  %7 = xor i8 %5, %6, !insn.addr !6428
  store i8 %7, i8* %4, align 1, !insn.addr !6428
  %8 = add i32 %1, 1895800640, !insn.addr !6429
  %9 = inttoptr i32 %8 to i32*, !insn.addr !6429
  %10 = load i32, i32* %9, align 4, !insn.addr !6429
  %11 = add i32 %10, %2, !insn.addr !6429
  store i32 %11, i32* %9, align 4, !insn.addr !6429
  %12 = call i32 @unknown_8d00fb93(), !insn.addr !6430
  %13 = add i32 %2, -2068951743, !insn.addr !6431
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6431
  %15 = load i32, i32* %14, align 4, !insn.addr !6431
  %16 = or i32 %15, %2, !insn.addr !6431
  %17 = inttoptr i32 %16 to i32*, !insn.addr !6432
  %18 = load i32, i32* %17, align 4, !insn.addr !6432
  %19 = add i32 %18, %12, !insn.addr !6432
  store i32 %19, i32* %17, align 4, !insn.addr !6432
  ret i32 %12, !insn.addr !6433
}

define i32 @function_100fc23(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100fc23:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 810439424, !insn.addr !6434
  %3 = inttoptr i32 %2 to i32*, !insn.addr !6434
  %4 = load i32, i32* %3, align 4, !insn.addr !6434
  %5 = call i32 @unknown_1000b3f(), !insn.addr !6435
  %6 = sub i32 0, %4, !insn.addr !6434
  %7 = icmp eq i32 %1, %6, !insn.addr !6436
  br i1 %7, label %dec_label_pc_100fc33, label %dec_label_pc_100fc30, !insn.addr !6436

dec_label_pc_100fc30:                             ; preds = %dec_label_pc_100fc23
  %8 = inttoptr i32 %5 to i32*, !insn.addr !6437
  %9 = load i32, i32* %8, align 4, !insn.addr !6437
  ret i32 %9, !insn.addr !6437

dec_label_pc_100fc33:                             ; preds = %dec_label_pc_100fc23
  %10 = call i32 @__asm_int3(), !insn.addr !6438
  %11 = call i32 @unknown_2700bc54(), !insn.addr !6439
  ret i32 %11, !insn.addr !6440
}

define i32 @function_100fc62(i16 %arg1) local_unnamed_addr {
dec_label_pc_100fc62:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %2, -1142360971, !insn.addr !6441
  %5 = inttoptr i32 %4 to i32*, !insn.addr !6441
  %6 = load i32, i32* %5, align 4, !insn.addr !6441
  %7 = add i32 %6, -1, !insn.addr !6441
  store i32 %7, i32* %5, align 4, !insn.addr !6441
  %8 = add i32 %2, 822080581, !insn.addr !6442
  %9 = inttoptr i32 %8 to i32*, !insn.addr !6442
  %10 = load i32, i32* %9, align 4, !insn.addr !6442
  %11 = add i32 %10, -1, !insn.addr !6442
  store i32 %11, i32* %9, align 4, !insn.addr !6442
  %12 = call i32 @unknown_3ca37b87(), !insn.addr !6443
  %13 = call i32 @__asm_hlt(), !insn.addr !6444
  br i1 %3, label %dec_label_pc_100fd06, label %dec_label_pc_100fc87, !insn.addr !6445

dec_label_pc_100fc87:                             ; preds = %dec_label_pc_100fc62
  %14 = add i32 %0, 37, !insn.addr !6446
  %15 = inttoptr i32 %14 to i32*, !insn.addr !6446
  %16 = load i32, i32* %15, align 4, !insn.addr !6446
  %17 = add i32 %0, -12, !insn.addr !6447
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6447
  %19 = load i32, i32* %18, align 4, !insn.addr !6447
  %20 = add i32 %16, 1166738510, !insn.addr !6448
  %21 = inttoptr i32 %20 to i8*, !insn.addr !6448
  %22 = load i8, i8* %21, align 1, !insn.addr !6448
  %23 = trunc i32 %19 to i8, !insn.addr !6448
  %24 = xor i8 %22, %23, !insn.addr !6448
  store i8 %24, i8* %21, align 1, !insn.addr !6448
  %25 = call i32 @function_d953527(), !insn.addr !6449
  ret i32 %25, !insn.addr !6449

dec_label_pc_100fd06:                             ; preds = %dec_label_pc_100fc62
  %26 = add i32 %1, -402362113, !insn.addr !6450
  %27 = inttoptr i32 %26 to i32*, !insn.addr !6450
  %28 = load i32, i32* %27, align 4, !insn.addr !6450
  ret i32 %28, !insn.addr !6449
}

define i32 @function_100fc9c() local_unnamed_addr {
dec_label_pc_100fc9c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = mul i32 %4, 2, !insn.addr !6451
  %7 = add i32 %3, 48873775, !insn.addr !6452
  %8 = inttoptr i32 %7 to i8*, !insn.addr !6452
  %9 = load i8, i8* %8, align 1, !insn.addr !6452
  %10 = trunc i32 %6 to i8, !insn.addr !6452
  %11 = add i8 %9, %10, !insn.addr !6452
  store i8 %11, i8* %8, align 1, !insn.addr !6452
  %12 = inttoptr i32 %1 to i8*, !insn.addr !6453
  %13 = inttoptr i32 %0 to i8*, !insn.addr !6453
  call void @__asm_rep_movsd_memcpy(i8* %13, i8* %12, i32 %6), !insn.addr !6453
  %14 = select i1 %5, i32 -4, i32 4, !insn.addr !6453
  %15 = mul i32 %14, %6, !insn.addr !6453
  %16 = add i32 %15, %0, !insn.addr !6453
  %17 = and i32 %4, 3, !insn.addr !6454
  %18 = inttoptr i32 %16 to i8*, !insn.addr !6455
  call void @__asm_rep_movsb_memcpy(i8* %18, i8* %18, i32 %17), !insn.addr !6455
  %19 = add i32 %2, -12, !insn.addr !6456
  %20 = inttoptr i32 %19 to i32*, !insn.addr !6456
  %21 = load i32, i32* %20, align 4, !insn.addr !6456
  %22 = and i32 %21, %4, !insn.addr !6456
  %23 = add i32 %22, 4, !insn.addr !6457
  %24 = inttoptr i32 %23 to i32*, !insn.addr !6457
  %25 = load i32, i32* %24, align 4, !insn.addr !6457
  %26 = call i32 @function_1007bc1(i32 %25), !insn.addr !6458
  %27 = add i32 %3, 1, !insn.addr !6459
  ret i32 %27, !insn.addr !6460
}

define i32 @function_100fcec() local_unnamed_addr {
dec_label_pc_100fcec:
  %0 = call i32 @function_8ca61d96(), !insn.addr !6461
  ret i32 %0, !insn.addr !6461
}

define i32 @function_100fcfe() local_unnamed_addr {
dec_label_pc_100fcfe:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %1 to i8, !insn.addr !6462
  %4 = and i8 %3, 31, !insn.addr !6462
  %5 = icmp eq i8 %4, 0, !insn.addr !6462
  br i1 %5, label %11, label %6, !insn.addr !6462

; <label>:6:                                      ; preds = %dec_label_pc_100fcfe
  %7 = add i32 %0, 535363583, !insn.addr !6462
  %8 = inttoptr i32 %7 to i8*, !insn.addr !6462
  %9 = load i8, i8* %8, align 1, !insn.addr !6462
  %10 = ashr i8 %9, %4, !insn.addr !6462
  store i8 %10, i8* %8, align 1, !insn.addr !6462
  br label %11, !insn.addr !6462

; <label>:11:                                     ; preds = %dec_label_pc_100fcfe, %6
  ret i32 %2, !insn.addr !6463
}

define i32 @function_100fd15() local_unnamed_addr {
dec_label_pc_100fd15:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6464
}

define i32 @function_100fd2e(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_100fd2e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -1, !insn.addr !6465
  %3 = icmp eq i32 %2, 0, !insn.addr !6465
  br i1 %3, label %dec_label_pc_100fd30, label %dec_label_pc_100fdae, !insn.addr !6465

dec_label_pc_100fd30:                             ; preds = %dec_label_pc_100fd2e
  ret i32 %1, !insn.addr !6466

dec_label_pc_100fdae:                             ; preds = %dec_label_pc_100fd2e
  %4 = mul i32 %2, 4, !insn.addr !6467
  %5 = add i32 %4, -721420276, !insn.addr !6467
  ret i32 %5, !insn.addr !6468
}

define i32 @function_100fdbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_100fdbc:
  %storemerge.reg2mem = alloca i32, !insn.addr !6469
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %4 = call i32 @unknown_bf7bd1(i32 %2), !insn.addr !6470
  %5 = add i32 %1, 2113896018, !insn.addr !6471
  %6 = inttoptr i32 %5 to i8*, !insn.addr !6471
  %7 = load i8, i8* %6, align 1, !insn.addr !6471
  %8 = add i8 %7, 92, !insn.addr !6471
  %9 = and i8 %7, 12, !insn.addr !6471
  %10 = icmp ne i8 %9, 0, !insn.addr !6471
  %11 = icmp ugt i8 %7, -93, !insn.addr !6471
  store i8 %8, i8* %6, align 1, !insn.addr !6471
  %12 = trunc i32 %4 to i8, !insn.addr !6472
  %13 = and i8 %12, 14, !insn.addr !6472
  %14 = icmp ugt i8 %13, 9, !insn.addr !6472
  %15 = or i1 %14, %10, !insn.addr !6472
  %16 = icmp ugt i8 %12, -103
  %17 = or i1 %16, %11
  br i1 %15, label %18, label %23, !insn.addr !6472

; <label>:18:                                     ; preds = %dec_label_pc_100fdbc
  %.v = select i1 %17, i32 154, i32 250
  %19 = add i32 %.v, %4, !insn.addr !6472
  %20 = and i32 %19, 255, !insn.addr !6472
  %21 = and i32 %4, -256, !insn.addr !6472
  %22 = or i32 %20, %21, !insn.addr !6472
  store i32 %22, i32* %storemerge.reg2mem, !insn.addr !6472
  br label %29, !insn.addr !6472

; <label>:23:                                     ; preds = %dec_label_pc_100fdbc
  %24 = add i32 %4, 160, !insn.addr !6472
  %25 = select i1 %17, i32 %24, i32 %4, !insn.addr !6472
  %26 = and i32 %25, 255, !insn.addr !6472
  %27 = and i32 %4, -256, !insn.addr !6472
  %28 = or i32 %26, %27, !insn.addr !6472
  store i32 %28, i32* %storemerge.reg2mem, !insn.addr !6472
  br label %29, !insn.addr !6472

; <label>:29:                                     ; preds = %18, %23
  %30 = icmp slt i32* %stack_var_-4, null, !insn.addr !6473
  br i1 %30, label %dec_label_pc_100fe09, label %dec_label_pc_100fdd9, !insn.addr !6474

dec_label_pc_100fdd9:                             ; preds = %29
  %31 = call i32 @unknown_e87b6f(), !insn.addr !6475
  %32 = call i8 @__asm_in.1(i8 48), !insn.addr !6476
  ret i32 %3, !insn.addr !6477

dec_label_pc_100fe09:                             ; preds = %29
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %33 = inttoptr i32 %storemerge.reload to i32*, !insn.addr !6478
  %34 = load i32, i32* %33, align 4, !insn.addr !6478
  %35 = mul i32 %34, 512, !insn.addr !6478
  store i32 %35, i32* %33, align 4, !insn.addr !6478
  %36 = inttoptr i32 %0 to i32*, !insn.addr !6479
  %37 = add i32 %0, 4, !insn.addr !6479
  %38 = add i32 %1, 4, !insn.addr !6479
  %39 = and i32 %storemerge.reload, 3, !insn.addr !6480
  %40 = inttoptr i32 %38 to i8*, !insn.addr !6481
  %41 = inttoptr i32 %37 to i8*, !insn.addr !6481
  call void @__asm_rep_movsb_memcpy(i8* %41, i8* %40, i32 %39), !insn.addr !6481
  %42 = add i32 %arg1, -1946157187, !insn.addr !6482
  %43 = inttoptr i32 %42 to i16*, !insn.addr !6482
  %44 = add i32 %arg1, 4, !insn.addr !6483
  %45 = inttoptr i32 %44 to i32*, !insn.addr !6483
  store i32 0, i32* %45, align 4, !insn.addr !6483
  ret i32 %arg1, !insn.addr !6484
}

define i32 @function_100fe62() local_unnamed_addr {
dec_label_pc_100fe62:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6485
}

define i32 @function_100fe87() local_unnamed_addr {
dec_label_pc_100fe87:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = trunc i32 %2 to i8
  %4 = mul i8 %3, 2, !insn.addr !6486
  %5 = inttoptr i32 %2 to i8*, !insn.addr !6486
  store i8 %4, i8* %5, align 1, !insn.addr !6486
  %6 = add i32 %0, -1044280328, !insn.addr !6487
  %7 = inttoptr i32 %6 to i8*, !insn.addr !6487
  %8 = load i8, i8* %7, align 1, !insn.addr !6487
  %9 = trunc i32 %1 to i8, !insn.addr !6487
  %10 = add i8 %8, %9, !insn.addr !6487
  store i8 %10, i8* %7, align 1, !insn.addr !6487
  %11 = call i32 @function_8c3ef280(), !insn.addr !6488
  ret i32 %11, !insn.addr !6488
}

define i32 @function_100fea6() local_unnamed_addr {
dec_label_pc_100fea6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_100fee4() local_unnamed_addr {
dec_label_pc_100fee4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = icmp ult i32 %2, %0, !insn.addr !6489
  %4 = icmp eq i1 %3, false, !insn.addr !6490
  br i1 %4, label %dec_label_pc_100fef1, label %dec_label_pc_100feeb, !insn.addr !6490

dec_label_pc_100feeb:                             ; preds = %dec_label_pc_100fee4
  %5 = add i32 %2, 1, !insn.addr !6491
  %6 = add i32 %1, 60, !insn.addr !6492
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6492
  store i32 %5, i32* %7, align 4, !insn.addr !6492
  ret i32 %5, !insn.addr !6493

dec_label_pc_100fef1:                             ; preds = %dec_label_pc_100fee4
  ret i32 %2, !insn.addr !6493
}

define i32 @function_100fefb() local_unnamed_addr {
dec_label_pc_100fefb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = and i32 %0, 14
  %3 = icmp ugt i32 %2, 9, !insn.addr !6494
  %4 = or i1 %1, %3, !insn.addr !6494
  %5 = add i32 %0, 10, !insn.addr !6494
  %6 = select i1 %4, i32 %5, i32 %0, !insn.addr !6494
  %7 = sext i1 %4 to i32, !insn.addr !6494
  %8 = and i32 %6, 15, !insn.addr !6494
  %9 = and i32 %0, -65536, !insn.addr !6494
  %10 = or i32 %8, %9, !insn.addr !6494
  %11 = mul i32 %7, 256
  %12 = add i32 %11, %0
  %13 = and i32 %12, 65280, !insn.addr !6494
  %14 = or i32 %10, %13, !insn.addr !6494
  ret i32 %14, !insn.addr !6494
}

define i32 @function_100ff0b() local_unnamed_addr {
dec_label_pc_100ff0b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_in(i32 168), !insn.addr !6495
  %3 = udiv i32 %1, 256, !insn.addr !6496
  %4 = trunc i32 %3 to i8, !insn.addr !6496
  %5 = sub i8 0, %4, !insn.addr !6496
  %6 = icmp eq i8 %4, %5, !insn.addr !6496
  %7 = icmp eq i1 %6, false, !insn.addr !6497
  br i1 %7, label %dec_label_pc_100ff81, label %dec_label_pc_100ff17, !insn.addr !6497

dec_label_pc_100ff17:                             ; preds = %dec_label_pc_100ff0b
  %8 = add i32 %0, -8, !insn.addr !6498
  %9 = call i32 @unknown_290254(i32 %8), !insn.addr !6499
  %10 = add i32 %0, -4, !insn.addr !6500
  %11 = inttoptr i32 %10 to i32*, !insn.addr !6500
  %12 = load i32, i32* %11, align 4, !insn.addr !6500
  %13 = inttoptr i32 %12 to i32*, !insn.addr !6501
  %14 = load i32, i32* %13, align 4, !insn.addr !6501
  %15 = call i32 @unknown_93011a18(i32 %14), !insn.addr !6502
  %16 = icmp eq i32 %15, 0, !insn.addr !6503
  %17 = icmp eq i1 %16, false, !insn.addr !6504
  br i1 %17, label %dec_label_pc_100ff62, label %dec_label_pc_100ff2e, !insn.addr !6504

dec_label_pc_100ff2e:                             ; preds = %dec_label_pc_100ff17
  %18 = load i32, i32* %11, align 4, !insn.addr !6505
  %19 = add i32 %18, 4, !insn.addr !6506
  %20 = inttoptr i32 %19 to i32*, !insn.addr !6506
  %21 = load i32, i32* %20, align 4, !insn.addr !6506
  %22 = add i32 %21, -33, !insn.addr !6507
  %23 = inttoptr i32 %22 to i32*, !insn.addr !6507
  %24 = load i32, i32* %23, align 4, !insn.addr !6507
  ret i32 %24, !insn.addr !6508

dec_label_pc_100ff62:                             ; preds = %dec_label_pc_100ff17
  %25 = add i32 %0, -16, !insn.addr !6509
  %26 = inttoptr i32 %25 to i32*, !insn.addr !6509
  %27 = load i32, i32* %26, align 4, !insn.addr !6509
  %28 = call i32 @unknown_e8007bc1(i32 %27), !insn.addr !6510
  %29 = call i32 @__asm_fnsave(), !insn.addr !6511
  %30 = sext i32 %29 to i864, !insn.addr !6511
  %31 = add i32 %0, -12, !insn.addr !6511
  %32 = inttoptr i32 %31 to i864*, !insn.addr !6511
  store i864 %30, i864* %32, align 4, !insn.addr !6511
  store i32 0, i32* %26, align 4, !insn.addr !6512
  %33 = call i32 @function_1007bd1(), !insn.addr !6513
  ret i32 %33, !insn.addr !6514

dec_label_pc_100ff81:                             ; preds = %dec_label_pc_100ff0b
  %34 = and i32 %2, -256, !insn.addr !6515
  ret i32 %34, !insn.addr !6514
}

define i32 @function_100ff7e() local_unnamed_addr {
dec_label_pc_100ff7e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6516
}

define i32 @function_100ffea() local_unnamed_addr {
dec_label_pc_100ffea:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6517
}

define i32 @function_100fffb(i32 %arg1) local_unnamed_addr {
dec_label_pc_100fffb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, 71338996, !insn.addr !6518
  %5 = inttoptr i32 %4 to i8*, !insn.addr !6518
  %6 = load i8, i8* %5, align 1, !insn.addr !6518
  %7 = trunc i32 %2 to i8, !insn.addr !6518
  %8 = add i8 %6, %7, !insn.addr !6518
  store i8 %8, i8* %5, align 1, !insn.addr !6518
  %9 = inttoptr i32 %3 to i32*, !insn.addr !6519
  %10 = call i32 @unknown_c4007baf(), !insn.addr !6520
  %11 = add i32 %0, -96, !insn.addr !6521
  %12 = inttoptr i32 %11 to i32*, !insn.addr !6521
  store i32 0, i32* %12, align 4, !insn.addr !6521
  %13 = call i32 @function_1007bc1(i32 %2), !insn.addr !6522
  %14 = add i32 %0, -4, !insn.addr !6523
  %15 = inttoptr i32 %14 to i32*, !insn.addr !6523
  %16 = load i32, i32* %15, align 4, !insn.addr !6523
  %17 = inttoptr i32 %16 to i32*, !insn.addr !6524
  %18 = load i32, i32* %17, align 4, !insn.addr !6524
  %19 = and i32 %18, -82, !insn.addr !6524
  store i32 %19, i32* %17, align 4, !insn.addr !6524
  %20 = load i8*, i8** @global_var_1014f88, align 4, !insn.addr !6525
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4, !insn.addr !6526
  %23 = add i32 %0, 75, !insn.addr !6527
  %24 = inttoptr i32 %23 to i32*, !insn.addr !6527
  %25 = load i32, i32* %24, align 4, !insn.addr !6527
  %26 = inttoptr i32 %25 to i32*, !insn.addr !6528
  store i32 %22, i32* %26, align 4, !insn.addr !6528
  %27 = load i8*, i8** @global_var_1014f88, align 4, !insn.addr !6529
  %28 = ptrtoint i8* %27 to i32, !insn.addr !6529
  %29 = add i32 %28, 19, !insn.addr !6530
  %30 = and i32 %29, 56, !insn.addr !6530
  %31 = and i32 %28, 710577408, !insn.addr !6530
  %32 = or i32 %30, %31, !insn.addr !6530
  ret i32 %32, !insn.addr !6531
}

define i32 @function_101004b() local_unnamed_addr {
dec_label_pc_101004b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = trunc i32 %3 to i16, !insn.addr !6532
  %7 = call i32 @__asm_insd(i16 %6), !insn.addr !6532
  %8 = inttoptr i32 %0 to i32*, !insn.addr !6532
  store i32 %7, i32* %8, align 4, !insn.addr !6532
  %9 = add i32 %5, -117, !insn.addr !6533
  %10 = inttoptr i32 %9 to i8*, !insn.addr !6533
  %11 = load i8, i8* %10, align 1, !insn.addr !6533
  %12 = trunc i32 %2 to i8, !insn.addr !6533
  %13 = add i8 %11, %12, !insn.addr !6533
  store i8 %13, i8* %10, align 1, !insn.addr !6533
  %14 = mul i32 %4, 512, !insn.addr !6534
  %15 = udiv i32 %4, 8388608, !insn.addr !6534
  %16 = or i32 %15, %14, !insn.addr !6534
  %17 = add i32 %2, -1527577631, !insn.addr !6535
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6535
  %19 = load i32, i32* %18, align 4, !insn.addr !6535
  %20 = add i32 %19, 4, !insn.addr !6536
  %21 = inttoptr i32 %20 to i32*, !insn.addr !6536
  %22 = load i32, i32* %21, align 4, !insn.addr !6536
  %23 = call i32 @unknown_b8fc7bc1(i32 %22, i32 %5), !insn.addr !6537
  %24 = add i32 %1, -4, !insn.addr !6538
  %25 = inttoptr i32 %24 to i32*, !insn.addr !6538
  %26 = load i32, i32* %25, align 4, !insn.addr !6538
  %27 = add i32 %26, 4, !insn.addr !6539
  %28 = inttoptr i32 %27 to i32*, !insn.addr !6539
  store i32 0, i32* %28, align 4, !insn.addr !6539
  %29 = load i32, i32* inttoptr (i32 -62026753 to i32*), align 4, !insn.addr !6540
  %30 = add i32 %16, 4, !insn.addr !6541
  %31 = inttoptr i32 %30 to i32*, !insn.addr !6541
  store i32 %29, i32* %31, align 4, !insn.addr !6541
  %32 = trunc i32 %15 to i8, !insn.addr !6542
  store i8 %32, i8* inttoptr (i32 1895760851 to i8*), align 1, !insn.addr !6542
  %33 = add i32 %2, 59442289, !insn.addr !6543
  %34 = inttoptr i32 %33 to i32*, !insn.addr !6543
  %35 = load i32, i32* %34, align 4, !insn.addr !6543
  %36 = add i32 %35, %16, !insn.addr !6543
  store i32 %36, i32* %34, align 4, !insn.addr !6543
  %37 = call i32 @function_8de27876(), !insn.addr !6544
  ret i32 %37, !insn.addr !6544
}

define i32 @function_101009f() local_unnamed_addr {
dec_label_pc_101009f:
  %0 = call i32 @function_8ca6f40c(), !insn.addr !6545
  ret i32 %0, !insn.addr !6545
}

define i32 @function_10100db() local_unnamed_addr {
dec_label_pc_10100db:
  %eax.0.reg2mem = alloca i32, !insn.addr !6546
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = inttoptr i32 %2 to i32*, !insn.addr !6546
  store i32 0, i32* %9, align 4, !insn.addr !6546
  %10 = call i32 @function_1007c26(), !insn.addr !6547
  store i32 %10, i32* %9, align 4, !insn.addr !6548
  %11 = inttoptr i32 %10 to i32*, !insn.addr !6549
  %12 = load i32, i32* %11, align 4, !insn.addr !6549
  %13 = call i32 @function_1007bc1(i32 %12), !insn.addr !6550
  %14 = add i32 %4, %2, !insn.addr !6551
  %15 = xor i32 %14, %4, !insn.addr !6551
  %16 = xor i32 %14, %2, !insn.addr !6551
  %17 = and i32 %15, %16, !insn.addr !6551
  %18 = icmp slt i32 %17, 0, !insn.addr !6551
  %19 = icmp slt i32 %14, 0, !insn.addr !6551
  %20 = inttoptr i32 %4 to i32*, !insn.addr !6551
  store i32 %14, i32* %20, align 4, !insn.addr !6551
  %21 = icmp eq i1 %19, %18, !insn.addr !6552
  br i1 %21, label %dec_label_pc_101016a, label %dec_label_pc_10100fa, !insn.addr !6552

dec_label_pc_10100fa:                             ; preds = %dec_label_pc_10100db
  %22 = add i32 %0, -1, !insn.addr !6553
  %23 = add i32 %4, 1669428737, !insn.addr !6554
  %24 = inttoptr i32 %23 to i32*, !insn.addr !6554
  %25 = load i32, i32* %24, align 4, !insn.addr !6554
  %26 = or i32 %25, %4, !insn.addr !6554
  %27 = inttoptr i32 %26 to i32*, !insn.addr !6555
  %28 = load i32, i32* %27, align 4, !insn.addr !6555
  %29 = add i32 %28, -1957363846, !insn.addr !6555
  store i32 %29, i32* %27, align 4, !insn.addr !6555
  %30 = load i32, i32* inttoptr (i32 -1957363846 to i32*), align 4, !insn.addr !6556
  %31 = add i32 %2, -159675080, !insn.addr !6557
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6557
  %33 = load i32, i32* %32, align 4, !insn.addr !6557
  %34 = add i32 %33, %26, !insn.addr !6557
  %35 = load i8, i8* inttoptr (i32 -1957363963 to i8*), align 1, !insn.addr !6558
  %36 = add i8 %35, 5, !insn.addr !6558
  store i8 %36, i8* inttoptr (i32 -1957363963 to i8*), align 1, !insn.addr !6558
  %37 = udiv i32 %34, 4, !insn.addr !6559
  %38 = icmp ult i32 %34, 4
  %39 = and i32 %34, 255, !insn.addr !6560
  %40 = add i32 %39, %2, !insn.addr !6560
  %41 = inttoptr i32 %40 to i8*, !insn.addr !6560
  %42 = load i8, i8* %41, align 1, !insn.addr !6560
  %43 = inttoptr i32 %30 to i32*, !insn.addr !6561
  %44 = load i32, i32* %43, align 4, !insn.addr !6561
  %45 = inttoptr i32 %22 to i32*, !insn.addr !6561
  store i32 %44, i32* %45, align 4, !insn.addr !6561
  %46 = add nsw i32 %37, -1, !insn.addr !6562
  %47 = icmp ne i32 %46, 0, !insn.addr !6562
  %48 = icmp eq i1 %47, %38, !insn.addr !6562
  br i1 %48, label %dec_label_pc_1010128, label %dec_label_pc_1010125, !insn.addr !6562

dec_label_pc_1010125:                             ; preds = %dec_label_pc_10100fa
  %49 = zext i8 %42 to i32, !insn.addr !6560
  %50 = and i32 %34, -256, !insn.addr !6560
  %51 = or i32 %50, %49, !insn.addr !6560
  %52 = udiv i32 %51, 8, !insn.addr !6563
  %53 = mul i32 %49, 536870912, !insn.addr !6563
  %54 = or i32 %52, %53, !insn.addr !6563
  ret i32 %54, !insn.addr !6562

dec_label_pc_1010128:                             ; preds = %dec_label_pc_10100fa
  %55 = select i1 %6, i32 -4, i32 4, !insn.addr !6561
  %56 = add i32 %55, %22, !insn.addr !6561
  %57 = mul i32 %56, 2, !insn.addr !6564
  %58 = xor i32 %57, %56, !insn.addr !6564
  %59 = icmp slt i32 %58, 0, !insn.addr !6564
  br i1 %59, label %dec_label_pc_101018b, label %dec_label_pc_101012c, !insn.addr !6565

dec_label_pc_101012c:                             ; preds = %dec_label_pc_1010128
  %60 = and i32 %3, -65281, !insn.addr !6566
  %61 = or i32 %60, 54016, !insn.addr !6566
  %62 = add i32 %30, %55, !insn.addr !6561
  %63 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !6567
  %64 = add nsw i32 %61, -125, !insn.addr !6568
  %65 = inttoptr i32 %64 to i32*, !insn.addr !6568
  %66 = load i32, i32* %65, align 4, !insn.addr !6568
  store i32 %63, i32* inttoptr (i32 -1957363850 to i32*), align 4, !insn.addr !6569
  store i32 %46, i32* inttoptr (i32 -1957363854 to i32*), align 4, !insn.addr !6569
  store i32 %66, i32* inttoptr (i32 -1957363858 to i32*), align 4, !insn.addr !6569
  store i32 -1957363846, i32* inttoptr (i32 -1957363866 to i32*), align 4, !insn.addr !6569
  store i32 %62, i32* inttoptr (i32 -1957363874 to i32*), align 4, !insn.addr !6569
  store i32 %57, i32* inttoptr (i32 -1957363878 to i32*), align 4, !insn.addr !6569
  %67 = load i32, i32* inttoptr (i32 16864680 to i32*), align 8, !insn.addr !6570
  %68 = add i32 %67, 4, !insn.addr !6571
  %69 = inttoptr i32 %68 to i32*, !insn.addr !6571
  %70 = load i32, i32* %69, align 4, !insn.addr !6571
  %71 = sub i32 %70, %67, !insn.addr !6571
  %72 = trunc i32 %71 to i8, !insn.addr !6571
  %73 = call i8 @llvm.ctpop.i8(i8 %72), !range !258, !insn.addr !6571
  %74 = and i8 %73, 1, !insn.addr !6571
  %75 = icmp eq i8 %74, 0, !insn.addr !6571
  store i32 %71, i32* %69, align 4, !insn.addr !6571
  %76 = call i32 @__asm_int3(), !insn.addr !6572
  %77 = add i32 %2, 4, !insn.addr !6573
  %78 = inttoptr i32 %77 to i32*, !insn.addr !6573
  store i32 %76, i32* %78, align 4, !insn.addr !6573
  %79 = load i32, i32* inttoptr (i32 18567047 to i32*), align 4, !insn.addr !6574
  br i1 %75, label %dec_label_pc_101015c, label %dec_label_pc_1010159, !insn.addr !6575

dec_label_pc_1010159:                             ; preds = %dec_label_pc_101012c
  ret i32 %79, !insn.addr !6575

dec_label_pc_101015c:                             ; preds = %dec_label_pc_101012c
  %80 = add i32 %79, 4, !insn.addr !6576
  %81 = inttoptr i32 %80 to i32*, !insn.addr !6576
  %82 = load i32, i32* %81, align 4, !insn.addr !6576
  %83 = add i32 %82, 4, !insn.addr !6577
  %84 = inttoptr i32 %83 to i32*, !insn.addr !6577
  %85 = load i32, i32* %84, align 4, !insn.addr !6577
  %86 = mul i32 %85, 4, !insn.addr !6578
  %87 = add i32 %86, 1728053260, !insn.addr !6578
  %88 = udiv i32 %87, 2048, !insn.addr !6579
  %89 = inttoptr i32 %82 to i8*, !insn.addr !6580
  %90 = inttoptr i32 %57 to i8*, !insn.addr !6580
  call void @__asm_rep_movsd_memcpy(i8* %90, i8* %89, i32 %88), !insn.addr !6580
  store i32 %87, i32* %eax.0.reg2mem, !insn.addr !6580
  br label %dec_label_pc_101016a, !insn.addr !6580

dec_label_pc_101016a:                             ; preds = %dec_label_pc_101015c, %dec_label_pc_10100db
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %91 = and i32 %eax.0.reload, 3, !insn.addr !6581
  %92 = or i32 %91, -1343740420, !insn.addr !6582
  %93 = inttoptr i32 %92 to i32*, !insn.addr !6582
  %94 = load i32, i32* %93, align 4, !insn.addr !6582
  %95 = or i32 %94, %eax.0.reload, !insn.addr !6582
  %96 = icmp eq i32 %95, 0, !insn.addr !6582
  %97 = icmp slt i32 %95, 0, !insn.addr !6582
  %98 = trunc i32 %95 to i8, !insn.addr !6582
  %99 = call i8 @llvm.ctpop.i8(i8 %98), !range !258, !insn.addr !6582
  %100 = and i8 %99, 1, !insn.addr !6582
  %101 = icmp eq i8 %100, 0, !insn.addr !6582
  %102 = zext i1 %101 to i32, !insn.addr !6583
  %103 = mul i32 %102, 4, !insn.addr !6583
  %104 = zext i1 %96 to i32, !insn.addr !6583
  %105 = mul i32 %104, 64, !insn.addr !6583
  %106 = zext i1 %97 to i32, !insn.addr !6583
  %107 = mul i32 %106, 128, !insn.addr !6583
  %108 = zext i1 %8 to i32, !insn.addr !6583
  %109 = mul i32 %108, 256, !insn.addr !6583
  %110 = zext i1 %7 to i32, !insn.addr !6583
  %111 = mul i32 %110, 512, !insn.addr !6583
  %112 = zext i1 %6 to i32, !insn.addr !6583
  %113 = mul i32 %112, 1024, !insn.addr !6583
  %114 = zext i1 %5 to i32, !insn.addr !6583
  %115 = mul i32 %114, 16384, !insn.addr !6583
  %116 = or i32 %115, %113, !insn.addr !6583
  %117 = or i32 %116, %111, !insn.addr !6583
  %118 = or i32 %117, %109, !insn.addr !6583
  %119 = or i32 %118, %105, !insn.addr !6583
  %120 = or i32 %119, %107, !insn.addr !6583
  %121 = or i32 %120, %103, !insn.addr !6583
  %122 = or i32 %121, 2, !insn.addr !6583
  store i32 %122, i32* inttoptr (i32 -1471141893 to i32*), align 4, !insn.addr !6583
  %123 = call i32 @function_1007bd1(), !insn.addr !6584
  %124 = add i32 %1, -4, !insn.addr !6585
  %125 = inttoptr i32 %124 to i32*, !insn.addr !6585
  %126 = load i32, i32* %125, align 4, !insn.addr !6585
  %127 = and i32 %126, -22, !insn.addr !6585
  store i32 %127, i32* %125, align 4, !insn.addr !6585
  %128 = call i32 @function_101028c(), !insn.addr !6586
  ret i32 %128, !insn.addr !6586

dec_label_pc_101018b:                             ; preds = %dec_label_pc_1010128
  %129 = add i32 %1, -4, !insn.addr !6587
  %130 = inttoptr i32 %129 to i32*, !insn.addr !6587
  %131 = load i32, i32* %130, align 4, !insn.addr !6587
  store i32 %131, i32* inttoptr (i32 -1957363850 to i32*), align 4, !insn.addr !6587
  %132 = call i32 @unknown_87007b9c(), !insn.addr !6588
  store i32 0, i32* %130, align 4, !insn.addr !6589
  %133 = call i32 @unknown_507c26(), !insn.addr !6590
  %134 = add i32 %1, -128, !insn.addr !6591
  %135 = inttoptr i32 %134 to i32*, !insn.addr !6591
  store i32 %133, i32* %135, align 4, !insn.addr !6591
  %136 = load i32, i32* %130, align 4, !insn.addr !6592
  ret i32 %136, !insn.addr !6592
}

define i32 @function_10101d3() local_unnamed_addr {
dec_label_pc_10101d3:
  %0 = call i32 @function_8ca6f4da(), !insn.addr !6593
  ret i32 %0, !insn.addr !6593
}

define i32 @function_10101f8() local_unnamed_addr {
dec_label_pc_10101f8:
  %eax.0.reg2mem = alloca i32, !insn.addr !6594
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  br i1 %3, label %4, label %dec_label_pc_10101fa, !insn.addr !6594

; <label>:4:                                      ; preds = %dec_label_pc_10101f8
  %5 = call i32 @function_10101f8(), !insn.addr !6594
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !6594
  br label %dec_label_pc_10101fa, !insn.addr !6594

dec_label_pc_10101fa:                             ; preds = %4, %dec_label_pc_10101f8
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %6 = add i32 %0, 1099562061, !insn.addr !6595
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6595
  %8 = load i32, i32* %7, align 4, !insn.addr !6595
  %9 = add i32 %8, -1, !insn.addr !6595
  store i32 %9, i32* %7, align 4, !insn.addr !6595
  %10 = trunc i32 %eax.0.reload to i8, !insn.addr !6596
  %11 = icmp ugt i8 %10, 116, !insn.addr !6596
  %12 = add i8 %10, -117, !insn.addr !6597
  %.neg = select i1 %11, i8 116, i8 117, !insn.addr !6597
  %13 = add i8 %12, %.neg, !insn.addr !6597
  %14 = icmp slt i8 %13, 0, !insn.addr !6597
  br i1 %14, label %dec_label_pc_101020c, label %dec_label_pc_1010208, !insn.addr !6598

dec_label_pc_1010208:                             ; preds = %dec_label_pc_10101fa
  %15 = and i32 %eax.0.reload, -256, !insn.addr !6596
  %16 = zext i8 %13 to i32, !insn.addr !6597
  %17 = or i32 %15, %16, !insn.addr !6597
  ret i32 %17, !insn.addr !6599

dec_label_pc_101020c:                             ; preds = %dec_label_pc_10101fa
  %18 = sdiv i32 %eax.0.reload, 2, !insn.addr !6600
  %19 = or i32 %18, 255, !insn.addr !6601
  %20 = inttoptr i32 %19 to i8*, !insn.addr !6602
  %21 = load i8, i8* %20, align 1, !insn.addr !6602
  %22 = add i8 %21, -1, !insn.addr !6602
  store i8 %22, i8* %20, align 1, !insn.addr !6602
  %23 = trunc i32 %1 to i16, !insn.addr !6603
  call void @__asm_out.2(i16 %23, i32 %2), !insn.addr !6603
  %24 = call i32 @function_8ca6f522(), !insn.addr !6604
  ret i32 %24, !insn.addr !6604
}

define i32 @function_101023b() local_unnamed_addr {
dec_label_pc_101023b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %4 = call i32 @function_100bc54(), !insn.addr !6605
  %5 = load i32, i32* inttoptr (i32 -167686256 to i32*), align 16, !insn.addr !6606
  %6 = add i32 %1, -70, !insn.addr !6607
  %7 = add i32 %1, -54, !insn.addr !6608
  %8 = inttoptr i32 %7 to i32*, !insn.addr !6608
  %9 = load i32, i32* %8, align 4, !insn.addr !6608
  %10 = call i32 @function_10062d1(i32 %2, i32 %9, i32 %6, i32 %5), !insn.addr !6609
  %11 = add i32 %1, -4, !insn.addr !6610
  %12 = inttoptr i32 %11 to i32*, !insn.addr !6610
  %13 = load i32, i32* %12, align 4, !insn.addr !6610
  %14 = call i32 @unknown_6b7bd1(i32 %13), !insn.addr !6611
  %15 = add i32 %1, -57, !insn.addr !6612
  %16 = inttoptr i32 %15 to i32*, !insn.addr !6612
  store i32 0, i32* %16, align 4, !insn.addr !6612
  %17 = trunc i32 %3 to i16, !insn.addr !6613
  %18 = call i32 @__asm_insd(i16 %17), !insn.addr !6613
  %19 = inttoptr i32 %0 to i32*, !insn.addr !6613
  store i32 %18, i32* %19, align 4, !insn.addr !6613
  %20 = call i32 @function_100f73f(), !insn.addr !6614
  %21 = load i32, i32* %ecx, align 4
  %22 = add i32 %21, 1300955275, !insn.addr !6615
  %23 = inttoptr i32 %22 to i32*, !insn.addr !6615
  %24 = load i32, i32* %23, align 4, !insn.addr !6615
  %25 = add i32 %21, -1039928930, !insn.addr !6616
  %26 = inttoptr i32 %25 to i8*, !insn.addr !6616
  %27 = load i8, i8* %26, align 1, !insn.addr !6616
  %28 = trunc i32 %21 to i8, !insn.addr !6616
  %29 = or i8 %27, %28, !insn.addr !6616
  store i8 %29, i8* %26, align 1, !insn.addr !6616
  %30 = add i32 %24, 1, !insn.addr !6617
  %31 = add i32 %24, 200, !insn.addr !6618
  %32 = and i32 %31, 255, !insn.addr !6618
  %33 = and i32 %30, -256, !insn.addr !6618
  %34 = or i32 %33, %32, !insn.addr !6618
  %35 = bitcast i32* %ecx to i8*
  %36 = load i8, i8* %35, align 4, !insn.addr !6619
  %37 = trunc i32 %31 to i8, !insn.addr !6619
  %38 = add i8 %36, %37, !insn.addr !6619
  %39 = load i32, i32* %ecx, align 4, !insn.addr !6619
  %40 = inttoptr i32 %39 to i8*, !insn.addr !6619
  store i8 %38, i8* %40, align 1, !insn.addr !6619
  %41 = inttoptr i32 %34 to i8*, !insn.addr !6620
  %42 = load i8, i8* %41, align 1, !insn.addr !6620
  %43 = load i32, i32* %ecx, align 4, !insn.addr !6620
  %44 = udiv i32 %43, 256, !insn.addr !6620
  %45 = trunc i32 %44 to i8, !insn.addr !6620
  %46 = add i8 %42, %45, !insn.addr !6620
  store i8 %46, i8* %41, align 1, !insn.addr !6620
  ret i32 %34, !insn.addr !6621
}

define i32 @function_101028c() local_unnamed_addr {
dec_label_pc_101028c:
  %eax.0.reg2mem = alloca i32, !insn.addr !6622
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = load i8, i8* @global_var_1014fa8, align 1, !insn.addr !6623
  %3 = sext i8 %2 to i32, !insn.addr !6624
  %4 = call i32 @function_1008d7b(i32 %0, i32 %3), !insn.addr !6624
  %5 = icmp eq i32 %4, 0, !insn.addr !6625
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !6626
  br i1 %5, label %dec_label_pc_10102b0, label %dec_label_pc_10102a4, !insn.addr !6626

dec_label_pc_10102a4:                             ; preds = %dec_label_pc_101028c
  %6 = load i32, i32* inttoptr (i32 29183908 to i32*), align 4, !insn.addr !6627
  %7 = call i32 @unknown_6f008858(i32 %0, i32 %6), !insn.addr !6628
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !6628
  br label %dec_label_pc_10102b0, !insn.addr !6628

dec_label_pc_10102b0:                             ; preds = %dec_label_pc_10102a4, %dec_label_pc_101028c
  %8 = icmp slt i32 %4, 0, !insn.addr !6625
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %9 = icmp eq i1 %8, false, !insn.addr !6629
  %10 = icmp eq i1 %5, false, !insn.addr !6629
  %11 = icmp eq i1 %9, %10, !insn.addr !6629
  br i1 %11, label %dec_label_pc_101030e, label %dec_label_pc_10102b3, !insn.addr !6629

dec_label_pc_10102b3:                             ; preds = %dec_label_pc_10102b0
  %12 = inttoptr i32 %0 to i32*, !insn.addr !6630
  store i32 %eax.0.reload, i32* %12, align 4, !insn.addr !6630
  ret i32 %eax.0.reload, !insn.addr !6631

dec_label_pc_101030e:                             ; preds = %dec_label_pc_10102b0
  %13 = inttoptr i32 %1 to i32*, !insn.addr !6622
  %14 = add i32 %eax.0.reload, 232, !insn.addr !6632
  %15 = and i32 %14, 255, !insn.addr !6632
  %16 = and i32 %eax.0.reload, -256, !insn.addr !6632
  %17 = or i32 %15, %16, !insn.addr !6632
  call void @__asm_out.4(i32 214, i32 %17), !insn.addr !6633
  ret i32 %17, !insn.addr !6633
}

define i32 @function_1010313(i16 %arg1) local_unnamed_addr {
dec_label_pc_1010313:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -1861383421, !insn.addr !6634
  %3 = inttoptr i32 %2 to i32*, !insn.addr !6634
  %4 = load i32, i32* %3, align 4, !insn.addr !6634
  %5 = add i32 %4, -1, !insn.addr !6634
  store i32 %5, i32* %3, align 4, !insn.addr !6634
  %6 = add i32 %0, -1044280328, !insn.addr !6635
  %7 = inttoptr i32 %6 to i8*, !insn.addr !6635
  %8 = load i8, i8* %7, align 1, !insn.addr !6635
  %9 = trunc i32 %1 to i8, !insn.addr !6635
  %10 = add i8 %8, %9, !insn.addr !6635
  store i8 %10, i8* %7, align 1, !insn.addr !6635
  %11 = call i32 @function_8ca6f670(), !insn.addr !6636
  ret i32 %11, !insn.addr !6636
}

define i32 @function_1010353(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1010353:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %2, 227476547, !insn.addr !6637
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6637
  %8 = load i32, i32* %7, align 4, !insn.addr !6637
  %9 = add i32 %8, -1, !insn.addr !6637
  store i32 %9, i32* %7, align 4, !insn.addr !6637
  %10 = load i8, i8* inttoptr (i32 -1962868401 to i8*), align 1, !insn.addr !6638
  %11 = zext i8 %10 to i32, !insn.addr !6638
  %12 = and i32 %3, -256, !insn.addr !6638
  %13 = or i32 %12, %11, !insn.addr !6638
  %14 = add i32 %0, -117, !insn.addr !6639
  %15 = inttoptr i32 %14 to i32*, !insn.addr !6639
  %16 = load i32, i32* %15, align 4, !insn.addr !6639
  %17 = zext i1 %5 to i32, !insn.addr !6639
  %18 = add i32 %1, %17, !insn.addr !6639
  %19 = add i32 %18, %16, !insn.addr !6639
  store i32 %19, i32* %15, align 4, !insn.addr !6639
  call void @__asm_out.4(i32 4, i32 %13), !insn.addr !6640
  %20 = and i32 %arg1, 114, !insn.addr !6641
  %21 = or i32 %20, 141, !insn.addr !6641
  %22 = and i32 %arg1, -256, !insn.addr !6641
  %23 = or i32 %21, %22, !insn.addr !6642
  %24 = inttoptr i32 %23 to i8*, !insn.addr !6643
  %25 = load i8, i8* %24, align 1, !insn.addr !6643
  %26 = trunc i32 %21 to i8, !insn.addr !6643
  %27 = add i8 %25, %26, !insn.addr !6643
  store i8 %27, i8* %24, align 1, !insn.addr !6643
  %28 = add i32 %23, 521551935, !insn.addr !6644
  %29 = inttoptr i32 %0 to i8*, !insn.addr !6645
  call void @__asm_rep_movsd_memcpy(i8* nonnull %24, i8* %29, i32 %2), !insn.addr !6645
  %30 = select i1 %4, i32 -4, i32 4, !insn.addr !6645
  %31 = mul i32 %30, %2, !insn.addr !6645
  %32 = add i32 %31, %23, !insn.addr !6645
  %33 = inttoptr i32 %28 to i32*, !insn.addr !6646
  %34 = load i32, i32* %33, align 4, !insn.addr !6646
  %35 = or i32 %34, -67, !insn.addr !6646
  store i32 %35, i32* %33, align 4, !insn.addr !6646
  %36 = inttoptr i32 %32 to i8*, !insn.addr !6647
  call void @__asm_rep_movsb_memcpy(i8* nonnull %36, i8* nonnull %36, i32 %28), !insn.addr !6647
  %37 = call i32 @unknown_27547c26(), !insn.addr !6648
  %38 = call i32 @__asm_int1(), !insn.addr !6649
  ret i32 %38, !insn.addr !6650
}

define i32 @function_10103d3() local_unnamed_addr {
dec_label_pc_10103d3:
  %eax.0.reg2mem = alloca i32, !insn.addr !6651
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, -126, !insn.addr !6652
  %5 = inttoptr i32 %4 to i32*, !insn.addr !6652
  %6 = load i32, i32* %5, align 4, !insn.addr !6652
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6653
  %8 = trunc i32 %3 to i16, !insn.addr !6654
  %9 = call i8 @__asm_in.3(i16 %8), !insn.addr !6654
  %10 = sext i8 %9 to i32, !insn.addr !6654
  %11 = and i32 %2, -256, !insn.addr !6654
  %12 = or i32 %11, %10, !insn.addr !6654
  %13 = mul i32 %0, 4, !insn.addr !6655
  %14 = add i32 %13, 12, !insn.addr !6655
  %15 = udiv i32 %14, 4, !insn.addr !6656
  %16 = trunc i32 %15 to i8, !insn.addr !6657
  %17 = add i32 %0, 1219052939, !insn.addr !6658
  %18 = inttoptr i32 %17 to i8*, !insn.addr !6658
  %19 = and i32 %14, -256, !insn.addr !6659
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !6654
  br label %dec_label_pc_10103e5, !insn.addr !6654

dec_label_pc_10103e5:                             ; preds = %dec_label_pc_101041e, %dec_label_pc_10103d3
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %20 = add i32 %eax.0.reload, -53, !insn.addr !6660
  %21 = inttoptr i32 %20 to i32*, !insn.addr !6660
  %22 = load i32, i32* %21, align 4, !insn.addr !6660
  %23 = add i32 %22, -1595833400, !insn.addr !6657
  %24 = inttoptr i32 %23 to i8*, !insn.addr !6657
  %25 = load i8, i8* %24, align 1, !insn.addr !6657
  %26 = and i8 %25, %16, !insn.addr !6657
  store i8 %26, i8* %24, align 1, !insn.addr !6657
  %27 = load i8, i8* %18, align 1, !insn.addr !6658
  %28 = trunc i32 %22 to i8, !insn.addr !6658
  %29 = or i8 %27, %28, !insn.addr !6658
  %30 = icmp eq i8 %29, 0, !insn.addr !6658
  store i8 %29, i8* %18, align 1, !insn.addr !6658
  br i1 %30, label %dec_label_pc_101040f, label %dec_label_pc_101041e, !insn.addr !6661

dec_label_pc_101040f:                             ; preds = %dec_label_pc_10103e5
  %31 = add i32 %22, 1619261463, !insn.addr !6662
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6662
  %33 = load i32, i32* %32, align 4, !insn.addr !6662
  %34 = add i32 %33, -1, !insn.addr !6662
  store i32 %34, i32* %32, align 4, !insn.addr !6662
  br label %dec_label_pc_101041e, !insn.addr !6663

dec_label_pc_101041e:                             ; preds = %dec_label_pc_10103e5, %dec_label_pc_101040f
  %35 = add i32 %22, 88, !insn.addr !6664
  %36 = inttoptr i32 %35 to i8*, !insn.addr !6664
  %37 = load i8, i8* %36, align 1, !insn.addr !6664
  %38 = add i32 %22, 1099522064, !insn.addr !6665
  %39 = inttoptr i32 %38 to i32*, !insn.addr !6665
  %40 = load i32, i32* %39, align 4, !insn.addr !6665
  %41 = add i32 %40, -1, !insn.addr !6665
  store i32 %41, i32* %39, align 4, !insn.addr !6665
  %42 = add i8 %37, -117, !insn.addr !6666
  %43 = xor i8 %42, -117, !insn.addr !6667
  %44 = icmp slt i8 %43, 0, !insn.addr !6667
  %45 = zext i8 %43 to i32, !insn.addr !6667
  %46 = or i32 %19, %45, !insn.addr !6667
  store i32 %46, i32* %eax.0.reg2mem, !insn.addr !6668
  br i1 %44, label %dec_label_pc_10103e5, label %dec_label_pc_1010438, !insn.addr !6668

dec_label_pc_1010438:                             ; preds = %dec_label_pc_101041e
  %47 = call i32 @function_8ca6f749(), !insn.addr !6669
  ret i32 %47, !insn.addr !6669
}

define i32 @function_1010458() local_unnamed_addr {
dec_label_pc_1010458:
  %cf.0.reg2mem = alloca i1, !insn.addr !6670
  %ebx.0.reg2mem = alloca i32, !insn.addr !6670
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i32 @unknown_57007c26(), !insn.addr !6670
  %8 = and i32 %7, -256, !insn.addr !6671
  %9 = add i32 %1, 51, !insn.addr !6672
  %10 = inttoptr i32 %9 to i8*, !insn.addr !6672
  %11 = load i8, i8* %10, align 1, !insn.addr !6672
  %12 = add i8 %11, -49, !insn.addr !6672
  store i8 %12, i8* %10, align 1, !insn.addr !6672
  %13 = add i32 %2, -4, !insn.addr !6673
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6673
  store i32 %8, i32* %14, align 4, !insn.addr !6673
  %15 = call i32 @unknown_13007c4c(i32 %0), !insn.addr !6674
  %16 = trunc i32 %5 to i8, !insn.addr !6675
  %17 = and i8 %16, 31, !insn.addr !6675
  %18 = icmp eq i8 %17, 0, !insn.addr !6675
  br i1 %18, label %24, label %19, !insn.addr !6675

; <label>:19:                                     ; preds = %dec_label_pc_1010458
  %20 = mul i32 %0, 9, !insn.addr !6675
  %21 = inttoptr i32 %20 to i8*, !insn.addr !6675
  %22 = load i8, i8* %21, align 1, !insn.addr !6675
  %23 = ashr i8 %22, %17, !insn.addr !6675
  store i8 %23, i8* %21, align 1, !insn.addr !6675
  br label %24, !insn.addr !6675

; <label>:24:                                     ; preds = %dec_label_pc_1010458, %19
  %25 = and i32 %3, -65281, !insn.addr !6676
  %26 = or i32 %25, 35072, !insn.addr !6676
  %27 = add i32 %15, %2, !insn.addr !6677
  %28 = add i32 %26, 1099562102, !insn.addr !6678
  %29 = inttoptr i32 %28 to i32*, !insn.addr !6678
  %30 = load i32, i32* %29, align 4, !insn.addr !6678
  %31 = add i32 %30, -1, !insn.addr !6678
  store i32 %31, i32* %29, align 4, !insn.addr !6678
  %32 = add i32 %27, 183, !insn.addr !6679
  %33 = and i32 %32, 255, !insn.addr !6679
  %34 = and i32 %27, -256, !insn.addr !6679
  %35 = or i32 %33, %34, !insn.addr !6679
  %36 = inttoptr i32 %0 to i32*, !insn.addr !6680
  store i32 %35, i32* %36, align 4, !insn.addr !6680
  %37 = udiv i32 %4, 256, !insn.addr !6681
  %38 = trunc i32 %37 to i8, !insn.addr !6681
  %39 = add i8 %38, -119, !insn.addr !6681
  %40 = icmp ult i8 %39, -119, !insn.addr !6681
  %41 = zext i8 %39 to i32, !insn.addr !6681
  %42 = mul i32 %41, 256, !insn.addr !6681
  %43 = or i32 %42, %25, !insn.addr !6681
  store i32 %43, i32* %ebx.0.reg2mem, !insn.addr !6681
  store i1 %40, i1* %cf.0.reg2mem, !insn.addr !6681
  br label %dec_label_pc_1010486, !insn.addr !6681

dec_label_pc_1010486:                             ; preds = %dec_label_pc_1010486, %24
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %44 = udiv i32 %ebx.0.reload, 256, !insn.addr !6682
  %45 = trunc i32 %44 to i8, !insn.addr !6682
  %46 = zext i1 %cf.0.reload to i8, !insn.addr !6682
  %47 = add i8 %45, %46, !insn.addr !6682
  %48 = sext i1 %cf.0.reload to i8, !insn.addr !6682
  %49 = sub nsw i8 %48, %46, !insn.addr !6682
  %50 = icmp ugt i8 %49, %45, !insn.addr !6682
  %51 = icmp ne i8 %47, -1, !insn.addr !6682
  %52 = or i1 %50, %51, !insn.addr !6682
  %53 = icmp ugt i8 %47, %45, !insn.addr !6682
  %54 = select i1 %cf.0.reload, i1 %52, i1 %53, !insn.addr !6682
  %55 = icmp eq i1 %cf.0.reload, false, !insn.addr !6682
  %56 = zext i8 %48 to i32, !insn.addr !6682
  %57 = mul i32 %56, 256, !insn.addr !6682
  %58 = icmp eq i1 %55, false, !insn.addr !6683
  store i32 %57, i32* %ebx.0.reg2mem, !insn.addr !6683
  store i1 %54, i1* %cf.0.reg2mem, !insn.addr !6683
  br i1 %58, label %dec_label_pc_1010486, label %dec_label_pc_101048a, !insn.addr !6683

dec_label_pc_101048a:                             ; preds = %dec_label_pc_1010486
  %59 = select i1 %6, i32 -4, i32 4, !insn.addr !6680
  %60 = add i32 %59, %0, !insn.addr !6680
  %61 = call i32 @unknown_c9987bd1(), !insn.addr !6684
  %62 = add i32 %2, -3, !insn.addr !6685
  %63 = inttoptr i32 %62 to i32*, !insn.addr !6685
  store i32 %60, i32* %63, align 4, !insn.addr !6685
  %64 = call i32 @function_1007c26(), !insn.addr !6686
  ret i32 %64, !insn.addr !6687
}

define i32 @function_1010515() local_unnamed_addr {
dec_label_pc_1010515:
  %0 = call i32 @function_8c02f81c(), !insn.addr !6688
  ret i32 %0, !insn.addr !6688
}

define i32 @function_1010535() local_unnamed_addr {
dec_label_pc_1010535:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = sub i32 %1, %0, !insn.addr !6689
  %8 = trunc i32 %7 to i8, !insn.addr !6689
  %9 = call i8 @llvm.ctpop.i8(i8 %8), !range !258, !insn.addr !6689
  %10 = and i8 %9, 1, !insn.addr !6689
  %11 = icmp eq i8 %10, 0, !insn.addr !6689
  %12 = icmp eq i1 %11, false, !insn.addr !6690
  br i1 %12, label %dec_label_pc_10105af, label %dec_label_pc_1010539, !insn.addr !6690

dec_label_pc_1010539:                             ; preds = %dec_label_pc_1010535
  ret i32 %5, !insn.addr !6691

dec_label_pc_10105af:                             ; preds = %dec_label_pc_1010535
  %13 = trunc i32 %0 to i16, !insn.addr !6689
  %14 = select i1 %6, i16 -4, i16 4, !insn.addr !6689
  %15 = add i16 %14, %13, !insn.addr !6689
  %16 = zext i16 %15 to i32, !insn.addr !6689
  %17 = and i32 %0, -65536, !insn.addr !6689
  %18 = or i32 %17, %16, !insn.addr !6689
  %19 = and i32 %1, -65536, !insn.addr !6689
  %20 = trunc i32 %1 to i16, !insn.addr !6689
  %21 = add i16 %14, %20, !insn.addr !6689
  %22 = zext i16 %21 to i32, !insn.addr !6689
  %23 = or i32 %19, %22, !insn.addr !6689
  %24 = add i32 %23, 1, !insn.addr !6692
  %25 = and i32 %5, 3, !insn.addr !6693
  %26 = inttoptr i32 %24 to i8*, !insn.addr !6694
  %27 = inttoptr i32 %18 to i8*, !insn.addr !6694
  call void @__asm_rep_movsb_memcpy(i8* %27, i8* %26, i32 %25), !insn.addr !6694
  %28 = select i1 %6, i32 -1, i32 1, !insn.addr !6694
  %29 = mul nsw i32 %28, %25, !insn.addr !6694
  %30 = add i32 %18, %29, !insn.addr !6694
  %31 = add i32 %2, -12, !insn.addr !6695
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6695
  %33 = load i32, i32* %32, align 4, !insn.addr !6695
  %34 = call i32 @function_10091c1(i32 %33), !insn.addr !6696
  %35 = load i32, i32* @global_var_1014f7f, align 4, !insn.addr !6697
  store i32 0, i32* %32, align 4, !insn.addr !6698
  %36 = add i32 %35, 4, !insn.addr !6699
  %37 = inttoptr i32 %36 to i32*, !insn.addr !6699
  %38 = load i32, i32* %37, align 4, !insn.addr !6699
  %39 = call i32 @function_10089fb(i32 %38), !insn.addr !6700
  %40 = trunc i32 %4 to i16, !insn.addr !6701
  %41 = inttoptr i32 %30 to i32*, !insn.addr !6701
  %42 = load i32, i32* %41, align 4, !insn.addr !6701
  call void @__asm_outsd(i16 %40, i32 %42), !insn.addr !6701
  %43 = select i1 %6, i32 -4, i32 4, !insn.addr !6702
  %44 = add i32 %30, %43, !insn.addr !6702
  %45 = add i32 %30, 1, !insn.addr !6703
  %46 = inttoptr i32 %45 to i16*, !insn.addr !6703
  %47 = load i16, i16* %46, align 2, !insn.addr !6703
  call void @__asm_arpl(i16 %47, i16 0), !insn.addr !6703
  %48 = call i32 @__asm_hlt(), !insn.addr !6704
  %49 = add i32 %4, -117, !insn.addr !6705
  %50 = inttoptr i32 %49 to i32*, !insn.addr !6705
  %51 = load i32, i32* %50, align 4, !insn.addr !6705
  %52 = mul i32 %51, 512, !insn.addr !6706
  %53 = udiv i32 %51, 8388608, !insn.addr !6706
  %54 = or i32 %53, %52, !insn.addr !6706
  %55 = udiv i32 %4, 256, !insn.addr !6707
  %56 = trunc i32 %55 to i8, !insn.addr !6707
  %57 = trunc i32 %3 to i8, !insn.addr !6707
  %58 = sub i8 0, %57, !insn.addr !6707
  %59 = icmp eq i8 %56, %58, !insn.addr !6707
  %60 = inttoptr i32 %44 to i32*, !insn.addr !6708
  %61 = load i32, i32* %60, align 4, !insn.addr !6708
  store i32 %61, i32* %41, align 4, !insn.addr !6708
  %62 = add i32 %44, %43, !insn.addr !6708
  %63 = udiv i32 %48, 8, !insn.addr !6709
  %64 = mul i32 %48, 536870912, !insn.addr !6709
  %65 = or i32 %63, %64, !insn.addr !6709
  %66 = icmp ne i32 %54, 1, !insn.addr !6710
  %67 = icmp ne i1 %66, %59, !insn.addr !6710
  %68 = icmp eq i1 %59, false, !insn.addr !6711
  %or.cond = or i1 %68, %67
  %spec.select = select i1 %or.cond, i32 %65, i32 %62
  ret i32 %spec.select
}

define i32 @function_101065c() local_unnamed_addr {
dec_label_pc_101065c:
  %eax.01.reg2mem = alloca i32, !insn.addr !6712
  %esp.02.reg2mem = alloca i32, !insn.addr !6712
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = and i32 %3, 65280
  %8 = icmp eq i32 %7, 0, !insn.addr !6713
  %9 = icmp eq i1 %8, false, !insn.addr !6714
  br i1 %9, label %dec_label_pc_101066f, label %dec_label_pc_101067b, !insn.addr !6714

dec_label_pc_101066f:                             ; preds = %dec_label_pc_101065c, %dec_label_pc_101066f
  %eax.01.reload = load i32, i32* %eax.01.reg2mem
  %esp.02.reload = load i32, i32* %esp.02.reg2mem
  %10 = add i32 %esp.02.reload, -4, !insn.addr !6715
  %11 = inttoptr i32 %10 to i32*, !insn.addr !6715
  store i32 %eax.01.reload, i32* %11, align 4, !insn.addr !6715
  %12 = call i32 @unknown_1db1a3c(), !insn.addr !6716
  store i32 %10, i32* %esp.02.reg2mem
  store i32 %12, i32* %eax.01.reg2mem
  br label %dec_label_pc_101066f

dec_label_pc_101067b:                             ; preds = %dec_label_pc_101065c
  %13 = add i32 %5, 256935104, !insn.addr !6717
  %14 = select i1 %6, i32 -4, i32 4, !insn.addr !6718
  %15 = add i32 %14, %0, !insn.addr !6718
  %16 = inttoptr i32 %13 to i8*, !insn.addr !6719
  %17 = load i8, i8* %16, align 1, !insn.addr !6719
  %18 = trunc i32 %13 to i8, !insn.addr !6719
  %19 = add i8 %17, %18, !insn.addr !6719
  store i8 %19, i8* %16, align 1, !insn.addr !6719
  %20 = add i32 %1, 8, !insn.addr !6720
  %21 = inttoptr i32 %20 to i8*, !insn.addr !6720
  %22 = load i8, i8* %21, align 1, !insn.addr !6720
  %23 = udiv i32 %0, 256, !insn.addr !6720
  %24 = trunc i32 %23 to i8, !insn.addr !6720
  %25 = icmp ult i8 %22, %24, !insn.addr !6720
  %26 = add i32 %1, -4, !insn.addr !6721
  %27 = add i32 %2, -4, !insn.addr !6722
  %28 = inttoptr i32 %27 to i32*, !insn.addr !6722
  store i32 %26, i32* %28, align 4, !insn.addr !6722
  %29 = udiv i32 %26, 256, !insn.addr !6723
  %30 = zext i1 %25 to i32, !insn.addr !6723
  %31 = add i32 %29, %26, !insn.addr !6723
  %32 = add i32 %31, %30, !insn.addr !6723
  %33 = mul i32 %32, 256, !insn.addr !6723
  %34 = and i32 %33, 65280, !insn.addr !6723
  %35 = and i32 %26, -65281, !insn.addr !6723
  %36 = or i32 %34, %35, !insn.addr !6723
  %37 = and i32 %4, -65281, !insn.addr !6724
  %38 = or i32 %37, 45312, !insn.addr !6724
  %39 = add i32 %36, 805570589, !insn.addr !6725
  %40 = inttoptr i32 %39 to i32*, !insn.addr !6725
  %41 = load i32, i32* %40, align 4, !insn.addr !6725
  %42 = add i32 %2, -8, !insn.addr !6725
  %43 = inttoptr i32 %42 to i32*, !insn.addr !6725
  store i32 %41, i32* %43, align 4, !insn.addr !6725
  %44 = inttoptr i32 %15 to i8*, !insn.addr !6726
  %45 = load i8, i8* %44, align 1, !insn.addr !6726
  %46 = trunc i32 %0 to i8, !insn.addr !6726
  %47 = or i8 %45, %46, !insn.addr !6726
  store i8 %47, i8* %44, align 1, !insn.addr !6726
  %48 = add i32 %1, 135, !insn.addr !6727
  %49 = and i32 %48, 255, !insn.addr !6727
  %50 = and i32 %36, -256, !insn.addr !6727
  %51 = or i32 %50, %49, !insn.addr !6727
  %52 = add i32 %2, -14, !insn.addr !6728
  %53 = inttoptr i32 %52 to i32*, !insn.addr !6728
  store i32 %51, i32* %53, align 4, !insn.addr !6728
  %54 = add i32 %3, -1152308471, !insn.addr !6729
  %55 = inttoptr i32 %54 to i8*, !insn.addr !6729
  %56 = load i8, i8* %55, align 1, !insn.addr !6729
  %57 = trunc i32 %4 to i8
  %58 = add i8 %57, 1, !insn.addr !6729
  %59 = or i8 %56, %58, !insn.addr !6729
  store i8 %59, i8* %55, align 1, !insn.addr !6729
  %60 = add nsw i32 %38, 5, !insn.addr !6730
  %61 = inttoptr i32 %60 to i32*, !insn.addr !6730
  %62 = load i32, i32* %61, align 4, !insn.addr !6730
  %63 = sub i32 0, %62
  %64 = sub i32 %63, 1
  %65 = add i32 %0, %64, !insn.addr !6731
  %66 = load i8*, i8** @global_var_1014f40, align 4, !insn.addr !6732
  %67 = ptrtoint i8* %66 to i32, !insn.addr !6732
  %68 = mul i32 %65, %67, !insn.addr !6732
  %69 = load i32, i32* inttoptr (i32 1912688476 to i32*), align 4, !insn.addr !6733
  %70 = icmp sgt i32 %68, %69, !insn.addr !6734
  br i1 %70, label %dec_label_pc_10106d2, label %dec_label_pc_10106c5, !insn.addr !6734

dec_label_pc_10106c5:                             ; preds = %dec_label_pc_101067b
  %71 = load i32, i32* inttoptr (i32 1224822616 to i32*), align 8, !insn.addr !6735
  %72 = icmp eq i32 %71, 0, !insn.addr !6735
  br i1 %72, label %73, label %dec_label_pc_10106d2, !insn.addr !6736

; <label>:73:                                     ; preds = %dec_label_pc_10106c5
  %74 = call i32 @function_480105fc(), !insn.addr !6736
  br label %dec_label_pc_10106d2, !insn.addr !6736

dec_label_pc_10106d2:                             ; preds = %73, %dec_label_pc_10106c5, %dec_label_pc_101067b
  %75 = inttoptr i32 %0 to i32*, !insn.addr !6718
  %76 = add i32 %2, -10, !insn.addr !6737
  %77 = inttoptr i32 %76 to i16*, !insn.addr !6737
  %78 = add i32 %1, 78, !insn.addr !6738
  %79 = inttoptr i32 %78 to i32*, !insn.addr !6738
  %80 = load i32, i32* %79, align 4, !insn.addr !6738
  %81 = add i32 %2, -18, !insn.addr !6738
  %82 = inttoptr i32 %81 to i32*, !insn.addr !6738
  store i32 %80, i32* %82, align 4, !insn.addr !6738
  %83 = call i32 @unknown_1f00353f(), !insn.addr !6739
  %84 = add i32 %1, -9, !insn.addr !6740
  %85 = inttoptr i32 %84 to i32*, !insn.addr !6740
  %86 = load i32, i32* %85, align 4, !insn.addr !6740
  %87 = add i32 %2, -22, !insn.addr !6740
  %88 = inttoptr i32 %87 to i32*, !insn.addr !6740
  store i32 %86, i32* %88, align 4, !insn.addr !6740
  call void @llvm.trap()
  unreachable
}

define i32 @function_1010706() local_unnamed_addr {
dec_label_pc_1010706:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 59374753, !insn.addr !6741
  %2 = inttoptr i32 %1 to i32*, !insn.addr !6741
  %3 = load i32, i32* %2, align 4, !insn.addr !6741
  %4 = add i32 %3, -1, !insn.addr !6741
  store i32 %4, i32* %2, align 4, !insn.addr !6741
  %5 = call i32 @function_10107ed(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !6742
  ret i32 %5, !insn.addr !6742
}

define i32 @function_101073c() local_unnamed_addr {
dec_label_pc_101073c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6743
}

define i32 @function_101076a() local_unnamed_addr {
dec_label_pc_101076a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 232, !insn.addr !6744
  %2 = and i32 %1, 255, !insn.addr !6744
  %3 = and i32 %0, -256, !insn.addr !6744
  %4 = or i32 %2, %3, !insn.addr !6744
  ret i32 %4, !insn.addr !6745
}

define i32 @function_10107a2() local_unnamed_addr {
dec_label_pc_10107a2:
  %0 = call i32 @function_8ca6faa9(), !insn.addr !6746
  ret i32 %0, !insn.addr !6746
}

define i32 @function_10107c0() local_unnamed_addr {
dec_label_pc_10107c0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10107ed(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10107ed:
  %0 = call i32 @function_1007bd1(), !insn.addr !6747
  ret i32 %0, !insn.addr !6748
}

define i32 @function_10107fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10107fc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-24 = alloca i32, align 4
  %7 = add i32 %1, 87, !insn.addr !6749
  %8 = inttoptr i32 %7 to i8*, !insn.addr !6749
  %9 = load i8, i8* %8, align 1, !insn.addr !6749
  %10 = trunc i32 %3 to i8, !insn.addr !6749
  %11 = or i8 %9, %10, !insn.addr !6749
  store i8 %11, i8* %8, align 1, !insn.addr !6749
  %12 = call i32 @function_1008f17(), !insn.addr !6750
  %13 = add i32 %12, 21, !insn.addr !6751
  %14 = and i32 %13, 255, !insn.addr !6751
  %15 = and i32 %12, -256, !insn.addr !6751
  %16 = or i32 %14, %15, !insn.addr !6751
  %17 = add i32 %5, %3, !insn.addr !6752
  %18 = inttoptr i32 %17 to i8*, !insn.addr !6752
  %19 = load i8, i8* %18, align 1, !insn.addr !6752
  %20 = udiv i32 %3, 256, !insn.addr !6752
  %21 = trunc i32 %20 to i8, !insn.addr !6752
  store i8 %21, i8* %18, align 1, !insn.addr !6752
  %22 = zext i8 %19 to i32, !insn.addr !6752
  %23 = mul i32 %22, 256, !insn.addr !6752
  %24 = and i32 %3, -65281, !insn.addr !6752
  %25 = or i32 %23, %24, !insn.addr !6752
  %26 = add i32 %16, %4, !insn.addr !6753
  %27 = inttoptr i32 %4 to i32*, !insn.addr !6753
  store i32 %26, i32* %27, align 4, !insn.addr !6753
  %28 = add i32 %5, 8, !insn.addr !6754
  %29 = inttoptr i32 %28 to i32*, !insn.addr !6755
  store i32 -2147483647, i32* %29, align 4, !insn.addr !6755
  %30 = call i32 @function_1012670(i32 %28), !insn.addr !6756
  store i32 0, i32* %stack_var_-24, align 4, !insn.addr !6757
  %31 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !6757
  %32 = add i32 %4, -9200664, !insn.addr !6758
  %33 = add i32 %32, %30, !insn.addr !6758
  %34 = inttoptr i32 %33 to i32*, !insn.addr !6758
  %35 = call i32 @unknown_5f007bc1(), !insn.addr !6759
  %36 = add i32 %35, 4, !insn.addr !6760
  %37 = inttoptr i32 %36 to i32*, !insn.addr !6760
  store i32 0, i32* %37, align 4, !insn.addr !6760
  %38 = add i32 %2, -36, !insn.addr !6761
  %39 = inttoptr i32 %38 to i32*, !insn.addr !6761
  %40 = load i32, i32* %39, align 4, !insn.addr !6761
  %41 = add i32 %40, 232, !insn.addr !6762
  %42 = and i32 %41, 255, !insn.addr !6762
  %43 = and i32 %40, -256, !insn.addr !6762
  %44 = or i32 %42, %43, !insn.addr !6762
  %45 = trunc i32 %41 to i8, !insn.addr !6763
  %46 = inttoptr i32 %0 to i8*, !insn.addr !6763
  store i8 %45, i8* %46, align 1, !insn.addr !6763
  %47 = add i32 %2, -1232489139, !insn.addr !6764
  %48 = inttoptr i32 %47 to i32*, !insn.addr !6764
  %49 = load i32, i32* %48, align 4, !insn.addr !6764
  %50 = add i32 %49, -1, !insn.addr !6764
  store i32 %50, i32* %48, align 4, !insn.addr !6764
  %51 = add i32 %2, -115, !insn.addr !6765
  %52 = inttoptr i32 %51 to i32*, !insn.addr !6765
  %53 = load i32, i32* %52, align 4, !insn.addr !6765
  %54 = add i32 %25, 74983432, !insn.addr !6766
  %55 = inttoptr i32 %54 to i32*, !insn.addr !6766
  %56 = load i32, i32* %55, align 4, !insn.addr !6766
  %57 = and i32 %2, 32, !insn.addr !6767
  %58 = or i32 %57, 223, !insn.addr !6767
  %59 = and i32 %2, -256, !insn.addr !6767
  %60 = or i32 %58, %59, !insn.addr !6767
  %61 = inttoptr i32 %60 to i8*, !insn.addr !6768
  %62 = load i8, i8* %61, align 1, !insn.addr !6768
  %63 = trunc i32 %58 to i8, !insn.addr !6768
  %64 = add i8 %62, %63, !insn.addr !6768
  store i8 %64, i8* %61, align 1, !insn.addr !6768
  %65 = inttoptr i32 %53 to i8*, !insn.addr !6769
  %66 = load i8, i8* %65, align 1, !insn.addr !6769
  %67 = select i1 %6, i32 -1, i32 1, !insn.addr !6769
  %68 = add i32 %53, %67, !insn.addr !6769
  %69 = inttoptr i32 %68 to i32*, !insn.addr !6770
  %70 = load i32, i32* %69, align 4, !insn.addr !6770
  %71 = inttoptr i32 %44 to i32*, !insn.addr !6770
  store i32 %70, i32* %71, align 4, !insn.addr !6770
  %72 = select i1 %6, i32 -4, i32 4, !insn.addr !6770
  %73 = add i32 %44, %72, !insn.addr !6770
  %74 = add i32 %68, %72, !insn.addr !6770
  %75 = and i8 %66, 3
  %76 = xor i8 %75, 1
  %77 = zext i8 %76 to i32, !insn.addr !6771
  %78 = inttoptr i32 %74 to i8*, !insn.addr !6772
  %79 = inttoptr i32 %73 to i8*, !insn.addr !6772
  call void @__asm_rep_movsb_memcpy(i8* %79, i8* %78, i32 %77), !insn.addr !6772
  %80 = inttoptr i32 %56 to i32*, !insn.addr !6773
  %81 = load i32, i32* %80, align 4, !insn.addr !6773
  %82 = add i32 %31, -4, !insn.addr !6773
  %83 = inttoptr i32 %82 to i32*, !insn.addr !6773
  store i32 %81, i32* %83, align 4, !insn.addr !6773
  %84 = add i32 %31, -8, !insn.addr !6774
  %85 = inttoptr i32 %84 to i32*, !insn.addr !6774
  store i32 %28, i32* %85, align 4, !insn.addr !6774
  %86 = call i32 @unknown_e28fbbd4(), !insn.addr !6775
  %87 = load i32, i32* inttoptr (i32 2030123144 to i32*), align 8, !insn.addr !6776
  %88 = add i32 %31, -12, !insn.addr !6776
  %89 = inttoptr i32 %88 to i32*, !insn.addr !6776
  store i32 %87, i32* %89, align 4, !insn.addr !6776
  %90 = add i32 %31, -16, !insn.addr !6777
  %91 = inttoptr i32 %90 to i32*, !insn.addr !6777
  store i32 %28, i32* %91, align 4, !insn.addr !6777
  %92 = call i32 @unknown_26be29(), !insn.addr !6778
  %93 = load i32, i32* inttoptr (i32 17325351 to i32*), align 4, !insn.addr !6779
  %94 = add i32 %31, -20, !insn.addr !6779
  %95 = inttoptr i32 %94 to i32*, !insn.addr !6779
  store i32 %93, i32* %95, align 4, !insn.addr !6779
  %96 = add i32 %92, 20, !insn.addr !6780
  %97 = inttoptr i32 %96 to i8*, !insn.addr !6780
  %98 = load i8, i8* %97, align 1, !insn.addr !6780
  %99 = or i8 %98, %10, !insn.addr !6780
  store i8 %99, i8* %97, align 1, !insn.addr !6780
  %100 = add i32 %31, -24, !insn.addr !6781
  %101 = inttoptr i32 %100 to i32*, !insn.addr !6781
  store i32 %94, i32* %101, align 4, !insn.addr !6781
  %102 = add i32 %31, -26, !insn.addr !6782
  %103 = inttoptr i32 %102 to i16*, !insn.addr !6782
  %104 = call i32 @__asm_iretd(), !insn.addr !6783
  %105 = add i32 %31, -30, !insn.addr !6784
  %106 = inttoptr i32 %105 to i32*, !insn.addr !6784
  store i32 %56, i32* %106, align 4, !insn.addr !6784
  %107 = udiv i32 %104, 256, !insn.addr !6785
  %108 = mul nuw nsw i32 %107, 91, !insn.addr !6785
  %109 = add i32 %108, %104, !insn.addr !6785
  %110 = and i32 %109, 255, !insn.addr !6785
  %111 = and i32 %104, -65536, !insn.addr !6785
  %112 = or i32 %110, %111, !insn.addr !6785
  ret i32 %112, !insn.addr !6786
}

define x86_fp80 @function_101091f() local_unnamed_addr {
dec_label_pc_101091f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call x86_fp80 @__decompiler_undefined_function_6()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = add i32 %3, -18285451, !insn.addr !6787
  %7 = inttoptr i32 %6 to i32*, !insn.addr !6787
  %8 = load i32, i32* %7, align 4, !insn.addr !6787
  %9 = add i32 %8, -1, !insn.addr !6787
  store i32 %9, i32* %7, align 4, !insn.addr !6787
  br i1 %5, label %dec_label_pc_1010963, label %dec_label_pc_1010927, !insn.addr !6788

dec_label_pc_1010927:                             ; preds = %dec_label_pc_101091f
  %10 = add i32 %3, 813694114, !insn.addr !6789
  %11 = inttoptr i32 %10 to i32*, !insn.addr !6789
  %12 = load i32, i32* %11, align 4, !insn.addr !6789
  %13 = add i32 %12, -1, !insn.addr !6789
  store i32 %13, i32* %11, align 4, !insn.addr !6789
  ret x86_fp80 %4, !insn.addr !6790

dec_label_pc_1010963:                             ; preds = %dec_label_pc_101091f
  %14 = add i32 %1, -1, !insn.addr !6791
  %15 = sub i32 0, %1
  %16 = and i32 %1, %15, !insn.addr !6791
  %17 = icmp slt i32 %16, 0, !insn.addr !6791
  %18 = inttoptr i32 %14 to i8*, !insn.addr !6792
  %19 = inttoptr i32 %0 to i8*, !insn.addr !6792
  call void @__asm_rep_movsb_memcpy(i8* %19, i8* %18, i32 %3), !insn.addr !6792
  br i1 %17, label %dec_label_pc_1010976, label %dec_label_pc_1010972, !insn.addr !6793

dec_label_pc_1010972:                             ; preds = %dec_label_pc_1010963
  ret x86_fp80 %4, !insn.addr !6794

dec_label_pc_1010976:                             ; preds = %dec_label_pc_1010963
  %20 = call i32 @__asm_int3(), !insn.addr !6795
  %21 = add i32 %2, 32373792, !insn.addr !6796
  %22 = inttoptr i32 %21 to i32*, !insn.addr !6796
  %23 = load i32, i32* %22, align 4, !insn.addr !6796
  %24 = add i32 %23, -1, !insn.addr !6796
  store i32 %24, i32* %22, align 4, !insn.addr !6796
  %25 = add i32 %2, -4, !insn.addr !6797
  %26 = inttoptr i32 %25 to i32*, !insn.addr !6797
  %27 = bitcast i32 %2 to float, !insn.addr !6798
  %28 = fpext float %27 to x86_fp80, !insn.addr !6798
  %29 = fdiv x86_fp80 %4, %28, !insn.addr !6798
  ret x86_fp80 %29, !insn.addr !6798
}

define i32 @function_101099c() local_unnamed_addr {
dec_label_pc_101099c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, 4, !insn.addr !6799
  %5 = inttoptr i32 %4 to i32*, !insn.addr !6799
  %6 = load i32, i32* %5, align 4, !insn.addr !6799
  %7 = trunc i32 %3 to i8
  %8 = mul i8 %7, 2, !insn.addr !6800
  %9 = inttoptr i32 %3 to i8*, !insn.addr !6800
  store i8 %8, i8* %9, align 1, !insn.addr !6800
  %10 = udiv i32 %3, 2
  %11 = and i32 %10, 1073741823, !insn.addr !6801
  %12 = and i32 %2, -256, !insn.addr !6802
  %13 = or i32 %12, 131, !insn.addr !6802
  %14 = trunc i32 %10 to i8, !insn.addr !6803
  %15 = add i32 %6, 1, !insn.addr !6803
  %16 = inttoptr i32 %15 to i8*, !insn.addr !6803
  store i8 %14, i8* %16, align 1, !insn.addr !6803
  %17 = add i32 %0, -397345723, !insn.addr !6804
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6804
  %19 = load i32, i32* %18, align 4, !insn.addr !6804
  %20 = add i32 %19, %11, !insn.addr !6804
  store i32 %20, i32* %18, align 4, !insn.addr !6804
  %21 = mul i32 %6, 8, !insn.addr !6805
  %22 = add nuw nsw i32 %11, 842378239, !insn.addr !6805
  %23 = add i32 %22, %21, !insn.addr !6805
  %24 = inttoptr i32 %23 to i64*, !insn.addr !6805
  %25 = load i64, i64* %24, align 4, !insn.addr !6805
  %26 = call i32 @__asm_bound(i64 %25), !insn.addr !6805
  %27 = call i32 @__asm_iretd(), !insn.addr !6806
  %28 = add i32 %1, %0, !insn.addr !6807
  %29 = inttoptr i32 %1 to i32*, !insn.addr !6807
  store i32 %28, i32* %29, align 4, !insn.addr !6807
  %30 = call i32 @function_1007ac8(), !insn.addr !6808
  %31 = add i32 %0, -4, !insn.addr !6809
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6809
  %33 = load i32, i32* %32, align 4, !insn.addr !6809
  %34 = call i32 @unknown_62bd6f(i32 %1, i32 %33), !insn.addr !6810
  %35 = inttoptr i32 %34 to i8*, !insn.addr !6811
  %36 = load i8, i8* %35, align 1, !insn.addr !6811
  %37 = trunc i32 %34 to i8, !insn.addr !6811
  %38 = or i8 %36, %37, !insn.addr !6811
  %39 = trunc i32 %1 to i8, !insn.addr !6812
  %40 = add i8 %38, %39, !insn.addr !6812
  store i8 %40, i8* %35, align 1, !insn.addr !6812
  %41 = call i32 @function_100dfef(), !insn.addr !6813
  %42 = call i32 @__asm_sysexit(), !insn.addr !6814
  %43 = inttoptr i32 %11 to i32*, !insn.addr !6815
  %44 = load i32, i32* %43, align 4, !insn.addr !6815
  %45 = add i32 %44, %42, !insn.addr !6815
  store i32 %45, i32* %43, align 4, !insn.addr !6815
  %46 = call i32 @unknown_e800bd0b(i32 %1), !insn.addr !6816
  %47 = add nsw i32 %13, -4, !insn.addr !6817
  %48 = inttoptr i32 %47 to i32*, !insn.addr !6817
  %49 = load i32, i32* %48, align 4, !insn.addr !6817
  %50 = call i32 @unknown_83007bd1(i32 %49), !insn.addr !6818
  ret i32 %50, !insn.addr !6819
}

define i32 @function_10109ff() local_unnamed_addr {
dec_label_pc_10109ff:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = load i8, i8* inttoptr (i32 192170009 to i8*), align 1, !insn.addr !6820
  %3 = udiv i32 %0, 256, !insn.addr !6820
  %4 = trunc i32 %3 to i8, !insn.addr !6820
  %5 = add i8 %2, %4, !insn.addr !6820
  store i8 %5, i8* inttoptr (i32 192170009 to i8*), align 1, !insn.addr !6820
  %6 = add i32 %1, -1, !insn.addr !6821
  ret i32 %6, !insn.addr !6822
}

define i32 @function_1010a16(i32 %arg1) local_unnamed_addr {
dec_label_pc_1010a16:
  %0 = call i32 @function_10091ec(i32 %arg1), !insn.addr !6823
  %1 = call i32 @function_1010a30(), !insn.addr !6824
  ret i32 %1, !insn.addr !6824
}

define i32 @function_1010a21() local_unnamed_addr {
dec_label_pc_1010a21:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = load i32, i32* inttoptr (i32 25710366 to i32*), align 4, !insn.addr !6825
  %2 = add i32 %0, -57, !insn.addr !6826
  %3 = inttoptr i32 %2 to i32*, !insn.addr !6826
  %4 = load i32, i32* %3, align 4, !insn.addr !6826
  %5 = call i32 @function_10090d7(i32 %4, i32 %1), !insn.addr !6827
  ret i32 %5, !insn.addr !6827
}

define i32 @function_1010a30() local_unnamed_addr {
dec_label_pc_1010a30:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6828
}

define i32 @function_1010a4a() local_unnamed_addr {
dec_label_pc_1010a4a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1010a51() local_unnamed_addr {
dec_label_pc_1010a51:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1010a5f(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1010a5f:
  %eax.0.reg2mem = alloca i32, !insn.addr !6829
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = icmp eq i1 %2, false, !insn.addr !6829
  br i1 %3, label %dec_label_pc_1010a86, label %dec_label_pc_1010a61, !insn.addr !6829

dec_label_pc_1010a61:                             ; preds = %dec_label_pc_1010a5f
  %4 = add i32 %0, 1569426159, !insn.addr !6830
  %5 = inttoptr i32 %4 to i32*, !insn.addr !6830
  %6 = load i32, i32* %5, align 4, !insn.addr !6830
  %7 = add i32 %6, -1, !insn.addr !6830
  store i32 %7, i32* %5, align 4, !insn.addr !6830
  ret i32 %1, !insn.addr !6831

dec_label_pc_1010a86:                             ; preds = %dec_label_pc_1010a5f
  %8 = and i32 %1, 138, !insn.addr !6832
  %9 = or i32 %8, 117, !insn.addr !6832
  %10 = and i32 %1, -256, !insn.addr !6832
  %11 = or i32 %9, %10, !insn.addr !6832
  %12 = inttoptr i32 %11 to i8*, !insn.addr !6833
  %13 = load i8, i8* %12, align 1, !insn.addr !6833
  %14 = trunc i32 %9 to i8, !insn.addr !6833
  %15 = add i8 %13, %14, !insn.addr !6833
  %16 = xor i8 %15, %13, !insn.addr !6833
  %17 = xor i8 %15, %14, !insn.addr !6833
  %18 = and i8 %16, %17, !insn.addr !6833
  %19 = icmp slt i8 %18, 0, !insn.addr !6833
  %20 = icmp eq i8 %15, 0, !insn.addr !6833
  %21 = icmp slt i8 %15, 0, !insn.addr !6833
  store i8 %15, i8* %12, align 1, !insn.addr !6833
  %22 = icmp eq i1 %21, %19, !insn.addr !6834
  %23 = icmp eq i1 %20, false, !insn.addr !6834
  %24 = icmp eq i1 %22, %23, !insn.addr !6834
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !6834
  br i1 %24, label %25, label %dec_label_pc_1010a90, !insn.addr !6834

; <label>:25:                                     ; preds = %dec_label_pc_1010a86
  %26 = call i32 @function_1010a51(), !insn.addr !6834
  store i32 %26, i32* %eax.0.reg2mem, !insn.addr !6834
  br label %dec_label_pc_1010a90, !insn.addr !6834

dec_label_pc_1010a90:                             ; preds = %25, %dec_label_pc_1010a86
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !6834
}

define i32 @function_1010aa5() local_unnamed_addr {
dec_label_pc_1010aa5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6835
}

define i32 @function_1010ab0() local_unnamed_addr {
dec_label_pc_1010ab0:
  %0 = call i32 @function_1010a4a(), !insn.addr !6836
  ret i32 %0, !insn.addr !6836
}

define i32 @function_1010ab5() local_unnamed_addr {
dec_label_pc_1010ab5:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 232, !insn.addr !6837
  %2 = and i32 %1, 255, !insn.addr !6837
  %3 = and i32 %0, -256, !insn.addr !6837
  %4 = or i32 %2, %3, !insn.addr !6837
  %5 = add i32 %4, 1, !insn.addr !6838
  ret i32 %5, !insn.addr !6839
}

define i32 @function_1010ad9() local_unnamed_addr {
dec_label_pc_1010ad9:
  %0 = call i32 @function_8ca6fde0(), !insn.addr !6840
  ret i32 %0, !insn.addr !6840
}

define i32 @function_1010b1b() local_unnamed_addr {
dec_label_pc_1010b1b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6841
}

define i32 @function_1010b5d() local_unnamed_addr {
dec_label_pc_1010b5d:
  %0 = call i32 @function_15a6fe64(), !insn.addr !6842
  ret i32 %0, !insn.addr !6842
}

define i32 @function_1010ba5() local_unnamed_addr {
dec_label_pc_1010ba5:
  %0 = call i32 @function_66a618ac(), !insn.addr !6843
  ret i32 %0, !insn.addr !6843
}

define i32 @function_1010bb2() local_unnamed_addr {
dec_label_pc_1010bb2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !6844
}

define i32 @function_1010bf8() local_unnamed_addr {
dec_label_pc_1010bf8:
  %0 = call i32 @function_8ca6feff(), !insn.addr !6845
  ret i32 %0, !insn.addr !6845
}

define i32 @function_1010c0d() local_unnamed_addr {
dec_label_pc_1010c0d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i128 @__decompiler_undefined_function_4()
  %4 = call i128 @__decompiler_undefined_function_4()
  %5 = add i32 %1, 1619262710, !insn.addr !6846
  %6 = inttoptr i32 %5 to i32*, !insn.addr !6846
  %7 = load i32, i32* %6, align 4, !insn.addr !6846
  %8 = add i32 %7, -1, !insn.addr !6846
  store i32 %8, i32* %6, align 4, !insn.addr !6846
  %9 = and i32 %1, -256, !insn.addr !6847
  %10 = or i32 %9, 61, !insn.addr !6847
  %11 = call i32 @unknown_2009efb(), !insn.addr !6848
  %12 = add i32 %0, -4, !insn.addr !6849
  %13 = inttoptr i32 %12 to i8*, !insn.addr !6849
  %14 = load i8, i8* %13, align 1, !insn.addr !6849
  %15 = add i8 %14, -1, !insn.addr !6849
  store i8 %15, i8* %13, align 1, !insn.addr !6849
  %16 = add i32 %2, 4, !insn.addr !6850
  %17 = inttoptr i32 %16 to i32*, !insn.addr !6850
  store i32 %11, i32* %17, align 4, !insn.addr !6850
  %18 = inttoptr i32 %10 to i32*, !insn.addr !6851
  %19 = load i32, i32* %18, align 4, !insn.addr !6851
  %20 = add i32 %19, -71, !insn.addr !6852
  %21 = inttoptr i32 %20 to i32*, !insn.addr !6852
  %22 = load i32, i32* %21, align 4, !insn.addr !6852
  %23 = add i32 %10, %0, !insn.addr !6853
  %24 = inttoptr i32 %19 to i32*, !insn.addr !6854
  %25 = load i32, i32* %24, align 4, !insn.addr !6854
  %26 = or i32 %25, %19, !insn.addr !6854
  store i32 %26, i32* %24, align 4, !insn.addr !6854
  %27 = call i128 @__asm_vpsubsw(i128 %3, i128 %4), !insn.addr !6855
  %28 = inttoptr i32 %22 to i8*, !insn.addr !6856
  call void @__asm_rep_movsd_memcpy(i8* %28, i8* inttoptr (i32 1166738641 to i8*), i32 %23), !insn.addr !6856
  %29 = mul i32 %23, 4, !insn.addr !6856
  %30 = add i32 %22, %29, !insn.addr !6856
  %31 = and i32 %19, 3, !insn.addr !6857
  %32 = inttoptr i32 %30 to i8*, !insn.addr !6858
  call void @__asm_rep_movsb_memcpy(i8* %32, i8* %32, i32 %31), !insn.addr !6858
  ret i32 %19, !insn.addr !6859
}

define i32 @function_1010c63() local_unnamed_addr {
dec_label_pc_1010c63:
  %edi.1.reg2mem = alloca i32, !insn.addr !6860
  %ebp.1.reg2mem = alloca i32, !insn.addr !6860
  %esp.1.reg2mem = alloca i32, !insn.addr !6860
  %.pre-phi16.pre-phi.reg2mem = alloca i32*, !insn.addr !6860
  %edi.0.reg2mem = alloca i32, !insn.addr !6860
  %esi.0.reg2mem = alloca i32, !insn.addr !6860
  %ebp.0.reg2mem = alloca i32, !insn.addr !6860
  %esp.0.reg2mem = alloca i32, !insn.addr !6860
  %ebx.0.reg2mem = alloca i32, !insn.addr !6860
  %eax.0.reg2mem = alloca i32, !insn.addr !6860
  %of.0.reg2mem = alloca i1, !insn.addr !6860
  %zf.0.reg2mem = alloca i1, !insn.addr !6860
  %sf.0.in.reg2mem = alloca i1, !insn.addr !6860
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %7 = add i32 %2, 22006325, !insn.addr !6860
  %8 = inttoptr i32 %7 to i32*, !insn.addr !6860
  %9 = load i32, i32* %8, align 4, !insn.addr !6860
  %10 = add i32 %9, -1, !insn.addr !6860
  store i32 %10, i32* %8, align 4, !insn.addr !6860
  %11 = add i32 %4, 1317793861, !insn.addr !6861
  %12 = inttoptr i32 %11 to i32*, !insn.addr !6861
  %13 = load i32, i32* %12, align 4, !insn.addr !6861
  %14 = add i32 %13, %4, !insn.addr !6861
  store i32 %14, i32* %12, align 4, !insn.addr !6861
  %15 = add i32 %5, 13, !insn.addr !6862
  %16 = and i32 %5, -256, !insn.addr !6862
  %17 = and i32 %15, 114, !insn.addr !6863
  %18 = or i32 %17, 141, !insn.addr !6863
  %19 = or i32 %18, %16, !insn.addr !6863
  store i32 0, i32* %stack_var_-4, align 4, !insn.addr !6864
  %20 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !6864
  %21 = mul i32 %19, 1640087947, !insn.addr !6865
  %22 = and i32 %3, -65281, !insn.addr !6866
  %23 = inttoptr i32 %21 to i32*, !insn.addr !6867
  %24 = select i1 %6, i32 -4, i32 4, !insn.addr !6867
  %25 = add i32 %21, %24, !insn.addr !6867
  %26 = add i32 %24, %0, !insn.addr !6867
  %27 = and i32 %18, 3, !insn.addr !6868
  %28 = inttoptr i32 %26 to i8*, !insn.addr !6869
  %29 = inttoptr i32 %25 to i8*, !insn.addr !6869
  call void @__asm_rep_movsb_memcpy(i8* nonnull %29, i8* %28, i32 %27), !insn.addr !6869
  %30 = select i1 %6, i32 -1, i32 1, !insn.addr !6869
  %31 = mul nsw i32 %30, %27, !insn.addr !6869
  %32 = add i32 %25, %31, !insn.addr !6869
  %33 = add i32 %1, 74, !insn.addr !6870
  %34 = inttoptr i32 %33 to i32*, !insn.addr !6870
  %35 = load i32, i32* %34, align 4, !insn.addr !6870
  %36 = inttoptr i32 %35 to i32*, !insn.addr !6871
  %37 = load i32, i32* %36, align 4, !insn.addr !6871
  %38 = inttoptr i32 %37 to i32*, !insn.addr !6872
  %39 = load i32, i32* %38, align 4, !insn.addr !6872
  %40 = sub i32 0, %39, !insn.addr !6872
  %41 = icmp eq i32 %39, 0, !insn.addr !6872
  store i32 %40, i32* %38, align 4, !insn.addr !6872
  %phitmp = icmp slt i32 %40, 0
  store i1 %phitmp, i1* %sf.0.in.reg2mem, !insn.addr !6873
  store i1 %41, i1* %zf.0.reg2mem, !insn.addr !6873
  store i1 false, i1* %of.0.reg2mem, !insn.addr !6873
  store i32 %37, i32* %eax.0.reg2mem, !insn.addr !6873
  store i32 %20, i32* %esp.0.reg2mem, !insn.addr !6873
  store i32 2147483647, i32* %esi.0.reg2mem, !insn.addr !6873
  store i32 %32, i32* %edi.0.reg2mem, !insn.addr !6873
  br label %dec_label_pc_1010c93, !insn.addr !6873

dec_label_pc_1010c93:                             ; preds = %dec_label_pc_1010d46, %dec_label_pc_1010c63
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %of.0.reload = load i1, i1* %of.0.reg2mem
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  %sf.0.in.reload = load i1, i1* %sf.0.in.reg2mem
  %42 = icmp ne i1 %sf.0.in.reload, %of.0.reload, !insn.addr !6874
  %43 = or i1 %zf.0.reload, %42, !insn.addr !6874
  br i1 %43, label %dec_label_pc_1010d0a, label %dec_label_pc_1010c95, !insn.addr !6874

dec_label_pc_1010c95:                             ; preds = %dec_label_pc_1010c93
  %44 = call i32 @__asm_hlt(), !insn.addr !6875
  %45 = add i32 %ebp.0.reload, -4, !insn.addr !6876
  %46 = add i32 %esp.0.reload, -4, !insn.addr !6877
  %47 = inttoptr i32 %46 to i32*, !insn.addr !6877
  store i32 %45, i32* %47, align 4, !insn.addr !6877
  %48 = call i32 @function_100bbd4(), !insn.addr !6878
  %49 = or i32 %48, 59, !insn.addr !6879
  ret i32 %49, !insn.addr !6879

dec_label_pc_1010d0a:                             ; preds = %dec_label_pc_1010c93
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %50 = add i32 %esp.0.reload, -4, !insn.addr !6880
  %51 = inttoptr i32 %50 to i32*, !insn.addr !6880
  store i32 %eax.0.reload, i32* %51, align 4, !insn.addr !6880
  %52 = call i32 @function_100bc54(), !insn.addr !6881
  %53 = add i32 %ebp.0.reload, -4
  %54 = inttoptr i32 %53 to i32*
  %55 = load i32, i32* %54, align 4, !insn.addr !6882
  %56 = inttoptr i32 %55 to i32*, !insn.addr !6883
  %57 = load i32, i32* %56, align 4, !insn.addr !6883
  %58 = add i32 %esp.0.reload, -8, !insn.addr !6883
  %59 = inttoptr i32 %58 to i32*, !insn.addr !6883
  store i32 %57, i32* %59, align 4, !insn.addr !6883
  %60 = call i32 @function_1011a18(), !insn.addr !6884
  %61 = trunc i32 %60 to i8, !insn.addr !6885
  %62 = icmp eq i8 %61, 64, !insn.addr !6885
  %63 = icmp eq i1 %62, false, !insn.addr !6886
  store i32* %54, i32** %.pre-phi16.pre-phi.reg2mem, !insn.addr !6886
  store i32 %58, i32* %esp.1.reg2mem, !insn.addr !6886
  store i32 %ebp.0.reload, i32* %ebp.1.reg2mem, !insn.addr !6886
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !6886
  br i1 %63, label %dec_label_pc_1010d53, label %dec_label_pc_1010d1f, !insn.addr !6886

dec_label_pc_1010d1f:                             ; preds = %dec_label_pc_1010d0a
  %64 = load i32, i32* %54, align 4, !insn.addr !6887
  %65 = inttoptr i32 %esi.0.reload to i32*, !insn.addr !6888
  %66 = load i32, i32* %65, align 4, !insn.addr !6888
  %67 = add i32 %esi.0.reload, %24, !insn.addr !6888
  %68 = add i32 %64, 1, !insn.addr !6889
  %69 = add i32 %66, 139, !insn.addr !6890
  %70 = and i32 %69, 255, !insn.addr !6890
  %71 = and i32 %66, -256, !insn.addr !6890
  %72 = or i32 %70, %71, !insn.addr !6890
  %73 = add i32 %esp.0.reload, -12, !insn.addr !6891
  %74 = inttoptr i32 %73 to i32*, !insn.addr !6891
  store i32 %72, i32* %74, align 4, !insn.addr !6891
  %75 = add i32 %ebx.0.reload, 139537253, !insn.addr !6892
  %76 = inttoptr i32 %75 to i8*, !insn.addr !6892
  %77 = load i8, i8* %76, align 1, !insn.addr !6892
  %78 = trunc i32 %68 to i8, !insn.addr !6892
  %79 = or i8 %77, %78, !insn.addr !6892
  store i8 %79, i8* %76, align 1, !insn.addr !6892
  %80 = add i32 %72, 4, !insn.addr !6893
  %81 = inttoptr i32 %80 to i32*, !insn.addr !6893
  %82 = load i32, i32* %81, align 4, !insn.addr !6893
  %83 = sub i32 %ebx.0.reload, %68, !insn.addr !6894
  %84 = add i32 %esp.0.reload, -11, !insn.addr !6895
  %85 = inttoptr i32 %83 to i8*, !insn.addr !6896
  %86 = load i8, i8* %85, align 1, !insn.addr !6896
  %87 = mul i32 %83, %84, !insn.addr !6897
  %88 = inttoptr i32 %68 to i32*, !insn.addr !6898
  %89 = load i32, i32* %88, align 4, !insn.addr !6898
  %90 = add i32 %89, %ebp.0.reload, !insn.addr !6898
  %91 = add i32 %90, %ebp.0.reload, !insn.addr !6899
  %92 = xor i32 %91, %90, !insn.addr !6899
  %93 = xor i32 %91, %ebp.0.reload, !insn.addr !6899
  %94 = and i32 %92, %93, !insn.addr !6899
  %95 = icmp slt i32 %94, 0, !insn.addr !6899
  %96 = icmp eq i32 %91, 0, !insn.addr !6899
  %97 = icmp slt i32 %91, 0, !insn.addr !6899
  store i32 %91, i32* %88, align 4, !insn.addr !6899
  %98 = icmp eq i1 %97, %95, !insn.addr !6900
  %99 = icmp eq i1 %96, false, !insn.addr !6900
  %100 = icmp eq i1 %98, %99, !insn.addr !6900
  br i1 %100, label %dec_label_pc_1010da8, label %dec_label_pc_1010d46, !insn.addr !6900

dec_label_pc_1010d46:                             ; preds = %dec_label_pc_1010d1f
  %101 = add i32 %82, 141, !insn.addr !6901
  %102 = and i32 %101, 255, !insn.addr !6901
  %103 = and i32 %82, -65536, !insn.addr !6901
  %104 = or i32 %102, %103, !insn.addr !6901
  %105 = udiv i32 %82, 256, !insn.addr !6896
  %106 = trunc i32 %105 to i8, !insn.addr !6896
  %107 = add i8 %86, %106, !insn.addr !6896
  %108 = zext i8 %107 to i32, !insn.addr !6896
  %109 = mul i32 %108, 256, !insn.addr !6896
  %110 = or i32 %104, %109, !insn.addr !6896
  %111 = add i32 %87, 4, !insn.addr !6902
  %112 = add i32 %edi.0.reload, -2, !insn.addr !6903
  %113 = and i32 %ebp.0.reload, 21981501, !insn.addr !6904
  %114 = inttoptr i32 %113 to i32*, !insn.addr !6905
  %115 = load i32, i32* %114, align 4, !insn.addr !6905
  %116 = add i32 %115, %113, !insn.addr !6905
  %117 = xor i32 %115, -2147483648
  %118 = and i32 %116, %117, !insn.addr !6905
  %119 = icmp slt i32 %118, 0, !insn.addr !6905
  %120 = icmp eq i32 %116, 0, !insn.addr !6905
  store i32 %116, i32* %114, align 4, !insn.addr !6905
  store i1 false, i1* %sf.0.in.reg2mem, !insn.addr !6906
  store i1 true, i1* %zf.0.reg2mem, !insn.addr !6906
  store i1 %119, i1* %of.0.reg2mem, !insn.addr !6906
  store i32 %113, i32* %eax.0.reg2mem, !insn.addr !6906
  store i32 %83, i32* %ebx.0.reg2mem, !insn.addr !6906
  store i32 %111, i32* %esp.0.reg2mem, !insn.addr !6906
  store i32 %110, i32* %ebp.0.reg2mem, !insn.addr !6906
  store i32 %67, i32* %esi.0.reg2mem, !insn.addr !6906
  store i32 %112, i32* %edi.0.reg2mem, !insn.addr !6906
  br i1 %120, label %dec_label_pc_1010c93, label %dec_label_pc_1010d46.dec_label_pc_1010d53_crit_edge, !insn.addr !6906

dec_label_pc_1010d46.dec_label_pc_1010d53_crit_edge: ; preds = %dec_label_pc_1010d46
  %.pre = add i32 %110, -4, !insn.addr !6907
  %.pre74 = inttoptr i32 %.pre to i32*
  store i32* %.pre74, i32** %.pre-phi16.pre-phi.reg2mem
  store i32 %111, i32* %esp.1.reg2mem
  store i32 %110, i32* %ebp.1.reg2mem
  store i32 %112, i32* %edi.1.reg2mem
  br label %dec_label_pc_1010d53

dec_label_pc_1010d53:                             ; preds = %dec_label_pc_1010d0a, %dec_label_pc_1010d46.dec_label_pc_1010d53_crit_edge
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %ebp.1.reload = load i32, i32* %ebp.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %.pre-phi16.pre-phi.reload = load i32*, i32** %.pre-phi16.pre-phi.reg2mem
  %121 = add i32 %ebp.1.reload, -16, !insn.addr !6908
  %122 = inttoptr i32 %121 to i32*, !insn.addr !6908
  %123 = load i32, i32* %122, align 4, !insn.addr !6908
  %124 = add i32 %esp.1.reload, -4, !insn.addr !6908
  %125 = inttoptr i32 %124 to i32*, !insn.addr !6908
  store i32 %123, i32* %125, align 4, !insn.addr !6908
  %126 = add i32 %ebp.1.reload, -12, !insn.addr !6909
  %127 = inttoptr i32 %126 to i32*, !insn.addr !6909
  %128 = load i32, i32* %127, align 4, !insn.addr !6909
  %129 = add i32 %esp.1.reload, -8, !insn.addr !6909
  %130 = inttoptr i32 %129 to i32*, !insn.addr !6909
  store i32 %128, i32* %130, align 4, !insn.addr !6909
  %131 = call i32 @__asm_in(i32 147), !insn.addr !6910
  %132 = call i32 @function_1007bd1(), !insn.addr !6911
  %133 = load i32, i32* %.pre-phi16.pre-phi.reload, align 4, !insn.addr !6907
  store i32 %133, i32* %130, align 4, !insn.addr !6907
  %134 = inttoptr i32 %126 to i64*, !insn.addr !6912
  %135 = load i64, i64* %134, align 4, !insn.addr !6912
  %136 = call i32 @__asm_bound(i64 %135), !insn.addr !6912
  %137 = add i32 %ebp.1.reload, -1991182267, !insn.addr !6913
  %138 = inttoptr i32 %137 to i32*, !insn.addr !6913
  %139 = load i32, i32* %138, align 4, !insn.addr !6913
  %140 = add i32 %139, -1, !insn.addr !6913
  store i32 %140, i32* %138, align 4, !insn.addr !6913
  %141 = add nsw i32 %30, -127, !insn.addr !6914
  %142 = add i32 %141, %edi.1.reload, !insn.addr !6915
  %143 = inttoptr i32 %142 to i8*, !insn.addr !6915
  %144 = load i8, i8* %143, align 1, !insn.addr !6915
  %145 = mul i8 %144, 2, !insn.addr !6915
  store i8 %145, i8* %143, align 1, !insn.addr !6915
  ret i32 %132, !insn.addr !6916

dec_label_pc_1010da8:                             ; preds = %dec_label_pc_1010d1f
  br i1 %96, label %dec_label_pc_1010e5e, label %dec_label_pc_1010dae, !insn.addr !6917

dec_label_pc_1010dae:                             ; preds = %dec_label_pc_1010da8
  %146 = load i32, i32* inttoptr (i32 -1711153172 to i32*), align 4, !insn.addr !6918
  %147 = inttoptr i32 %87 to i32*, !insn.addr !6918
  store i32 %146, i32* %147, align 4, !insn.addr !6918
  %148 = inttoptr i32 %83 to i32*, !insn.addr !6919
  %149 = load i32, i32* %148, align 4, !insn.addr !6919
  %150 = add i32 %87, -4, !insn.addr !6919
  %151 = inttoptr i32 %150 to i32*, !insn.addr !6919
  store i32 %149, i32* %151, align 4, !insn.addr !6919
  %152 = call i32 @function_100c05c(), !insn.addr !6920
  %153 = add i32 %67, %24, !insn.addr !6921
  %154 = icmp ult i32 %152, 872349696, !insn.addr !6922
  %155 = call i32 @function_1007c18(), !insn.addr !6923
  store i32 %153, i32* %148, align 4, !insn.addr !6924
  %156 = select i1 %154, i32 -399472636, i32 -399472637, !insn.addr !6925
  %157 = sub i32 %155, %156, !insn.addr !6925
  call void @__asm_out.4(i32 109, i32 %157), !insn.addr !6926
  ret i32 %157, !insn.addr !6926

dec_label_pc_1010e5e:                             ; preds = %dec_label_pc_1010da8
  %158 = add i32 %87, 8, !insn.addr !6927
  %159 = inttoptr i32 %158 to i32*, !insn.addr !6928
  %160 = load i32, i32* %159, align 4, !insn.addr !6928
  %161 = or i32 %22, 34048, !insn.addr !6929
  %162 = add i32 %160, -24, !insn.addr !6930
  %163 = inttoptr i32 %162 to i32*, !insn.addr !6930
  %164 = load i32, i32* %163, align 4, !insn.addr !6930
  %165 = add i32 %164, %161, !insn.addr !6930
  store i32 %165, i32* %163, align 4, !insn.addr !6930
  ret i32 %ebp.0.reload, !insn.addr !6931
}

define i32 @function_1010ec7() local_unnamed_addr {
dec_label_pc_1010ec7:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, %0, !insn.addr !6932
  %3 = inttoptr i32 %1 to i32*, !insn.addr !6932
  store i32 %2, i32* %3, align 4, !insn.addr !6932
  %4 = call i32 @function_100bd6f(i32 %0), !insn.addr !6933
  %5 = call i32 @function_100bbd4(), !insn.addr !6934
  %6 = call i32 @unknown_650a33(i32 %0), !insn.addr !6935
  ret i32 %6, !insn.addr !6936
}

define i32 @function_1010ee5(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1010ee5:
  %storemerge3.in.reg2mem = alloca i8, !insn.addr !6937
  %az.1.reg2mem = alloca i1, !insn.addr !6937
  %eax.0.reg2mem = alloca i32, !insn.addr !6937
  %az.0.reg2mem = alloca i1, !insn.addr !6937
  %cf.0.reg2mem = alloca i1, !insn.addr !6937
  %.reg2mem = alloca i8, !insn.addr !6937
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-11 = alloca i32, align 4
  %4 = call i8 @__decompiler_undefined_function_8()
  %stack_var_-4 = alloca i32, align 4
  %5 = icmp ult i32* %stack_var_-4, inttoptr (i32 16 to i32*), !insn.addr !6938
  %6 = inttoptr i32 %1 to i32*, !insn.addr !6939
  %7 = add i32 %0, 86, !insn.addr !6940
  %8 = inttoptr i32 %7 to i8*, !insn.addr !6940
  %.promoted = load i8, i8* %8, align 1
  store i8 %.promoted, i8* %.reg2mem, !insn.addr !6939
  store i1 %5, i1* %cf.0.reg2mem, !insn.addr !6939
  store i1 false, i1* %az.0.reg2mem, !insn.addr !6939
  br label %dec_label_pc_1010eee, !insn.addr !6939

dec_label_pc_1010eee:                             ; preds = %20, %dec_label_pc_1010ee5
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %az.0.reload = load i1, i1* %az.0.reg2mem
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %.reload = load i8, i8* %.reg2mem
  %9 = trunc i32 %eax.0.reload to i8, !insn.addr !6941
  %10 = and i8 %9, 14, !insn.addr !6941
  %11 = icmp ugt i8 %10, 9, !insn.addr !6941
  %12 = or i1 %az.0.reload, %11, !insn.addr !6941
  %13 = icmp ugt i8 %9, -103
  %14 = or i1 %cf.0.reload, %13
  br i1 %12, label %15, label %17, !insn.addr !6941

; <label>:15:                                     ; preds = %dec_label_pc_1010eee
  %.v = select i1 %14, i8 102, i8 6
  %16 = add i8 %.v, %9, !insn.addr !6941
  store i1 true, i1* %az.1.reg2mem, !insn.addr !6941
  store i8 %16, i8* %storemerge3.in.reg2mem, !insn.addr !6941
  br label %20, !insn.addr !6941

; <label>:17:                                     ; preds = %dec_label_pc_1010eee
  %18 = add i8 %9, 96, !insn.addr !6941
  %19 = select i1 %14, i8 %18, i8 %9, !insn.addr !6941
  store i1 false, i1* %az.1.reg2mem, !insn.addr !6941
  store i8 %19, i8* %storemerge3.in.reg2mem, !insn.addr !6941
  br label %20, !insn.addr !6941

; <label>:20:                                     ; preds = %15, %17
  %21 = sub i8 0, %.reload
  %22 = sub i8 %21, 1
  %storemerge3.in.reload = load i8, i8* %storemerge3.in.reg2mem
  %az.1.reload = load i1, i1* %az.1.reg2mem
  %storemerge3 = zext i8 %storemerge3.in.reload to i32
  %storemerge = icmp eq i8 %storemerge3.in.reload, 0
  %23 = icmp eq i1 %storemerge, false, !insn.addr !6942
  store i8 %22, i8* %.reg2mem, !insn.addr !6942
  store i1 %14, i1* %cf.0.reg2mem, !insn.addr !6942
  store i1 %az.1.reload, i1* %az.0.reg2mem, !insn.addr !6942
  store i32 %storemerge3, i32* %eax.0.reg2mem, !insn.addr !6942
  br i1 %23, label %dec_label_pc_1010eee, label %dec_label_pc_1010efa, !insn.addr !6942

dec_label_pc_1010efa:                             ; preds = %20
  %24 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !6943
  store i8 %22, i8* %8, align 1
  %25 = inttoptr i32 %0 to i32*, !insn.addr !6944
  store i32 %24, i32* %25, align 4, !insn.addr !6944
  %26 = call i32 @function_1007bd1(), !insn.addr !6945
  %27 = call i32 @function_1007c26(), !insn.addr !6946
  %28 = sext i16 %arg1 to i32, !insn.addr !6947
  %29 = trunc i32 %2 to i16, !insn.addr !6948
  call void @__asm_out.2(i16 %29, i32 %28), !insn.addr !6948
  %30 = add i32 %28, -1959752957, !insn.addr !6949
  %31 = inttoptr i32 %30 to i32*, !insn.addr !6949
  %32 = load i32, i32* %31, align 4, !insn.addr !6949
  %33 = add i32 %32, %1, !insn.addr !6949
  store i32 %33, i32* %31, align 4, !insn.addr !6949
  %34 = mul i32 %0, 8, !insn.addr !6950
  %35 = add nsw i32 %28, -117, !insn.addr !6950
  %36 = add i32 %35, %34, !insn.addr !6950
  %37 = inttoptr i32 %36 to i32*, !insn.addr !6950
  %38 = load i32, i32* %37, align 4, !insn.addr !6950
  %39 = icmp slt i32 %1, 1, !insn.addr !6951
  br i1 %39, label %40, label %dec_label_pc_1010f3a, !insn.addr !6951

; <label>:40:                                     ; preds = %dec_label_pc_1010efa
  %41 = call i32 @function_1010ec7(), !insn.addr !6951
  br label %dec_label_pc_1010f3a, !insn.addr !6951

dec_label_pc_1010f3a:                             ; preds = %40, %dec_label_pc_1010efa
  %42 = add i32 %3, -511457137, !insn.addr !6952
  %43 = inttoptr i32 %42 to i32*, !insn.addr !6952
  %44 = load i32, i32* %43, align 4, !insn.addr !6952
  %45 = call i32 @function_1007bc1(i32 %44), !insn.addr !6953
  %46 = add i32 %27, -41, !insn.addr !6954
  %47 = inttoptr i32 %46 to i32*, !insn.addr !6954
  store i32 0, i32* %47, align 4, !insn.addr !6954
  %48 = add nsw i32 %28, 1, !insn.addr !6955
  %49 = trunc i32 %48 to i8, !insn.addr !6956
  %50 = add i8 %49, -1, !insn.addr !6956
  %51 = xor i8 %50, %49, !insn.addr !6956
  %52 = sub i8 0, %49, !insn.addr !6956
  %53 = and i8 %51, %52, !insn.addr !6956
  %54 = icmp slt i8 %53, 0, !insn.addr !6956
  %55 = and i32 %48, -256, !insn.addr !6956
  br i1 %54, label %dec_label_pc_1010f6c, label %dec_label_pc_1010f68, !insn.addr !6957

dec_label_pc_1010f68:                             ; preds = %dec_label_pc_1010f3a
  %56 = zext i8 %50 to i32, !insn.addr !6956
  %57 = or i32 %55, %56, !insn.addr !6956
  ret i32 %57, !insn.addr !6957

dec_label_pc_1010f6c:                             ; preds = %dec_label_pc_1010f3a
  %58 = inttoptr i32 %28 to i32*, !insn.addr !6958
  %59 = load i32, i32* %58, align 4, !insn.addr !6959
  %60 = udiv i32 %3, 512, !insn.addr !6960
  %61 = add i32 %59, 2039085133, !insn.addr !6961
  %62 = inttoptr i32 %61 to i32*, !insn.addr !6961
  %63 = load i32, i32* %62, align 4, !insn.addr !6961
  %64 = add i32 %63, -1, !insn.addr !6961
  store i32 %64, i32* %62, align 4, !insn.addr !6961
  %65 = add nsw i32 %28, 22
  %66 = and i32 %65, 255, !insn.addr !6962
  %67 = or i32 %55, %66, !insn.addr !6962
  %68 = and i32 %3, -4, !insn.addr !6963
  %69 = add i32 %59, %68, !insn.addr !6963
  %70 = inttoptr i32 %69 to i32*, !insn.addr !6963
  %71 = load i32, i32* %70, align 4, !insn.addr !6963
  %72 = xor i32 %71, %67, !insn.addr !6963
  store i32 %72, i32* %70, align 4, !insn.addr !6963
  %73 = add nsw i32 %67, 4, !insn.addr !6964
  %74 = inttoptr i32 %73 to i32*, !insn.addr !6964
  %75 = load i32, i32* %74, align 4, !insn.addr !6964
  %76 = trunc i32 %60 to i8, !insn.addr !6965
  %77 = add i8 %4, %76, !insn.addr !6965
  %78 = and i8 %77, 3
  %79 = zext i8 %78 to i32, !insn.addr !6966
  %80 = inttoptr i32 %75 to i8*, !insn.addr !6967
  call void @__asm_rep_movsb_memcpy(i8* %80, i8* inttoptr (i32 1166779636 to i8*), i32 %79), !insn.addr !6967
  %81 = inttoptr i32 %59 to i32*, !insn.addr !6968
  %82 = load i32, i32* %81, align 4, !insn.addr !6968
  %83 = call i32 @function_100ded4(i32* nonnull %stack_var_-11, i32 %82, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !6969
  %84 = call i32 @unknown_eca26826(), !insn.addr !6970
  %85 = trunc i32 %38 to i16, !insn.addr !6971
  %86 = call i8 @__asm_insb(i16 %85), !insn.addr !6971
  call void @llvm.trap()
  unreachable
}

define i32 @function_1010fcd() local_unnamed_addr {
dec_label_pc_1010fcd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1010fd7() local_unnamed_addr {
dec_label_pc_1010fd7:
  %0 = call i32 @function_1010fcd(), !insn.addr !6972
  ret i32 %0, !insn.addr !6972
}

define i32 @function_1011036() local_unnamed_addr {
dec_label_pc_1011036:
  %0 = call i32 @function_8ca7033d(), !insn.addr !6973
  ret i32 %0, !insn.addr !6973
}

define i32 @function_101103c() local_unnamed_addr {
dec_label_pc_101103c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1011050() local_unnamed_addr {
dec_label_pc_1011050:
  %0 = call i32 @function_458b0004(), !insn.addr !6974
  ret i32 %0, !insn.addr !6974
}

define i32 @function_1011080() local_unnamed_addr {
dec_label_pc_1011080:
  %0 = call i32 @function_9ba68587(), !insn.addr !6975
  ret i32 %0, !insn.addr !6975
}

define i32 @function_10110bf() local_unnamed_addr {
dec_label_pc_10110bf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 12, !insn.addr !6976
  %2 = inttoptr i32 %1 to i32*, !insn.addr !6976
  %3 = call i32 @function_10110d8(), !insn.addr !6977
  ret i32 %3, !insn.addr !6977
}

define i32 @function_10110c4() local_unnamed_addr {
dec_label_pc_10110c4:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -16, !insn.addr !6978
  ret i32 %1, !insn.addr !6979
}

define i32 @function_10110d8() local_unnamed_addr {
dec_label_pc_10110d8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = add i32 %0, -4, !insn.addr !6980
  %3 = inttoptr i32 %2 to i32*, !insn.addr !6980
  %4 = load i32, i32* %3, align 4, !insn.addr !6980
  %5 = add i32 %4, 770220804, !insn.addr !6981
  %6 = inttoptr i32 %5 to i32*, !insn.addr !6981
  %7 = load i32, i32* %6, align 4, !insn.addr !6981
  %8 = select i1 %1, i32 19, i32 18, !insn.addr !6981
  %9 = add i32 %7, %8, !insn.addr !6981
  store i32 %9, i32* %6, align 4, !insn.addr !6981
  %10 = inttoptr i32 %4 to i8*, !insn.addr !6982
  %11 = load i8, i8* %10, align 1, !insn.addr !6982
  %12 = trunc i32 %4 to i8, !insn.addr !6982
  %13 = add i8 %11, %12, !insn.addr !6982
  store i8 %13, i8* %10, align 1, !insn.addr !6982
  ret i32 %4, !insn.addr !6983
}

define i32 @function_10110ea() local_unnamed_addr {
dec_label_pc_10110ea:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %1, -2, !insn.addr !6984
  %3 = inttoptr i32 %2 to i32*, !insn.addr !6984
  %4 = load i32, i32* %3, align 4, !insn.addr !6984
  %5 = icmp ult i32 %4, %0, !insn.addr !6985
  %6 = icmp eq i1 %5, false, !insn.addr !6986
  br i1 %6, label %dec_label_pc_10110f7, label %dec_label_pc_10110f1, !insn.addr !6986

dec_label_pc_10110f1:                             ; preds = %dec_label_pc_10110ea
  %7 = add i32 %4, 1, !insn.addr !6987
  %8 = add i32 %1, 12, !insn.addr !6988
  %9 = inttoptr i32 %8 to i32*, !insn.addr !6988
  store i32 %7, i32* %9, align 4, !insn.addr !6988
  ret i32 %7, !insn.addr !6989

dec_label_pc_10110f7:                             ; preds = %dec_label_pc_10110ea
  ret i32 %4, !insn.addr !6989
}

define i32 @function_10110fb(i32 %arg1) local_unnamed_addr {
dec_label_pc_10110fb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = udiv i32 %1, 256, !insn.addr !6990
  %5 = trunc i32 %4 to i8, !insn.addr !6990
  %6 = icmp ult i8 %5, 53, !insn.addr !6990
  %7 = add i32 %3, 1357961357, !insn.addr !6991
  %8 = inttoptr i32 %7 to i8*, !insn.addr !6991
  %9 = load i8, i8* %8, align 1, !insn.addr !6991
  %10 = trunc i32 %2 to i8, !insn.addr !6991
  %.neg1 = sext i1 %6 to i8
  %.neg2 = sub i8 %9, %10, !insn.addr !6991
  %11 = add i8 %.neg2, %.neg1, !insn.addr !6991
  store i8 %11, i8* %8, align 1, !insn.addr !6991
  %12 = call i32 @function_1011a9a(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !6992
  %13 = add i32 %0, -4, !insn.addr !6993
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6993
  %15 = load i32, i32* %14, align 4, !insn.addr !6993
  ret i32 %15, !insn.addr !6994
}

define i32 @function_10111c0() local_unnamed_addr {
dec_label_pc_10111c0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10111c8() local_unnamed_addr {
dec_label_pc_10111c8:
  %eax.1.reg2mem = alloca i32, !insn.addr !6995
  %eax.0.reg2mem = alloca i32, !insn.addr !6995
  %0 = call i32 @unknown_3cf25c(), !insn.addr !6995
  %1 = icmp eq i32 %0, 0, !insn.addr !6996
  store i32 %0, i32* %eax.0.reg2mem, !insn.addr !6997
  br i1 %1, label %2, label %dec_label_pc_10111d5, !insn.addr !6997

; <label>:2:                                      ; preds = %dec_label_pc_10111c8
  %3 = call i32 @function_1011270(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !6997
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !6997
  br label %dec_label_pc_10111d5, !insn.addr !6997

dec_label_pc_10111d5:                             ; preds = %2, %dec_label_pc_10111c8
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %4 = add i32 %eax.0.reload, 1, !insn.addr !6998
  %5 = xor i32 %eax.0.reload, -2147483648
  %6 = and i32 %4, %5, !insn.addr !6998
  %7 = icmp slt i32 %6, 0, !insn.addr !6998
  %8 = icmp slt i32 %4, 0, !insn.addr !6998
  %9 = icmp eq i1 %8, %7, !insn.addr !6999
  store i32 %4, i32* %eax.1.reg2mem, !insn.addr !6999
  br i1 %9, label %10, label %dec_label_pc_10111d8, !insn.addr !6999

; <label>:10:                                     ; preds = %dec_label_pc_10111d5
  %11 = call i32 @function_10111c0(), !insn.addr !6999
  store i32 %11, i32* %eax.1.reg2mem, !insn.addr !6999
  br label %dec_label_pc_10111d8, !insn.addr !6999

dec_label_pc_10111d8:                             ; preds = %10, %dec_label_pc_10111d5
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !7000
}

define i32 @function_10111e8() local_unnamed_addr {
dec_label_pc_10111e8:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call x86_fp80 @__decompiler_undefined_function_6()
  %3 = add i32 %1, -117, !insn.addr !7001
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7001
  %5 = load i32, i32* %4, align 4, !insn.addr !7001
  %6 = add i32 %5, 1, !insn.addr !7001
  store i32 %6, i32* %4, align 4, !insn.addr !7001
  %7 = fptosi x86_fp80 %2 to i64, !insn.addr !7002
  %8 = add i32 %0, 1332715832, !insn.addr !7002
  %9 = inttoptr i32 %8 to i64*, !insn.addr !7002
  store i64 %7, i64* %9, align 4, !insn.addr !7002
  %10 = add i32 %1, %0, !insn.addr !7003
  %11 = inttoptr i32 %0 to i32*, !insn.addr !7003
  store i32 %10, i32* %11, align 4, !insn.addr !7003
  ret i32 %1, !insn.addr !7004
}

define i32 @function_10111fd(i32 %arg1) local_unnamed_addr {
dec_label_pc_10111fd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7005
}

define i32 @function_101120a(i32 %arg1) local_unnamed_addr {
dec_label_pc_101120a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7006
}

define i32 @function_101121b() local_unnamed_addr {
dec_label_pc_101121b:
  %0 = call i32 @function_8c5d05cf(), !insn.addr !7007
  ret i32 %0, !insn.addr !7007
}

define i32 @function_1011265() local_unnamed_addr {
dec_label_pc_1011265:
  %0 = call i32 @function_8c47056c(), !insn.addr !7008
  ret i32 %0, !insn.addr !7008
}

define i32 @function_1011270(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1011270:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7009
}

define i32 @function_1011288() local_unnamed_addr {
dec_label_pc_1011288:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !7010
  %eax.0.reg2mem = alloca i32, !insn.addr !7010
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %7 = add i32 %3, -164422075, !insn.addr !7010
  %8 = inttoptr i32 %7 to i32*, !insn.addr !7010
  %9 = load i32, i32* %8, align 4, !insn.addr !7010
  %10 = add i32 %9, -1, !insn.addr !7010
  store i32 %10, i32* %8, align 4, !insn.addr !7010
  %11 = call %0 @__asm_cpuid(i32 %4), !insn.addr !7011
  %12 = call i32 @__asm_in(i32 0), !insn.addr !7012
  %13 = add i32 %12, -2, !insn.addr !7013
  %14 = icmp eq i32 %13, 0, !insn.addr !7013
  %15 = icmp eq i1 %14, false, !insn.addr !7014
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !7014
  br i1 %15, label %16, label %dec_label_pc_101129e, !insn.addr !7014

; <label>:16:                                     ; preds = %dec_label_pc_1011288
  %17 = call i32 @function_1017d65(), !insn.addr !7014
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !7014
  br label %dec_label_pc_101129e, !insn.addr !7014

dec_label_pc_101129e:                             ; preds = %16, %dec_label_pc_1011288
  %18 = zext i1 %6 to i32, !insn.addr !7015
  %19 = add i32 %4, %1, !insn.addr !7015
  %20 = add i32 %19, %18, !insn.addr !7015
  %21 = extractvalue %0 %11, 1, !insn.addr !7011
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %22 = inttoptr i32 %21 to i32*, !insn.addr !7016
  %23 = load i32, i32* %22, align 4, !insn.addr !7016
  store i32 %23, i32* %stack_var_-8, align 4, !insn.addr !7016
  %24 = icmp eq i32 %eax.0.reload, 0, !insn.addr !7017
  store i32* %stack_var_-8, i32** %esp.0.in.reg2mem, !insn.addr !7018
  br i1 %24, label %dec_label_pc_10112b7, label %dec_label_pc_10112b3, !insn.addr !7018

dec_label_pc_10112b3:                             ; preds = %dec_label_pc_101129e
  store i32 %20, i32* %stack_var_-12, align 4, !insn.addr !7019
  %25 = add i32 %2, 37, !insn.addr !7020
  %26 = inttoptr i32 %25 to i32*, !insn.addr !7020
  store i32 %20, i32* %26, align 4, !insn.addr !7020
  store i32* %stack_var_-12, i32** %esp.0.in.reg2mem, !insn.addr !7020
  br label %dec_label_pc_10112b7, !insn.addr !7020

dec_label_pc_10112b7:                             ; preds = %dec_label_pc_10112b3, %dec_label_pc_101129e
  %27 = extractvalue %0 %11, 3, !insn.addr !7011
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %28 = call i32 @function_1007bd1(), !insn.addr !7021
  %29 = add i32 %2, 12, !insn.addr !7022
  %30 = inttoptr i32 %29 to i32*, !insn.addr !7022
  store i32 %20, i32* %30, align 4, !insn.addr !7022
  %31 = call i32 @unknown_74007c26(), !insn.addr !7023
  %32 = add i32 %21, -399442164, !insn.addr !7024
  %33 = inttoptr i32 %32 to i32*, !insn.addr !7024
  store i32 %31, i32* %33, align 4, !insn.addr !7024
  %34 = add i32 %21, -1064760233, !insn.addr !7025
  %35 = inttoptr i32 %34 to i32*, !insn.addr !7025
  %36 = load i32, i32* %35, align 4, !insn.addr !7025
  %37 = add i32 %36, -1, !insn.addr !7025
  store i32 %37, i32* %35, align 4, !insn.addr !7025
  %38 = load i32, i32* inttoptr (i32 20664280 to i32*), align 8, !insn.addr !7026
  %39 = inttoptr i32 %38 to i32*, !insn.addr !7027
  %40 = load i32, i32* %39, align 4, !insn.addr !7027
  %41 = add i32 %40, 4, !insn.addr !7028
  %42 = inttoptr i32 %41 to i32*, !insn.addr !7028
  %43 = load i32, i32* %42, align 4, !insn.addr !7028
  %44 = add i32 %esp.0, -4, !insn.addr !7028
  %45 = inttoptr i32 %44 to i32*, !insn.addr !7028
  store i32 %43, i32* %45, align 4, !insn.addr !7028
  %46 = call i32 @unknown_21d9fb(), !insn.addr !7029
  %47 = load i32, i32* %30, align 4, !insn.addr !7030
  %48 = inttoptr i32 %47 to i32*, !insn.addr !7031
  store i32 %46, i32* %48, align 4, !insn.addr !7031
  %49 = load i32, i32* inttoptr (i32 -46903336 to i32*), align 8, !insn.addr !7032
  %50 = inttoptr i32 %49 to i32*, !insn.addr !7033
  %51 = load i32, i32* %50, align 4, !insn.addr !7033
  %52 = mul i32 %51, -1442191989, !insn.addr !7033
  %53 = or i32 %49, 139, !insn.addr !7034
  %54 = xor i32 %53, 210595897, !insn.addr !7035
  %55 = inttoptr i32 %54 to i8*, !insn.addr !7036
  %56 = load i8, i8* %55, align 2, !insn.addr !7036
  %57 = trunc i32 %54 to i8, !insn.addr !7036
  %58 = add i8 %56, %57, !insn.addr !7036
  store i8 %58, i8* %55, align 2, !insn.addr !7036
  %59 = add i32 %21, -1276528703, !insn.addr !7037
  %60 = inttoptr i32 %59 to i8*, !insn.addr !7037
  %61 = load i8, i8* %60, align 1, !insn.addr !7037
  %62 = trunc i32 %47 to i8, !insn.addr !7037
  %63 = add i8 %61, %62, !insn.addr !7037
  store i8 %63, i8* %60, align 1, !insn.addr !7037
  %64 = inttoptr i32 %52 to i8*, !insn.addr !7038
  %65 = inttoptr i32 %0 to i8*, !insn.addr !7038
  call void @__asm_rep_movsd_memcpy(i8* %65, i8* %64, i32 %47), !insn.addr !7038
  %66 = select i1 %5, i32 -4, i32 4, !insn.addr !7038
  %67 = mul i32 %47, %66, !insn.addr !7038
  %68 = add i32 %67, %0, !insn.addr !7038
  %69 = inttoptr i32 %68 to i8*, !insn.addr !7039
  call void @__asm_rep_movsb_memcpy(i8* %69, i8* %69, i32 2), !insn.addr !7039
  %70 = select i1 %5, i32 -2, i32 2, !insn.addr !7039
  %71 = add i32 %68, %70, !insn.addr !7039
  %72 = add i32 %2, 13, !insn.addr !7040
  %73 = inttoptr i32 %72 to i32*, !insn.addr !7040
  %74 = load i32, i32* %73, align 4, !insn.addr !7040
  %75 = add i32 %74, 4, !insn.addr !7041
  %76 = inttoptr i32 %75 to i32*, !insn.addr !7041
  %77 = load i32, i32* %76, align 4, !insn.addr !7041
  %78 = add i32 %esp.0, -8, !insn.addr !7041
  %79 = inttoptr i32 %78 to i32*, !insn.addr !7041
  store i32 %77, i32* %79, align 4, !insn.addr !7041
  %80 = add i32 %21, -1946157208, !insn.addr !7042
  %81 = inttoptr i32 %80 to i32*, !insn.addr !7042
  %82 = load i32, i32* %81, align 4, !insn.addr !7042
  %83 = mul i32 %82, 69, !insn.addr !7042
  %84 = add i32 %esp.0, -12, !insn.addr !7043
  %85 = add i32 %esp.0, -16, !insn.addr !7043
  %86 = add i32 %esp.0, -20, !insn.addr !7043
  %87 = add i32 %esp.0, -24, !insn.addr !7043
  %88 = add i32 %esp.0, -28, !insn.addr !7043
  %89 = add i32 %esp.0, -32, !insn.addr !7043
  %90 = add i32 %esp.0, -36, !insn.addr !7043
  %91 = add i32 %esp.0, -40, !insn.addr !7043
  %92 = inttoptr i32 %84 to i32*, !insn.addr !7043
  store i32 %74, i32* %92, align 4, !insn.addr !7043
  %93 = inttoptr i32 %85 to i32*, !insn.addr !7043
  store i32 0, i32* %93, align 4, !insn.addr !7043
  %94 = inttoptr i32 %86 to i32*, !insn.addr !7043
  store i32 %27, i32* %94, align 4, !insn.addr !7043
  %95 = inttoptr i32 %87 to i32*, !insn.addr !7043
  store i32 %21, i32* %95, align 4, !insn.addr !7043
  %96 = inttoptr i32 %88 to i32*, !insn.addr !7043
  store i32 %78, i32* %96, align 4, !insn.addr !7043
  %97 = inttoptr i32 %89 to i32*, !insn.addr !7043
  store i32 %83, i32* %97, align 4, !insn.addr !7043
  %98 = inttoptr i32 %90 to i32*, !insn.addr !7043
  store i32 %71, i32* %98, align 4, !insn.addr !7043
  %99 = inttoptr i32 %91 to i32*, !insn.addr !7043
  store i32 %71, i32* %99, align 4, !insn.addr !7043
  %100 = load i32, i32* @global_var_1014fd8, align 4, !insn.addr !7044
  %101 = add i32 %100, 4, !insn.addr !7045
  %102 = inttoptr i32 %101 to i32*, !insn.addr !7045
  %103 = load i32, i32* %102, align 4, !insn.addr !7045
  ret i32 %103, !insn.addr !7046
}

define i32 @function_101132b() local_unnamed_addr {
dec_label_pc_101132b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 1099503617, !insn.addr !7047
  %3 = inttoptr i32 %2 to i32*, !insn.addr !7047
  %4 = load i32, i32* %3, align 4, !insn.addr !7047
  %5 = add i32 %4, -1, !insn.addr !7047
  store i32 %5, i32* %3, align 4, !insn.addr !7047
  call void @__asm_into(i32 %1), !insn.addr !7048
  %6 = call i32 @function_b2017228(), !insn.addr !7049
  ret i32 %6, !insn.addr !7049
}

define i32 @function_1011348(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011348:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = mul i32 %0, 2, !insn.addr !7050
  %2 = lshr i32 %0, 31, !insn.addr !7050
  %3 = or i32 %2, %1, !insn.addr !7050
  %4 = inttoptr i32 %0 to i32*, !insn.addr !7050
  store i32 %3, i32* %4, align 4, !insn.addr !7050
  ret i32 %0, !insn.addr !7051
}

define i32 @function_101134e() local_unnamed_addr {
dec_label_pc_101134e:
  %0 = call i32 @function_8ca70655(), !insn.addr !7052
  ret i32 %0, !insn.addr !7052
}

define i32 @function_1011361() local_unnamed_addr {
dec_label_pc_1011361:
  %0 = call i32 @function_e30113e5(i16 -1), !insn.addr !7053
  ret i32 %0, !insn.addr !7053
}

define i32 @function_101137b() local_unnamed_addr {
dec_label_pc_101137b:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i16 @__decompiler_undefined_function_1()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-55 = alloca i32, align 4
  %stack_var_-23 = alloca i32, align 4
  %8 = call i32 @function_1008d44(), !insn.addr !7054
  %9 = trunc i32 %0 to i8
  %10 = lshr i8 %9, 7, !insn.addr !7055
  %11 = mul i8 %9, 2, !insn.addr !7055
  %12 = or i8 %10, %11, !insn.addr !7055
  %13 = inttoptr i32 %0 to i8*, !insn.addr !7055
  store i8 %12, i8* %13, align 1, !insn.addr !7055
  %14 = call i32 @unknown_bf007bd1(), !insn.addr !7056
  %15 = inttoptr i32 %4 to i32*, !insn.addr !7057
  store i32 %14, i32* %15, align 4, !insn.addr !7057
  %16 = or i32 %14, 255, !insn.addr !7058
  %17 = mul i32 %3, 256
  %18 = and i32 %17, 65280
  %19 = add i32 %4, 1339334960, !insn.addr !7059
  %20 = inttoptr i32 %19 to i8*, !insn.addr !7059
  %21 = load i8, i8* %20, align 1, !insn.addr !7059
  %22 = trunc i32 %4 to i8, !insn.addr !7059
  %23 = and i8 %21, %22, !insn.addr !7059
  store i8 %23, i8* %20, align 1, !insn.addr !7059
  %24 = add i32 %16, %4, !insn.addr !7060
  store i32 %24, i32* %15, align 4, !insn.addr !7060
  %25 = inttoptr i32 %16 to i32*, !insn.addr !7061
  %26 = load i32, i32* %25, align 4, !insn.addr !7061
  %27 = add i32 %26, 4, !insn.addr !7062
  %28 = inttoptr i32 %27 to i32*, !insn.addr !7062
  %29 = load i32, i32* %28, align 4, !insn.addr !7062
  %30 = call i32 @unknown_87007bfb(i32 %29, i32 1166802759, i16 %6), !insn.addr !7063
  %31 = load i32, i32* inttoptr (i32 -1459617780 to i32*), align 4, !insn.addr !7064
  %32 = inttoptr i32 %31 to i32*, !insn.addr !7065
  %33 = trunc i32 %30 to i8, !insn.addr !7066
  %34 = udiv i8 %33, 79, !insn.addr !7066
  %35 = urem i8 %33, 79, !insn.addr !7066
  %36 = zext i8 %35 to i32, !insn.addr !7066
  %37 = and i32 %30, -65536, !insn.addr !7066
  %38 = or i32 %37, %36, !insn.addr !7066
  %39 = zext i8 %34 to i32, !insn.addr !7066
  %40 = mul i32 %39, 256, !insn.addr !7066
  %41 = or i32 %38, %40, !insn.addr !7066
  %42 = add i32 %41, %30, !insn.addr !7067
  store i32 %42, i32* %32, align 4, !insn.addr !7067
  %43 = load i8, i8* inttoptr (i32 1166738510 to i8*), align 2, !insn.addr !7068
  %44 = udiv i32 %31, 256, !insn.addr !7068
  %45 = trunc i32 %44 to i8, !insn.addr !7068
  %46 = xor i8 %43, %45, !insn.addr !7068
  store i8 %46, i8* inttoptr (i32 1166738510 to i8*), align 2, !insn.addr !7068
  %.masked2 = and i32 %2, -256
  %47 = xor i32 %18, %.masked2, !insn.addr !7069
  %48 = or i32 %47, 139, !insn.addr !7069
  %49 = add i32 %0, -117, !insn.addr !7070
  %50 = inttoptr i32 %49 to i8*, !insn.addr !7070
  %51 = load i8, i8* %50, align 1, !insn.addr !7070
  %52 = udiv i32 %3, 256, !insn.addr !7070
  %53 = trunc i32 %52 to i8, !insn.addr !7070
  %54 = add i8 %51, %53, !insn.addr !7070
  store i8 %54, i8* %50, align 1, !insn.addr !7070
  %55 = add i32 %3, 35584
  %56 = and i32 %55, 65280, !insn.addr !7071
  %57 = and i32 %3, -65281, !insn.addr !7071
  %58 = or i32 %56, %57, !insn.addr !7071
  %59 = inttoptr i32 %0 to i32*, !insn.addr !7072
  %60 = select i1 %7, i32 -4, i32 4, !insn.addr !7072
  %61 = add i32 %60, %0, !insn.addr !7072
  %62 = add i32 %60, %1, !insn.addr !7072
  %63 = and i32 %36, 3, !insn.addr !7073
  %64 = load i32, i32* inttoptr (i32 -1459617900 to i32*), align 4, !insn.addr !7074
  %65 = add i32 %64, 67, !insn.addr !7075
  %66 = inttoptr i32 %65 to i32*, !insn.addr !7075
  %67 = load i32, i32* %66, align 4, !insn.addr !7075
  store i32 %67, i32* %stack_var_-23, align 4, !insn.addr !7075
  %68 = call i32 @function_1007bc1(i32 %67), !insn.addr !7076
  %69 = load i32, i32* inttoptr (i32 -1459617780 to i32*), align 4, !insn.addr !7077
  store i32 %61, i32* %stack_var_-55, align 4, !insn.addr !7078
  %70 = call i32 @unknown_747b7a(i16 %5, i32 %61, i32 %62, i32 -1459617793, i32* nonnull %stack_var_-23, i32 %48, i32 %58, i32 %63, i32 %69), !insn.addr !7079
  %71 = add i32 %61, 12, !insn.addr !7080
  %72 = inttoptr i32 %71 to i32*, !insn.addr !7080
  %73 = load i32, i32* %72, align 4, !insn.addr !7080
  %74 = or i32 %63, 4, !insn.addr !7081
  %75 = inttoptr i32 %74 to i32*, !insn.addr !7081
  store i32 %70, i32* %75, align 4, !insn.addr !7081
  %76 = add i32 %73, -1987375794, !insn.addr !7082
  %77 = inttoptr i32 %76 to i32*, !insn.addr !7082
  store i32 %63, i32* %77, align 4, !insn.addr !7082
  %78 = call i32 @function_75a70732(i32* nonnull %stack_var_-55), !insn.addr !7083
  ret i32 %78, !insn.addr !7083
}

define i32 @function_1011437() local_unnamed_addr {
dec_label_pc_1011437:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i16 @__decompiler_undefined_function_1()
  %2 = call i32 @function_100be29(i32 ptrtoint (i32* @0 to i32)), !insn.addr !7084
  %3 = call i32 @function_1007bd1(), !insn.addr !7085
  %4 = call i32 @function_100bd7e(i32 %0, i16 %1), !insn.addr !7086
  %5 = load i32, i32* @global_var_1014fa4, align 4, !insn.addr !7087
  %6 = call i32 @unknown_3e0ee5(i32 %0, i32 %0, i32 %5), !insn.addr !7088
  %7 = add i32 %0, 81, !insn.addr !7089
  %8 = inttoptr i32 %7 to i32*, !insn.addr !7089
  %9 = load i32, i32* %8, align 4, !insn.addr !7089
  %10 = xor i32 %9, %0, !insn.addr !7089
  store i32 %10, i32* %8, align 4, !insn.addr !7089
  ret i32 %6, !insn.addr !7090
}

define i32 @function_10114c5() local_unnamed_addr {
dec_label_pc_10114c5:
  %0 = call i32 @function_8ca707cc(), !insn.addr !7091
  ret i32 %0, !insn.addr !7091
}

define i32 @function_1011502(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011502:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i16 @__decompiler_undefined_function_1()
  %7 = add i32 %5, 132, !insn.addr !7092
  %8 = and i32 %5, -256, !insn.addr !7092
  %9 = and i32 %7, 155, !insn.addr !7093
  %10 = or i32 %9, 100, !insn.addr !7093
  %11 = or i32 %10, %8, !insn.addr !7094
  %12 = inttoptr i32 %11 to i8*, !insn.addr !7095
  %13 = load i8, i8* %12, align 1, !insn.addr !7095
  %14 = trunc i32 %10 to i8, !insn.addr !7095
  %15 = add i8 %13, %14, !insn.addr !7095
  store i8 %15, i8* %12, align 1, !insn.addr !7095
  %16 = udiv i32 %4, 4, !insn.addr !7096
  %17 = inttoptr i32 %1 to i8*, !insn.addr !7097
  %18 = inttoptr i32 %0 to i8*, !insn.addr !7097
  call void @__asm_rep_movsd_memcpy(i8* %18, i8* %17, i32 %16), !insn.addr !7097
  %19 = call i32 @__asm_in(i32 243), !insn.addr !7098
  %20 = call i32 @function_1010ee5(i16 %6, i32 ptrtoint (i32* @0 to i32)), !insn.addr !7099
  %21 = add i32 %2, 111, !insn.addr !7100
  %22 = inttoptr i32 %21 to i32*, !insn.addr !7100
  %23 = load i32, i32* %22, align 4, !insn.addr !7100
  %24 = add i32 %23, 1, !insn.addr !7100
  store i32 %24, i32* %22, align 4, !insn.addr !7100
  %25 = call i32 @function_100e461(), !insn.addr !7101
  %26 = icmp eq i32 %25, 0, !insn.addr !7102
  br i1 %26, label %dec_label_pc_1011554, label %dec_label_pc_1011536, !insn.addr !7103

dec_label_pc_1011536:                             ; preds = %dec_label_pc_1011502
  %27 = call i32 @function_1007bd1(), !insn.addr !7104
  %28 = add i32 %2, -3, !insn.addr !7105
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7105
  store i32 0, i32* %29, align 4, !insn.addr !7105
  %30 = call i32 @__asm_wait(), !insn.addr !7106
  call void @llvm.trap()
  unreachable

dec_label_pc_1011554:                             ; preds = %dec_label_pc_1011502
  %31 = add i32 %2, -3, !insn.addr !7107
  %32 = inttoptr i32 %31 to i32*, !insn.addr !7107
  %33 = load i32, i32* %32, align 4, !insn.addr !7107
  %34 = call i32 @function_100c46f(i32 %3, i32 %33), !insn.addr !7108
  ret i32 %34, !insn.addr !7109
}

define i32 @function_1011569(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011569:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @unknown_7a660a04(), !insn.addr !7110
  %2 = call i32 @unknown_492c8982(), !insn.addr !7111
  %3 = add i32 %2, -1, !insn.addr !7112
  %4 = icmp eq i32 %3, 0, !insn.addr !7112
  %5 = icmp eq i1 %4, false, !insn.addr !7113
  br i1 %5, label %dec_label_pc_1011589, label %dec_label_pc_1011585, !insn.addr !7113

dec_label_pc_1011585:                             ; preds = %dec_label_pc_1011569
  ret i32 %3, !insn.addr !7113

dec_label_pc_1011589:                             ; preds = %dec_label_pc_1011569
  %6 = add i32 %3, %0, !insn.addr !7114
  %7 = inttoptr i32 %0 to i32*, !insn.addr !7114
  store i32 %6, i32* %7, align 4, !insn.addr !7114
  ret i32 %3, !insn.addr !7115
}

define i32 @function_10115ed() local_unnamed_addr {
dec_label_pc_10115ed:
  %0 = call i32 @function_101160f(i32 ptrtoint (i32* @0 to i32)), !insn.addr !7116
  ret i32 %0, !insn.addr !7116
}

define i32 @function_1011603() local_unnamed_addr {
dec_label_pc_1011603:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7117
}

define i32 @function_101160f(i32 %arg1) local_unnamed_addr {
dec_label_pc_101160f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call x86_fp80 @__decompiler_undefined_function_6()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = zext i1 %7 to i32, !insn.addr !7118
  %9 = add i32 %5, 1, !insn.addr !7118
  %10 = add i32 %9, %8, !insn.addr !7118
  %11 = and i32 %10, 255, !insn.addr !7118
  %12 = and i32 %5, -256, !insn.addr !7118
  %13 = or i32 %11, %12, !insn.addr !7118
  %14 = add i32 %3, -40, !insn.addr !7119
  %15 = inttoptr i32 %14 to i32*, !insn.addr !7119
  %16 = load i32, i32* %15, align 4, !insn.addr !7119
  %17 = add i32 %16, %0, !insn.addr !7120
  %18 = icmp sgt i32 %4, %1, !insn.addr !7121
  %spec.select = select i1 %18, i32 %4, i32 %1
  %19 = icmp slt i32 %13, %17, !insn.addr !7122
  %spec.select1 = select i1 %19, i32 %17, i32 %arg1
  %20 = select i1 %19, i32 0, i32 %17
  %spec.select2 = sub i32 %spec.select, %20
  %spec.select3 = select i1 %19, i32 %3, i32 %2
  %spec.select4 = select i1 %19, i32 %13, i32 %spec.select
  %cf.0 = icmp ult i32 %spec.select4, %17
  %21 = udiv i32 %spec.select1, 256, !insn.addr !7123
  %22 = zext i1 %cf.0 to i32, !insn.addr !7123
  %23 = add i32 %21, %spec.select1, !insn.addr !7123
  %24 = add i32 %23, %22, !insn.addr !7123
  %25 = add i32 %spec.select3, -259323829, !insn.addr !7124
  %26 = inttoptr i32 %25 to i32*, !insn.addr !7124
  %27 = load i32, i32* %26, align 4, !insn.addr !7124
  %28 = add i32 %27, -1, !insn.addr !7124
  store i32 %28, i32* %26, align 4, !insn.addr !7124
  %29 = add i32 %spec.select2, 2093038345, !insn.addr !7125
  %30 = inttoptr i32 %29 to i32*, !insn.addr !7125
  %31 = load i32, i32* %30, align 4, !insn.addr !7125
  %32 = add i32 %spec.select2, 9, !insn.addr !7126
  %33 = inttoptr i32 %32 to i32*, !insn.addr !7126
  %34 = add i32 %2, -8, !insn.addr !7127
  %35 = inttoptr i32 %34 to i32*, !insn.addr !7127
  store i32 %31, i32* %35, align 4, !insn.addr !7127
  %36 = add i32 %0, 74156423, !insn.addr !7128
  %37 = inttoptr i32 %36 to i32*, !insn.addr !7128
  %38 = load i32, i32* %37, align 4, !insn.addr !7128
  %39 = add i32 %0, 12, !insn.addr !7129
  %40 = add i32 %2, -24, !insn.addr !7130
  %41 = inttoptr i32 %40 to i32*, !insn.addr !7130
  store i32 %39, i32* %41, align 4, !insn.addr !7130
  %42 = and i32 %39, -256, !insn.addr !7131
  %43 = call i8 @__asm_in.1(i8 -117), !insn.addr !7132
  %44 = sext i8 %43 to i32, !insn.addr !7132
  %45 = or i32 %42, %44, !insn.addr !7132
  %46 = inttoptr i32 %45 to i8*, !insn.addr !7133
  %47 = load i8, i8* %46, align 1, !insn.addr !7133
  %48 = add i8 %47, %43, !insn.addr !7133
  store i8 %48, i8* %46, align 1, !insn.addr !7133
  %49 = mul i32 %38, 2, !insn.addr !7134
  %50 = and i32 %49, -512, !insn.addr !7134
  %51 = or i32 %50, 64, !insn.addr !7135
  %52 = add i32 %1, 998490195, !insn.addr !7135
  %53 = add i32 %52, %51, !insn.addr !7135
  %54 = fptrunc x86_fp80 %6 to double, !insn.addr !7135
  %55 = inttoptr i32 %53 to double*, !insn.addr !7135
  store double %54, double* %55, align 4, !insn.addr !7135
  %56 = add i32 %0, 1, !insn.addr !7136
  %57 = call i32 @__asm_hlt(), !insn.addr !7137
  %58 = inttoptr i32 %56 to i8*, !insn.addr !7138
  %59 = load i8, i8* %58, align 1, !insn.addr !7138
  %60 = trunc i32 %56 to i8, !insn.addr !7138
  %61 = add i8 %59, %60, !insn.addr !7138
  store i8 %61, i8* %58, align 1, !insn.addr !7138
  %62 = inttoptr i32 %57 to i8*, !insn.addr !7139
  %63 = load i8, i8* %62, align 1, !insn.addr !7139
  %64 = trunc i32 %24 to i8, !insn.addr !7139
  %65 = add i8 %63, %64, !insn.addr !7139
  store i8 %65, i8* %62, align 1, !insn.addr !7139
  %66 = call i32 @function_1011716(), !insn.addr !7140
  ret i32 %66, !insn.addr !7140
}

define i32 @function_1011683(i16 %arg1) local_unnamed_addr {
dec_label_pc_1011683:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = add i32 %0, 8, !insn.addr !7141
  %6 = inttoptr i32 %5 to i32*, !insn.addr !7141
  %7 = load i32, i32* %6, align 4, !insn.addr !7141
  %8 = add i32 %2, -8, !insn.addr !7142
  %9 = inttoptr i32 %8 to i32*, !insn.addr !7142
  %10 = load i32, i32* %9, align 4, !insn.addr !7142
  %11 = icmp slt i32 %10, %7, !insn.addr !7143
  br i1 %11, label %dec_label_pc_10116a9, label %dec_label_pc_101168b, !insn.addr !7143

dec_label_pc_101168b:                             ; preds = %dec_label_pc_1011683
  %12 = add i32 %2, 12, !insn.addr !7144
  %13 = inttoptr i32 %12 to i32*, !insn.addr !7144
  %14 = load i32, i32* %13, align 4, !insn.addr !7144
  %15 = add i32 %14, %7, !insn.addr !7144
  %16 = add i32 %15, 59, !insn.addr !7145
  %17 = and i32 %16, 255, !insn.addr !7145
  %18 = and i32 %15, -256, !insn.addr !7145
  %19 = or i32 %17, %18, !insn.addr !7145
  ret i32 %19, !insn.addr !7146

dec_label_pc_10116a9:                             ; preds = %dec_label_pc_1011683
  %20 = add i32 %3, 1194920003, !insn.addr !7147
  %21 = inttoptr i32 %20 to i8*, !insn.addr !7147
  %22 = load i8, i8* %21, align 1, !insn.addr !7147
  %23 = trunc i32 %4 to i8, !insn.addr !7147
  %24 = add i8 %22, %23, !insn.addr !7147
  store i8 %24, i8* %21, align 1, !insn.addr !7147
  %25 = add i32 %1, 8, !insn.addr !7148
  %26 = inttoptr i32 %25 to i32*, !insn.addr !7148
  %27 = load i32, i32* %26, align 4, !insn.addr !7148
  %28 = sub i32 %7, %27, !insn.addr !7148
  %29 = add i32 %28, 174, !insn.addr !7149
  %30 = and i32 %28, -256, !insn.addr !7149
  %31 = or i32 %29, 43, !insn.addr !7150
  %32 = add i32 %31, 59, !insn.addr !7151
  %33 = and i32 %32, 254, !insn.addr !7151
  %34 = or i32 %33, %30, !insn.addr !7151
  ret i32 %34, !insn.addr !7152
}

define i32 @function_10116c5(i32 %arg1) local_unnamed_addr {
dec_label_pc_10116c5:
  %eax.0.reg2mem = alloca i32, !insn.addr !7153
  %ebp.0.reg2mem = alloca i32, !insn.addr !7153
  %esp.0.reg2mem = alloca i32, !insn.addr !7153
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_4 = alloca i32, align 4
  %2 = call i8 @__asm_in.1(i8 -70), !insn.addr !7154
  %3 = sext i8 %2 to i32, !insn.addr !7154
  %4 = and i32 %1, -256, !insn.addr !7154
  %5 = or i32 %4, %3, !insn.addr !7154
  %6 = ptrtoint i32* %stack_var_4 to i32, !insn.addr !7155
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !7155
  store i32 %arg1, i32* %ebp.0.reg2mem, !insn.addr !7155
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !7155
  br label %dec_label_pc_10116ca, !insn.addr !7155

dec_label_pc_10116ca:                             ; preds = %dec_label_pc_10116ca, %dec_label_pc_10116c5
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %7 = call i8 @__asm_in.1(i8 4), !insn.addr !7156
  %8 = sext i8 %7 to i32, !insn.addr !7156
  %9 = and i32 %eax.0.reload, -256, !insn.addr !7156
  %10 = or i32 %9, %8, !insn.addr !7156
  %11 = add i32 %ebp.0.reload, 2, !insn.addr !7157
  %12 = add i32 %esp.0.reload, -8, !insn.addr !7158
  %13 = add i32 %10, -2097094572, !insn.addr !7159
  %14 = xor i32 %13, %10, !insn.addr !7159
  %15 = add i32 %10, 50389076, !insn.addr !7159
  %16 = and i32 %14, %15, !insn.addr !7159
  %17 = icmp slt i32 %16, 0, !insn.addr !7159
  %18 = icmp slt i32 %13, 0, !insn.addr !7159
  %19 = icmp eq i1 %18, %17, !insn.addr !7160
  store i32 %12, i32* %esp.0.reg2mem, !insn.addr !7160
  store i32 %11, i32* %ebp.0.reg2mem, !insn.addr !7160
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !7160
  br i1 %19, label %dec_label_pc_10116ca, label %dec_label_pc_10116da, !insn.addr !7160

dec_label_pc_10116da:                             ; preds = %dec_label_pc_10116ca
  %20 = add i32 %esp.0.reload, -4, !insn.addr !7161
  %21 = inttoptr i32 %20 to i32*, !insn.addr !7161
  %22 = inttoptr i32 %12 to i32*, !insn.addr !7158
  %23 = and i32 %8, 12, !insn.addr !7159
  %24 = icmp eq i32 %23, 12, !insn.addr !7159
  %25 = ashr i32 %10, 31, !insn.addr !7162
  %26 = inttoptr i32 %0 to i32*, !insn.addr !7163
  store i32 %13, i32* %26, align 4, !insn.addr !7163
  %27 = and i32 %13, 14
  %28 = icmp ugt i32 %27, 9, !insn.addr !7164
  %29 = or i1 %24, %28, !insn.addr !7164
  %30 = add nsw i32 %8, 10, !insn.addr !7164
  %31 = select i1 %29, i32 %30, i32 %13, !insn.addr !7164
  %32 = zext i1 %29 to i32, !insn.addr !7164
  %33 = and i32 %31, 15, !insn.addr !7164
  %34 = and i32 %13, -65536, !insn.addr !7164
  %35 = or i32 %33, %34, !insn.addr !7164
  %36 = mul i32 %32, 256
  %37 = add i32 %36, %13
  %38 = and i32 %37, 65280, !insn.addr !7164
  %39 = or i32 %35, %38, !insn.addr !7164
  %40 = add i32 %39, -1, !insn.addr !7165
  %41 = add i32 %ebp.0.reload, -2, !insn.addr !7166
  %42 = inttoptr i32 %41 to i32*, !insn.addr !7166
  store i32 %40, i32* %42, align 4, !insn.addr !7166
  %43 = mul i32 %11, 8, !insn.addr !7167
  %44 = add i32 %esp.0.reload, -1962314616, !insn.addr !7167
  %45 = add i32 %44, %43, !insn.addr !7167
  %46 = inttoptr i32 %45 to i32*, !insn.addr !7167
  %47 = load i32, i32* %46, align 4, !insn.addr !7167
  %48 = add i32 %47, -69, !insn.addr !7167
  %49 = icmp ult i32 %47, 69, !insn.addr !7167
  store i32 %48, i32* %46, align 4, !insn.addr !7167
  %50 = add i32 %ebp.0.reload, -347551161, !insn.addr !7168
  %51 = inttoptr i32 %50 to i8*, !insn.addr !7168
  %52 = load i8, i8* %51, align 1, !insn.addr !7168
  %53 = udiv i32 %25, 256, !insn.addr !7168
  %54 = trunc i32 %53 to i8, !insn.addr !7168
  %55 = zext i1 %49 to i8, !insn.addr !7168
  %56 = add i8 %52, %54, !insn.addr !7168
  %57 = add i8 %56, %55, !insn.addr !7168
  store i8 %57, i8* %51, align 1, !insn.addr !7168
  ret i32 %40, !insn.addr !7169
}

define i32 @function_1011705() local_unnamed_addr {
dec_label_pc_1011705:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = add i32 %0, -98, !insn.addr !7170
  %6 = inttoptr i32 %5 to i32*, !insn.addr !7170
  %7 = load i32, i32* %6, align 4, !insn.addr !7170
  %8 = zext i32 %3 to i64, !insn.addr !7170
  %9 = zext i32 %2 to i64, !insn.addr !7170
  %10 = mul i64 %9, 4294967296, !insn.addr !7170
  %11 = or i64 %10, %8, !insn.addr !7170
  %12 = zext i32 %7 to i64, !insn.addr !7170
  %13 = udiv i64 %11, %12, !insn.addr !7170
  %14 = trunc i64 %13 to i32, !insn.addr !7170
  %15 = add i32 %1, 1308558529, !insn.addr !7171
  %16 = inttoptr i32 %15 to i32*, !insn.addr !7171
  %17 = load i32, i32* %16, align 4, !insn.addr !7171
  %18 = zext i1 %4 to i32, !insn.addr !7171
  %19 = add i32 %14, %18, !insn.addr !7171
  %20 = add i32 %19, %17, !insn.addr !7171
  store i32 %20, i32* %16, align 4, !insn.addr !7171
  %21 = add i32 %14, 1, !insn.addr !7172
  ret i32 %21, !insn.addr !7173
}

define i32 @function_1011716() local_unnamed_addr {
dec_label_pc_1011716:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i1 @__decompiler_undefined_function_2()
  %5 = and i32 %1, 255, !insn.addr !7174
  %6 = and i32 %3, -65536, !insn.addr !7174
  %7 = select i1 %4, i32 -1, i32 1, !insn.addr !7174
  %8 = add i32 %7, %1, !insn.addr !7174
  %9 = mul i32 %2, 256
  %10 = or i32 %3, %9, !insn.addr !7175
  %11 = and i32 %10, 65280, !insn.addr !7175
  %12 = or i32 %6, %5, !insn.addr !7174
  %13 = or i32 %12, %11, !insn.addr !7175
  %14 = trunc i32 %0 to i8
  %15 = trunc i32 %2 to i8, !insn.addr !7176
  %16 = add i8 %15, %14, !insn.addr !7176
  %17 = inttoptr i32 %0 to i8*, !insn.addr !7176
  store i8 %16, i8* %17, align 1, !insn.addr !7176
  %18 = inttoptr i32 %8 to i32*, !insn.addr !7177
  %19 = load i32, i32* %18, align 4, !insn.addr !7177
  %20 = udiv i32 %19, 2, !insn.addr !7177
  store i32 %20, i32* %18, align 4, !insn.addr !7177
  ret i32 %13, !insn.addr !7177
}

define i32 @function_1011726() local_unnamed_addr {
dec_label_pc_1011726:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7178
}

define i32 @function_101172d(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_101172d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call x86_fp80 @__decompiler_undefined_function_6()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = select i1 %9, i32 1979471162, i32 1979471161, !insn.addr !7179
  %11 = icmp ult i32 %6, %10, !insn.addr !7179
  %12 = or i1 %9, %11, !insn.addr !7179
  %13 = add i32 %5, 71533313, !insn.addr !7180
  %14 = inttoptr i32 %13 to i8*, !insn.addr !7180
  %15 = load i8, i8* %14, align 1, !insn.addr !7180
  %16 = trunc i32 %5 to i8, !insn.addr !7180
  %.neg1 = sext i1 %12 to i8
  %.neg2 = sub i8 %15, %16, !insn.addr !7180
  %17 = add i8 %.neg2, %.neg1, !insn.addr !7180
  store i8 %17, i8* %14, align 1, !insn.addr !7180
  %18 = add i32 %1, 4, !insn.addr !7181
  %19 = inttoptr i32 %18 to i32*, !insn.addr !7181
  %20 = load i32, i32* %19, align 4, !insn.addr !7181
  %21 = add i32 %20, 1, !insn.addr !7181
  store i32 %21, i32* %19, align 4, !insn.addr !7181
  %22 = select i1 %8, i32 -1, i32 1, !insn.addr !7182
  %23 = add i32 %22, %0, !insn.addr !7182
  %24 = add i32 %22, %arg1, !insn.addr !7182
  %25 = inttoptr i32 %23 to i32*, !insn.addr !7183
  %26 = load i32, i32* %25, align 4, !insn.addr !7183
  %27 = inttoptr i32 %24 to i32*, !insn.addr !7184
  store i32 %26, i32* %27, align 4, !insn.addr !7184
  %28 = add i32 %24, 4, !insn.addr !7185
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7185
  %30 = load i32, i32* %29, align 4, !insn.addr !7185
  %31 = icmp sgt i32 %30, 1, !insn.addr !7186
  br i1 %31, label %dec_label_pc_1011781, label %dec_label_pc_1011792, !insn.addr !7186

dec_label_pc_1011781:                             ; preds = %dec_label_pc_101172d
  %32 = add i32 %3, -4, !insn.addr !7187
  %33 = fptosi x86_fp80 %7 to i64, !insn.addr !7188
  %34 = inttoptr i32 %32 to i64*, !insn.addr !7188
  store i64 %33, i64* %34, align 4, !insn.addr !7188
  %35 = add i32 %2, 9, !insn.addr !7189
  %36 = inttoptr i32 %35 to i8*, !insn.addr !7189
  %37 = load i8, i8* %36, align 1, !insn.addr !7189
  %38 = udiv i32 %4, 256, !insn.addr !7189
  %39 = trunc i32 %38 to i8, !insn.addr !7189
  %40 = add i8 %37, %39, !insn.addr !7189
  store i8 %40, i8* %36, align 1, !insn.addr !7189
  ret i32 %26, !insn.addr !7189

dec_label_pc_1011792:                             ; preds = %dec_label_pc_101172d
  %41 = add i32 %4, 1, !insn.addr !7190
  %42 = inttoptr i32 %4 to i32*, !insn.addr !7190
  store i32 %41, i32* %42, align 4, !insn.addr !7190
  %43 = and i32 %26, 11206400, !insn.addr !7191
  %44 = trunc i32 %4 to i16, !insn.addr !7192
  %45 = call i8 @__asm_insb(i16 %44), !insn.addr !7192
  %46 = inttoptr i32 %arg2 to i8*, !insn.addr !7192
  store i8 %45, i8* %46, align 1, !insn.addr !7192
  %47 = call i8 @__asm_in.3(i16 %44), !insn.addr !7193
  %48 = sext i8 %47 to i32, !insn.addr !7193
  %49 = or i32 %43, %48, !insn.addr !7194
  %50 = or i32 %49, -1957363712, !insn.addr !7193
  ret i32 %50, !insn.addr !7193
}

define i32 @function_10117c1(i32 %arg1) local_unnamed_addr {
dec_label_pc_10117c1:
  %cf.0.reg2mem = alloca i1, !insn.addr !7195
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %7 = add i32 %2, -4, !insn.addr !7196
  %8 = add i32 %4, 1, !insn.addr !7197
  %9 = icmp eq i32 %8, 0, !insn.addr !7197
  %10 = call i32 @unknown_947bfb(i32 %6, i32 %0), !insn.addr !7198
  %11 = add i32 %2, -17, !insn.addr !7199
  %12 = inttoptr i32 %11 to i32*, !insn.addr !7199
  %13 = load i32, i32* %12, align 4, !insn.addr !7199
  br i1 %9, label %dec_label_pc_10117d5, label %dec_label_pc_101181c, !insn.addr !7200

dec_label_pc_10117d5:                             ; preds = %dec_label_pc_10117c1
  %14 = inttoptr i32 %7 to i32*, !insn.addr !7196
  %15 = add i32 %13, 139, !insn.addr !7201
  %16 = and i32 %15, 255, !insn.addr !7201
  %17 = and i32 %13, -256, !insn.addr !7201
  %18 = or i32 %16, %17, !insn.addr !7201
  %19 = inttoptr i32 %3 to i32*, !insn.addr !7202
  %20 = load i32, i32* %19, align 4, !insn.addr !7202
  %21 = mul i32 %20, %18, !insn.addr !7202
  %22 = inttoptr i32 %10 to i32*, !insn.addr !7203
  store i32 %21, i32* %22, align 4, !insn.addr !7203
  %23 = add i32 %1, 93, !insn.addr !7204
  %24 = inttoptr i32 %23 to i32*, !insn.addr !7204
  %25 = load i32, i32* %24, align 4, !insn.addr !7204
  %26 = add i32 %3, 8, !insn.addr !7205
  %27 = inttoptr i32 %26 to i32*, !insn.addr !7205
  %28 = load i32, i32* %27, align 4, !insn.addr !7205
  %29 = add i32 %28, %25, !insn.addr !7205
  %30 = add i32 %10, 12, !insn.addr !7206
  %31 = inttoptr i32 %30 to i32*, !insn.addr !7206
  %32 = load i32, i32* %31, align 4, !insn.addr !7206
  %33 = sub i32 %32, %5, !insn.addr !7206
  store i32 %33, i32* %31, align 4, !insn.addr !7206
  %34 = add i32 %4, 205950217, !insn.addr !7207
  %35 = inttoptr i32 %34 to i32*, !insn.addr !7207
  %36 = add i32 %1, 4, !insn.addr !7208
  %37 = inttoptr i32 %36 to i32*, !insn.addr !7208
  %38 = load i32, i32* %37, align 4, !insn.addr !7208
  %39 = add i32 %4, 9310197, !insn.addr !7209
  %40 = inttoptr i32 %39 to i32*, !insn.addr !7209
  store i32 %38, i32* %40, align 4, !insn.addr !7209
  %41 = mul i32 %5, 2, !insn.addr !7210
  %42 = icmp ult i32 %41, %5, !insn.addr !7210
  %43 = inttoptr i32 %5 to i32*, !insn.addr !7210
  store i32 %41, i32* %43, align 4, !insn.addr !7210
  %44 = add i32 %3, 12, !insn.addr !7211
  %45 = add i32 %2, -28, !insn.addr !7212
  %46 = inttoptr i32 %45 to i32*, !insn.addr !7212
  store i32 %44, i32* %46, align 4, !insn.addr !7212
  %47 = inttoptr i32 %29 to i32*, !insn.addr !7213
  %48 = load i32, i32* %47, align 4, !insn.addr !7213
  %49 = add i32 %2, -32, !insn.addr !7214
  %50 = inttoptr i32 %49 to i32*, !insn.addr !7214
  store i32 %48, i32* %50, align 4, !insn.addr !7214
  %51 = load i32, i32* %46, align 4, !insn.addr !7215
  store i32 %51, i32* %14, align 4, !insn.addr !7216
  %52 = add i32 %3, 4, !insn.addr !7217
  %53 = inttoptr i32 %52 to i32*, !insn.addr !7217
  %54 = load i32, i32* %53, align 4, !insn.addr !7217
  %55 = add i32 %5, 4, !insn.addr !7218
  %56 = inttoptr i32 %55 to i32*, !insn.addr !7218
  %57 = load i32, i32* %56, align 4, !insn.addr !7218
  %58 = select i1 %42, i32 -118, i32 -119, !insn.addr !7218
  %59 = add i32 %57, %58, !insn.addr !7218
  store i32 %59, i32* %56, align 4, !insn.addr !7218
  %60 = trunc i32 %54 to i16, !insn.addr !7219
  %61 = call i8 @__asm_in.3(i16 %60), !insn.addr !7219
  ret i32 %3, !insn.addr !7220

dec_label_pc_101181c:                             ; preds = %dec_label_pc_10117c1
  %62 = icmp sgt i32 %8, 0, !insn.addr !7221
  br i1 %62, label %dec_label_pc_1011828, label %dec_label_pc_101185c, !insn.addr !7221

dec_label_pc_1011828:                             ; preds = %dec_label_pc_101181c
  %63 = inttoptr i32 %7 to i8*, !insn.addr !7222
  %64 = load i8, i8* %63, align 1, !insn.addr !7222
  %65 = mul i32 %10, 9, !insn.addr !7223
  %66 = inttoptr i32 %65 to i8*, !insn.addr !7223
  store i8 -1, i8* %66, align 1, !insn.addr !7223
  %67 = icmp eq i32 %5, 1, !insn.addr !7224
  br i1 %67, label %dec_label_pc_101184b, label %dec_label_pc_1011863, !insn.addr !7224

dec_label_pc_101184b:                             ; preds = %dec_label_pc_1011828
  %68 = add i32 %2, -36, !insn.addr !7225
  %69 = inttoptr i32 %68 to i32*, !insn.addr !7225
  %70 = and i32 %13, -65536, !insn.addr !7226
  %71 = add i32 %2, -16, !insn.addr !7227
  %72 = inttoptr i32 %71 to i32*, !insn.addr !7227
  %73 = load i32, i32* %72, align 4, !insn.addr !7227
  %74 = inttoptr i32 %73 to i32*, !insn.addr !7228
  %75 = load i32, i32* %74, align 4, !insn.addr !7228
  %76 = call i32 @function_1012770(i32 %75, i32 %70), !insn.addr !7229
  %77 = add i32 %10, 116, !insn.addr !7230
  %78 = inttoptr i32 %77 to i32*, !insn.addr !7230
  %79 = load i32, i32* %78, align 4, !insn.addr !7230
  %80 = or i32 %79, %76, !insn.addr !7230
  %81 = and i32 %80, -65281, !insn.addr !7231
  ret i32 %81, !insn.addr !7232

dec_label_pc_101185c:                             ; preds = %dec_label_pc_101181c
  ret i32 %13, !insn.addr !7233

dec_label_pc_1011863:                             ; preds = %dec_label_pc_1011828
  %82 = zext i8 %64 to i32, !insn.addr !7222
  %83 = and i32 %8, -256, !insn.addr !7222
  %84 = or i32 %83, %82, !insn.addr !7222
  %esp.0 = ptrtoint i32* %stack_var_-4 to i32
  %85 = add i32 %2, -60, !insn.addr !7234
  %86 = inttoptr i32 %85 to i32*, !insn.addr !7234
  store i32 0, i32* %86, align 4, !insn.addr !7234
  %87 = add i32 %3, -1258296164, !insn.addr !7235
  %88 = inttoptr i32 %87 to i32*, !insn.addr !7235
  %89 = load i32, i32* %88, align 4, !insn.addr !7235
  %90 = add i32 %3, -1923992267, !insn.addr !7236
  %91 = inttoptr i32 %90 to i8*, !insn.addr !7236
  %92 = load i8, i8* %91, align 1, !insn.addr !7236
  %93 = trunc i32 %89 to i8, !insn.addr !7236
  %94 = add i8 %92, %93, !insn.addr !7236
  store i8 %94, i8* %91, align 1, !insn.addr !7236
  %95 = or i32 %13, 139, !insn.addr !7237
  %96 = add i32 %esp.0, -4, !insn.addr !7238
  %97 = inttoptr i32 %96 to i32*, !insn.addr !7238
  store i32 %95, i32* %97, align 4, !insn.addr !7238
  %98 = add i32 %2, -24, !insn.addr !7239
  %99 = inttoptr i32 %98 to i32*, !insn.addr !7239
  store i32 %89, i32* %99, align 4, !insn.addr !7239
  %100 = call i32 @unknown_9f0147d0(), !insn.addr !7240
  %101 = load i32, i32* %86, align 4, !insn.addr !7241
  %102 = add i32 %esp.0, -8, !insn.addr !7241
  %103 = inttoptr i32 %102 to i32*, !insn.addr !7241
  store i32 %101, i32* %103, align 4, !insn.addr !7241
  %104 = add i32 %89, -398095416, !insn.addr !7242
  %105 = inttoptr i32 %104 to i32*, !insn.addr !7242
  store i32 %84, i32* %105, align 4, !insn.addr !7242
  %106 = udiv i32 %89, 256, !insn.addr !7243
  %107 = trunc i32 %106 to i8, !insn.addr !7243
  %108 = udiv i32 %100, 256, !insn.addr !7243
  %109 = trunc i32 %108 to i8, !insn.addr !7243
  %110 = add i8 %109, %107, !insn.addr !7243
  %111 = icmp eq i8 %110, 0, !insn.addr !7243
  %112 = icmp eq i1 %111, false, !insn.addr !7244
  br i1 %112, label %dec_label_pc_101189e, label %dec_label_pc_101188e, !insn.addr !7244

dec_label_pc_101188e:                             ; preds = %dec_label_pc_1011863
  %113 = icmp ult i8 %110, %107, !insn.addr !7243
  %114 = inttoptr i32 %3 to i8*, !insn.addr !7245
  %115 = load i8, i8* %114, align 1, !insn.addr !7245
  %116 = and i8 %93, 31, !insn.addr !7245
  %117 = icmp eq i8 %116, 0, !insn.addr !7245
  store i1 %113, i1* %cf.0.reg2mem, !insn.addr !7245
  br i1 %117, label %125, label %118, !insn.addr !7245

; <label>:118:                                    ; preds = %dec_label_pc_101188e
  %119 = shl i8 %115, %116, !insn.addr !7245
  %120 = sub nsw i8 8, %116, !insn.addr !7245
  %121 = lshr i8 %115, %120, !insn.addr !7245
  %122 = or i8 %121, %119, !insn.addr !7245
  store i8 %122, i8* %114, align 1, !insn.addr !7245
  %123 = and i8 %122, 1, !insn.addr !7245
  %124 = icmp ne i8 %123, 0, !insn.addr !7245
  store i1 %124, i1* %cf.0.reg2mem, !insn.addr !7245
  br label %125, !insn.addr !7245

; <label>:125:                                    ; preds = %dec_label_pc_101188e, %118
  %126 = zext i8 %110 to i32, !insn.addr !7243
  %127 = mul i32 %126, 256, !insn.addr !7243
  %128 = and i32 %89, -65281, !insn.addr !7243
  %129 = or i32 %127, %128, !insn.addr !7243
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %130 = inttoptr i32 %3 to i32*, !insn.addr !7246
  %131 = load i32, i32* %130, align 4, !insn.addr !7246
  %132 = zext i1 %cf.0.reload to i32, !insn.addr !7246
  %133 = mul i32 %131, 524288, !insn.addr !7246
  %134 = udiv i32 %131, 16384
  %135 = mul i32 %132, 262144, !insn.addr !7246
  %136 = or i32 %134, %133
  %137 = or i32 %136, %135
  store i32 %137, i32* %130, align 4, !insn.addr !7246
  %138 = add i32 %esp.0, -12, !insn.addr !7247
  %139 = inttoptr i32 %138 to i32*, !insn.addr !7247
  ret i32 %129, !insn.addr !7248

dec_label_pc_101189e:                             ; preds = %dec_label_pc_1011863
  %140 = call i32 @unknown_c70126d0(), !insn.addr !7249
  %141 = add i32 %2, -8, !insn.addr !7250
  %142 = inttoptr i32 %141 to i32*, !insn.addr !7250
  %143 = load i32, i32* %142, align 4, !insn.addr !7250
  %144 = add i32 %143, 1, !insn.addr !7250
  store i32 %144, i32* %142, align 4, !insn.addr !7250
  %145 = add i32 %2, 64, !insn.addr !7251
  %146 = inttoptr i32 %145 to i32*, !insn.addr !7251
  %147 = mul i32 %2, 8, !insn.addr !7252
  %148 = add i32 %147, -117, !insn.addr !7252
  %149 = add i32 %148, %140, !insn.addr !7252
  %150 = inttoptr i32 %149 to i32*, !insn.addr !7252
  %151 = load i32, i32* %150, align 4, !insn.addr !7252
  %152 = add i32 %esp.0, -12, !insn.addr !7253
  %153 = add i32 %esp.0, -16, !insn.addr !7253
  %154 = add i32 %esp.0, -20, !insn.addr !7253
  %155 = add i32 %esp.0, -24, !insn.addr !7253
  %156 = add i32 %esp.0, -28, !insn.addr !7253
  %157 = add i32 %esp.0, -32, !insn.addr !7253
  %158 = add i32 %esp.0, -36, !insn.addr !7253
  %159 = add i32 %esp.0, -40, !insn.addr !7253
  %160 = inttoptr i32 %152 to i32*, !insn.addr !7253
  store i32 %140, i32* %160, align 4, !insn.addr !7253
  %161 = inttoptr i32 %153 to i32*, !insn.addr !7253
  store i32 %151, i32* %161, align 4, !insn.addr !7253
  %162 = inttoptr i32 %154 to i32*, !insn.addr !7253
  store i32 %84, i32* %162, align 4, !insn.addr !7253
  %163 = inttoptr i32 %155 to i32*, !insn.addr !7253
  %164 = inttoptr i32 %156 to i32*, !insn.addr !7253
  store i32 %102, i32* %164, align 4, !insn.addr !7253
  %165 = inttoptr i32 %157 to i32*, !insn.addr !7253
  %166 = inttoptr i32 %158 to i32*, !insn.addr !7253
  store i32 %140, i32* %166, align 4, !insn.addr !7253
  %167 = inttoptr i32 %159 to i32*, !insn.addr !7253
  ret i32 %140, !insn.addr !7254
}

define i32 @function_10118ea() local_unnamed_addr {
dec_label_pc_10118ea:
  %0 = call i32 @function_10118fe(), !insn.addr !7255
  ret i32 %0, !insn.addr !7255
}

define i32 @function_10118fc() local_unnamed_addr {
dec_label_pc_10118fc:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 1, !insn.addr !7256
  %2 = and i32 %1, 255, !insn.addr !7256
  %3 = and i32 %0, -256, !insn.addr !7256
  %4 = or i32 %2, %3, !insn.addr !7256
  ret i32 %4, !insn.addr !7256
}

define i32 @function_10118fe() local_unnamed_addr {
dec_label_pc_10118fe:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = or i32 %1, %0, !insn.addr !7257
  %3 = add i32 %2, -4, !insn.addr !7258
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7258
  %5 = add i32 %2, -8, !insn.addr !7259
  %6 = inttoptr i32 %5 to i32*, !insn.addr !7259
  %7 = call i32 @function_10047c1(), !insn.addr !7260
  %8 = add i32 %2, -12, !insn.addr !7261
  %9 = inttoptr i32 %8 to i32*, !insn.addr !7261
  ret i32 %7, !insn.addr !7262
}

define i32 @function_1011913(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011913:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @function_1011986(i32 %0, i32 %1), !insn.addr !7263
  ret i32 %2, !insn.addr !7263
}

define i32 @function_101195a() local_unnamed_addr {
dec_label_pc_101195a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1011961(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011961:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 144081680, !insn.addr !7264
  %3 = inttoptr i32 %2 to i8*, !insn.addr !7264
  %4 = load i8, i8* %3, align 1, !insn.addr !7264
  %5 = trunc i32 %1 to i8, !insn.addr !7264
  %6 = or i8 %4, %5, !insn.addr !7264
  store i8 %6, i8* %3, align 1, !insn.addr !7264
  %7 = call i32 @function_1011979(i32 ptrtoint (i32* @0 to i32)), !insn.addr !7265
  ret i32 %7, !insn.addr !7265
}

define i32 @function_1011977() local_unnamed_addr {
dec_label_pc_1011977:
  ret i32 0, !insn.addr !7266
}

define i32 @function_1011979(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011979:
  %eax.1.reg2mem = alloca i32, !insn.addr !7267
  %ecx.0.reg2mem = alloca i32, !insn.addr !7267
  %eax.0.reg2mem = alloca i32, !insn.addr !7267
  %zf.0.reg2mem = alloca i1, !insn.addr !7267
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8, !insn.addr !7267
  %2 = add i8 %1, 48, !insn.addr !7267
  %3 = icmp eq i8 %2, 0, !insn.addr !7267
  %4 = zext i8 %2 to i32, !insn.addr !7267
  %5 = and i32 %0, -256, !insn.addr !7267
  %6 = or i32 %5, %4, !insn.addr !7267
  store i1 %3, i1* %zf.0.reg2mem, !insn.addr !7267
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !7267
  br label %dec_label_pc_101197b, !insn.addr !7267

dec_label_pc_101197b:                             ; preds = %dec_label_pc_101197d, %dec_label_pc_1011979
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  %7 = icmp eq i1 %zf.0.reload, false, !insn.addr !7268
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !7268
  br i1 %7, label %8, label %dec_label_pc_101197d, !insn.addr !7268

; <label>:8:                                      ; preds = %dec_label_pc_101197b
  %9 = call i32 @function_101198c(), !insn.addr !7268
  store i32 %9, i32* %eax.1.reg2mem, !insn.addr !7268
  br label %dec_label_pc_101197d, !insn.addr !7268

dec_label_pc_101197d:                             ; preds = %8, %dec_label_pc_101197b
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %10 = add i32 %ecx.0.reload, -1, !insn.addr !7269
  %11 = icmp eq i32 %10, 0, !insn.addr !7270
  %12 = icmp slt i32 %10, 0, !insn.addr !7270
  %13 = icmp eq i1 %12, false, !insn.addr !7271
  %14 = icmp eq i1 %11, false, !insn.addr !7271
  %15 = icmp eq i1 %13, %14, !insn.addr !7271
  store i1 %11, i1* %zf.0.reg2mem, !insn.addr !7271
  store i32 %eax.1.reload, i32* %eax.0.reg2mem, !insn.addr !7271
  store i32 %10, i32* %ecx.0.reg2mem, !insn.addr !7271
  br i1 %15, label %dec_label_pc_101197b, label %dec_label_pc_1011982, !insn.addr !7271

dec_label_pc_1011982:                             ; preds = %dec_label_pc_101197d
  ret i32 %eax.1.reload, !insn.addr !7272
}

define i32 @function_1011986(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011986:
  %eax.0.reg2mem = alloca i32, !insn.addr !7273
  %0 = call i1 @__decompiler_undefined_function_2()
  %1 = icmp eq i1 %0, false, !insn.addr !7273
  br i1 %1, label %2, label %dec_label_pc_1011988, !insn.addr !7273

; <label>:2:                                      ; preds = %dec_label_pc_1011986
  %3 = call i32 @function_10119c6(), !insn.addr !7273
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !7273
  br label %dec_label_pc_1011988, !insn.addr !7273

dec_label_pc_1011988:                             ; preds = %2, %dec_label_pc_1011986
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !7274
}

define i32 @function_101198c() local_unnamed_addr {
dec_label_pc_101198c:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = trunc i32 %0 to i16, !insn.addr !7275
  %3 = call i8 @__asm_in.3(i16 %2), !insn.addr !7275
  %4 = sext i8 %3 to i32, !insn.addr !7275
  %5 = add i32 %1, -1962127989, !insn.addr !7276
  %6 = add i32 %5, %4, !insn.addr !7276
  %7 = inttoptr i32 %6 to i32*, !insn.addr !7276
  %8 = load i32, i32* %7, align 4, !insn.addr !7276
  ret i32 %8, !insn.addr !7277
}

define i32 @function_101199f() local_unnamed_addr {
dec_label_pc_101199f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7278
}

define i32 @function_10119b0() local_unnamed_addr {
dec_label_pc_10119b0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7279
}

define i32 @function_10119c6() local_unnamed_addr {
dec_label_pc_10119c6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 12, !insn.addr !7280
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7280
  %5 = load i32, i32* %4, align 4, !insn.addr !7280
  %6 = sub i32 %5, %0, !insn.addr !7280
  store i32 %6, i32* %4, align 4, !insn.addr !7280
  ret i32 %2, !insn.addr !7281
}

define i32 @function_10119dc() local_unnamed_addr {
dec_label_pc_10119dc:
  %eax.0.reg2mem = alloca i32, !insn.addr !7282
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 65, !insn.addr !7282
  %3 = inttoptr i32 %2 to i32*, !insn.addr !7282
  %4 = load i32, i32* %3, align 4, !insn.addr !7282
  %5 = icmp sgt i32 %1, %4, !insn.addr !7283
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !7283
  br i1 %5, label %dec_label_pc_10119e1, label %dec_label_pc_10119ee, !insn.addr !7283

dec_label_pc_10119e1:                             ; preds = %dec_label_pc_10119dc
  %6 = add i32 %0, 8, !insn.addr !7284
  %7 = inttoptr i32 %6 to i32*, !insn.addr !7284
  %8 = load i32, i32* %7, align 4, !insn.addr !7284
  %9 = inttoptr i32 %8 to i32*, !insn.addr !7285
  %10 = load i32, i32* %9, align 4, !insn.addr !7285
  %11 = add i32 %0, -91, !insn.addr !7286
  %12 = inttoptr i32 %11 to i32*, !insn.addr !7286
  %13 = load i32, i32* %12, align 4, !insn.addr !7286
  %14 = add i32 %13, -4, !insn.addr !7286
  store i32 %14, i32* %12, align 4, !insn.addr !7286
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !7287
  br label %dec_label_pc_10119ee, !insn.addr !7287

dec_label_pc_10119ee:                             ; preds = %dec_label_pc_10119dc, %dec_label_pc_10119e1
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %15 = add i32 %eax.0.reload, 235, !insn.addr !7288
  %16 = and i32 %eax.0.reload, -65536, !insn.addr !7288
  %17 = udiv i32 %eax.0.reload, 256, !insn.addr !7289
  %18 = mul nuw nsw i32 %17, 43, !insn.addr !7289
  %19 = add i32 %15, %18, !insn.addr !7289
  %20 = and i32 %19, 255, !insn.addr !7289
  %21 = or i32 %20, %16, !insn.addr !7289
  %22 = load i32, i32* inttoptr (i32 151751632 to i32*), align 16, !insn.addr !7290
  %23 = mul i32 %22, 1024, !insn.addr !7290
  store i32 %23, i32* inttoptr (i32 151751632 to i32*), align 16, !insn.addr !7290
  ret i32 %21, !insn.addr !7290
}

define i32 @function_1011a00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1011a00:
  %eax.1.reg2mem = alloca i32, !insn.addr !7291
  %eax.0.reg2mem = alloca i32, !insn.addr !7291
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = icmp eq i32 %0, 0, !insn.addr !7291
  %2 = icmp slt i32 %0, 0, !insn.addr !7291
  %3 = icmp eq i1 %2, false, !insn.addr !7292
  %4 = icmp eq i1 %1, false, !insn.addr !7292
  %5 = icmp eq i1 %3, %4, !insn.addr !7292
  br i1 %5, label %6, label %dec_label_pc_1011a04, !insn.addr !7292

; <label>:6:                                      ; preds = %dec_label_pc_1011a00
  %7 = call i32 @function_10119dc(), !insn.addr !7292
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !7292
  br label %dec_label_pc_1011a04, !insn.addr !7292

dec_label_pc_1011a04:                             ; preds = %6, %dec_label_pc_1011a00
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !7293
  br i1 %2, label %8, label %dec_label_pc_1011a06, !insn.addr !7293

; <label>:8:                                      ; preds = %dec_label_pc_1011a04
  %9 = call i32 @function_10119c6(), !insn.addr !7293
  store i32 %9, i32* %eax.1.reg2mem, !insn.addr !7293
  br label %dec_label_pc_1011a06, !insn.addr !7293

dec_label_pc_1011a06:                             ; preds = %8, %dec_label_pc_1011a04
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !7294
}

define i32 @function_1011a16() local_unnamed_addr {
dec_label_pc_1011a16:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7295
}

define i32 @function_1011a18() local_unnamed_addr {
dec_label_pc_1011a18:
  %.reg2mem = alloca i32, !insn.addr !7296
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, -1962662836, !insn.addr !7296
  %5 = add i32 %3, 207, !insn.addr !7297
  %6 = and i32 %5, 255, !insn.addr !7297
  %7 = and i32 %4, -256, !insn.addr !7297
  %8 = or i32 %7, %6, !insn.addr !7297
  %9 = add i32 %1, %0, !insn.addr !7298
  %10 = inttoptr i32 %9 to i32*, !insn.addr !7298
  %11 = load i32, i32* %10, align 4, !insn.addr !7298
  %12 = udiv i32 %11, 1024, !insn.addr !7298
  %13 = mul i32 %11, 4194304, !insn.addr !7298
  %14 = or i32 %12, %13, !insn.addr !7298
  store i32 %14, i32* %10, align 4, !insn.addr !7298
  %15 = icmp eq i32 %8, 0
  %16 = icmp slt i32 %8, 0
  %17 = icmp eq i1 %16, false
  %18 = icmp eq i1 %15, false
  %19 = add i32 %2, -765917969, !insn.addr !7299
  %20 = inttoptr i32 %19 to i32*, !insn.addr !7299
  %21 = icmp eq i1 %17, %18, !insn.addr !7300
  %.promoted = load i32, i32* %20, align 4
  store i32 %.promoted, i32* %.reg2mem, !insn.addr !7298
  br label %dec_label_pc_1011a24, !insn.addr !7298

dec_label_pc_1011a24:                             ; preds = %dec_label_pc_1011a24, %dec_label_pc_1011a18
  %.reload = load i32, i32* %.reg2mem
  %22 = or i32 %.reload, %8, !insn.addr !7299
  %23 = icmp eq i32 %22, 0, !insn.addr !7299
  %or.cond = icmp eq i1 %21, %23
  store i32 0, i32* %.reg2mem, !insn.addr !7301
  br i1 %or.cond, label %dec_label_pc_1011a24, label %dec_label_pc_1011a38, !insn.addr !7301

dec_label_pc_1011a38:                             ; preds = %dec_label_pc_1011a24
  store i32 %22, i32* %20, align 4
  ret i32 0, !insn.addr !7302
}

define i32 @function_1011a3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011a3c:
  %eax.0.reg2mem = alloca i32, !insn.addr !7303
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %0, -1961876388, !insn.addr !7304
  %5 = inttoptr i32 %4 to i8*, !insn.addr !7304
  %6 = load i8, i8* %5, align 1, !insn.addr !7304
  %7 = trunc i32 %1 to i8, !insn.addr !7304
  store i8 %7, i8* %5, align 1, !insn.addr !7304
  %8 = zext i8 %6 to i32, !insn.addr !7304
  %9 = and i32 %1, -256, !insn.addr !7304
  %10 = or i32 %9, %8, !insn.addr !7304
  %11 = add i32 %0, 2130772856, !insn.addr !7305
  %12 = inttoptr i32 %11 to i32*, !insn.addr !7305
  %13 = load i32, i32* %12, align 4, !insn.addr !7305
  %14 = add i32 %13, %2, !insn.addr !7305
  %15 = inttoptr i32 %10 to i32*, !insn.addr !7306
  %16 = load i32, i32* %15, align 4, !insn.addr !7306
  %17 = icmp slt i32 %16, 0, !insn.addr !7306
  br i1 %17, label %dec_label_pc_1011a6b, label %dec_label_pc_1011a5f, !insn.addr !7307

dec_label_pc_1011a5f:                             ; preds = %dec_label_pc_1011a3c
  %18 = icmp eq i32 %16, 0, !insn.addr !7306
  %19 = icmp eq i1 %18, false, !insn.addr !7308
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !7308
  br i1 %19, label %20, label %dec_label_pc_1011a61, !insn.addr !7308

; <label>:20:                                     ; preds = %dec_label_pc_1011a5f
  %21 = call i32 @function_1011ab5(i32 ptrtoint (i32* @0 to i32)), !insn.addr !7308
  store i32 %21, i32* %eax.0.reg2mem, !insn.addr !7308
  br label %dec_label_pc_1011a61, !insn.addr !7308

dec_label_pc_1011a61:                             ; preds = %20, %dec_label_pc_1011a5f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %22 = call i32 @function_1007bc1(i32 %eax.0.reload), !insn.addr !7309
  %23 = inttoptr i32 %0 to i32*, !insn.addr !7310
  store i32 %16, i32* %23, align 4, !insn.addr !7310
  ret i32 %22, !insn.addr !7310

dec_label_pc_1011a6b:                             ; preds = %dec_label_pc_1011a3c
  %24 = add i32 %14, 232, !insn.addr !7311
  %25 = and i32 %24, 255, !insn.addr !7311
  %26 = and i32 %14, -65536, !insn.addr !7311
  %27 = or i32 %25, %26, !insn.addr !7311
  %28 = add i32 %10, -1, !insn.addr !7312
  %29 = inttoptr i32 %28 to i8*, !insn.addr !7312
  %30 = load i8, i8* %29, align 1, !insn.addr !7312
  %31 = zext i8 %30 to i32, !insn.addr !7312
  %32 = mul i32 %31, 256, !insn.addr !7312
  %33 = or i32 %27, %32, !insn.addr !7312
  %34 = add i32 %10, -1547269373, !insn.addr !7313
  %35 = inttoptr i32 %34 to i32*, !insn.addr !7313
  %36 = load i32, i32* %35, align 4, !insn.addr !7313
  %37 = add i32 %36, -1, !insn.addr !7313
  %38 = and i32 %36, 15, !insn.addr !7313
  %39 = add nsw i32 %38, -1, !insn.addr !7313
  %40 = icmp ugt i32 %39, 15, !insn.addr !7313
  store i32 %37, i32* %35, align 4, !insn.addr !7313
  %41 = mul i32 %10, 4, !insn.addr !7314
  %42 = add i32 %41, 12, !insn.addr !7314
  %43 = and i32 %42, 12
  %44 = icmp ugt i32 %43, 9, !insn.addr !7315
  %45 = or i1 %44, %40, !insn.addr !7315
  %46 = select i1 %45, i32 2, i32 0, !insn.addr !7315
  %47 = inttoptr i32 %arg1 to i8*, !insn.addr !7316
  %48 = inttoptr i32 %33 to i8*, !insn.addr !7316
  call void @__asm_rep_movsd_memcpy(i8* %48, i8* %47, i32 %42), !insn.addr !7316
  %49 = select i1 %3, i32 -4, i32 4, !insn.addr !7316
  %50 = mul i32 %42, %49, !insn.addr !7316
  %51 = add i32 %33, %50, !insn.addr !7316
  %52 = inttoptr i32 %51 to i8*, !insn.addr !7317
  call void @__asm_rep_movsb_memcpy(i8* %52, i8* %52, i32 %46), !insn.addr !7317
  %53 = call i32 @__asm_iretd(), !insn.addr !7318
  %54 = call i32 @__asm_sti(), !insn.addr !7319
  ret i32 %54, !insn.addr !7319
}

define i32 @function_1011a9a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011a9a:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i1 @__decompiler_undefined_function_2()
  %2 = select i1 %1, i32 255, i32 0, !insn.addr !7320
  %3 = and i32 %0, -256, !insn.addr !7320
  %4 = or i32 %2, %3, !insn.addr !7320
  ret i32 %4, !insn.addr !7320
}

define i32 @function_1011ab5(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011ab5:
  %merge.reg2mem = alloca i32, !insn.addr !7321
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %ebx = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = call i1 @__decompiler_undefined_function_2()
  %10 = call i1 @__decompiler_undefined_function_2()
  %11 = call i1 @__decompiler_undefined_function_2()
  %12 = call i1 @__decompiler_undefined_function_2()
  %13 = call i1 @__decompiler_undefined_function_2()
  %14 = call i1 @__decompiler_undefined_function_2()
  %15 = call i1 @__decompiler_undefined_function_2()
  %16 = call i1 @__decompiler_undefined_function_2()
  %17 = icmp eq i1 %13, false, !insn.addr !7321
  br i1 %17, label %dec_label_pc_1011aca, label %dec_label_pc_1011ab7, !insn.addr !7321

dec_label_pc_1011ab7:                             ; preds = %dec_label_pc_1011ab5
  %18 = mul i32 %6, %1, !insn.addr !7322
  %19 = inttoptr i32 %6 to i32*, !insn.addr !7323
  store i32 %18, i32* %19, align 4, !insn.addr !7323
  br label %dec_label_pc_1011af1, !insn.addr !7324

dec_label_pc_1011aca:                             ; preds = %dec_label_pc_1011ab5
  %20 = zext i1 %16 to i32, !insn.addr !7325
  %21 = zext i1 %15 to i32, !insn.addr !7325
  %22 = mul i32 %21, 4, !insn.addr !7325
  %23 = zext i1 %14 to i32, !insn.addr !7325
  %24 = mul i32 %23, 16, !insn.addr !7325
  %25 = zext i1 %12 to i32, !insn.addr !7325
  %26 = mul i32 %25, 128, !insn.addr !7325
  %27 = zext i1 %11 to i32, !insn.addr !7325
  %28 = mul i32 %27, 256, !insn.addr !7325
  %29 = zext i1 %10 to i32, !insn.addr !7325
  %30 = mul i32 %29, 512, !insn.addr !7325
  %31 = zext i1 %9 to i32, !insn.addr !7325
  %32 = mul i32 %31, 1024, !insn.addr !7325
  %33 = zext i1 %8 to i32, !insn.addr !7325
  %34 = mul i32 %33, 2048, !insn.addr !7325
  %35 = zext i1 %7 to i32, !insn.addr !7325
  %36 = mul i32 %35, 16384, !insn.addr !7325
  %37 = or i32 %36, %34, !insn.addr !7325
  %38 = or i32 %37, %32, !insn.addr !7325
  %39 = or i32 %38, %30, !insn.addr !7325
  %40 = or i32 %39, %28, !insn.addr !7325
  %41 = or i32 %40, %26, !insn.addr !7325
  %42 = or i32 %41, %24, !insn.addr !7325
  %43 = or i32 %42, %20, !insn.addr !7325
  %44 = or i32 %43, %22, !insn.addr !7325
  %45 = or i32 %44, 2, !insn.addr !7325
  %46 = add i32 %3, 70269187, !insn.addr !7326
  %47 = inttoptr i32 %46 to i8*, !insn.addr !7326
  %48 = load i8, i8* %47, align 1, !insn.addr !7326
  %49 = trunc i32 %5 to i8, !insn.addr !7326
  %50 = or i8 %48, %49, !insn.addr !7326
  %51 = icmp eq i8 %50, 0, !insn.addr !7326
  %52 = icmp slt i8 %50, 0, !insn.addr !7326
  store i8 %50, i8* %47, align 1, !insn.addr !7326
  %53 = icmp eq i1 %52, false, !insn.addr !7327
  %54 = icmp eq i1 %51, false, !insn.addr !7327
  %55 = icmp eq i1 %53, %54, !insn.addr !7327
  br i1 %55, label %dec_label_pc_1011b42, label %dec_label_pc_1011ad5, !insn.addr !7327

dec_label_pc_1011ad5:                             ; preds = %dec_label_pc_1011aca
  %56 = add i32 %6, 12, !insn.addr !7328
  %57 = inttoptr i32 %56 to i32*, !insn.addr !7328
  %58 = load i32, i32* %57, align 4, !insn.addr !7328
  %59 = icmp eq i32 %58, %5, !insn.addr !7328
  %60 = icmp eq i1 %59, false, !insn.addr !7329
  br i1 %60, label %dec_label_pc_1011b1c, label %dec_label_pc_1011ada, !insn.addr !7329

dec_label_pc_1011ada:                             ; preds = %dec_label_pc_1011ad5
  %61 = add i32 %6, -121, !insn.addr !7330
  %62 = inttoptr i32 %61 to i32*, !insn.addr !7330
  %63 = load i32, i32* %62, align 4, !insn.addr !7330
  %64 = icmp eq i32 %63, %0, !insn.addr !7330
  %65 = icmp eq i1 %64, false, !insn.addr !7331
  br i1 %65, label %dec_label_pc_1011b1c, label %dec_label_pc_1011adf, !insn.addr !7331

dec_label_pc_1011adf:                             ; preds = %dec_label_pc_1011ada
  %66 = xor i32 %6, %5, !insn.addr !7332
  %67 = trunc i32 %4 to i16, !insn.addr !7333
  call void @__asm_out.2(i16 %67, i32 %6), !insn.addr !7333
  %68 = udiv i32 %66, 256, !insn.addr !7334
  %69 = or i32 %68, %6, !insn.addr !7334
  %70 = load i32, i32* %ebx, align 4, !insn.addr !7335
  %71 = and i32 %69, 255, !insn.addr !7335
  %72 = add i32 %70, %71, !insn.addr !7335
  %73 = inttoptr i32 %72 to i8*, !insn.addr !7335
  %74 = load i8, i8* %73, align 1, !insn.addr !7335
  %75 = zext i8 %74 to i32, !insn.addr !7335
  %76 = and i32 %6, -256, !insn.addr !7335
  %77 = or i32 %76, %75, !insn.addr !7335
  %78 = add i32 %66, 74850363, !insn.addr !7336
  %79 = inttoptr i32 %78 to i32*, !insn.addr !7336
  %80 = load i32, i32* %79, align 4, !insn.addr !7336
  %81 = add i32 %80, -1, !insn.addr !7336
  store i32 %81, i32* %79, align 4, !insn.addr !7336
  %82 = icmp sgt i32 %80, 1, !insn.addr !7337
  store i32 %77, i32* %merge.reg2mem, !insn.addr !7337
  br i1 %82, label %dec_label_pc_1011af8, label %dec_label_pc_1011af1, !insn.addr !7337

dec_label_pc_1011af1:                             ; preds = %dec_label_pc_1011ab7, %dec_label_pc_1011b1c, %dec_label_pc_1011adf
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !7338

dec_label_pc_1011af8:                             ; preds = %dec_label_pc_1011adf
  %83 = add i32 %3, -4, !insn.addr !7339
  %84 = inttoptr i32 %83 to i32*, !insn.addr !7339
  %85 = add i32 %3, -8, !insn.addr !7340
  %86 = inttoptr i32 %85 to i32*, !insn.addr !7340
  store i32 %77, i32* %86, align 4, !insn.addr !7340
  %87 = call i32 @function_8c040e0c(), !insn.addr !7341
  ret i32 %87, !insn.addr !7341

dec_label_pc_1011b1c:                             ; preds = %dec_label_pc_1011ada, %dec_label_pc_1011ad5
  %88 = add i32 %2, 16, !insn.addr !7342
  %89 = inttoptr i32 %88 to i32*, !insn.addr !7342
  %90 = load i32, i32* %89, align 4, !insn.addr !7342
  %91 = add i32 %3, -4, !insn.addr !7342
  %92 = inttoptr i32 %91 to i32*, !insn.addr !7342
  store i32 %90, i32* %92, align 4, !insn.addr !7342
  %93 = add i32 %3, -8, !insn.addr !7343
  %94 = inttoptr i32 %93 to i32*, !insn.addr !7343
  %95 = load i32, i32* %ebx, align 4, !insn.addr !7344
  %96 = add i32 %3, -12, !insn.addr !7344
  %97 = inttoptr i32 %96 to i32*, !insn.addr !7344
  store i32 %95, i32* %97, align 4, !insn.addr !7344
  %98 = call i32 @unknown_2517a5(i32 %45), !insn.addr !7345
  store i32 %98, i32* %merge.reg2mem, !insn.addr !7346
  br label %dec_label_pc_1011af1, !insn.addr !7346

dec_label_pc_1011b42:                             ; preds = %dec_label_pc_1011aca
  %99 = bitcast i32* %ebx to i8*
  %100 = load i8, i8* %99, align 4, !insn.addr !7347
  %101 = mul i8 %100, 32, !insn.addr !7347
  %102 = udiv i8 %100, 8, !insn.addr !7347
  %103 = or i8 %102, %101, !insn.addr !7347
  %104 = load i32, i32* %ebx, align 4, !insn.addr !7347
  %105 = inttoptr i32 %104 to i8*, !insn.addr !7347
  store i8 %103, i8* %105, align 1, !insn.addr !7347
  %106 = add i32 %4, -1336737792, !insn.addr !7348
  %107 = inttoptr i32 %106 to i8*, !insn.addr !7348
  %108 = load i8, i8* %107, align 1, !insn.addr !7348
  %109 = xor i8 %108, %49, !insn.addr !7348
  %110 = icmp eq i8 %109, 0, !insn.addr !7348
  %111 = icmp eq i1 %110, false, !insn.addr !7349
  br i1 %111, label %dec_label_pc_1011b73, label %dec_label_pc_1011b50, !insn.addr !7349

dec_label_pc_1011b50:                             ; preds = %dec_label_pc_1011b42
  %112 = load i32, i32* inttoptr (i32 27414360 to i32*), align 8, !insn.addr !7350
  %113 = icmp eq i32 %112, -58, !insn.addr !7350
  %114 = icmp eq i1 %113, false, !insn.addr !7351
  br i1 %114, label %dec_label_pc_1011c79, label %dec_label_pc_1011b5d, !insn.addr !7351

dec_label_pc_1011b5d:                             ; preds = %dec_label_pc_1011b50
  %115 = add i32 %3, -4, !insn.addr !7352
  %116 = inttoptr i32 %115 to i32*, !insn.addr !7352
  store i32 0, i32* %116, align 4, !insn.addr !7352
  %117 = call i32 @unknown_9961c1(i32 %45), !insn.addr !7353
  %118 = add i32 %1, 4, !insn.addr !7354
  %119 = inttoptr i32 %118 to i32*, !insn.addr !7354
  %120 = load i32, i32* %119, align 4, !insn.addr !7354
  %121 = add i32 %3, -8, !insn.addr !7354
  %122 = inttoptr i32 %121 to i32*, !insn.addr !7354
  store i32 %120, i32* %122, align 4, !insn.addr !7354
  %123 = call i32 @function_1009095(), !insn.addr !7355
  %124 = call i32 @function_a98d044e(), !insn.addr !7356
  ret i32 %124, !insn.addr !7356

dec_label_pc_1011b73:                             ; preds = %dec_label_pc_1011b42
  %125 = load i32, i32* %ebx, align 4, !insn.addr !7357
  %126 = add i32 %125, -1044283811, !insn.addr !7357
  %127 = inttoptr i32 %126 to i8*, !insn.addr !7357
  %128 = load i8, i8* %127, align 1, !insn.addr !7357
  %129 = add i8 %128, %109, !insn.addr !7357
  store i8 %129, i8* %127, align 1, !insn.addr !7357
  %130 = call i32 @function_f49ca082(i32 %45), !insn.addr !7358
  ret i32 %130, !insn.addr !7358

dec_label_pc_1011c79:                             ; preds = %dec_label_pc_1011b50
  %131 = zext i8 %109 to i32, !insn.addr !7348
  %132 = and i32 %5, -256, !insn.addr !7348
  %133 = or i32 %132, %131, !insn.addr !7348
  %134 = load i32, i32* %ebx, align 4, !insn.addr !7359
  %135 = add i32 %3, 4, !insn.addr !7359
  %136 = inttoptr i32 %135 to i32*, !insn.addr !7360
  %137 = load i32, i32* %136, align 4, !insn.addr !7360
  store i32 %137, i32* %ebx, align 4, !insn.addr !7360
  %138 = add i32 %3, 8, !insn.addr !7360
  %139 = inttoptr i32 %138 to i32*, !insn.addr !7361
  %140 = load i32, i32* %139, align 4, !insn.addr !7361
  %141 = trunc i32 %4 to i16, !insn.addr !7362
  %142 = call i8 @__asm_in.3(i16 %141), !insn.addr !7362
  %143 = add i32 %133, -24, !insn.addr !7363
  %144 = icmp ult i32 %133, 24, !insn.addr !7363
  %145 = add i32 %137, 814437896, !insn.addr !7364
  %146 = inttoptr i32 %145 to i32*, !insn.addr !7364
  %147 = load i32, i32* %146, align 4, !insn.addr !7364
  %148 = inttoptr i32 %2 to i32*, !insn.addr !7365
  store i32 %134, i32* %148, align 4, !insn.addr !7365
  %149 = add i32 %134, 106, !insn.addr !7366
  %150 = inttoptr i32 %149 to i8*, !insn.addr !7366
  %151 = load i8, i8* %150, align 1, !insn.addr !7366
  %152 = trunc i32 %143 to i8, !insn.addr !7366
  %153 = zext i1 %144 to i8, !insn.addr !7366
  %154 = add i8 %153, %152, !insn.addr !7366
  %155 = add i8 %154, %151, !insn.addr !7366
  store i8 %155, i8* %150, align 1, !insn.addr !7366
  %156 = add i32 %143, %2, !insn.addr !7367
  %157 = xor i32 %156, %143, !insn.addr !7367
  %158 = xor i32 %156, %2, !insn.addr !7367
  %159 = and i32 %157, %158, !insn.addr !7367
  %160 = icmp slt i32 %159, 0, !insn.addr !7367
  %161 = icmp slt i32 %156, 0, !insn.addr !7367
  %162 = inttoptr i32 %134 to i32*, !insn.addr !7368
  store i32 2106142523, i32* %162, align 4, !insn.addr !7368
  %163 = add i32 %147, -24, !insn.addr !7369
  %164 = inttoptr i32 %163 to i32*, !insn.addr !7369
  store i32 %140, i32* %164, align 4, !insn.addr !7369
  %165 = icmp eq i1 %161, %160, !insn.addr !7370
  br i1 %165, label %dec_label_pc_1011ca8, label %dec_label_pc_1011ca3, !insn.addr !7370

dec_label_pc_1011ca3:                             ; preds = %dec_label_pc_1011c79
  %166 = call i32 @unknown_f9e4f9ed(), !insn.addr !7371
  br label %dec_label_pc_1011ca8, !insn.addr !7371

dec_label_pc_1011ca8:                             ; preds = %dec_label_pc_1011ca3, %dec_label_pc_1011c79
  %167 = load i32, i32* %ebx, align 4, !insn.addr !7372
  %168 = add i32 %2, -4, !insn.addr !7372
  %169 = inttoptr i32 %168 to i32*, !insn.addr !7372
  store i32 %167, i32* %169, align 4, !insn.addr !7372
  %170 = add i32 %147, 12, !insn.addr !7373
  %171 = inttoptr i32 %170 to i8*, !insn.addr !7373
  %172 = load i8, i8* %171, align 1, !insn.addr !7373
  %173 = load i32, i32* %ebx, align 4, !insn.addr !7373
  %174 = trunc i32 %173 to i8, !insn.addr !7373
  %175 = xor i8 %172, %174, !insn.addr !7373
  store i8 %175, i8* %171, align 1, !insn.addr !7373
  %176 = load i32, i32* %ebx, align 4, !insn.addr !7374
  %177 = add i32 %176, 4, !insn.addr !7374
  %178 = inttoptr i32 %177 to i32*, !insn.addr !7374
  %179 = load i32, i32* %178, align 4, !insn.addr !7374
  %180 = add i32 %134, -10536272, !insn.addr !7375
  %181 = inttoptr i32 %180 to i32*, !insn.addr !7375
  %182 = load i32, i32* %181, align 4, !insn.addr !7375
  %183 = add i32 %182, %147, !insn.addr !7375
  store i32 %183, i32* %181, align 4, !insn.addr !7375
  %184 = add i32 %134, 1261111374, !insn.addr !7376
  %185 = inttoptr i32 %184 to i16*, !insn.addr !7376
  %186 = load i16, i16* %185, align 2, !insn.addr !7376
  %187 = trunc i32 %156 to i16, !insn.addr !7376
  call void @__asm_arpl(i16 %186, i16 %187), !insn.addr !7376
  %188 = and i32 %179, -256, !insn.addr !7377
  %189 = add i32 %2, -8, !insn.addr !7378
  %190 = inttoptr i32 %189 to i32*, !insn.addr !7378
  store i32 %140, i32* %190, align 4, !insn.addr !7378
  %191 = add i32 %179, 182, !insn.addr !7379
  %192 = and i32 %191, 255, !insn.addr !7379
  %193 = or i32 %192, %188, !insn.addr !7379
  ret i32 %193, !insn.addr !7380
}

define i32 @function_1011cd1(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011cd1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = load i8, i8* inttoptr (i32 194187022 to i8*), align 2, !insn.addr !7381
  %5 = udiv i32 %1, 256, !insn.addr !7381
  %6 = trunc i32 %5 to i8, !insn.addr !7381
  %7 = or i8 %4, %6, !insn.addr !7381
  store i8 %7, i8* inttoptr (i32 194187022 to i8*), align 2, !insn.addr !7381
  %8 = add i32 %0, 1789507652, !insn.addr !7382
  %9 = inttoptr i32 %8 to i8*, !insn.addr !7382
  %10 = load i8, i8* %9, align 1, !insn.addr !7382
  %11 = trunc i32 %2 to i8, !insn.addr !7382
  %12 = or i8 %10, %11, !insn.addr !7382
  store i8 %12, i8* %9, align 1, !insn.addr !7382
  %13 = add i32 %2, -710738875, !insn.addr !7383
  %14 = inttoptr i32 %13 to i8*, !insn.addr !7383
  %15 = load i8, i8* %14, align 1, !insn.addr !7383
  %16 = add i8 %15, %11, !insn.addr !7383
  store i8 %16, i8* %14, align 1, !insn.addr !7383
  ret i32 %3, !insn.addr !7384
}

define i32 @function_1011cec() local_unnamed_addr {
dec_label_pc_1011cec:
  %0 = call i32 @function_7e80476(), !insn.addr !7385
  ret i32 %0, !insn.addr !7385
}

define i32 @function_1011cf6() local_unnamed_addr {
dec_label_pc_1011cf6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, 141, !insn.addr !7386
  %2 = and i32 %1, 255, !insn.addr !7386
  %3 = and i32 %0, -256, !insn.addr !7386
  %4 = or i32 %2, %3, !insn.addr !7386
  ret i32 %4, !insn.addr !7387
}

define i32 @function_1011d2b() local_unnamed_addr {
dec_label_pc_1011d2b:
  %0 = call i32 @function_8cf9a887(), !insn.addr !7388
  ret i32 %0, !insn.addr !7388
}

define i32 @function_1011d36(i32 %arg1) local_unnamed_addr {
dec_label_pc_1011d36:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7389
}

define i32 @function_1011d81() local_unnamed_addr {
dec_label_pc_1011d81:
  %edx.0.reg2mem = alloca i32, !insn.addr !7390
  %ecx.0.reg2mem = alloca i32, !insn.addr !7390
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_0()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = trunc i32 %6 to i8
  %9 = zext i1 %7 to i8, !insn.addr !7390
  %10 = add i8 %9, %8, !insn.addr !7390
  %11 = inttoptr i32 %6 to i8*, !insn.addr !7390
  store i8 %10, i8* %11, align 1, !insn.addr !7390
  %12 = add i32 %0, -16, !insn.addr !7391
  %13 = inttoptr i32 %12 to i32*, !insn.addr !7391
  %14 = load i32, i32* %13, align 4, !insn.addr !7391
  %15 = add i32 %14, %5, !insn.addr !7391
  store i32 %15, i32* %13, align 4, !insn.addr !7391
  %16 = call i32 @unknown_2ee95c19(i32 0), !insn.addr !7392
  %17 = add i32 %4, 1, !insn.addr !7393
  %18 = inttoptr i32 %1 to i32*, !insn.addr !7394
  store i32 0, i32* %18, align 4, !insn.addr !7394
  %19 = add i32 %3, 4, !insn.addr !7395
  %20 = inttoptr i32 %19 to i32*, !insn.addr !7395
  %21 = load i32, i32* %20, align 4, !insn.addr !7395
  %22 = inttoptr i32 %2 to i32*, !insn.addr !7395
  store i32 %21, i32* %22, align 4, !insn.addr !7395
  %23 = add i32 %2, 101, !insn.addr !7396
  %24 = inttoptr i32 %23 to i32*, !insn.addr !7396
  %25 = load i32, i32* %24, align 4, !insn.addr !7396
  %26 = add i32 %2, -4, !insn.addr !7396
  %27 = inttoptr i32 %26 to i32*, !insn.addr !7396
  store i32 %25, i32* %27, align 4, !insn.addr !7396
  %28 = add i32 %3, 1966998606, !insn.addr !7397
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7397
  %30 = load i32, i32* %29, align 4, !insn.addr !7397
  %31 = xor i32 %30, %3, !insn.addr !7397
  %32 = mul i32 %31, 2, !insn.addr !7398
  %33 = add i32 %32, %17, !insn.addr !7398
  %34 = inttoptr i32 %33 to i32*, !insn.addr !7398
  %35 = load i32, i32* %34, align 4, !insn.addr !7398
  store i32 %17, i32* %34, align 4, !insn.addr !7398
  %36 = add i32 %1, -1952124157, !insn.addr !7399
  %37 = inttoptr i32 %36 to i8*, !insn.addr !7399
  store i32 %31, i32* %ecx.0.reg2mem, !insn.addr !7398
  store i32 %35, i32* %edx.0.reg2mem, !insn.addr !7398
  br label %dec_label_pc_1011daf, !insn.addr !7398

dec_label_pc_1011daf:                             ; preds = %dec_label_pc_1011daf, %dec_label_pc_1011d81
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %38 = add i32 %ecx.0.reload, %5, !insn.addr !7400
  %39 = udiv i32 %edx.0.reload, 256, !insn.addr !7401
  %40 = add i32 %39, %edx.0.reload, !insn.addr !7401
  %41 = and i32 %40, 255, !insn.addr !7401
  %42 = and i32 %edx.0.reload, -256, !insn.addr !7401
  %43 = or i32 %41, %42, !insn.addr !7401
  %44 = add i32 %38, -1952058622, !insn.addr !7402
  %45 = inttoptr i32 %44 to i32*, !insn.addr !7402
  %46 = load i32, i32* %45, align 4, !insn.addr !7402
  %47 = udiv i32 %46, 256, !insn.addr !7402
  store i32 %47, i32* %45, align 4, !insn.addr !7402
  %48 = trunc i32 %38 to i8, !insn.addr !7399
  %49 = load i8, i8* %37, align 1, !insn.addr !7399
  %50 = and i8 %49, %48, !insn.addr !7399
  %51 = icmp eq i8 %50, 0, !insn.addr !7399
  %52 = zext i8 %50 to i32, !insn.addr !7399
  %53 = and i32 %38, -256, !insn.addr !7399
  %54 = or i32 %53, %52, !insn.addr !7399
  %55 = icmp eq i1 %51, false, !insn.addr !7403
  store i32 %54, i32* %ecx.0.reg2mem, !insn.addr !7403
  store i32 %43, i32* %edx.0.reg2mem, !insn.addr !7403
  br i1 %55, label %dec_label_pc_1011daf, label %dec_label_pc_1011dc7, !insn.addr !7403

dec_label_pc_1011dc7:                             ; preds = %dec_label_pc_1011daf
  %56 = call i8 @llvm.ctpop.i8(i8 %50), !range !258, !insn.addr !7399
  %57 = and i8 %56, 1, !insn.addr !7399
  %58 = icmp eq i8 %57, 0, !insn.addr !7399
  %59 = icmp slt i8 %50, 0, !insn.addr !7399
  %60 = trunc i32 %43 to i16, !insn.addr !7404
  call void @__asm_outsd(i16 %60, i32 %1), !insn.addr !7404
  %61 = zext i1 %58 to i32, !insn.addr !7405
  %62 = zext i1 %51 to i32, !insn.addr !7405
  %63 = zext i1 %59 to i32, !insn.addr !7405
  %64 = mul i32 %61, 1024, !insn.addr !7405
  %65 = mul i32 %62, 16384, !insn.addr !7405
  %66 = mul i32 %63, 32768, !insn.addr !7405
  %67 = and i32 %5, -65281, !insn.addr !7405
  %68 = or i32 %67, %66, !insn.addr !7405
  %69 = or i32 %68, %65, !insn.addr !7405
  %70 = or i32 %69, %64, !insn.addr !7405
  %71 = or i32 %70, 512, !insn.addr !7405
  ret i32 %71, !insn.addr !7406
}

define i32 @function_1011e02() local_unnamed_addr {
dec_label_pc_1011e02:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7407
}

define i32 @function_1011e14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011e14:
  %eax.0.reg2mem = alloca i32, !insn.addr !7408
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %9 = icmp eq i1 %6, %5, !insn.addr !7408
  %10 = icmp eq i1 %7, false, !insn.addr !7408
  %11 = icmp eq i1 %9, %10, !insn.addr !7408
  br i1 %11, label %dec_label_pc_1011e7b, label %dec_label_pc_1011e16, !insn.addr !7408

dec_label_pc_1011e16:                             ; preds = %dec_label_pc_1011e14
  %12 = icmp eq i32 %0, 0, !insn.addr !7409
  %13 = icmp eq i1 %12, false, !insn.addr !7410
  br i1 %13, label %14, label %dec_label_pc_1011e1a, !insn.addr !7410

; <label>:14:                                     ; preds = %dec_label_pc_1011e16
  %15 = call i32 @function_1011e02(), !insn.addr !7410
  store i32 %15, i32* %eax.0.reg2mem, !insn.addr !7410
  br label %dec_label_pc_1011e1a, !insn.addr !7410

dec_label_pc_1011e1a:                             ; preds = %14, %dec_label_pc_1011e16
  %16 = add i32 %1, -20, !insn.addr !7411
  %17 = inttoptr i32 %16 to i32*, !insn.addr !7411
  %18 = load i32, i32* %17, align 4, !insn.addr !7411
  %19 = icmp eq i32 %18, 0, !insn.addr !7411
  br i1 %19, label %dec_label_pc_1011e4b, label %dec_label_pc_1011e20, !insn.addr !7412

dec_label_pc_1011e20:                             ; preds = %dec_label_pc_1011e1a
  %20 = sub i32 0, %0, !insn.addr !7413
  %21 = inttoptr i32 %0 to i32*, !insn.addr !7413
  store i32 %20, i32* %21, align 4, !insn.addr !7413
  %22 = add i32 %1, -16, !insn.addr !7414
  ret i32 %22, !insn.addr !7415

dec_label_pc_1011e4b:                             ; preds = %dec_label_pc_1011e1a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %23 = or i32 %eax.0.reload, 139, !insn.addr !7416
  %24 = add i32 %1, -3, !insn.addr !7417
  %25 = inttoptr i32 %24 to i32*, !insn.addr !7417
  %26 = load i32, i32* %25, align 4, !insn.addr !7417
  %27 = add i32 %26, 4, !insn.addr !7417
  store i32 %27, i32* %25, align 4, !insn.addr !7417
  %28 = add i32 %1, 13, !insn.addr !7418
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7418
  %30 = load i32, i32* %29, align 4, !insn.addr !7418
  %31 = add i32 %30, -1, !insn.addr !7418
  store i32 %31, i32* %29, align 4, !insn.addr !7418
  ret i32 %23, !insn.addr !7419

dec_label_pc_1011e72:                             ; preds = %dec_label_pc_1011e7b
  %32 = add i32 %2, -117, !insn.addr !7420
  %33 = inttoptr i32 %32 to i16*, !insn.addr !7420
  %34 = udiv i32 %3, 256, !insn.addr !7421
  %35 = and i32 %34, 255
  %36 = or i32 %43, %35, !insn.addr !7421
  ret i32 %36, !insn.addr !7422

dec_label_pc_1011e7b:                             ; preds = %dec_label_pc_1011e14
  %37 = add i32 %2, -5701593, !insn.addr !7423
  %38 = inttoptr i32 %37 to i32*, !insn.addr !7423
  %39 = load i32, i32* %38, align 4, !insn.addr !7423
  %40 = add i32 %39, 1, !insn.addr !7423
  store i32 %40, i32* %38, align 4, !insn.addr !7423
  %41 = zext i1 %8 to i32, !insn.addr !7424
  %42 = add i32 %4, 16781436, !insn.addr !7424
  %43 = add i32 %42, %41, !insn.addr !7424
  %44 = icmp eq i32 %2, 0, !insn.addr !7425
  %45 = icmp eq i1 %44, false, !insn.addr !7426
  br i1 %45, label %dec_label_pc_1011e72, label %dec_label_pc_1011e8c, !insn.addr !7426

dec_label_pc_1011e8c:                             ; preds = %dec_label_pc_1011e7b
  %46 = add i32 %1, 12, !insn.addr !7427
  %47 = inttoptr i32 %46 to i32*, !insn.addr !7427
  %48 = load i32, i32* %47, align 4, !insn.addr !7427
  %49 = add i32 %1, -12, !insn.addr !7428
  %50 = inttoptr i32 %49 to i32*, !insn.addr !7428
  %51 = load i32, i32* %50, align 4, !insn.addr !7428
  %52 = add i32 %51, -48, !insn.addr !7429
  %53 = inttoptr i32 %52 to i32*, !insn.addr !7429
  %54 = load i32, i32* %53, align 4, !insn.addr !7429
  %55 = and i32 %54, %48, !insn.addr !7429
  store i32 %55, i32* %53, align 4, !insn.addr !7429
  %56 = add i32 %51, 4, !insn.addr !7430
  %57 = inttoptr i32 %56 to i16*, !insn.addr !7430
  %58 = load i16, i16* %57, align 2, !insn.addr !7430
  %59 = trunc i32 %43 to i16, !insn.addr !7430
  call void @__asm_arpl(i16 %58, i16 %59), !insn.addr !7430
  %60 = inttoptr i32 %43 to i32*, !insn.addr !7431
  %61 = load i32, i32* %60, align 4, !insn.addr !7431
  %62 = add i32 %61, %43, !insn.addr !7431
  store i32 %62, i32* %60, align 4, !insn.addr !7431
  %63 = inttoptr i32 %43 to i8*, !insn.addr !7432
  %64 = load i8, i8* %63, align 1, !insn.addr !7432
  %65 = trunc i32 %43 to i8, !insn.addr !7432
  %66 = add i8 %64, %65, !insn.addr !7432
  store i8 %66, i8* %63, align 1, !insn.addr !7432
  %67 = call i32 @function_1011ecf(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !7433
  ret i32 %67, !insn.addr !7433
}

define i32 @function_1011ea3() local_unnamed_addr {
dec_label_pc_1011ea3:
  %eax.0.reg2mem = alloca i32, !insn.addr !7434
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, 105, !insn.addr !7434
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7434
  %6 = load i32, i32* %5, align 4, !insn.addr !7434
  %7 = add i32 %0, 33148265, !insn.addr !7435
  %8 = inttoptr i32 %7 to i32*, !insn.addr !7435
  %9 = load i32, i32* %8, align 4, !insn.addr !7435
  %10 = sub i32 %9, %2, !insn.addr !7435
  store i32 %10, i32* %8, align 4, !insn.addr !7435
  %11 = trunc i32 %6 to i8, !insn.addr !7436
  %12 = xor i8 %11, -2
  %13 = icmp ult i8 %12, 126, !insn.addr !7436
  %14 = add i32 %2, 1099648077, !insn.addr !7437
  %15 = inttoptr i32 %14 to i32*, !insn.addr !7437
  %16 = load i32, i32* %15, align 4, !insn.addr !7437
  %.neg1 = sext i1 %13 to i32
  %.neg2 = sub i32 %3, %16, !insn.addr !7437
  %17 = add i32 %.neg2, %.neg1, !insn.addr !7437
  %18 = add i32 %2, 1166737913, !insn.addr !7438
  %19 = inttoptr i32 %18 to i32*, !insn.addr !7438
  %20 = load i32, i32* %19, align 4, !insn.addr !7438
  %21 = add i32 %20, 1, !insn.addr !7438
  %22 = xor i32 %20, -2147483648
  %23 = and i32 %21, %22, !insn.addr !7438
  %24 = icmp slt i32 %23, 0, !insn.addr !7438
  %25 = icmp eq i32 %21, 0, !insn.addr !7438
  %26 = icmp slt i32 %21, 0, !insn.addr !7438
  store i32 %21, i32* %19, align 4, !insn.addr !7438
  %27 = call i32 @__asm_hlt(), !insn.addr !7439
  %28 = add i32 %27, 4, !insn.addr !7440
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7440
  store i32 %17, i32* %29, align 4, !insn.addr !7440
  %30 = icmp eq i1 %26, %24, !insn.addr !7441
  %31 = icmp eq i1 %25, false, !insn.addr !7441
  %32 = icmp eq i1 %30, %31, !insn.addr !7441
  store i32 %27, i32* %eax.0.reg2mem, !insn.addr !7441
  br i1 %32, label %33, label %dec_label_pc_1011ecc, !insn.addr !7441

; <label>:33:                                     ; preds = %dec_label_pc_1011ea3
  %34 = call i32 @function_1011ef3(), !insn.addr !7441
  store i32 %34, i32* %eax.0.reg2mem, !insn.addr !7441
  br label %dec_label_pc_1011ecc, !insn.addr !7441

dec_label_pc_1011ecc:                             ; preds = %33, %dec_label_pc_1011ea3
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !7442
}

define i32 @function_1011ecf(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1011ecf:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 922683509, !insn.addr !7443
  %3 = inttoptr i32 %2 to i32*, !insn.addr !7443
  %4 = load i32, i32* %3, align 4, !insn.addr !7443
  %5 = add i32 %4, -1, !insn.addr !7443
  store i32 %5, i32* %3, align 4, !insn.addr !7443
  call void @__asm_out.4(i32 181, i32 %1), !insn.addr !7444
  ret i32 %1, !insn.addr !7445
}

define i32 @function_1011ede() local_unnamed_addr {
dec_label_pc_1011ede:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, -909484226, !insn.addr !7446
  %3 = inttoptr i32 %2 to i32*, !insn.addr !7446
  %4 = load i32, i32* %3, align 4, !insn.addr !7446
  %5 = add i32 %4, -1, !insn.addr !7446
  store i32 %5, i32* %3, align 4, !insn.addr !7446
  ret i32 %1, !insn.addr !7447
}

define i32 @function_1011ef3() local_unnamed_addr {
dec_label_pc_1011f14:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = or i32 %1, 1, !insn.addr !7448
  %3 = add i32 %0, 29, !insn.addr !7449
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7449
  %5 = load i32, i32* %4, align 4, !insn.addr !7449
  %6 = add i32 %0, -4, !insn.addr !7449
  %7 = inttoptr i32 %6 to i32*, !insn.addr !7449
  store i32 %5, i32* %7, align 4, !insn.addr !7449
  %8 = add i32 %0, -8, !insn.addr !7450
  %9 = inttoptr i32 %8 to i32*, !insn.addr !7450
  store i32 %2, i32* %9, align 4, !insn.addr !7450
  %10 = or i32 %1, 233, !insn.addr !7451
  ret i32 %10, !insn.addr !7452
}

define i32 @function_1012080(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1012080:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7453
}

define i32 @function_10120bc() local_unnamed_addr {
dec_label_pc_10120bc:
  %storemerge1.reg2mem = alloca i32, !insn.addr !7454
  %.reg2mem = alloca i32, !insn.addr !7454
  %esi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__asm_hlt(), !insn.addr !7455
  %3 = add i32 %0, 12, !insn.addr !7456
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7456
  %5 = load i32, i32* %4, align 4, !insn.addr !7456
  %6 = call i32 @__asm_iretd(), !insn.addr !7457
  %7 = load i8, i8* inttoptr (i32 -1946925574 to i8*), align 2, !insn.addr !7458
  %8 = add i8 %7, 70, !insn.addr !7458
  store i8 %8, i8* inttoptr (i32 -1946925574 to i8*), align 2, !insn.addr !7458
  %9 = add i32 %2, 1, !insn.addr !7459
  %10 = add i32 %1, -4, !insn.addr !7460
  %11 = inttoptr i32 %10 to i32*, !insn.addr !7460
  store i32 %9, i32* %11, align 4, !insn.addr !7460
  %12 = load i32, i32* %esi, align 4, !insn.addr !7461
  %13 = add i32 %12, 36, !insn.addr !7461
  %14 = inttoptr i32 %13 to i32*, !insn.addr !7461
  %15 = load i32, i32* %14, align 4, !insn.addr !7461
  %16 = add i32 %5, 4, !insn.addr !7462
  %17 = inttoptr i32 %16 to i32*, !insn.addr !7462
  %18 = load i32, i32* %17, align 4, !insn.addr !7462
  %19 = sub i32 %15, %18, !insn.addr !7462
  %20 = add i32 %5, 8, !insn.addr !7463
  %21 = inttoptr i32 %20 to i32*, !insn.addr !7463
  %22 = load i32, i32* %21, align 4, !insn.addr !7463
  %23 = sub i32 %19, %22, !insn.addr !7463
  store i32 0, i32* %4, align 4, !insn.addr !7464
  %24 = inttoptr i32 %23 to i32*, !insn.addr !7465
  %25 = load i32, i32* %24, align 4, !insn.addr !7465
  %26 = add i32 %25, %9, !insn.addr !7465
  %27 = icmp eq i32 %26, 0, !insn.addr !7465
  store i32 %26, i32* %24, align 4, !insn.addr !7465
  %28 = add i32 %2, 9, !insn.addr !7466
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7466
  store i32 %23, i32* %29, align 4, !insn.addr !7466
  %30 = load i32, i32* %esi, align 4, !insn.addr !7467
  %31 = inttoptr i32 %9 to i32*, !insn.addr !7468
  %32 = icmp eq i1 %27, false, !insn.addr !7469
  %33 = load i32, i32* %31, align 4, !insn.addr !7468
  %34 = mul i32 %33, %30, !insn.addr !7468
  %35 = inttoptr i32 %30 to i32*, !insn.addr !7470
  store i32 %34, i32* %35, align 4, !insn.addr !7470
  store i32 %34, i32* %.reg2mem, !insn.addr !7469
  br i1 %32, label %dec_label_pc_10120f2.dec_label_pc_10120f2_crit_edge, label %dec_label_pc_10120fa, !insn.addr !7469

dec_label_pc_10120f2.dec_label_pc_10120f2_crit_edge: ; preds = %dec_label_pc_10120bc, %dec_label_pc_10120f2.dec_label_pc_10120f2_crit_edge
  %.reload = load i32, i32* %.reg2mem
  %.pre = load i32, i32* %esi, align 4
  %36 = load i32, i32* %31, align 4, !insn.addr !7468
  %37 = mul i32 %36, %.reload, !insn.addr !7468
  %38 = inttoptr i32 %.pre to i32*, !insn.addr !7470
  store i32 %37, i32* %38, align 4, !insn.addr !7470
  store i32 %37, i32* %.reg2mem
  br label %dec_label_pc_10120f2.dec_label_pc_10120f2_crit_edge

dec_label_pc_10120fa:                             ; preds = %dec_label_pc_10120bc
  %39 = add i32 %0, 101, !insn.addr !7471
  %40 = inttoptr i32 %39 to i32*, !insn.addr !7471
  store i32 %9, i32* %40, align 4, !insn.addr !7471
  %41 = call i32 @function_1007bc1(i32 ptrtoint (i32* @0 to i32)), !insn.addr !7472
  %42 = add i32 %0, -78, !insn.addr !7473
  %43 = inttoptr i32 %42 to i32*, !insn.addr !7473
  store i32 0, i32* %43, align 4, !insn.addr !7473
  %44 = load i32, i32* %esi, align 4, !insn.addr !7474
  %45 = add i32 %44, 4, !insn.addr !7474
  %46 = inttoptr i32 %45 to i32*, !insn.addr !7474
  %47 = load i32, i32* %46, align 4, !insn.addr !7474
  %48 = add i32 %1, -8, !insn.addr !7474
  %49 = inttoptr i32 %48 to i32*, !insn.addr !7474
  store i32 %47, i32* %49, align 4, !insn.addr !7474
  %50 = call i32 @function_1007ba4(), !insn.addr !7475
  %51 = add i32 %0, -8, !insn.addr !7476
  %52 = inttoptr i32 %51 to i32*, !insn.addr !7476
  store i32 %50, i32* %52, align 4, !insn.addr !7476
  %53 = add i32 %50, 13, !insn.addr !7477
  %54 = and i32 %50, -256, !insn.addr !7477
  %55 = and i32 %53, 114, !insn.addr !7478
  %56 = or i32 %55, 141, !insn.addr !7478
  %57 = or i32 %56, %54, !insn.addr !7479
  %58 = inttoptr i32 %57 to i8*, !insn.addr !7480
  %59 = load i8, i8* %58, align 1, !insn.addr !7480
  %60 = trunc i32 %56 to i8, !insn.addr !7480
  %61 = add i8 %59, %60, !insn.addr !7480
  store i8 %61, i8* %58, align 1, !insn.addr !7480
  %62 = icmp ult i32 %34, 4
  br i1 %62, label %._crit_edge, label %.lr.ph, !insn.addr !7481

.lr.ph:                                           ; preds = %dec_label_pc_10120fa
  %63 = udiv i32 %34, 4, !insn.addr !7482
  %64 = trunc i32 %9 to i16, !insn.addr !7481
  %65 = bitcast i32* %esi to i8*
  %66 = load i8, i8* %65, align 4, !insn.addr !7481
  store i32 %63, i32* %storemerge1.reg2mem
  br label %67

; <label>:67:                                     ; preds = %.lr.ph, %67
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  call void @__asm_outsb(i16 %64, i8 %66), !insn.addr !7481
  %68 = add nsw i32 %storemerge1.reload, -1, !insn.addr !7481
  %69 = icmp eq i32 %68, 0, !insn.addr !7481
  store i32 %68, i32* %storemerge1.reg2mem, !insn.addr !7481
  br i1 %69, label %._crit_edge, label %67, !insn.addr !7481

._crit_edge:                                      ; preds = %67, %dec_label_pc_10120fa
  %70 = add i32 %34, -1, !insn.addr !7483
  %71 = add i32 %34, -4, !insn.addr !7484
  %72 = inttoptr i32 %71 to i32*, !insn.addr !7484
  store i32 %70, i32* %72, align 4, !insn.addr !7484
  %73 = inttoptr i32 %9 to i8*, !insn.addr !7485
  store i8 -117, i8* %73, align 1, !insn.addr !7485
  %74 = inttoptr i32 %70 to i32*, !insn.addr !7486
  store i32 %48, i32* %74, align 4, !insn.addr !7486
  %75 = add nuw nsw i32 %56, 139, !insn.addr !7487
  %76 = and i32 %75, 250, !insn.addr !7487
  %77 = or i32 %54, %76, !insn.addr !7487
  %78 = or i32 %77, 4, !insn.addr !7488
  %79 = inttoptr i32 %78 to i32*, !insn.addr !7488
  %80 = load i32, i32* %79, align 4, !insn.addr !7488
  %81 = sub i32 %70, %80, !insn.addr !7488
  %82 = add i32 %34, -8, !insn.addr !7489
  %83 = inttoptr i32 %82 to i32*, !insn.addr !7489
  store i32 2105739339, i32* %83, align 4, !insn.addr !7489
  %84 = call i32 @__asm_hlt(), !insn.addr !7490
  %85 = add i32 %81, -1903425464, !insn.addr !7491
  %86 = inttoptr i32 %85 to i8*, !insn.addr !7491
  %87 = load i8, i8* %86, align 1, !insn.addr !7491
  %88 = trunc i32 %81 to i8, !insn.addr !7491
  %89 = add i8 %87, %88, !insn.addr !7491
  store i8 %89, i8* %86, align 1, !insn.addr !7491
  %90 = call i32 @function_f922fd55(), !insn.addr !7492
  ret i32 %90, !insn.addr !7492
}

define i32 @function_1012158() local_unnamed_addr {
dec_label_pc_1012158:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -20, !insn.addr !7493
  %2 = inttoptr i32 %1 to i32*, !insn.addr !7493
  %3 = load i32, i32* %2, align 4, !insn.addr !7493
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7494
  store i32 0, i32* %4, align 4, !insn.addr !7494
  %5 = call i32 @function_10018f83(), !insn.addr !7495
  ret i32 %5, !insn.addr !7495
}

define i32 @function_1012170() local_unnamed_addr {
dec_label_pc_1012170:
  %esi.0.reg2mem = alloca i32, !insn.addr !7496
  %ebp.0.reg2mem = alloca i32, !insn.addr !7496
  %esp.0.reg2mem = alloca i32, !insn.addr !7496
  %ebx.0.reg2mem = alloca i32, !insn.addr !7496
  %.pre-phi2.reg2mem = alloca i32*, !insn.addr !7496
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_0()
  %ecx = alloca i32, align 4
  %5 = call i1 @__decompiler_undefined_function_2()
  %6 = call i1 @__decompiler_undefined_function_2()
  %7 = call i1 @__decompiler_undefined_function_2()
  %8 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  %9 = add i32 %2, -4
  %10 = inttoptr i32 %9 to i32*
  %11 = load i32, i32* %10, align 4, !insn.addr !7496
  %12 = add i32 %2, -24, !insn.addr !7497
  %13 = inttoptr i32 %12 to i32*, !insn.addr !7497
  store i32 1, i32* %13, align 4, !insn.addr !7497
  %14 = call i32 @unknown_51007bc3(i32 %11), !insn.addr !7498
  %15 = icmp eq i1 %7, %5, !insn.addr !7499
  br i1 %15, label %dec_label_pc_1012186, label %dec_label_pc_10121f4, !insn.addr !7499

dec_label_pc_1012186:                             ; preds = %dec_label_pc_1012170
  %16 = call i32 @unknown_73007b8c(), !insn.addr !7500
  %17 = trunc i32 %4 to i16, !insn.addr !7501
  %18 = call i32 @__asm_in.5(i16 %17), !insn.addr !7501
  %19 = add i32 %18, 13, !insn.addr !7502
  %20 = and i32 %18, -256, !insn.addr !7502
  %21 = and i32 %19, 114, !insn.addr !7503
  %22 = or i32 %20, %21, !insn.addr !7503
  %23 = or i32 %22, 141, !insn.addr !7504
  %24 = add i32 %23, 106, !insn.addr !7505
  %25 = inttoptr i32 %24 to i32*, !insn.addr !7505
  %26 = load i32, i32* %25, align 4, !insn.addr !7505
  %27 = add i32 %26, 1, !insn.addr !7506
  %28 = load i32, i32* %ecx, align 4
  %29 = udiv i32 %28, 256, !insn.addr !7507
  %30 = and i32 %29, 255
  %31 = xor i32 %30, %28, !insn.addr !7507
  %32 = inttoptr i32 %3 to i8*, !insn.addr !7508
  %33 = inttoptr i32 %23 to i8*, !insn.addr !7508
  call void @__asm_rep_movsd_memcpy(i8* nonnull %33, i8* %32, i32 %31), !insn.addr !7508
  %34 = mul i32 %31, 4, !insn.addr !7508
  %35 = add i32 %28, -92, !insn.addr !7509
  %36 = inttoptr i32 %35 to i32*, !insn.addr !7509
  %37 = load i32, i32* %36, align 4, !insn.addr !7509
  %38 = or i32 %37, 106, !insn.addr !7509
  store i32 %38, i32* %36, align 4, !insn.addr !7509
  %39 = trunc i32 %3 to i8, !insn.addr !7510
  %40 = udiv i32 %4, 256, !insn.addr !7510
  %41 = trunc i32 %40 to i8, !insn.addr !7510
  %42 = add i8 %41, %39, !insn.addr !7510
  %43 = icmp ult i8 %42, %39, !insn.addr !7510
  %44 = zext i8 %42 to i32, !insn.addr !7510
  %45 = and i32 %3, -256, !insn.addr !7510
  %46 = or i32 %45, %44, !insn.addr !7510
  %47 = add i32 %23, 1, !insn.addr !7508
  %48 = add i32 %47, %34, !insn.addr !7511
  %49 = inttoptr i32 %27 to i32*, !insn.addr !7512
  %50 = load i32, i32* %49, align 4, !insn.addr !7512
  %51 = add i32 %26, 5, !insn.addr !7512
  %52 = add i32 %4, -1, !insn.addr !7513
  %53 = inttoptr i32 %52 to i8*, !insn.addr !7513
  %54 = load i8, i8* %53, align 1, !insn.addr !7513
  %55 = zext i1 %43 to i8, !insn.addr !7513
  %56 = add i8 %42, %55, !insn.addr !7513
  %57 = add i8 %56, %54, !insn.addr !7513
  store i8 %57, i8* %53, align 1, !insn.addr !7513
  %58 = inttoptr i32 %27 to i16*, !insn.addr !7514
  %59 = bitcast i32* %ecx to i8*
  %60 = load i8, i8* %59, align 4, !insn.addr !7515
  %61 = trunc i32 %28 to i8, !insn.addr !7515
  %62 = add i8 %60, %61, !insn.addr !7515
  %63 = inttoptr i32 %28 to i8*, !insn.addr !7515
  store i8 %62, i8* %63, align 1, !insn.addr !7515
  %64 = call i32 @unknown_547c4c(), !insn.addr !7516
  %65 = add i32 %50, -16, !insn.addr !7517
  %66 = inttoptr i32 %65 to i32*, !insn.addr !7517
  store i32 %64, i32* %66, align 4, !insn.addr !7517
  %.pre = add i32 %50, -4, !insn.addr !7518
  %.pre1 = inttoptr i32 %.pre to i32*, !insn.addr !7518
  store i32* %.pre1, i32** %.pre-phi2.reg2mem, !insn.addr !7519
  store i32 %46, i32* %ebx.0.reg2mem, !insn.addr !7519
  store i32 %51, i32* %esp.0.reg2mem, !insn.addr !7519
  store i32 %50, i32* %ebp.0.reg2mem, !insn.addr !7519
  store i32 %48, i32* %esi.0.reg2mem, !insn.addr !7519
  br label %dec_label_pc_1012215, !insn.addr !7519

dec_label_pc_10121f4:                             ; preds = %dec_label_pc_1012170
  %67 = call i32 @__asm_int3(), !insn.addr !7520
  %68 = add i32 %14, -1, !insn.addr !7521
  store i32 %68, i32* %ecx, align 4, !insn.addr !7521
  %69 = icmp ne i32 %68, 0, !insn.addr !7521
  %70 = icmp eq i1 %69, %8, !insn.addr !7521
  br i1 %70, label %dec_label_pc_10121fd, label %dec_label_pc_10121fa, !insn.addr !7521

dec_label_pc_10121fa:                             ; preds = %dec_label_pc_10121f4
  ret i32 %67, !insn.addr !7521

dec_label_pc_10121fd:                             ; preds = %dec_label_pc_10121f4
  %71 = inttoptr i32 %0 to i32*, !insn.addr !7522
  %72 = select i1 %6, i32 -4, i32 4, !insn.addr !7522
  %73 = add i32 %72, %1, !insn.addr !7522
  %74 = add i32 %67, 603956358, !insn.addr !7523
  %75 = inttoptr i32 %74 to i8*, !insn.addr !7523
  %76 = load i8, i8* %75, align 1, !insn.addr !7523
  %77 = trunc i32 %67 to i8, !insn.addr !7523
  %78 = add i8 %76, %77, !insn.addr !7523
  store i8 %78, i8* %75, align 1, !insn.addr !7523
  store i32 %9, i32* %stack_var_-8, align 4, !insn.addr !7524
  %79 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !7524
  %80 = and i32 %3, -65281, !insn.addr !7525
  %81 = or i32 %80, 49152, !insn.addr !7525
  store i32* %10, i32** %.pre-phi2.reg2mem, !insn.addr !7526
  store i32 %81, i32* %ebx.0.reg2mem, !insn.addr !7526
  store i32 %79, i32* %esp.0.reg2mem, !insn.addr !7526
  store i32 %73, i32* %esi.0.reg2mem, !insn.addr !7526
  br label %dec_label_pc_1012215, !insn.addr !7526

dec_label_pc_1012215:                             ; preds = %dec_label_pc_10121fd, %dec_label_pc_1012186
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ebp.0.reload = load i32, i32* %ebp.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %.pre-phi2.reload = load i32*, i32** %.pre-phi2.reg2mem
  %82 = inttoptr i32 %ebx.0.reload to i32*, !insn.addr !7527
  %83 = load i32, i32* %82, align 4, !insn.addr !7527
  %84 = add i32 %83, 1, !insn.addr !7527
  store i32 %84, i32* %82, align 4, !insn.addr !7527
  %85 = call i32 @function_101195a(), !insn.addr !7528
  %86 = add i32 %ebp.0.reload, -8, !insn.addr !7529
  %87 = inttoptr i32 %86 to i32*, !insn.addr !7529
  %88 = load i32, i32* %87, align 4, !insn.addr !7529
  %89 = add i32 %esp.0.reload, -4, !insn.addr !7529
  %90 = inttoptr i32 %89 to i32*, !insn.addr !7529
  store i32 %88, i32* %90, align 4, !insn.addr !7529
  %91 = trunc i32 %ebx.0.reload to i8, !insn.addr !7530
  %92 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !7530
  %93 = load i8, i8* %92, align 1, !insn.addr !7530
  %94 = sub i8 %91, %93, !insn.addr !7530
  %95 = zext i8 %94 to i32, !insn.addr !7530
  %96 = and i32 %ebx.0.reload, -256, !insn.addr !7530
  %97 = or i32 %96, %95, !insn.addr !7530
  %98 = load i32, i32* %.pre-phi2.reload, align 4, !insn.addr !7518
  %99 = add i32 %esp.0.reload, -8, !insn.addr !7518
  %100 = inttoptr i32 %99 to i32*, !insn.addr !7518
  store i32 %98, i32* %100, align 4, !insn.addr !7518
  %101 = add i32 %esp.0.reload, -12, !insn.addr !7531
  %102 = inttoptr i32 %101 to i32*, !insn.addr !7531
  store i32 %97, i32* %102, align 4, !insn.addr !7531
  %103 = load i32, i32* %ecx, align 4
  %104 = and i32 %103, 31, !insn.addr !7532
  %105 = icmp eq i32 %104, 0, !insn.addr !7532
  br i1 %105, label %122, label %106, !insn.addr !7532

; <label>:106:                                    ; preds = %dec_label_pc_1012215
  %107 = add i32 %103, -1, !insn.addr !7532
  %108 = inttoptr i32 %107 to i32*, !insn.addr !7532
  %109 = load i32, i32* %108, align 4, !insn.addr !7532
  %110 = icmp ugt i8 %93, %91, !insn.addr !7530
  %111 = zext i1 %110 to i32, !insn.addr !7532
  %112 = lshr i32 %109, %104, !insn.addr !7532
  %113 = zext i32 %109 to i64, !insn.addr !7532
  %114 = sub nsw i32 33, %104, !insn.addr !7532
  %115 = zext i32 %114 to i64, !insn.addr !7532
  %116 = shl i64 %113, %115, !insn.addr !7532
  %117 = sub nsw i32 32, %104, !insn.addr !7532
  %118 = shl i32 %111, %117, !insn.addr !7532
  %119 = trunc i64 %116 to i32
  %120 = or i32 %118, %112
  %121 = or i32 %120, %119, !insn.addr !7532
  store i32 %121, i32* %108, align 4, !insn.addr !7532
  br label %122, !insn.addr !7532

; <label>:122:                                    ; preds = %dec_label_pc_1012215, %106
  %123 = add i32 %97, 731506757, !insn.addr !7533
  %124 = inttoptr i32 %123 to i32*, !insn.addr !7533
  %125 = load i32, i32* %124, align 4, !insn.addr !7533
  %126 = add i32 %125, -1, !insn.addr !7533
  store i32 %126, i32* %124, align 4, !insn.addr !7533
  ret i32 %85, !insn.addr !7534
}

define i32 @function_1012243() local_unnamed_addr {
dec_label_pc_1012243:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = add i32 %0, -16, !insn.addr !7535
  %2 = inttoptr i32 %1 to i32*, !insn.addr !7535
  %3 = load i32, i32* %2, align 4, !insn.addr !7535
  %4 = add i32 %0, -40, !insn.addr !7536
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7536
  store i32 0, i32* %5, align 4, !insn.addr !7536
  %6 = add i32 %0, -4, !insn.addr !7537
  %7 = inttoptr i32 %6 to i32*, !insn.addr !7537
  store i32 %3, i32* %7, align 4, !insn.addr !7537
  %8 = call i32 @function_1012257(), !insn.addr !7538
  ret i32 %8, !insn.addr !7538
}

define i32 @function_1012255() local_unnamed_addr {
dec_label_pc_1012255:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7539
}

define i32 @function_1012257() local_unnamed_addr {
dec_label_pc_1012257:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = sub i32 0, %1, !insn.addr !7540
  %3 = inttoptr i32 %1 to i32*, !insn.addr !7540
  store i32 %2, i32* %3, align 4, !insn.addr !7540
  %4 = add i32 %0, -4, !insn.addr !7541
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7541
  %6 = load i32, i32* %5, align 4, !insn.addr !7541
  %7 = add i32 %0, -8, !insn.addr !7542
  %8 = call i32 @unknown_a21a3c(i32 %7, i32 %6, i32 1761607680), !insn.addr !7543
  %9 = call i32 @unknown_6b7bc1(), !insn.addr !7544
  ret i32 %9, !insn.addr !7544
}

define i32 @function_1012273() local_unnamed_addr {
dec_label_pc_1012273:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7545
}

define i32 @function_1012275(i32 %arg1) local_unnamed_addr {
dec_label_pc_1012275:
  %0 = call i32 @__asm_iretd(), !insn.addr !7546
  ret i32 %0, !insn.addr !7547
}

define i32 @function_101228d(i32 %arg1) local_unnamed_addr {
dec_label_pc_101228d:
  %edi = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = bitcast i32* %edi to i8*
  %4 = trunc i32 %0 to i8
  %5 = udiv i8 %4, 16, !insn.addr !7548
  %6 = mul i8 %4, 16, !insn.addr !7548
  %7 = or i8 %5, %6, !insn.addr !7548
  %8 = inttoptr i32 %0 to i8*, !insn.addr !7548
  store i8 %7, i8* %8, align 1, !insn.addr !7548
  %9 = add i32 %1, 704641093, !insn.addr !7549
  %10 = inttoptr i32 %9 to i32*, !insn.addr !7549
  %11 = load i32, i32* %10, align 4, !insn.addr !7549
  %12 = add i32 %11, -1, !insn.addr !7549
  store i32 %12, i32* %10, align 4, !insn.addr !7549
  %13 = load i8, i8* %3, align 4, !insn.addr !7550
  %14 = trunc i32 %2 to i8, !insn.addr !7550
  %15 = or i8 %13, %14, !insn.addr !7550
  %16 = load i32, i32* %edi, align 4, !insn.addr !7550
  %17 = inttoptr i32 %16 to i8*, !insn.addr !7550
  store i8 %15, i8* %17, align 1, !insn.addr !7550
  br label %dec_label_pc_101229c, !insn.addr !7551

dec_label_pc_101229c:                             ; preds = %dec_label_pc_101229c, %dec_label_pc_101228d
  %18 = call i32 @__asm_hlt(), !insn.addr !7552
  %19 = add i32 %18, 57, !insn.addr !7553
  %20 = and i32 %18, -256, !insn.addr !7553
  %21 = and i32 %19, 240, !insn.addr !7554
  %22 = or i32 %20, %21, !insn.addr !7554
  %23 = or i32 %22, 15, !insn.addr !7554
  %24 = add i32 %23, -215, !insn.addr !7555
  %25 = inttoptr i32 %24 to i16*, !insn.addr !7555
  br label %dec_label_pc_101229c
}

define i32 @function_10122eb(i32 %arg1) local_unnamed_addr {
dec_label_pc_10122eb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = icmp eq i1 %3, false, !insn.addr !7556
  br i1 %4, label %dec_label_pc_10122f6, label %dec_label_pc_10122ed, !insn.addr !7556

dec_label_pc_10122ed:                             ; preds = %dec_label_pc_10122eb
  %5 = call i32 @__asm_in(i32 131), !insn.addr !7557
  %6 = inttoptr i32 %2 to i32*, !insn.addr !7558
  store i32 %arg1, i32* %6, align 4, !insn.addr !7558
  %7 = add i32 %1, 4, !insn.addr !7559
  %8 = inttoptr i32 %7 to i32*, !insn.addr !7559
  store i32 %5, i32* %8, align 4, !insn.addr !7559
  ret i32 %2, !insn.addr !7560

dec_label_pc_10122f6:                             ; preds = %dec_label_pc_10122eb
  %9 = add i32 %0, 2, !insn.addr !7561
  %10 = inttoptr i32 %9 to i32*, !insn.addr !7561
  %11 = load i32, i32* %10, align 4, !insn.addr !7561
  %12 = call i32 @unknown_fb007b5a(i32 %11), !insn.addr !7562
  %13 = add i32 %0, -88, !insn.addr !7563
  %14 = inttoptr i32 %13 to i32*, !insn.addr !7563
  ret i32 %12, !insn.addr !7563
}

define i32 @function_1012314(i32 %arg1) local_unnamed_addr {
dec_label_pc_1012314:
  %stack_var_-8 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !7564
  %1 = add i32 %0, -4, !insn.addr !7565
  %2 = inttoptr i32 %1 to i32*, !insn.addr !7565
  call void @llvm.trap()
  unreachable
}

define i32 @function_101238e() local_unnamed_addr {
dec_label_pc_101238e:
  %0 = call i32 @function_1012397(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !7566
  ret i32 %0, !insn.addr !7566
}

define i32 @function_1012390(i32 %arg1) local_unnamed_addr {
dec_label_pc_1012390:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %3 = udiv i32 %0, 256, !insn.addr !7567
  %.neg1 = sext i1 %2 to i32
  %.neg2 = sub i32 %1, %3, !insn.addr !7567
  %4 = add i32 %.neg2, %.neg1, !insn.addr !7567
  %5 = and i32 %4, 255, !insn.addr !7567
  %6 = and i32 %1, -256, !insn.addr !7567
  %7 = or i32 %5, %6, !insn.addr !7567
  ret i32 %7, !insn.addr !7568
}

define i32 @function_1012397(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1012397:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7569
}

define i32 @function_101239e(i32 %arg1) local_unnamed_addr {
dec_label_pc_101239e:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = call i16 @__decompiler_undefined_function_1()
  %5 = trunc i32 %2 to i16, !insn.addr !7570
  %6 = call i8 @__asm_in.3(i16 %5), !insn.addr !7570
  %7 = call i32 @unknown_80730000(i16 %4, i32 %0, i32 %1, i32 %3), !insn.addr !7571
  %8 = call i32 @unknown_b200674c(), !insn.addr !7572
  ret i32 %8, !insn.addr !7573
}

define i32 @function_10123df() local_unnamed_addr {
dec_label_pc_10123df:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = add i32 %0, 109706309, !insn.addr !7574
  %3 = inttoptr i32 %2 to i32*, !insn.addr !7574
  %4 = load i32, i32* %3, align 4, !insn.addr !7574
  %5 = add i32 %4, -1, !insn.addr !7574
  store i32 %5, i32* %3, align 4, !insn.addr !7574
  ret i32 %1, !insn.addr !7575
}

define i32 @function_10123eb() local_unnamed_addr {
dec_label_pc_10123eb:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = icmp eq i32 %0, -1, !insn.addr !7576
  %3 = icmp eq i1 %2, false, !insn.addr !7577
  br i1 %3, label %dec_label_pc_10123ff, label %dec_label_pc_10123fb, !insn.addr !7577

dec_label_pc_10123fb:                             ; preds = %dec_label_pc_10123eb
  %sext = mul i32 %1, 65536
  %4 = sdiv i32 %sext, 65536, !insn.addr !7578
  ret i32 %4, !insn.addr !7579

dec_label_pc_10123ff:                             ; preds = %dec_label_pc_10123eb
  %5 = inttoptr i32 %0 to i32*, !insn.addr !7580
  call void @llvm.trap()
  unreachable
}

define i32 @function_101246e(i32 %arg1) local_unnamed_addr {
dec_label_pc_101246e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7581
}

define i32 @function_101246f(i32 %arg1) local_unnamed_addr {
dec_label_pc_101246f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %4 = add i32 %1, 93, !insn.addr !7582
  %5 = inttoptr i32 %4 to i8*, !insn.addr !7582
  store i8 -1, i8* %5, align 1, !insn.addr !7582
  %6 = bitcast i32* %eax to i8*
  %7 = load i8, i8* %6, align 4, !insn.addr !7583
  %8 = load i32, i32* %eax, align 4
  %9 = trunc i32 %8 to i8, !insn.addr !7583
  %10 = or i8 %7, %9, !insn.addr !7583
  %11 = inttoptr i32 %8 to i8*, !insn.addr !7583
  store i8 %10, i8* %11, align 1, !insn.addr !7583
  %12 = load i32, i32* %eax, align 4, !insn.addr !7584
  %13 = add i32 %12, 1, !insn.addr !7585
  %.neg3 = sub i32 -2, %0, !insn.addr !7586
  %14 = sub i32 %.neg3, %3
  %15 = icmp ugt i32 %13, %14, !insn.addr !7587
  %.neg5 = sext i1 %15 to i32
  %.neg6 = sub i32 %2, %1, !insn.addr !7588
  %16 = add i32 %.neg6, %.neg5, !insn.addr !7588
  %17 = inttoptr i32 %2 to i32*, !insn.addr !7588
  store i32 %16, i32* %17, align 4, !insn.addr !7588
  ret i32 %3, !insn.addr !7588
}

define i32 @function_1012644() local_unnamed_addr {
dec_label_pc_1012644:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i16 @__decompiler_undefined_function_1()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = call i32 @__asm_int3(), !insn.addr !7589
  %5 = call i32 @__asm_int3(), !insn.addr !7590
  %6 = call i32 @unknown_cccccccc(i16 %2), !insn.addr !7591
  %7 = and i32 %6, -214, !insn.addr !7592
  %8 = select i1 %3, i32 -4, i32 4, !insn.addr !7593
  %9 = add i32 %8, %0, !insn.addr !7593
  %10 = inttoptr i32 %7 to i8*, !insn.addr !7594
  %11 = load i8, i8* %10, align 2, !insn.addr !7594
  %12 = trunc i32 %7 to i8, !insn.addr !7594
  %13 = add i8 %11, %12, !insn.addr !7594
  store i8 %13, i8* %10, align 2, !insn.addr !7594
  %14 = add i32 %7, -58, !insn.addr !7595
  %15 = inttoptr i32 %14 to i32*, !insn.addr !7595
  %16 = load i32, i32* %15, align 4, !insn.addr !7595
  call void @__writefsdword(i32 %9, i32 %1), !insn.addr !7596
  %17 = and i32 %6, -256, !insn.addr !7597
  %18 = trunc i32 %16 to i16, !insn.addr !7598
  call void @__asm_outsd(i16 %18, i32 %1), !insn.addr !7598
  %19 = call i8 @__asm_insb(i16 %18), !insn.addr !7599
  %20 = inttoptr i32 %9 to i8*, !insn.addr !7599
  store i8 %19, i8* %20, align 1, !insn.addr !7599
  ret i32 %17, !insn.addr !7600
}

define i32 @function_1012670(i32 %arg1) local_unnamed_addr {
dec_label_pc_1012670:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7601
}

define i32 @function_1012678() local_unnamed_addr {
dec_label_pc_1012678:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8, !insn.addr !7602
  call void @__asm_out.6(i32 36, i8 %1), !insn.addr !7602
  ret i32 %0, !insn.addr !7603
}

define i32 @function_10126b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10126b0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 44, !insn.addr !7604
  %4 = add i32 %3, %2, !insn.addr !7604
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7604
  %6 = load i32, i32* %5, align 4, !insn.addr !7604
  %7 = add i32 %6, %0, !insn.addr !7604
  store i32 %7, i32* %5, align 4, !insn.addr !7604
  %8 = call i32 @function_101b112(), !insn.addr !7605
  ret i32 %0, !insn.addr !7606
}

define i32 @function_10126c1() local_unnamed_addr {
dec_label_pc_10126c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__asm_int3(), !insn.addr !7607
  %4 = call i32 @__asm_int3(), !insn.addr !7608
  %5 = call i32 @__asm_int3(), !insn.addr !7609
  %6 = sub i32 %2, %1, !insn.addr !7610
  %7 = icmp ult i32 %2, %1, !insn.addr !7610
  %8 = trunc i32 %6 to i8, !insn.addr !7611
  %9 = add i32 %0, 185869455, !insn.addr !7611
  %10 = inttoptr i32 %9 to i8*, !insn.addr !7611
  %11 = load i8, i8* %10, align 1, !insn.addr !7611
  %.neg = sext i1 %7 to i8
  %.neg2 = add i8 %8, %.neg, !insn.addr !7611
  %12 = sub i8 %.neg2, %11, !insn.addr !7611
  %13 = zext i8 %12 to i32, !insn.addr !7611
  %14 = and i32 %6, -256, !insn.addr !7611
  %15 = or i32 %14, %13, !insn.addr !7611
  %16 = trunc i32 %5 to i8, !insn.addr !7612
  store i8 %16, i8* inttoptr (i32 1284240501 to i8*), align 1, !insn.addr !7612
  %17 = add i32 %1, 12, !insn.addr !7613
  %18 = inttoptr i32 %17 to i32*, !insn.addr !7613
  %19 = load i32, i32* %18, align 4, !insn.addr !7613
  %20 = udiv i32 %19, %15
  %21 = and i32 %20, -139, !insn.addr !7614
  store i32 %21, i32* inttoptr (i32 -1959031823 to i32*), align 4, !insn.addr !7615
  ret i32 %21, !insn.addr !7616
}

define i32 @function_101270e() local_unnamed_addr {
dec_label_pc_101270e:
  %0 = call i32 @function_39d302dc(), !insn.addr !7617
  ret i32 %0, !insn.addr !7617
}

define i32 @function_1012758(i32 %arg1) local_unnamed_addr {
dec_label_pc_1012758:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7618
}

define x86_fp80 @function_101276c(i32 %arg1) local_unnamed_addr {
dec_label_pc_101276c:
  %0 = call x86_fp80 @__decompiler_undefined_function_6()
  %1 = call i32 @__asm_int3(), !insn.addr !7619
  %2 = call i32 @__asm_int3(), !insn.addr !7620
  ret x86_fp80 %0, !insn.addr !7621
}

define i32 @function_1012770(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1012770:
  %0 = inttoptr i32 %arg2 to i32*, !insn.addr !7622
  %1 = load i32, i32* %0, align 4, !insn.addr !7622
  %2 = or i32 %1, -117, !insn.addr !7622
  store i32 %2, i32* %0, align 4, !insn.addr !7622
  %3 = and i32 %arg1, -249, !insn.addr !7623
  %4 = add nsw i32 %3, 1, !insn.addr !7624
  ret i32 %4, !insn.addr !7625
}

define i32 @function_1012789() local_unnamed_addr {
dec_label_pc_1012789:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = mul i32 %1, %0, !insn.addr !7626
  %3 = and i32 %2, -256
  call void @__asm_out.4(i32 225, i32 %3), !insn.addr !7627
  %4 = call i32 @function_1012770(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !7628
  ret i32 %4, !insn.addr !7628
}

define i32 @function_10127a2() local_unnamed_addr {
dec_label_pc_10127a2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7629
}

define void @function_10127a3(void ()** %First, void ()** %Last) local_unnamed_addr {
dec_label_pc_10127a3:
  call void @_initterm(void ()** %First, void ()** %Last), !insn.addr !7630
  ret void, !insn.addr !7630
}

define i32 @function_10127b0() local_unnamed_addr {
dec_label_pc_10127b0:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %1, 89, !insn.addr !7631
  %4 = inttoptr i32 %3 to i8*, !insn.addr !7631
  %5 = load i8, i8* %4, align 1, !insn.addr !7631
  %6 = trunc i32 %0 to i8, !insn.addr !7631
  %7 = add i8 %5, %6, !insn.addr !7631
  store i8 %7, i8* %4, align 1, !insn.addr !7631
  ret i32 %2, !insn.addr !7632
}

define i32 @function_10127c2() local_unnamed_addr {
dec_label_pc_10127c2:
  ret i32 0, !insn.addr !7633
}

define i32 @function_10127c8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10127c8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10127e2(i32 %arg1) local_unnamed_addr {
dec_label_pc_10127e2:
  %eax.0.reg2mem = alloca i32, !insn.addr !7634
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i1 @__decompiler_undefined_function_2()
  %stack_var_-12 = alloca i32, align 4
  %3 = add i32 %0, -1441782676, !insn.addr !7634
  %4 = inttoptr i32 %3 to i8*, !insn.addr !7634
  %5 = load i8, i8* %4, align 1, !insn.addr !7634
  %6 = trunc i32 %1 to i8, !insn.addr !7634
  %7 = zext i1 %2 to i8, !insn.addr !7634
  %8 = add i8 %7, %6, !insn.addr !7634
  %9 = add i8 %8, %5, !insn.addr !7634
  %10 = icmp eq i8 %9, 0, !insn.addr !7634
  store i8 %9, i8* %4, align 1, !insn.addr !7634
  %11 = icmp eq i32 %1, 1, !insn.addr !7635
  %12 = or i1 %11, %10, !insn.addr !7635
  br i1 %12, label %dec_label_pc_10127ea, label %13, !insn.addr !7635

; <label>:13:                                     ; preds = %dec_label_pc_10127e2
  %14 = call i32 @function_1012867(), !insn.addr !7635
  store i32 %14, i32* %eax.0.reg2mem, !insn.addr !7635
  br label %dec_label_pc_10127ea, !insn.addr !7635

dec_label_pc_10127ea:                             ; preds = %dec_label_pc_10127e2, %13
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %15 = add i32 %0, -122, !insn.addr !7636
  %16 = inttoptr i32 %15 to i32*, !insn.addr !7636
  %17 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !7636
  store i32 %17, i32* %16, align 4, !insn.addr !7636
  %18 = add i32 %0, -2, !insn.addr !7637
  %19 = inttoptr i32 %18 to i32*, !insn.addr !7637
  store i32 -60673, i32* %19, align 4, !insn.addr !7637
  %20 = add i32 %0, -6, !insn.addr !7638
  %21 = inttoptr i32 %20 to i32*, !insn.addr !7638
  store i32 %eax.0.reload, i32* %21, align 4, !insn.addr !7638
  ret i32 %eax.0.reload, !insn.addr !7639
}

define i32 @function_1012801(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1012801:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = add i32 %0, 73, !insn.addr !7640
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7640
  %5 = load i32, i32* %4, align 4, !insn.addr !7640
  %6 = add i32 %5, 15728653, !insn.addr !7641
  %7 = inttoptr i32 %6 to i32*, !insn.addr !7641
  %8 = load i32, i32* %7, align 4, !insn.addr !7641
  %9 = or i32 %8, %5, !insn.addr !7641
  store i32 %9, i32* %7, align 4, !insn.addr !7641
  %10 = add i32 %5, 95, !insn.addr !7642
  %11 = inttoptr i32 %10 to i8*, !insn.addr !7642
  %12 = load i8, i8* %11, align 1, !insn.addr !7642
  %13 = trunc i32 %1 to i8, !insn.addr !7642
  %14 = add i8 %12, %13, !insn.addr !7642
  store i8 %14, i8* %11, align 1, !insn.addr !7642
  ret i32 %2, !insn.addr !7643
}

define i32 @function_1012811() local_unnamed_addr {
dec_label_pc_1012811:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7644
}

define i32 @function_1012812() local_unnamed_addr {
dec_label_pc_1012812:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @function_10127c8(i32* nonnull @global_var_1005edd, i32 20), !insn.addr !7645
  %4 = add i32 %0, -4, !insn.addr !7646
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7646
  store i32 0, i32* %5, align 4, !insn.addr !7646
  %6 = call i32 @function_1012877(), !insn.addr !7647
  %7 = add i32 %6, -50, !insn.addr !7648
  %8 = inttoptr i32 %7 to i8*, !insn.addr !7648
  %9 = load i8, i8* %8, align 1, !insn.addr !7648
  %10 = trunc i32 %6 to i8, !insn.addr !7648
  %11 = or i8 %9, %10, !insn.addr !7648
  store i8 %11, i8* %8, align 1, !insn.addr !7648
  %12 = add i32 %2, 1442777132, !insn.addr !7649
  %13 = inttoptr i32 %12 to i8*, !insn.addr !7649
  %14 = load i8, i8* %13, align 1, !insn.addr !7649
  %15 = udiv i8 %14, 2, !insn.addr !7649
  %16 = shl i8 %14, 7, !insn.addr !7649
  %17 = or i8 %15, %16, !insn.addr !7649
  store i8 %17, i8* %13, align 1, !insn.addr !7649
  %18 = trunc i32 %1 to i16, !insn.addr !7650
  %19 = call i32 @__asm_in.5(i16 %18), !insn.addr !7650
  %20 = add i32 %2, -4, !insn.addr !7651
  %21 = inttoptr i32 %20 to i32*, !insn.addr !7651
  store i32 -1, i32* %21, align 4, !insn.addr !7651
  %22 = call i32 @function_1012801(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !7652
  ret i32 %22, !insn.addr !7653
}

define i32 @function_1012855() local_unnamed_addr {
dec_label_pc_1012855:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1012867() local_unnamed_addr {
dec_label_pc_1012867:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7654
}

define i32 @function_101286b() local_unnamed_addr {
dec_label_pc_101286b:
  %0 = call i32 @function_1012877(), !insn.addr !7655
  ret i32 %0, !insn.addr !7655
}

define i32 @function_1012877() local_unnamed_addr {
dec_label_pc_1012877:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = or i32 %2, 104, !insn.addr !7656
  %4 = inttoptr i32 %3 to i8*, !insn.addr !7657
  %5 = load i8, i8* %4, align 1, !insn.addr !7657
  %6 = trunc i32 %1 to i8, !insn.addr !7657
  %7 = add i8 %5, %6, !insn.addr !7657
  store i8 %7, i8* %4, align 1, !insn.addr !7657
  %8 = add i32 %3, %0, !insn.addr !7658
  ret i32 %8, !insn.addr !7659
}

define i32 @function_1012896() local_unnamed_addr {
dec_label_pc_1012896:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10128a1() local_unnamed_addr {
dec_label_pc_10128a1:
  %0 = call i32 @function_1012896(), !insn.addr !7660
  ret i32 %0, !insn.addr !7660
}

define i32 @function_10128a6() local_unnamed_addr {
dec_label_pc_10128a6:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i16 @__decompiler_undefined_function_1()
  %2 = call i32 @unknown_9185fe(i16 %1), !insn.addr !7661
  %3 = add i32 %0, -4, !insn.addr !7662
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7662
  %5 = load i32, i32* %4, align 4, !insn.addr !7662
  %6 = or i32 %5, -67, !insn.addr !7662
  store i32 %6, i32* %4, align 4, !insn.addr !7662
  %7 = call i32 @unknown_f10128be(), !insn.addr !7663
  %8 = call i32 @function_1012801(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !7664
  ret i32 %8, !insn.addr !7665
}

define i32 @function_10128c3() local_unnamed_addr {
dec_label_pc_10128c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i1 @__decompiler_undefined_function_2()
  %4 = add i32 %2, %1, !insn.addr !7666
  %5 = sext i1 %3 to i32, !insn.addr !7666
  %6 = icmp eq i32 %4, %5, !insn.addr !7666
  %cond = icmp eq i1 %6, false
  br i1 %cond, label %dec_label_pc_10128c7, label %dec_label_pc_10128d0

dec_label_pc_10128c7:                             ; preds = %dec_label_pc_10128c3
  %7 = call i32 @function_1012855(), !insn.addr !7667
  %8 = load i32, i32* inttoptr (i32 1185829 to i32*), align 4, !insn.addr !7668
  %9 = add i32 %8, %0, !insn.addr !7668
  store i32 %9, i32* inttoptr (i32 1185829 to i32*), align 4, !insn.addr !7668
  %10 = call i32 @"?terminate@@YAXXZ"(), !insn.addr !7669
  ret i32 %10, !insn.addr !7669

dec_label_pc_10128d0:                             ; preds = %dec_label_pc_10128c3
  %11 = add i32 %0, -105, !insn.addr !7670
  %12 = inttoptr i32 %11 to i32*, !insn.addr !7670
  %13 = load i32, i32* %12, align 4, !insn.addr !7670
  %14 = call i32 @unknown_d3012818(i32 %13), !insn.addr !7671
  ret i32 %14, !insn.addr !7672
}

define i32 @function_10128ee() local_unnamed_addr {
dec_label_pc_10128ee:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i16 @__decompiler_undefined_function_1()
  %2 = load i8, i8* inttoptr (i32 703903999 to i8*), align 1, !insn.addr !7673
  %3 = zext i8 %2 to i32, !insn.addr !7673
  %4 = or i32 %3, 16853248, !insn.addr !7673
  %5 = add i32 %4, %0, !insn.addr !7674
  %6 = inttoptr i32 %0 to i32*, !insn.addr !7674
  store i32 %5, i32* %6, align 4, !insn.addr !7674
  %7 = call i32 @unknown_1edd3c(i16 %1), !insn.addr !7675
  ret i32 %7, !insn.addr !7675
}

define i32 @function_101290c() local_unnamed_addr {
dec_label_pc_101290c:
  ret i32 16853780, !insn.addr !7676
}

define i32 @function_1012916() local_unnamed_addr {
dec_label_pc_1012916:
  %0 = call i32 @function_101103c(), !insn.addr !7677
  ret i32 %0, !insn.addr !7677
}

define i32 @function_1012920() local_unnamed_addr {
dec_label_pc_1012920:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7678
}

define i32 @function_10129d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10129d0:
  %eax = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = bitcast i32* %eax to i8*
  %2 = trunc i32 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !7679
  %4 = inttoptr i32 %0 to i8*, !insn.addr !7679
  store i8 %3, i8* %4, align 1, !insn.addr !7679
  %5 = load i8, i8* %1, align 4, !insn.addr !7680
  %6 = load i32, i32* %eax, align 4
  %7 = trunc i32 %6 to i8, !insn.addr !7680
  %8 = add i8 %5, %7, !insn.addr !7680
  %9 = inttoptr i32 %6 to i8*, !insn.addr !7680
  store i8 %8, i8* %9, align 1, !insn.addr !7680
  %10 = load i32, i32* %eax, align 4, !insn.addr !7681
  ret i32 %10, !insn.addr !7681
}

define i32 @function_1012a8f() local_unnamed_addr {
dec_label_pc_1012a8f:
  %0 = call i32 @__decompiler_undefined_function_0()
  %ebp = alloca i32, align 4
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %1, 453050443, !insn.addr !7682
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7682
  %6 = load i32, i32* %5, align 4, !insn.addr !7682
  %7 = trunc i32 %3 to i8
  %8 = mul i8 %7, 2, !insn.addr !7683
  %9 = inttoptr i32 %3 to i8*, !insn.addr !7683
  store i8 %8, i8* %9, align 1, !insn.addr !7683
  %10 = add i32 %3, -402185664, !insn.addr !7684
  %11 = inttoptr i32 %10 to i8*, !insn.addr !7684
  %12 = load i8, i8* %11, align 1, !insn.addr !7684
  %13 = trunc i32 %2 to i8, !insn.addr !7684
  %14 = add i8 %12, %13, !insn.addr !7684
  store i8 %14, i8* %11, align 1, !insn.addr !7684
  %15 = load i32, i32* %ebp, align 4, !insn.addr !7685
  %16 = bitcast i32* %ebp to i8*
  %17 = trunc i32 %15 to i8
  %18 = mul i8 %17, 2, !insn.addr !7686
  %19 = inttoptr i32 %15 to i8*, !insn.addr !7686
  store i8 %18, i8* %19, align 1, !insn.addr !7686
  %20 = load i8, i8* %16, align 4, !insn.addr !7687
  %21 = add i8 %20, %17, !insn.addr !7687
  store i8 %21, i8* %19, align 1, !insn.addr !7687
  %22 = add i32 %15, 32, !insn.addr !7688
  %23 = inttoptr i32 %22 to i8*, !insn.addr !7688
  store i8 %17, i8* %23, align 1, !insn.addr !7688
  %24 = add i32 %2, %0, !insn.addr !7689
  %25 = inttoptr i32 %2 to i32*, !insn.addr !7689
  store i32 %24, i32* %25, align 4, !insn.addr !7689
  %26 = call i32 @function_51a82ab1(i32 %6), !insn.addr !7690
  ret i32 %26, !insn.addr !7690
}

define i32 @function_1012af0(i32 %arg1) local_unnamed_addr {
dec_label_pc_1012af0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0, !insn.addr !7691
}

define i32 @function_1012b12() local_unnamed_addr {
dec_label_pc_1012b12:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %eax = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %3, 135893765, !insn.addr !7692
  %5 = inttoptr i32 %4 to i32*, !insn.addr !7692
  %6 = load i32, i32* %5, align 4, !insn.addr !7692
  %7 = add i32 %6, %3, !insn.addr !7692
  store i32 %7, i32* %5, align 4, !insn.addr !7692
  %8 = bitcast i32* %eax to i8*
  %9 = load i8, i8* %8, align 4, !insn.addr !7693
  %10 = load i32, i32* %eax, align 4
  %11 = trunc i32 %10 to i8, !insn.addr !7693
  %12 = add i8 %9, %11, !insn.addr !7693
  %13 = inttoptr i32 %10 to i8*, !insn.addr !7693
  store i8 %12, i8* %13, align 1, !insn.addr !7693
  %14 = mul i32 %1, 2, !insn.addr !7694
  %15 = add i32 %2, 1, !insn.addr !7694
  %16 = add i32 %15, %14, !insn.addr !7694
  %17 = inttoptr i32 %16 to i8*, !insn.addr !7694
  %18 = load i8, i8* %17, align 1, !insn.addr !7694
  %19 = load i32, i32* %eax, align 4, !insn.addr !7694
  %20 = trunc i32 %19 to i8, !insn.addr !7694
  %21 = add i8 %18, %20, !insn.addr !7694
  store i8 %21, i8* %17, align 1, !insn.addr !7694
  %22 = load i32, i32* %eax, align 4
  %23 = mul i32 %22, 2, !insn.addr !7695
  %24 = inttoptr i32 %23 to i32*, !insn.addr !7695
  %25 = load i32, i32* %24, align 4, !insn.addr !7695
  %26 = add i32 %25, %22, !insn.addr !7695
  store i32 %26, i32* %24, align 4, !insn.addr !7695
  %27 = load i32, i32* %eax, align 4, !insn.addr !7696
  %28 = trunc i32 %27 to i8, !insn.addr !7696
  %29 = inttoptr i32 %0 to i8*, !insn.addr !7696
  store i8 %28, i8* %29, align 1, !insn.addr !7696
  %30 = call i32 @unknown_101(), !insn.addr !7697
  ret i32 %30, !insn.addr !7697
}

define i32 @function_1012b2d() local_unnamed_addr {
dec_label_pc_1012b2d:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = trunc i32 %0 to i8
  %2 = mul i8 %1, 2, !insn.addr !7698
  %3 = inttoptr i32 %0 to i8*, !insn.addr !7698
  store i8 %2, i8* %3, align 1, !insn.addr !7698
  ret i32 %0, !insn.addr !7699
}

define i32 @function_1012b40() local_unnamed_addr {
dec_label_pc_1012b40:
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_0()
  %2 = call i32 @__decompiler_undefined_function_0()
  %3 = call i32 @__decompiler_undefined_function_0()
  %4 = add i32 %2, 1082654720, !insn.addr !7700
  %5 = inttoptr i32 %4 to i8*, !insn.addr !7700
  %6 = load i8, i8* %5, align 1, !insn.addr !7700
  %7 = trunc i32 %1 to i8, !insn.addr !7700
  %8 = add i8 %6, %7, !insn.addr !7700
  store i8 %8, i8* %5, align 1, !insn.addr !7700
  %9 = add i32 %3, %2, !insn.addr !7701
  %10 = inttoptr i32 %2 to i32*, !insn.addr !7701
  store i32 %9, i32* %10, align 4, !insn.addr !7701
  %11 = call i32 @unknown_a0012ac7(), !insn.addr !7702
  %12 = inttoptr i32 %11 to i8*, !insn.addr !7703
  %13 = load i8, i8* %12, align 1, !insn.addr !7703
  %14 = trunc i32 %11 to i8, !insn.addr !7703
  %15 = add i8 %13, %14, !insn.addr !7703
  store i8 %15, i8* %12, align 1, !insn.addr !7703
  %16 = add i32 %11, 16837120, !insn.addr !7704
  %17 = inttoptr i32 %16 to i8*, !insn.addr !7705
  %18 = load i8, i8* %17, align 1, !insn.addr !7705
  %19 = trunc i32 %16 to i8, !insn.addr !7705
  %20 = add i8 %18, %19, !insn.addr !7705
  store i8 %20, i8* %17, align 1, !insn.addr !7705
  %21 = load i32, i32* inttoptr (i32 275 to i32*), align 4, !insn.addr !7706
  %22 = add i32 %21, %0, !insn.addr !7706
  store i32 %22, i32* inttoptr (i32 275 to i32*), align 4, !insn.addr !7706
  %23 = sub i32 %16, %2, !insn.addr !7707
  %24 = add i32 %1, %0, !insn.addr !7708
  %25 = inttoptr i32 %0 to i32*, !insn.addr !7708
  store i32 %24, i32* %25, align 4, !insn.addr !7708
  %26 = add i32 %23, 137619, !insn.addr !7709
  %27 = udiv i32 %2, 256, !insn.addr !7710
  %28 = add i32 %26, %27, !insn.addr !7710
  %29 = and i32 %28, 255, !insn.addr !7710
  %30 = and i32 %26, -256, !insn.addr !7710
  %31 = or i32 %29, %30, !insn.addr !7710
  %32 = inttoptr i32 %31 to i32*, !insn.addr !7711
  %33 = load i32, i32* %32, align 4, !insn.addr !7711
  %34 = add i32 %33, %31, !insn.addr !7711
  store i32 %34, i32* %32, align 4, !insn.addr !7711
  %35 = inttoptr i32 %31 to i8*, !insn.addr !7712
  %36 = load i8, i8* %35, align 1, !insn.addr !7712
  %37 = trunc i32 %28 to i8, !insn.addr !7712
  %38 = add i8 %36, %37, !insn.addr !7712
  store i8 %38, i8* %35, align 1, !insn.addr !7712
  call void @__asm_out.6(i32 0, i8 0), !insn.addr !7713
  call void @llvm.trap()
  unreachable
}

define i32 @function_1012feb() local_unnamed_addr {
dec_label_pc_1012feb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1013026() local_unnamed_addr {
dec_label_pc_1013026:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_101313a() local_unnamed_addr {
dec_label_pc_101313a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10131b6(i32 %arg1) local_unnamed_addr {
dec_label_pc_10131b6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10133b8() local_unnamed_addr {
dec_label_pc_10133b8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1013454(i8* %arg1, i32 %arg2, i32* %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1013454:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1013c73(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1013c73:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_101427e() local_unnamed_addr {
dec_label_pc_101427e:
  %edi = alloca i32, align 4
  %esi = alloca i32, align 4
  %ebp = alloca i32, align 4
  %ebx = alloca i32, align 4
  %edx = alloca i32, align 4
  %ecx = alloca i32, align 4
  %eax = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = bitcast i32* %eax to i8*
  %2 = trunc i32 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !7714
  %4 = inttoptr i32 %0 to i8*, !insn.addr !7714
  store i8 %3, i8* %4, align 1, !insn.addr !7714
  %5 = load i32, i32* %edx, align 4, !insn.addr !7715
  %6 = trunc i32 %5 to i16, !insn.addr !7715
  %7 = call i8 @__asm_insb(i16 %6), !insn.addr !7715
  %8 = load i32, i32* %edi, align 4, !insn.addr !7715
  %9 = inttoptr i32 %8 to i8*, !insn.addr !7715
  store i8 %7, i8* %9, align 1, !insn.addr !7715
  %10 = load i8, i8* %1, align 4, !insn.addr !7716
  %11 = load i32, i32* %eax, align 4
  %12 = trunc i32 %11 to i8, !insn.addr !7716
  %13 = add i8 %10, %12, !insn.addr !7716
  %14 = inttoptr i32 %11 to i8*, !insn.addr !7716
  store i8 %13, i8* %14, align 1, !insn.addr !7716
  %15 = bitcast i32* %edx to i8*
  %16 = load i8, i8* %15, align 4, !insn.addr !7717
  %17 = load i32, i32* %eax, align 4, !insn.addr !7717
  %18 = udiv i32 %17, 256, !insn.addr !7717
  %19 = trunc i32 %18 to i8, !insn.addr !7717
  %20 = add i8 %16, %19, !insn.addr !7717
  %21 = load i32, i32* %edx, align 4, !insn.addr !7717
  %22 = inttoptr i32 %21 to i8*, !insn.addr !7717
  store i8 %20, i8* %22, align 1, !insn.addr !7717
  %23 = load i8, i8* %1, align 4, !insn.addr !7718
  %24 = load i32, i32* %eax, align 4
  %25 = trunc i32 %24 to i8, !insn.addr !7718
  %26 = add i8 %23, %25, !insn.addr !7718
  %27 = inttoptr i32 %24 to i8*, !insn.addr !7718
  store i8 %26, i8* %27, align 1, !insn.addr !7718
  %28 = bitcast i32* %eax to i16*
  %29 = load i16, i16* %28, align 4, !insn.addr !7719
  %30 = load i32, i32* %eax, align 4, !insn.addr !7719
  %31 = trunc i32 %30 to i16, !insn.addr !7719
  call void @__asm_arpl(i16 %29, i16 %31), !insn.addr !7719
  %32 = load i8, i8* %1, align 4, !insn.addr !7720
  %33 = load i32, i32* %eax, align 4
  %34 = trunc i32 %33 to i8, !insn.addr !7720
  %35 = add i8 %32, %34, !insn.addr !7720
  %36 = inttoptr i32 %33 to i8*, !insn.addr !7720
  store i8 %35, i8* %36, align 1, !insn.addr !7720
  %37 = load i32, i32* %eax, align 4, !insn.addr !7721
  %38 = call i8 @__readfsbyte(i32 %37), !insn.addr !7721
  %39 = load i32, i32* %eax, align 4
  %40 = trunc i32 %39 to i8, !insn.addr !7721
  %41 = add i8 %38, %40, !insn.addr !7721
  call void @__writefsbyte(i32 %39, i8 %41), !insn.addr !7721
  %42 = bitcast i32* %ebp to i8*
  %43 = load i8, i8* %42, align 4, !insn.addr !7722
  %44 = load i32, i32* %edx, align 4, !insn.addr !7722
  %45 = udiv i32 %44, 256, !insn.addr !7722
  %46 = trunc i32 %45 to i8, !insn.addr !7722
  %47 = add i8 %43, %46, !insn.addr !7722
  %48 = load i32, i32* %ebp, align 4, !insn.addr !7722
  %49 = inttoptr i32 %48 to i8*, !insn.addr !7722
  store i8 %47, i8* %49, align 1, !insn.addr !7722
  %50 = load i8, i8* %1, align 4, !insn.addr !7723
  %51 = load i32, i32* %eax, align 4
  %52 = trunc i32 %51 to i8, !insn.addr !7723
  %53 = add i8 %50, %52, !insn.addr !7723
  %54 = inttoptr i32 %51 to i8*, !insn.addr !7723
  store i8 %53, i8* %54, align 1, !insn.addr !7723
  %55 = load i32, i32* %edx, align 4, !insn.addr !7724
  %56 = trunc i32 %55 to i16, !insn.addr !7724
  %57 = load i32, i32* %esi, align 4, !insn.addr !7724
  call void @__asm_outsd(i16 %56, i32 %57), !insn.addr !7724
  %58 = load i8, i8* %1, align 4, !insn.addr !7725
  %59 = load i32, i32* %eax, align 4
  %60 = trunc i32 %59 to i8, !insn.addr !7725
  %61 = add i8 %58, %60, !insn.addr !7725
  %62 = inttoptr i32 %59 to i8*, !insn.addr !7725
  store i8 %61, i8* %62, align 1, !insn.addr !7725
  %63 = load i8, i8* %15, align 4, !insn.addr !7726
  %64 = load i32, i32* %eax, align 4, !insn.addr !7726
  %65 = trunc i32 %64 to i8, !insn.addr !7726
  %66 = add i8 %63, %65, !insn.addr !7726
  %67 = load i32, i32* %edx, align 4, !insn.addr !7726
  %68 = inttoptr i32 %67 to i8*, !insn.addr !7726
  store i8 %66, i8* %68, align 1, !insn.addr !7726
  %69 = load i8, i8* %1, align 4, !insn.addr !7727
  %70 = load i32, i32* %eax, align 4
  %71 = trunc i32 %70 to i8, !insn.addr !7727
  %72 = add i8 %69, %71, !insn.addr !7727
  %73 = inttoptr i32 %70 to i8*, !insn.addr !7727
  store i8 %72, i8* %73, align 1, !insn.addr !7727
  %74 = load i8, i8* %1, align 4, !insn.addr !7728
  %75 = load i32, i32* %ecx, align 4, !insn.addr !7728
  %76 = trunc i32 %75 to i8, !insn.addr !7728
  %77 = add i8 %74, %76, !insn.addr !7728
  %78 = load i32, i32* %eax, align 4, !insn.addr !7728
  %79 = inttoptr i32 %78 to i8*, !insn.addr !7728
  store i8 %77, i8* %79, align 1, !insn.addr !7728
  %80 = load i8, i8* %1, align 4, !insn.addr !7729
  %81 = load i32, i32* %eax, align 4
  %82 = trunc i32 %81 to i8, !insn.addr !7729
  %83 = add i8 %80, %82, !insn.addr !7729
  %84 = inttoptr i32 %81 to i8*, !insn.addr !7729
  store i8 %83, i8* %84, align 1, !insn.addr !7729
  %85 = load i8, i8* %15, align 4, !insn.addr !7730
  %86 = load i32, i32* %ecx, align 4, !insn.addr !7730
  %87 = trunc i32 %86 to i8, !insn.addr !7730
  %88 = add i8 %85, %87, !insn.addr !7730
  %89 = load i32, i32* %edx, align 4, !insn.addr !7730
  %90 = inttoptr i32 %89 to i8*, !insn.addr !7730
  store i8 %88, i8* %90, align 1, !insn.addr !7730
  %91 = load i8, i8* %1, align 4, !insn.addr !7731
  %92 = load i32, i32* %eax, align 4
  %93 = trunc i32 %92 to i8, !insn.addr !7731
  %94 = add i8 %91, %93, !insn.addr !7731
  %95 = inttoptr i32 %92 to i8*, !insn.addr !7731
  store i8 %94, i8* %95, align 1, !insn.addr !7731
  %96 = load i8, i8* %1, align 4, !insn.addr !7732
  %97 = load i32, i32* %edx, align 4, !insn.addr !7732
  %98 = trunc i32 %97 to i8, !insn.addr !7732
  %99 = add i8 %96, %98, !insn.addr !7732
  %100 = load i32, i32* %eax, align 4, !insn.addr !7732
  %101 = inttoptr i32 %100 to i8*, !insn.addr !7732
  store i8 %99, i8* %101, align 1, !insn.addr !7732
  %102 = load i8, i8* %1, align 4, !insn.addr !7733
  %103 = load i32, i32* %eax, align 4
  %104 = trunc i32 %103 to i8, !insn.addr !7733
  %105 = add i8 %102, %104, !insn.addr !7733
  %106 = inttoptr i32 %103 to i8*, !insn.addr !7733
  store i8 %105, i8* %106, align 1, !insn.addr !7733
  %107 = bitcast i32* %ecx to i8*
  %108 = load i8, i8* %107, align 4, !insn.addr !7734
  %109 = load i32, i32* %eax, align 4, !insn.addr !7734
  %110 = trunc i32 %109 to i8, !insn.addr !7734
  %111 = add i8 %108, %110, !insn.addr !7734
  %112 = load i32, i32* %ecx, align 4, !insn.addr !7734
  %113 = inttoptr i32 %112 to i8*, !insn.addr !7734
  store i8 %111, i8* %113, align 1, !insn.addr !7734
  %114 = load i8, i8* %1, align 4, !insn.addr !7735
  %115 = load i32, i32* %eax, align 4
  %116 = trunc i32 %115 to i8, !insn.addr !7735
  %117 = add i8 %114, %116, !insn.addr !7735
  %118 = inttoptr i32 %115 to i8*, !insn.addr !7735
  store i8 %117, i8* %118, align 1, !insn.addr !7735
  %119 = bitcast i32* %esi to i8*
  %120 = load i8, i8* %119, align 4, !insn.addr !7736
  %121 = load i32, i32* %edx, align 4, !insn.addr !7736
  %122 = udiv i32 %121, 256, !insn.addr !7736
  %123 = trunc i32 %122 to i8, !insn.addr !7736
  %124 = add i8 %120, %123, !insn.addr !7736
  %125 = load i32, i32* %esi, align 4, !insn.addr !7736
  %126 = inttoptr i32 %125 to i8*, !insn.addr !7736
  store i8 %124, i8* %126, align 1, !insn.addr !7736
  %127 = load i8, i8* %1, align 4, !insn.addr !7737
  %128 = load i32, i32* %eax, align 4
  %129 = trunc i32 %128 to i8, !insn.addr !7737
  %130 = add i8 %127, %129, !insn.addr !7737
  %131 = inttoptr i32 %128 to i8*, !insn.addr !7737
  store i8 %130, i8* %131, align 1, !insn.addr !7737
  %132 = load i8, i8* %1, align 4, !insn.addr !7738
  %133 = load i32, i32* %eax, align 4
  %134 = trunc i32 %133 to i8, !insn.addr !7738
  %135 = add i8 %132, %134, !insn.addr !7738
  %136 = inttoptr i32 %133 to i8*, !insn.addr !7738
  store i8 %135, i8* %136, align 1, !insn.addr !7738
  %137 = load i8, i8* %1, align 4, !insn.addr !7739
  %138 = load i32, i32* %eax, align 4
  %139 = trunc i32 %138 to i8, !insn.addr !7739
  %140 = add i8 %137, %139, !insn.addr !7739
  %141 = inttoptr i32 %138 to i8*, !insn.addr !7739
  store i8 %140, i8* %141, align 1, !insn.addr !7739
  %142 = load i8, i8* %1, align 4, !insn.addr !7740
  %143 = load i32, i32* %eax, align 4
  %144 = trunc i32 %143 to i8, !insn.addr !7740
  %145 = add i8 %142, %144, !insn.addr !7740
  %146 = inttoptr i32 %143 to i8*, !insn.addr !7740
  store i8 %145, i8* %146, align 1, !insn.addr !7740
  %147 = load i8, i8* %1, align 4, !insn.addr !7741
  %148 = load i32, i32* %eax, align 4
  %149 = trunc i32 %148 to i8, !insn.addr !7741
  %150 = add i8 %147, %149, !insn.addr !7741
  %151 = inttoptr i32 %148 to i8*, !insn.addr !7741
  store i8 %150, i8* %151, align 1, !insn.addr !7741
  %152 = load i8, i8* %1, align 4, !insn.addr !7742
  %153 = load i32, i32* %eax, align 4
  %154 = trunc i32 %153 to i8, !insn.addr !7742
  %155 = add i8 %152, %154, !insn.addr !7742
  %156 = inttoptr i32 %153 to i8*, !insn.addr !7742
  store i8 %155, i8* %156, align 1, !insn.addr !7742
  %157 = load i32, i32* %eax, align 4, !insn.addr !7743
  %158 = load i32, i32* %edi, align 4, !insn.addr !7743
  %159 = add i32 %158, %157, !insn.addr !7744
  %160 = inttoptr i32 %158 to i32*, !insn.addr !7744
  store i32 %159, i32* %160, align 4, !insn.addr !7744
  %161 = load i32, i32* %ecx, align 4, !insn.addr !7745
  %162 = add i32 %161, -1795162111, !insn.addr !7745
  %163 = inttoptr i32 %162 to i8*, !insn.addr !7745
  %164 = load i8, i8* %163, align 1, !insn.addr !7745
  %165 = load i32, i32* %edx, align 4, !insn.addr !7745
  %166 = trunc i32 %165 to i8, !insn.addr !7745
  %167 = add i8 %164, %166, !insn.addr !7745
  store i8 %167, i8* %163, align 1, !insn.addr !7745
  store i32 %159, i32* %160, align 4, !insn.addr !7746
  %168 = load i32, i32* %ebp, align 4, !insn.addr !7747
  %169 = add i32 %168, -1811939327, !insn.addr !7747
  %170 = inttoptr i32 %169 to i8*, !insn.addr !7747
  %171 = load i8, i8* %170, align 1, !insn.addr !7747
  %172 = load i32, i32* %edx, align 4, !insn.addr !7747
  %173 = trunc i32 %172 to i8, !insn.addr !7747
  %174 = add i8 %171, %173, !insn.addr !7747
  store i8 %174, i8* %170, align 1, !insn.addr !7747
  store i32 %159, i32* %160, align 4, !insn.addr !7748
  %175 = load i32, i32* %ecx, align 4, !insn.addr !7749
  %176 = add i32 %158, 26869760, !insn.addr !7749
  %177 = add i32 %176, %175, !insn.addr !7749
  %178 = inttoptr i32 %177 to i8*, !insn.addr !7749
  %179 = load i8, i8* %178, align 1, !insn.addr !7749
  %180 = load i32, i32* %edx, align 4, !insn.addr !7749
  %181 = trunc i32 %180 to i8, !insn.addr !7749
  %182 = add i8 %179, %181, !insn.addr !7749
  store i8 %182, i8* %178, align 1, !insn.addr !7749
  %183 = bitcast i32* %edi to i8*
  %184 = load i8, i8* %183, align 4, !insn.addr !7750
  %185 = trunc i32 %158 to i8, !insn.addr !7750
  %186 = add i8 %184, %185, !insn.addr !7750
  %187 = inttoptr i32 %158 to i8*, !insn.addr !7750
  store i8 %186, i8* %187, align 1, !insn.addr !7750
  %188 = load i32, i32* %ebx, align 4, !insn.addr !7751
  %189 = add i32 %188, %158, !insn.addr !7752
  %190 = inttoptr i32 %188 to i32*, !insn.addr !7752
  store i32 %189, i32* %190, align 4, !insn.addr !7752
  %191 = add i32 %158, -1845493759, !insn.addr !7753
  %192 = inttoptr i32 %191 to i8*, !insn.addr !7753
  %193 = load i8, i8* %192, align 1, !insn.addr !7753
  %194 = add i8 %193, %185, !insn.addr !7753
  store i8 %194, i8* %192, align 1, !insn.addr !7753
  store i32 %189, i32* %190, align 4, !insn.addr !7754
  %195 = load i32, i32* %ecx, align 4
  %196 = add i32 %195, -1778384895, !insn.addr !7755
  %197 = inttoptr i32 %196 to i8*, !insn.addr !7755
  %198 = load i8, i8* %197, align 1, !insn.addr !7755
  %199 = add i8 %198, %185, !insn.addr !7755
  store i8 %199, i8* %197, align 1, !insn.addr !7755
  store i32 %189, i32* %190, align 4, !insn.addr !7756
  %200 = add i32 %188, -1778384895, !insn.addr !7757
  %201 = inttoptr i32 %200 to i8*, !insn.addr !7757
  %202 = load i8, i8* %201, align 1, !insn.addr !7757
  %203 = add i8 %202, %185, !insn.addr !7757
  store i8 %203, i8* %201, align 1, !insn.addr !7757
  store i32 %189, i32* %190, align 4, !insn.addr !7758
  %204 = bitcast i32* %ebx to i8*
  %205 = load i8, i8* %204, align 4, !insn.addr !7759
  %206 = trunc i32 %188 to i8, !insn.addr !7759
  %207 = add i8 %205, %206, !insn.addr !7759
  %208 = inttoptr i32 %188 to i8*, !insn.addr !7759
  store i8 %207, i8* %208, align 1, !insn.addr !7759
  %209 = load i8, i8* %204, align 4, !insn.addr !7760
  %210 = add i8 %209, %206, !insn.addr !7760
  store i8 %210, i8* %208, align 1, !insn.addr !7760
  %211 = load i8, i8* %204, align 4, !insn.addr !7761
  %212 = add i8 %211, %206, !insn.addr !7761
  store i8 %212, i8* %208, align 1, !insn.addr !7761
  %213 = load i8, i8* %204, align 4, !insn.addr !7762
  %214 = add i8 %213, %206, !insn.addr !7762
  store i8 %214, i8* %208, align 1, !insn.addr !7762
  ret i32 %188, !insn.addr !7763
}

define i32 @function_10149bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10149bc:
  %eax = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_0()
  %1 = mul i32 %0, 2, !insn.addr !7764
  %2 = inttoptr i32 %0 to i32*, !insn.addr !7764
  store i32 %1, i32* %2, align 4, !insn.addr !7764
  %3 = bitcast i32* %eax to i8*
  %4 = load i8, i8* %3, align 4, !insn.addr !7765
  %5 = load i32, i32* %eax, align 4
  %6 = trunc i32 %5 to i8, !insn.addr !7765
  %7 = add i8 %4, %6, !insn.addr !7765
  %8 = inttoptr i32 %5 to i8*, !insn.addr !7765
  store i8 %7, i8* %8, align 1, !insn.addr !7765
  %9 = load i8, i8* %3, align 4, !insn.addr !7766
  %10 = load i32, i32* %eax, align 4
  %11 = trunc i32 %10 to i8, !insn.addr !7766
  %12 = add i8 %9, %11, !insn.addr !7766
  %13 = inttoptr i32 %10 to i8*, !insn.addr !7766
  store i8 %12, i8* %13, align 1, !insn.addr !7766
  %14 = load i8, i8* %3, align 4, !insn.addr !7767
  %15 = load i32, i32* %eax, align 4
  %16 = trunc i32 %15 to i8, !insn.addr !7767
  %17 = add i8 %14, %16, !insn.addr !7767
  %18 = inttoptr i32 %15 to i8*, !insn.addr !7767
  store i8 %17, i8* %18, align 1, !insn.addr !7767
  %19 = load i32, i32* %eax, align 4
  %20 = mul i32 %19, 2, !insn.addr !7768
  %21 = inttoptr i32 %19 to i32*, !insn.addr !7768
  store i32 %20, i32* %21, align 4, !insn.addr !7768
  %22 = load i8, i8* %3, align 4, !insn.addr !7769
  %23 = load i32, i32* %eax, align 4
  %24 = trunc i32 %23 to i8, !insn.addr !7769
  %25 = add i8 %22, %24, !insn.addr !7769
  %26 = inttoptr i32 %23 to i8*, !insn.addr !7769
  store i8 %25, i8* %26, align 1, !insn.addr !7769
  %27 = load i8, i8* %3, align 4, !insn.addr !7770
  %28 = load i32, i32* %eax, align 4
  %29 = trunc i32 %28 to i8, !insn.addr !7770
  %30 = add i8 %27, %29, !insn.addr !7770
  %31 = inttoptr i32 %28 to i8*, !insn.addr !7770
  store i8 %30, i8* %31, align 1, !insn.addr !7770
  %32 = load i8, i8* %3, align 4, !insn.addr !7771
  %33 = load i32, i32* %eax, align 4
  %34 = trunc i32 %33 to i8, !insn.addr !7771
  %35 = add i8 %32, %34, !insn.addr !7771
  %36 = inttoptr i32 %33 to i8*, !insn.addr !7771
  store i8 %35, i8* %36, align 1, !insn.addr !7771
  %37 = load i8, i8* %3, align 4, !insn.addr !7772
  %38 = load i32, i32* %eax, align 4
  %39 = trunc i32 %38 to i8, !insn.addr !7772
  %40 = add i8 %37, %39, !insn.addr !7772
  %41 = inttoptr i32 %38 to i8*, !insn.addr !7772
  store i8 %40, i8* %41, align 1, !insn.addr !7772
  %42 = load i8, i8* %3, align 4, !insn.addr !7773
  %43 = load i32, i32* %eax, align 4
  %44 = trunc i32 %43 to i8, !insn.addr !7773
  %45 = add i8 %42, %44, !insn.addr !7773
  %46 = inttoptr i32 %43 to i8*, !insn.addr !7773
  store i8 %45, i8* %46, align 1, !insn.addr !7773
  %47 = load i32, i32* %eax, align 4
  %48 = mul i32 %47, 2, !insn.addr !7774
  %49 = inttoptr i32 %47 to i32*, !insn.addr !7774
  store i32 %48, i32* %49, align 4, !insn.addr !7774
  %50 = load i8, i8* %3, align 4, !insn.addr !7775
  %51 = load i32, i32* %eax, align 4
  %52 = trunc i32 %51 to i8, !insn.addr !7775
  %53 = add i8 %50, %52, !insn.addr !7775
  %54 = inttoptr i32 %51 to i8*, !insn.addr !7775
  store i8 %53, i8* %54, align 1, !insn.addr !7775
  %55 = load i8, i8* %3, align 4, !insn.addr !7776
  %56 = load i32, i32* %eax, align 4
  %57 = trunc i32 %56 to i8, !insn.addr !7776
  %58 = add i8 %55, %57, !insn.addr !7776
  %59 = inttoptr i32 %56 to i8*, !insn.addr !7776
  store i8 %58, i8* %59, align 1, !insn.addr !7776
  %60 = load i8, i8* %3, align 4, !insn.addr !7777
  %61 = load i32, i32* %eax, align 4
  %62 = trunc i32 %61 to i8, !insn.addr !7777
  %63 = add i8 %60, %62, !insn.addr !7777
  %64 = inttoptr i32 %61 to i8*, !insn.addr !7777
  store i8 %63, i8* %64, align 1, !insn.addr !7777
  %65 = load i8, i8* %3, align 4, !insn.addr !7778
  %66 = load i32, i32* %eax, align 4
  %67 = trunc i32 %66 to i8, !insn.addr !7778
  %68 = add i8 %65, %67, !insn.addr !7778
  %69 = inttoptr i32 %66 to i8*, !insn.addr !7778
  store i8 %68, i8* %69, align 1, !insn.addr !7778
  %70 = load i8, i8* %3, align 4, !insn.addr !7779
  %71 = load i32, i32* %eax, align 4
  %72 = trunc i32 %71 to i8, !insn.addr !7779
  %73 = add i8 %70, %72, !insn.addr !7779
  %74 = inttoptr i32 %71 to i8*, !insn.addr !7779
  store i8 %73, i8* %74, align 1, !insn.addr !7779
  %75 = load i8, i8* %3, align 4, !insn.addr !7780
  %76 = load i32, i32* %eax, align 4
  %77 = trunc i32 %76 to i8, !insn.addr !7780
  %78 = add i8 %75, %77, !insn.addr !7780
  %79 = inttoptr i32 %76 to i8*, !insn.addr !7780
  store i8 %78, i8* %79, align 1, !insn.addr !7780
  %80 = load i8, i8* %3, align 4, !insn.addr !7781
  %81 = load i32, i32* %eax, align 4
  %82 = trunc i32 %81 to i8, !insn.addr !7781
  %83 = add i8 %80, %82, !insn.addr !7781
  %84 = inttoptr i32 %81 to i8*, !insn.addr !7781
  store i8 %83, i8* %84, align 1, !insn.addr !7781
  %85 = load i8, i8* %3, align 4, !insn.addr !7782
  %86 = load i32, i32* %eax, align 4
  %87 = trunc i32 %86 to i8, !insn.addr !7782
  %88 = add i8 %85, %87, !insn.addr !7782
  %89 = inttoptr i32 %86 to i8*, !insn.addr !7782
  store i8 %88, i8* %89, align 1, !insn.addr !7782
  %90 = load i8, i8* %3, align 4, !insn.addr !7783
  %91 = load i32, i32* %eax, align 4
  %92 = trunc i32 %91 to i8, !insn.addr !7783
  %93 = add i8 %90, %92, !insn.addr !7783
  %94 = inttoptr i32 %91 to i8*, !insn.addr !7783
  store i8 %93, i8* %94, align 1, !insn.addr !7783
  %95 = load i8, i8* %3, align 4, !insn.addr !7784
  %96 = load i32, i32* %eax, align 4
  %97 = trunc i32 %96 to i8, !insn.addr !7784
  %98 = add i8 %95, %97, !insn.addr !7784
  %99 = inttoptr i32 %96 to i8*, !insn.addr !7784
  store i8 %98, i8* %99, align 1, !insn.addr !7784
  %100 = load i8, i8* %3, align 4, !insn.addr !7785
  %101 = load i32, i32* %eax, align 4
  %102 = trunc i32 %101 to i8, !insn.addr !7785
  %103 = add i8 %100, %102, !insn.addr !7785
  %104 = inttoptr i32 %101 to i8*, !insn.addr !7785
  store i8 %103, i8* %104, align 1, !insn.addr !7785
  %105 = load i8, i8* %3, align 4, !insn.addr !7786
  %106 = load i32, i32* %eax, align 4
  %107 = trunc i32 %106 to i8, !insn.addr !7786
  %108 = add i8 %105, %107, !insn.addr !7786
  %109 = inttoptr i32 %106 to i8*, !insn.addr !7786
  store i8 %108, i8* %109, align 1, !insn.addr !7786
  %110 = load i8, i8* %3, align 4, !insn.addr !7787
  %111 = load i32, i32* %eax, align 4
  %112 = trunc i32 %111 to i8, !insn.addr !7787
  %113 = add i8 %110, %112, !insn.addr !7787
  %114 = inttoptr i32 %111 to i8*, !insn.addr !7787
  store i8 %113, i8* %114, align 1, !insn.addr !7787
  %115 = load i8, i8* %3, align 4, !insn.addr !7788
  %116 = load i32, i32* %eax, align 4
  %117 = trunc i32 %116 to i8, !insn.addr !7788
  %118 = add i8 %115, %117, !insn.addr !7788
  %119 = inttoptr i32 %116 to i8*, !insn.addr !7788
  store i8 %118, i8* %119, align 1, !insn.addr !7788
  %120 = load i8, i8* %3, align 4, !insn.addr !7789
  %121 = load i32, i32* %eax, align 4
  %122 = trunc i32 %121 to i8, !insn.addr !7789
  %123 = add i8 %120, %122, !insn.addr !7789
  %124 = inttoptr i32 %121 to i8*, !insn.addr !7789
  store i8 %123, i8* %124, align 1, !insn.addr !7789
  %125 = load i8, i8* %3, align 4, !insn.addr !7790
  %126 = load i32, i32* %eax, align 4
  %127 = trunc i32 %126 to i8, !insn.addr !7790
  %128 = add i8 %125, %127, !insn.addr !7790
  %129 = inttoptr i32 %126 to i8*, !insn.addr !7790
  store i8 %128, i8* %129, align 1, !insn.addr !7790
  %130 = load i8, i8* %3, align 4, !insn.addr !7791
  %131 = load i32, i32* %eax, align 4
  %132 = trunc i32 %131 to i8, !insn.addr !7791
  %133 = add i8 %130, %132, !insn.addr !7791
  %134 = inttoptr i32 %131 to i8*, !insn.addr !7791
  store i8 %133, i8* %134, align 1, !insn.addr !7791
  %135 = load i8, i8* %3, align 4, !insn.addr !7792
  %136 = load i32, i32* %eax, align 4
  %137 = trunc i32 %136 to i8, !insn.addr !7792
  %138 = add i8 %135, %137, !insn.addr !7792
  %139 = inttoptr i32 %136 to i8*, !insn.addr !7792
  store i8 %138, i8* %139, align 1, !insn.addr !7792
  %140 = load i8, i8* %3, align 4, !insn.addr !7793
  %141 = load i32, i32* %eax, align 4
  %142 = trunc i32 %141 to i8, !insn.addr !7793
  %143 = add i8 %140, %142, !insn.addr !7793
  %144 = inttoptr i32 %141 to i8*, !insn.addr !7793
  store i8 %143, i8* %144, align 1, !insn.addr !7793
  %145 = load i8, i8* %3, align 4, !insn.addr !7794
  %146 = load i32, i32* %eax, align 4
  %147 = trunc i32 %146 to i8, !insn.addr !7794
  %148 = add i8 %145, %147, !insn.addr !7794
  %149 = inttoptr i32 %146 to i8*, !insn.addr !7794
  store i8 %148, i8* %149, align 1, !insn.addr !7794
  %150 = load i8, i8* %3, align 4, !insn.addr !7795
  %151 = load i32, i32* %eax, align 4
  %152 = trunc i32 %151 to i8, !insn.addr !7795
  %153 = add i8 %150, %152, !insn.addr !7795
  %154 = inttoptr i32 %151 to i8*, !insn.addr !7795
  store i8 %153, i8* %154, align 1, !insn.addr !7795
  %155 = load i8, i8* %3, align 4, !insn.addr !7796
  %156 = load i32, i32* %eax, align 4
  %157 = trunc i32 %156 to i8, !insn.addr !7796
  %158 = add i8 %155, %157, !insn.addr !7796
  %159 = inttoptr i32 %156 to i8*, !insn.addr !7796
  store i8 %158, i8* %159, align 1, !insn.addr !7796
  %160 = load i8, i8* %3, align 4, !insn.addr !7797
  %161 = load i32, i32* %eax, align 4
  %162 = trunc i32 %161 to i8, !insn.addr !7797
  %163 = add i8 %160, %162, !insn.addr !7797
  %164 = inttoptr i32 %161 to i8*, !insn.addr !7797
  store i8 %163, i8* %164, align 1, !insn.addr !7797
  %165 = load i32, i32* %eax, align 4, !insn.addr !7797
  ret i32 %165, !insn.addr !7797
}

define i32 @function_1014bc1(i32 %arg1) local_unnamed_addr {
dec_label_pc_1014bc1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1015257() local_unnamed_addr {
dec_label_pc_1015257:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1015fef() local_unnamed_addr {
dec_label_pc_1015fef:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_10152c1() local_unnamed_addr

declare i32 @unknown_1015e54(i32) local_unnamed_addr

define i32 @function_101636f(i32 %arg1) local_unnamed_addr {
dec_label_pc_101636f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1017418(i32 %arg1) local_unnamed_addr {
dec_label_pc_1017418:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_10136c1(i32) local_unnamed_addr

define i32 @function_1017570(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1017570:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_101763c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_101763c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1017d65() local_unnamed_addr {
dec_label_pc_1017d65:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10194f5() local_unnamed_addr {
dec_label_pc_10194f5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_101a670(i32 %arg1) local_unnamed_addr {
dec_label_pc_101a670:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_101b112() local_unnamed_addr {
dec_label_pc_101b112:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1036cb2() local_unnamed_addr {
dec_label_pc_1036cb2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1027bfb(i32, i32, i32, i32, i32*, i32, i32, i32, i32) local_unnamed_addr

define i32 @function_1053dd7() local_unnamed_addr {
dec_label_pc_1053dd7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1146521() local_unnamed_addr {
dec_label_pc_1146521:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_11681a6(i32 %arg1) local_unnamed_addr {
dec_label_pc_11681a6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_11e3246(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e3246:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_11e6336() local_unnamed_addr {
dec_label_pc_11e6336:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1301c78() local_unnamed_addr {
dec_label_pc_1301c78:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_131c1d3() local_unnamed_addr {
dec_label_pc_131c1d3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_13270a7() local_unnamed_addr {
dec_label_pc_13270a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_132ce93() local_unnamed_addr {
dec_label_pc_132ce93:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_13a4f3e() local_unnamed_addr {
dec_label_pc_13a4f3e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_13b4e95() local_unnamed_addr {
dec_label_pc_13b4e95:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1496049() local_unnamed_addr {
dec_label_pc_1496049:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_14d90a1() local_unnamed_addr {
dec_label_pc_14d90a1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_154c44d() local_unnamed_addr {
dec_label_pc_154c44d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_14d7c26() local_unnamed_addr

declare i32 @unknown_15ebd6f() local_unnamed_addr

define i32 @function_1655726() local_unnamed_addr {
dec_label_pc_1655726:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_16e6998() local_unnamed_addr {
dec_label_pc_16e6998:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_17159c1() local_unnamed_addr {
dec_label_pc_17159c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1737bfb(i32) local_unnamed_addr

declare i32 @unknown_17b94c1(i32, i32) local_unnamed_addr

declare i32 @unknown_13c7b21(i32) local_unnamed_addr

declare i32 @unknown_1402ca1() local_unnamed_addr

declare i32 @unknown_165abdd() local_unnamed_addr

declare i32 @unknown_1671a18(i32) local_unnamed_addr

define i32 @function_17f42eb() local_unnamed_addr {
dec_label_pc_17f42eb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1802314(i32) local_unnamed_addr

define i32 @function_18993b3() local_unnamed_addr {
dec_label_pc_18993b3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_193fc40() local_unnamed_addr {
dec_label_pc_193fc40:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1985792() local_unnamed_addr {
dec_label_pc_1985792:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1c48996() local_unnamed_addr {
dec_label_pc_1c48996:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1997bfb(i32) local_unnamed_addr

declare i32 @unknown_1a92650() local_unnamed_addr

define i32 @function_1df3232() local_unnamed_addr {
dec_label_pc_1df3232:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1ee7a24() local_unnamed_addr {
dec_label_pc_1ee7a24:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1e50bc1() local_unnamed_addr

define i32 @function_1f321f2() local_unnamed_addr {
dec_label_pc_1f321f2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_2008cab() local_unnamed_addr {
dec_label_pc_2008cab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_2009efb() local_unnamed_addr

define i32 @function_3116931() local_unnamed_addr {
dec_label_pc_3116931:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_3ea39e1() local_unnamed_addr {
dec_label_pc_3ea39e1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1f37bc7() local_unnamed_addr

define i32 @function_5fc52ca() local_unnamed_addr {
dec_label_pc_5fc52ca:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_7e80476() local_unnamed_addr {
dec_label_pc_7e80476:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_6007bd1() local_unnamed_addr

declare i32 @unknown_1fb7bb7() local_unnamed_addr

declare i32 @unknown_1ff8a62(i32, i32) local_unnamed_addr

declare i32 @unknown_2e36ed2() local_unnamed_addr

declare i32 @unknown_579765f() local_unnamed_addr

define i32 @function_924968f() local_unnamed_addr {
dec_label_pc_924968f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b0059b5() local_unnamed_addr {
dec_label_pc_b0059b5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c8d046d() local_unnamed_addr {
dec_label_pc_c8d046d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d0138a2() local_unnamed_addr {
dec_label_pc_d0138a2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_d5dd81c() local_unnamed_addr

define i32 @function_d6783ab() local_unnamed_addr {
dec_label_pc_d6783ab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d953527() local_unnamed_addr {
dec_label_pc_d953527:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_10018f83() local_unnamed_addr {
dec_label_pc_10018f83:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_11198154() local_unnamed_addr {
dec_label_pc_11198154:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_14a6bdff() local_unnamed_addr {
dec_label_pc_14a6bdff:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_15a6c3a9() local_unnamed_addr {
dec_label_pc_15a6c3a9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_15a6fe64() local_unnamed_addr {
dec_label_pc_15a6fe64:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_1a009b79() local_unnamed_addr {
dec_label_pc_1a009b79:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_e8b9150(i32, i32) local_unnamed_addr

declare i32 @unknown_f007e82(i32, i32) local_unnamed_addr

declare i32 @unknown_12007bc1(i16) local_unnamed_addr

declare i32 @unknown_12007bd1(i32) local_unnamed_addr

declare i32 @unknown_12007bfb(i32) local_unnamed_addr

declare i32 @unknown_13007c4c(i32) local_unnamed_addr

declare i32 @unknown_15003afb() local_unnamed_addr

declare i32 @unknown_168beba7() local_unnamed_addr

declare i32 @unknown_1800a3c1() local_unnamed_addr

declare i32 @unknown_1a6c7bfb() local_unnamed_addr

define i32 @function_1ae14e0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1ae14e0c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1bb71a3c() local_unnamed_addr

declare i32 @unknown_1c007c26() local_unnamed_addr

declare i32 @unknown_1cf17cbc() local_unnamed_addr

define i32 @function_1ee9c1c1() local_unnamed_addr {
dec_label_pc_1ee9c1c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_1f00353f() local_unnamed_addr

declare i32 @unknown_21007bfb(i32) local_unnamed_addr

define i32 @function_24642976() local_unnamed_addr {
dec_label_pc_24642976:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_2500ee2a() local_unnamed_addr

define i32 @function_25a16ea2() local_unnamed_addr {
dec_label_pc_25a16ea2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_2700bc54() local_unnamed_addr

declare i32 @unknown_27547c26() local_unnamed_addr

define i32 @function_28006e08(i32 %arg1) local_unnamed_addr {
dec_label_pc_28006e08:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_29f2a2d3() local_unnamed_addr {
dec_label_pc_29f2a2d3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_2aba81cc(i32, i32, i32, i32, i32) local_unnamed_addr

define i32 @function_2b5d1885() local_unnamed_addr {
dec_label_pc_2b5d1885:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_2c08c6c5(i32 %arg1) local_unnamed_addr {
dec_label_pc_2c08c6c5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_2cd37c26() local_unnamed_addr

define i32 @function_2e016128() local_unnamed_addr {
dec_label_pc_2e016128:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_2ee95c19(i32) local_unnamed_addr

define i32 @function_30a6cae8() local_unnamed_addr {
dec_label_pc_30a6cae8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_30c6bbc1() local_unnamed_addr {
dec_label_pc_30c6bbc1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_30cc0c5d() local_unnamed_addr {
dec_label_pc_30cc0c5d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_34a5bebd() local_unnamed_addr {
dec_label_pc_34a5bebd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_30161a3c() local_unnamed_addr

declare i32 @unknown_3200bd6f() local_unnamed_addr

declare i32 @unknown_3200e1e3() local_unnamed_addr

define i32 @function_3766cfdb() local_unnamed_addr {
dec_label_pc_3766cfdb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_388d0c8d() local_unnamed_addr {
dec_label_pc_388d0c8d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_389bf445() local_unnamed_addr {
dec_label_pc_389bf445:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_39d302dc() local_unnamed_addr {
dec_label_pc_39d302dc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_3a004cae() local_unnamed_addr {
dec_label_pc_3a004cae:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_3a00be29(i32, i32) local_unnamed_addr

declare i32 @unknown_3a414516() local_unnamed_addr

define i32 @function_3b0059bb() local_unnamed_addr {
dec_label_pc_3b0059bb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_3bc03357(i32 %arg1) local_unnamed_addr {
dec_label_pc_3bc03357:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_3c01468d() local_unnamed_addr {
dec_label_pc_3c01468d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_3c0d8b04() local_unnamed_addr {
dec_label_pc_3c0d8b04:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_3ca37b87() local_unnamed_addr

declare i32 @unknown_3d007bfb() local_unnamed_addr

declare i32 @unknown_3d007c09(i32, i32, i32, i32*, i32, i32, i32, i32, i32, i16, i32) local_unnamed_addr

define i32 @function_3e4dfecb() local_unnamed_addr {
dec_label_pc_3e4dfecb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_3777e730(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_33000058(i32, i32) local_unnamed_addr

declare i32 @unknown_22007bd1(i32) local_unnamed_addr

define i32 @function_400011a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_400011a4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_41247bfb() local_unnamed_addr

define i32 @function_44d716a7() local_unnamed_addr {
dec_label_pc_44d716a7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_44e13c24() local_unnamed_addr {
dec_label_pc_44e13c24:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_450154ab() local_unnamed_addr {
dec_label_pc_450154ab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_451186ed(i32 %arg1) local_unnamed_addr {
dec_label_pc_451186ed:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_45417c2a() local_unnamed_addr {
dec_label_pc_45417c2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_455affff() local_unnamed_addr {
dec_label_pc_455affff:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_455b7812() local_unnamed_addr {
dec_label_pc_455b7812:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_455d667b() local_unnamed_addr {
dec_label_pc_455d667b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_458b0004() local_unnamed_addr {
dec_label_pc_458b0004:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_458bffff() local_unnamed_addr

declare i32 @unknown_458e73d1() local_unnamed_addr

define i32 @function_4590831c() local_unnamed_addr {
dec_label_pc_4590831c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_45a9ffff(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_45a9ffff:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_46095804() local_unnamed_addr {
dec_label_pc_46095804:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_46795a37() local_unnamed_addr {
dec_label_pc_46795a37:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_468c9169() local_unnamed_addr {
dec_label_pc_468c9169:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_468c925a() local_unnamed_addr {
dec_label_pc_468c925a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_46ad5ad8() local_unnamed_addr {
dec_label_pc_46ad5ad8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_46d15b49() local_unnamed_addr {
dec_label_pc_46d15b49:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_47195bca() local_unnamed_addr {
dec_label_pc_47195bca:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_473d5c1a() local_unnamed_addr {
dec_label_pc_473d5c1a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_47f15dad() local_unnamed_addr {
dec_label_pc_47f15dad:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_480105fc() local_unnamed_addr {
dec_label_pc_480105fc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4600ab09(i32) local_unnamed_addr

declare i32 @unknown_4600bd50(i32, i32) local_unnamed_addr

define i32 @function_4835ff51() local_unnamed_addr {
dec_label_pc_4835ff51:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_48675eb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_48675eb8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_492a60d2() local_unnamed_addr {
dec_label_pc_492a60d2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_492c8982() local_unnamed_addr

define i32 @function_49c962ab() local_unnamed_addr {
dec_label_pc_49c962ab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_49d56305() local_unnamed_addr {
dec_label_pc_49d56305:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4a07f545() local_unnamed_addr {
dec_label_pc_4a07f545:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4a4463a6() local_unnamed_addr {
dec_label_pc_4a4463a6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4a7964e8() local_unnamed_addr {
dec_label_pc_4a7964e8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4a89671c() local_unnamed_addr {
dec_label_pc_4a89671c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4a916539() local_unnamed_addr {
dec_label_pc_4a916539:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4a977b0a() local_unnamed_addr {
dec_label_pc_4a977b0a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4ab063f7() local_unnamed_addr {
dec_label_pc_4ab063f7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4ab9680d() local_unnamed_addr {
dec_label_pc_4ab9680d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4b007bd1() local_unnamed_addr

define i32 @function_4e0a926e() local_unnamed_addr {
dec_label_pc_4e0a926e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4e8c92f0() local_unnamed_addr {
dec_label_pc_4e8c92f0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_4ecdebe2() local_unnamed_addr {
dec_label_pc_4ecdebe2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4c0045c4() local_unnamed_addr

define i32 @function_4fcfe9d1() local_unnamed_addr {
dec_label_pc_4fcfe9d1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_51a82ab1(i32 %arg1) local_unnamed_addr {
dec_label_pc_51a82ab1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_52a62791() local_unnamed_addr {
dec_label_pc_52a62791:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_558cebcc() local_unnamed_addr {
dec_label_pc_558cebcc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_5300ac26() local_unnamed_addr

define i32 @function_56180406() local_unnamed_addr {
dec_label_pc_56180406:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_58a6c05b() local_unnamed_addr {
dec_label_pc_58a6c05b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_5affa4f3() local_unnamed_addr {
dec_label_pc_5affa4f3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_6100cb8a() local_unnamed_addr {
dec_label_pc_6100cb8a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_6319e274() local_unnamed_addr {
dec_label_pc_6319e274:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_66a618ac() local_unnamed_addr {
dec_label_pc_66a618ac:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_53668edb() local_unnamed_addr

declare i32 @unknown_56005291() local_unnamed_addr

define i32 @function_6900398e() local_unnamed_addr {
dec_label_pc_6900398e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_6ba6ab41() local_unnamed_addr {
dec_label_pc_6ba6ab41:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_71908972() local_unnamed_addr {
dec_label_pc_71908972:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_7200dff5(i32) local_unnamed_addr

declare i32 @unknown_73007b8c() local_unnamed_addr

declare i32 @unknown_73007bd1() local_unnamed_addr

define i32 @function_734ac721() local_unnamed_addr {
dec_label_pc_734ac721:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_75a70732(i32* %arg1) local_unnamed_addr {
dec_label_pc_75a70732:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_768a91dc() local_unnamed_addr {
dec_label_pc_768a91dc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_79f15558() local_unnamed_addr {
dec_label_pc_79f15558:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_7a660a04() local_unnamed_addr

declare i32 @unknown_74007c26() local_unnamed_addr

define i32 @function_7e004061() local_unnamed_addr {
dec_label_pc_7e004061:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_7ea6c36b() local_unnamed_addr {
dec_label_pc_7ea6c36b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_80007b93() local_unnamed_addr

declare i32 @unknown_7e007bc1() local_unnamed_addr

declare i32 @unknown_80730000(i16, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_8101014d(i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr

define i32 @function_8143408b() local_unnamed_addr {
dec_label_pc_8143408b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_83007bd1(i32) local_unnamed_addr

declare i32 @unknown_84007bca() local_unnamed_addr

define i32 @function_88003348() local_unnamed_addr {
dec_label_pc_88003348:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_88011a3c(i32) local_unnamed_addr

define i32 @function_8a0b077c() local_unnamed_addr {
dec_label_pc_8a0b077c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8b00003d() local_unnamed_addr {
dec_label_pc_8b00003d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8b00004e() local_unnamed_addr {
dec_label_pc_8b00004e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8b308903() local_unnamed_addr {
dec_label_pc_8b308903:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8b9a6ce4(i32 %arg1) local_unnamed_addr {
dec_label_pc_8b9a6ce4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c01e9d3() local_unnamed_addr {
dec_label_pc_8c01e9d3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c02f81c() local_unnamed_addr {
dec_label_pc_8c02f81c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c040e0c() local_unnamed_addr {
dec_label_pc_8c040e0c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c067c12() local_unnamed_addr {
dec_label_pc_8c067c12:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c1e0110() local_unnamed_addr {
dec_label_pc_8c1e0110:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_8c007b86(i32) local_unnamed_addr

define i32 @function_8c384357() local_unnamed_addr {
dec_label_pc_8c384357:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c3ef280() local_unnamed_addr {
dec_label_pc_8c3ef280:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c47056c() local_unnamed_addr {
dec_label_pc_8c47056c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c5d05cf() local_unnamed_addr {
dec_label_pc_8c5d05cf:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c7bd7c0() local_unnamed_addr {
dec_label_pc_8c7bd7c0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c88cada() local_unnamed_addr {
dec_label_pc_8c88cada:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c94f711() local_unnamed_addr {
dec_label_pc_8c94f711:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8c9ca3a6() local_unnamed_addr {
dec_label_pc_8c9ca3a6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca5d2f2() local_unnamed_addr {
dec_label_pc_8ca5d2f2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca5ffb8() local_unnamed_addr {
dec_label_pc_8ca5ffb8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca60ec1() local_unnamed_addr {
dec_label_pc_8ca60ec1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6117a() local_unnamed_addr {
dec_label_pc_8ca6117a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca61814() local_unnamed_addr {
dec_label_pc_8ca61814:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca61d96() local_unnamed_addr {
dec_label_pc_8ca61d96:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6234c(i32* %arg1) local_unnamed_addr {
dec_label_pc_8ca6234c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6267b(i16 %arg1) local_unnamed_addr {
dec_label_pc_8ca6267b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca62886() local_unnamed_addr {
dec_label_pc_8ca62886:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca62b04() local_unnamed_addr {
dec_label_pc_8ca62b04:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca62b25() local_unnamed_addr {
dec_label_pc_8ca62b25:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca62cad() local_unnamed_addr {
dec_label_pc_8ca62cad:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca63006() local_unnamed_addr {
dec_label_pc_8ca63006:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6311f() local_unnamed_addr {
dec_label_pc_8ca6311f:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca63a59() local_unnamed_addr {
dec_label_pc_8ca63a59:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6409e() local_unnamed_addr {
dec_label_pc_8ca6409e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca64615() local_unnamed_addr {
dec_label_pc_8ca64615:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca64665() local_unnamed_addr {
dec_label_pc_8ca64665:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6474e() local_unnamed_addr {
dec_label_pc_8ca6474e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca64974() local_unnamed_addr {
dec_label_pc_8ca64974:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca64f12() local_unnamed_addr {
dec_label_pc_8ca64f12:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca66a8b() local_unnamed_addr {
dec_label_pc_8ca66a8b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca66c6b() local_unnamed_addr {
dec_label_pc_8ca66c6b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca671cf() local_unnamed_addr {
dec_label_pc_8ca671cf:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca67233() local_unnamed_addr {
dec_label_pc_8ca67233:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca67578() local_unnamed_addr {
dec_label_pc_8ca67578:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6761c() local_unnamed_addr {
dec_label_pc_8ca6761c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca67ee2() local_unnamed_addr {
dec_label_pc_8ca67ee2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca67fb2() local_unnamed_addr {
dec_label_pc_8ca67fb2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6809a() local_unnamed_addr {
dec_label_pc_8ca6809a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca68182() local_unnamed_addr {
dec_label_pc_8ca68182:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca68431(i16 %arg1) local_unnamed_addr {
dec_label_pc_8ca68431:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6854a(i32 %arg1) local_unnamed_addr {
dec_label_pc_8ca6854a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca68727() local_unnamed_addr {
dec_label_pc_8ca68727:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca68bb0() local_unnamed_addr {
dec_label_pc_8ca68bb0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca68f9c() local_unnamed_addr {
dec_label_pc_8ca68f9c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6a263() local_unnamed_addr {
dec_label_pc_8ca6a263:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_4e4d14b6(i16) local_unnamed_addr

declare i32 @unknown_50d3d9ee(i16, i32) local_unnamed_addr

declare i32 @unknown_51007bc3(i32) local_unnamed_addr

declare i32 @unknown_510c9605() local_unnamed_addr

declare i32 @unknown_52007d7d(i32) local_unnamed_addr

declare i32 @unknown_57007c26() local_unnamed_addr

declare i32 @unknown_58007b71() local_unnamed_addr

define i32 @function_8ca6a329() local_unnamed_addr {
dec_label_pc_8ca6a329:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6a808() local_unnamed_addr {
dec_label_pc_8ca6a808:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6a893() local_unnamed_addr {
dec_label_pc_8ca6a893:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6aa67() local_unnamed_addr {
dec_label_pc_8ca6aa67:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6ae74() local_unnamed_addr {
dec_label_pc_8ca6ae74:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6b2c3() local_unnamed_addr {
dec_label_pc_8ca6b2c3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6b604() local_unnamed_addr {
dec_label_pc_8ca6b604:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6b7bd(i32 %arg1) local_unnamed_addr {
dec_label_pc_8ca6b7bd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6beab() local_unnamed_addr {
dec_label_pc_8ca6beab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6bf3c() local_unnamed_addr {
dec_label_pc_8ca6bf3c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6c008() local_unnamed_addr {
dec_label_pc_8ca6c008:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6c0c2() local_unnamed_addr {
dec_label_pc_8ca6c0c2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6c2e0() local_unnamed_addr {
dec_label_pc_8ca6c2e0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6c579() local_unnamed_addr {
dec_label_pc_8ca6c579:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6c683() local_unnamed_addr {
dec_label_pc_8ca6c683:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6c8e7() local_unnamed_addr {
dec_label_pc_8ca6c8e7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d005() local_unnamed_addr {
dec_label_pc_8ca6d005:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d238() local_unnamed_addr {
dec_label_pc_8ca6d238:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d4f9() local_unnamed_addr {
dec_label_pc_8ca6d4f9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d547() local_unnamed_addr {
dec_label_pc_8ca6d547:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d6f0() local_unnamed_addr {
dec_label_pc_8ca6d6f0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d74e() local_unnamed_addr {
dec_label_pc_8ca6d74e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d91d() local_unnamed_addr {
dec_label_pc_8ca6d91d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6d9a5() local_unnamed_addr {
dec_label_pc_8ca6d9a5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6da9e() local_unnamed_addr {
dec_label_pc_8ca6da9e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6dbb2() local_unnamed_addr {
dec_label_pc_8ca6dbb2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6dc03() local_unnamed_addr {
dec_label_pc_8ca6dc03:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6dd32() local_unnamed_addr {
dec_label_pc_8ca6dd32:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6e0e4() local_unnamed_addr {
dec_label_pc_8ca6e0e4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6e30a() local_unnamed_addr {
dec_label_pc_8ca6e30a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6e465() local_unnamed_addr {
dec_label_pc_8ca6e465:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6e52d() local_unnamed_addr {
dec_label_pc_8ca6e52d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6e773() local_unnamed_addr {
dec_label_pc_8ca6e773:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6e77c() local_unnamed_addr {
dec_label_pc_8ca6e77c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6eed3() local_unnamed_addr {
dec_label_pc_8ca6eed3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6f077() local_unnamed_addr {
dec_label_pc_8ca6f077:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6f40c() local_unnamed_addr {
dec_label_pc_8ca6f40c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6f4da() local_unnamed_addr {
dec_label_pc_8ca6f4da:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6f522() local_unnamed_addr {
dec_label_pc_8ca6f522:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6f670() local_unnamed_addr {
dec_label_pc_8ca6f670:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6f749() local_unnamed_addr {
dec_label_pc_8ca6f749:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6faa9() local_unnamed_addr {
dec_label_pc_8ca6faa9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6fde0() local_unnamed_addr {
dec_label_pc_8ca6fde0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca6feff() local_unnamed_addr {
dec_label_pc_8ca6feff:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca7033d() local_unnamed_addr {
dec_label_pc_8ca7033d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca70655() local_unnamed_addr {
dec_label_pc_8ca70655:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca707cc() local_unnamed_addr {
dec_label_pc_8ca707cc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca70aab() local_unnamed_addr {
dec_label_pc_8ca70aab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ca71680() local_unnamed_addr {
dec_label_pc_8ca71680:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8caa6b7b() local_unnamed_addr {
dec_label_pc_8caa6b7b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cabd452() local_unnamed_addr {
dec_label_pc_8cabd452:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cacd9ec() local_unnamed_addr {
dec_label_pc_8cacd9ec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cb3c9b1() local_unnamed_addr {
dec_label_pc_8cb3c9b1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cc7baba() local_unnamed_addr {
dec_label_pc_8cc7baba:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8ccd8a34() local_unnamed_addr {
dec_label_pc_8ccd8a34:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cded146() local_unnamed_addr {
dec_label_pc_8cded146:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cedcfc1() local_unnamed_addr {
dec_label_pc_8cedcfc1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cf0f39a() local_unnamed_addr {
dec_label_pc_8cf0f39a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cf3c24c() local_unnamed_addr {
dec_label_pc_8cf3c24c:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8cf9a887() local_unnamed_addr {
dec_label_pc_8cf9a887:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8de27876() local_unnamed_addr {
dec_label_pc_8de27876:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_8e0d577d() local_unnamed_addr {
dec_label_pc_8e0d577d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_900042e5() local_unnamed_addr {
dec_label_pc_900042e5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_91004ab2() local_unnamed_addr {
dec_label_pc_91004ab2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_91ece804() local_unnamed_addr {
dec_label_pc_91ece804:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_93011a18(i32) local_unnamed_addr

define i32 @function_93a68d06() local_unnamed_addr {
dec_label_pc_93a68d06:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_944f5cfc() local_unnamed_addr {
dec_label_pc_944f5cfc:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_95007bfb() local_unnamed_addr

define i32 @function_96004a19() local_unnamed_addr {
dec_label_pc_96004a19:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_96cae8b7(i16) local_unnamed_addr

define i32 @function_972948be() local_unnamed_addr {
dec_label_pc_972948be:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_97eab3ba(i16) local_unnamed_addr

declare i32 @unknown_98014714() local_unnamed_addr

define i32 @function_98a6d4a0() local_unnamed_addr {
dec_label_pc_98a6d4a0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_9ba68587() local_unnamed_addr {
dec_label_pc_9ba68587:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a27eaaf5() local_unnamed_addr {
dec_label_pc_a27eaaf5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a3f55b79() local_unnamed_addr {
dec_label_pc_a3f55b79:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a3ffffe4() local_unnamed_addr {
dec_label_pc_a3ffffe4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_a5dc9c51() local_unnamed_addr {
dec_label_pc_a5dc9c51:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_99a42bb8() local_unnamed_addr

declare i32 @unknown_9b00a9d1(i32) local_unnamed_addr

declare i32 @unknown_8d00fb93() local_unnamed_addr

declare i32 @unknown_8f4022c1(i32) local_unnamed_addr

declare i32 @unknown_9c007bfb() local_unnamed_addr

declare i32 @unknown_9cb17c26() local_unnamed_addr

declare i32 @unknown_9f0147d0() local_unnamed_addr

declare i32 @unknown_a0011a6d(i32) local_unnamed_addr

declare i32 @unknown_a0012ac7() local_unnamed_addr

declare i32 @unknown_a3004b26() local_unnamed_addr

declare i32 @unknown_111691e() local_unnamed_addr

declare i32 @unknown_11f7ba9() local_unnamed_addr

declare i32 @unknown_1207c26() local_unnamed_addr

declare i32 @unknown_12661c1(i32) local_unnamed_addr

declare i32 @unknown_12c7b5f() local_unnamed_addr

declare i32 @unknown_16945ef() local_unnamed_addr

declare i32 @unknown_1d0660d() local_unnamed_addr

declare i32 @unknown_1db1a3c() local_unnamed_addr

declare i32 @unknown_3a00031d() local_unnamed_addr

declare i32 @unknown_47007ba7() local_unnamed_addr

declare i32 @unknown_47007bfb(i32) local_unnamed_addr

declare i32 @unknown_47026859() local_unnamed_addr

define i32 @function_a5f302e9() local_unnamed_addr {
dec_label_pc_a5f302e9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_a7007c4c(i32, i32) local_unnamed_addr

declare i32 @unknown_a7967bd1(i32) local_unnamed_addr

define i32 @function_a81a391e() local_unnamed_addr {
dec_label_pc_a81a391e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_a90076c1() local_unnamed_addr

define i32 @function_a98d044e() local_unnamed_addr {
dec_label_pc_a98d044e:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b2017228() local_unnamed_addr {
dec_label_pc_b2017228:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b3e99cec() local_unnamed_addr {
dec_label_pc_b3e99cec:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b3ed6094() local_unnamed_addr {
dec_label_pc_b3ed6094:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b502e9c1() local_unnamed_addr {
dec_label_pc_b502e9c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_aa007bc1() local_unnamed_addr

declare i32 @unknown_ab007bd1() local_unnamed_addr

declare i32 @unknown_ab0081f8(i32, i32) local_unnamed_addr

declare i32 @unknown_ac007be3() local_unnamed_addr

define i32 @function_b6003e72() local_unnamed_addr {
dec_label_pc_b6003e72:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_b8a6a01b() local_unnamed_addr {
dec_label_pc_b8a6a01b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_b8fc7bc1(i32, i32) local_unnamed_addr

declare i32 @unknown_b7011aa0() local_unnamed_addr

define i32 @function_bd0057b9() local_unnamed_addr {
dec_label_pc_bd0057b9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_bd402da4() local_unnamed_addr {
dec_label_pc_bd402da4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_be2b5ef9() local_unnamed_addr {
dec_label_pc_be2b5ef9:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_bf007bd1() local_unnamed_addr

define i32 @function_c0008963() local_unnamed_addr {
dec_label_pc_c0008963:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_c0a64830() local_unnamed_addr {
dec_label_pc_c0a64830:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_c2012670() local_unnamed_addr

define i32 @function_c3c9d5c6() local_unnamed_addr {
dec_label_pc_c3c9d5c6:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_c4007baf() local_unnamed_addr

declare i32 @unknown_b72b946c() local_unnamed_addr

define i32 @function_c600d9b8() local_unnamed_addr {
dec_label_pc_c600d9b8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_cc005977() local_unnamed_addr {
dec_label_pc_cc005977:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_cccccccc(i16) local_unnamed_addr

define i32 @function_d1116dd7() local_unnamed_addr {
dec_label_pc_d1116dd7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d1a602d0() local_unnamed_addr {
dec_label_pc_d1a602d0:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_d3012818(i32) local_unnamed_addr

define i32 @function_d4ff9a2a() local_unnamed_addr {
dec_label_pc_d4ff9a2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_d6e0c5c1() local_unnamed_addr {
dec_label_pc_d6e0c5c1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_db005977(i32 %arg1) local_unnamed_addr {
dec_label_pc_db005977:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_dc826521() local_unnamed_addr {
dec_label_pc_dc826521:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_e1007bc1(i32) local_unnamed_addr

declare i32 @unknown_e100ab09(i32) local_unnamed_addr

define i32 @function_e245a9e3() local_unnamed_addr {
dec_label_pc_e245a9e3:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_e30113e5(i16 %arg1) local_unnamed_addr {
dec_label_pc_e30113e5:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_e28fbbd4() local_unnamed_addr

define i32 @function_e4a6a98d() local_unnamed_addr {
dec_label_pc_e4a6a98d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_e830b293() local_unnamed_addr {
dec_label_pc_e830b293:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_e850f495(i16, i32) local_unnamed_addr

define i32 @function_e89b014d() local_unnamed_addr {
dec_label_pc_e89b014d:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_e90547c4() local_unnamed_addr {
dec_label_pc_e90547c4:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_e950f125(i32 %arg1) local_unnamed_addr {
dec_label_pc_e950f125:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_e9a6df21() local_unnamed_addr {
dec_label_pc_e9a6df21:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ea002dab() local_unnamed_addr {
dec_label_pc_ea002dab:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_eda6bffb() local_unnamed_addr {
dec_label_pc_eda6bffb:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_ea0089fb(i32) local_unnamed_addr

define i32 @function_ee005a73() local_unnamed_addr {
dec_label_pc_ee005a73:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f40df47a() local_unnamed_addr {
dec_label_pc_f40df47a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f49ca082(i32 %arg1) local_unnamed_addr {
dec_label_pc_f49ca082:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f4f41ab1() local_unnamed_addr {
dec_label_pc_f4f41ab1:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_f5007bd1(i32) local_unnamed_addr

declare i32 @unknown_eca26826() local_unnamed_addr

declare i32 @unknown_eca77bfb(i32) local_unnamed_addr

declare i32 @unknown_ecff8aff(i16) local_unnamed_addr

define i32 @function_f6cbb47b() local_unnamed_addr {
dec_label_pc_f6cbb47b:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f8a6a796() local_unnamed_addr {
dec_label_pc_f8a6a796:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f9004a2a() local_unnamed_addr {
dec_label_pc_f9004a2a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f922fd55() local_unnamed_addr {
dec_label_pc_f922fd55:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f9a6a60a() local_unnamed_addr {
dec_label_pc_f9a6a60a:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_f9fb0069() local_unnamed_addr {
dec_label_pc_f9fb0069:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_faa68357() local_unnamed_addr {
dec_label_pc_faa68357:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fd004ab2() local_unnamed_addr {
dec_label_pc_fd004ab2:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fd455568() local_unnamed_addr {
dec_label_pc_fd455568:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fe436498() local_unnamed_addr {
dec_label_pc_fe436498:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_ff007c4c() local_unnamed_addr

define i32 @function_ff157ccd(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff157ccd:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffbf98e8() local_unnamed_addr {
dec_label_pc_ffbf98e8:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_fff1ffd7() local_unnamed_addr {
dec_label_pc_fff1ffd7:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffff99be() local_unnamed_addr {
dec_label_pc_ffff99be:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

define i32 @function_ffffce86(i32 %arg1) local_unnamed_addr {
dec_label_pc_ffffce86:
  %0 = call i32 @__decompiler_undefined_function_0()
  ret i32 %0
}

declare i32 @unknown_5a00be0a() local_unnamed_addr

declare i32 @unknown_5a011b2d() local_unnamed_addr

declare i32 @unknown_5c7d7bcc() local_unnamed_addr

declare i32 @unknown_5d007bd1() local_unnamed_addr

declare i32 @unknown_5f007bc1() local_unnamed_addr

declare i32 @unknown_60c80f24() local_unnamed_addr

declare i32 @unknown_63000cc1(i32) local_unnamed_addr

declare i32 @unknown_632677d3(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_65007bfb(i32, i32) local_unnamed_addr

declare i32 @unknown_65011a18(i32) local_unnamed_addr

declare i32 @unknown_6a007bd1(i32) local_unnamed_addr

declare i32 @unknown_6a007bff(i32) local_unnamed_addr

declare i32 @unknown_6a012314(i32, i32) local_unnamed_addr

declare i32 @unknown_6cb27c50(i32, i32, i32, i32, i16*, i32, i32, i32, i32, i16) local_unnamed_addr

declare i32 @unknown_6d007bfb(i32) local_unnamed_addr

declare i32 @unknown_6f008858(i32, i32) local_unnamed_addr

declare i32 @unknown_71007bfb(i32) local_unnamed_addr

declare i32 @unknown_7442a2a4(i16) local_unnamed_addr

declare i32 @unknown_7500bbd4(i32*, i32) local_unnamed_addr

declare i32 @unknown_7900bbd4(i32) local_unnamed_addr

declare i32 @unknown_79085f18(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_7b007bc1() local_unnamed_addr

declare i32 @unknown_840129c9() local_unnamed_addr

declare i32 @unknown_84012f11() local_unnamed_addr

declare i32 @unknown_87003a54(i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_87007b9c() local_unnamed_addr

declare i32 @unknown_87007bfb(i32, i32, i16) local_unnamed_addr

declare i32 @unknown_890b8bff(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_89767c3a() local_unnamed_addr

declare i32 @unknown_ae00b2c1() local_unnamed_addr

declare i32 @unknown_afaac3c7() local_unnamed_addr

declare i32 @unknown_b1007bc1(i32) local_unnamed_addr

declare i32 @unknown_b200674c() local_unnamed_addr

declare i32 @unknown_bc33bd6f(i32, i32) local_unnamed_addr

declare i32 @unknown_c4c7a877() local_unnamed_addr

declare i32 @unknown_c4ffb2c1(i32) local_unnamed_addr

declare i32 @unknown_c70126d0() local_unnamed_addr

declare i32 @unknown_c8007bd1(i32) local_unnamed_addr

declare i32 @unknown_c9987bd1() local_unnamed_addr

declare i32 @unknown_ce77c0cf(i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_d0001e26() local_unnamed_addr

declare i32 @unknown_d1007bfb() local_unnamed_addr

declare i32 @unknown_d3f5cb77(i32) local_unnamed_addr

declare i32 @unknown_d4007c4c() local_unnamed_addr

declare i32 @unknown_d6007b0e(i32, i32, i32) local_unnamed_addr

declare i32 @unknown_d8000000(i32, i32, i32, i16) local_unnamed_addr

declare i32 @unknown_e5007bd2() local_unnamed_addr

declare i32 @unknown_e5007c26(i32) local_unnamed_addr

declare i32 @unknown_e56f7bfb() local_unnamed_addr

declare i32 @unknown_e7d70bfb(i32) local_unnamed_addr

declare i32 @unknown_e8007bc1(i32) local_unnamed_addr

declare i32 @unknown_e800bd0b(i32) local_unnamed_addr

declare i32 @unknown_f0b07bfb() local_unnamed_addr

declare i32 @unknown_f10128be() local_unnamed_addr

declare i32 @unknown_f177e736(i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_f2126626(i32, i32) local_unnamed_addr

declare i32 @unknown_f21cbaee(i16) local_unnamed_addr

declare i32 @unknown_f3007c4c(i32, i32) local_unnamed_addr

declare i32 @unknown_f9007b5e(i32) local_unnamed_addr

declare i32 @unknown_f9e4f9ed() local_unnamed_addr

declare i32 @unknown_fb005a50() local_unnamed_addr

declare i32 @unknown_fb007b5a(i32) local_unnamed_addr

declare i32 @unknown_fb0102e1(i32) local_unnamed_addr

declare i32 @unknown_fb846a05(i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_fd34377d() local_unnamed_addr

declare i32 @unknown_ffa4f303(i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @unknown_ffffe887(i16) local_unnamed_addr

declare i32 @unknown_ffffffec() local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.ctpop.i8(i8) #0

declare i32 @__asm_wait() local_unnamed_addr

declare i32 @__asm_fnstenv() local_unnamed_addr

declare i32 @__asm_in(i32) local_unnamed_addr

declare void @__asm_outsd(i16, i32) local_unnamed_addr

declare i32 @__asm_int1() local_unnamed_addr

declare i8 @__asm_in.1(i8) local_unnamed_addr

declare i8 @__asm_insb(i16) local_unnamed_addr

declare void @__asm_outsb(i16, i8) local_unnamed_addr

declare void @__asm_out(i16, i8) local_unnamed_addr

declare void @__asm_out.2(i16, i32) local_unnamed_addr

declare i32 @__asm_hlt() local_unnamed_addr

declare i32 @__asm_sti() local_unnamed_addr

declare void @__asm_comiss(i128, i128) local_unnamed_addr

declare i32 @__asm_bound(i64) local_unnamed_addr

declare void @__asm_into(i32) local_unnamed_addr

declare i8 @__asm_in.3(i16) local_unnamed_addr

declare void @__asm_arpl(i16, i16) local_unnamed_addr

declare i32 @__asm_int3() local_unnamed_addr

declare void @__asm_rep_movsd_memcpy(i8*, i8*, i32) local_unnamed_addr

declare void @__asm_rep_movsb_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i128 @__asm_vpsubsw(i128, i128) local_unnamed_addr

declare i32 @__asm_insd(i16) local_unnamed_addr

declare void @__asm_rep_stosd_memset(i8*, i32, i32) local_unnamed_addr

declare void @__asm_out.4(i32, i32) local_unnamed_addr

declare i32 @__asm_emms() local_unnamed_addr

declare i32 @__asm_sldt() local_unnamed_addr

declare void @__asm_int(i32) local_unnamed_addr

declare i32 @__asm_in.5(i16) local_unnamed_addr

declare i32 @__asm_vzeroupper() local_unnamed_addr

declare void @__asm_out.6(i32, i8) local_unnamed_addr

declare i32 @__asm_iretd() local_unnamed_addr

declare i32 @__asm_vmread(i32) local_unnamed_addr

declare i128 @__asm_sqrtps(i128) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #0

declare i64 @__asm_pmuludq(i64, i64) local_unnamed_addr

declare i64 @__asm_pavgw(i64, i64) local_unnamed_addr

declare i128 @__asm_movhlps(i128, i128) local_unnamed_addr

declare x86_fp80 @__asm_fbstp(x86_fp80) local_unnamed_addr

declare i32 @__asm_fnsave() local_unnamed_addr

declare i32 @__asm_ud0() local_unnamed_addr

declare i64 @__asm_psubb(i64, i64) local_unnamed_addr

declare i64 @__asm_pmaddwd(i64, i64) local_unnamed_addr

declare i32 @__asm_invd(i32, i32) local_unnamed_addr

declare i32 @__asm_pextrw(i64, i32) local_unnamed_addr

declare i64 @__asm_pcmpeqb(i64, i64) local_unnamed_addr

declare void @__asm_frstor(i864) local_unnamed_addr

declare void @__asm_int.7(i16) local_unnamed_addr

declare i64 @__asm_pcmpgtd(i64, i64) local_unnamed_addr

declare i64 @__asm_psubd(i64, i64) local_unnamed_addr

declare i64 @__asm_psubusb(i64, i64) local_unnamed_addr

declare x86_fp80 @__asm_fbld(x86_fp80) local_unnamed_addr

declare i16 @__asm_arpl.8(i16) local_unnamed_addr

declare i64 @__asm_psllq(i64, i64) local_unnamed_addr

declare i32 @__asm_sysexit() local_unnamed_addr

declare %0 @__asm_cpuid(i32) local_unnamed_addr

declare i8 @__readfsbyte(i32) local_unnamed_addr

declare void @__writefsbyte(i32, i8) local_unnamed_addr

declare i8 @__readgsbyte(i32) local_unnamed_addr

declare void @__writegsbyte(i32, i8) local_unnamed_addr

declare i32 @__readfsdword(i32) local_unnamed_addr

declare void @__writefsdword(i32, i32) local_unnamed_addr

declare i32 @__readgsdword(i32) local_unnamed_addr

declare void @__writegsdword(i32, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i1 @__decompiler_undefined_function_2() local_unnamed_addr

declare i128 @__decompiler_undefined_function_4() local_unnamed_addr

declare i8* @__decompiler_undefined_function_5() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_6() local_unnamed_addr

declare i8 @__decompiler_undefined_function_8() local_unnamed_addr

declare i64 @__decompiler_undefined_function_9() local_unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { cold noreturn nounwind }

!0 = !{i64 16781915}
!1 = !{i64 16781917}
!2 = !{i64 16781921}
!3 = !{i64 16781923}
!4 = !{i64 16781925}
!5 = !{i64 16781928}
!6 = !{i64 16781931}
!7 = !{i64 16781935}
!8 = !{i64 16781938}
!9 = !{i64 16781939}
!10 = !{i64 16781944}
!11 = !{i64 16781945}
!12 = !{i64 16781948}
!13 = !{i64 16781951}
!14 = !{i64 16781952}
!15 = !{i64 16781956}
!16 = !{i64 16781958}
!17 = !{i64 16781962}
!18 = !{i64 16781963}
!19 = !{i64 16781969}
!20 = !{i64 16781972}
!21 = !{i64 16781973}
!22 = !{i64 16781976}
!23 = !{i64 16781982}
!24 = !{i64 16781984}
!25 = !{i64 16781987}
!26 = !{i64 16781991}
!27 = !{i64 16781993}
!28 = !{i64 16781995}
!29 = !{i64 16781997}
!30 = !{i64 16782001}
!31 = !{i64 16781920}
!32 = !{i64 16781979}
!33 = !{i64 16782003}
!34 = !{i64 16782006}
!35 = !{i64 16782008}
!36 = !{i64 16782009}
!37 = !{i64 16782013}
!38 = !{i64 16782014}
!39 = !{i64 16782016}
!40 = !{i64 16782019}
!41 = !{i64 16782024}
!42 = !{i64 16782028}
!43 = !{i64 16782030}
!44 = !{i64 16782032}
!45 = !{i64 16782034}
!46 = !{i64 16782036}
!47 = !{i64 16782037}
!48 = !{i64 16782040}
!49 = !{i64 16782042}
!50 = !{i64 16782043}
!51 = !{i64 16782049}
!52 = !{i64 16782051}
!53 = !{i64 16782055}
!54 = !{i64 16782058}
!55 = !{i64 16782060}
!56 = !{i64 16782061}
!57 = !{i64 16782062}
!58 = !{i64 16782066}
!59 = !{i64 16782067}
!60 = !{i64 16782071}
!61 = !{i64 16782074}
!62 = !{i64 16782077}
!63 = !{i64 16782080}
!64 = !{i64 16782081}
!65 = !{i64 16782084}
!66 = !{i64 16782092}
!67 = !{i64 16782095}
!68 = !{i64 16782097}
!69 = !{i64 16782099}
!70 = !{i64 16782107}
!71 = !{i64 16782113}
!72 = !{i64 16782116}
!73 = !{i64 16782117}
!74 = !{i64 16782126}
!75 = !{i64 16782137}
!76 = !{i64 16782123}
!77 = !{i64 16782133}
!78 = !{i64 16782136}
!79 = !{i64 16782144}
!80 = !{i64 16782145}
!81 = !{i64 16782148}
!82 = !{i64 16782158}
!83 = !{i64 16782159}
!84 = !{i64 16782162}
!85 = !{i64 16782165}
!86 = !{i64 16782169}
!87 = !{i64 16782174}
!88 = !{i64 16782175}
!89 = !{i64 16782178}
!90 = !{i64 16782180}
!91 = !{i64 16782182}
!92 = !{i64 16782187}
!93 = !{i64 16782191}
!94 = !{i64 16782194}
!95 = !{i64 16782198}
!96 = !{i64 16782200}
!97 = !{i64 16782202}
!98 = !{i64 16782206}
!99 = !{i64 16782208}
!100 = !{i64 16782211}
!101 = !{i64 16782214}
!102 = !{i64 16782218}
!103 = !{i64 16782224}
!104 = !{i64 16782226}
!105 = !{i64 16782228}
!106 = !{i64 16782229}
!107 = !{i64 16782231}
!108 = !{i64 16782233}
!109 = !{i64 16782236}
!110 = !{i64 16782239}
!111 = !{i64 16782240}
!112 = !{i64 16782241}
!113 = !{i64 16782243}
!114 = !{i64 16782247}
!115 = !{i64 16782250}
!116 = !{i64 16782254}
!117 = !{i64 16782258}
!118 = !{i64 16782259}
!119 = !{i64 16782265}
!120 = !{i64 16782267}
!121 = !{i64 16782273}
!122 = !{i64 16782275}
!123 = !{i64 16782281}
!124 = !{i64 16782283}
!125 = !{i64 16782289}
!126 = !{i64 16782291}
!127 = !{i64 16782297}
!128 = !{i64 16782299}
!129 = !{i64 16782305}
!130 = !{i64 16782307}
!131 = !{i64 16782313}
!132 = !{i64 16782315}
!133 = !{i64 16782318}
!134 = !{i64 16782322}
!135 = !{i64 16782327}
!136 = !{i64 16782330}
!137 = !{i64 16782332}
!138 = !{i64 16782334}
!139 = !{i64 16782336}
!140 = !{i64 16782337}
!141 = !{i64 16782341}
!142 = !{i64 16782346}
!143 = !{i64 16782353}
!144 = !{i64 16782354}
!145 = !{i64 16782356}
!146 = !{i64 16782359}
!147 = !{i64 16782361}
!148 = !{i64 16782363}
!149 = !{i64 16782366}
!150 = !{i64 16782368}
!151 = !{i64 16782372}
!152 = !{i64 16782377}
!153 = !{i64 16782382}
!154 = !{i64 16782384}
!155 = !{i64 16782385}
!156 = !{i64 16782387}
!157 = !{i64 16782388}
!158 = !{i64 16782393}
!159 = !{i64 16782395}
!160 = !{i64 16782397}
!161 = !{i64 16782402}
!162 = !{i64 16782404}
!163 = !{i64 16782409}
!164 = !{i64 16782411}
!165 = !{i64 16782419}
!166 = !{i64 16782430}
!167 = !{i64 16782432}
!168 = !{i64 16782434}
!169 = !{i64 16782438}
!170 = !{i64 16782440}
!171 = !{i64 16782442}
!172 = !{i64 16782443}
!173 = !{i64 16782446}
!174 = !{i64 16782448}
!175 = !{i64 16782450}
!176 = !{i64 16782451}
!177 = !{i64 16782453}
!178 = !{i64 16782455}
!179 = !{i64 16782461}
!180 = !{i64 16782463}
!181 = !{i64 16782466}
!182 = !{i64 16782469}
!183 = !{i64 16782471}
!184 = !{i64 16782477}
!185 = !{i64 16782479}
!186 = !{i64 16782481}
!187 = !{i64 16782483}
!188 = !{i64 16782487}
!189 = !{i64 16782489}
!190 = !{i64 16782491}
!191 = !{i64 16782494}
!192 = !{i64 16782496}
!193 = !{i64 16782497}
!194 = !{i64 16782501}
!195 = !{i64 16782503}
!196 = !{i64 16782506}
!197 = !{i64 16782511}
!198 = !{i64 16782514}
!199 = !{i64 16782517}
!200 = !{i64 16782523}
!201 = !{i64 16782526}
!202 = !{i64 16782529}
!203 = !{i64 16782531}
!204 = !{i64 16782537}
!205 = !{i64 16782539}
!206 = !{i64 16782542}
!207 = !{i64 16782544}
!208 = !{i64 16782546}
!209 = !{i64 16782553}
!210 = !{i64 16782555}
!211 = !{i64 16782558}
!212 = !{i64 16782563}
!213 = !{i64 16782566}
!214 = !{i64 16782570}
!215 = !{i64 16782573}
!216 = !{i64 16782577}
!217 = !{i64 16782579}
!218 = !{i64 16782583}
!219 = !{i64 16782585}
!220 = !{i64 16782589}
!221 = !{i64 16782591}
!222 = !{i64 16782593}
!223 = !{i64 16782595}
!224 = !{i64 16782600}
!225 = !{i64 16782820}
!226 = !{i64 16782884}
!227 = !{i64 16782886}
!228 = !{i64 16782888}
!229 = !{i64 16782890}
!230 = !{i64 16782892}
!231 = !{i64 16782894}
!232 = !{i64 16782903}
!233 = !{i64 16782923}
!234 = !{i64 16782928}
!235 = !{i64 16782930}
!236 = !{i64 16782932}
!237 = !{i64 16782935}
!238 = !{i64 16782936}
!239 = !{i64 16782951}
!240 = !{i64 16782959}
!241 = !{i64 16782961}
!242 = !{i64 16782980}
!243 = !{i64 16782990}
!244 = !{i64 16782996}
!245 = !{i64 16783000}
!246 = !{i64 16783002}
!247 = !{i64 16783004}
!248 = !{i64 16783011}
!249 = !{i64 16783014}
!250 = !{i64 16782950}
!251 = !{i64 16783018}
!252 = !{i64 16783022}
!253 = !{i64 16783033}
!254 = !{i64 16783036}
!255 = !{i64 16783037}
!256 = !{i64 16783039}
!257 = !{i64 16783042}
!258 = !{i8 0, i8 9}
!259 = !{i64 16783044}
!260 = !{i64 16783050}
!261 = !{i64 16783052}
!262 = !{i64 16783055}
!263 = !{i64 16783056}
!264 = !{i64 16783061}
!265 = !{i64 16783065}
!266 = !{i64 16783072}
!267 = !{i64 16783076}
!268 = !{i64 16783080}
!269 = !{i64 16783083}
!270 = !{i64 16783059}
!271 = !{i64 16783089}
!272 = !{i64 16783093}
!273 = !{i64 16783100}
!274 = !{i64 16783122}
!275 = !{i64 16783125}
!276 = !{i64 16783132}
!277 = !{i64 16783134}
!278 = !{i64 16783136}
!279 = !{i64 16783138}
!280 = !{i64 16783144}
!281 = !{i64 16782943}
!282 = !{i64 16783092}
!283 = !{i64 16783128}
!284 = !{i64 16783238}
!285 = !{i64 16783239}
!286 = !{i64 16783242}
!287 = !{i64 16783248}
!288 = !{i64 16783254}
!289 = !{i64 16783257}
!290 = !{i64 16783260}
!291 = !{i64 16783273}
!292 = !{i64 16783286}
!293 = !{i64 16783292}
!294 = !{i64 16783293}
!295 = !{i64 16783318}
!296 = !{i64 16783321}
!297 = !{i64 16783324}
!298 = !{i64 16783341}
!299 = !{i64 16783344}
!300 = !{i64 16783350}
!301 = !{i64 16783352}
!302 = !{i64 16783370}
!303 = !{i64 16783373}
!304 = !{i64 16783379}
!305 = !{i64 16783382}
!306 = !{i64 16783383}
!307 = !{i64 16783384}
!308 = !{i64 16783390}
!309 = !{i64 16783393}
!310 = !{i64 16783396}
!311 = !{i64 16783397}
!312 = !{i64 16783404}
!313 = !{i64 16783414}
!314 = !{i64 16783420}
!315 = !{i64 16783423}
!316 = !{i64 16783432}
!317 = !{i64 16783433}
!318 = !{i64 16783434}
!319 = !{i64 16783437}
!320 = !{i64 16783438}
!321 = !{i64 16783444}
!322 = !{i64 16783446}
!323 = !{i64 16783447}
!324 = !{i64 16783450}
!325 = !{i64 16783456}
!326 = !{i64 16783466}
!327 = !{i64 16783469}
!328 = !{i64 16783470}
!329 = !{i64 16783472}
!330 = !{i64 16783478}
!331 = !{i64 16783480}
!332 = !{i64 16783481}
!333 = !{i64 16783483}
!334 = !{i64 16783489}
!335 = !{i64 16783499}
!336 = !{i64 16783501}
!337 = !{i64 16783507}
!338 = !{i64 16783513}
!339 = !{i64 16783518}
!340 = !{i64 16783524}
!341 = !{i64 16783525}
!342 = !{i64 16783534}
!343 = !{i64 16783535}
!344 = !{i64 16783539}
!345 = !{i64 16783541}
!346 = !{i64 16783547}
!347 = !{i64 16783549}
!348 = !{i64 16783555}
!349 = !{i64 16783652}
!350 = !{i64 16783697}
!351 = !{i64 16783699}
!352 = !{i64 16783702}
!353 = !{i64 16783707}
!354 = !{i64 16783712}
!355 = !{i64 16783718}
!356 = !{i64 16783726}
!357 = !{i64 16783727}
!358 = !{i64 16783729}
!359 = !{i64 16783731}
!360 = !{i64 16783736}
!361 = !{i64 16783738}
!362 = !{i64 16783743}
!363 = !{i64 16783750}
!364 = !{i64 16783757}
!365 = !{i64 16783760}
!366 = !{i64 16783765}
!367 = !{i64 16783770}
!368 = !{i64 16783773}
!369 = !{i64 16783778}
!370 = !{i64 16783781}
!371 = !{i64 16783784}
!372 = !{i64 16783789}
!373 = !{i64 16783795}
!374 = !{i64 16783798}
!375 = !{i64 16783802}
!376 = !{i64 16783808}
!377 = !{i64 16783810}
!378 = !{i64 16783812}
!379 = !{i64 16783826}
!380 = !{i64 16783833}
!381 = !{i64 16783836}
!382 = !{i64 16783838}
!383 = !{i64 16783839}
!384 = !{i64 16783850}
!385 = !{i64 16783853}
!386 = !{i64 16783855}
!387 = !{i64 16783859}
!388 = !{i64 16783862}
!389 = !{i64 16783864}
!390 = !{i64 16783928}
!391 = !{i64 16784206}
!392 = !{i64 16784427}
!393 = !{i64 16784431}
!394 = !{i64 16784435}
!395 = !{i64 16784440}
!396 = !{i64 16784443}
!397 = !{i64 16784447}
!398 = !{i64 16784449}
!399 = !{i64 16784455}
!400 = !{i64 16784458}
!401 = !{i64 16784467}
!402 = !{i64 16784471}
!403 = !{i64 16784439}
!404 = !{i64 16784464}
!405 = !{i64 16784473}
!406 = !{i64 16784485}
!407 = !{i64 16784487}
!408 = !{i64 16784433}
!409 = !{i64 16784492}
!410 = !{i64 16784497}
!411 = !{i64 16784498}
!412 = !{i64 16784500}
!413 = !{i64 16784502}
!414 = !{i64 16784504}
!415 = !{i64 16784506}
!416 = !{i64 16784513}
!417 = !{i64 16784514}
!418 = !{i64 16784517}
!419 = !{i64 16784518}
!420 = !{i64 16784527}
!421 = !{i64 16784528}
!422 = !{i64 16784534}
!423 = !{i64 16784540}
!424 = !{i64 16784542}
!425 = !{i64 16784545}
!426 = !{i64 16784546}
!427 = !{i64 16784547}
!428 = !{i64 16784548}
!429 = !{i64 16784553}
!430 = !{i64 16784557}
!431 = !{i64 16784569}
!432 = !{i64 16784576}
!433 = !{i64 16784457}
!434 = !{i64 16784584}
!435 = !{i64 16784587}
!436 = !{i64 16784592}
!437 = !{i64 16784594}
!438 = !{i64 16784595}
!439 = !{i64 16784598}
!440 = !{i64 16784600}
!441 = !{i64 16784601}
!442 = !{i64 16784606}
!443 = !{i64 16784615}
!444 = !{i64 16784618}
!445 = !{i64 16784623}
!446 = !{i64 16784626}
!447 = !{i64 16784630}
!448 = !{i64 16784643}
!449 = !{i64 16784645}
!450 = !{i64 16784646}
!451 = !{i64 16784652}
!452 = !{i64 16784654}
!453 = !{i64 16784659}
!454 = !{i64 16784661}
!455 = !{i64 16784666}
!456 = !{i64 16784668}
!457 = !{i64 16784669}
!458 = !{i64 16784611}
!459 = !{i64 16784614}
!460 = !{i64 16784684}
!461 = !{i64 16784690}
!462 = !{i64 16784692}
!463 = !{i64 16784718}
!464 = !{i64 16784724}
!465 = !{i64 16784758}
!466 = !{i64 16784761}
!467 = !{i64 16784767}
!468 = !{i64 16784773}
!469 = !{i64 16784778}
!470 = !{i64 16784780}
!471 = !{i64 16784782}
!472 = !{i64 16784836}
!473 = !{i64 16784843}
!474 = !{i64 16784845}
!475 = !{i64 16784850}
!476 = !{i64 16784857}
!477 = !{i64 16784859}
!478 = !{i64 16784863}
!479 = !{i64 16784856}
!480 = !{i64 16784858}
!481 = !{i64 16784865}
!482 = !{i64 16784868}
!483 = !{i64 16784875}
!484 = !{i64 16784876}
!485 = !{i64 16784881}
!486 = !{i64 16784891}
!487 = !{i64 16784899}
!488 = !{i64 16784939}
!489 = !{i64 16784941}
!490 = !{i64 16784944}
!491 = !{i64 16784946}
!492 = !{i64 16784949}
!493 = !{i64 16784954}
!494 = !{i64 16784964}
!495 = !{i64 16785091}
!496 = !{i64 16785093}
!497 = !{i64 16785096}
!498 = !{i64 16785102}
!499 = !{i64 16785111}
!500 = !{i64 16785118}
!501 = !{i64 16785119}
!502 = !{i64 16785127}
!503 = !{i64 16785141}
!504 = !{i64 16785201}
!505 = !{i64 16785206}
!506 = !{i64 16785209}
!507 = !{i64 16785218}
!508 = !{i64 16785221}
!509 = !{i64 16785225}
!510 = !{i64 16785232}
!511 = !{i64 16785255}
!512 = !{i64 16785260}
!513 = !{i64 16785261}
!514 = !{i64 16785263}
!515 = !{i64 16785278}
!516 = !{i64 16785269}
!517 = !{i64 16785275}
!518 = !{i64 16785279}
!519 = !{i64 16785282}
!520 = !{i64 16785283}
!521 = !{i64 16785292}
!522 = !{i64 16785298}
!523 = !{i64 16785372}
!524 = !{i64 16785310}
!525 = !{i64 16785320}
!526 = !{i64 16785328}
!527 = !{i64 16785331}
!528 = !{i64 16785339}
!529 = !{i64 16785344}
!530 = !{i64 16785346}
!531 = !{i64 16785335}
!532 = !{i64 16785337}
!533 = !{i64 16785336}
!534 = !{i64 16785352}
!535 = !{i64 16785353}
!536 = !{i64 16785359}
!537 = !{i64 16785362}
!538 = !{i64 16785370}
!539 = !{i64 16785371}
!540 = !{i64 16785375}
!541 = !{i64 16785378}
!542 = !{i64 16785394}
!543 = !{i64 16785398}
!544 = !{i64 16785400}
!545 = !{i64 16785403}
!546 = !{i64 16785406}
!547 = !{i64 16785481}
!548 = !{i64 16785483}
!549 = !{i64 16785486}
!550 = !{i64 16785487}
!551 = !{i64 16785578}
!552 = !{i64 16785660}
!553 = !{i64 16785666}
!554 = !{i64 16785683}
!555 = !{i64 16785686}
!556 = !{i64 16785689}
!557 = !{i64 16785699}
!558 = !{i64 16785705}
!559 = !{i64 16785719}
!560 = !{i64 16785724}
!561 = !{i64 16785725}
!562 = !{i64 16785730}
!563 = !{i64 16785735}
!564 = !{i64 16785737}
!565 = !{i64 16785742}
!566 = !{i64 16785744}
!567 = !{i64 16785743}
!568 = !{i64 16785753}
!569 = !{i64 16785754}
!570 = !{i64 16785761}
!571 = !{i64 16785768}
!572 = !{i64 16785799}
!573 = !{i64 16785807}
!574 = !{i64 16785809}
!575 = !{i64 16785821}
!576 = !{i64 16785825}
!577 = !{i64 16785839}
!578 = !{i64 16785840}
!579 = !{i64 16785842}
!580 = !{i64 16785831}
!581 = !{i64 16785844}
!582 = !{i64 16785847}
!583 = !{i64 16785856}
!584 = !{i64 16785870}
!585 = !{i64 16785871}
!586 = !{i64 16785874}
!587 = !{i64 16785875}
!588 = !{i64 16785877}
!589 = !{i64 16785879}
!590 = !{i64 16785882}
!591 = !{i64 16785883}
!592 = !{i64 16785890}
!593 = !{i64 16785892}
!594 = !{i64 16785898}
!595 = !{i64 16785901}
!596 = !{i64 16785903}
!597 = !{i64 16785906}
!598 = !{i64 16785910}
!599 = !{i64 16785873}
!600 = !{i64 16785919}
!601 = !{i64 16785932}
!602 = !{i64 16785938}
!603 = !{i64 16785946}
!604 = !{i64 16785948}
!605 = !{i64 16785957}
!606 = !{i64 16785958}
!607 = !{i64 16785959}
!608 = !{i64 16785962}
!609 = !{i64 16785964}
!610 = !{i64 16785972}
!611 = !{i64 16785977}
!612 = !{i64 16785979}
!613 = !{i64 16785981}
!614 = !{i64 16785986}
!615 = !{i64 16785988}
!616 = !{i64 16785994}
!617 = !{i64 16785996}
!618 = !{i64 16785997}
!619 = !{i64 16785998}
!620 = !{i64 16786004}
!621 = !{i64 16786007}
!622 = !{i64 16786008}
!623 = !{i64 16786010}
!624 = !{i64 16786012}
!625 = !{i64 16786045}
!626 = !{i64 16786047}
!627 = !{i64 16786049}
!628 = !{i64 16786051}
!629 = !{i64 16786054}
!630 = !{i64 16786056}
!631 = !{i64 16786060}
!632 = !{i64 16786064}
!633 = !{i64 16786070}
!634 = !{i64 16786072}
!635 = !{i64 16786077}
!636 = !{i64 16786079}
!637 = !{i64 16786087}
!638 = !{i64 16786088}
!639 = !{i64 16786091}
!640 = !{i64 16786093}
!641 = !{i64 16786096}
!642 = !{i64 16786098}
!643 = !{i64 16786101}
!644 = !{i64 16786075}
!645 = !{i64 16786104}
!646 = !{i64 16786116}
!647 = !{i64 16786118}
!648 = !{i64 16786122}
!649 = !{i64 16786216}
!650 = !{i64 16786218}
!651 = !{i64 16786239}
!652 = !{i64 16786247}
!653 = !{i64 16786260}
!654 = !{i64 16786262}
!655 = !{i64 16786265}
!656 = !{i64 16786274}
!657 = !{i64 16786276}
!658 = !{i64 16786288}
!659 = !{i64 16786294}
!660 = !{i64 16786303}
!661 = !{i64 16786310}
!662 = !{i64 16786312}
!663 = !{i64 16786322}
!664 = !{i64 16786324}
!665 = !{i64 16786334}
!666 = !{i64 16786343}
!667 = !{i64 16786358}
!668 = !{i64 16786365}
!669 = !{i64 16786371}
!670 = !{i64 16786376}
!671 = !{i64 16786384}
!672 = !{i64 16786390}
!673 = !{i64 16786392}
!674 = !{i64 16786400}
!675 = !{i64 16786404}
!676 = !{i64 16786409}
!677 = !{i64 16786415}
!678 = !{i64 16786419}
!679 = !{i64 16786439}
!680 = !{i64 16786446}
!681 = !{i64 16786450}
!682 = !{i64 16786407}
!683 = !{i64 16786473}
!684 = !{i64 16786490}
!685 = !{i64 16786492}
!686 = !{i64 16786502}
!687 = !{i64 16786514}
!688 = !{i64 16786520}
!689 = !{i64 16786526}
!690 = !{i64 16786479}
!691 = !{i64 16786507}
!692 = !{i64 16786509}
!693 = !{i64 16786528}
!694 = !{i64 16786530}
!695 = !{i64 16786532}
!696 = !{i64 16786534}
!697 = !{i64 16786537}
!698 = !{i64 16786543}
!699 = !{i64 16786547}
!700 = !{i64 16786548}
!701 = !{i64 16786555}
!702 = !{i64 16786556}
!703 = !{i64 16786558}
!704 = !{i64 16786560}
!705 = !{i64 16786562}
!706 = !{i64 16786563}
!707 = !{i64 16786565}
!708 = !{i64 16786568}
!709 = !{i64 16786571}
!710 = !{i64 16786575}
!711 = !{i64 16786576}
!712 = !{i64 16786577}
!713 = !{i64 16786579}
!714 = !{i64 16786580}
!715 = !{i64 16786582}
!716 = !{i64 16786583}
!717 = !{i64 16786585}
!718 = !{i64 16786590}
!719 = !{i64 16786595}
!720 = !{i64 16786600}
!721 = !{i64 16786605}
!722 = !{i64 16786607}
!723 = !{i64 16786614}
!724 = !{i64 16786616}
!725 = !{i64 16786626}
!726 = !{i64 16786629}
!727 = !{i64 16786634}
!728 = !{i64 16786640}
!729 = !{i64 16786620}
!730 = !{i64 16786642}
!731 = !{i64 16786648}
!732 = !{i64 16786653}
!733 = !{i64 16786655}
!734 = !{i64 16786658}
!735 = !{i64 16786659}
!736 = !{i64 16786660}
!737 = !{i64 16786668}
!738 = !{i64 16786671}
!739 = !{i64 16786676}
!740 = !{i64 16786683}
!741 = !{i64 16786688}
!742 = !{i64 16786693}
!743 = !{i64 16786698}
!744 = !{i64 16786700}
!745 = !{i64 16786703}
!746 = !{i64 16786704}
!747 = !{i64 16786707}
!748 = !{i64 16786710}
!749 = !{i64 16786713}
!750 = !{i64 16786715}
!751 = !{i64 16786717}
!752 = !{i64 16786724}
!753 = !{i64 16786725}
!754 = !{i64 16786728}
!755 = !{i64 16786740}
!756 = !{i64 16786743}
!757 = !{i64 16786745}
!758 = !{i64 16786746}
!759 = !{i64 16786752}
!760 = !{i64 16786756}
!761 = !{i64 16786760}
!762 = !{i64 16786766}
!763 = !{i64 16786768}
!764 = !{i64 16786770}
!765 = !{i64 16786772}
!766 = !{i64 16786831}
!767 = !{i64 16786783}
!768 = !{i64 16786786}
!769 = !{i64 16786836}
!770 = !{i64 16786842}
!771 = !{i64 16786849}
!772 = !{i64 16786851}
!773 = !{i64 16786853}
!774 = !{i64 16786858}
!775 = !{i64 16786865}
!776 = !{i64 16786866}
!777 = !{i64 16786871}
!778 = !{i64 16786880}
!779 = !{i64 16786897}
!780 = !{i64 16786902}
!781 = !{i64 16786911}
!782 = !{i64 16786914}
!783 = !{i64 16786920}
!784 = !{i64 16786927}
!785 = !{i64 16786937}
!786 = !{i64 16786945}
!787 = !{i64 16787101}
!788 = !{i64 16787104}
!789 = !{i64 16787106}
!790 = !{i64 16787109}
!791 = !{i64 16787122}
!792 = !{i64 16787465}
!793 = !{i64 16787469}
!794 = !{i64 16787471}
!795 = !{i64 16787483}
!796 = !{i64 16787490}
!797 = !{i64 16787497}
!798 = !{i64 16787498}
!799 = !{i64 16787507}
!800 = !{i64 16787509}
!801 = !{i64 16787514}
!802 = !{i64 16787522}
!803 = !{i64 16787528}
!804 = !{i64 16787535}
!805 = !{i64 16787537}
!806 = !{i64 16787543}
!807 = !{i64 16787545}
!808 = !{i64 16787562}
!809 = !{i64 16787570}
!810 = !{i64 16787573}
!811 = !{i64 16787574}
!812 = !{i64 16787586}
!813 = !{i64 16787588}
!814 = !{i64 16787595}
!815 = !{i64 16787597}
!816 = !{i64 16787605}
!817 = !{i64 16787615}
!818 = !{i64 16787616}
!819 = !{i64 16787624}
!820 = !{i64 16787625}
!821 = !{i64 16787632}
!822 = !{i64 16787634}
!823 = !{i64 16787635}
!824 = !{i64 16787637}
!825 = !{i64 16787640}
!826 = !{i64 16787641}
!827 = !{i64 16787642}
!828 = !{i64 16787665}
!829 = !{i64 16787667}
!830 = !{i64 16787656}
!831 = !{i64 16787669}
!832 = !{i64 16787672}
!833 = !{i64 16787683}
!834 = !{i64 16787690}
!835 = !{i64 16787697}
!836 = !{i64 16787699}
!837 = !{i64 16787700}
!838 = !{i64 16787708}
!839 = !{i64 16787737}
!840 = !{i64 16787745}
!841 = !{i64 16787809}
!842 = !{i64 16787820}
!843 = !{i64 16787825}
!844 = !{i64 16787827}
!845 = !{i64 16787834}
!846 = !{i64 16788181}
!847 = !{i64 16788189}
!848 = !{i64 16788200}
!849 = !{i64 16788202}
!850 = !{i64 16788219}
!851 = !{i64 16788224}
!852 = !{i64 16788228}
!853 = !{i64 16788235}
!854 = !{i64 16788237}
!855 = !{i64 16788239}
!856 = !{i64 16788244}
!857 = !{i64 16788249}
!858 = !{i64 16788254}
!859 = !{i64 16788261}
!860 = !{i64 16788266}
!861 = !{i64 16788260}
!862 = !{i64 16788274}
!863 = !{i64 16788279}
!864 = !{i64 16788286}
!865 = !{i64 16788288}
!866 = !{i64 16788290}
!867 = !{i64 16788294}
!868 = !{i64 16788301}
!869 = !{i64 16788303}
!870 = !{i64 16788212}
!871 = !{i64 16788230}
!872 = !{i64 16788381}
!873 = !{i64 16788305}
!874 = !{i64 16788307}
!875 = !{i64 16788308}
!876 = !{i64 16788317}
!877 = !{i64 16788320}
!878 = !{i64 16788327}
!879 = !{i64 16788331}
!880 = !{i64 16788338}
!881 = !{i64 16788343}
!882 = !{i64 16788345}
!883 = !{i64 16788347}
!884 = !{i64 16788349}
!885 = !{i64 16788350}
!886 = !{i64 16788351}
!887 = !{i64 16788363}
!888 = !{i64 16788370}
!889 = !{i64 16788380}
!890 = !{i64 16788382}
!891 = !{i64 16788384}
!892 = !{i64 16788395}
!893 = !{i64 16788397}
!894 = !{i64 16788392}
!895 = !{i64 16788398}
!896 = !{i64 16788404}
!897 = !{i64 16788411}
!898 = !{i64 16788416}
!899 = !{i64 16788423}
!900 = !{i64 16788431}
!901 = !{i64 16788435}
!902 = !{i64 16788438}
!903 = !{i64 16788441}
!904 = !{i64 16788448}
!905 = !{i64 16788450}
!906 = !{i64 16788498}
!907 = !{i64 16788500}
!908 = !{i64 16788505}
!909 = !{i64 16788598}
!910 = !{i64 16788605}
!911 = !{i64 16788623}
!912 = !{i64 16788625}
!913 = !{i64 16788628}
!914 = !{i64 16788633}
!915 = !{i64 16788642}
!916 = !{i64 16788658}
!917 = !{i64 16788661}
!918 = !{i64 16788664}
!919 = !{i64 16788670}
!920 = !{i64 16788673}
!921 = !{i64 16788676}
!922 = !{i64 16788678}
!923 = !{i64 16788684}
!924 = !{i64 16788650}
!925 = !{i64 16788690}
!926 = !{i64 16788692}
!927 = !{i64 16788693}
!928 = !{i64 16788699}
!929 = !{i64 16788704}
!930 = !{i64 16788710}
!931 = !{i64 16788715}
!932 = !{i64 16788720}
!933 = !{i64 16788721}
!934 = !{i64 16788723}
!935 = !{i64 16788787}
!936 = !{i64 16788793}
!937 = !{i64 16788906}
!938 = !{i64 16788912}
!939 = !{i64 16788919}
!940 = !{i64 16788923}
!941 = !{i64 16788925}
!942 = !{i64 16788926}
!943 = !{i64 16788933}
!944 = !{i64 16788942}
!945 = !{i64 16788954}
!946 = !{i64 16788970}
!947 = !{i64 16788975}
!948 = !{i64 16788977}
!949 = !{i64 16788982}
!950 = !{i64 16788989}
!951 = !{i64 16788994}
!952 = !{i64 16788996}
!953 = !{i64 16788999}
!954 = !{i64 16789004}
!955 = !{i64 16789010}
!956 = !{i64 16789012}
!957 = !{i64 16789017}
!958 = !{i64 16789019}
!959 = !{i64 16789027}
!960 = !{i64 16789034}
!961 = !{i64 16789040}
!962 = !{i64 16789042}
!963 = !{i64 16789045}
!964 = !{i64 16789048}
!965 = !{i64 16789050}
!966 = !{i64 16789058}
!967 = !{i64 16789061}
!968 = !{i64 16789063}
!969 = !{i64 16789068}
!970 = !{i64 16789071}
!971 = !{i64 16789076}
!972 = !{i64 16789080}
!973 = !{i64 16788987}
!974 = !{i64 16789086}
!975 = !{i64 16790011}
!976 = !{i64 16790034}
!977 = !{i64 16790061}
!978 = !{i64 16790071}
!979 = !{i64 16790073}
!980 = !{i64 16790078}
!981 = !{i64 16790079}
!982 = !{i64 16790080}
!983 = !{i64 16790081}
!984 = !{i64 16790088}
!985 = !{i64 16790097}
!986 = !{i64 16790100}
!987 = !{i64 16790106}
!988 = !{i64 16790109}
!989 = !{i64 16790114}
!990 = !{i64 16790125}
!991 = !{i64 16790130}
!992 = !{i64 16790135}
!993 = !{i64 16790103}
!994 = !{i64 16790137}
!995 = !{i64 16790147}
!996 = !{i64 16790153}
!997 = !{i64 16790159}
!998 = !{i64 16790164}
!999 = !{i64 16790170}
!1000 = !{i64 16790179}
!1001 = !{i64 16790185}
!1002 = !{i64 16790186}
!1003 = !{i64 16790192}
!1004 = !{i64 16790193}
!1005 = !{i64 16790195}
!1006 = !{i64 16790198}
!1007 = !{i64 16790201}
!1008 = !{i64 16790203}
!1009 = !{i64 16790217}
!1010 = !{i64 16790218}
!1011 = !{i64 16790223}
!1012 = !{i64 16790234}
!1013 = !{i64 16790236}
!1014 = !{i64 16790238}
!1015 = !{i64 16790240}
!1016 = !{i64 16790243}
!1017 = !{i64 16790209}
!1018 = !{i64 16790228}
!1019 = !{i64 16790246}
!1020 = !{i64 16790252}
!1021 = !{i64 16790258}
!1022 = !{i64 16790259}
!1023 = !{i64 16790261}
!1024 = !{i64 16790267}
!1025 = !{i64 16790272}
!1026 = !{i64 16790274}
!1027 = !{i64 16790276}
!1028 = !{i64 16790278}
!1029 = !{i64 16790280}
!1030 = !{i64 16790288}
!1031 = !{i64 16790291}
!1032 = !{i64 16790294}
!1033 = !{i64 16790296}
!1034 = !{i64 16790302}
!1035 = !{i64 16790327}
!1036 = !{i64 16790333}
!1037 = !{i64 16790339}
!1038 = !{i64 16790364}
!1039 = !{i64 16790373}
!1040 = !{i64 16790378}
!1041 = !{i64 16790383}
!1042 = !{i64 16790388}
!1043 = !{i64 16790394}
!1044 = !{i64 16790396}
!1045 = !{i64 16790401}
!1046 = !{i64 16790406}
!1047 = !{i64 16790408}
!1048 = !{i64 16790413}
!1049 = !{i64 16790458}
!1050 = !{i64 16790509}
!1051 = !{i64 16790523}
!1052 = !{i64 16790530}
!1053 = !{i64 16790546}
!1054 = !{i64 16790550}
!1055 = !{i64 16790553}
!1056 = !{i64 16790555}
!1057 = !{i64 16790561}
!1058 = !{i64 16790539}
!1059 = !{i64 16790573}
!1060 = !{i64 16790576}
!1061 = !{i64 16790585}
!1062 = !{i64 16790590}
!1063 = !{i64 16790595}
!1064 = !{i64 16790631}
!1065 = !{i64 16790633}
!1066 = !{i64 16790658}
!1067 = !{i64 16790660}
!1068 = !{i64 16790666}
!1069 = !{i64 16790733}
!1070 = !{i64 16790766}
!1071 = !{i64 16790781}
!1072 = !{i64 16790784}
!1073 = !{i64 16790796}
!1074 = !{i64 16790801}
!1075 = !{i64 16790833}
!1076 = !{i64 16790845}
!1077 = !{i64 16790851}
!1078 = !{i64 16790866}
!1079 = !{i64 16790868}
!1080 = !{i64 16790879}
!1081 = !{i64 16790882}
!1082 = !{i64 16790887}
!1083 = !{i64 16790890}
!1084 = !{i64 16790895}
!1085 = !{i64 16790910}
!1086 = !{i64 16790911}
!1087 = !{i64 16790963}
!1088 = !{i64 16790968}
!1089 = !{i64 16790969}
!1090 = !{i64 16790974}
!1091 = !{i64 16790977}
!1092 = !{i64 16790987}
!1093 = !{i64 16790988}
!1094 = !{i64 16790983}
!1095 = !{i64 16790985}
!1096 = !{i64 16790991}
!1097 = !{i64 16790993}
!1098 = !{i64 16790994}
!1099 = !{i64 16790998}
!1100 = !{i64 16790999}
!1101 = !{i64 16791005}
!1102 = !{i64 16791011}
!1103 = !{i64 16791014}
!1104 = !{i64 16791021}
!1105 = !{i64 16791030}
!1106 = !{i64 16791036}
!1107 = !{i64 16791038}
!1108 = !{i64 16791057}
!1109 = !{i64 16791059}
!1110 = !{i64 16791066}
!1111 = !{i64 16791070}
!1112 = !{i64 16791074}
!1113 = !{i64 16791076}
!1114 = !{i64 16791088}
!1115 = !{i64 16791095}
!1116 = !{i64 16791097}
!1117 = !{i64 16791100}
!1118 = !{i64 16791103}
!1119 = !{i64 16791108}
!1120 = !{i64 16791114}
!1121 = !{i64 16791116}
!1122 = !{i64 16791120}
!1123 = !{i64 16791123}
!1124 = !{i64 16791126}
!1125 = !{i64 16791130}
!1126 = !{i64 16791133}
!1127 = !{i64 16791138}
!1128 = !{i64 16791140}
!1129 = !{i64 16791143}
!1130 = !{i64 16791145}
!1131 = !{i64 16791151}
!1132 = !{i64 16791153}
!1133 = !{i64 16791159}
!1134 = !{i64 16791163}
!1135 = !{i64 16791166}
!1136 = !{i64 16791172}
!1137 = !{i64 16791173}
!1138 = !{i64 16791179}
!1139 = !{i64 16791186}
!1140 = !{i64 16791198}
!1141 = !{i64 16791199}
!1142 = !{i64 16791204}
!1143 = !{i64 16791207}
!1144 = !{i64 16791209}
!1145 = !{i64 16791215}
!1146 = !{i64 16791192}
!1147 = !{i64 16791217}
!1148 = !{i64 16791225}
!1149 = !{i64 16791231}
!1150 = !{i64 16791236}
!1151 = !{i64 16791247}
!1152 = !{i64 16791252}
!1153 = !{i64 16791254}
!1154 = !{i64 16791259}
!1155 = !{i64 16791266}
!1156 = !{i64 16791273}
!1157 = !{i64 16791274}
!1158 = !{i64 16791276}
!1159 = !{i64 16791280}
!1160 = !{i64 16791283}
!1161 = !{i64 16791294}
!1162 = !{i64 16791301}
!1163 = !{i64 16791308}
!1164 = !{i64 16791310}
!1165 = !{i64 16791313}
!1166 = !{i64 16791318}
!1167 = !{i64 16791320}
!1168 = !{i64 16791325}
!1169 = !{i64 16791329}
!1170 = !{i64 16791332}
!1171 = !{i64 16791346}
!1172 = !{i64 16791347}
!1173 = !{i64 16791264}
!1174 = !{i64 16791383}
!1175 = !{i64 16791385}
!1176 = !{i64 16791391}
!1177 = !{i64 16791406}
!1178 = !{i64 16791411}
!1179 = !{i64 16791416}
!1180 = !{i64 16791422}
!1181 = !{i64 16791423}
!1182 = !{i64 16791428}
!1183 = !{i64 16791430}
!1184 = !{i64 16791432}
!1185 = !{i64 16791434}
!1186 = !{i64 16791439}
!1187 = !{i64 16791444}
!1188 = !{i64 16791496}
!1189 = !{i64 16791501}
!1190 = !{i64 16791582}
!1191 = !{i64 16791590}
!1192 = !{i64 16791592}
!1193 = !{i64 16791594}
!1194 = !{i64 16791598}
!1195 = !{i64 16791599}
!1196 = !{i64 16791609}
!1197 = !{i64 16791615}
!1198 = !{i64 16791620}
!1199 = !{i64 16791627}
!1200 = !{i64 16791633}
!1201 = !{i64 16791645}
!1202 = !{i64 16791648}
!1203 = !{i64 16791650}
!1204 = !{i64 16791652}
!1205 = !{i64 16791660}
!1206 = !{i64 16791662}
!1207 = !{i64 16791670}
!1208 = !{i64 16791672}
!1209 = !{i64 16791674}
!1210 = !{i64 16791679}
!1211 = !{i64 16791684}
!1212 = !{i64 16791699}
!1213 = !{i64 16791701}
!1214 = !{i64 16791707}
!1215 = !{i64 16791709}
!1216 = !{i64 16791722}
!1217 = !{i64 16791726}
!1218 = !{i64 16791735}
!1219 = !{i64 16791738}
!1220 = !{i64 16791743}
!1221 = !{i64 16791745}
!1222 = !{i64 16791751}
!1223 = !{i64 16791753}
!1224 = !{i64 16791698}
!1225 = !{i64 16791759}
!1226 = !{i64 16791765}
!1227 = !{i64 16791798}
!1228 = !{i64 16791852}
!1229 = !{i64 16791859}
!1230 = !{i64 16791888}
!1231 = !{i64 16791902}
!1232 = !{i64 16791907}
!1233 = !{i64 16791910}
!1234 = !{i64 16791913}
!1235 = !{i64 16791916}
!1236 = !{i64 16791923}
!1237 = !{i64 16791925}
!1238 = !{i64 16791928}
!1239 = !{i64 16791931}
!1240 = !{i64 16791936}
!1241 = !{i64 16791940}
!1242 = !{i64 16791942}
!1243 = !{i64 16791943}
!1244 = !{i64 16791944}
!1245 = !{i64 16791946}
!1246 = !{i64 16791948}
!1247 = !{i64 16791950}
!1248 = !{i64 16791955}
!1249 = !{i64 16791957}
!1250 = !{i64 16791959}
!1251 = !{i64 16791969}
!1252 = !{i64 16791974}
!1253 = !{i64 16791979}
!1254 = !{i64 16791983}
!1255 = !{i64 16791990}
!1256 = !{i64 16791995}
!1257 = !{i64 16791998}
!1258 = !{i64 16792005}
!1259 = !{i64 16792010}
!1260 = !{i64 16792013}
!1261 = !{i64 16792021}
!1262 = !{i64 16792023}
!1263 = !{i64 16792029}
!1264 = !{i64 16792040}
!1265 = !{i64 16792045}
!1266 = !{i64 16792050}
!1267 = !{i64 16792315}
!1268 = !{i64 16792335}
!1269 = !{i64 16792339}
!1270 = !{i64 16792344}
!1271 = !{i64 16792345}
!1272 = !{i64 16792353}
!1273 = !{i64 16792358}
!1274 = !{i64 16792361}
!1275 = !{i64 16792363}
!1276 = !{i64 16792367}
!1277 = !{i64 16792369}
!1278 = !{i64 16792370}
!1279 = !{i64 16792372}
!1280 = !{i64 16792386}
!1281 = !{i64 16792387}
!1282 = !{i64 16792389}
!1283 = !{i64 16792395}
!1284 = !{i64 16792402}
!1285 = !{i64 16792404}
!1286 = !{i64 16792409}
!1287 = !{i64 16792414}
!1288 = !{i64 16792421}
!1289 = !{i64 16792438}
!1290 = !{i64 16792443}
!1291 = !{i64 16792447}
!1292 = !{i64 16792451}
!1293 = !{i64 16792453}
!1294 = !{i64 16792458}
!1295 = !{i64 16792465}
!1296 = !{i64 16792468}
!1297 = !{i64 16792472}
!1298 = !{i64 16792476}
!1299 = !{i64 16792482}
!1300 = !{i64 16792483}
!1301 = !{i64 16792489}
!1302 = !{i64 16792493}
!1303 = !{i64 16792499}
!1304 = !{i64 16792527}
!1305 = !{i64 16792537}
!1306 = !{i64 16792540}
!1307 = !{i64 16792542}
!1308 = !{i64 16792548}
!1309 = !{i64 16792580}
!1310 = !{i64 16792554}
!1311 = !{i64 16792556}
!1312 = !{i64 16792558}
!1313 = !{i64 16792560}
!1314 = !{i64 16792562}
!1315 = !{i64 16792565}
!1316 = !{i64 16792570}
!1317 = !{i64 16792573}
!1318 = !{i64 16792578}
!1319 = !{i64 16792586}
!1320 = !{i64 16792596}
!1321 = !{i64 16792600}
!1322 = !{i64 16792603}
!1323 = !{i64 16792605}
!1324 = !{i64 16792610}
!1325 = !{i64 16792612}
!1326 = !{i64 16792617}
!1327 = !{i64 16792623}
!1328 = !{i64 16792631}
!1329 = !{i64 16792635}
!1330 = !{i64 16792831}
!1331 = !{i64 16792838}
!1332 = !{i64 16792843}
!1333 = !{i64 16792857}
!1334 = !{i64 16792859}
!1335 = !{i64 16792862}
!1336 = !{i64 16792864}
!1337 = !{i64 16792865}
!1338 = !{i64 16792877}
!1339 = !{i64 16792884}
!1340 = !{i64 16792886}
!1341 = !{i64 16792891}
!1342 = !{i64 16792896}
!1343 = !{i64 16792898}
!1344 = !{i64 16792903}
!1345 = !{i64 16792908}
!1346 = !{i64 16792910}
!1347 = !{i64 16792915}
!1348 = !{i64 16792922}
!1349 = !{i64 16792924}
!1350 = !{i64 16792945}
!1351 = !{i64 16792958}
!1352 = !{i64 16792959}
!1353 = !{i64 16792960}
!1354 = !{i64 16792962}
!1355 = !{i64 16792964}
!1356 = !{i64 16792973}
!1357 = !{i64 16792976}
!1358 = !{i64 16792985}
!1359 = !{i64 16792990}
!1360 = !{i64 16792991}
!1361 = !{i64 16792997}
!1362 = !{i64 16793006}
!1363 = !{i64 16793011}
!1364 = !{i64 16793020}
!1365 = !{i64 16793022}
!1366 = !{i64 16793024}
!1367 = !{i64 16793003}
!1368 = !{i64 16793028}
!1369 = !{i64 16793035}
!1370 = !{i64 16793049}
!1371 = !{i64 16793050}
!1372 = !{i64 16793099}
!1373 = !{i64 16793101}
!1374 = !{i64 16793130}
!1375 = !{i64 16793138}
!1376 = !{i64 16793141}
!1377 = !{i64 16793146}
!1378 = !{i64 16793166}
!1379 = !{i64 16793168}
!1380 = !{i64 16793169}
!1381 = !{i64 16793178}
!1382 = !{i64 16793181}
!1383 = !{i64 16793193}
!1384 = !{i64 16793197}
!1385 = !{i64 16793205}
!1386 = !{i64 16793209}
!1387 = !{i64 16793211}
!1388 = !{i64 16793219}
!1389 = !{i64 16793229}
!1390 = !{i64 16793231}
!1391 = !{i64 16793235}
!1392 = !{i64 16793237}
!1393 = !{i64 16793240}
!1394 = !{i64 16793241}
!1395 = !{i64 16793256}
!1396 = !{i64 16793259}
!1397 = !{i64 16793267}
!1398 = !{i64 16793269}
!1399 = !{i64 16793330}
!1400 = !{i64 16793346}
!1401 = !{i64 16793348}
!1402 = !{i64 16793350}
!1403 = !{i64 16793383}
!1404 = !{i64 16793393}
!1405 = !{i64 16793401}
!1406 = !{i64 16793411}
!1407 = !{i64 16793415}
!1408 = !{i64 16793422}
!1409 = !{i64 16793426}
!1410 = !{i64 16793427}
!1411 = !{i64 16793429}
!1412 = !{i64 16793432}
!1413 = !{i64 16793433}
!1414 = !{i64 16793435}
!1415 = !{i64 16793437}
!1416 = !{i64 16793458}
!1417 = !{i64 16793472}
!1418 = !{i64 16793476}
!1419 = !{i64 16793480}
!1420 = !{i64 16793483}
!1421 = !{i64 16793514}
!1422 = !{i64 16793517}
!1423 = !{i64 16793523}
!1424 = !{i64 16793525}
!1425 = !{i64 16793540}
!1426 = !{i64 16793543}
!1427 = !{i64 16793548}
!1428 = !{i64 16793564}
!1429 = !{i64 16793580}
!1430 = !{i64 16793582}
!1431 = !{i64 16793585}
!1432 = !{i64 16793592}
!1433 = !{i64 16793610}
!1434 = !{i64 16793614}
!1435 = !{i64 16793644}
!1436 = !{i64 16793662}
!1437 = !{i64 16793660}
!1438 = !{i64 16793680}
!1439 = !{i64 16793684}
!1440 = !{i64 16793686}
!1441 = !{i64 16793709}
!1442 = !{i64 16793832}
!1443 = !{i64 16793856}
!1444 = !{i64 16793861}
!1445 = !{i64 16793878}
!1446 = !{i64 16793883}
!1447 = !{i64 16793886}
!1448 = !{i64 16793893}
!1449 = !{i64 16793897}
!1450 = !{i64 16793908}
!1451 = !{i64 16793916}
!1452 = !{i64 16793921}
!1453 = !{i64 16793937}
!1454 = !{i64 16793942}
!1455 = !{i64 16793943}
!1456 = !{i64 16793955}
!1457 = !{i64 16793956}
!1458 = !{i64 16793961}
!1459 = !{i64 16793963}
!1460 = !{i64 16793964}
!1461 = !{i64 16793966}
!1462 = !{i64 16793968}
!1463 = !{i64 16793973}
!1464 = !{i64 16793974}
!1465 = !{i64 16793983}
!1466 = !{i64 16793991}
!1467 = !{i64 16793992}
!1468 = !{i64 16793994}
!1469 = !{i64 16794046}
!1470 = !{i64 16794061}
!1471 = !{i64 16794062}
!1472 = !{i64 16794072}
!1473 = !{i64 16794086}
!1474 = !{i64 16794090}
!1475 = !{i64 16794101}
!1476 = !{i64 16794110}
!1477 = !{i64 16794117}
!1478 = !{i64 16794130}
!1479 = !{i64 16794148}
!1480 = !{i64 16794151}
!1481 = !{i64 16794156}
!1482 = !{i64 16794165}
!1483 = !{i64 16794170}
!1484 = !{i64 16794176}
!1485 = !{i64 16794180}
!1486 = !{i64 16794182}
!1487 = !{i64 16794197}
!1488 = !{i64 16794206}
!1489 = !{i64 16794211}
!1490 = !{i64 16794219}
!1491 = !{i64 16794224}
!1492 = !{i64 16794225}
!1493 = !{i64 16794227}
!1494 = !{i64 16794229}
!1495 = !{i64 16794231}
!1496 = !{i64 16794329}
!1497 = !{i64 16794341}
!1498 = !{i64 16794344}
!1499 = !{i64 16794352}
!1500 = !{i64 16794354}
!1501 = !{i64 16794356}
!1502 = !{i64 16794362}
!1503 = !{i64 16794363}
!1504 = !{i64 16794367}
!1505 = !{i64 16794383}
!1506 = !{i64 16794384}
!1507 = !{i64 16794387}
!1508 = !{i64 16794390}
!1509 = !{i64 16794401}
!1510 = !{i64 16794402}
!1511 = !{i64 16794403}
!1512 = !{i64 16794404}
!1513 = !{i64 16794408}
!1514 = !{i64 16794412}
!1515 = !{i64 16794417}
!1516 = !{i64 16794429}
!1517 = !{i64 16794433}
!1518 = !{i64 16794443}
!1519 = !{i64 16794449}
!1520 = !{i64 16794458}
!1521 = !{i64 16794459}
!1522 = !{i64 16794462}
!1523 = !{i64 16794464}
!1524 = !{i64 16794466}
!1525 = !{i64 16794468}
!1526 = !{i64 16794481}
!1527 = !{i64 16794488}
!1528 = !{i64 16794499}
!1529 = !{i64 16794508}
!1530 = !{i64 16794509}
!1531 = !{i64 16794510}
!1532 = !{i64 16794501}
!1533 = !{i64 16794512}
!1534 = !{i64 16794520}
!1535 = !{i64 16794521}
!1536 = !{i64 16794522}
!1537 = !{i64 16794529}
!1538 = !{i64 16794556}
!1539 = !{i64 16794557}
!1540 = !{i64 16794562}
!1541 = !{i64 16794568}
!1542 = !{i64 16794574}
!1543 = !{i64 16794576}
!1544 = !{i64 16794583}
!1545 = !{i64 16794585}
!1546 = !{i64 16794590}
!1547 = !{i64 16794593}
!1548 = !{i64 16794595}
!1549 = !{i64 16794596}
!1550 = !{i64 16794613}
!1551 = !{i64 16794621}
!1552 = !{i64 16794624}
!1553 = !{i64 16794625}
!1554 = !{i64 16794629}
!1555 = !{i64 16794630}
!1556 = !{i64 16794660}
!1557 = !{i64 16794720}
!1558 = !{i64 16794722}
!1559 = !{i64 16794729}
!1560 = !{i64 16794737}
!1561 = !{i64 16794742}
!1562 = !{i64 16794748}
!1563 = !{i64 16794749}
!1564 = !{i64 16794725}
!1565 = !{i64 16794739}
!1566 = !{i64 16794751}
!1567 = !{i64 16794754}
!1568 = !{i64 16794760}
!1569 = !{i64 16794763}
!1570 = !{i64 16794767}
!1571 = !{i64 16794774}
!1572 = !{i64 16794777}
!1573 = !{i64 16794780}
!1574 = !{i64 16794781}
!1575 = !{i64 16794783}
!1576 = !{i64 16794793}
!1577 = !{i64 16794796}
!1578 = !{i64 16794797}
!1579 = !{i64 16794801}
!1580 = !{i64 16794732}
!1581 = !{i64 16794813}
!1582 = !{i64 16794814}
!1583 = !{i64 16794818}
!1584 = !{i64 16794769}
!1585 = !{i64 16794855}
!1586 = !{i64 16794866}
!1587 = !{i64 16794867}
!1588 = !{i64 16794869}
!1589 = !{i64 16794947}
!1590 = !{i64 16794954}
!1591 = !{i64 16794955}
!1592 = !{i64 16794956}
!1593 = !{i64 16794957}
!1594 = !{i64 16794961}
!1595 = !{i64 16794963}
!1596 = !{i64 16794964}
!1597 = !{i64 16794966}
!1598 = !{i64 16794970}
!1599 = !{i64 16794976}
!1600 = !{i64 16794983}
!1601 = !{i64 16794989}
!1602 = !{i64 16794990}
!1603 = !{i64 16794992}
!1604 = !{i64 16794994}
!1605 = !{i64 16794969}
!1606 = !{i64 16795005}
!1607 = !{i64 16795007}
!1608 = !{i64 16795009}
!1609 = !{i64 16795077}
!1610 = !{i64 16795078}
!1611 = !{i64 16795081}
!1612 = !{i64 16795086}
!1613 = !{i64 16795091}
!1614 = !{i64 16795093}
!1615 = !{i64 16795097}
!1616 = !{i64 16795138}
!1617 = !{i64 16795136}
!1618 = !{i64 16795174}
!1619 = !{i64 16795175}
!1620 = !{i64 16795143}
!1621 = !{i64 16795145}
!1622 = !{i64 16795147}
!1623 = !{i64 16795153}
!1624 = !{i64 16795156}
!1625 = !{i64 16795160}
!1626 = !{i64 16795171}
!1627 = !{i64 16795178}
!1628 = !{i64 16795181}
!1629 = !{i64 16795183}
!1630 = !{i64 16795189}
!1631 = !{i64 16795191}
!1632 = !{i64 16795194}
!1633 = !{i64 16795210}
!1634 = !{i64 16795222}
!1635 = !{i64 16795227}
!1636 = !{i64 16795229}
!1637 = !{i64 16795238}
!1638 = !{i64 16795241}
!1639 = !{i64 16795242}
!1640 = !{i64 16795243}
!1641 = !{i64 16795638}
!1642 = !{i64 16795644}
!1643 = !{i64 16795697}
!1644 = !{i64 16795705}
!1645 = !{i64 16795710}
!1646 = !{i64 16795723}
!1647 = !{i64 16795728}
!1648 = !{i64 16795736}
!1649 = !{i64 16795738}
!1650 = !{i64 16795740}
!1651 = !{i64 16795744}
!1652 = !{i64 16795743}
!1653 = !{i64 16795747}
!1654 = !{i64 16795752}
!1655 = !{i64 16795754}
!1656 = !{i64 16795756}
!1657 = !{i64 16795767}
!1658 = !{i64 16795769}
!1659 = !{i64 16795773}
!1660 = !{i64 16795776}
!1661 = !{i64 16795791}
!1662 = !{i64 16795798}
!1663 = !{i64 16795799}
!1664 = !{i64 16795801}
!1665 = !{i64 16795808}
!1666 = !{i64 16795809}
!1667 = !{i64 16795830}
!1668 = !{i64 16795832}
!1669 = !{i64 16795848}
!1670 = !{i64 16795853}
!1671 = !{i64 16795856}
!1672 = !{i64 16795859}
!1673 = !{i64 16795870}
!1674 = !{i64 16795871}
!1675 = !{i64 16795872}
!1676 = !{i64 16795875}
!1677 = !{i64 16795877}
!1678 = !{i64 16795883}
!1679 = !{i64 16795884}
!1680 = !{i64 16795900}
!1681 = !{i64 16795901}
!1682 = !{i64 16795902}
!1683 = !{i64 16795903}
!1684 = !{i64 16795904}
!1685 = !{i64 16795911}
!1686 = !{i64 16795913}
!1687 = !{i64 16795915}
!1688 = !{i64 16795918}
!1689 = !{i64 16795921}
!1690 = !{i64 16795922}
!1691 = !{i64 16795925}
!1692 = !{i64 16795926}
!1693 = !{i64 16795929}
!1694 = !{i64 16795930}
!1695 = !{i64 16795933}
!1696 = !{i64 16795941}
!1697 = !{i64 16795942}
!1698 = !{i64 16795943}
!1699 = !{i64 16795944}
!1700 = !{i64 16795948}
!1701 = !{i64 16795949}
!1702 = !{i64 16795950}
!1703 = !{i64 16795953}
!1704 = !{i64 16795960}
!1705 = !{i64 16795961}
!1706 = !{i64 16795964}
!1707 = !{i64 16795969}
!1708 = !{i64 16795838}
!1709 = !{i64 16795845}
!1710 = !{i64 16795843}
!1711 = !{i64 16795980}
!1712 = !{i64 16795986}
!1713 = !{i64 16795992}
!1714 = !{i64 16795994}
!1715 = !{i64 16795997}
!1716 = !{i64 16796008}
!1717 = !{i64 16796009}
!1718 = !{i64 16796006}
!1719 = !{i64 16796011}
!1720 = !{i64 16796016}
!1721 = !{i64 16796021}
!1722 = !{i64 16796022}
!1723 = !{i64 16796004}
!1724 = !{i64 16796078}
!1725 = !{i64 16796081}
!1726 = !{i64 16796090}
!1727 = !{i64 16796098}
!1728 = !{i64 16795970}
!1729 = !{i64 16795975}
!1730 = !{i64 16796107}
!1731 = !{i64 16796116}
!1732 = !{i64 16796123}
!1733 = !{i64 16796134}
!1734 = !{i64 16796136}
!1735 = !{i64 16796143}
!1736 = !{i64 16796150}
!1737 = !{i64 16796172}
!1738 = !{i64 16796178}
!1739 = !{i64 16796190}
!1740 = !{i64 16796192}
!1741 = !{i64 16796197}
!1742 = !{i64 16796199}
!1743 = !{i64 16796204}
!1744 = !{i64 16796211}
!1745 = !{i64 16796218}
!1746 = !{i64 16796220}
!1747 = !{i64 16796222}
!1748 = !{i64 16796224}
!1749 = !{i64 16796226}
!1750 = !{i64 16796219}
!1751 = !{i64 16796231}
!1752 = !{i64 16796234}
!1753 = !{i64 16796246}
!1754 = !{i64 16796248}
!1755 = !{i64 16796254}
!1756 = !{i64 16796256}
!1757 = !{i64 16796285}
!1758 = !{i64 16796300}
!1759 = !{i64 16796301}
!1760 = !{i64 16796313}
!1761 = !{i64 16796302}
!1762 = !{i64 16796315}
!1763 = !{i64 16796298}
!1764 = !{i64 16796422}
!1765 = !{i64 16796423}
!1766 = !{i64 16796425}
!1767 = !{i64 16796443}
!1768 = !{i64 16796456}
!1769 = !{i64 16796488}
!1770 = !{i64 16796490}
!1771 = !{i64 16796491}
!1772 = !{i64 16796500}
!1773 = !{i64 16796503}
!1774 = !{i64 16796520}
!1775 = !{i64 16796511}
!1776 = !{i64 16796514}
!1777 = !{i64 16796529}
!1778 = !{i64 16796544}
!1779 = !{i64 16796548}
!1780 = !{i64 16796553}
!1781 = !{i64 16796555}
!1782 = !{i64 16796558}
!1783 = !{i64 16796562}
!1784 = !{i64 16796567}
!1785 = !{i64 16796572}
!1786 = !{i64 16796578}
!1787 = !{i64 16796584}
!1788 = !{i64 16797297}
!1789 = !{i64 16797302}
!1790 = !{i64 16796517}
!1791 = !{i64 16796646}
!1792 = !{i64 16796654}
!1793 = !{i64 16796666}
!1794 = !{i64 16796668}
!1795 = !{i64 16796674}
!1796 = !{i64 16796676}
!1797 = !{i64 16796679}
!1798 = !{i64 16796684}
!1799 = !{i64 16797304}
!1800 = !{i64 16797310}
!1801 = !{i64 16797317}
!1802 = !{i64 16797319}
!1803 = !{i64 16797324}
!1804 = !{i64 16797327}
!1805 = !{i64 16797328}
!1806 = !{i64 16797330}
!1807 = !{i64 16797331}
!1808 = !{i64 16797340}
!1809 = !{i64 16797345}
!1810 = !{i64 16797360}
!1811 = !{i64 16797363}
!1812 = !{i64 16797368}
!1813 = !{i64 16797374}
!1814 = !{i64 16797378}
!1815 = !{i64 16797383}
!1816 = !{i64 16797386}
!1817 = !{i64 16797394}
!1818 = !{i64 16797396}
!1819 = !{i64 16797403}
!1820 = !{i64 16797405}
!1821 = !{i64 16797407}
!1822 = !{i64 16797412}
!1823 = !{i64 16797421}
!1824 = !{i64 16797429}
!1825 = !{i64 16797433}
!1826 = !{i64 16797438}
!1827 = !{i64 16797444}
!1828 = !{i64 16797446}
!1829 = !{i64 16797449}
!1830 = !{i64 16797451}
!1831 = !{i64 16797464}
!1832 = !{i64 16797466}
!1833 = !{i64 16797467}
!1834 = !{i64 16797477}
!1835 = !{i64 16797480}
!1836 = !{i64 16797481}
!1837 = !{i64 16797487}
!1838 = !{i64 16797490}
!1839 = !{i64 16797500}
!1840 = !{i64 16797503}
!1841 = !{i64 16797506}
!1842 = !{i64 16797509}
!1843 = !{i64 16797515}
!1844 = !{i64 16797518}
!1845 = !{i64 16797527}
!1846 = !{i64 16797530}
!1847 = !{i64 16797534}
!1848 = !{i64 16797538}
!1849 = !{i64 16797550}
!1850 = !{i64 16797551}
!1851 = !{i64 16797556}
!1852 = !{i64 16797559}
!1853 = !{i64 16797651}
!1854 = !{i64 16797656}
!1855 = !{i64 16797659}
!1856 = !{i64 16797664}
!1857 = !{i64 16797667}
!1858 = !{i64 16797677}
!1859 = !{i64 16797685}
!1860 = !{i64 16797688}
!1861 = !{i64 16797691}
!1862 = !{i64 16797694}
!1863 = !{i64 16797697}
!1864 = !{i64 16797700}
!1865 = !{i64 16797703}
!1866 = !{i64 16797711}
!1867 = !{i64 16797714}
!1868 = !{i64 16797721}
!1869 = !{i64 16797728}
!1870 = !{i64 16797729}
!1871 = !{i64 16797736}
!1872 = !{i64 16797741}
!1873 = !{i64 16797742}
!1874 = !{i64 16797743}
!1875 = !{i64 16797748}
!1876 = !{i64 16797757}
!1877 = !{i64 16797760}
!1878 = !{i64 16797768}
!1879 = !{i64 16797772}
!1880 = !{i64 16797775}
!1881 = !{i64 16797776}
!1882 = !{i64 16797784}
!1883 = !{i64 16797790}
!1884 = !{i64 16797791}
!1885 = !{i64 16797792}
!1886 = !{i64 16797797}
!1887 = !{i64 16797807}
!1888 = !{i64 16797811}
!1889 = !{i64 16797816}
!1890 = !{i64 16797821}
!1891 = !{i64 16797824}
!1892 = !{i64 16797826}
!1893 = !{i64 16797832}
!1894 = !{i64 16797837}
!1895 = !{i64 16797843}
!1896 = !{i64 16797848}
!1897 = !{i64 16797850}
!1898 = !{i64 16797854}
!1899 = !{i64 16797857}
!1900 = !{i64 16797927}
!1901 = !{i64 16797934}
!1902 = !{i64 16797937}
!1903 = !{i64 16797945}
!1904 = !{i64 16798021}
!1905 = !{i64 16798024}
!1906 = !{i64 16798031}
!1907 = !{i64 16798034}
!1908 = !{i64 16798043}
!1909 = !{i64 16798048}
!1910 = !{i64 16798050}
!1911 = !{i64 16798052}
!1912 = !{i64 16798062}
!1913 = !{i64 16798059}
!1914 = !{i64 16798069}
!1915 = !{i64 16798073}
!1916 = !{i64 16798090}
!1917 = !{i64 16798116}
!1918 = !{i64 16798118}
!1919 = !{i64 16798120}
!1920 = !{i64 16798130}
!1921 = !{i64 16798133}
!1922 = !{i64 16798135}
!1923 = !{i64 16798122}
!1924 = !{i64 16798137}
!1925 = !{i64 16798139}
!1926 = !{i64 16798145}
!1927 = !{i64 16798147}
!1928 = !{i64 16798148}
!1929 = !{i64 16798154}
!1930 = !{i64 16798163}
!1931 = !{i64 16798183}
!1932 = !{i64 16798186}
!1933 = !{i64 16798190}
!1934 = !{i64 16798284}
!1935 = !{i64 16798281}
!1936 = !{i64 16798290}
!1937 = !{i64 16798292}
!1938 = !{i64 16798301}
!1939 = !{i64 16798303}
!1940 = !{i64 16798305}
!1941 = !{i64 16798311}
!1942 = !{i64 16798314}
!1943 = !{i64 16798316}
!1944 = !{i64 16798353}
!1945 = !{i64 16798385}
!1946 = !{i64 16798386}
!1947 = !{i64 16798391}
!1948 = !{i64 16798478}
!1949 = !{i64 16798512}
!1950 = !{i64 16798558}
!1951 = !{i64 16798592}
!1952 = !{i64 16798594}
!1953 = !{i64 16798600}
!1954 = !{i64 16798605}
!1955 = !{i64 16798611}
!1956 = !{i64 16798613}
!1957 = !{i64 16798615}
!1958 = !{i64 16798621}
!1959 = !{i64 16798634}
!1960 = !{i64 16798645}
!1961 = !{i64 16798651}
!1962 = !{i64 16798654}
!1963 = !{i64 16798657}
!1964 = !{i64 16798661}
!1965 = !{i64 16798664}
!1966 = !{i64 16798669}
!1967 = !{i64 16798675}
!1968 = !{i64 16798678}
!1969 = !{i64 16798681}
!1970 = !{i64 16798684}
!1971 = !{i64 16798689}
!1972 = !{i64 16798691}
!1973 = !{i64 16798694}
!1974 = !{i64 16798697}
!1975 = !{i64 16798703}
!1976 = !{i64 16798705}
!1977 = !{i64 16798717}
!1978 = !{i64 16798721}
!1979 = !{i64 16798724}
!1980 = !{i64 16798726}
!1981 = !{i64 16798728}
!1982 = !{i64 16798734}
!1983 = !{i64 16798735}
!1984 = !{i64 16798741}
!1985 = !{i64 16798744}
!1986 = !{i64 16798751}
!1987 = !{i64 16798759}
!1988 = !{i64 16798771}
!1989 = !{i64 16798778}
!1990 = !{i64 16798780}
!1991 = !{i64 16798782}
!1992 = !{i64 16798795}
!1993 = !{i64 16798809}
!1994 = !{i64 16798819}
!1995 = !{i64 16798824}
!1996 = !{i64 16798828}
!1997 = !{i64 16798829}
!1998 = !{i64 16798836}
!1999 = !{i64 16798840}
!2000 = !{i64 16798842}
!2001 = !{i64 16798845}
!2002 = !{i64 16798849}
!2003 = !{i64 16798855}
!2004 = !{i64 16798860}
!2005 = !{i64 16798872}
!2006 = !{i64 16798882}
!2007 = !{i64 16799017}
!2008 = !{i64 16799037}
!2009 = !{i64 16799046}
!2010 = !{i64 16799085}
!2011 = !{i64 16799090}
!2012 = !{i64 16799143}
!2013 = !{i64 16799149}
!2014 = !{i64 16799151}
!2015 = !{i64 16799153}
!2016 = !{i64 16799210}
!2017 = !{i64 16799212}
!2018 = !{i64 16799219}
!2019 = !{i64 16799220}
!2020 = !{i64 16799222}
!2021 = !{i64 16799229}
!2022 = !{i64 16799232}
!2023 = !{i64 16799240}
!2024 = !{i64 16799241}
!2025 = !{i64 16799244}
!2026 = !{i64 16799253}
!2027 = !{i64 16799256}
!2028 = !{i64 16799264}
!2029 = !{i64 16799269}
!2030 = !{i64 16799275}
!2031 = !{i64 16799280}
!2032 = !{i64 16799300}
!2033 = !{i64 16799302}
!2034 = !{i64 16799304}
!2035 = !{i64 16799310}
!2036 = !{i64 16799315}
!2037 = !{i64 16799317}
!2038 = !{i64 16799322}
!2039 = !{i64 16799323}
!2040 = !{i64 16799342}
!2041 = !{i64 16799347}
!2042 = !{i64 16799349}
!2043 = !{i64 16799354}
!2044 = !{i64 16799363}
!2045 = !{i64 16799360}
!2046 = !{i64 16799365}
!2047 = !{i64 16799376}
!2048 = !{i64 16799378}
!2049 = !{i64 16799384}
!2050 = !{i64 16799395}
!2051 = !{i64 16799397}
!2052 = !{i64 16799402}
!2053 = !{i64 16799409}
!2054 = !{i64 16799412}
!2055 = !{i64 16799424}
!2056 = !{i64 16799425}
!2057 = !{i64 16800219}
!2058 = !{i64 16800221}
!2059 = !{i64 16799435}
!2060 = !{i64 16799436}
!2061 = !{i64 16799438}
!2062 = !{i64 16800157}
!2063 = !{i64 16800158}
!2064 = !{i64 16800159}
!2065 = !{i64 16800242}
!2066 = !{i64 16800161}
!2067 = !{i64 16800164}
!2068 = !{i64 16800165}
!2069 = !{i64 16800170}
!2070 = !{i64 16800195}
!2071 = !{i64 16800223}
!2072 = !{i64 16800231}
!2073 = !{i64 16800232}
!2074 = !{i64 16800236}
!2075 = !{i64 16800238}
!2076 = !{i64 16800240}
!2077 = !{i64 16800244}
!2078 = !{i64 16800258}
!2079 = !{i64 16800263}
!2080 = !{i64 16800269}
!2081 = !{i64 16800271}
!2082 = !{i64 16800278}
!2083 = !{i64 16800280}
!2084 = !{i64 16800286}
!2085 = !{i64 16800287}
!2086 = !{i64 16800293}
!2087 = !{i64 16800297}
!2088 = !{i64 16800373}
!2089 = !{i64 16800375}
!2090 = !{i64 16800378}
!2091 = !{i64 16800383}
!2092 = !{i64 16800398}
!2093 = !{i64 16800421}
!2094 = !{i64 16800433}
!2095 = !{i64 16800438}
!2096 = !{i64 16800440}
!2097 = !{i64 16800446}
!2098 = !{i64 16800448}
!2099 = !{i64 16800449}
!2100 = !{i64 16800455}
!2101 = !{i64 16800456}
!2102 = !{i64 16800400}
!2103 = !{i64 16800415}
!2104 = !{i64 16800416}
!2105 = !{i64 16800472}
!2106 = !{i64 16800473}
!2107 = !{i64 16800478}
!2108 = !{i64 16800486}
!2109 = !{i64 16800494}
!2110 = !{i64 16800497}
!2111 = !{i64 16800498}
!2112 = !{i64 16800504}
!2113 = !{i64 16800511}
!2114 = !{i64 16800519}
!2115 = !{i64 16800525}
!2116 = !{i64 16800528}
!2117 = !{i64 16800534}
!2118 = !{i64 16800540}
!2119 = !{i64 16800544}
!2120 = !{i64 16800552}
!2121 = !{i64 16801865}
!2122 = !{i64 16801872}
!2123 = !{i64 16801881}
!2124 = !{i64 16801883}
!2125 = !{i64 16801890}
!2126 = !{i64 16801923}
!2127 = !{i64 16801925}
!2128 = !{i64 16801936}
!2129 = !{i64 16801938}
!2130 = !{i64 16801944}
!2131 = !{i64 16801952}
!2132 = !{i64 16801953}
!2133 = !{i64 16801955}
!2134 = !{i64 16801959}
!2135 = !{i64 16801964}
!2136 = !{i64 16801984}
!2137 = !{i64 16802071}
!2138 = !{i64 16802074}
!2139 = !{i64 16802076}
!2140 = !{i64 16802077}
!2141 = !{i64 16802084}
!2142 = !{i64 16802091}
!2143 = !{i64 16802093}
!2144 = !{i64 16802101}
!2145 = !{i64 16802111}
!2146 = !{i64 16802114}
!2147 = !{i64 16802116}
!2148 = !{i64 16802127}
!2149 = !{i64 16802144}
!2150 = !{i64 16802150}
!2151 = !{i64 16802155}
!2152 = !{i64 16802157}
!2153 = !{i64 16802162}
!2154 = !{i64 16802167}
!2155 = !{i64 16802170}
!2156 = !{i64 16802177}
!2157 = !{i64 16802184}
!2158 = !{i64 16802191}
!2159 = !{i64 16802207}
!2160 = !{i64 16802209}
!2161 = !{i64 16802212}
!2162 = !{i64 16802218}
!2163 = !{i64 16802221}
!2164 = !{i64 16802227}
!2165 = !{i64 16802232}
!2166 = !{i64 16802236}
!2167 = !{i64 16802242}
!2168 = !{i64 16802244}
!2169 = !{i64 16802247}
!2170 = !{i64 16802260}
!2171 = !{i64 16802265}
!2172 = !{i64 16802267}
!2173 = !{i64 16802275}
!2174 = !{i64 16802277}
!2175 = !{i64 16802280}
!2176 = !{i64 16802281}
!2177 = !{i64 16802283}
!2178 = !{i64 16802285}
!2179 = !{i64 16802287}
!2180 = !{i64 16802295}
!2181 = !{i64 16802296}
!2182 = !{i64 16802298}
!2183 = !{i64 16802302}
!2184 = !{i64 16802303}
!2185 = !{i64 16802306}
!2186 = !{i64 16802307}
!2187 = !{i64 16802309}
!2188 = !{i64 16802315}
!2189 = !{i64 16802334}
!2190 = !{i64 16802337}
!2191 = !{i64 16802344}
!2192 = !{i64 16802339}
!2193 = !{i64 16802348}
!2194 = !{i64 16802350}
!2195 = !{i64 16802356}
!2196 = !{i64 16802366}
!2197 = !{i64 16802367}
!2198 = !{i64 16802380}
!2199 = !{i64 16802386}
!2200 = !{i64 16802388}
!2201 = !{i64 16802394}
!2202 = !{i64 16802395}
!2203 = !{i64 16802399}
!2204 = !{i64 16802404}
!2205 = !{i64 16802462}
!2206 = !{i64 16802464}
!2207 = !{i64 16802535}
!2208 = !{i64 16802540}
!2209 = !{i64 16802542}
!2210 = !{i64 16802549}
!2211 = !{i64 16802553}
!2212 = !{i64 16802554}
!2213 = !{i64 16802581}
!2214 = !{i64 16802582}
!2215 = !{i64 16802587}
!2216 = !{i64 16802591}
!2217 = !{i64 16802598}
!2218 = !{i64 16802604}
!2219 = !{i64 16802610}
!2220 = !{i64 16802613}
!2221 = !{i64 16802620}
!2222 = !{i64 16802626}
!2223 = !{i64 16802630}
!2224 = !{i64 16802639}
!2225 = !{i64 16802647}
!2226 = !{i64 16802649}
!2227 = !{i64 16802651}
!2228 = !{i64 16802653}
!2229 = !{i64 16802654}
!2230 = !{i64 16802660}
!2231 = !{i64 16802663}
!2232 = !{i64 16802667}
!2233 = !{i64 16802669}
!2234 = !{i64 16802677}
!2235 = !{i64 16802679}
!2236 = !{i64 16802681}
!2237 = !{i64 16802687}
!2238 = !{i64 16802666}
!2239 = !{i64 16802689}
!2240 = !{i64 16802692}
!2241 = !{i64 16802695}
!2242 = !{i64 16802699}
!2243 = !{i64 16802702}
!2244 = !{i64 16802708}
!2245 = !{i64 16802761}
!2246 = !{i64 16802763}
!2247 = !{i64 16802765}
!2248 = !{i64 16802767}
!2249 = !{i64 16802769}
!2250 = !{i64 16802771}
!2251 = !{i64 16802775}
!2252 = !{i64 16802782}
!2253 = !{i64 16802784}
!2254 = !{i64 16802790}
!2255 = !{i64 16802793}
!2256 = !{i64 16802797}
!2257 = !{i64 16802801}
!2258 = !{i64 16802805}
!2259 = !{i64 16802811}
!2260 = !{i64 16802816}
!2261 = !{i64 16802819}
!2262 = !{i64 16802829}
!2263 = !{i64 16802834}
!2264 = !{i64 16802852}
!2265 = !{i64 16802854}
!2266 = !{i64 16802856}
!2267 = !{i64 16802858}
!2268 = !{i64 16802860}
!2269 = !{i64 16802867}
!2270 = !{i64 16802870}
!2271 = !{i64 16802876}
!2272 = !{i64 16802882}
!2273 = !{i64 16802884}
!2274 = !{i64 16802886}
!2275 = !{i64 16802894}
!2276 = !{i64 16802936}
!2277 = !{i64 16802977}
!2278 = !{i64 16802988}
!2279 = !{i64 16802996}
!2280 = !{i64 16803003}
!2281 = !{i64 16803006}
!2282 = !{i64 16803017}
!2283 = !{i64 16802985}
!2284 = !{i64 16803029}
!2285 = !{i64 16803031}
!2286 = !{i64 16803036}
!2287 = !{i64 16803054}
!2288 = !{i64 16803060}
!2289 = !{i64 16803062}
!2290 = !{i64 16803064}
!2291 = !{i64 16803070}
!2292 = !{i64 16803073}
!2293 = !{i64 16803078}
!2294 = !{i64 16803105}
!2295 = !{i64 16803111}
!2296 = !{i64 16803128}
!2297 = !{i64 16803130}
!2298 = !{i64 16803137}
!2299 = !{i64 16803173}
!2300 = !{i64 16803200}
!2301 = !{i64 16803206}
!2302 = !{i64 16803208}
!2303 = !{i64 16803209}
!2304 = !{i64 16803223}
!2305 = !{i64 16803313}
!2306 = !{i64 16803299}
!2307 = !{i64 16803323}
!2308 = !{i64 16803330}
!2309 = !{i64 16803335}
!2310 = !{i64 16803340}
!2311 = !{i64 16803341}
!2312 = !{i64 16803363}
!2313 = !{i64 16803366}
!2314 = !{i64 16803385}
!2315 = !{i64 16803391}
!2316 = !{i64 16803394}
!2317 = !{i64 16803396}
!2318 = !{i64 16803404}
!2319 = !{i64 16803406}
!2320 = !{i64 16803408}
!2321 = !{i64 16803411}
!2322 = !{i64 16803415}
!2323 = !{i64 16803417}
!2324 = !{i64 16803418}
!2325 = !{i64 16803424}
!2326 = !{i64 16803430}
!2327 = !{i64 16803435}
!2328 = !{i64 16803437}
!2329 = !{i64 16803438}
!2330 = !{i64 16803444}
!2331 = !{i64 16803450}
!2332 = !{i64 16803451}
!2333 = !{i64 16803453}
!2334 = !{i64 16803455}
!2335 = !{i64 16803462}
!2336 = !{i64 16803473}
!2337 = !{i64 16803475}
!2338 = !{i64 16803478}
!2339 = !{i64 16803487}
!2340 = !{i64 16803467}
!2341 = !{i64 16803492}
!2342 = !{i64 16803501}
!2343 = !{i64 16803510}
!2344 = !{i64 16803516}
!2345 = !{i64 16803543}
!2346 = !{i64 16803545}
!2347 = !{i64 16803547}
!2348 = !{i64 16803550}
!2349 = !{i64 16803557}
!2350 = !{i64 16803560}
!2351 = !{i64 16803563}
!2352 = !{i64 16803565}
!2353 = !{i64 16803569}
!2354 = !{i64 16803583}
!2355 = !{i64 16803591}
!2356 = !{i64 16803731}
!2357 = !{i64 16803733}
!2358 = !{i64 16803737}
!2359 = !{i64 16803739}
!2360 = !{i64 16803741}
!2361 = !{i64 16803745}
!2362 = !{i64 16803752}
!2363 = !{i64 16803757}
!2364 = !{i64 16803758}
!2365 = !{i64 16803771}
!2366 = !{i64 16803773}
!2367 = !{i64 16803774}
!2368 = !{i64 16803781}
!2369 = !{i64 16803783}
!2370 = !{i64 16803786}
!2371 = !{i64 16803792}
!2372 = !{i64 16803799}
!2373 = !{i64 16803813}
!2374 = !{i64 16803815}
!2375 = !{i64 16803821}
!2376 = !{i64 16803827}
!2377 = !{i64 16803833}
!2378 = !{i64 16803838}
!2379 = !{i64 16803843}
!2380 = !{i64 16803850}
!2381 = !{i64 16803861}
!2382 = !{i64 16803869}
!2383 = !{i64 16803875}
!2384 = !{i64 16803877}
!2385 = !{i64 16803879}
!2386 = !{i64 16803892}
!2387 = !{i64 16803899}
!2388 = !{i64 16803901}
!2389 = !{i64 16803926}
!2390 = !{i64 16803927}
!2391 = !{i64 16803930}
!2392 = !{i64 16803937}
!2393 = !{i64 16803940}
!2394 = !{i64 16803963}
!2395 = !{i64 16803982}
!2396 = !{i64 16803984}
!2397 = !{i64 16803991}
!2398 = !{i64 16803995}
!2399 = !{i64 16804100}
!2400 = !{i64 16804105}
!2401 = !{i64 16804443}
!2402 = !{i64 16804449}
!2403 = !{i64 16804467}
!2404 = !{i64 16804473}
!2405 = !{i64 16804479}
!2406 = !{i64 16804487}
!2407 = !{i64 16804491}
!2408 = !{i64 16804493}
!2409 = !{i64 16804496}
!2410 = !{i64 16804500}
!2411 = !{i64 16804521}
!2412 = !{i64 16804646}
!2413 = !{i64 16804648}
!2414 = !{i64 16804653}
!2415 = !{i64 16804655}
!2416 = !{i64 16804658}
!2417 = !{i64 16804660}
!2418 = !{i64 16804664}
!2419 = !{i64 16804672}
!2420 = !{i64 16804679}
!2421 = !{i64 16804676}
!2422 = !{i64 16804683}
!2423 = !{i64 16804686}
!2424 = !{i64 16804688}
!2425 = !{i64 16804693}
!2426 = !{i64 16804696}
!2427 = !{i64 16804699}
!2428 = !{i64 16804704}
!2429 = !{i64 16804715}
!2430 = !{i64 16804729}
!2431 = !{i64 16804731}
!2432 = !{i64 16804742}
!2433 = !{i64 16804749}
!2434 = !{i64 16804752}
!2435 = !{i64 16804769}
!2436 = !{i64 16804778}
!2437 = !{i64 16804781}
!2438 = !{i64 16804790}
!2439 = !{i64 16804798}
!2440 = !{i64 16804812}
!2441 = !{i64 16804827}
!2442 = !{i64 16804836}
!2443 = !{i64 16804842}
!2444 = !{i64 16804848}
!2445 = !{i64 16804856}
!2446 = !{i64 16804869}
!2447 = !{i64 16804873}
!2448 = !{i64 16804875}
!2449 = !{i64 16804881}
!2450 = !{i64 16804887}
!2451 = !{i64 16804889}
!2452 = !{i64 16804891}
!2453 = !{i64 16804861}
!2454 = !{i64 16804893}
!2455 = !{i64 16804899}
!2456 = !{i64 16804905}
!2457 = !{i64 16804909}
!2458 = !{i64 16804911}
!2459 = !{i64 16804920}
!2460 = !{i64 16804922}
!2461 = !{i64 16804924}
!2462 = !{i64 16804932}
!2463 = !{i64 16804976}
!2464 = !{i64 16804978}
!2465 = !{i64 16804984}
!2466 = !{i64 16804987}
!2467 = !{i64 16805015}
!2468 = !{i64 16805017}
!2469 = !{i64 16805019}
!2470 = !{i64 16805026}
!2471 = !{i64 16805032}
!2472 = !{i64 16805037}
!2473 = !{i64 16805049}
!2474 = !{i64 16805107}
!2475 = !{i64 16805111}
!2476 = !{i64 16805124}
!2477 = !{i64 16805132}
!2478 = !{i64 16805138}
!2479 = !{i64 16805140}
!2480 = !{i64 16805145}
!2481 = !{i64 16805147}
!2482 = !{i64 16805157}
!2483 = !{i64 16805163}
!2484 = !{i64 16805166}
!2485 = !{i64 16805169}
!2486 = !{i64 16805170}
!2487 = !{i64 16805173}
!2488 = !{i64 16805176}
!2489 = !{i64 16805183}
!2490 = !{i64 16805191}
!2491 = !{i64 16805189}
!2492 = !{i64 16805193}
!2493 = !{i64 16805194}
!2494 = !{i64 16805200}
!2495 = !{i64 16805202}
!2496 = !{i64 16805204}
!2497 = !{i64 16805209}
!2498 = !{i64 16805213}
!2499 = !{i64 16805215}
!2500 = !{i64 16805220}
!2501 = !{i64 16805221}
!2502 = !{i64 16805225}
!2503 = !{i64 16805229}
!2504 = !{i64 16805233}
!2505 = !{i64 16805241}
!2506 = !{i64 16805247}
!2507 = !{i64 16805345}
!2508 = !{i64 16805357}
!2509 = !{i64 16805373}
!2510 = !{i64 16805377}
!2511 = !{i64 16805379}
!2512 = !{i64 16805393}
!2513 = !{i64 16805402}
!2514 = !{i64 16805407}
!2515 = !{i64 16805412}
!2516 = !{i64 16805421}
!2517 = !{i64 16805423}
!2518 = !{i64 16805425}
!2519 = !{i64 16805433}
!2520 = !{i64 16805418}
!2521 = !{i64 16805441}
!2522 = !{i64 16805445}
!2523 = !{i64 16805462}
!2524 = !{i64 16805465}
!2525 = !{i64 16805469}
!2526 = !{i64 16805480}
!2527 = !{i64 16805489}
!2528 = !{i64 16805490}
!2529 = !{i64 16805494}
!2530 = !{i64 16805507}
!2531 = !{i64 16805512}
!2532 = !{i64 16805514}
!2533 = !{i64 16805519}
!2534 = !{i64 16805529}
!2535 = !{i64 16805533}
!2536 = !{i64 16805546}
!2537 = !{i64 16805548}
!2538 = !{i64 16805552}
!2539 = !{i64 16805555}
!2540 = !{i64 16805556}
!2541 = !{i64 16805563}
!2542 = !{i64 16805566}
!2543 = !{i64 16805570}
!2544 = !{i64 16805572}
!2545 = !{i64 16805576}
!2546 = !{i64 16805667}
!2547 = !{i64 16805679}
!2548 = !{i64 16805686}
!2549 = !{i64 16805695}
!2550 = !{i64 16805701}
!2551 = !{i64 16805719}
!2552 = !{i64 16805726}
!2553 = !{i64 16805729}
!2554 = !{i64 16805733}
!2555 = !{i64 16805738}
!2556 = !{i64 16805743}
!2557 = !{i64 16805752}
!2558 = !{i64 16805759}
!2559 = !{i64 16805768}
!2560 = !{i64 16805775}
!2561 = !{i64 16805778}
!2562 = !{i64 16805783}
!2563 = !{i64 16805786}
!2564 = !{i64 16805788}
!2565 = !{i64 16805798}
!2566 = !{i64 16805804}
!2567 = !{i64 16805812}
!2568 = !{i64 16805814}
!2569 = !{i64 16805820}
!2570 = !{i64 16805823}
!2571 = !{i64 16805832}
!2572 = !{i64 16805835}
!2573 = !{i64 16805848}
!2574 = !{i64 16805865}
!2575 = !{i64 16805867}
!2576 = !{i64 16805873}
!2577 = !{i64 16805879}
!2578 = !{i64 16805886}
!2579 = !{i64 16805889}
!2580 = !{i64 16805892}
!2581 = !{i64 16805898}
!2582 = !{i64 16805904}
!2583 = !{i64 16805906}
!2584 = !{i64 16805907}
!2585 = !{i64 16805909}
!2586 = !{i64 16805928}
!2587 = !{i64 16805915}
!2588 = !{i64 16805924}
!2589 = !{i64 16805926}
!2590 = !{i64 16805930}
!2591 = !{i64 16805933}
!2592 = !{i64 16805934}
!2593 = !{i64 16805936}
!2594 = !{i64 16805749}
!2595 = !{i64 16805955}
!2596 = !{i64 16805958}
!2597 = !{i64 16805961}
!2598 = !{i64 16805966}
!2599 = !{i64 16805989}
!2600 = !{i64 16805991}
!2601 = !{i64 16805998}
!2602 = !{i64 16806001}
!2603 = !{i64 16806003}
!2604 = !{i64 16805870}
!2605 = !{i64 16806007}
!2606 = !{i64 16806009}
!2607 = !{i64 16806010}
!2608 = !{i64 16806028}
!2609 = !{i64 16806034}
!2610 = !{i64 16806040}
!2611 = !{i64 16806045}
!2612 = !{i64 16806050}
!2613 = !{i64 16806064}
!2614 = !{i64 16806070}
!2615 = !{i64 16806073}
!2616 = !{i64 16806077}
!2617 = !{i64 16806085}
!2618 = !{i64 16806090}
!2619 = !{i64 16806096}
!2620 = !{i64 16806101}
!2621 = !{i64 16806106}
!2622 = !{i64 16806112}
!2623 = !{i64 16806118}
!2624 = !{i64 16806120}
!2625 = !{i64 16806125}
!2626 = !{i64 16806127}
!2627 = !{i64 16806129}
!2628 = !{i64 16806130}
!2629 = !{i64 16806131}
!2630 = !{i64 16806133}
!2631 = !{i64 16806135}
!2632 = !{i64 16806141}
!2633 = !{i64 16806143}
!2634 = !{i64 16806147}
!2635 = !{i64 16806160}
!2636 = !{i64 16806169}
!2637 = !{i64 16806172}
!2638 = !{i64 16806173}
!2639 = !{i64 16806176}
!2640 = !{i64 16806180}
!2641 = !{i64 16806189}
!2642 = !{i64 16806199}
!2643 = !{i64 16806202}
!2644 = !{i64 16806207}
!2645 = !{i64 16806210}
!2646 = !{i64 16806213}
!2647 = !{i64 16806218}
!2648 = !{i64 16806231}
!2649 = !{i64 16806329}
!2650 = !{i64 16806333}
!2651 = !{i64 16806336}
!2652 = !{i64 16806339}
!2653 = !{i64 16806341}
!2654 = !{i64 16806343}
!2655 = !{i64 16806351}
!2656 = !{i64 16806356}
!2657 = !{i64 16806361}
!2658 = !{i64 16806362}
!2659 = !{i64 16806368}
!2660 = !{i64 16806370}
!2661 = !{i64 16806371}
!2662 = !{i64 16806373}
!2663 = !{i64 16806375}
!2664 = !{i64 16806379}
!2665 = !{i64 16806382}
!2666 = !{i64 16806386}
!2667 = !{i64 16806389}
!2668 = !{i64 16806396}
!2669 = !{i64 16806404}
!2670 = !{i64 16806409}
!2671 = !{i64 16806663}
!2672 = !{i64 16806664}
!2673 = !{i64 16806667}
!2674 = !{i64 16806672}
!2675 = !{i64 16806675}
!2676 = !{i64 16806680}
!2677 = !{i64 16806686}
!2678 = !{i64 16806687}
!2679 = !{i64 16806693}
!2680 = !{i64 16806695}
!2681 = !{i64 16806700}
!2682 = !{i64 16806703}
!2683 = !{i64 16806705}
!2684 = !{i64 16806708}
!2685 = !{i64 16806713}
!2686 = !{i64 16806720}
!2687 = !{i64 16806721}
!2688 = !{i64 16806723}
!2689 = !{i64 16806726}
!2690 = !{i64 16806727}
!2691 = !{i64 16806734}
!2692 = !{i64 16806736}
!2693 = !{i64 16806745}
!2694 = !{i64 16806748}
!2695 = !{i64 16806754}
!2696 = !{i64 16806756}
!2697 = !{i64 16806757}
!2698 = !{i64 16806760}
!2699 = !{i64 16806763}
!2700 = !{i64 16806768}
!2701 = !{i64 16806771}
!2702 = !{i64 16806774}
!2703 = !{i64 16806782}
!2704 = !{i64 16806785}
!2705 = !{i64 16806788}
!2706 = !{i64 16806791}
!2707 = !{i64 16806796}
!2708 = !{i64 16806799}
!2709 = !{i64 16806801}
!2710 = !{i64 16806803}
!2711 = !{i64 16806806}
!2712 = !{i64 16806815}
!2713 = !{i64 16806819}
!2714 = !{i64 16806823}
!2715 = !{i64 16806827}
!2716 = !{i64 16806831}
!2717 = !{i64 16806834}
!2718 = !{i64 16806838}
!2719 = !{i64 16806841}
!2720 = !{i64 16806843}
!2721 = !{i64 16806850}
!2722 = !{i64 16806855}
!2723 = !{i64 16806858}
!2724 = !{i64 16806866}
!2725 = !{i64 16806874}
!2726 = !{i64 16806880}
!2727 = !{i64 16806884}
!2728 = !{i64 16806886}
!2729 = !{i64 16806889}
!2730 = !{i64 16806891}
!2731 = !{i64 16806902}
!2732 = !{i64 16806907}
!2733 = !{i64 16806909}
!2734 = !{i64 16806912}
!2735 = !{i64 16806915}
!2736 = !{i64 16806921}
!2737 = !{i64 16806923}
!2738 = !{i64 16806931}
!2739 = !{i64 16806936}
!2740 = !{i64 16806944}
!2741 = !{i64 16806947}
!2742 = !{i64 16806968}
!2743 = !{i64 16806975}
!2744 = !{i64 16806978}
!2745 = !{i64 16806981}
!2746 = !{i64 16806985}
!2747 = !{i64 16806993}
!2748 = !{i64 16806995}
!2749 = !{i64 16807005}
!2750 = !{i64 16807009}
!2751 = !{i64 16807031}
!2752 = !{i64 16807036}
!2753 = !{i64 16807047}
!2754 = !{i64 16806990}
!2755 = !{i64 16806999}
!2756 = !{i64 16807058}
!2757 = !{i64 16807063}
!2758 = !{i64 16807074}
!2759 = !{i64 16807082}
!2760 = !{i64 16807083}
!2761 = !{i64 16807085}
!2762 = !{i64 16807087}
!2763 = !{i64 16807088}
!2764 = !{i64 16807097}
!2765 = !{i64 16807099}
!2766 = !{i64 16807101}
!2767 = !{i64 16807105}
!2768 = !{i64 16807111}
!2769 = !{i64 16807117}
!2770 = !{i64 16807123}
!2771 = !{i64 16807128}
!2772 = !{i64 16807130}
!2773 = !{i64 16807132}
!2774 = !{i64 16807125}
!2775 = !{i64 16807141}
!2776 = !{i64 16807144}
!2777 = !{i64 16807146}
!2778 = !{i64 16807149}
!2779 = !{i64 16807152}
!2780 = !{i64 16807163}
!2781 = !{i64 16807170}
!2782 = !{i64 16807199}
!2783 = !{i64 16807201}
!2784 = !{i64 16807203}
!2785 = !{i64 16807207}
!2786 = !{i64 16807209}
!2787 = !{i64 16807211}
!2788 = !{i64 16807212}
!2789 = !{i64 16807215}
!2790 = !{i64 16807217}
!2791 = !{i64 16807055}
!2792 = !{i64 16807220}
!2793 = !{i64 16807222}
!2794 = !{i64 16807225}
!2795 = !{i64 16807230}
!2796 = !{i64 16807232}
!2797 = !{i64 16807242}
!2798 = !{i64 16807244}
!2799 = !{i64 16807246}
!2800 = !{i64 16807237}
!2801 = !{i64 16807259}
!2802 = !{i64 16807262}
!2803 = !{i64 16807264}
!2804 = !{i64 16807266}
!2805 = !{i64 16807267}
!2806 = !{i64 16807269}
!2807 = !{i64 16807272}
!2808 = !{i64 16807274}
!2809 = !{i64 16807279}
!2810 = !{i64 16807281}
!2811 = !{i64 16807282}
!2812 = !{i64 16807358}
!2813 = !{i64 16807364}
!2814 = !{i64 16807378}
!2815 = !{i64 16807389}
!2816 = !{i64 16807390}
!2817 = !{i64 16807399}
!2818 = !{i64 16807405}
!2819 = !{i64 16807410}
!2820 = !{i64 16807413}
!2821 = !{i64 16807414}
!2822 = !{i64 16807419}
!2823 = !{i64 16807422}
!2824 = !{i64 16807429}
!2825 = !{i64 16807441}
!2826 = !{i64 16807448}
!2827 = !{i64 16807451}
!2828 = !{i64 16807453}
!2829 = !{i64 16807459}
!2830 = !{i64 16807462}
!2831 = !{i64 16807464}
!2832 = !{i64 16807469}
!2833 = !{i64 16807474}
!2834 = !{i64 16807475}
!2835 = !{i64 16807481}
!2836 = !{i64 16807482}
!2837 = !{i64 16807484}
!2838 = !{i64 16807490}
!2839 = !{i64 16807496}
!2840 = !{i64 16807502}
!2841 = !{i64 16807529}
!2842 = !{i64 16807535}
!2843 = !{i64 16807558}
!2844 = !{i64 16807565}
!2845 = !{i64 16807567}
!2846 = !{i64 16807540}
!2847 = !{i64 16807550}
!2848 = !{i64 16807555}
!2849 = !{i64 16807539}
!2850 = !{i64 16807579}
!2851 = !{i64 16807585}
!2852 = !{i64 16807586}
!2853 = !{i64 16807588}
!2854 = !{i64 16807593}
!2855 = !{i64 16807598}
!2856 = !{i64 16807607}
!2857 = !{i64 16807613}
!2858 = !{i64 16807614}
!2859 = !{i64 16807616}
!2860 = !{i64 16807619}
!2861 = !{i64 16807622}
!2862 = !{i64 16807623}
!2863 = !{i64 16807628}
!2864 = !{i64 16807637}
!2865 = !{i64 16807638}
!2866 = !{i64 16807639}
!2867 = !{i64 16807647}
!2868 = !{i64 16807653}
!2869 = !{i64 16807655}
!2870 = !{i64 16807660}
!2871 = !{i64 16807665}
!2872 = !{i64 16807676}
!2873 = !{i64 16807683}
!2874 = !{i64 16807693}
!2875 = !{i64 16807701}
!2876 = !{i64 16807703}
!2877 = !{i64 16807707}
!2878 = !{i64 16807720}
!2879 = !{i64 16807722}
!2880 = !{i64 16807729}
!2881 = !{i64 16807732}
!2882 = !{i64 16807736}
!2883 = !{i64 16807739}
!2884 = !{i64 16807741}
!2885 = !{i64 16807746}
!2886 = !{i64 16807749}
!2887 = !{i64 16807754}
!2888 = !{i64 16807759}
!2889 = !{i64 16807766}
!2890 = !{i64 16807771}
!2891 = !{i64 16807782}
!2892 = !{i64 16807790}
!2893 = !{i64 16807793}
!2894 = !{i64 16807795}
!2895 = !{i64 16807792}
!2896 = !{i64 16807797}
!2897 = !{i64 16807798}
!2898 = !{i64 16807807}
!2899 = !{i64 16807811}
!2900 = !{i64 16807812}
!2901 = !{i64 16807874}
!2902 = !{i64 16807876}
!2903 = !{i64 16807881}
!2904 = !{i64 16807885}
!2905 = !{i64 16807896}
!2906 = !{i64 16807893}
!2907 = !{i64 16807898}
!2908 = !{i64 16807904}
!2909 = !{i64 16807909}
!2910 = !{i64 16807914}
!2911 = !{i64 16807916}
!2912 = !{i64 16807921}
!2913 = !{i64 16807923}
!2914 = !{i64 16807926}
!2915 = !{i64 16807931}
!2916 = !{i64 16807937}
!2917 = !{i64 16807939}
!2918 = !{i64 16807944}
!2919 = !{i64 16807961}
!2920 = !{i64 16807963}
!2921 = !{i64 16807978}
!2922 = !{i64 16807981}
!2923 = !{i64 16808008}
!2924 = !{i64 16808052}
!2925 = !{i64 16808067}
!2926 = !{i64 16808072}
!2927 = !{i64 16808080}
!2928 = !{i64 16808086}
!2929 = !{i64 16808089}
!2930 = !{i64 16808094}
!2931 = !{i64 16808095}
!2932 = !{i64 16808099}
!2933 = !{i64 16808106}
!2934 = !{i64 16808109}
!2935 = !{i64 16808115}
!2936 = !{i64 16808116}
!2937 = !{i64 16808118}
!2938 = !{i64 16808121}
!2939 = !{i64 16808123}
!2940 = !{i64 16808126}
!2941 = !{i64 16808128}
!2942 = !{i64 16808130}
!2943 = !{i64 16808135}
!2944 = !{i64 16808138}
!2945 = !{i64 16808145}
!2946 = !{i64 16808146}
!2947 = !{i64 16808148}
!2948 = !{i64 16808150}
!2949 = !{i64 16808153}
!2950 = !{i64 16808162}
!2951 = !{i64 16808166}
!2952 = !{i64 16808168}
!2953 = !{i64 16808445}
!2954 = !{i64 16808453}
!2955 = !{i64 16808455}
!2956 = !{i64 16808456}
!2957 = !{i64 16808458}
!2958 = !{i64 16808461}
!2959 = !{i64 16808466}
!2960 = !{i64 16808469}
!2961 = !{i64 16808475}
!2962 = !{i64 16808487}
!2963 = !{i64 16808490}
!2964 = !{i64 16808494}
!2965 = !{i64 16808529}
!2966 = !{i64 16808533}
!2967 = !{i64 16808537}
!2968 = !{i64 16808544}
!2969 = !{i64 16808547}
!2970 = !{i64 16808552}
!2971 = !{i64 16808559}
!2972 = !{i64 16808577}
!2973 = !{i64 16808580}
!2974 = !{i64 16808604}
!2975 = !{i64 16808608}
!2976 = !{i64 16808610}
!2977 = !{i64 16808595}
!2978 = !{i64 16808600}
!2979 = !{i64 16808613}
!2980 = !{i64 16808616}
!2981 = !{i64 16808620}
!2982 = !{i64 16808634}
!2983 = !{i64 16808651}
!2984 = !{i64 16808657}
!2985 = !{i64 16808709}
!2986 = !{i64 16808711}
!2987 = !{i64 16808713}
!2988 = !{i64 16808718}
!2989 = !{i64 16808724}
!2990 = !{i64 16808727}
!2991 = !{i64 16808738}
!2992 = !{i64 16808744}
!2993 = !{i64 16808753}
!2994 = !{i64 16808758}
!2995 = !{i64 16808772}
!2996 = !{i64 16808776}
!2997 = !{i64 16808781}
!2998 = !{i64 16808799}
!2999 = !{i64 16808811}
!3000 = !{i64 16808816}
!3001 = !{i64 16808818}
!3002 = !{i64 16808821}
!3003 = !{i64 16808828}
!3004 = !{i64 16808837}
!3005 = !{i64 16808839}
!3006 = !{i64 16808851}
!3007 = !{i64 16808854}
!3008 = !{i64 16808865}
!3009 = !{i64 16808868}
!3010 = !{i64 16808872}
!3011 = !{i64 16808876}
!3012 = !{i64 16808878}
!3013 = !{i64 16808880}
!3014 = !{i64 16808884}
!3015 = !{i64 16808900}
!3016 = !{i64 16808902}
!3017 = !{i64 16808904}
!3018 = !{i64 16808910}
!3019 = !{i64 16808913}
!3020 = !{i64 16808918}
!3021 = !{i64 16808920}
!3022 = !{i64 16808924}
!3023 = !{i64 16808925}
!3024 = !{i64 16808953}
!3025 = !{i64 16808954}
!3026 = !{i64 16808963}
!3027 = !{i64 16808966}
!3028 = !{i64 16808971}
!3029 = !{i64 16808973}
!3030 = !{i64 16808975}
!3031 = !{i64 16808981}
!3032 = !{i64 16808984}
!3033 = !{i64 16808987}
!3034 = !{i64 16808994}
!3035 = !{i64 16808996}
!3036 = !{i64 16808999}
!3037 = !{i64 16809007}
!3038 = !{i64 16809009}
!3039 = !{i64 16809012}
!3040 = !{i64 16809016}
!3041 = !{i64 16809018}
!3042 = !{i64 16809024}
!3043 = !{i64 16809032}
!3044 = !{i64 16809039}
!3045 = !{i64 16809049}
!3046 = !{i64 16809056}
!3047 = !{i64 16809058}
!3048 = !{i64 16809063}
!3049 = !{i64 16809065}
!3050 = !{i64 16809068}
!3051 = !{i64 16809070}
!3052 = !{i64 16809072}
!3053 = !{i64 16809055}
!3054 = !{i64 16809080}
!3055 = !{i64 16809084}
!3056 = !{i64 16809085}
!3057 = !{i64 16809089}
!3058 = !{i64 16809092}
!3059 = !{i64 16809094}
!3060 = !{i64 16809099}
!3061 = !{i64 16809146}
!3062 = !{i64 16809149}
!3063 = !{i64 16809156}
!3064 = !{i64 16809168}
!3065 = !{i64 16809179}
!3066 = !{i64 16809210}
!3067 = !{i64 16809213}
!3068 = !{i64 16809220}
!3069 = !{i64 16809228}
!3070 = !{i64 16809231}
!3071 = !{i64 16809237}
!3072 = !{i64 16809238}
!3073 = !{i64 16809241}
!3074 = !{i64 16809247}
!3075 = !{i64 16809260}
!3076 = !{i64 16809263}
!3077 = !{i64 16809266}
!3078 = !{i64 16809272}
!3079 = !{i64 16809275}
!3080 = !{i64 16809276}
!3081 = !{i64 16809286}
!3082 = !{i64 16809289}
!3083 = !{i64 16809302}
!3084 = !{i64 16809303}
!3085 = !{i64 16809309}
!3086 = !{i64 16809321}
!3087 = !{i64 16809323}
!3088 = !{i64 16809325}
!3089 = !{i64 16809328}
!3090 = !{i64 16809330}
!3091 = !{i64 16809336}
!3092 = !{i64 16809342}
!3093 = !{i64 16809356}
!3094 = !{i64 16809357}
!3095 = !{i64 16809362}
!3096 = !{i64 16809370}
!3097 = !{i64 16809372}
!3098 = !{i64 16809378}
!3099 = !{i64 16809383}
!3100 = !{i64 16809385}
!3101 = !{i64 16809388}
!3102 = !{i64 16809390}
!3103 = !{i64 16809395}
!3104 = !{i64 16809398}
!3105 = !{i64 16809405}
!3106 = !{i64 16809411}
!3107 = !{i64 16809349}
!3108 = !{i64 16809416}
!3109 = !{i64 16809418}
!3110 = !{i64 16809423}
!3111 = !{i64 16809431}
!3112 = !{i64 16809334}
!3113 = !{i64 16809434}
!3114 = !{i64 16809440}
!3115 = !{i64 16809451}
!3116 = !{i64 16809453}
!3117 = !{i64 16809456}
!3118 = !{i64 16809459}
!3119 = !{i64 16809469}
!3120 = !{i64 16809472}
!3121 = !{i64 16809483}
!3122 = !{i64 16809484}
!3123 = !{i64 16809512}
!3124 = !{i64 16809518}
!3125 = !{i64 16809529}
!3126 = !{i64 16809531}
!3127 = !{i64 16809538}
!3128 = !{i64 16809541}
!3129 = !{i64 16809545}
!3130 = !{i64 16809550}
!3131 = !{i64 16809557}
!3132 = !{i64 16809571}
!3133 = !{i64 16809528}
!3134 = !{i64 16809565}
!3135 = !{i64 16809566}
!3136 = !{i64 16809576}
!3137 = !{i64 16809578}
!3138 = !{i64 16809588}
!3139 = !{i64 16809593}
!3140 = !{i64 16809701}
!3141 = !{i64 16809704}
!3142 = !{i64 16809586}
!3143 = !{i64 16809706}
!3144 = !{i64 16809709}
!3145 = !{i64 16809714}
!3146 = !{i64 16809717}
!3147 = !{i64 16809719}
!3148 = !{i64 16809737}
!3149 = !{i64 16809739}
!3150 = !{i64 16809744}
!3151 = !{i64 16809746}
!3152 = !{i64 16809748}
!3153 = !{i64 16809750}
!3154 = !{i64 16809769}
!3155 = !{i64 16809773}
!3156 = !{i64 16809778}
!3157 = !{i64 16809806}
!3158 = !{i64 16809812}
!3159 = !{i64 16809847}
!3160 = !{i64 16809853}
!3161 = !{i64 16809860}
!3162 = !{i64 16809864}
!3163 = !{i64 16809888}
!3164 = !{i64 16809935}
!3165 = !{i64 16809938}
!3166 = !{i64 16809946}
!3167 = !{i64 16809949}
!3168 = !{i64 16809950}
!3169 = !{i64 16809952}
!3170 = !{i64 16809954}
!3171 = !{i64 16809959}
!3172 = !{i64 16809961}
!3173 = !{i64 16809964}
!3174 = !{i64 16809974}
!3175 = !{i64 16809975}
!3176 = !{i64 16809994}
!3177 = !{i64 16810001}
!3178 = !{i64 16810008}
!3179 = !{i64 16810016}
!3180 = !{i64 16810023}
!3181 = !{i64 16810025}
!3182 = !{i64 16810028}
!3183 = !{i64 16810030}
!3184 = !{i64 16809998}
!3185 = !{i64 16810035}
!3186 = !{i64 16810041}
!3187 = !{i64 16810076}
!3188 = !{i64 16810073}
!3189 = !{i64 16810082}
!3190 = !{i64 16810098}
!3191 = !{i64 16810195}
!3192 = !{i64 16810202}
!3193 = !{i64 16810207}
!3194 = !{i64 16810213}
!3195 = !{i64 16810216}
!3196 = !{i64 16810235}
!3197 = !{i64 16810238}
!3198 = !{i64 16810243}
!3199 = !{i64 16810252}
!3200 = !{i64 16810270}
!3201 = !{i64 16810224}
!3202 = !{i64 16810283}
!3203 = !{i64 16810289}
!3204 = !{i64 16810292}
!3205 = !{i64 16810294}
!3206 = !{i64 16810306}
!3207 = !{i64 16810311}
!3208 = !{i64 16810314}
!3209 = !{i64 16810319}
!3210 = !{i64 16810322}
!3211 = !{i64 16810323}
!3212 = !{i64 16810328}
!3213 = !{i64 16810329}
!3214 = !{i64 16810330}
!3215 = !{i64 16810331}
!3216 = !{i64 16810340}
!3217 = !{i64 16810343}
!3218 = !{i64 16810360}
!3219 = !{i64 16810362}
!3220 = !{i64 16810368}
!3221 = !{i64 16810389}
!3222 = !{i64 16810394}
!3223 = !{i64 16810397}
!3224 = !{i64 16810400}
!3225 = !{i64 16810411}
!3226 = !{i64 16810414}
!3227 = !{i64 16810417}
!3228 = !{i64 16810420}
!3229 = !{i64 16810424}
!3230 = !{i64 16810427}
!3231 = !{i64 16810441}
!3232 = !{i64 16810463}
!3233 = !{i64 16810471}
!3234 = !{i64 16810473}
!3235 = !{i64 16810478}
!3236 = !{i64 16810485}
!3237 = !{i64 16810488}
!3238 = !{i64 16810490}
!3239 = !{i64 16810492}
!3240 = !{i64 16810510}
!3241 = !{i64 16810515}
!3242 = !{i64 16810516}
!3243 = !{i64 16810530}
!3244 = !{i64 16810535}
!3245 = !{i64 16810537}
!3246 = !{i64 16810543}
!3247 = !{i64 16810546}
!3248 = !{i64 16810551}
!3249 = !{i64 16810554}
!3250 = !{i64 16810565}
!3251 = !{i64 16810662}
!3252 = !{i64 16810664}
!3253 = !{i64 16810667}
!3254 = !{i64 16810668}
!3255 = !{i64 16810676}
!3256 = !{i64 16810681}
!3257 = !{i64 16810688}
!3258 = !{i64 16810697}
!3259 = !{i64 16810699}
!3260 = !{i64 16810705}
!3261 = !{i64 16810710}
!3262 = !{i64 16810716}
!3263 = !{i64 16810773}
!3264 = !{i64 16810794}
!3265 = !{i64 16810805}
!3266 = !{i64 16810810}
!3267 = !{i64 16810813}
!3268 = !{i64 16810840}
!3269 = !{i64 16810844}
!3270 = !{i64 16810850}
!3271 = !{i64 16810855}
!3272 = !{i64 16810859}
!3273 = !{i64 16810860}
!3274 = !{i64 16810863}
!3275 = !{i64 16810865}
!3276 = !{i64 16810873}
!3277 = !{i64 16810876}
!3278 = !{i64 16810884}
!3279 = !{i64 16810887}
!3280 = !{i64 16810890}
!3281 = !{i64 16810895}
!3282 = !{i64 16810899}
!3283 = !{i64 16810902}
!3284 = !{i64 16810904}
!3285 = !{i64 16810906}
!3286 = !{i64 16810908}
!3287 = !{i64 16810917}
!3288 = !{i64 16810915}
!3289 = !{i64 16810919}
!3290 = !{i64 16810922}
!3291 = !{i64 16810926}
!3292 = !{i64 16810929}
!3293 = !{i64 16810933}
!3294 = !{i64 16810935}
!3295 = !{i64 16810941}
!3296 = !{i64 16810948}
!3297 = !{i64 16810940}
!3298 = !{i64 16810955}
!3299 = !{i64 16810960}
!3300 = !{i64 16810963}
!3301 = !{i64 16810968}
!3302 = !{i64 16810970}
!3303 = !{i64 16810976}
!3304 = !{i64 16810978}
!3305 = !{i64 16810981}
!3306 = !{i64 16810988}
!3307 = !{i64 16810989}
!3308 = !{i64 16810993}
!3309 = !{i64 16811004}
!3310 = !{i64 16811007}
!3311 = !{i64 16811017}
!3312 = !{i64 16811022}
!3313 = !{i64 16811025}
!3314 = !{i64 16811028}
!3315 = !{i64 16811031}
!3316 = !{i64 16811034}
!3317 = !{i64 16811037}
!3318 = !{i64 16811046}
!3319 = !{i64 16811049}
!3320 = !{i64 16811054}
!3321 = !{i64 16811056}
!3322 = !{i64 16811062}
!3323 = !{i64 16811071}
!3324 = !{i64 16811075}
!3325 = !{i64 16811078}
!3326 = !{i64 16811086}
!3327 = !{i64 16811092}
!3328 = !{i64 16811094}
!3329 = !{i64 16811099}
!3330 = !{i64 16811100}
!3331 = !{i64 16811104}
!3332 = !{i64 16811106}
!3333 = !{i64 16811108}
!3334 = !{i64 16811117}
!3335 = !{i64 16811122}
!3336 = !{i64 16811124}
!3337 = !{i64 16811129}
!3338 = !{i64 16811142}
!3339 = !{i64 16811157}
!3340 = !{i64 16811173}
!3341 = !{i64 16811177}
!3342 = !{i64 16811179}
!3343 = !{i64 16811184}
!3344 = !{i64 16811190}
!3345 = !{i64 16811221}
!3346 = !{i64 16811222}
!3347 = !{i64 16811230}
!3348 = !{i64 16811236}
!3349 = !{i64 16811238}
!3350 = !{i64 16811242}
!3351 = !{i64 16811245}
!3352 = !{i64 16811247}
!3353 = !{i64 16811250}
!3354 = !{i64 16811254}
!3355 = !{i64 16811256}
!3356 = !{i64 16811241}
!3357 = !{i64 16811263}
!3358 = !{i64 16811267}
!3359 = !{i64 16811269}
!3360 = !{i64 16811274}
!3361 = !{i64 16811276}
!3362 = !{i64 16811278}
!3363 = !{i64 16811282}
!3364 = !{i64 16811286}
!3365 = !{i64 16811294}
!3366 = !{i64 16811299}
!3367 = !{i64 16811303}
!3368 = !{i64 16811317}
!3369 = !{i64 16811323}
!3370 = !{i64 16811325}
!3371 = !{i64 16811349}
!3372 = !{i64 16811329}
!3373 = !{i64 16811332}
!3374 = !{i64 16811338}
!3375 = !{i64 16811340}
!3376 = !{i64 16811343}
!3377 = !{i64 16811346}
!3378 = !{i64 16811359}
!3379 = !{i64 16811368}
!3380 = !{i64 16811372}
!3381 = !{i64 16811374}
!3382 = !{i64 16811315}
!3383 = !{i64 16811388}
!3384 = !{i64 16811390}
!3385 = !{i64 16811394}
!3386 = !{i64 16811402}
!3387 = !{i64 16811393}
!3388 = !{i64 16811397}
!3389 = !{i64 16811399}
!3390 = !{i64 16811405}
!3391 = !{i64 16811407}
!3392 = !{i64 16811409}
!3393 = !{i64 16811414}
!3394 = !{i64 16811419}
!3395 = !{i64 16811421}
!3396 = !{i64 16811423}
!3397 = !{i64 16811426}
!3398 = !{i64 16811428}
!3399 = !{i64 16811429}
!3400 = !{i64 16811454}
!3401 = !{i64 16811456}
!3402 = !{i64 16811433}
!3403 = !{i64 16811443}
!3404 = !{i64 16811452}
!3405 = !{i64 16811458}
!3406 = !{i64 16811462}
!3407 = !{i64 16811261}
!3408 = !{i64 16811473}
!3409 = !{i64 16811485}
!3410 = !{i64 16811492}
!3411 = !{i64 16811494}
!3412 = !{i64 16811503}
!3413 = !{i64 16811517}
!3414 = !{i64 16811523}
!3415 = !{i64 16811526}
!3416 = !{i64 16811528}
!3417 = !{i64 16811531}
!3418 = !{i64 16811534}
!3419 = !{i64 16811540}
!3420 = !{i64 16811543}
!3421 = !{i64 16811555}
!3422 = !{i64 16811558}
!3423 = !{i64 16811562}
!3424 = !{i64 16811564}
!3425 = !{i64 16811565}
!3426 = !{i64 16811572}
!3427 = !{i64 16811578}
!3428 = !{i64 16811583}
!3429 = !{i64 16811612}
!3430 = !{i64 16811615}
!3431 = !{i64 16811621}
!3432 = !{i64 16811623}
!3433 = !{i64 16811625}
!3434 = !{i64 16811629}
!3435 = !{i64 16811634}
!3436 = !{i64 16811639}
!3437 = !{i64 16811645}
!3438 = !{i64 16811650}
!3439 = !{i64 16811652}
!3440 = !{i64 16811654}
!3441 = !{i64 16811671}
!3442 = !{i64 16811677}
!3443 = !{i64 16811678}
!3444 = !{i64 16811680}
!3445 = !{i64 16811688}
!3446 = !{i64 16811689}
!3447 = !{i64 16811699}
!3448 = !{i64 16811701}
!3449 = !{i64 16811707}
!3450 = !{i64 16811717}
!3451 = !{i64 16811727}
!3452 = !{i64 16811733}
!3453 = !{i64 16811735}
!3454 = !{i64 16811738}
!3455 = !{i64 16811751}
!3456 = !{i64 16811758}
!3457 = !{i64 16811771}
!3458 = !{i64 16811774}
!3459 = !{i64 16811838}
!3460 = !{i64 16811840}
!3461 = !{i64 16811779}
!3462 = !{i64 16811782}
!3463 = !{i64 16811784}
!3464 = !{i64 16811786}
!3465 = !{i64 16811803}
!3466 = !{i64 16811805}
!3467 = !{i64 16811809}
!3468 = !{i64 16811811}
!3469 = !{i64 16811813}
!3470 = !{i64 16811815}
!3471 = !{i64 16811816}
!3472 = !{i64 16811824}
!3473 = !{i64 16811825}
!3474 = !{i64 16811830}
!3475 = !{i64 16811831}
!3476 = !{i64 16811836}
!3477 = !{i64 16811857}
!3478 = !{i64 16811902}
!3479 = !{i64 16811959}
!3480 = !{i64 16811965}
!3481 = !{i64 16811966}
!3482 = !{i64 16811973}
!3483 = !{i64 16811979}
!3484 = !{i64 16811982}
!3485 = !{i64 16811989}
!3486 = !{i64 16811990}
!3487 = !{i64 16811991}
!3488 = !{i64 16811998}
!3489 = !{i64 16812056}
!3490 = !{i64 16812066}
!3491 = !{i64 16812071}
!3492 = !{i64 16812074}
!3493 = !{i64 16812076}
!3494 = !{i64 16812085}
!3495 = !{i64 16812097}
!3496 = !{i64 16812100}
!3497 = !{i64 16812105}
!3498 = !{i64 16812108}
!3499 = !{i64 16812110}
!3500 = !{i64 16812115}
!3501 = !{i64 16812118}
!3502 = !{i64 16812121}
!3503 = !{i64 16812124}
!3504 = !{i64 16812138}
!3505 = !{i64 16812150}
!3506 = !{i64 16812172}
!3507 = !{i64 16812176}
!3508 = !{i64 16812179}
!3509 = !{i64 16812182}
!3510 = !{i64 16812187}
!3511 = !{i64 16812193}
!3512 = !{i64 16812198}
!3513 = !{i64 16812201}
!3514 = !{i64 16812204}
!3515 = !{i64 16812209}
!3516 = !{i64 16812212}
!3517 = !{i64 16812220}
!3518 = !{i64 16812258}
!3519 = !{i64 16812268}
!3520 = !{i64 16812274}
!3521 = !{i64 16812290}
!3522 = !{i64 16812292}
!3523 = !{i64 16812294}
!3524 = !{i64 16812298}
!3525 = !{i64 16812299}
!3526 = !{i64 16812320}
!3527 = !{i64 16812340}
!3528 = !{i64 16812354}
!3529 = !{i64 16812357}
!3530 = !{i64 16812360}
!3531 = !{i64 16812363}
!3532 = !{i64 16812366}
!3533 = !{i64 16812372}
!3534 = !{i64 16812375}
!3535 = !{i64 16812378}
!3536 = !{i64 16812385}
!3537 = !{i64 16812389}
!3538 = !{i64 16812391}
!3539 = !{i64 16812396}
!3540 = !{i64 16812400}
!3541 = !{i64 16812407}
!3542 = !{i64 16812412}
!3543 = !{i64 16812416}
!3544 = !{i64 16812405}
!3545 = !{i64 16812409}
!3546 = !{i64 16812438}
!3547 = !{i64 16812474}
!3548 = !{i64 16812482}
!3549 = !{i64 16812487}
!3550 = !{i64 16812488}
!3551 = !{i64 16812539}
!3552 = !{i64 16812546}
!3553 = !{i64 16812551}
!3554 = !{i64 16812558}
!3555 = !{i64 16812561}
!3556 = !{i64 16812564}
!3557 = !{i64 16812574}
!3558 = !{i64 16812580}
!3559 = !{i64 16812584}
!3560 = !{i64 16812589}
!3561 = !{i64 16812606}
!3562 = !{i64 16812607}
!3563 = !{i64 16812617}
!3564 = !{i64 16812623}
!3565 = !{i64 16812625}
!3566 = !{i64 16812641}
!3567 = !{i64 16812646}
!3568 = !{i64 16812651}
!3569 = !{i64 16812653}
!3570 = !{i64 16812667}
!3571 = !{i64 16812670}
!3572 = !{i64 16812675}
!3573 = !{i64 16812678}
!3574 = !{i64 16812680}
!3575 = !{i64 16812682}
!3576 = !{i64 16812685}
!3577 = !{i64 16812692}
!3578 = !{i64 16812700}
!3579 = !{i64 16812709}
!3580 = !{i64 16812715}
!3581 = !{i64 16812719}
!3582 = !{i64 16812829}
!3583 = !{i64 16812832}
!3584 = !{i64 16812834}
!3585 = !{i64 16812836}
!3586 = !{i64 16812846}
!3587 = !{i64 16812876}
!3588 = !{i64 16812868}
!3589 = !{i64 16812880}
!3590 = !{i64 16812889}
!3591 = !{i64 16812892}
!3592 = !{i64 16812896}
!3593 = !{i64 16812899}
!3594 = !{i64 16812901}
!3595 = !{i64 16812907}
!3596 = !{i64 16812894}
!3597 = !{i64 16812910}
!3598 = !{i64 16812915}
!3599 = !{i64 16812917}
!3600 = !{i64 16812919}
!3601 = !{i64 16812871}
!3602 = !{i64 16812922}
!3603 = !{i64 16812926}
!3604 = !{i64 16813030}
!3605 = !{i64 16813033}
!3606 = !{i64 16813036}
!3607 = !{i64 16813047}
!3608 = !{i64 16813053}
!3609 = !{i64 16813056}
!3610 = !{i64 16813081}
!3611 = !{i64 16813125}
!3612 = !{i64 16813131}
!3613 = !{i64 16813145}
!3614 = !{i64 16813227}
!3615 = !{i64 16813295}
!3616 = !{i64 16813305}
!3617 = !{i64 16813307}
!3618 = !{i64 16813308}
!3619 = !{i64 16813311}
!3620 = !{i64 16813320}
!3621 = !{i64 16813329}
!3622 = !{i64 16813332}
!3623 = !{i64 16813334}
!3624 = !{i64 16813341}
!3625 = !{i64 16813366}
!3626 = !{i64 16813377}
!3627 = !{i64 16813381}
!3628 = !{i64 16813459}
!3629 = !{i64 16813498}
!3630 = !{i64 16813529}
!3631 = !{i64 16813542}
!3632 = !{i64 16813543}
!3633 = !{i64 16813545}
!3634 = !{i64 16813551}
!3635 = !{i64 16813555}
!3636 = !{i64 16813557}
!3637 = !{i64 16813559}
!3638 = !{i64 16813561}
!3639 = !{i64 16813571}
!3640 = !{i64 16813576}
!3641 = !{i64 16813517}
!3642 = !{i64 16813526}
!3643 = !{i64 16813585}
!3644 = !{i64 16813591}
!3645 = !{i64 16813593}
!3646 = !{i64 16813595}
!3647 = !{i64 16813598}
!3648 = !{i64 16813609}
!3649 = !{i64 16813663}
!3650 = !{i64 16813683}
!3651 = !{i64 16813685}
!3652 = !{i64 16813687}
!3653 = !{i64 16813691}
!3654 = !{i64 16813712}
!3655 = !{i64 16813720}
!3656 = !{i64 16813723}
!3657 = !{i64 16813726}
!3658 = !{i64 16813732}
!3659 = !{i64 16813734}
!3660 = !{i64 16813740}
!3661 = !{i64 16813746}
!3662 = !{i64 16813748}
!3663 = !{i64 16813754}
!3664 = !{i64 16813764}
!3665 = !{i64 16813750}
!3666 = !{i64 16813767}
!3667 = !{i64 16813770}
!3668 = !{i64 16813775}
!3669 = !{i64 16813785}
!3670 = !{i64 16813787}
!3671 = !{i64 16813789}
!3672 = !{i64 16813791}
!3673 = !{i64 16813811}
!3674 = !{i64 16813812}
!3675 = !{i64 16813829}
!3676 = !{i64 16813834}
!3677 = !{i64 16813844}
!3678 = !{i64 16813847}
!3679 = !{i64 16813853}
!3680 = !{i64 16813855}
!3681 = !{i64 16813860}
!3682 = !{i64 16813868}
!3683 = !{i64 16813873}
!3684 = !{i64 16813848}
!3685 = !{i64 16813876}
!3686 = !{i64 16813879}
!3687 = !{i64 16813882}
!3688 = !{i64 16813889}
!3689 = !{i64 16813908}
!3690 = !{i64 16813914}
!3691 = !{i64 16813925}
!3692 = !{i64 16813928}
!3693 = !{i64 16813904}
!3694 = !{i64 16813935}
!3695 = !{i64 16813945}
!3696 = !{i64 16813947}
!3697 = !{i64 16813953}
!3698 = !{i64 16813955}
!3699 = !{i64 16813957}
!3700 = !{i64 16813966}
!3701 = !{i64 16814059}
!3702 = !{i64 16814072}
!3703 = !{i64 16814079}
!3704 = !{i64 16814099}
!3705 = !{i64 16814105}
!3706 = !{i64 16814114}
!3707 = !{i64 16814117}
!3708 = !{i64 16814123}
!3709 = !{i64 16814129}
!3710 = !{i64 16814231}
!3711 = !{i64 16814236}
!3712 = !{i64 16814237}
!3713 = !{i64 16814240}
!3714 = !{i64 16814243}
!3715 = !{i64 16814248}
!3716 = !{i64 16814251}
!3717 = !{i64 16814266}
!3718 = !{i64 16814271}
!3719 = !{i64 16814282}
!3720 = !{i64 16814292}
!3721 = !{i64 16814295}
!3722 = !{i64 16814296}
!3723 = !{i64 16814298}
!3724 = !{i64 16814305}
!3725 = !{i64 16814308}
!3726 = !{i64 16814313}
!3727 = !{i64 16814316}
!3728 = !{i64 16814321}
!3729 = !{i64 16814324}
!3730 = !{i64 16814326}
!3731 = !{i64 16814331}
!3732 = !{i64 16814336}
!3733 = !{i64 16814344}
!3734 = !{i64 16814342}
!3735 = !{i64 16814350}
!3736 = !{i64 16814357}
!3737 = !{i64 16814368}
!3738 = !{i64 16814378}
!3739 = !{i64 16814387}
!3740 = !{i64 16814392}
!3741 = !{i64 16814395}
!3742 = !{i64 16814400}
!3743 = !{i64 16814403}
!3744 = !{i64 16814415}
!3745 = !{i64 16814423}
!3746 = !{i64 16814425}
!3747 = !{i64 16814432}
!3748 = !{i64 16814433}
!3749 = !{i64 16814445}
!3750 = !{i64 16814449}
!3751 = !{i64 16814452}
!3752 = !{i64 16814509}
!3753 = !{i64 16814510}
!3754 = !{i64 16814513}
!3755 = !{i64 16814521}
!3756 = !{i64 16814529}
!3757 = !{i64 16814535}
!3758 = !{i64 16814542}
!3759 = !{i64 16814549}
!3760 = !{i64 16814551}
!3761 = !{i64 16814554}
!3762 = !{i64 16814560}
!3763 = !{i64 16814566}
!3764 = !{i64 16814569}
!3765 = !{i64 16814609}
!3766 = !{i64 16814618}
!3767 = !{i64 16814624}
!3768 = !{i64 16814627}
!3769 = !{i64 16814632}
!3770 = !{i64 16814635}
!3771 = !{i64 16814644}
!3772 = !{i64 16814650}
!3773 = !{i64 16814652}
!3774 = !{i64 16814654}
!3775 = !{i64 16814659}
!3776 = !{i64 16814678}
!3777 = !{i64 16814698}
!3778 = !{i64 16814720}
!3779 = !{i64 16814722}
!3780 = !{i64 16814733}
!3781 = !{i64 16814790}
!3782 = !{i64 16814828}
!3783 = !{i64 16814842}
!3784 = !{i64 16814900}
!3785 = !{i64 16814939}
!3786 = !{i64 16814955}
!3787 = !{i64 16814950}
!3788 = !{i64 16814958}
!3789 = !{i64 16814960}
!3790 = !{i64 16814985}
!3791 = !{i64 16814986}
!3792 = !{i64 16814988}
!3793 = !{i64 16814991}
!3794 = !{i64 16814992}
!3795 = !{i64 16814999}
!3796 = !{i64 16815002}
!3797 = !{i64 16815010}
!3798 = !{i64 16815012}
!3799 = !{i64 16815017}
!3800 = !{i64 16815020}
!3801 = !{i64 16815022}
!3802 = !{i64 16815025}
!3803 = !{i64 16815029}
!3804 = !{i64 16815043}
!3805 = !{i64 16815045}
!3806 = !{i64 16815064}
!3807 = !{i64 16815113}
!3808 = !{i64 16815116}
!3809 = !{i64 16815119}
!3810 = !{i64 16815121}
!3811 = !{i64 16815124}
!3812 = !{i64 16815126}
!3813 = !{i64 16815129}
!3814 = !{i64 16815131}
!3815 = !{i64 16815133}
!3816 = !{i64 16815136}
!3817 = !{i64 16815128}
!3818 = !{i64 16815140}
!3819 = !{i64 16815142}
!3820 = !{i64 16815148}
!3821 = !{i64 16815149}
!3822 = !{i64 16815152}
!3823 = !{i64 16815156}
!3824 = !{i64 16815160}
!3825 = !{i64 16815164}
!3826 = !{i64 16815169}
!3827 = !{i64 16815172}
!3828 = !{i64 16815173}
!3829 = !{i64 16815178}
!3830 = !{i64 16815185}
!3831 = !{i64 16815190}
!3832 = !{i64 16815195}
!3833 = !{i64 16815203}
!3834 = !{i64 16815204}
!3835 = !{i64 16815205}
!3836 = !{i64 16815206}
!3837 = !{i64 16815208}
!3838 = !{i64 16815211}
!3839 = !{i64 16815217}
!3840 = !{i64 16815226}
!3841 = !{i64 16815227}
!3842 = !{i64 16815297}
!3843 = !{i64 16815303}
!3844 = !{i64 16815310}
!3845 = !{i64 16815317}
!3846 = !{i64 16815320}
!3847 = !{i64 16815324}
!3848 = !{i64 16815326}
!3849 = !{i64 16815332}
!3850 = !{i64 16815334}
!3851 = !{i64 16815337}
!3852 = !{i64 16815340}
!3853 = !{i64 16815342}
!3854 = !{i64 16815348}
!3855 = !{i64 16815349}
!3856 = !{i64 16815351}
!3857 = !{i64 16815354}
!3858 = !{i64 16815355}
!3859 = !{i64 16815358}
!3860 = !{i64 16815361}
!3861 = !{i64 16815364}
!3862 = !{i64 16815365}
!3863 = !{i64 16815366}
!3864 = !{i64 16815368}
!3865 = !{i64 16815369}
!3866 = !{i64 16815371}
!3867 = !{i64 16815372}
!3868 = !{i64 16815374}
!3869 = !{i64 16815377}
!3870 = !{i64 16815383}
!3871 = !{i64 16815385}
!3872 = !{i64 16815386}
!3873 = !{i64 16815393}
!3874 = !{i64 16815397}
!3875 = !{i64 16815400}
!3876 = !{i64 16815416}
!3877 = !{i64 16815418}
!3878 = !{i64 16815419}
!3879 = !{i64 16815421}
!3880 = !{i64 16815426}
!3881 = !{i64 16815428}
!3882 = !{i64 16815415}
!3883 = !{i64 16815434}
!3884 = !{i64 16815436}
!3885 = !{i64 16815441}
!3886 = !{i64 16815447}
!3887 = !{i64 16815448}
!3888 = !{i64 16815452}
!3889 = !{i64 16815455}
!3890 = !{i64 16815489}
!3891 = !{i64 16815491}
!3892 = !{i64 16815497}
!3893 = !{i64 16815499}
!3894 = !{i64 16815502}
!3895 = !{i64 16815509}
!3896 = !{i64 16815513}
!3897 = !{i64 16815516}
!3898 = !{i64 16815537}
!3899 = !{i64 16815539}
!3900 = !{i64 16815542}
!3901 = !{i64 16815545}
!3902 = !{i64 16815548}
!3903 = !{i64 16815550}
!3904 = !{i64 16815553}
!3905 = !{i64 16815558}
!3906 = !{i64 16815561}
!3907 = !{i64 16815564}
!3908 = !{i64 16815566}
!3909 = !{i64 16815572}
!3910 = !{i64 16815574}
!3911 = !{i64 16815577}
!3912 = !{i64 16815579}
!3913 = !{i64 16815581}
!3914 = !{i64 16815585}
!3915 = !{i64 16815645}
!3916 = !{i64 16815662}
!3917 = !{i64 16815663}
!3918 = !{i64 16815668}
!3919 = !{i64 16815672}
!3920 = !{i64 16815683}
!3921 = !{i64 16815684}
!3922 = !{i64 16815691}
!3923 = !{i64 16815692}
!3924 = !{i64 16815786}
!3925 = !{i64 16815788}
!3926 = !{i64 16815791}
!3927 = !{i64 16815795}
!3928 = !{i64 16815801}
!3929 = !{i64 16815809}
!3930 = !{i8 1, i8 8}
!3931 = !{i64 16815810}
!3932 = !{i64 16815811}
!3933 = !{i64 16815822}
!3934 = !{i64 16815828}
!3935 = !{i64 16815834}
!3936 = !{i64 16815837}
!3937 = !{i64 16815840}
!3938 = !{i64 16815846}
!3939 = !{i64 16815863}
!3940 = !{i64 16815865}
!3941 = !{i64 16815867}
!3942 = !{i64 16815880}
!3943 = !{i64 16815882}
!3944 = !{i64 16815885}
!3945 = !{i64 16815944}
!3946 = !{i64 16815949}
!3947 = !{i64 16815951}
!3948 = !{i64 16815961}
!3949 = !{i64 16815967}
!3950 = !{i64 16815969}
!3951 = !{i64 16815975}
!3952 = !{i64 16815984}
!3953 = !{i64 16815986}
!3954 = !{i64 16815988}
!3955 = !{i64 16816000}
!3956 = !{i64 16816006}
!3957 = !{i64 16816008}
!3958 = !{i64 16816013}
!3959 = !{i64 16816016}
!3960 = !{i64 16816021}
!3961 = !{i64 16816026}
!3962 = !{i64 16816040}
!3963 = !{i64 16816046}
!3964 = !{i64 16816049}
!3965 = !{i64 16816074}
!3966 = !{i64 16816080}
!3967 = !{i64 16816082}
!3968 = !{i64 16816083}
!3969 = !{i64 16816090}
!3970 = !{i64 16816092}
!3971 = !{i64 16816152}
!3972 = !{i64 16816200}
!3973 = !{i64 16816239}
!3974 = !{i64 16816253}
!3975 = !{i64 16816261}
!3976 = !{i64 16816290}
!3977 = !{i64 16816292}
!3978 = !{i64 16816298}
!3979 = !{i64 16816303}
!3980 = !{i64 16816310}
!3981 = !{i64 16816314}
!3982 = !{i64 16816326}
!3983 = !{i64 16816328}
!3984 = !{i64 16816330}
!3985 = !{i64 16816337}
!3986 = !{i64 16816342}
!3987 = !{i64 16816348}
!3988 = !{i64 16816395}
!3989 = !{i64 16816413}
!3990 = !{i64 16816418}
!3991 = !{i64 16816425}
!3992 = !{i64 16816426}
!3993 = !{i64 16816463}
!3994 = !{i64 16816471}
!3995 = !{i64 16816475}
!3996 = !{i64 16816483}
!3997 = !{i64 16816491}
!3998 = !{i64 16816496}
!3999 = !{i64 16816503}
!4000 = !{i64 16816561}
!4001 = !{i64 16816572}
!4002 = !{i64 16816575}
!4003 = !{i64 16816587}
!4004 = !{i64 16816637}
!4005 = !{i64 16816708}
!4006 = !{i64 16816710}
!4007 = !{i64 16816717}
!4008 = !{i64 16816736}
!4009 = !{i64 16816820}
!4010 = !{i64 16816825}
!4011 = !{i64 16816849}
!4012 = !{i64 16816860}
!4013 = !{i64 16816867}
!4014 = !{i64 16816875}
!4015 = !{i64 16816886}
!4016 = !{i64 16816889}
!4017 = !{i64 16816891}
!4018 = !{i64 16816884}
!4019 = !{i64 16816898}
!4020 = !{i64 16816903}
!4021 = !{i64 16816905}
!4022 = !{i64 16816910}
!4023 = !{i64 16816915}
!4024 = !{i64 16816918}
!4025 = !{i64 16816939}
!4026 = !{i64 16816942}
!4027 = !{i64 16816947}
!4028 = !{i64 16816949}
!4029 = !{i64 16816958}
!4030 = !{i64 16816967}
!4031 = !{i64 16816972}
!4032 = !{i64 16817147}
!4033 = !{i64 16817200}
!4034 = !{i64 16817219}
!4035 = !{i64 16817229}
!4036 = !{i64 16817234}
!4037 = !{i64 16817235}
!4038 = !{i64 16817237}
!4039 = !{i64 16817239}
!4040 = !{i64 16817252}
!4041 = !{i64 16817255}
!4042 = !{i64 16817262}
!4043 = !{i64 16817280}
!4044 = !{i64 16817308}
!4045 = !{i64 16817361}
!4046 = !{i64 16817380}
!4047 = !{i64 16817390}
!4048 = !{i64 16817392}
!4049 = !{i64 16817442}
!4050 = !{i64 16817522}
!4051 = !{i64 16817539}
!4052 = !{i64 16817541}
!4053 = !{i64 16817588}
!4054 = !{i64 16817590}
!4055 = !{i64 16817598}
!4056 = !{i64 16817603}
!4057 = !{i64 16817625}
!4058 = !{i64 16817634}
!4059 = !{i64 16817636}
!4060 = !{i64 16817639}
!4061 = !{i64 16817676}
!4062 = !{i64 16817674}
!4063 = !{i64 16817683}
!4064 = !{i64 16817714}
!4065 = !{i64 16817720}
!4066 = !{i64 16817723}
!4067 = !{i64 16817739}
!4068 = !{i64 16817741}
!4069 = !{i64 16817747}
!4070 = !{i64 16817752}
!4071 = !{i64 16817754}
!4072 = !{i64 16817761}
!4073 = !{i64 16817762}
!4074 = !{i64 16817768}
!4075 = !{i64 16817769}
!4076 = !{i64 16817771}
!4077 = !{i64 16817775}
!4078 = !{i64 16817777}
!4079 = !{i64 16817782}
!4080 = !{i64 16817784}
!4081 = !{i64 16817791}
!4082 = !{i64 16817863}
!4083 = !{i64 16817952}
!4084 = !{i64 16817967}
!4085 = !{i64 16817972}
!4086 = !{i64 16817974}
!4087 = !{i64 16817976}
!4088 = !{i64 16817978}
!4089 = !{i64 16817985}
!4090 = !{i64 16817987}
!4091 = !{i64 16817992}
!4092 = !{i64 16818004}
!4093 = !{i64 16818008}
!4094 = !{i64 16818009}
!4095 = !{i64 16818010}
!4096 = !{i64 16818012}
!4097 = !{i64 16818034}
!4098 = !{i64 16818036}
!4099 = !{i64 16818046}
!4100 = !{i64 16818047}
!4101 = !{i64 16818048}
!4102 = !{i64 16818053}
!4103 = !{i64 16818086}
!4104 = !{i64 16818113}
!4105 = !{i64 16818120}
!4106 = !{i64 16818125}
!4107 = !{i64 16818126}
!4108 = !{i64 16818127}
!4109 = !{i64 16818133}
!4110 = !{i64 16818139}
!4111 = !{i64 16818142}
!4112 = !{i64 16818148}
!4113 = !{i64 16818153}
!4114 = !{i64 16818156}
!4115 = !{i64 16818165}
!4116 = !{i64 16818168}
!4117 = !{i64 16818244}
!4118 = !{i64 16818171}
!4119 = !{i64 16818180}
!4120 = !{i64 16818181}
!4121 = !{i64 16818186}
!4122 = !{i64 16818191}
!4123 = !{i64 16818193}
!4124 = !{i64 16818198}
!4125 = !{i64 16818203}
!4126 = !{i64 16818216}
!4127 = !{i64 16818222}
!4128 = !{i64 16818230}
!4129 = !{i64 16818235}
!4130 = !{i64 16818237}
!4131 = !{i64 16818252}
!4132 = !{i64 16818254}
!4133 = !{i64 16818261}
!4134 = !{i64 16818262}
!4135 = !{i64 16818267}
!4136 = !{i64 16818269}
!4137 = !{i64 16818271}
!4138 = !{i64 16818315}
!4139 = !{i64 16818327}
!4140 = !{i64 16818346}
!4141 = !{i64 16818354}
!4142 = !{i64 16818359}
!4143 = !{i64 16818364}
!4144 = !{i64 16818370}
!4145 = !{i64 16818372}
!4146 = !{i64 16818377}
!4147 = !{i64 16818383}
!4148 = !{i64 16818389}
!4149 = !{i64 16818392}
!4150 = !{i64 16818408}
!4151 = !{i64 16818413}
!4152 = !{i64 16818416}
!4153 = !{i64 16818419}
!4154 = !{i64 16818421}
!4155 = !{i64 16818428}
!4156 = !{i64 16818431}
!4157 = !{i64 16818436}
!4158 = !{i64 16818441}
!4159 = !{i64 16818444}
!4160 = !{i64 16818450}
!4161 = !{i64 16818455}
!4162 = !{i64 16818461}
!4163 = !{i64 16818464}
!4164 = !{i64 16818511}
!4165 = !{i64 16818525}
!4166 = !{i64 16818533}
!4167 = !{i64 16818538}
!4168 = !{i64 16818544}
!4169 = !{i64 16818513}
!4170 = !{i64 16818551}
!4171 = !{i64 16818557}
!4172 = !{i64 16818564}
!4173 = !{i64 16818568}
!4174 = !{i64 16818576}
!4175 = !{i64 16818584}
!4176 = !{i64 16818590}
!4177 = !{i64 16818602}
!4178 = !{i64 16818605}
!4179 = !{i64 16818638}
!4180 = !{i64 16818649}
!4181 = !{i64 16818663}
!4182 = !{i64 16818664}
!4183 = !{i64 16818669}
!4184 = !{i64 16818674}
!4185 = !{i64 16818680}
!4186 = !{i64 16818730}
!4187 = !{i64 16818757}
!4188 = !{i64 16818765}
!4189 = !{i64 16818767}
!4190 = !{i64 16818775}
!4191 = !{i64 16818826}
!4192 = !{i64 16818829}
!4193 = !{i64 16818891}
!4194 = !{i64 16818962}
!4195 = !{i64 16818966}
!4196 = !{i64 16818974}
!4197 = !{i64 16818963}
!4198 = !{i64 16818976}
!4199 = !{i64 16818978}
!4200 = !{i64 16818986}
!4201 = !{i64 16818991}
!4202 = !{i64 16818999}
!4203 = !{i64 16819002}
!4204 = !{i64 16818968}
!4205 = !{i64 16819048}
!4206 = !{i64 16819050}
!4207 = !{i64 16819053}
!4208 = !{i64 16819059}
!4209 = !{i64 16819063}
!4210 = !{i64 16819065}
!4211 = !{i64 16819083}
!4212 = !{i64 16819105}
!4213 = !{i64 16819108}
!4214 = !{i64 16819114}
!4215 = !{i64 16819119}
!4216 = !{i64 16819122}
!4217 = !{i64 16819131}
!4218 = !{i64 16819140}
!4219 = !{i64 16819141}
!4220 = !{i64 16819144}
!4221 = !{i64 16819146}
!4222 = !{i64 16819147}
!4223 = !{i64 16819155}
!4224 = !{i64 16819157}
!4225 = !{i64 16819160}
!4226 = !{i64 16819171}
!4227 = !{i64 16819177}
!4228 = !{i64 16819182}
!4229 = !{i64 16819188}
!4230 = !{i64 16819189}
!4231 = !{i64 16819195}
!4232 = !{i64 16819196}
!4233 = !{i64 16819203}
!4234 = !{i64 16819208}
!4235 = !{i64 16819213}
!4236 = !{i64 16819218}
!4237 = !{i64 16819220}
!4238 = !{i64 16819224}
!4239 = !{i64 16819228}
!4240 = !{i64 16819233}
!4241 = !{i64 16819227}
!4242 = !{i64 16819236}
!4243 = !{i64 16819250}
!4244 = !{i64 16819255}
!4245 = !{i64 16819264}
!4246 = !{i64 16819266}
!4247 = !{i64 16819269}
!4248 = !{i64 16819275}
!4249 = !{i64 16819278}
!4250 = !{i64 16819280}
!4251 = !{i64 16819283}
!4252 = !{i64 16819288}
!4253 = !{i64 16819292}
!4254 = !{i64 16819300}
!4255 = !{i64 16819302}
!4256 = !{i64 16819303}
!4257 = !{i64 16819305}
!4258 = !{i64 16819308}
!4259 = !{i64 16819313}
!4260 = !{i64 16819318}
!4261 = !{i64 16819320}
!4262 = !{i64 16819325}
!4263 = !{i64 16819330}
!4264 = !{i64 16819332}
!4265 = !{i64 16819454}
!4266 = !{i64 16819473}
!4267 = !{i64 16819485}
!4268 = !{i64 16819498}
!4269 = !{i64 16819500}
!4270 = !{i64 16819503}
!4271 = !{i64 16819535}
!4272 = !{i64 16819557}
!4273 = !{i64 16819562}
!4274 = !{i64 16819589}
!4275 = !{i64 16819615}
!4276 = !{i64 16819634}
!4277 = !{i64 16819646}
!4278 = !{i64 16819696}
!4279 = !{i64 16819721}
!4280 = !{i64 16819723}
!4281 = !{i64 16819793}
!4282 = !{i64 16819795}
!4283 = !{i64 16819805}
!4284 = !{i64 16819807}
!4285 = !{i64 16819857}
!4286 = !{i64 16819882}
!4287 = !{i64 16819884}
!4288 = !{i64 16819937}
!4289 = !{i64 16819954}
!4290 = !{i64 16819956}
!4291 = !{i64 16819963}
!4292 = !{i64 16819965}
!4293 = !{i64 16819968}
!4294 = !{i64 16819974}
!4295 = !{i64 16819976}
!4296 = !{i64 16819979}
!4297 = !{i64 16819980}
!4298 = !{i64 16819989}
!4299 = !{i64 16819993}
!4300 = !{i64 16819995}
!4301 = !{i64 16820001}
!4302 = !{i64 16820005}
!4303 = !{i64 16820013}
!4304 = !{i64 16820018}
!4305 = !{i64 16819978}
!4306 = !{i64 16820070}
!4307 = !{i64 16820076}
!4308 = !{i64 16820079}
!4309 = !{i64 16820085}
!4310 = !{i64 16820089}
!4311 = !{i64 16820091}
!4312 = !{i64 16820093}
!4313 = !{i64 16820097}
!4314 = !{i64 16820100}
!4315 = !{i64 16820103}
!4316 = !{i64 16820105}
!4317 = !{i64 16820113}
!4318 = !{i64 16820118}
!4319 = !{i64 16820123}
!4320 = !{i64 16820125}
!4321 = !{i64 16820130}
!4322 = !{i64 16820135}
!4323 = !{i64 16820137}
!4324 = !{i64 16820190}
!4325 = !{i64 16820192}
!4326 = !{i64 16820194}
!4327 = !{i64 16820201}
!4328 = !{i64 16820203}
!4329 = !{i64 16820206}
!4330 = !{i64 16820259}
!4331 = !{i64 16820277}
!4332 = !{i64 16820340}
!4333 = !{i64 16820367}
!4334 = !{i64 16820439}
!4335 = !{i64 16820451}
!4336 = !{i64 16820501}
!4337 = !{i64 16820562}
!4338 = !{i64 16820566}
!4339 = !{i64 16820568}
!4340 = !{i64 16820571}
!4341 = !{i64 16820580}
!4342 = !{i64 16820588}
!4343 = !{i64 16820595}
!4344 = !{i64 16820596}
!4345 = !{i64 16820601}
!4346 = !{i64 16820606}
!4347 = !{i64 16820608}
!4348 = !{i64 16820613}
!4349 = !{i64 16820620}
!4350 = !{i64 16820626}
!4351 = !{i64 16820631}
!4352 = !{i64 16820637}
!4353 = !{i64 16820647}
!4354 = !{i64 16820649}
!4355 = !{i64 16820653}
!4356 = !{i64 16820655}
!4357 = !{i64 16820657}
!4358 = !{i64 16820661}
!4359 = !{i64 16820666}
!4360 = !{i64 16820667}
!4361 = !{i64 16820669}
!4362 = !{i64 16820680}
!4363 = !{i64 16820682}
!4364 = !{i64 16820685}
!4365 = !{i64 16820715}
!4366 = !{i64 16820698}
!4367 = !{i64 16820719}
!4368 = !{i64 16820618}
!4369 = !{i64 16820690}
!4370 = !{i64 16820695}
!4371 = !{i64 16820644}
!4372 = !{i64 16820673}
!4373 = !{i64 16820782}
!4374 = !{i64 16820792}
!4375 = !{i64 16820798}
!4376 = !{i64 16820800}
!4377 = !{i64 16820803}
!4378 = !{i64 16820805}
!4379 = !{i64 16820808}
!4380 = !{i64 16820817}
!4381 = !{i64 16820819}
!4382 = !{i64 16820830}
!4383 = !{i64 16820835}
!4384 = !{i64 16820843}
!4385 = !{i64 16820848}
!4386 = !{i64 16820850}
!4387 = !{i64 16820856}
!4388 = !{i64 16820875}
!4389 = !{i64 16820864}
!4390 = !{i64 16820882}
!4391 = !{i64 16820883}
!4392 = !{i64 16820884}
!4393 = !{i64 16820890}
!4394 = !{i64 16820894}
!4395 = !{i64 16820896}
!4396 = !{i64 16820898}
!4397 = !{i64 16820900}
!4398 = !{i64 16820902}
!4399 = !{i64 16820910}
!4400 = !{i64 16820911}
!4401 = !{i64 16820918}
!4402 = !{i64 16820924}
!4403 = !{i64 16820929}
!4404 = !{i64 16820932}
!4405 = !{i64 16820943}
!4406 = !{i64 16820949}
!4407 = !{i64 16820954}
!4408 = !{i64 16820967}
!4409 = !{i64 16820969}
!4410 = !{i64 16820975}
!4411 = !{i64 16820980}
!4412 = !{i64 16820990}
!4413 = !{i64 16820992}
!4414 = !{i64 16820994}
!4415 = !{i64 16821000}
!4416 = !{i64 16821030}
!4417 = !{i64 16821042}
!4418 = !{i64 16821044}
!4419 = !{i64 16821088}
!4420 = !{i64 16821092}
!4421 = !{i64 16821093}
!4422 = !{i64 16821097}
!4423 = !{i64 16821104}
!4424 = !{i64 16821108}
!4425 = !{i64 16821110}
!4426 = !{i64 16821112}
!4427 = !{i64 16821114}
!4428 = !{i64 16821116}
!4429 = !{i64 16821118}
!4430 = !{i64 16821119}
!4431 = !{i64 16821124}
!4432 = !{i64 16821125}
!4433 = !{i64 16821127}
!4434 = !{i64 16821132}
!4435 = !{i64 16821147}
!4436 = !{i64 16821149}
!4437 = !{i64 16821151}
!4438 = !{i64 16821143}
!4439 = !{i64 16821146}
!4440 = !{i64 16821153}
!4441 = !{i64 16821182}
!4442 = !{i64 16821186}
!4443 = !{i64 16821189}
!4444 = !{i64 16821195}
!4445 = !{i64 16821203}
!4446 = !{i64 16821210}
!4447 = !{i64 16821454}
!4448 = !{i64 16821524}
!4449 = !{i64 16821587}
!4450 = !{i64 16821589}
!4451 = !{i64 16821592}
!4452 = !{i64 16821597}
!4453 = !{i64 16821600}
!4454 = !{i64 16821605}
!4455 = !{i64 16821608}
!4456 = !{i64 16821619}
!4457 = !{i64 16821624}
!4458 = !{i64 16821629}
!4459 = !{i64 16821631}
!4460 = !{i64 16821633}
!4461 = !{i64 16821640}
!4462 = !{i64 16821642}
!4463 = !{i64 16821643}
!4464 = !{i64 16821655}
!4465 = !{i64 16821660}
!4466 = !{i64 16821665}
!4467 = !{i64 16821667}
!4468 = !{i64 16821672}
!4469 = !{i64 16821677}
!4470 = !{i64 16821679}
!4471 = !{i64 16821684}
!4472 = !{i64 16821694}
!4473 = !{i64 16821700}
!4474 = !{i64 16821702}
!4475 = !{i64 16821707}
!4476 = !{i64 16821709}
!4477 = !{i64 16821715}
!4478 = !{i64 16821719}
!4479 = !{i64 16821724}
!4480 = !{i64 16821728}
!4481 = !{i64 16821717}
!4482 = !{i64 16821735}
!4483 = !{i64 16821736}
!4484 = !{i64 16821738}
!4485 = !{i64 16821741}
!4486 = !{i64 16821743}
!4487 = !{i64 16821712}
!4488 = !{i64 16821745}
!4489 = !{i64 16821748}
!4490 = !{i64 16821930}
!4491 = !{i64 16821959}
!4492 = !{i64 16821981}
!4493 = !{i64 16822014}
!4494 = !{i64 16822084}
!4495 = !{i64 16822086}
!4496 = !{i64 16822094}
!4497 = !{i64 16822100}
!4498 = !{i64 16822102}
!4499 = !{i64 16822104}
!4500 = !{i64 16822107}
!4501 = !{i64 16822113}
!4502 = !{i64 16822139}
!4503 = !{i64 16822148}
!4504 = !{i64 16822149}
!4505 = !{i64 16822220}
!4506 = !{i64 16822238}
!4507 = !{i64 16822242}
!4508 = !{i64 16822249}
!4509 = !{i64 16822251}
!4510 = !{i64 16822253}
!4511 = !{i64 16822259}
!4512 = !{i64 16822267}
!4513 = !{i64 16822276}
!4514 = !{i64 16822278}
!4515 = !{i64 16822255}
!4516 = !{i64 16822281}
!4517 = !{i64 16822289}
!4518 = !{i64 16822290}
!4519 = !{i64 16822291}
!4520 = !{i64 16822294}
!4521 = !{i64 16822287}
!4522 = !{i64 16822300}
!4523 = !{i64 16822306}
!4524 = !{i64 16822335}
!4525 = !{i64 16822340}
!4526 = !{i64 16822346}
!4527 = !{i64 16822358}
!4528 = !{i64 16822359}
!4529 = !{i64 16822363}
!4530 = !{i64 16822364}
!4531 = !{i64 16822369}
!4532 = !{i64 16822371}
!4533 = !{i64 16822374}
!4534 = !{i64 16822379}
!4535 = !{i64 16822381}
!4536 = !{i64 16822386}
!4537 = !{i64 16822388}
!4538 = !{i64 16822391}
!4539 = !{i64 16822396}
!4540 = !{i64 16822402}
!4541 = !{i64 16822431}
!4542 = !{i64 16822436}
!4543 = !{i64 16822450}
!4544 = !{i64 16822454}
!4545 = !{i64 16822472}
!4546 = !{i64 16822476}
!4547 = !{i64 16822503}
!4548 = !{i64 16822509}
!4549 = !{i64 16822512}
!4550 = !{i64 16822513}
!4551 = !{i64 16822519}
!4552 = !{i64 16822523}
!4553 = !{i64 16822532}
!4554 = !{i64 16822534}
!4555 = !{i64 16822545}
!4556 = !{i64 16822550}
!4557 = !{i64 16822555}
!4558 = !{i64 16822557}
!4559 = !{i64 16822562}
!4560 = !{i64 16822565}
!4561 = !{i64 16822576}
!4562 = !{i64 16822578}
!4563 = !{i64 16822585}
!4564 = !{i64 16822593}
!4565 = !{i64 16822595}
!4566 = !{i64 16822599}
!4567 = !{i64 16822609}
!4568 = !{i64 16822618}
!4569 = !{i64 16822621}
!4570 = !{i64 16822627}
!4571 = !{i64 16822629}
!4572 = !{i64 16822630}
!4573 = !{i64 16822635}
!4574 = !{i64 16822638}
!4575 = !{i64 16822643}
!4576 = !{i64 16822658}
!4577 = !{i64 16822660}
!4578 = !{i64 16822662}
!4579 = !{i64 16822663}
!4580 = !{i64 16822567}
!4581 = !{i64 16822648}
!4582 = !{i64 16822666}
!4583 = !{i64 16822672}
!4584 = !{i64 16822678}
!4585 = !{i64 16822695}
!4586 = !{i64 16822705}
!4587 = !{i64 16822721}
!4588 = !{i64 16822727}
!4589 = !{i64 16822733}
!4590 = !{i64 16822737}
!4591 = !{i64 16822749}
!4592 = !{i64 16822770}
!4593 = !{i64 16822825}
!4594 = !{i64 16822835}
!4595 = !{i64 16822893}
!4596 = !{i64 16822985}
!4597 = !{i64 16823007}
!4598 = !{i64 16823013}
!4599 = !{i64 16823019}
!4600 = !{i64 16823023}
!4601 = !{i64 16823025}
!4602 = !{i64 16823027}
!4603 = !{i64 16823029}
!4604 = !{i64 16823031}
!4605 = !{i64 16823037}
!4606 = !{i64 16823043}
!4607 = !{i64 16823075}
!4608 = !{i64 16823171}
!4609 = !{i64 16823190}
!4610 = !{i64 16823196}
!4611 = !{i64 16823198}
!4612 = !{i64 16823206}
!4613 = !{i64 16823212}
!4614 = !{i64 16823214}
!4615 = !{i64 16823219}
!4616 = !{i64 16823236}
!4617 = !{i64 16823240}
!4618 = !{i64 16823243}
!4619 = !{i64 16823247}
!4620 = !{i64 16823250}
!4621 = !{i64 16823252}
!4622 = !{i64 16823257}
!4623 = !{i64 16823260}
!4624 = !{i64 16823265}
!4625 = !{i64 16823270}
!4626 = !{i64 16823273}
!4627 = !{i64 16823278}
!4628 = !{i64 16823281}
!4629 = !{i64 16823327}
!4630 = !{i64 16823360}
!4631 = !{i64 16823366}
!4632 = !{i64 16823368}
!4633 = !{i64 16823369}
!4634 = !{i64 16823381}
!4635 = !{i64 16823439}
!4636 = !{i64 16823462}
!4637 = !{i64 16823486}
!4638 = !{i64 16823492}
!4639 = !{i64 16823498}
!4640 = !{i64 16823500}
!4641 = !{i64 16823506}
!4642 = !{i64 16823525}
!4643 = !{i64 16823567}
!4644 = !{i64 16823584}
!4645 = !{i64 16823590}
!4646 = !{i64 16823591}
!4647 = !{i64 16823597}
!4648 = !{i64 16823602}
!4649 = !{i64 16823608}
!4650 = !{i64 16823610}
!4651 = !{i64 16823616}
!4652 = !{i64 16823622}
!4653 = !{i64 16823623}
!4654 = !{i64 16823581}
!4655 = !{i64 16823627}
!4656 = !{i64 16823630}
!4657 = !{i64 16823634}
!4658 = !{i64 16823636}
!4659 = !{i64 16823639}
!4660 = !{i64 16823643}
!4661 = !{i64 16823646}
!4662 = !{i64 16823714}
!4663 = !{i64 16823754}
!4664 = !{i64 16823757}
!4665 = !{i64 16823759}
!4666 = !{i64 16823767}
!4667 = !{i64 16823768}
!4668 = !{i64 16823776}
!4669 = !{i64 16823788}
!4670 = !{i64 16823790}
!4671 = !{i64 16823792}
!4672 = !{i64 16823797}
!4673 = !{i64 16823800}
!4674 = !{i64 16823802}
!4675 = !{i64 16823805}
!4676 = !{i64 16823812}
!4677 = !{i64 16823814}
!4678 = !{i64 16823819}
!4679 = !{i64 16823872}
!4680 = !{i64 16823933}
!4681 = !{i64 16823942}
!4682 = !{i64 16823965}
!4683 = !{i64 16824028}
!4684 = !{i64 16824074}
!4685 = !{i64 16824090}
!4686 = !{i64 16824102}
!4687 = !{i64 16824160}
!4688 = !{i64 16824183}
!4689 = !{i64 16824246}
!4690 = !{i64 16824295}
!4691 = !{i64 16824308}
!4692 = !{i64 16824315}
!4693 = !{i64 16824320}
!4694 = !{i64 16824347}
!4695 = !{i64 16824378}
!4696 = !{i64 16824399}
!4697 = !{i64 16824412}
!4698 = !{i64 16824417}
!4699 = !{i64 16824420}
!4700 = !{i64 16824428}
!4701 = !{i64 16824434}
!4702 = !{i64 16824439}
!4703 = !{i64 16824441}
!4704 = !{i64 16824443}
!4705 = !{i64 16824395}
!4706 = !{i64 16824445}
!4707 = !{i64 16824453}
!4708 = !{i64 16824461}
!4709 = !{i64 16824468}
!4710 = !{i64 16824470}
!4711 = !{i64 16824471}
!4712 = !{i64 16824473}
!4713 = !{i64 16824475}
!4714 = !{i64 16824476}
!4715 = !{i64 16824483}
!4716 = !{i64 16824485}
!4717 = !{i64 16824491}
!4718 = !{i64 16824496}
!4719 = !{i64 16824498}
!4720 = !{i64 16824500}
!4721 = !{i64 16824505}
!4722 = !{i64 16824510}
!4723 = !{i64 16824515}
!4724 = !{i64 16824520}
!4725 = !{i64 16824524}
!4726 = !{i64 16824527}
!4727 = !{i64 16824534}
!4728 = !{i64 16824536}
!4729 = !{i64 16824537}
!4730 = !{i64 16824541}
!4731 = !{i64 16824545}
!4732 = !{i64 16824550}
!4733 = !{i64 16824558}
!4734 = !{i64 16824560}
!4735 = !{i64 16824565}
!4736 = !{i64 16824575}
!4737 = !{i64 16824580}
!4738 = !{i64 16824585}
!4739 = !{i64 16824586}
!4740 = !{i64 16824591}
!4741 = !{i64 16824596}
!4742 = !{i64 16824607}
!4743 = !{i64 16824612}
!4744 = !{i64 16824617}
!4745 = !{i64 16824619}
!4746 = !{i64 16824624}
!4747 = !{i64 16824629}
!4748 = !{i64 16824631}
!4749 = !{i64 16824636}
!4750 = !{i64 16824643}
!4751 = !{i64 16824673}
!4752 = !{i64 16824680}
!4753 = !{i64 16824682}
!4754 = !{i64 16824684}
!4755 = !{i64 16824687}
!4756 = !{i64 16824693}
!4757 = !{i64 16824695}
!4758 = !{i64 16824698}
!4759 = !{i64 16824700}
!4760 = !{i64 16824701}
!4761 = !{i64 16824704}
!4762 = !{i64 16824708}
!4763 = !{i64 16824715}
!4764 = !{i64 16824721}
!4765 = !{i64 16824717}
!4766 = !{i64 16824718}
!4767 = !{i64 16824723}
!4768 = !{i64 16824724}
!4769 = !{i64 16824727}
!4770 = !{i64 16824733}
!4771 = !{i64 16824739}
!4772 = !{i64 16824740}
!4773 = !{i64 16824749}
!4774 = !{i64 16824750}
!4775 = !{i64 16824752}
!4776 = !{i64 16824758}
!4777 = !{i64 16824761}
!4778 = !{i64 16824765}
!4779 = !{i64 16824768}
!4780 = !{i64 16824772}
!4781 = !{i64 16824773}
!4782 = !{i64 16824775}
!4783 = !{i64 16824776}
!4784 = !{i64 16824779}
!4785 = !{i64 16824782}
!4786 = !{i64 16824784}
!4787 = !{i64 16824790}
!4788 = !{i64 16824795}
!4789 = !{i64 16824800}
!4790 = !{i64 16825226}
!4791 = !{i64 16825270}
!4792 = !{i64 16825221}
!4793 = !{i64 16825228}
!4794 = !{i64 16825234}
!4795 = !{i64 16825240}
!4796 = !{i64 16825245}
!4797 = !{i64 16825247}
!4798 = !{i64 16825249}
!4799 = !{i64 16825252}
!4800 = !{i64 16825254}
!4801 = !{i64 16825256}
!4802 = !{i64 16825259}
!4803 = !{i64 16825262}
!4804 = !{i64 16825264}
!4805 = !{i64 16825266}
!4806 = !{i64 16825276}
!4807 = !{i64 16825277}
!4808 = !{i64 16825283}
!4809 = !{i64 16825287}
!4810 = !{i64 16825289}
!4811 = !{i64 16825295}
!4812 = !{i64 16825298}
!4813 = !{i64 16825300}
!4814 = !{i64 16825302}
!4815 = !{i64 16825303}
!4816 = !{i64 16825305}
!4817 = !{i64 16825308}
!4818 = !{i64 16825310}
!4819 = !{i64 16825315}
!4820 = !{i64 16825320}
!4821 = !{i64 16825328}
!4822 = !{i64 16825334}
!4823 = !{i64 16825337}
!4824 = !{i64 16825341}
!4825 = !{i64 16825347}
!4826 = !{i64 16825366}
!4827 = !{i64 16825373}
!4828 = !{i64 16825377}
!4829 = !{i64 16825379}
!4830 = !{i64 16825360}
!4831 = !{i64 16825414}
!4832 = !{i64 16825418}
!4833 = !{i64 16825425}
!4834 = !{i64 16825428}
!4835 = !{i64 16825435}
!4836 = !{i64 16825443}
!4837 = !{i64 16825446}
!4838 = !{i64 16825449}
!4839 = !{i64 16825455}
!4840 = !{i64 16825457}
!4841 = !{i64 16825459}
!4842 = !{i64 16825477}
!4843 = !{i64 16825482}
!4844 = !{i64 16825483}
!4845 = !{i64 16825486}
!4846 = !{i64 16825487}
!4847 = !{i64 16825489}
!4848 = !{i64 16825492}
!4849 = !{i64 16825495}
!4850 = !{i64 16825497}
!4851 = !{i64 16825500}
!4852 = !{i64 16825505}
!4853 = !{i64 16825507}
!4854 = !{i64 16825509}
!4855 = !{i64 16825511}
!4856 = !{i64 16825516}
!4857 = !{i64 16825522}
!4858 = !{i64 16825523}
!4859 = !{i64 16825533}
!4860 = !{i64 16825553}
!4861 = !{i64 16825555}
!4862 = !{i64 16825547}
!4863 = !{i64 16825559}
!4864 = !{i64 16825576}
!4865 = !{i64 16825579}
!4866 = !{i64 16825581}
!4867 = !{i64 16825584}
!4868 = !{i64 16825587}
!4869 = !{i64 16825591}
!4870 = !{i64 16825596}
!4871 = !{i64 16825599}
!4872 = !{i64 16825600}
!4873 = !{i64 16825615}
!4874 = !{i64 16825624}
!4875 = !{i64 16825626}
!4876 = !{i64 16825630}
!4877 = !{i64 16825635}
!4878 = !{i64 16825637}
!4879 = !{i64 16825640}
!4880 = !{i64 16825645}
!4881 = !{i64 16825647}
!4882 = !{i64 16825679}
!4883 = !{i64 16825681}
!4884 = !{i64 16825684}
!4885 = !{i64 16825690}
!4886 = !{i64 16825694}
!4887 = !{i64 16825703}
!4888 = !{i64 16825708}
!4889 = !{i64 16825779}
!4890 = !{i64 16825787}
!4891 = !{i64 16825808}
!4892 = !{i64 16825809}
!4893 = !{i64 16825811}
!4894 = !{i64 16825813}
!4895 = !{i64 16825817}
!4896 = !{i64 16825824}
!4897 = !{i64 16825827}
!4898 = !{i64 16825834}
!4899 = !{i64 16825838}
!4900 = !{i64 16825853}
!4901 = !{i64 16825856}
!4902 = !{i64 16825864}
!4903 = !{i64 16825866}
!4904 = !{i64 16825872}
!4905 = !{i64 16825862}
!4906 = !{i64 16825873}
!4907 = !{i64 16825875}
!4908 = !{i64 16825880}
!4909 = !{i64 16825885}
!4910 = !{i64 16825889}
!4911 = !{i64 16825894}
!4912 = !{i64 16825902}
!4913 = !{i64 16825910}
!4914 = !{i64 16825912}
!4915 = !{i64 16825915}
!4916 = !{i64 16825921}
!4917 = !{i64 16825951}
!4918 = !{i64 16826012}
!4919 = !{i64 16826016}
!4920 = !{i64 16826021}
!4921 = !{i64 16826024}
!4922 = !{i64 16826027}
!4923 = !{i64 16826032}
!4924 = !{i64 16826035}
!4925 = !{i64 16826038}
!4926 = !{i64 16826043}
!4927 = !{i64 16826048}
!4928 = !{i64 16826050}
!4929 = !{i64 16826055}
!4930 = !{i64 16826057}
!4931 = !{i64 16826068}
!4932 = !{i64 16826071}
!4933 = !{i64 16826074}
!4934 = !{i64 16826087}
!4935 = !{i64 16826093}
!4936 = !{i64 16826095}
!4937 = !{i64 16826102}
!4938 = !{i64 16826103}
!4939 = !{i64 16826105}
!4940 = !{i64 16826113}
!4941 = !{i64 16826116}
!4942 = !{i64 16826133}
!4943 = !{i64 16826143}
!4944 = !{i64 16826145}
!4945 = !{i64 16826154}
!4946 = !{i64 16826156}
!4947 = !{i64 16826158}
!4948 = !{i64 16826165}
!4949 = !{i64 16826172}
!4950 = !{i64 16826177}
!4951 = !{i64 16826180}
!4952 = !{i64 16826187}
!4953 = !{i64 16826194}
!4954 = !{i64 16826198}
!4955 = !{i64 16826205}
!4956 = !{i64 16826211}
!4957 = !{i64 16826214}
!4958 = !{i64 16826219}
!4959 = !{i64 16826222}
!4960 = !{i64 16826225}
!4961 = !{i64 16826230}
!4962 = !{i64 16826234}
!4963 = !{i64 16826239}
!4964 = !{i64 16826242}
!4965 = !{i64 16826244}
!4966 = !{i64 16826249}
!4967 = !{i64 16826252}
!4968 = !{i64 16826257}
!4969 = !{i64 16826258}
!4970 = !{i64 16826260}
!4971 = !{i64 16826262}
!4972 = !{i64 16826268}
!4973 = !{i64 16826300}
!4974 = !{i64 16826381}
!4975 = !{i64 16826389}
!4976 = !{i64 16826407}
!4977 = !{i64 16826415}
!4978 = !{i64 16826423}
!4979 = !{i64 16826443}
!4980 = !{i64 16826449}
!4981 = !{i64 16826469}
!4982 = !{i64 16826471}
!4983 = !{i64 16826472}
!4984 = !{i64 16826473}
!4985 = !{i64 16826488}
!4986 = !{i64 16826495}
!4987 = !{i64 16826500}
!4988 = !{i64 16826504}
!4989 = !{i64 16826514}
!4990 = !{i64 16826523}
!4991 = !{i64 16826532}
!4992 = !{i64 16826542}
!4993 = !{i64 16826549}
!4994 = !{i64 16826555}
!4995 = !{i64 16826560}
!4996 = !{i64 16826563}
!4997 = !{i64 16826565}
!4998 = !{i64 16826570}
!4999 = !{i64 16826575}
!5000 = !{i64 16826578}
!5001 = !{i64 16826580}
!5002 = !{i64 16826585}
!5003 = !{i64 16826588}
!5004 = !{i64 16826593}
!5005 = !{i64 16826596}
!5006 = !{i64 16826599}
!5007 = !{i64 16826601}
!5008 = !{i64 16826607}
!5009 = !{i64 16826638}
!5010 = !{i64 16826641}
!5011 = !{i64 16826646}
!5012 = !{i64 16826651}
!5013 = !{i64 16826655}
!5014 = !{i64 16826658}
!5015 = !{i64 16826669}
!5016 = !{i64 16826685}
!5017 = !{i64 16826686}
!5018 = !{i64 16826694}
!5019 = !{i64 16826697}
!5020 = !{i64 16826702}
!5021 = !{i64 16826705}
!5022 = !{i64 16826713}
!5023 = !{i64 16826738}
!5024 = !{i64 16826739}
!5025 = !{i64 16826745}
!5026 = !{i64 16826747}
!5027 = !{i64 16826772}
!5028 = !{i64 16826803}
!5029 = !{i64 16826819}
!5030 = !{i64 16826749}
!5031 = !{i64 16826761}
!5032 = !{i64 16826763}
!5033 = !{i64 16826764}
!5034 = !{i64 16826781}
!5035 = !{i64 16826786}
!5036 = !{i64 16826792}
!5037 = !{i64 16826795}
!5038 = !{i64 16826798}
!5039 = !{i64 16826811}
!5040 = !{i64 16826813}
!5041 = !{i64 16826814}
!5042 = !{i64 16826821}
!5043 = !{i64 16826823}
!5044 = !{i64 16826825}
!5045 = !{i64 16826828}
!5046 = !{i64 16826831}
!5047 = !{i64 16826834}
!5048 = !{i64 16826837}
!5049 = !{i64 16826839}
!5050 = !{i64 16826849}
!5051 = !{i64 16826851}
!5052 = !{i64 16826863}
!5053 = !{i64 16826865}
!5054 = !{i64 16826867}
!5055 = !{i64 16826869}
!5056 = !{i64 16826875}
!5057 = !{i64 16826877}
!5058 = !{i64 16826878}
!5059 = !{i64 16826880}
!5060 = !{i64 16826896}
!5061 = !{i64 16826899}
!5062 = !{i64 16826906}
!5063 = !{i64 16826913}
!5064 = !{i64 16826918}
!5065 = !{i64 16826923}
!5066 = !{i64 16826928}
!5067 = !{i64 16826931}
!5068 = !{i64 16826942}
!5069 = !{i64 16826944}
!5070 = !{i64 16826947}
!5071 = !{i64 16826952}
!5072 = !{i64 16826954}
!5073 = !{i64 16826955}
!5074 = !{i64 16826956}
!5075 = !{i64 16826962}
!5076 = !{i64 16826966}
!5077 = !{i64 16826968}
!5078 = !{i64 16826974}
!5079 = !{i64 16826977}
!5080 = !{i64 16826979}
!5081 = !{i64 16827087}
!5082 = !{i64 16827090}
!5083 = !{i64 16827093}
!5084 = !{i64 16827099}
!5085 = !{i64 16827101}
!5086 = !{i64 16827110}
!5087 = !{i64 16827122}
!5088 = !{i64 16827133}
!5089 = !{i64 16827162}
!5090 = !{i64 16827163}
!5091 = !{i64 16827176}
!5092 = !{i64 16827223}
!5093 = !{i64 16827226}
!5094 = !{i64 16827233}
!5095 = !{i64 16827238}
!5096 = !{i64 16827242}
!5097 = !{i64 16827245}
!5098 = !{i64 16827248}
!5099 = !{i64 16827258}
!5100 = !{i64 16827268}
!5101 = !{i64 16827505}
!5102 = !{i64 16827514}
!5103 = !{i64 16827518}
!5104 = !{i64 16827523}
!5105 = !{i64 16827575}
!5106 = !{i64 16827576}
!5107 = !{i64 16827583}
!5108 = !{i64 16827585}
!5109 = !{i64 16827584}
!5110 = !{i64 16827591}
!5111 = !{i64 16827597}
!5112 = !{i64 16827601}
!5113 = !{i64 16827615}
!5114 = !{i64 16827616}
!5115 = !{i64 16827625}
!5116 = !{i64 16827633}
!5117 = !{i64 16827654}
!5118 = !{i64 16827656}
!5119 = !{i64 16827659}
!5120 = !{i64 16827665}
!5121 = !{i64 16827667}
!5122 = !{i64 16827670}
!5123 = !{i64 16827672}
!5124 = !{i64 16827674}
!5125 = !{i64 16827680}
!5126 = !{i64 16827687}
!5127 = !{i64 16827690}
!5128 = !{i64 16827693}
!5129 = !{i64 16827701}
!5130 = !{i64 16827705}
!5131 = !{i64 16827713}
!5132 = !{i64 16827715}
!5133 = !{i64 16827720}
!5134 = !{i64 16827722}
!5135 = !{i64 16827724}
!5136 = !{i64 16827736}
!5137 = !{i64 16827737}
!5138 = !{i64 16827743}
!5139 = !{i64 16827747}
!5140 = !{i64 16827753}
!5141 = !{i64 16827759}
!5142 = !{i64 16827761}
!5143 = !{i64 16827762}
!5144 = !{i64 16827765}
!5145 = !{i64 16827766}
!5146 = !{i64 16827776}
!5147 = !{i64 16827780}
!5148 = !{i64 16827782}
!5149 = !{i64 16827783}
!5150 = !{i64 16827787}
!5151 = !{i64 16827793}
!5152 = !{i64 16827794}
!5153 = !{i64 16827795}
!5154 = !{i64 16827798}
!5155 = !{i64 16827800}
!5156 = !{i64 16827807}
!5157 = !{i64 16827810}
!5158 = !{i64 16827812}
!5159 = !{i64 16827817}
!5160 = !{i64 16827818}
!5161 = !{i64 16827820}
!5162 = !{i64 16827831}
!5163 = !{i64 16827832}
!5164 = !{i64 16827835}
!5165 = !{i64 16827843}
!5166 = !{i64 16827848}
!5167 = !{i64 16827849}
!5168 = !{i64 16827855}
!5169 = !{i64 16827866}
!5170 = !{i64 16827869}
!5171 = !{i64 16827878}
!5172 = !{i64 16827886}
!5173 = !{i64 16827895}
!5174 = !{i64 16827901}
!5175 = !{i64 16827903}
!5176 = !{i64 16827905}
!5177 = !{i64 16827909}
!5178 = !{i64 16827919}
!5179 = !{i64 16827921}
!5180 = !{i64 16827924}
!5181 = !{i64 16827927}
!5182 = !{i64 16827932}
!5183 = !{i64 16827943}
!5184 = !{i64 16827946}
!5185 = !{i64 16827948}
!5186 = !{i64 16827951}
!5187 = !{i64 16827953}
!5188 = !{i64 16827959}
!5189 = !{i64 16827961}
!5190 = !{i64 16827962}
!5191 = !{i64 16827967}
!5192 = !{i64 16827973}
!5193 = !{i64 16827975}
!5194 = !{i64 16827981}
!5195 = !{i64 16827983}
!5196 = !{i64 16827986}
!5197 = !{i64 16827994}
!5198 = !{i64 16827995}
!5199 = !{i64 16827997}
!5200 = !{i64 16828002}
!5201 = !{i64 16828008}
!5202 = !{i64 16828014}
!5203 = !{i64 16828018}
!5204 = !{i64 16828104}
!5205 = !{i64 16828145}
!5206 = !{i64 16828177}
!5207 = !{i64 16828186}
!5208 = !{i64 16828191}
!5209 = !{i64 16828195}
!5210 = !{i64 16828203}
!5211 = !{i64 16828208}
!5212 = !{i64 16828211}
!5213 = !{i64 16828212}
!5214 = !{i64 16828215}
!5215 = !{i64 16828221}
!5216 = !{i64 16828226}
!5217 = !{i64 16828229}
!5218 = !{i64 16828231}
!5219 = !{i64 16828234}
!5220 = !{i64 16828244}
!5221 = !{i64 16828247}
!5222 = !{i64 16828252}
!5223 = !{i64 16828255}
!5224 = !{i64 16828256}
!5225 = !{i64 16828263}
!5226 = !{i64 16828265}
!5227 = !{i64 16828267}
!5228 = !{i64 16828271}
!5229 = !{i64 16828274}
!5230 = !{i64 16828283}
!5231 = !{i64 16828286}
!5232 = !{i64 16828289}
!5233 = !{i64 16828297}
!5234 = !{i64 16828309}
!5235 = !{i64 16828314}
!5236 = !{i64 16828317}
!5237 = !{i64 16828320}
!5238 = !{i64 16828323}
!5239 = !{i64 16828328}
!5240 = !{i64 16828332}
!5241 = !{i64 16828340}
!5242 = !{i64 16828347}
!5243 = !{i64 16828360}
!5244 = !{i64 16828372}
!5245 = !{i64 16828381}
!5246 = !{i64 16828386}
!5247 = !{i64 16828389}
!5248 = !{i64 16828391}
!5249 = !{i64 16828393}
!5250 = !{i64 16828402}
!5251 = !{i64 16828407}
!5252 = !{i64 16829145}
!5253 = !{i64 16829151}
!5254 = !{i64 16829176}
!5255 = !{i64 16829284}
!5256 = !{i64 16829348}
!5257 = !{i64 16829422}
!5258 = !{i64 16829514}
!5259 = !{i64 16829520}
!5260 = !{i64 16829593}
!5261 = !{i64 16829650}
!5262 = !{i64 16829697}
!5263 = !{i64 16829767}
!5264 = !{i64 16829883}
!5265 = !{i64 16829904}
!5266 = !{i64 16829947}
!5267 = !{i64 16829950}
!5268 = !{i64 16829959}
!5269 = !{i64 16829962}
!5270 = !{i64 16829966}
!5271 = !{i64 16829970}
!5272 = !{i64 16830881}
!5273 = !{i64 16830884}
!5274 = !{i64 16830889}
!5275 = !{i64 16830891}
!5276 = !{i64 16830898}
!5277 = !{i64 16830873}
!5278 = !{i64 16830900}
!5279 = !{i64 16830906}
!5280 = !{i64 16830915}
!5281 = !{i64 16830920}
!5282 = !{i64 16830936}
!5283 = !{i64 16830938}
!5284 = !{i64 16830943}
!5285 = !{i64 16830947}
!5286 = !{i64 16830950}
!5287 = !{i64 16830958}
!5288 = !{i64 16830961}
!5289 = !{i64 16830966}
!5290 = !{i64 16830989}
!5291 = !{i64 16830991}
!5292 = !{i64 16830994}
!5293 = !{i64 16831002}
!5294 = !{i64 16831010}
!5295 = !{i64 16831015}
!5296 = !{i64 16831018}
!5297 = !{i64 16831026}
!5298 = !{i64 16831031}
!5299 = !{i64 16831033}
!5300 = !{i64 16831040}
!5301 = !{i64 16831043}
!5302 = !{i64 16831090}
!5303 = !{i64 16831138}
!5304 = !{i64 16831147}
!5305 = !{i64 16831162}
!5306 = !{i64 16831176}
!5307 = !{i64 16831185}
!5308 = !{i64 16831221}
!5309 = !{i64 16831356}
!5310 = !{i64 16831425}
!5311 = !{i64 16831427}
!5312 = !{i64 16831433}
!5313 = !{i64 16831491}
!5314 = !{i64 16831493}
!5315 = !{i64 16831499}
!5316 = !{i64 16831656}
!5317 = !{i64 16831663}
!5318 = !{i64 16831664}
!5319 = !{i64 16831665}
!5320 = !{i64 16831672}
!5321 = !{i64 16831681}
!5322 = !{i64 16831684}
!5323 = !{i64 16831689}
!5324 = !{i64 16831691}
!5325 = !{i64 16831693}
!5326 = !{i64 16831696}
!5327 = !{i64 16831699}
!5328 = !{i64 16831703}
!5329 = !{i64 16831706}
!5330 = !{i64 16831709}
!5331 = !{i64 16831712}
!5332 = !{i64 16831715}
!5333 = !{i64 16831721}
!5334 = !{i64 16831722}
!5335 = !{i64 16831730}
!5336 = !{i64 16831738}
!5337 = !{i64 16831740}
!5338 = !{i64 16831743}
!5339 = !{i64 16831746}
!5340 = !{i64 16831748}
!5341 = !{i64 16831753}
!5342 = !{i64 16831759}
!5343 = !{i64 16831766}
!5344 = !{i64 16831767}
!5345 = !{i64 16831768}
!5346 = !{i64 16831774}
!5347 = !{i64 16831782}
!5348 = !{i64 16831788}
!5349 = !{i64 16831791}
!5350 = !{i64 16831794}
!5351 = !{i64 16831799}
!5352 = !{i64 16831802}
!5353 = !{i64 16831809}
!5354 = !{i64 16831811}
!5355 = !{i64 16831814}
!5356 = !{i64 16831817}
!5357 = !{i64 16831818}
!5358 = !{i64 16831821}
!5359 = !{i64 16831827}
!5360 = !{i64 16831831}
!5361 = !{i64 16831833}
!5362 = !{i64 16831834}
!5363 = !{i64 16831839}
!5364 = !{i64 16831845}
!5365 = !{i64 16831847}
!5366 = !{i64 16831852}
!5367 = !{i64 16831854}
!5368 = !{i64 16831856}
!5369 = !{i64 16831871}
!5370 = !{i64 16831872}
!5371 = !{i64 16831874}
!5372 = !{i64 16831880}
!5373 = !{i64 16831889}
!5374 = !{i64 16831968}
!5375 = !{i64 16831986}
!5376 = !{i64 16831989}
!5377 = !{i64 16831995}
!5378 = !{i64 16832000}
!5379 = !{i64 16832001}
!5380 = !{i64 16832002}
!5381 = !{i64 16831987}
!5382 = !{i64 16832004}
!5383 = !{i64 16832008}
!5384 = !{i64 16832042}
!5385 = !{i64 16832066}
!5386 = !{i64 16832075}
!5387 = !{i64 16832078}
!5388 = !{i64 16832081}
!5389 = !{i64 16832115}
!5390 = !{i64 16832130}
!5391 = !{i64 16832134}
!5392 = !{i64 16832139}
!5393 = !{i64 16832151}
!5394 = !{i64 16832260}
!5395 = !{i64 16832262}
!5396 = !{i64 16832264}
!5397 = !{i64 16832265}
!5398 = !{i64 16832278}
!5399 = !{i64 16832280}
!5400 = !{i64 16832281}
!5401 = !{i64 16832292}
!5402 = !{i64 16832305}
!5403 = !{i64 16832307}
!5404 = !{i64 16832315}
!5405 = !{i64 16832409}
!5406 = !{i64 16832481}
!5407 = !{i64 16832495}
!5408 = !{i64 16832524}
!5409 = !{i64 16832560}
!5410 = !{i64 16832608}
!5411 = !{i64 16832611}
!5412 = !{i64 16832628}
!5413 = !{i64 16832633}
!5414 = !{i64 16832637}
!5415 = !{i64 16832645}
!5416 = !{i64 16832651}
!5417 = !{i64 16832655}
!5418 = !{i64 16832663}
!5419 = !{i64 16832666}
!5420 = !{i64 16832670}
!5421 = !{i64 16832678}
!5422 = !{i64 16832788}
!5423 = !{i64 16832791}
!5424 = !{i64 16832793}
!5425 = !{i64 16832798}
!5426 = !{i64 16832805}
!5427 = !{i64 16832810}
!5428 = !{i64 16832813}
!5429 = !{i64 16832831}
!5430 = !{i64 16832839}
!5431 = !{i64 16832842}
!5432 = !{i64 16832857}
!5433 = !{i64 16832950}
!5434 = !{i64 16832971}
!5435 = !{i64 16832974}
!5436 = !{i64 16832981}
!5437 = !{i64 16832951}
!5438 = !{i64 16832953}
!5439 = !{i64 16832954}
!5440 = !{i64 16832955}
!5441 = !{i64 16832958}
!5442 = !{i64 16832961}
!5443 = !{i64 16832969}
!5444 = !{i64 16832977}
!5445 = !{i64 16832978}
!5446 = !{i64 16832979}
!5447 = !{i64 16832989}
!5448 = !{i64 16832996}
!5449 = !{i64 16832998}
!5450 = !{i64 16833005}
!5451 = !{i64 16833014}
!5452 = !{i64 16833019}
!5453 = !{i64 16833022}
!5454 = !{i64 16833027}
!5455 = !{i64 16833030}
!5456 = !{i64 16833034}
!5457 = !{i64 16833040}
!5458 = !{i64 16833042}
!5459 = !{i64 16833047}
!5460 = !{i64 16833049}
!5461 = !{i64 16833052}
!5462 = !{i64 16833057}
!5463 = !{i64 16833060}
!5464 = !{i64 16833062}
!5465 = !{i64 16833064}
!5466 = !{i64 16833065}
!5467 = !{i64 16833068}
!5468 = !{i64 16833073}
!5469 = !{i64 16833075}
!5470 = !{i64 16833084}
!5471 = !{i64 16833090}
!5472 = !{i64 16833093}
!5473 = !{i64 16833096}
!5474 = !{i64 16833098}
!5475 = !{i64 16833101}
!5476 = !{i64 16833102}
!5477 = !{i64 16833108}
!5478 = !{i64 16833123}
!5479 = !{i64 16833125}
!5480 = !{i64 16833114}
!5481 = !{i64 16833199}
!5482 = !{i64 16833206}
!5483 = !{i64 16833214}
!5484 = !{i64 16833267}
!5485 = !{i64 16833269}
!5486 = !{i64 16833275}
!5487 = !{i64 16833279}
!5488 = !{i64 16833282}
!5489 = !{i64 16833320}
!5490 = !{i64 16833339}
!5491 = !{i64 16833367}
!5492 = !{i64 16833373}
!5493 = !{i64 16833375}
!5494 = !{i64 16833382}
!5495 = !{i64 16833389}
!5496 = !{i64 16833398}
!5497 = !{i64 16833400}
!5498 = !{i64 16833412}
!5499 = !{i64 16833413}
!5500 = !{i64 16833418}
!5501 = !{i64 16833428}
!5502 = !{i64 16833433}
!5503 = !{i64 16833435}
!5504 = !{i64 16833441}
!5505 = !{i64 16833442}
!5506 = !{i64 16833444}
!5507 = !{i64 16833407}
!5508 = !{i64 16833410}
!5509 = !{i64 16833447}
!5510 = !{i64 16833453}
!5511 = !{i64 16833455}
!5512 = !{i64 16833462}
!5513 = !{i64 16833470}
!5514 = !{i64 16833472}
!5515 = !{i64 16833476}
!5516 = !{i64 16833477}
!5517 = !{i64 16833541}
!5518 = !{i64 16833543}
!5519 = !{i64 16833549}
!5520 = !{i64 16833553}
!5521 = !{i64 16833556}
!5522 = !{i64 16833558}
!5523 = !{i64 16833570}
!5524 = !{i64 16833584}
!5525 = !{i64 16833577}
!5526 = !{i64 16833589}
!5527 = !{i64 16833592}
!5528 = !{i64 16833599}
!5529 = !{i64 16833619}
!5530 = !{i64 16833622}
!5531 = !{i64 16833637}
!5532 = !{i64 16833676}
!5533 = !{i64 16833682}
!5534 = !{i64 16833684}
!5535 = !{i64 16833690}
!5536 = !{i64 16833718}
!5537 = !{i64 16833790}
!5538 = !{i64 16833933}
!5539 = !{i64 16833940}
!5540 = !{i64 16833956}
!5541 = !{i64 16833964}
!5542 = !{i64 16834019}
!5543 = !{i64 16834036}
!5544 = !{i64 16834111}
!5545 = !{i64 16834183}
!5546 = !{i64 16834247}
!5547 = !{i64 16834250}
!5548 = !{i64 16834251}
!5549 = !{i64 16834254}
!5550 = !{i64 16834261}
!5551 = !{i64 16834271}
!5552 = !{i64 16834276}
!5553 = !{i64 16834279}
!5554 = !{i64 16834282}
!5555 = !{i64 16834287}
!5556 = !{i64 16834291}
!5557 = !{i64 16834294}
!5558 = !{i64 16834298}
!5559 = !{i64 16834303}
!5560 = !{i64 16834310}
!5561 = !{i64 16834316}
!5562 = !{i64 16834321}
!5563 = !{i64 16834326}
!5564 = !{i64 16834330}
!5565 = !{i64 16834324}
!5566 = !{i64 16834344}
!5567 = !{i64 16834367}
!5568 = !{i64 16834372}
!5569 = !{i64 16834378}
!5570 = !{i64 16834380}
!5571 = !{i64 16834342}
!5572 = !{i64 16834375}
!5573 = !{i64 16834390}
!5574 = !{i64 16834396}
!5575 = !{i64 16834403}
!5576 = !{i64 16834409}
!5577 = !{i64 16834412}
!5578 = !{i64 16834415}
!5579 = !{i64 16834418}
!5580 = !{i64 16834423}
!5581 = !{i64 16834469}
!5582 = !{i64 16834477}
!5583 = !{i64 16834481}
!5584 = !{i64 16834486}
!5585 = !{i64 16834491}
!5586 = !{i64 16834494}
!5587 = !{i64 16834502}
!5588 = !{i64 16834508}
!5589 = !{i64 16834515}
!5590 = !{i64 16834520}
!5591 = !{i64 16834524}
!5592 = !{i64 16834526}
!5593 = !{i64 16834531}
!5594 = !{i64 16834536}
!5595 = !{i64 16834540}
!5596 = !{i64 16834559}
!5597 = !{i64 16834566}
!5598 = !{i64 16834569}
!5599 = !{i64 16834571}
!5600 = !{i64 16834643}
!5601 = !{i64 16834703}
!5602 = !{i64 16834726}
!5603 = !{i64 16834730}
!5604 = !{i64 16834734}
!5605 = !{i64 16834739}
!5606 = !{i64 16834742}
!5607 = !{i64 16834761}
!5608 = !{i64 16834763}
!5609 = !{i64 16834765}
!5610 = !{i64 16834777}
!5611 = !{i64 16834787}
!5612 = !{i64 16834799}
!5613 = !{i64 16834802}
!5614 = !{i64 16834808}
!5615 = !{i64 16834809}
!5616 = !{i64 16834818}
!5617 = !{i64 16834823}
!5618 = !{i64 16834826}
!5619 = !{i64 16834831}
!5620 = !{i64 16834834}
!5621 = !{i64 16834855}
!5622 = !{i64 16834857}
!5623 = !{i64 16834891}
!5624 = !{i64 16834969}
!5625 = !{i64 16835053}
!5626 = !{i64 16835057}
!5627 = !{i64 16835058}
!5628 = !{i64 16835136}
!5629 = !{i64 16835155}
!5630 = !{i64 16835161}
!5631 = !{i64 16835204}
!5632 = !{i64 16835207}
!5633 = !{i64 16835212}
!5634 = !{i64 16835217}
!5635 = !{i64 16835222}
!5636 = !{i64 16835228}
!5637 = !{i64 16835232}
!5638 = !{i64 16835237}
!5639 = !{i64 16835240}
!5640 = !{i64 16835244}
!5641 = !{i64 16835249}
!5642 = !{i64 16835253}
!5643 = !{i64 16835259}
!5644 = !{i64 16835276}
!5645 = !{i64 16835284}
!5646 = !{i64 16835287}
!5647 = !{i64 16835294}
!5648 = !{i64 16835299}
!5649 = !{i64 16835309}
!5650 = !{i64 16835314}
!5651 = !{i64 16835318}
!5652 = !{i64 16835321}
!5653 = !{i64 16835322}
!5654 = !{i64 16835326}
!5655 = !{i64 16835332}
!5656 = !{i64 16835339}
!5657 = !{i64 16835341}
!5658 = !{i64 16835346}
!5659 = !{i64 16835352}
!5660 = !{i64 16835356}
!5661 = !{i64 16835359}
!5662 = !{i64 16835368}
!5663 = !{i64 16835369}
!5664 = !{i64 16835371}
!5665 = !{i64 16835373}
!5666 = !{i64 16835456}
!5667 = !{i64 16835593}
!5668 = !{i64 16835598}
!5669 = !{i64 16835655}
!5670 = !{i64 16835692}
!5671 = !{i64 16835699}
!5672 = !{i64 16835700}
!5673 = !{i64 16835714}
!5674 = !{i64 16835722}
!5675 = !{i64 16835725}
!5676 = !{i64 16835730}
!5677 = !{i64 16835733}
!5678 = !{i64 16835736}
!5679 = !{i64 16835738}
!5680 = !{i64 16835744}
!5681 = !{i64 16835748}
!5682 = !{i64 16835762}
!5683 = !{i64 16835771}
!5684 = !{i64 16835773}
!5685 = !{i64 16835794}
!5686 = !{i64 16835797}
!5687 = !{i64 16835801}
!5688 = !{i64 16835698}
!5689 = !{i64 16835768}
!5690 = !{i64 16835784}
!5691 = !{i64 16835809}
!5692 = !{i64 16835822}
!5693 = !{i64 16835824}
!5694 = !{i64 16835833}
!5695 = !{i64 16835841}
!5696 = !{i64 16835843}
!5697 = !{i64 16835846}
!5698 = !{i64 16835856}
!5699 = !{i64 16835859}
!5700 = !{i64 16835874}
!5701 = !{i64 16835878}
!5702 = !{i64 16835881}
!5703 = !{i64 16835884}
!5704 = !{i64 16835888}
!5705 = !{i64 16835892}
!5706 = !{i64 16835895}
!5707 = !{i64 16835906}
!5708 = !{i64 16835911}
!5709 = !{i64 16835914}
!5710 = !{i64 16835917}
!5711 = !{i64 16835922}
!5712 = !{i64 16835930}
!5713 = !{i64 16835932}
!5714 = !{i64 16835937}
!5715 = !{i64 16835939}
!5716 = !{i64 16835945}
!5717 = !{i64 16835947}
!5718 = !{i64 16835949}
!5719 = !{i64 16835959}
!5720 = !{i64 16835962}
!5721 = !{i64 16835964}
!5722 = !{i64 16835971}
!5723 = !{i64 16835976}
!5724 = !{i64 16835979}
!5725 = !{i64 16835984}
!5726 = !{i64 16835993}
!5727 = !{i64 16835998}
!5728 = !{i64 16836003}
!5729 = !{i64 16836006}
!5730 = !{i64 16836009}
!5731 = !{i64 16836012}
!5732 = !{i64 16836014}
!5733 = !{i64 16836017}
!5734 = !{i64 16836025}
!5735 = !{i64 16836027}
!5736 = !{i64 16836032}
!5737 = !{i64 16836035}
!5738 = !{i64 16836059}
!5739 = !{i64 16836062}
!5740 = !{i64 16836118}
!5741 = !{i64 16836173}
!5742 = !{i64 16836179}
!5743 = !{i64 16836181}
!5744 = !{i64 16836254}
!5745 = !{i64 16836282}
!5746 = !{i64 16836288}
!5747 = !{i64 16836290}
!5748 = !{i64 16836295}
!5749 = !{i64 16836319}
!5750 = !{i64 16836325}
!5751 = !{i64 16836341}
!5752 = !{i64 16836344}
!5753 = !{i64 16836352}
!5754 = !{i64 16836353}
!5755 = !{i64 16836363}
!5756 = !{i64 16836366}
!5757 = !{i64 16836404}
!5758 = !{i64 16836407}
!5759 = !{i64 16836416}
!5760 = !{i64 16836419}
!5761 = !{i64 16836430}
!5762 = !{i64 16836440}
!5763 = !{i64 16836442}
!5764 = !{i64 16836445}
!5765 = !{i64 16836448}
!5766 = !{i64 16836453}
!5767 = !{i64 16836456}
!5768 = !{i64 16836462}
!5769 = !{i64 16836474}
!5770 = !{i64 16836476}
!5771 = !{i64 16836498}
!5772 = !{i64 16836503}
!5773 = !{i64 16836587}
!5774 = !{i64 16836592}
!5775 = !{i64 16836596}
!5776 = !{i64 16836598}
!5777 = !{i64 16836605}
!5778 = !{i64 16836608}
!5779 = !{i64 16836613}
!5780 = !{i64 16836621}
!5781 = !{i64 16836632}
!5782 = !{i64 16836634}
!5783 = !{i64 16836638}
!5784 = !{i64 16836642}
!5785 = !{i64 16836650}
!5786 = !{i64 16836689}
!5787 = !{i64 16836735}
!5788 = !{i64 16836779}
!5789 = !{i64 16836823}
!5790 = !{i64 16836829}
!5791 = !{i64 16836831}
!5792 = !{i64 16836860}
!5793 = !{i64 16836991}
!5794 = !{i64 16836993}
!5795 = !{i64 16836994}
!5796 = !{i64 16836995}
!5797 = !{i64 16837000}
!5798 = !{i64 16837008}
!5799 = !{i64 16837040}
!5800 = !{i64 16837043}
!5801 = !{i64 16837048}
!5802 = !{i64 16837051}
!5803 = !{i64 16837059}
!5804 = !{i64 16837062}
!5805 = !{i64 16837066}
!5806 = !{i64 16837097}
!5807 = !{i64 16837104}
!5808 = !{i64 16837108}
!5809 = !{i64 16837118}
!5810 = !{i64 16837120}
!5811 = !{i64 16837121}
!5812 = !{i64 16837148}
!5813 = !{i64 16837163}
!5814 = !{i64 16837178}
!5815 = !{i64 16837185}
!5816 = !{i64 16837188}
!5817 = !{i64 16837205}
!5818 = !{i64 16837209}
!5819 = !{i64 16837215}
!5820 = !{i64 16837221}
!5821 = !{i64 16837227}
!5822 = !{i64 16837230}
!5823 = !{i64 16837235}
!5824 = !{i64 16837244}
!5825 = !{i64 16837246}
!5826 = !{i64 16837249}
!5827 = !{i64 16837250}
!5828 = !{i64 16837252}
!5829 = !{i64 16837263}
!5830 = !{i64 16837265}
!5831 = !{i64 16837271}
!5832 = !{i64 16837274}
!5833 = !{i64 16837279}
!5834 = !{i64 16837284}
!5835 = !{i64 16837291}
!5836 = !{i64 16837296}
!5837 = !{i64 16837298}
!5838 = !{i64 16837262}
!5839 = !{i64 16837305}
!5840 = !{i64 16837308}
!5841 = !{i64 16837313}
!5842 = !{i64 16837317}
!5843 = !{i64 16837319}
!5844 = !{i64 16837326}
!5845 = !{i64 16837328}
!5846 = !{i64 16837330}
!5847 = !{i64 16837332}
!5848 = !{i64 16837339}
!5849 = !{i64 16837350}
!5850 = !{i64 16837351}
!5851 = !{i64 16837353}
!5852 = !{i64 16837355}
!5853 = !{i64 16837357}
!5854 = !{i64 16837362}
!5855 = !{i64 16837370}
!5856 = !{i64 16837358}
!5857 = !{i64 16837373}
!5858 = !{i64 16837376}
!5859 = !{i64 16837384}
!5860 = !{i64 16837389}
!5861 = !{i64 16837392}
!5862 = !{i64 16837396}
!5863 = !{i64 16837399}
!5864 = !{i64 16837400}
!5865 = !{i64 16837402}
!5866 = !{i64 16837409}
!5867 = !{i64 16837412}
!5868 = !{i64 16837413}
!5869 = !{i64 16837414}
!5870 = !{i64 16837416}
!5871 = !{i64 16837426}
!5872 = !{i64 16837434}
!5873 = !{i64 16837438}
!5874 = !{i64 16837439}
!5875 = !{i64 16837448}
!5876 = !{i64 16837450}
!5877 = !{i64 16837461}
!5878 = !{i64 16837463}
!5879 = !{i64 16837469}
!5880 = !{i64 16837522}
!5881 = !{i64 16837616}
!5882 = !{i64 16837633}
!5883 = !{i64 16837639}
!5884 = !{i64 16837651}
!5885 = !{i64 16837652}
!5886 = !{i64 16837658}
!5887 = !{i64 16837686}
!5888 = !{i64 16837689}
!5889 = !{i64 16837692}
!5890 = !{i64 16837694}
!5891 = !{i64 16837697}
!5892 = !{i64 16837699}
!5893 = !{i64 16837702}
!5894 = !{i64 16837703}
!5895 = !{i64 16837709}
!5896 = !{i64 16837712}
!5897 = !{i64 16837718}
!5898 = !{i64 16837720}
!5899 = !{i64 16837725}
!5900 = !{i64 16837728}
!5901 = !{i64 16837763}
!5902 = !{i64 16837869}
!5903 = !{i64 16837874}
!5904 = !{i64 16837882}
!5905 = !{i64 16837887}
!5906 = !{i64 16837890}
!5907 = !{i64 16837912}
!5908 = !{i64 16837914}
!5909 = !{i64 16837919}
!5910 = !{i64 16837928}
!5911 = !{i64 16837932}
!5912 = !{i64 16837938}
!5913 = !{i64 16837941}
!5914 = !{i64 16837946}
!5915 = !{i64 16837948}
!5916 = !{i64 16837949}
!5917 = !{i64 16837955}
!5918 = !{i64 16838004}
!5919 = !{i64 16838006}
!5920 = !{i64 16838016}
!5921 = !{i64 16838018}
!5922 = !{i64 16838030}
!5923 = !{i64 16838032}
!5924 = !{i64 16838037}
!5925 = !{i64 16838109}
!5926 = !{i64 16838125}
!5927 = !{i64 16838131}
!5928 = !{i64 16838133}
!5929 = !{i64 16838137}
!5930 = !{i64 16838146}
!5931 = !{i64 16838157}
!5932 = !{i64 16838161}
!5933 = !{i64 16838166}
!5934 = !{i64 16838183}
!5935 = !{i64 16838200}
!5936 = !{i64 16838202}
!5937 = !{i64 16838204}
!5938 = !{i64 16838207}
!5939 = !{i64 16838215}
!5940 = !{i64 16838223}
!5941 = !{i64 16838226}
!5942 = !{i64 16838227}
!5943 = !{i64 16838233}
!5944 = !{i64 16838332}
!5945 = !{i64 16838334}
!5946 = !{i64 16838335}
!5947 = !{i64 16838339}
!5948 = !{i64 16838236}
!5949 = !{i64 16838342}
!5950 = !{i64 16838355}
!5951 = !{i64 16838356}
!5952 = !{i64 16838361}
!5953 = !{i64 16838365}
!5954 = !{i64 16838369}
!5955 = !{i64 16838370}
!5956 = !{i64 16838371}
!5957 = !{i64 16838403}
!5958 = !{i64 16838413}
!5959 = !{i64 16838415}
!5960 = !{i64 16838427}
!5961 = !{i64 16838430}
!5962 = !{i64 16838433}
!5963 = !{i64 16838438}
!5964 = !{i64 16838445}
!5965 = !{i64 16838449}
!5966 = !{i64 16838450}
!5967 = !{i64 16838452}
!5968 = !{i64 16838454}
!5969 = !{i64 16838462}
!5970 = !{i64 16838467}
!5971 = !{i64 16838472}
!5972 = !{i64 16838481}
!5973 = !{i64 16838487}
!5974 = !{i64 16838488}
!5975 = !{i64 16838459}
!5976 = !{i64 16838494}
!5977 = !{i64 16838498}
!5978 = !{i64 16838500}
!5979 = !{i64 16838508}
!5980 = !{i64 16838511}
!5981 = !{i64 16838518}
!5982 = !{i64 16838522}
!5983 = !{i64 16838525}
!5984 = !{i64 16838539}
!5985 = !{i64 16838548}
!5986 = !{i64 16838555}
!5987 = !{i64 16838558}
!5988 = !{i64 16838572}
!5989 = !{i64 16838573}
!5990 = !{i64 16838574}
!5991 = !{i64 16838581}
!5992 = !{i64 16838597}
!5993 = !{i64 16838621}
!5994 = !{i64 16838639}
!5995 = !{i64 16838707}
!5996 = !{i64 16838714}
!5997 = !{i64 16838720}
!5998 = !{i64 16838724}
!5999 = !{i64 16838729}
!6000 = !{i64 16838732}
!6001 = !{i64 16838735}
!6002 = !{i64 16838739}
!6003 = !{i64 16838744}
!6004 = !{i64 16838751}
!6005 = !{i64 16838756}
!6006 = !{i64 16838759}
!6007 = !{i64 16838761}
!6008 = !{i64 16838766}
!6009 = !{i64 16838768}
!6010 = !{i64 16838851}
!6011 = !{i64 16838770}
!6012 = !{i64 16838779}
!6013 = !{i64 16838784}
!6014 = !{i64 16838787}
!6015 = !{i64 16838794}
!6016 = !{i64 16838789}
!6017 = !{i64 16838792}
!6018 = !{i64 16838800}
!6019 = !{i64 16838802}
!6020 = !{i64 16838807}
!6021 = !{i64 16838809}
!6022 = !{i64 16838821}
!6023 = !{i64 16838829}
!6024 = !{i64 16838832}
!6025 = !{i64 16838835}
!6026 = !{i64 16838843}
!6027 = !{i64 16838853}
!6028 = !{i64 16838856}
!6029 = !{i64 16838864}
!6030 = !{i64 16838865}
!6031 = !{i64 16838874}
!6032 = !{i64 16838877}
!6033 = !{i64 16838881}
!6034 = !{i64 16838892}
!6035 = !{i64 16838905}
!6036 = !{i64 16838908}
!6037 = !{i64 16838914}
!6038 = !{i64 16838923}
!6039 = !{i64 16838928}
!6040 = !{i64 16839006}
!6041 = !{i64 16839078}
!6042 = !{i64 16839091}
!6043 = !{i64 16839117}
!6044 = !{i64 16839121}
!6045 = !{i64 16839129}
!6046 = !{i64 16839140}
!6047 = !{i64 16839143}
!6048 = !{i64 16839148}
!6049 = !{i64 16839149}
!6050 = !{i64 16839154}
!6051 = !{i64 16839160}
!6052 = !{i64 16839163}
!6053 = !{i64 16839169}
!6054 = !{i64 16839175}
!6055 = !{i64 16839178}
!6056 = !{i64 16839213}
!6057 = !{i64 16839221}
!6058 = !{i64 16839224}
!6059 = !{i64 16839226}
!6060 = !{i64 16839242}
!6061 = !{i64 16839247}
!6062 = !{i64 16839258}
!6063 = !{i64 16839261}
!6064 = !{i64 16839268}
!6065 = !{i64 16839284}
!6066 = !{i64 16839291}
!6067 = !{i64 16839294}
!6068 = !{i64 16839296}
!6069 = !{i64 16839298}
!6070 = !{i64 16839299}
!6071 = !{i64 16839301}
!6072 = !{i64 16839311}
!6073 = !{i64 16839314}
!6074 = !{i64 16839316}
!6075 = !{i64 16839320}
!6076 = !{i64 16839322}
!6077 = !{i64 16839325}
!6078 = !{i64 16839328}
!6079 = !{i64 16839331}
!6080 = !{i64 16839336}
!6081 = !{i64 16839339}
!6082 = !{i64 16839340}
!6083 = !{i64 16839345}
!6084 = !{i64 16839350}
!6085 = !{i64 16839355}
!6086 = !{i64 16839358}
!6087 = !{i64 16839363}
!6088 = !{i64 16839366}
!6089 = !{i64 16839368}
!6090 = !{i64 16839373}
!6091 = !{i64 16839376}
!6092 = !{i64 16839379}
!6093 = !{i64 16839381}
!6094 = !{i64 16839383}
!6095 = !{i64 16839385}
!6096 = !{i64 16839393}
!6097 = !{i64 16839396}
!6098 = !{i64 16839398}
!6099 = !{i64 16839400}
!6100 = !{i64 16839402}
!6101 = !{i64 16839405}
!6102 = !{i64 16839408}
!6103 = !{i64 16839415}
!6104 = !{i64 16839421}
!6105 = !{i64 16839423}
!6106 = !{i64 16839429}
!6107 = !{i64 16839438}
!6108 = !{i64 16839439}
!6109 = !{i64 16839446}
!6110 = !{i64 16839449}
!6111 = !{i64 16839453}
!6112 = !{i64 16839459}
!6113 = !{i64 16839330}
!6114 = !{i64 16839462}
!6115 = !{i64 16839475}
!6116 = !{i64 16839478}
!6117 = !{i64 16839485}
!6118 = !{i64 16839487}
!6119 = !{i64 16839494}
!6120 = !{i64 16839500}
!6121 = !{i64 16839503}
!6122 = !{i64 16839504}
!6123 = !{i64 16839509}
!6124 = !{i64 16839513}
!6125 = !{i64 16839522}
!6126 = !{i64 16839534}
!6127 = !{i64 16839546}
!6128 = !{i64 16839548}
!6129 = !{i64 16839550}
!6130 = !{i64 16839559}
!6131 = !{i64 16839567}
!6132 = !{i64 16839569}
!6133 = !{i64 16839573}
!6134 = !{i64 16839574}
!6135 = !{i64 16839628}
!6136 = !{i64 16839636}
!6137 = !{i64 16839643}
!6138 = !{i64 16839646}
!6139 = !{i64 16839649}
!6140 = !{i64 16839655}
!6141 = !{i64 16839663}
!6142 = !{i64 16839674}
!6143 = !{i64 16839677}
!6144 = !{i64 16839683}
!6145 = !{i64 16839689}
!6146 = !{i64 16839694}
!6147 = !{i64 16839725}
!6148 = !{i64 16839792}
!6149 = !{i64 16839797}
!6150 = !{i64 16839802}
!6151 = !{i64 16839806}
!6152 = !{i64 16839819}
!6153 = !{i64 16839830}
!6154 = !{i64 16839842}
!6155 = !{i64 16839836}
!6156 = !{i64 16839846}
!6157 = !{i64 16839848}
!6158 = !{i64 16839856}
!6159 = !{i64 16839862}
!6160 = !{i64 16839867}
!6161 = !{i64 16839870}
!6162 = !{i64 16839875}
!6163 = !{i64 16839885}
!6164 = !{i64 16839888}
!6165 = !{i64 16839890}
!6166 = !{i64 16839903}
!6167 = !{i64 16839907}
!6168 = !{i64 16839909}
!6169 = !{i64 16839927}
!6170 = !{i64 16839934}
!6171 = !{i64 16839938}
!6172 = !{i64 16839943}
!6173 = !{i64 16839948}
!6174 = !{i64 16839950}
!6175 = !{i64 16839957}
!6176 = !{i64 16839966}
!6177 = !{i64 16839974}
!6178 = !{i64 16839975}
!6179 = !{i64 16839984}
!6180 = !{i64 16839986}
!6181 = !{i64 16839990}
!6182 = !{i64 16839992}
!6183 = !{i64 16839994}
!6184 = !{i64 16839996}
!6185 = !{i64 16840000}
!6186 = !{i64 16840004}
!6187 = !{i64 16840009}
!6188 = !{i64 16840011}
!6189 = !{i64 16840012}
!6190 = !{i64 16840015}
!6191 = !{i64 16840020}
!6192 = !{i64 16840028}
!6193 = !{i64 16840034}
!6194 = !{i64 16840039}
!6195 = !{i64 16840042}
!6196 = !{i64 16840045}
!6197 = !{i64 16840051}
!6198 = !{i64 16840055}
!6199 = !{i64 16840057}
!6200 = !{i64 16840060}
!6201 = !{i64 16840072}
!6202 = !{i64 16840075}
!6203 = !{i64 16840077}
!6204 = !{i64 16840078}
!6205 = !{i64 16840079}
!6206 = !{i64 16840090}
!6207 = !{i64 16840093}
!6208 = !{i64 16840095}
!6209 = !{i64 16840098}
!6210 = !{i64 16840105}
!6211 = !{i64 16840113}
!6212 = !{i64 16840118}
!6213 = !{i64 16840121}
!6214 = !{i64 16840145}
!6215 = !{i64 16840149}
!6216 = !{i64 16840151}
!6217 = !{i64 16840162}
!6218 = !{i64 16840166}
!6219 = !{i64 16840178}
!6220 = !{i64 16840179}
!6221 = !{i64 16840185}
!6222 = !{i64 16840176}
!6223 = !{i64 16840200}
!6224 = !{i64 16840209}
!6225 = !{i64 16840211}
!6226 = !{i64 16840219}
!6227 = !{i64 16840223}
!6228 = !{i64 16840232}
!6229 = !{i64 16840253}
!6230 = !{i64 16840255}
!6231 = !{i64 16840262}
!6232 = !{i64 16840292}
!6233 = !{i64 16840298}
!6234 = !{i64 16840301}
!6235 = !{i64 16840307}
!6236 = !{i64 16840308}
!6237 = !{i64 16840311}
!6238 = !{i64 16840312}
!6239 = !{i64 16840317}
!6240 = !{i64 16840322}
!6241 = !{i64 16840325}
!6242 = !{i64 16840326}
!6243 = !{i64 16840329}
!6244 = !{i64 16840330}
!6245 = !{i64 16840332}
!6246 = !{i64 16840334}
!6247 = !{i64 16840336}
!6248 = !{i64 16840342}
!6249 = !{i64 16840347}
!6250 = !{i64 16840348}
!6251 = !{i64 16840353}
!6252 = !{i64 16840356}
!6253 = !{i64 16840357}
!6254 = !{i64 16840363}
!6255 = !{i64 16840368}
!6256 = !{i64 16840371}
!6257 = !{i64 16840374}
!6258 = !{i64 16840487}
!6259 = !{i64 16840498}
!6260 = !{i64 16840504}
!6261 = !{i64 16840508}
!6262 = !{i64 16840512}
!6263 = !{i64 16840518}
!6264 = !{i64 16840519}
!6265 = !{i64 16840525}
!6266 = !{i64 16840528}
!6267 = !{i64 16840530}
!6268 = !{i64 16840533}
!6269 = !{i64 16840543}
!6270 = !{i64 16840544}
!6271 = !{i64 16840546}
!6272 = !{i64 16840548}
!6273 = !{i64 16840554}
!6274 = !{i64 16840557}
!6275 = !{i64 16840562}
!6276 = !{i64 16840565}
!6277 = !{i64 16840570}
!6278 = !{i64 16840573}
!6279 = !{i64 16840582}
!6280 = !{i64 16840583}
!6281 = !{i64 16840587}
!6282 = !{i64 16840592}
!6283 = !{i64 16840595}
!6284 = !{i64 16840597}
!6285 = !{i64 16840600}
!6286 = !{i64 16840602}
!6287 = !{i64 16840612}
!6288 = !{i64 16840617}
!6289 = !{i64 16840619}
!6290 = !{i64 16840623}
!6291 = !{i64 16840626}
!6292 = !{i64 16840638}
!6293 = !{i64 16840641}
!6294 = !{i64 16840646}
!6295 = !{i64 16840649}
!6296 = !{i64 16840652}
!6297 = !{i64 16840658}
!6298 = !{i64 16840666}
!6299 = !{i64 16840668}
!6300 = !{i64 16840672}
!6301 = !{i64 16840674}
!6302 = !{i64 16840677}
!6303 = !{i64 16840686}
!6304 = !{i64 16840695}
!6305 = !{i64 16840705}
!6306 = !{i64 16840707}
!6307 = !{i64 16840760}
!6308 = !{i64 16840766}
!6309 = !{i64 16840769}
!6310 = !{i64 16840781}
!6311 = !{i64 16840787}
!6312 = !{i64 16840789}
!6313 = !{i64 16840794}
!6314 = !{i64 16840795}
!6315 = !{i64 16840804}
!6316 = !{i64 16840812}
!6317 = !{i64 16840814}
!6318 = !{i64 16840817}
!6319 = !{i64 16840823}
!6320 = !{i64 16840830}
!6321 = !{i64 16840835}
!6322 = !{i64 16840837}
!6323 = !{i64 16840844}
!6324 = !{i64 16840848}
!6325 = !{i64 16840859}
!6326 = !{i64 16840860}
!6327 = !{i64 16840862}
!6328 = !{i64 16840865}
!6329 = !{i64 16840870}
!6330 = !{i64 16840871}
!6331 = !{i64 16840881}
!6332 = !{i64 16840923}
!6333 = !{i64 16840932}
!6334 = !{i64 16840934}
!6335 = !{i64 16840998}
!6336 = !{i64 16841001}
!6337 = !{i64 16841011}
!6338 = !{i64 16841014}
!6339 = !{i64 16841019}
!6340 = !{i64 16841021}
!6341 = !{i64 16841023}
!6342 = !{i64 16841024}
!6343 = !{i64 16841026}
!6344 = !{i64 16841035}
!6345 = !{i64 16841037}
!6346 = !{i64 16841045}
!6347 = !{i64 16841047}
!6348 = !{i64 16841050}
!6349 = !{i64 16841053}
!6350 = !{i64 16841058}
!6351 = !{i64 16841060}
!6352 = !{i64 16841061}
!6353 = !{i64 16841063}
!6354 = !{i64 16841066}
!6355 = !{i64 16841072}
!6356 = !{i64 16841075}
!6357 = !{i64 16841088}
!6358 = !{i64 16841089}
!6359 = !{i64 16841100}
!6360 = !{i64 16841104}
!6361 = !{i64 16841114}
!6362 = !{i64 16841123}
!6363 = !{i64 16841127}
!6364 = !{i64 16841130}
!6365 = !{i64 16841137}
!6366 = !{i64 16841150}
!6367 = !{i64 16841292}
!6368 = !{i64 16841301}
!6369 = !{i64 16841323}
!6370 = !{i64 16841326}
!6371 = !{i64 16841334}
!6372 = !{i64 16841336}
!6373 = !{i64 16841343}
!6374 = !{i64 16841345}
!6375 = !{i64 16841347}
!6376 = !{i64 16841353}
!6377 = !{i64 16841354}
!6378 = !{i64 16841372}
!6379 = !{i64 16841387}
!6380 = !{i64 16841403}
!6381 = !{i64 16841416}
!6382 = !{i64 16841418}
!6383 = !{i64 16841422}
!6384 = !{i64 16841426}
!6385 = !{i64 16841428}
!6386 = !{i64 16841431}
!6387 = !{i64 16841435}
!6388 = !{i64 16841444}
!6389 = !{i64 16841496}
!6390 = !{i64 16841506}
!6391 = !{i64 16841508}
!6392 = !{i64 16841516}
!6393 = !{i64 16841518}
!6394 = !{i64 16841526}
!6395 = !{i64 16841528}
!6396 = !{i64 16841533}
!6397 = !{i64 16841535}
!6398 = !{i64 16841538}
!6399 = !{i64 16841544}
!6400 = !{i64 16841550}
!6401 = !{i64 16841552}
!6402 = !{i64 16841554}
!6403 = !{i64 16841558}
!6404 = !{i64 16841566}
!6405 = !{i64 16841569}
!6406 = !{i64 16841572}
!6407 = !{i64 16841574}
!6408 = !{i64 16841578}
!6409 = !{i64 16841580}
!6410 = !{i64 16841575}
!6411 = !{i64 16841584}
!6412 = !{i64 16841587}
!6413 = !{i64 16841592}
!6414 = !{i64 16841594}
!6415 = !{i64 16841598}
!6416 = !{i64 16841605}
!6417 = !{i64 16841606}
!6418 = !{i64 16841610}
!6419 = !{i64 16841614}
!6420 = !{i64 16841616}
!6421 = !{i64 16841630}
!6422 = !{i64 16841632}
!6423 = !{i64 16841644}
!6424 = !{i64 16841645}
!6425 = !{i64 16841654}
!6426 = !{i64 16841656}
!6427 = !{i64 16841704}
!6428 = !{i64 16841732}
!6429 = !{i64 16841735}
!6430 = !{i64 16841743}
!6431 = !{i64 16841748}
!6432 = !{i64 16841755}
!6433 = !{i64 16841757}
!6434 = !{i64 16841763}
!6435 = !{i64 16841769}
!6436 = !{i64 16841774}
!6437 = !{i64 16841776}
!6438 = !{i64 16841786}
!6439 = !{i64 16841787}
!6440 = !{i64 16841795}
!6441 = !{i64 16841826}
!6442 = !{i64 16841834}
!6443 = !{i64 16841840}
!6444 = !{i64 16841847}
!6445 = !{i64 16841861}
!6446 = !{i64 16841848}
!6447 = !{i64 16841865}
!6448 = !{i64 16841873}
!6449 = !{i64 16841879}
!6450 = !{i64 16841855}
!6451 = !{i64 16841884}
!6452 = !{i64 16841888}
!6453 = !{i64 16841894}
!6454 = !{i64 16841898}
!6455 = !{i64 16841901}
!6456 = !{i64 16841903}
!6457 = !{i64 16841906}
!6458 = !{i64 16841909}
!6459 = !{i64 16841924}
!6460 = !{i64 16841925}
!6461 = !{i64 16841964}
!6462 = !{i64 16841982}
!6463 = !{i64 16841988}
!6464 = !{i64 16842007}
!6465 = !{i64 16842030}
!6466 = !{i64 16842032}
!6467 = !{i64 16842158}
!6468 = !{i64 16842167}
!6469 = !{i64 16842172}
!6470 = !{i64 16842182}
!6471 = !{i64 16842190}
!6472 = !{i64 16842196}
!6473 = !{i64 16842197}
!6474 = !{i64 16842199}
!6475 = !{i64 16842201}
!6476 = !{i64 16842231}
!6477 = !{i64 16842247}
!6478 = !{i64 16842249}
!6479 = !{i64 16842254}
!6480 = !{i64 16842257}
!6481 = !{i64 16842260}
!6482 = !{i64 16842268}
!6483 = !{i64 16842276}
!6484 = !{i64 16842280}
!6485 = !{i64 16842341}
!6486 = !{i64 16842375}
!6487 = !{i64 16842377}
!6488 = !{i64 16842383}
!6489 = !{i64 16842471}
!6490 = !{i64 16842473}
!6491 = !{i64 16842475}
!6492 = !{i64 16842476}
!6493 = !{i64 16842486}
!6494 = !{i64 16842493}
!6495 = !{i64 16842511}
!6496 = !{i64 16842515}
!6497 = !{i64 16842517}
!6498 = !{i64 16842519}
!6499 = !{i64 16842523}
!6500 = !{i64 16842528}
!6501 = !{i64 16842531}
!6502 = !{i64 16842533}
!6503 = !{i64 16842538}
!6504 = !{i64 16842540}
!6505 = !{i64 16842542}
!6506 = !{i64 16842545}
!6507 = !{i64 16842556}
!6508 = !{i64 16842565}
!6509 = !{i64 16842594}
!6510 = !{i64 16842597}
!6511 = !{i64 16842602}
!6512 = !{i64 16842607}
!6513 = !{i64 16842610}
!6514 = !{i64 16842619}
!6515 = !{i64 16842513}
!6516 = !{i64 16842623}
!6517 = !{i64 16842733}
!6518 = !{i64 16842747}
!6519 = !{i64 16842753}
!6520 = !{i64 16842758}
!6521 = !{i64 16842763}
!6522 = !{i64 16842777}
!6523 = !{i64 16842782}
!6524 = !{i64 16842785}
!6525 = !{i64 16842788}
!6526 = !{i64 16842793}
!6527 = !{i64 16842803}
!6528 = !{i64 16842806}
!6529 = !{i64 16842808}
!6530 = !{i64 16842817}
!6531 = !{i64 16842826}
!6532 = !{i64 16842827}
!6533 = !{i64 16842828}
!6534 = !{i64 16842831}
!6535 = !{i64 16842838}
!6536 = !{i64 16842847}
!6537 = !{i64 16842850}
!6538 = !{i64 16842855}
!6539 = !{i64 16842858}
!6540 = !{i64 16842876}
!6541 = !{i64 16842881}
!6542 = !{i64 16842885}
!6543 = !{i64 16842888}
!6544 = !{i64 16842897}
!6545 = !{i64 16842911}
!6546 = !{i64 16842971}
!6547 = !{i64 16842974}
!6548 = !{i64 16842979}
!6549 = !{i64 16842981}
!6550 = !{i64 16842983}
!6551 = !{i64 16842996}
!6552 = !{i64 16843000}
!6553 = !{i64 16842995}
!6554 = !{i64 16843009}
!6555 = !{i64 16843015}
!6556 = !{i64 16843017}
!6557 = !{i64 16843023}
!6558 = !{i64 16843031}
!6559 = !{i64 16843035}
!6560 = !{i64 16843038}
!6561 = !{i64 16843039}
!6562 = !{i64 16843043}
!6563 = !{i64 16843040}
!6564 = !{i64 16843048}
!6565 = !{i64 16843050}
!6566 = !{i64 16842998}
!6567 = !{i64 16843052}
!6568 = !{i64 16843057}
!6569 = !{i64 16843060}
!6570 = !{i64 16843063}
!6571 = !{i64 16843068}
!6572 = !{i64 16843073}
!6573 = !{i64 16843081}
!6574 = !{i64 16843084}
!6575 = !{i64 16843095}
!6576 = !{i64 16843089}
!6577 = !{i64 16843092}
!6578 = !{i64 16843100}
!6579 = !{i64 16843109}
!6580 = !{i64 16843112}
!6581 = !{i64 16843116}
!6582 = !{i64 16843121}
!6583 = !{i64 16843132}
!6584 = !{i64 16843133}
!6585 = !{i64 16843138}
!6586 = !{i64 16843142}
!6587 = !{i64 16843147}
!6588 = !{i64 16843150}
!6589 = !{i64 16843155}
!6590 = !{i64 16843159}
!6591 = !{i64 16843164}
!6592 = !{i64 16843174}
!6593 = !{i64 16843219}
!6594 = !{i64 16843256}
!6595 = !{i64 16843260}
!6596 = !{i64 16843266}
!6597 = !{i64 16843268}
!6598 = !{i64 16843270}
!6599 = !{i64 16843272}
!6600 = !{i64 16843280}
!6601 = !{i64 16843284}
!6602 = !{i64 16843286}
!6603 = !{i64 16843290}
!6604 = !{i64 16843291}
!6605 = !{i64 16843323}
!6606 = !{i64 16843328}
!6607 = !{i64 16843334}
!6608 = !{i64 16843343}
!6609 = !{i64 16843347}
!6610 = !{i64 16843352}
!6611 = !{i64 16843355}
!6612 = !{i64 16843360}
!6613 = !{i64 16843364}
!6614 = !{i64 16843365}
!6615 = !{i64 16843370}
!6616 = !{i64 16843376}
!6617 = !{i64 16843382}
!6618 = !{i64 16843383}
!6619 = !{i64 16843385}
!6620 = !{i64 16843387}
!6621 = !{i64 16843390}
!6622 = !{i64 16843404}
!6623 = !{i64 16843411}
!6624 = !{i64 16843419}
!6625 = !{i64 16843424}
!6626 = !{i64 16843426}
!6627 = !{i64 16843428}
!6628 = !{i64 16843435}
!6629 = !{i64 16843441}
!6630 = !{i64 16843444}
!6631 = !{i64 16843447}
!6632 = !{i64 16843534}
!6633 = !{i64 16843536}
!6634 = !{i64 16843539}
!6635 = !{i64 16843559}
!6636 = !{i64 16843565}
!6637 = !{i64 16843603}
!6638 = !{i64 16843609}
!6639 = !{i64 16843614}
!6640 = !{i64 16843617}
!6641 = !{i64 16843620}
!6642 = !{i64 16843622}
!6643 = !{i64 16843624}
!6644 = !{i64 16843628}
!6645 = !{i64 16843633}
!6646 = !{i64 16843637}
!6647 = !{i64 16843640}
!6648 = !{i64 16843711}
!6649 = !{i64 16843716}
!6650 = !{i64 16843725}
!6651 = !{i64 16843731}
!6652 = !{i64 16843743}
!6653 = !{i64 16843746}
!6654 = !{i64 16843748}
!6655 = !{i64 16843760}
!6656 = !{i64 16843769}
!6657 = !{i64 16843772}
!6658 = !{i64 16843779}
!6659 = !{i64 16843787}
!6660 = !{i64 16843755}
!6661 = !{i64 16843789}
!6662 = !{i64 16843791}
!6663 = !{i64 16843800}
!6664 = !{i64 16843808}
!6665 = !{i64 16843811}
!6666 = !{i64 16843825}
!6667 = !{i64 16843828}
!6668 = !{i64 16843830}
!6669 = !{i64 16843842}
!6670 = !{i64 16843864}
!6671 = !{i64 16843869}
!6672 = !{i64 16843873}
!6673 = !{i64 16843878}
!6674 = !{i64 16843881}
!6675 = !{i64 16843894}
!6676 = !{i64 16843890}
!6677 = !{i64 16843892}
!6678 = !{i64 16843897}
!6679 = !{i64 16843903}
!6680 = !{i64 16843907}
!6681 = !{i64 16843908}
!6682 = !{i64 16843910}
!6683 = !{i64 16843912}
!6684 = !{i64 16843914}
!6685 = !{i64 16843919}
!6686 = !{i64 16843922}
!6687 = !{i64 16843927}
!6688 = !{i64 16844053}
!6689 = !{i64 16844085}
!6690 = !{i64 16844087}
!6691 = !{i64 16844090}
!6692 = !{i64 16844210}
!6693 = !{i64 16844214}
!6694 = !{i64 16844217}
!6695 = !{i64 16844219}
!6696 = !{i64 16844222}
!6697 = !{i64 16844227}
!6698 = !{i64 16844232}
!6699 = !{i64 16844236}
!6700 = !{i64 16844239}
!6701 = !{i64 16844244}
!6702 = !{i64 16844245}
!6703 = !{i64 16844246}
!6704 = !{i64 16844252}
!6705 = !{i64 16844263}
!6706 = !{i64 16844266}
!6707 = !{i64 16844269}
!6708 = !{i64 16844271}
!6709 = !{i64 16844272}
!6710 = !{i64 16844275}
!6711 = !{i64 16844285}
!6712 = !{i64 16844380}
!6713 = !{i64 16844407}
!6714 = !{i64 16844409}
!6715 = !{i64 16844399}
!6716 = !{i64 16844400}
!6717 = !{i64 16844411}
!6718 = !{i64 16844417}
!6719 = !{i64 16844418}
!6720 = !{i64 16844420}
!6721 = !{i64 16844423}
!6722 = !{i64 16844426}
!6723 = !{i64 16844427}
!6724 = !{i64 16844429}
!6725 = !{i64 16844431}
!6726 = !{i64 16844448}
!6727 = !{i64 16844451}
!6728 = !{i64 16844453}
!6729 = !{i64 16844454}
!6730 = !{i64 16844463}
!6731 = !{i64 16844466}
!6732 = !{i64 16844470}
!6733 = !{i64 16844477}
!6734 = !{i64 16844483}
!6735 = !{i64 16844485}
!6736 = !{i64 16844492}
!6737 = !{i64 16844442}
!6738 = !{i64 16844498}
!6739 = !{i64 16844501}
!6740 = !{i64 16844506}
!6741 = !{i64 16844550}
!6742 = !{i64 16844556}
!6743 = !{i64 16844606}
!6744 = !{i64 16844650}
!6745 = !{i64 16844652}
!6746 = !{i64 16844706}
!6747 = !{i64 16844784}
!6748 = !{i64 16844793}
!6749 = !{i64 16844802}
!6750 = !{i64 16844813}
!6751 = !{i64 16844820}
!6752 = !{i64 16844822}
!6753 = !{i64 16844825}
!6754 = !{i64 16844827}
!6755 = !{i64 16844831}
!6756 = !{i64 16844838}
!6757 = !{i64 16844845}
!6758 = !{i64 16844846}
!6759 = !{i64 16844933}
!6760 = !{i64 16844940}
!6761 = !{i64 16844947}
!6762 = !{i64 16844952}
!6763 = !{i64 16844954}
!6764 = !{i64 16844957}
!6765 = !{i64 16844966}
!6766 = !{i64 16844972}
!6767 = !{i64 16844981}
!6768 = !{i64 16844983}
!6769 = !{i64 16844985}
!6770 = !{i64 16844991}
!6771 = !{i64 16844994}
!6772 = !{i64 16844997}
!6773 = !{i64 16844999}
!6774 = !{i64 16845004}
!6775 = !{i64 16845005}
!6776 = !{i64 16845010}
!6777 = !{i64 16845019}
!6778 = !{i64 16845020}
!6779 = !{i64 16845025}
!6780 = !{i64 16845033}
!6781 = !{i64 16845036}
!6782 = !{i64 16845037}
!6783 = !{i64 16845038}
!6784 = !{i64 16845043}
!6785 = !{i64 16845044}
!6786 = !{i64 16845048}
!6787 = !{i64 16845087}
!6788 = !{i64 16845093}
!6789 = !{i64 16845095}
!6790 = !{i64 16845101}
!6791 = !{i64 16845161}
!6792 = !{i64 16845162}
!6793 = !{i64 16845168}
!6794 = !{i64 16845170}
!6795 = !{i64 16845174}
!6796 = !{i64 16845125}
!6797 = !{i64 16845137}
!6798 = !{i64 16845152}
!6799 = !{i64 16845212}
!6800 = !{i64 16845220}
!6801 = !{i64 16845224}
!6802 = !{i64 16845230}
!6803 = !{i64 16845238}
!6804 = !{i64 16845241}
!6805 = !{i64 16845247}
!6806 = !{i64 16845255}
!6807 = !{i64 16845256}
!6808 = !{i64 16845258}
!6809 = !{i64 16845263}
!6810 = !{i64 16845267}
!6811 = !{i64 16845274}
!6812 = !{i64 16845276}
!6813 = !{i64 16845279}
!6814 = !{i64 16845284}
!6815 = !{i64 16845288}
!6816 = !{i64 16845291}
!6817 = !{i64 16845296}
!6818 = !{i64 16845299}
!6819 = !{i64 16845308}
!6820 = !{i64 16845317}
!6821 = !{i64 16845323}
!6822 = !{i64 16845332}
!6823 = !{i64 16845338}
!6824 = !{i64 16845343}
!6825 = !{i64 16845345}
!6826 = !{i64 16845351}
!6827 = !{i64 16845355}
!6828 = !{i64 16845360}
!6829 = !{i64 16845407}
!6830 = !{i64 16845409}
!6831 = !{i64 16845416}
!6832 = !{i64 16845450}
!6833 = !{i64 16845452}
!6834 = !{i64 16845454}
!6835 = !{i64 16845477}
!6836 = !{i64 16845488}
!6837 = !{i64 16845493}
!6838 = !{i64 16845495}
!6839 = !{i64 16845498}
!6840 = !{i64 16845529}
!6841 = !{i64 16845595}
!6842 = !{i64 16845661}
!6843 = !{i64 16845733}
!6844 = !{i64 16845746}
!6845 = !{i64 16845816}
!6846 = !{i64 16845837}
!6847 = !{i64 16845847}
!6848 = !{i64 16845853}
!6849 = !{i64 16845858}
!6850 = !{i64 16845861}
!6851 = !{i64 16845864}
!6852 = !{i64 16845875}
!6853 = !{i64 16845878}
!6854 = !{i64 16845883}
!6855 = !{i64 16845885}
!6856 = !{i64 16845890}
!6857 = !{i64 16845894}
!6858 = !{i64 16845897}
!6859 = !{i64 16845906}
!6860 = !{i64 16845923}
!6861 = !{i64 16845929}
!6862 = !{i64 16845935}
!6863 = !{i64 16845937}
!6864 = !{i64 16845941}
!6865 = !{i64 16845943}
!6866 = !{i64 16845949}
!6867 = !{i64 16845951}
!6868 = !{i64 16845954}
!6869 = !{i64 16845957}
!6870 = !{i64 16845959}
!6871 = !{i64 16845962}
!6872 = !{i64 16845964}
!6873 = !{i64 16845966}
!6874 = !{i64 16845971}
!6875 = !{i64 16845973}
!6876 = !{i64 16845974}
!6877 = !{i64 16845977}
!6878 = !{i64 16845978}
!6879 = !{i64 16845988}
!6880 = !{i64 16846091}
!6881 = !{i64 16846092}
!6882 = !{i64 16846097}
!6883 = !{i64 16846100}
!6884 = !{i64 16846102}
!6885 = !{i64 16846107}
!6886 = !{i64 16846109}
!6887 = !{i64 16846111}
!6888 = !{i64 16846114}
!6889 = !{i64 16846115}
!6890 = !{i64 16846116}
!6891 = !{i64 16846118}
!6892 = !{i64 16846119}
!6893 = !{i64 16846125}
!6894 = !{i64 16846128}
!6895 = !{i64 16846132}
!6896 = !{i64 16846133}
!6897 = !{i64 16846135}
!6898 = !{i64 16846140}
!6899 = !{i64 16846146}
!6900 = !{i64 16846148}
!6901 = !{i64 16846130}
!6902 = !{i64 16846144}
!6903 = !{i64 16846145}
!6904 = !{i64 16846150}
!6905 = !{i64 16846155}
!6906 = !{i64 16846157}
!6907 = !{i64 16846184}
!6908 = !{i64 16846163}
!6909 = !{i64 16846171}
!6910 = !{i64 16846174}
!6911 = !{i64 16846179}
!6912 = !{i64 16846187}
!6913 = !{i64 16846204}
!6914 = !{i64 16846176}
!6915 = !{i64 16846210}
!6916 = !{i64 16846213}
!6917 = !{i64 16846248}
!6918 = !{i64 16846254}
!6919 = !{i64 16846260}
!6920 = !{i64 16846262}
!6921 = !{i64 16846271}
!6922 = !{i64 16846272}
!6923 = !{i64 16846277}
!6924 = !{i64 16846282}
!6925 = !{i64 16846289}
!6926 = !{i64 16846294}
!6927 = !{i64 16846430}
!6928 = !{i64 16846431}
!6929 = !{i64 16846477}
!6930 = !{i64 16846487}
!6931 = !{i64 16846496}
!6932 = !{i64 16846535}
!6933 = !{i64 16846538}
!6934 = !{i64 16846550}
!6935 = !{i64 16846556}
!6936 = !{i64 16846562}
!6937 = !{i64 16846565}
!6938 = !{i64 16846568}
!6939 = !{i64 16846572}
!6940 = !{i64 16846574}
!6941 = !{i64 16846583}
!6942 = !{i64 16846584}
!6943 = !{i64 16846566}
!6944 = !{i64 16846586}
!6945 = !{i64 16846589}
!6946 = !{i64 16846597}
!6947 = !{i64 16846615}
!6948 = !{i64 16846634}
!6949 = !{i64 16846636}
!6950 = !{i64 16846644}
!6951 = !{i64 16846648}
!6952 = !{i64 16846673}
!6953 = !{i64 16846676}
!6954 = !{i64 16846684}
!6955 = !{i64 16846691}
!6956 = !{i64 16846692}
!6957 = !{i64 16846694}
!6958 = !{i64 16846618}
!6959 = !{i64 16846688}
!6960 = !{i64 16846658}
!6961 = !{i64 16846700}
!6962 = !{i64 16846711}
!6963 = !{i64 16846713}
!6964 = !{i64 16846718}
!6965 = !{i64 16846732}
!6966 = !{i64 16846737}
!6967 = !{i64 16846740}
!6968 = !{i64 16846742}
!6969 = !{i64 16846748}
!6970 = !{i64 16846753}
!6971 = !{i64 16846772}
!6972 = !{i64 16846807}
!6973 = !{i64 16846902}
!6974 = !{i64 16846928}
!6975 = !{i64 16846976}
!6976 = !{i64 16847039}
!6977 = !{i64 16847042}
!6978 = !{i64 16847055}
!6979 = !{i64 16847059}
!6980 = !{i64 16847064}
!6981 = !{i64 16847069}
!6982 = !{i64 16847077}
!6983 = !{i64 16847079}
!6984 = !{i64 16847082}
!6985 = !{i64 16847085}
!6986 = !{i64 16847087}
!6987 = !{i64 16847089}
!6988 = !{i64 16847090}
!6989 = !{i64 16847093}
!6990 = !{i64 16847099}
!6991 = !{i64 16847104}
!6992 = !{i64 16847110}
!6993 = !{i64 16847115}
!6994 = !{i64 16847118}
!6995 = !{i64 16847304}
!6996 = !{i64 16847309}
!6997 = !{i64 16847311}
!6998 = !{i64 16847317}
!6999 = !{i64 16847318}
!7000 = !{i64 16847330}
!7001 = !{i64 16847338}
!7002 = !{i64 16847341}
!7003 = !{i64 16847347}
!7004 = !{i64 16847351}
!7005 = !{i64 16847357}
!7006 = !{i64 16847384}
!7007 = !{i64 16847387}
!7008 = !{i64 16847461}
!7009 = !{i64 16847476}
!7010 = !{i64 16847496}
!7011 = !{i64 16847504}
!7012 = !{i64 16847506}
!7013 = !{i64 16847511}
!7014 = !{i64 16847512}
!7015 = !{i64 16847502}
!7016 = !{i64 16847524}
!7017 = !{i64 16847531}
!7018 = !{i64 16847533}
!7019 = !{i64 16847539}
!7020 = !{i64 16847540}
!7021 = !{i64 16847543}
!7022 = !{i64 16847548}
!7023 = !{i64 16847551}
!7024 = !{i64 16847556}
!7025 = !{i64 16847565}
!7026 = !{i64 16847571}
!7027 = !{i64 16847576}
!7028 = !{i64 16847578}
!7029 = !{i64 16847581}
!7030 = !{i64 16847586}
!7031 = !{i64 16847589}
!7032 = !{i64 16847591}
!7033 = !{i64 16847596}
!7034 = !{i64 16847603}
!7035 = !{i64 16847605}
!7036 = !{i64 16847610}
!7037 = !{i64 16847612}
!7038 = !{i64 16847618}
!7039 = !{i64 16847625}
!7040 = !{i64 16847627}
!7041 = !{i64 16847630}
!7042 = !{i64 16847633}
!7043 = !{i64 16847642}
!7044 = !{i64 16847645}
!7045 = !{i64 16847650}
!7046 = !{i64 16847653}
!7047 = !{i64 16847660}
!7048 = !{i64 16847666}
!7049 = !{i64 16847667}
!7050 = !{i64 16847688}
!7051 = !{i64 16847690}
!7052 = !{i64 16847694}
!7053 = !{i64 16847734}
!7054 = !{i64 16847747}
!7055 = !{i64 16847753}
!7056 = !{i64 16847764}
!7057 = !{i64 16847777}
!7058 = !{i64 16847779}
!7059 = !{i64 16847789}
!7060 = !{i64 16847795}
!7061 = !{i64 16847797}
!7062 = !{i64 16847799}
!7063 = !{i64 16847802}
!7064 = !{i64 16847807}
!7065 = !{i64 16847810}
!7066 = !{i64 16847813}
!7067 = !{i64 16847815}
!7068 = !{i64 16847818}
!7069 = !{i64 16847824}
!7070 = !{i64 16847832}
!7071 = !{i64 16847838}
!7072 = !{i64 16847840}
!7073 = !{i64 16847843}
!7074 = !{i64 16847848}
!7075 = !{i64 16847851}
!7076 = !{i64 16847854}
!7077 = !{i64 16847859}
!7078 = !{i64 16847863}
!7079 = !{i64 16847877}
!7080 = !{i64 16847882}
!7081 = !{i64 16847885}
!7082 = !{i64 16847895}
!7083 = !{i64 16847915}
!7084 = !{i64 16847932}
!7085 = !{i64 16847939}
!7086 = !{i64 16847956}
!7087 = !{i64 16847961}
!7088 = !{i64 16847974}
!7089 = !{i64 16847980}
!7090 = !{i64 16847983}
!7091 = !{i64 16848069}
!7092 = !{i64 16848130}
!7093 = !{i64 16848132}
!7094 = !{i64 16848134}
!7095 = !{i64 16848136}
!7096 = !{i64 16848140}
!7097 = !{i64 16848143}
!7098 = !{i64 16848150}
!7099 = !{i64 16848162}
!7100 = !{i64 16848167}
!7101 = !{i64 16848170}
!7102 = !{i64 16848175}
!7103 = !{i64 16848180}
!7104 = !{i64 16848182}
!7105 = !{i64 16848187}
!7106 = !{i64 16848201}
!7107 = !{i64 16848177}
!7108 = !{i64 16848213}
!7109 = !{i64 16848229}
!7110 = !{i64 16848243}
!7111 = !{i64 16848253}
!7112 = !{i64 16848258}
!7113 = !{i64 16848259}
!7114 = !{i64 16848265}
!7115 = !{i64 16848267}
!7116 = !{i64 16848365}
!7117 = !{i64 16848388}
!7118 = !{i64 16848399}
!7119 = !{i64 16848401}
!7120 = !{i64 16848404}
!7121 = !{i64 16848408}
!7122 = !{i64 16848414}
!7123 = !{i64 16848425}
!7124 = !{i64 16848429}
!7125 = !{i64 16848435}
!7126 = !{i64 16848444}
!7127 = !{i64 16848447}
!7128 = !{i64 16848450}
!7129 = !{i64 16848456}
!7130 = !{i64 16848459}
!7131 = !{i64 16848464}
!7132 = !{i64 16848467}
!7133 = !{i64 16848479}
!7134 = !{i64 16848462}
!7135 = !{i64 16848486}
!7136 = !{i64 16848493}
!7137 = !{i64 16848496}
!7138 = !{i64 16848498}
!7139 = !{i64 16848500}
!7140 = !{i64 16848510}
!7141 = !{i64 16848515}
!7142 = !{i64 16848518}
!7143 = !{i64 16848521}
!7144 = !{i64 16848529}
!7145 = !{i64 16848534}
!7146 = !{i64 16848536}
!7147 = !{i64 16848556}
!7148 = !{i64 16848565}
!7149 = !{i64 16848570}
!7150 = !{i64 16848573}
!7151 = !{i64 16848576}
!7152 = !{i64 16848578}
!7153 = !{i64 16848581}
!7154 = !{i64 16848583}
!7155 = !{i64 16848585}
!7156 = !{i64 16848588}
!7157 = !{i64 16848591}
!7158 = !{i64 16848594}
!7159 = !{i64 16848595}
!7160 = !{i64 16848600}
!7161 = !{i64 16848586}
!7162 = !{i64 16848590}
!7163 = !{i64 16848602}
!7164 = !{i64 16848603}
!7165 = !{i64 16848611}
!7166 = !{i64 16848612}
!7167 = !{i64 16848615}
!7168 = !{i64 16848623}
!7169 = !{i64 16848642}
!7170 = !{i64 16848645}
!7171 = !{i64 16848649}
!7172 = !{i64 16848655}
!7173 = !{i64 16848656}
!7174 = !{i64 16848662}
!7175 = !{i64 16848663}
!7176 = !{i64 16848665}
!7177 = !{i64 16848667}
!7178 = !{i64 16848678}
!7179 = !{i64 16848685}
!7180 = !{i64 16848690}
!7181 = !{i64 16848696}
!7182 = !{i64 16848708}
!7183 = !{i64 16848709}
!7184 = !{i64 16848711}
!7185 = !{i64 16848780}
!7186 = !{i64 16848784}
!7187 = !{i64 16848769}
!7188 = !{i64 16848772}
!7189 = !{i64 16848774}
!7190 = !{i64 16848789}
!7191 = !{i64 16848797}
!7192 = !{i64 16848800}
!7193 = !{i64 16848807}
!7194 = !{i64 16848802}
!7195 = !{i64 16848833}
!7196 = !{i64 16848835}
!7197 = !{i64 16848839}
!7198 = !{i64 16848841}
!7199 = !{i64 16848848}
!7200 = !{i64 16848851}
!7201 = !{i64 16848853}
!7202 = !{i64 16848856}
!7203 = !{i64 16848859}
!7204 = !{i64 16848861}
!7205 = !{i64 16848864}
!7206 = !{i64 16848867}
!7207 = !{i64 16848870}
!7208 = !{i64 16848876}
!7209 = !{i64 16848881}
!7210 = !{i64 16848887}
!7211 = !{i64 16848890}
!7212 = !{i64 16848893}
!7213 = !{i64 16848896}
!7214 = !{i64 16848898}
!7215 = !{i64 16848901}
!7216 = !{i64 16848904}
!7217 = !{i64 16848907}
!7218 = !{i64 16848910}
!7219 = !{i64 16848915}
!7220 = !{i64 16848922}
!7221 = !{i64 16848930}
!7222 = !{i64 16848927}
!7223 = !{i64 16848937}
!7224 = !{i64 16848941}
!7225 = !{i64 16848924}
!7226 = !{i64 16848943}
!7227 = !{i64 16848948}
!7228 = !{i64 16848951}
!7229 = !{i64 16848953}
!7230 = !{i64 16848960}
!7231 = !{i64 16848963}
!7232 = !{i64 16848969}
!7233 = !{i64 16848988}
!7234 = !{i64 16848995}
!7235 = !{i64 16849001}
!7236 = !{i64 16849007}
!7237 = !{i64 16849013}
!7238 = !{i64 16849015}
!7239 = !{i64 16849016}
!7240 = !{i64 16849019}
!7241 = !{i64 16849024}
!7242 = !{i64 16849027}
!7243 = !{i64 16849034}
!7244 = !{i64 16849036}
!7245 = !{i64 16849042}
!7246 = !{i64 16849044}
!7247 = !{i64 16849050}
!7248 = !{i64 16849051}
!7249 = !{i64 16849056}
!7250 = !{i64 16849061}
!7251 = !{i64 16849064}
!7252 = !{i64 16849069}
!7253 = !{i64 16849073}
!7254 = !{i64 16849079}
!7255 = !{i64 16849130}
!7256 = !{i64 16849148}
!7257 = !{i64 16849150}
!7258 = !{i64 16849154}
!7259 = !{i64 16849155}
!7260 = !{i64 16849157}
!7261 = !{i64 16849162}
!7262 = !{i64 16849168}
!7263 = !{i64 16849202}
!7264 = !{i64 16849249}
!7265 = !{i64 16849269}
!7266 = !{i64 16849271}
!7267 = !{i64 16849273}
!7268 = !{i64 16849275}
!7269 = !{i64 16849277}
!7270 = !{i64 16849278}
!7271 = !{i64 16849280}
!7272 = !{i64 16849282}
!7273 = !{i64 16849286}
!7274 = !{i64 16849289}
!7275 = !{i64 16849298}
!7276 = !{i64 16849299}
!7277 = !{i64 16849306}
!7278 = !{i64 16849311}
!7279 = !{i64 16849328}
!7280 = !{i64 16849365}
!7281 = !{i64 16849370}
!7282 = !{i64 16849372}
!7283 = !{i64 16849375}
!7284 = !{i64 16849377}
!7285 = !{i64 16849380}
!7286 = !{i64 16849382}
!7287 = !{i64 16849386}
!7288 = !{i64 16849398}
!7289 = !{i64 16849402}
!7290 = !{i64 16849404}
!7291 = !{i64 16849408}
!7292 = !{i64 16849410}
!7293 = !{i64 16849412}
!7294 = !{i64 16849418}
!7295 = !{i64 16849430}
!7296 = !{i64 16849432}
!7297 = !{i64 16849438}
!7298 = !{i64 16849440}
!7299 = !{i64 16849446}
!7300 = !{i64 16849456}
!7301 = !{i64 16849452}
!7302 = !{i64 16849466}
!7303 = !{i64 16849468}
!7304 = !{i64 16849487}
!7305 = !{i64 16849493}
!7306 = !{i64 16849499}
!7307 = !{i64 16849501}
!7308 = !{i64 16849503}
!7309 = !{i64 16849506}
!7310 = !{i64 16849511}
!7311 = !{i64 16849515}
!7312 = !{i64 16849517}
!7313 = !{i64 16849520}
!7314 = !{i64 16849526}
!7315 = !{i64 16849539}
!7316 = !{i64 16849540}
!7317 = !{i64 16849547}
!7318 = !{i64 16849550}
!7319 = !{i64 16849559}
!7320 = !{i64 16849564}
!7321 = !{i64 16849589}
!7322 = !{i64 16849603}
!7323 = !{i64 16849606}
!7324 = !{i64 16849608}
!7325 = !{i64 16849610}
!7326 = !{i64 16849613}
!7327 = !{i64 16849619}
!7328 = !{i64 16849621}
!7329 = !{i64 16849624}
!7330 = !{i64 16849626}
!7331 = !{i64 16849629}
!7332 = !{i64 16849631}
!7333 = !{i64 16849634}
!7334 = !{i64 16849636}
!7335 = !{i64 16849638}
!7336 = !{i64 16849641}
!7337 = !{i64 16849647}
!7338 = !{i64 16849649}
!7339 = !{i64 16849633}
!7340 = !{i64 16849656}
!7341 = !{i64 16849669}
!7342 = !{i64 16849692}
!7343 = !{i64 16849695}
!7344 = !{i64 16849696}
!7345 = !{i64 16849697}
!7346 = !{i64 16849702}
!7347 = !{i64 16849730}
!7348 = !{i64 16849733}
!7349 = !{i64 16849742}
!7350 = !{i64 16849744}
!7351 = !{i64 16849751}
!7352 = !{i64 16849757}
!7353 = !{i64 16849759}
!7354 = !{i64 16849764}
!7355 = !{i64 16849767}
!7356 = !{i64 16849772}
!7357 = !{i64 16849781}
!7358 = !{i64 16849787}
!7359 = !{i64 16850041}
!7360 = !{i64 16850042}
!7361 = !{i64 16850043}
!7362 = !{i64 16850050}
!7363 = !{i64 16850051}
!7364 = !{i64 16850054}
!7365 = !{i64 16850063}
!7366 = !{i64 16850066}
!7367 = !{i64 16850069}
!7368 = !{i64 16850071}
!7369 = !{i64 16850078}
!7370 = !{i64 16850081}
!7371 = !{i64 16850083}
!7372 = !{i64 16850088}
!7373 = !{i64 16850089}
!7374 = !{i64 16850092}
!7375 = !{i64 16850106}
!7376 = !{i64 16850112}
!7377 = !{i64 16850118}
!7378 = !{i64 16850120}
!7379 = !{i64 16850121}
!7380 = !{i64 16850123}
!7381 = !{i64 16850134}
!7382 = !{i64 16850141}
!7383 = !{i64 16850147}
!7384 = !{i64 16850153}
!7385 = !{i64 16850156}
!7386 = !{i64 16850166}
!7387 = !{i64 16850168}
!7388 = !{i64 16850221}
!7389 = !{i64 16850230}
!7390 = !{i64 16850305}
!7391 = !{i64 16850308}
!7392 = !{i64 16850316}
!7393 = !{i64 16850322}
!7394 = !{i64 16850324}
!7395 = !{i64 16850328}
!7396 = !{i64 16850336}
!7397 = !{i64 16850342}
!7398 = !{i64 16850348}
!7399 = !{i64 16850367}
!7400 = !{i64 16850351}
!7401 = !{i64 16850354}
!7402 = !{i64 16850360}
!7403 = !{i64 16850373}
!7404 = !{i64 16850377}
!7405 = !{i64 16850379}
!7406 = !{i64 16850380}
!7407 = !{i64 16850434}
!7408 = !{i64 16850452}
!7409 = !{i64 16850454}
!7410 = !{i64 16850456}
!7411 = !{i64 16850458}
!7412 = !{i64 16850462}
!7413 = !{i64 16850469}
!7414 = !{i64 16850473}
!7415 = !{i64 16850487}
!7416 = !{i64 16850514}
!7417 = !{i64 16850518}
!7418 = !{i64 16850522}
!7419 = !{i64 16850525}
!7420 = !{i64 16850546}
!7421 = !{i64 16850550}
!7422 = !{i64 16850553}
!7423 = !{i64 16850555}
!7424 = !{i64 16850561}
!7425 = !{i64 16850566}
!7426 = !{i64 16850570}
!7427 = !{i64 16850572}
!7428 = !{i64 16850580}
!7429 = !{i64 16850583}
!7430 = !{i64 16850586}
!7431 = !{i64 16850589}
!7432 = !{i64 16850591}
!7433 = !{i64 16850593}
!7434 = !{i64 16850595}
!7435 = !{i64 16850598}
!7436 = !{i64 16850606}
!7437 = !{i64 16850608}
!7438 = !{i64 16850624}
!7439 = !{i64 16850630}
!7440 = !{i64 16850631}
!7441 = !{i64 16850634}
!7442 = !{i64 16850636}
!7443 = !{i64 16850644}
!7444 = !{i64 16850650}
!7445 = !{i64 16850652}
!7446 = !{i64 16850654}
!7447 = !{i64 16850660}
!7448 = !{i64 16850675}
!7449 = !{i64 16850700}
!7450 = !{i64 16850704}
!7451 = !{i64 16850708}
!7452 = !{i64 16850710}
!7453 = !{i64 16851083}
!7454 = !{i64 16851132}
!7455 = !{i64 16851134}
!7456 = !{i64 16851137}
!7457 = !{i64 16851143}
!7458 = !{i64 16851145}
!7459 = !{i64 16851152}
!7460 = !{i64 16851155}
!7461 = !{i64 16851161}
!7462 = !{i64 16851164}
!7463 = !{i64 16851170}
!7464 = !{i64 16851173}
!7465 = !{i64 16851179}
!7466 = !{i64 16851181}
!7467 = !{i64 16851184}
!7468 = !{i64 16851186}
!7469 = !{i64 16851191}
!7470 = !{i64 16851189}
!7471 = !{i64 16851194}
!7472 = !{i64 16851204}
!7473 = !{i64 16851209}
!7474 = !{i64 16851213}
!7475 = !{i64 16851216}
!7476 = !{i64 16851221}
!7477 = !{i64 16851226}
!7478 = !{i64 16851228}
!7479 = !{i64 16851230}
!7480 = !{i64 16851232}
!7481 = !{i64 16851241}
!7482 = !{i64 16851238}
!7483 = !{i64 16851246}
!7484 = !{i64 16851248}
!7485 = !{i64 16851250}
!7486 = !{i64 16851255}
!7487 = !{i64 16851259}
!7488 = !{i64 16851263}
!7489 = !{i64 16851266}
!7490 = !{i64 16851271}
!7491 = !{i64 16851272}
!7492 = !{i64 16851280}
!7493 = !{i64 16851301}
!7494 = !{i64 16851304}
!7495 = !{i64 16851307}
!7496 = !{i64 16851312}
!7497 = !{i64 16851315}
!7498 = !{i64 16851322}
!7499 = !{i64 16851327}
!7500 = !{i64 16851334}
!7501 = !{i64 16851340}
!7502 = !{i64 16851341}
!7503 = !{i64 16851343}
!7504 = !{i64 16851345}
!7505 = !{i64 16851347}
!7506 = !{i64 16851350}
!7507 = !{i64 16851356}
!7508 = !{i64 16851361}
!7509 = !{i64 16851365}
!7510 = !{i64 16851369}
!7511 = !{i64 16851371}
!7512 = !{i64 16851372}
!7513 = !{i64 16851373}
!7514 = !{i64 16851376}
!7515 = !{i64 16851379}
!7516 = !{i64 16851384}
!7517 = !{i64 16851389}
!7518 = !{i64 16851507}
!7519 = !{i64 16851392}
!7520 = !{i64 16851447}
!7521 = !{i64 16851448}
!7522 = !{i64 16851444}
!7523 = !{i64 16851453}
!7524 = !{i64 16851463}
!7525 = !{i64 16851472}
!7526 = !{i64 16851474}
!7527 = !{i64 16851480}
!7528 = !{i64 16851483}
!7529 = !{i64 16851495}
!7530 = !{i64 16851505}
!7531 = !{i64 16851510}
!7532 = !{i64 16851511}
!7533 = !{i64 16851514}
!7534 = !{i64 16851520}
!7535 = !{i64 16851525}
!7536 = !{i64 16851528}
!7537 = !{i64 16851532}
!7538 = !{i64 16851535}
!7539 = !{i64 16851541}
!7540 = !{i64 16851543}
!7541 = !{i64 16851550}
!7542 = !{i64 16851553}
!7543 = !{i64 16851557}
!7544 = !{i64 16851565}
!7545 = !{i64 16851571}
!7546 = !{i64 16851577}
!7547 = !{i64 16851580}
!7548 = !{i64 16851597}
!7549 = !{i64 16851603}
!7550 = !{i64 16851609}
!7551 = !{i64 16851611}
!7552 = !{i64 16851612}
!7553 = !{i64 16851616}
!7554 = !{i64 16851619}
!7555 = !{i64 16851621}
!7556 = !{i64 16851691}
!7557 = !{i64 16851693}
!7558 = !{i64 16851695}
!7559 = !{i64 16851697}
!7560 = !{i64 16851700}
!7561 = !{i64 16851702}
!7562 = !{i64 16851705}
!7563 = !{i64 16851710}
!7564 = !{i64 16851735}
!7565 = !{i64 16851741}
!7566 = !{i64 16851854}
!7567 = !{i64 16851857}
!7568 = !{i64 16851859}
!7569 = !{i64 16851867}
!7570 = !{i64 16851872}
!7571 = !{i64 16851876}
!7572 = !{i64 16851883}
!7573 = !{i64 16851900}
!7574 = !{i64 16851935}
!7575 = !{i64 16851944}
!7576 = !{i64 16851960}
!7577 = !{i64 16851961}
!7578 = !{i64 16851954}
!7579 = !{i64 16852065}
!7580 = !{i64 16851956}
!7581 = !{i64 16852078}
!7582 = !{i64 16852079}
!7583 = !{i64 16852083}
!7584 = !{i64 16852089}
!7585 = !{i64 16852093}
!7586 = !{i64 16852090}
!7587 = !{i64 16852094}
!7588 = !{i64 16852096}
!7589 = !{i64 16852551}
!7590 = !{i64 16852552}
!7591 = !{i64 16852553}
!7592 = !{i64 16852563}
!7593 = !{i64 16852565}
!7594 = !{i64 16852566}
!7595 = !{i64 16852568}
!7596 = !{i64 16852574}
!7597 = !{i64 16852577}
!7598 = !{i64 16852581}
!7599 = !{i64 16852582}
!7600 = !{i64 16852590}
!7601 = !{i64 16852592}
!7602 = !{i64 16852600}
!7603 = !{i64 16852604}
!7604 = !{i64 16852656}
!7605 = !{i64 16852660}
!7606 = !{i64 16852670}
!7607 = !{i64 16852675}
!7608 = !{i64 16852676}
!7609 = !{i64 16852677}
!7610 = !{i64 16852686}
!7611 = !{i64 16852688}
!7612 = !{i64 16852694}
!7613 = !{i64 16852701}
!7614 = !{i64 16852713}
!7615 = !{i64 16852715}
!7616 = !{i64 16852720}
!7617 = !{i64 16852752}
!7618 = !{i64 16852824}
!7619 = !{i64 16852844}
!7620 = !{i64 16852845}
!7621 = !{i64 16852846}
!7622 = !{i64 16852862}
!7623 = !{i64 16852866}
!7624 = !{i64 16852868}
!7625 = !{i64 16852870}
!7626 = !{i64 16852873}
!7627 = !{i64 16852892}
!7628 = !{i64 16852896}
!7629 = !{i64 16852898}
!7630 = !{i64 16852906}
!7631 = !{i64 16852926}
!7632 = !{i64 16852929}
!7633 = !{i64 16852932}
!7634 = !{i64 16852962}
!7635 = !{i64 16852968}
!7636 = !{i64 16852975}
!7637 = !{i64 16852982}
!7638 = !{i64 16852989}
!7639 = !{i64 16852992}
!7640 = !{i64 16852993}
!7641 = !{i64 16852996}
!7642 = !{i64 16853002}
!7643 = !{i64 16853007}
!7644 = !{i64 16853009}
!7645 = !{i64 16853023}
!7646 = !{i64 16853028}
!7647 = !{i64 16853032}
!7648 = !{i64 16853039}
!7649 = !{i64 16853042}
!7650 = !{i64 16853050}
!7651 = !{i64 16853051}
!7652 = !{i64 16853055}
!7653 = !{i64 16853060}
!7654 = !{i64 16853098}
!7655 = !{i64 16853102}
!7656 = !{i64 16853111}
!7657 = !{i64 16853113}
!7658 = !{i64 16853115}
!7659 = !{i64 16853118}
!7660 = !{i64 16853156}
!7661 = !{i64 16853158}
!7662 = !{i64 16853165}
!7663 = !{i64 16853169}
!7664 = !{i64 16853174}
!7665 = !{i64 16853179}
!7666 = !{i64 16853187}
!7667 = !{i64 16853189}
!7668 = !{i64 16853211}
!7669 = !{i64 16853224}
!7670 = !{i64 16853191}
!7671 = !{i64 16853200}
!7672 = !{i64 16853205}
!7673 = !{i64 16853248}
!7674 = !{i64 16853253}
!7675 = !{i64 16853255}
!7676 = !{i64 16853265}
!7677 = !{i64 16853275}
!7678 = !{i64 16853280}
!7679 = !{i64 16853456}
!7680 = !{i64 16853459}
!7681 = !{i64 16853461}
!7682 = !{i64 16853647}
!7683 = !{i64 16853653}
!7684 = !{i64 16853655}
!7685 = !{i64 16853661}
!7686 = !{i64 16853668}
!7687 = !{i64 16853670}
!7688 = !{i64 16853672}
!7689 = !{i64 16853675}
!7690 = !{i64 16853677}
!7691 = !{i64 16853744}
!7692 = !{i64 16853778}
!7693 = !{i64 16853785}
!7694 = !{i64 16853787}
!7695 = !{i64 16853791}
!7696 = !{i64 16853794}
!7697 = !{i64 16853797}
!7698 = !{i64 16853805}
!7699 = !{i64 16853809}
!7700 = !{i64 16853824}
!7701 = !{i64 16853830}
!7702 = !{i64 16853832}
!7703 = !{i64 16853842}
!7704 = !{i64 16853844}
!7705 = !{i64 16853850}
!7706 = !{i64 16853852}
!7707 = !{i64 16853857}
!7708 = !{i64 16853859}
!7709 = !{i64 16853861}
!7710 = !{i64 16853866}
!7711 = !{i64 16853872}
!7712 = !{i64 16853874}
!7713 = !{i64 16853884}
!7714 = !{i64 16859774}
!7715 = !{i64 16859776}
!7716 = !{i64 16859777}
!7717 = !{i64 16859779}
!7718 = !{i64 16859782}
!7719 = !{i64 16859784}
!7720 = !{i64 16859786}
!7721 = !{i64 16859788}
!7722 = !{i64 16859791}
!7723 = !{i64 16859794}
!7724 = !{i64 16859796}
!7725 = !{i64 16859797}
!7726 = !{i64 16859799}
!7727 = !{i64 16859801}
!7728 = !{i64 16859803}
!7729 = !{i64 16859805}
!7730 = !{i64 16859807}
!7731 = !{i64 16859809}
!7732 = !{i64 16859811}
!7733 = !{i64 16859813}
!7734 = !{i64 16859815}
!7735 = !{i64 16859817}
!7736 = !{i64 16859819}
!7737 = !{i64 16859822}
!7738 = !{i64 16859826}
!7739 = !{i64 16859830}
!7740 = !{i64 16859834}
!7741 = !{i64 16859836}
!7742 = !{i64 16859838}
!7743 = !{i64 16859840}
!7744 = !{i64 16859841}
!7745 = !{i64 16859843}
!7746 = !{i64 16859849}
!7747 = !{i64 16859851}
!7748 = !{i64 16859857}
!7749 = !{i64 16859859}
!7750 = !{i64 16859866}
!7751 = !{i64 16859868}
!7752 = !{i64 16859869}
!7753 = !{i64 16859871}
!7754 = !{i64 16859877}
!7755 = !{i64 16859879}
!7756 = !{i64 16859885}
!7757 = !{i64 16859887}
!7758 = !{i64 16859893}
!7759 = !{i64 16859895}
!7760 = !{i64 16859897}
!7761 = !{i64 16859899}
!7762 = !{i64 16859901}
!7763 = !{i64 16859903}
!7764 = !{i64 16861628}
!7765 = !{i64 16861630}
!7766 = !{i64 16861632}
!7767 = !{i64 16861634}
!7768 = !{i64 16861636}
!7769 = !{i64 16861638}
!7770 = !{i64 16861640}
!7771 = !{i64 16861642}
!7772 = !{i64 16861644}
!7773 = !{i64 16861646}
!7774 = !{i64 16861648}
!7775 = !{i64 16861650}
!7776 = !{i64 16861652}
!7777 = !{i64 16861654}
!7778 = !{i64 16861656}
!7779 = !{i64 16861658}
!7780 = !{i64 16861660}
!7781 = !{i64 16861662}
!7782 = !{i64 16861664}
!7783 = !{i64 16861666}
!7784 = !{i64 16861668}
!7785 = !{i64 16861670}
!7786 = !{i64 16861672}
!7787 = !{i64 16861674}
!7788 = !{i64 16861676}
!7789 = !{i64 16861678}
!7790 = !{i64 16861680}
!7791 = !{i64 16861682}
!7792 = !{i64 16861684}
!7793 = !{i64 16861686}
!7794 = !{i64 16861688}
!7795 = !{i64 16861690}
!7796 = !{i64 16861692}
!7797 = !{i64 16861694}
